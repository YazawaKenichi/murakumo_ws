
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c24  0800db78  0800db78  0001db78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e79c  0800e79c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e79c  0800e79c  0001e79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7a4  0800e7a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7a4  0800e7a4  0001e7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7a8  0800e7a8  0001e7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e7ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  200001e0  0800e98c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0800e98c  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034a77  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005270  00000000  00000000  00054c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00059ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  0005b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a3a  00000000  00000000  0005d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022517  00000000  00000000  00084a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4cc9  00000000  00000000  000a6f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017bc1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db0  00000000  00000000  0017bc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db5c 	.word	0x0800db5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800db5c 	.word	0x0800db5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f005 f8fa 	bl	8006200 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f005 ff4c 	bl	8006eb2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f006 f881 	bl	800712a <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f005 f8e6 	bl	8006200 <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20000408 	.word	0x20000408

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f005 f8c9 	bl	8006200 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f005 ff1b 	bl	8006eb2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f005 ff15 	bl	8006eb2 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f005 f8b6 	bl	8006200 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000408 	.word	0x20000408

080010a4 <imu_init>:

void imu_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	printf("Starting SPI2 (IMU)\r\n");
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <imu_init+0x40>)
 80010ac:	f008 ffb0 	bl	800a010 <puts>
	uint8_t wai, ret;
	ret = imu_initialize(&wai);
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f820 	bl	80010f8 <imu_initialize>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <imu_init+0x44>)
 80010c2:	f008 ff1f 	bl	8009f04 <iprintf>
	if(ret == 1)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d103      	bne.n	80010d4 <imu_init+0x30>
	{
		printf("SPI INIT COLLECT!\r\n");
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <imu_init+0x48>)
 80010ce:	f008 ff9f 	bl	800a010 <puts>
	}
	else
	{
		printf("SPI INIT FAILURE x_x \r\n");
	}
}
 80010d2:	e002      	b.n	80010da <imu_init+0x36>
		printf("SPI INIT FAILURE x_x \r\n");
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <imu_init+0x4c>)
 80010d6:	f008 ff9b 	bl	800a010 <puts>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800db78 	.word	0x0800db78
 80010e8:	0800db90 	.word	0x0800db90
 80010ec:	0800dba0 	.word	0x0800dba0
 80010f0:	0800dbb4 	.word	0x0800dbb4
 80010f4:	00000000 	.word	0x00000000

080010f8 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4834      	ldr	r0, [pc, #208]	; (80011d8 <imu_initialize+0xe0>)
 8001108:	f005 f87a 	bl	8006200 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <imu_initialize+0xe4>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <imu_initialize+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <imu_initialize+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <imu_initialize+0xe8>)
 8001124:	a32a      	add	r3, pc, #168	; (adr r3, 80011d0 <imu_initialize+0xd8>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <imu_initialize+0xec>)
 8001130:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <imu_initialize+0xe4>)
 8001132:	6811      	ldr	r1, [r2, #0]
 8001134:	6019      	str	r1, [r3, #0]
 8001136:	8892      	ldrh	r2, [r2, #4]
 8001138:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <imu_initialize+0xec>)
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <imu_initialize+0xe4>)
 800113e:	3306      	adds	r3, #6
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	6019      	str	r1, [r3, #0]
 8001144:	8892      	ldrh	r2, [r2, #4]
 8001146:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <imu_initialize+0xf0>)
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <imu_initialize+0xe4>)
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	6019      	str	r1, [r3, #0]
 8001150:	8892      	ldrh	r2, [r2, #4]
 8001152:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <imu_initialize+0xf0>)
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <imu_initialize+0xe4>)
 8001158:	3306      	adds	r3, #6
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	6019      	str	r1, [r3, #0]
 800115e:	8892      	ldrh	r2, [r2, #4]
 8001160:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = imu_read_byte(0x00);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff42 	bl	8000fec <imu_read_byte>
 8001168:	4603      	mov	r3, r0
 800116a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2be0      	cmp	r3, #224	; 0xe0
 8001176:	d11e      	bne.n	80011b6 <imu_initialize+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800117c:	2101      	movs	r1, #1
 800117e:	2006      	movs	r0, #6
 8001180:	f7ff ff62 	bl	8001048 <imu_write_byte>
		HAL_Delay(100);
 8001184:	2064      	movs	r0, #100	; 0x64
 8001186:	f003 fa37 	bl	80045f8 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 800118a:	2110      	movs	r1, #16
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff ff5b 	bl	8001048 <imu_write_byte>
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 8001192:	2120      	movs	r1, #32
 8001194:	207f      	movs	r0, #127	; 0x7f
 8001196:	f7ff ff57 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		imu_write_byte(0x01, 0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800119a:	2107      	movs	r1, #7
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ff53 	bl	8001048 <imu_write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		imu_write_byte(0x14, 0x00);	//range±2g
 80011a2:	2100      	movs	r1, #0
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff ff4f 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		imu_write_byte(REG_BANK_SEL, 0x00);	//USER_BANK0
 80011aa:	2100      	movs	r1, #0
 80011ac:	207f      	movs	r0, #127	; 0x7f
 80011ae:	f7ff ff4b 	bl	8001048 <imu_write_byte>
		imu_set_offset();
 80011b2:	f000 f81b 	bl	80011ec <imu_set_offset>
	}
#if USE_NCS
	CS_SET;
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <imu_initialize+0xe0>)
 80011be:	f005 f81f 	bl	8006200 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	a2529d39 	.word	0xa2529d39
 80011d4:	3f91df46 	.word	0x3f91df46
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000210 	.word	0x20000210
 80011e0:	20000208 	.word	0x20000208
 80011e4:	20000230 	.word	0x20000230
 80011e8:	20000224 	.word	0x20000224

080011ec <imu_set_offset>:
	CS_SET;
#endif
}

void imu_set_offset()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	imu_read();
 80011f0:	f000 f80e 	bl	8001210 <imu_read>
	inertial_offset = inertial;
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <imu_set_offset+0x1c>)
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <imu_set_offset+0x20>)
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	6851      	ldr	r1, [r2, #4]
 80011fc:	6892      	ldr	r2, [r2, #8]
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	6059      	str	r1, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000218 	.word	0x20000218
 800120c:	20000230 	.word	0x20000230

08001210 <imu_read>:

void imu_read()
{
 8001210:	b598      	push	{r3, r4, r7, lr}
 8001212:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)imu_read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_XOUT_L));
 8001214:	202d      	movs	r0, #45	; 0x2d
 8001216:	f7ff fee9 	bl	8000fec <imu_read_byte>
 800121a:	4603      	mov	r3, r0
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21c      	sxth	r4, r3
 8001220:	202e      	movs	r0, #46	; 0x2e
 8001222:	f7ff fee3 	bl	8000fec <imu_read_byte>
 8001226:	4603      	mov	r3, r0
 8001228:	b21b      	sxth	r3, r3
 800122a:	4323      	orrs	r3, r4
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <imu_read+0xbc>)
 8001230:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)imu_read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_YOUT_L));
 8001232:	202f      	movs	r0, #47	; 0x2f
 8001234:	f7ff feda 	bl	8000fec <imu_read_byte>
 8001238:	4603      	mov	r3, r0
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21c      	sxth	r4, r3
 800123e:	2030      	movs	r0, #48	; 0x30
 8001240:	f7ff fed4 	bl	8000fec <imu_read_byte>
 8001244:	4603      	mov	r3, r0
 8001246:	b21b      	sxth	r3, r3
 8001248:	4323      	orrs	r3, r4
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <imu_read+0xbc>)
 800124e:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)imu_read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_ZOUT_L));
 8001250:	2031      	movs	r0, #49	; 0x31
 8001252:	f7ff fecb 	bl	8000fec <imu_read_byte>
 8001256:	4603      	mov	r3, r0
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21c      	sxth	r4, r3
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f7ff fec5 	bl	8000fec <imu_read_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	b21b      	sxth	r3, r3
 8001266:	4323      	orrs	r3, r4
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <imu_read+0xbc>)
 800126c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800126e:	2033      	movs	r0, #51	; 0x33
 8001270:	f7ff febc 	bl	8000fec <imu_read_byte>
 8001274:	4603      	mov	r3, r0
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21c      	sxth	r4, r3
 800127a:	2034      	movs	r0, #52	; 0x34
 800127c:	f7ff feb6 	bl	8000fec <imu_read_byte>
 8001280:	4603      	mov	r3, r0
 8001282:	b21b      	sxth	r3, r3
 8001284:	4323      	orrs	r3, r4
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <imu_read+0xbc>)
 800128a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 800128c:	2035      	movs	r0, #53	; 0x35
 800128e:	f7ff fead 	bl	8000fec <imu_read_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21c      	sxth	r4, r3
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f7ff fea7 	bl	8000fec <imu_read_byte>
 800129e:	4603      	mov	r3, r0
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4323      	orrs	r3, r4
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <imu_read+0xbc>)
 80012a8:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 80012aa:	2037      	movs	r0, #55	; 0x37
 80012ac:	f7ff fe9e 	bl	8000fec <imu_read_byte>
 80012b0:	4603      	mov	r3, r0
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21c      	sxth	r4, r3
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f7ff fe98 	bl	8000fec <imu_read_byte>
 80012bc:	4603      	mov	r3, r0
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4323      	orrs	r3, r4
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <imu_read+0xbc>)
 80012c6:	815a      	strh	r2, [r3, #10]
}
 80012c8:	bf00      	nop
 80012ca:	bd98      	pop	{r3, r4, r7, pc}
 80012cc:	20000230 	.word	0x20000230

080012d0 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 80012d4:	f000 f804 	bl	80012e0 <rotary_set_playmode>
    rotary_set_value();
 80012d8:	f000 f81a 	bl	8001310 <rotary_set_value>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <rotary_set_playmode>:

void rotary_set_playmode()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 80012e4:	f000 f82c 	bl	8001340 <rotary_read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <rotary_set_playmode+0x14>)
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000023c 	.word	0x2000023c

080012f8 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    return playmode;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <rotary_read_playmode+0x14>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000023c 	.word	0x2000023c

08001310 <rotary_set_value>:

void rotary_set_value()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    value = rotary_read();
 8001314:	f000 f814 	bl	8001340 <rotary_read>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b01      	ldr	r3, [pc, #4]	; (8001324 <rotary_set_value+0x14>)
 800131e:	701a      	strb	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000023d 	.word	0x2000023d

08001328 <rotary_read_value>:

uint8_t rotary_read_value()
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    return value;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <rotary_read_value+0x14>)
 800132e:	781b      	ldrb	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000023d 	.word	0x2000023d

08001340 <rotary_read>:

uint8_t rotary_read()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <rotary_read+0x8c>)
 8001350:	f004 ff3e 	bl	80061d0 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4413      	add	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136c:	4817      	ldr	r0, [pc, #92]	; (80013cc <rotary_read+0x8c>)
 800136e:	f004 ff2f 	bl	80061d0 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <rotary_read+0x3c>
 8001378:	2302      	movs	r3, #2
 800137a:	e000      	b.n	800137e <rotary_read+0x3e>
 800137c:	2300      	movs	r3, #0
 800137e:	b2da      	uxtb	r2, r3
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4413      	add	r3, r2
 8001384:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <rotary_read+0x90>)
 800138c:	f004 ff20 	bl	80061d0 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <rotary_read+0x5a>
 8001396:	2304      	movs	r3, #4
 8001398:	e000      	b.n	800139c <rotary_read+0x5c>
 800139a:	2300      	movs	r3, #0
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4413      	add	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 80013a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <rotary_read+0x8c>)
 80013aa:	f004 ff11 	bl	80061d0 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <rotary_read+0x78>
 80013b4:	2308      	movs	r3, #8
 80013b6:	e000      	b.n	80013ba <rotary_read+0x7a>
 80013b8:	2300      	movs	r3, #0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4413      	add	r3, r2
 80013c0:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020000 	.word	0x40020000

080013d4 <rotary_print_playmode>:

void rotary_print_playmode()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	printf("playmode = ");
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <rotary_print_playmode+0xb8>)
 80013da:	f008 fd93 	bl	8009f04 <iprintf>
	switch(rotary_read_playmode())
 80013de:	f7ff ff8b 	bl	80012f8 <rotary_read_playmode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d847      	bhi.n	8001478 <rotary_print_playmode+0xa4>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <rotary_print_playmode+0x1c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001431 	.word	0x08001431
 80013f4:	08001439 	.word	0x08001439
 80013f8:	08001441 	.word	0x08001441
 80013fc:	08001449 	.word	0x08001449
 8001400:	08001451 	.word	0x08001451
 8001404:	08001459 	.word	0x08001459
 8001408:	08001461 	.word	0x08001461
 800140c:	08001469 	.word	0x08001469
 8001410:	08001479 	.word	0x08001479
 8001414:	08001479 	.word	0x08001479
 8001418:	08001479 	.word	0x08001479
 800141c:	08001479 	.word	0x08001479
 8001420:	08001479 	.word	0x08001479
 8001424:	08001479 	.word	0x08001479
 8001428:	08001479 	.word	0x08001479
 800142c:	08001471 	.word	0x08001471
	{
		case calibration:
			printf("calibration");
 8001430:	4817      	ldr	r0, [pc, #92]	; (8001490 <rotary_print_playmode+0xbc>)
 8001432:	f008 fd67 	bl	8009f04 <iprintf>
			break;
 8001436:	e023      	b.n	8001480 <rotary_print_playmode+0xac>
		case search:
			printf("search");
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <rotary_print_playmode+0xc0>)
 800143a:	f008 fd63 	bl	8009f04 <iprintf>
			break;
 800143e:	e01f      	b.n	8001480 <rotary_print_playmode+0xac>
		case accel:
			printf("accel");
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <rotary_print_playmode+0xc4>)
 8001442:	f008 fd5f 	bl	8009f04 <iprintf>
			break;
 8001446:	e01b      	b.n	8001480 <rotary_print_playmode+0xac>
		case max_enable:
			printf("max_enable");
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <rotary_print_playmode+0xc8>)
 800144a:	f008 fd5b 	bl	8009f04 <iprintf>
			break;
 800144e:	e017      	b.n	8001480 <rotary_print_playmode+0xac>
        case motor_free:
            printf("motor_free");
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <rotary_print_playmode+0xcc>)
 8001452:	f008 fd57 	bl	8009f04 <iprintf>
            break;
 8001456:	e013      	b.n	8001480 <rotary_print_playmode+0xac>
		case tracer_tuning:
			printf("tracer_tuning");
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <rotary_print_playmode+0xd0>)
 800145a:	f008 fd53 	bl	8009f04 <iprintf>
			break;
 800145e:	e00f      	b.n	8001480 <rotary_print_playmode+0xac>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <rotary_print_playmode+0xd4>)
 8001462:	f008 fd4f 	bl	8009f04 <iprintf>
			break;
 8001466:	e00b      	b.n	8001480 <rotary_print_playmode+0xac>
		case banquet:
			printf("banquet");
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <rotary_print_playmode+0xd8>)
 800146a:	f008 fd4b 	bl	8009f04 <iprintf>
			break;
 800146e:	e007      	b.n	8001480 <rotary_print_playmode+0xac>
		case flash_print:
			printf("flash_print");
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <rotary_print_playmode+0xdc>)
 8001472:	f008 fd47 	bl	8009f04 <iprintf>
			break;
 8001476:	e003      	b.n	8001480 <rotary_print_playmode+0xac>
		default:
			printf("unknown playmode...");
 8001478:	480e      	ldr	r0, [pc, #56]	; (80014b4 <rotary_print_playmode+0xe0>)
 800147a:	f008 fd43 	bl	8009f04 <iprintf>
			break;
 800147e:	bf00      	nop
	}
	printf("\r\n");
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <rotary_print_playmode+0xe4>)
 8001482:	f008 fdc5 	bl	800a010 <puts>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800dbcc 	.word	0x0800dbcc
 8001490:	0800dbd8 	.word	0x0800dbd8
 8001494:	0800dbe4 	.word	0x0800dbe4
 8001498:	0800dbec 	.word	0x0800dbec
 800149c:	0800dbf4 	.word	0x0800dbf4
 80014a0:	0800dc00 	.word	0x0800dc00
 80014a4:	0800dc0c 	.word	0x0800dc0c
 80014a8:	0800dc1c 	.word	0x0800dc1c
 80014ac:	0800dc30 	.word	0x0800dc30
 80014b0:	0800dc38 	.word	0x0800dc38
 80014b4:	0800dc44 	.word	0x0800dc44
 80014b8:	0800dc58 	.word	0x0800dc58

080014bc <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    enter = 1;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <switch_set_enter+0x14>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000023e 	.word	0x2000023e

080014d4 <switch_reset_enter>:

void switch_reset_enter()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
    enter = 0;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <switch_reset_enter+0x14>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	2000023e 	.word	0x2000023e

080014ec <switch_init>:

void switch_init()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    switch_reset_enter();
 80014f0:	f7ff fff0 	bl	80014d4 <switch_reset_enter>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    return enter;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <switch_read_enter+0x14>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000023e 	.word	0x2000023e

08001510 <switch1_read>:

uint8_t switch1_read()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 8001514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <switch1_read+0x20>)
 800151a:	f004 fe59 	bl	80061d0 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020800 	.word	0x40020800

08001534 <switch2_read>:

uint8_t switch2_read()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <switch2_read+0x20>)
 800153e:	f004 fe47 	bl	80061d0 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020800 	.word	0x40020800

08001558 <switch_read>:

uint8_t switch_read()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 8001562:	f7ff ffd5 	bl	8001510 <switch1_read>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4413      	add	r3, r2
 8001570:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 8001572:	f7ff ffdf 	bl	8001534 <switch2_read>
 8001576:	4603      	mov	r3, r0
 8001578:	b2da      	uxtb	r2, r3
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4413      	add	r3, r2
 800157e:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001580:	79fb      	ldrb	r3, [r7, #7]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <switch_enter>:

void switch_enter()
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800158e:	f7ff ffe3 	bl	8001558 <switch_read>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <switch_enter+0x14>
    {
        switch_reset_enter();
 8001598:	f7ff ff9c 	bl	80014d4 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 800159c:	e006      	b.n	80015ac <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800159e:	f7ff ffdb 	bl	8001558 <switch_read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d101      	bne.n	80015ac <switch_enter+0x22>
        switch_set_enter();
 80015a8:	f7ff ff88 	bl	80014bc <switch_set_enter>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 80015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b4:	b08e      	sub	sp, #56	; 0x38
 80015b6:	af0a      	add	r7, sp, #40	; 0x28
 80015b8:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 80015ba:	482d      	ldr	r0, [pc, #180]	; (8001670 <analog_array_print+0xc0>)
 80015bc:	f008 fca2 	bl	8009f04 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3318      	adds	r3, #24
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	331c      	adds	r3, #28
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	331e      	adds	r3, #30
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	331a      	adds	r3, #26
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4603      	mov	r3, r0
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <analog_array_print+0xc4>)
 80015e4:	f008 fc8e 	bl	8009f04 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	469c      	mov	ip, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3304      	adds	r3, #4
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	469e      	mov	lr, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3308      	adds	r3, #8
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4698      	mov	r8, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3310      	adds	r3, #16
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3314      	adds	r3, #20
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3316      	adds	r3, #22
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	461c      	mov	r4, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3312      	adds	r3, #18
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	461d      	mov	r5, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	330e      	adds	r3, #14
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	461e      	mov	r6, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	330a      	adds	r3, #10
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3306      	adds	r3, #6
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3302      	adds	r3, #2
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	9308      	str	r3, [sp, #32]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9307      	str	r3, [sp, #28]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	9306      	str	r3, [sp, #24]
 800164e:	9605      	str	r6, [sp, #20]
 8001650:	9504      	str	r5, [sp, #16]
 8001652:	9403      	str	r4, [sp, #12]
 8001654:	9002      	str	r0, [sp, #8]
 8001656:	9101      	str	r1, [sp, #4]
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4643      	mov	r3, r8
 800165c:	4672      	mov	r2, lr
 800165e:	4661      	mov	r1, ip
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <analog_array_print+0xc8>)
 8001662:	f008 fc4f 	bl	8009f04 <iprintf>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001670:	0800dc5c 	.word	0x0800dc5c
 8001674:	0800dc64 	.word	0x0800dc64
 8001678:	0800dc7c 	.word	0x0800dc7c

0800167c <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <analog_print_max+0x20>)
 8001682:	f008 fc3f 	bl	8009f04 <iprintf>
	printf("analog_print_max\r\n");
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <analog_print_max+0x24>)
 8001688:	f008 fcc2 	bl	800a010 <puts>
	analog_array_print(analogmax);
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <analog_print_max+0x28>)
 800168e:	f7ff ff8f 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <analog_print_max+0x2c>)
 8001694:	f008 fc36 	bl	8009f04 <iprintf>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	0800dd1c 	.word	0x0800dd1c
 80016a0:	0800dd24 	.word	0x0800dd24
 80016a4:	200003e8 	.word	0x200003e8
 80016a8:	0800dd38 	.word	0x0800dd38

080016ac <analog_print_min>:

void analog_print_min()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <analog_print_min+0x20>)
 80016b2:	f008 fc27 	bl	8009f04 <iprintf>
	printf("analog_print_min\r\n");
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <analog_print_min+0x24>)
 80016b8:	f008 fcaa 	bl	800a010 <puts>
	analog_array_print(analogmin);
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <analog_print_min+0x28>)
 80016be:	f7ff ff77 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <analog_print_min+0x2c>)
 80016c4:	f008 fc1e 	bl	8009f04 <iprintf>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0800dd40 	.word	0x0800dd40
 80016d0:	0800dd48 	.word	0x0800dd48
 80016d4:	20000284 	.word	0x20000284
 80016d8:	0800dd38 	.word	0x0800dd38

080016dc <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	printf("analog_set_to_flash()\r\n");
 80016e6:	482a      	ldr	r0, [pc, #168]	; (8001790 <analog_set_on_flash+0xb4>)
 80016e8:	f008 fc92 	bl	800a010 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e046      	b.n	8001780 <analog_set_on_flash+0xa4>
	{
		printf(ESC_MAG);
 80016f2:	4828      	ldr	r0, [pc, #160]	; (8001794 <analog_set_on_flash+0xb8>)
 80016f4:	f008 fc06 	bl	8009f04 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80016f8:	4a27      	ldr	r2, [pc, #156]	; (8001798 <analog_set_on_flash+0xbc>)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	885b      	ldrh	r3, [r3, #2]
 8001702:	4619      	mov	r1, r3
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <analog_set_on_flash+0xbc>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3310      	adds	r3, #16
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	885b      	ldrh	r3, [r3, #2]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	460a      	mov	r2, r1
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	4820      	ldr	r0, [pc, #128]	; (800179c <analog_set_on_flash+0xc0>)
 800171a:	f008 fbf3 	bl	8009f04 <iprintf>
		printf(ESC_DEF);
 800171e:	4820      	ldr	r0, [pc, #128]	; (80017a0 <analog_set_on_flash+0xc4>)
 8001720:	f008 fbf0 	bl	8009f04 <iprintf>
		*(analogmin_ + i) = analogmin[i];
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	491d      	ldr	r1, [pc, #116]	; (80017a4 <analog_set_on_flash+0xc8>)
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001734:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4413      	add	r3, r2
 800173e:	491a      	ldr	r1, [pc, #104]	; (80017a8 <analog_set_on_flash+0xcc>)
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001746:	801a      	strh	r2, [r3, #0]
		printf(ESC_GRE);
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <analog_set_on_flash+0xd0>)
 800174a:	f008 fbdb 	bl	8009f04 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <analog_set_on_flash+0xbc>)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	885b      	ldrh	r3, [r3, #2]
 8001758:	4619      	mov	r1, r3
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <analog_set_on_flash+0xbc>)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3310      	adds	r3, #16
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	460a      	mov	r2, r1
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <analog_set_on_flash+0xc0>)
 8001770:	f008 fbc8 	bl	8009f04 <iprintf>
		printf(ESC_DEF);
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <analog_set_on_flash+0xc4>)
 8001776:	f008 fbc5 	bl	8009f04 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d9b5      	bls.n	80016f2 <analog_set_on_flash+0x16>
	}
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	0800dd5c 	.word	0x0800dd5c
 8001794:	0800dd74 	.word	0x0800dd74
 8001798:	200007b0 	.word	0x200007b0
 800179c:	0800dd7c 	.word	0x0800dd7c
 80017a0:	0800dd38 	.word	0x0800dd38
 80017a4:	20000284 	.word	0x20000284
 80017a8:	200003e8 	.word	0x200003e8
 80017ac:	0800ddb8 	.word	0x0800ddb8

080017b0 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	printf("analog_set_from_flash()\r\n");
 80017ba:	4824      	ldr	r0, [pc, #144]	; (800184c <analog_set_from_flash+0x9c>)
 80017bc:	f008 fc28 	bl	800a010 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e03a      	b.n	800183c <analog_set_from_flash+0x8c>
	{
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <analog_set_from_flash+0xa0>)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	885b      	ldrh	r3, [r3, #2]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <analog_set_from_flash+0xa0>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3310      	adds	r3, #16
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	885b      	ldrh	r3, [r3, #2]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	460a      	mov	r2, r1
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	481b      	ldr	r0, [pc, #108]	; (8001854 <analog_set_from_flash+0xa4>)
 80017e8:	f008 fb8c 	bl	8009f04 <iprintf>
		analogmin[i] = *(analogmin_ + i);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	8819      	ldrh	r1, [r3, #0]
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <analog_set_from_flash+0xa8>)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	8819      	ldrh	r1, [r3, #0]
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <analog_set_from_flash+0xac>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <analog_set_from_flash+0xa0>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	885b      	ldrh	r3, [r3, #2]
 800181a:	4619      	mov	r1, r3
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <analog_set_from_flash+0xa0>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3310      	adds	r3, #16
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	885b      	ldrh	r3, [r3, #2]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	460a      	mov	r2, r1
 800182e:	68f9      	ldr	r1, [r7, #12]
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <analog_set_from_flash+0xa4>)
 8001832:	f008 fb67 	bl	8009f04 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	d9c1      	bls.n	80017c6 <analog_set_from_flash+0x16>
	}
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800ddc0 	.word	0x0800ddc0
 8001850:	200007b0 	.word	0x200007b0
 8001854:	0800dd7c 	.word	0x0800dd7c
 8001858:	20000284 	.word	0x20000284
 800185c:	200003e8 	.word	0x200003e8

08001860 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <analog_set_calibrationsize+0x1c>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	7013      	strb	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200002a5 	.word	0x200002a5

08001880 <analog_read_calibrationsize>:

uint8_t analog_read_calibrationsize()
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	return calibrationsize;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <analog_read_calibrationsize+0x14>)
 8001886:	781b      	ldrb	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200002a5 	.word	0x200002a5

08001898 <analog_set_analogmode>:

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <analog_set_analogmode+0x1c>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	7013      	strb	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	200002a4 	.word	0x200002a4

080018b8 <analog_calibration_start>:
{
	return analogmode;
}

void analog_calibration_start()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	analog_set_analogmode(calibrating);
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff ffea 	bl	8001898 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	e00d      	b.n	80018e6 <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <analog_calibration_start+0x48>)
 80018ce:	2100      	movs	r1, #0
 80018d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <analog_calibration_start+0x4c>)
 80018d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	3301      	adds	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d9ee      	bls.n	80018ca <analog_calibration_start+0x12>
    }
	analog_print_max();
 80018ec:	f7ff fec6 	bl	800167c <analog_print_max>
	analog_print_min();
 80018f0:	f7ff fedc 	bl	80016ac <analog_print_min>
	analog_sensor_start();
 80018f4:	f000 f844 	bl	8001980 <analog_sensor_start>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200003e8 	.word	0x200003e8
 8001904:	20000284 	.word	0x20000284

08001908 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(all);
 800190c:	2010      	movs	r0, #16
 800190e:	f7ff ffc3 	bl	8001898 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001912:	f000 f82f 	bl	8001974 <analog_stop>
	analog_print_max();
 8001916:	f7ff feb1 	bl	800167c <analog_print_max>
	analog_print_min();
 800191a:	f7ff fec7 	bl	80016ac <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 800191e:	4904      	ldr	r1, [pc, #16]	; (8001930 <analog_calibration_stop+0x28>)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <analog_calibration_stop+0x2c>)
 8001922:	f7ff fedb 	bl	80016dc <analog_set_on_flash>
	flash_write();
 8001926:	f000 faa3 	bl	8001e70 <flash_write>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200007d2 	.word	0x200007d2
 8001934:	200007b2 	.word	0x200007b2

08001938 <analog_init>:

void analog_init()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 800193c:	2010      	movs	r0, #16
 800193e:	f7ff ff8f 	bl	8001860 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <analog_init+0x20>)
 8001944:	f002 fe7c 	bl	8004640 <HAL_ADC_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <analog_init+0x1a>
    {
        Error_Handler();
 800194e:	f001 f96b 	bl	8002c28 <Error_Handler>
    }
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000058c 	.word	0x2000058c

0800195c <analog_start>:

void analog_start()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	printf("analog_sensor_start()\r\n");
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <analog_start+0x14>)
 8001962:	f008 fb55 	bl	800a010 <puts>
	analog_sensor_start();
 8001966:	f000 f80b 	bl	8001980 <analog_sensor_start>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	0800dddc 	.word	0x0800dddc

08001974 <analog_stop>:

void analog_stop()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001978:	f000 f81e 	bl	80019b8 <analog_sensor_stop>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <analog_sensor_start>:

void analog_sensor_start()
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <analog_sensor_start+0x28>)
 8001986:	f008 fb43 	bl	800a010 <puts>
    sensgettime = 0;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <analog_sensor_start+0x2c>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001990:	2210      	movs	r2, #16
 8001992:	4907      	ldr	r1, [pc, #28]	; (80019b0 <analog_sensor_start+0x30>)
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <analog_sensor_start+0x34>)
 8001996:	f002 fe97 	bl	80046c8 <HAL_ADC_Start_DMA>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <analog_sensor_start+0x24>
    {
        Error_Handler();
 80019a0:	f001 f942 	bl	8002c28 <Error_Handler>
    }
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	0800ddf4 	.word	0x0800ddf4
 80019ac:	20000260 	.word	0x20000260
 80019b0:	20000264 	.word	0x20000264
 80019b4:	2000058c 	.word	0x2000058c

080019b8 <analog_sensor_stop>:

void analog_sensor_stop()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <analog_sensor_stop+0x10>)
 80019be:	f002 ff93 	bl	80048e8 <HAL_ADC_Stop_DMA>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000058c 	.word	0x2000058c

080019cc <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (double) (analogmax[i] - analogmin[i]);
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <analog_sensor_get+0x80>)
 80019da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019de:	4619      	mov	r1, r3
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <analog_sensor_get+0x84>)
 80019e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e8:	1acb      	subs	r3, r1, r3
 80019ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd96 	bl	8000524 <__aeabi_i2d>
 80019f8:	4604      	mov	r4, r0
 80019fa:	460d      	mov	r5, r1
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <analog_sensor_get+0x88>)
 8001a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a04:	4619      	mov	r1, r3
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <analog_sensor_get+0x84>)
 8001a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a0e:	1acb      	subs	r3, r1, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd87 	bl	8000524 <__aeabi_i2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe ff15 	bl	800084c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	79fc      	ldrb	r4, [r7, #7]
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f8bc 	bl	8000ba8 <__aeabi_d2uiz>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <analog_sensor_get+0x8c>)
 8001a36:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif
	return analograte[i];
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <analog_sensor_get+0x8c>)
 8001a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000240 	.word	0x20000240
 8001a50:	20000284 	.word	0x20000284
 8001a54:	200003e8 	.word	0x200003e8
 8001a58:	200002a8 	.word	0x200002a8

08001a5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001a64:	f000 f804 	bl	8001a70 <analog_get_and_sort>
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001a70:	b490      	push	{r4, r7}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <analog_get_and_sort+0x120>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d968      	bls.n	8001b50 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001a7e:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <analog_get_and_sort+0x120>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	e05f      	b.n	8001b4a <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71bb      	strb	r3, [r7, #6]
 8001a8e:	e02d      	b.n	8001aec <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001a90:	2300      	movs	r3, #0
 8001a92:	717b      	strb	r3, [r7, #5]
 8001a94:	e023      	b.n	8001ade <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001a96:	797b      	ldrb	r3, [r7, #5]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	493d      	ldr	r1, [pc, #244]	; (8001b94 <analog_get_and_sort+0x124>)
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001aa6:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001aa8:	7978      	ldrb	r0, [r7, #5]
 8001aaa:	79f9      	ldrb	r1, [r7, #7]
 8001aac:	797b      	ldrb	r3, [r7, #5]
 8001aae:	1e5a      	subs	r2, r3, #1
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	4c38      	ldr	r4, [pc, #224]	; (8001b94 <analog_get_and_sort+0x124>)
 8001ab4:	0100      	lsls	r0, r0, #4
 8001ab6:	4401      	add	r1, r0
 8001ab8:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001abc:	4935      	ldr	r1, [pc, #212]	; (8001b94 <analog_get_and_sort+0x124>)
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001ac8:	797a      	ldrb	r2, [r7, #5]
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4931      	ldr	r1, [pc, #196]	; (8001b94 <analog_get_and_sort+0x124>)
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001ad8:	797b      	ldrb	r3, [r7, #5]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	717b      	strb	r3, [r7, #5]
 8001ade:	797a      	ldrb	r2, [r7, #5]
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d8d7      	bhi.n	8001a96 <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	71bb      	strb	r3, [r7, #6]
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d9ce      	bls.n	8001a90 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <analog_get_and_sort+0x124>)
 8001af8:	3240      	adds	r2, #64	; 0x40
 8001afa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001afe:	4a26      	ldr	r2, [pc, #152]	; (8001b98 <analog_get_and_sort+0x128>)
 8001b00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <analog_get_and_sort+0x12c>)
 8001b08:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a22      	ldr	r2, [pc, #136]	; (8001b98 <analog_get_and_sort+0x128>)
 8001b10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	428a      	cmp	r2, r1
 8001b18:	bf38      	it	cc
 8001b1a:	460a      	movcc	r2, r1
 8001b1c:	b291      	uxth	r1, r2
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <analog_get_and_sort+0x12c>)
 8001b20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <analog_get_and_sort+0x130>)
 8001b28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <analog_get_and_sort+0x128>)
 8001b30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	428a      	cmp	r2, r1
 8001b38:	bf28      	it	cs
 8001b3a:	460a      	movcs	r2, r1
 8001b3c:	b291      	uxth	r1, r2
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <analog_get_and_sort+0x130>)
 8001b40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	3301      	adds	r3, #1
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d99c      	bls.n	8001a8a <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	713b      	strb	r3, [r7, #4]
 8001b54:	e00f      	b.n	8001b76 <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001b56:	7939      	ldrb	r1, [r7, #4]
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <analog_get_and_sort+0x120>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	793b      	ldrb	r3, [r7, #4]
 8001b5e:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <analog_get_and_sort+0x134>)
 8001b60:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001b64:	490b      	ldr	r1, [pc, #44]	; (8001b94 <analog_get_and_sort+0x124>)
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001b70:	793b      	ldrb	r3, [r7, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	713b      	strb	r3, [r7, #4]
 8001b76:	793b      	ldrb	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d9ec      	bls.n	8001b56 <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <analog_get_and_sort+0x120>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <analog_get_and_sort+0x120>)
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc90      	pop	{r4, r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000260 	.word	0x20000260
 8001b94:	200002c8 	.word	0x200002c8
 8001b98:	20000240 	.word	0x20000240
 8001b9c:	200003e8 	.word	0x200003e8
 8001ba0:	20000284 	.word	0x20000284
 8001ba4:	20000264 	.word	0x20000264

08001ba8 <encoder_length>:
int16_t encoder_left, encoder_right;
double encoder;

/* public */
double encoder_length()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    return (double) encoder * (double) LENGTHPERPULSE;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <encoder_length+0x30>)
 8001bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb2:	a307      	add	r3, pc, #28	; (adr r3, 8001bd0 <encoder_length+0x28>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fd1e 	bl	80005f8 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc8:	eef0 0a67 	vmov.f32	s1, s15
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	24a478cb 	.word	0x24a478cb
 8001bd4:	40192ab8 	.word	0x40192ab8
 8001bd8:	200007a0 	.word	0x200007a0
 8001bdc:	00000000 	.word	0x00000000

08001be0 <encoder_length_left>:

double encoder_length_left()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    return (double) encoder_left * (double) LENGTHPERPULSE;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <encoder_length_left+0x38>)
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc9a 	bl	8000524 <__aeabi_i2d>
 8001bf0:	a307      	add	r3, pc, #28	; (adr r3, 8001c10 <encoder_length_left+0x30>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fcff 	bl	80005f8 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c02:	eeb0 0a47 	vmov.f32	s0, s14
 8001c06:	eef0 0a67 	vmov.f32	s1, s15
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	f3af 8000 	nop.w
 8001c10:	24a478cb 	.word	0x24a478cb
 8001c14:	40192ab8 	.word	0x40192ab8
 8001c18:	20000798 	.word	0x20000798
 8001c1c:	00000000 	.word	0x00000000

08001c20 <encoder_length_right>:

double encoder_length_right()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
    return (double) encoder_right * (double) LENGTHPERPULSE;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <encoder_length_right+0x38>)
 8001c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc7a 	bl	8000524 <__aeabi_i2d>
 8001c30:	a307      	add	r3, pc, #28	; (adr r3, 8001c50 <encoder_length_right+0x30>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fcdf 	bl	80005f8 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c42:	eeb0 0a47 	vmov.f32	s0, s14
 8001c46:	eef0 0a67 	vmov.f32	s1, s15
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	f3af 8000 	nop.w
 8001c50:	24a478cb 	.word	0x24a478cb
 8001c54:	40192ab8 	.word	0x40192ab8
 8001c58:	200007a8 	.word	0x200007a8

08001c5c <encoder_d_print>:

void encoder_d_print()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af02      	add	r7, sp, #8
    #if D_ENCODER
    printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %7.2f\r\n", encoder_left, encoder_right, encoder);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <encoder_d_print+0x30>)
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <encoder_d_print+0x34>)
 8001c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c70:	4618      	mov	r0, r3
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <encoder_d_print+0x38>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	e9cd 2300 	strd	r2, r3, [sp]
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <encoder_d_print+0x3c>)
 8001c80:	f008 f940 	bl	8009f04 <iprintf>
    #endif
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000798 	.word	0x20000798
 8001c90:	200007a8 	.word	0x200007a8
 8001c94:	200007a0 	.word	0x200007a0
 8001c98:	0800de1c 	.word	0x0800de1c

08001c9c <encoder_set>:

/* only read tim10_main */
void encoder_set()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <encoder_set+0x5c>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <encoder_set+0x60>)
 8001cb0:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <encoder_set+0x64>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <encoder_set+0x68>)
 8001cc2:	801a      	strh	r2, [r3, #0]
    encoder = (encoder_left + encoder_right) / (double) 2;
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <encoder_set+0x60>)
 8001cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <encoder_set+0x68>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc25 	bl	8000524 <__aeabi_i2d>
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce2:	f7fe fdb3 	bl	800084c <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4907      	ldr	r1, [pc, #28]	; (8001d08 <encoder_set+0x6c>)
 8001cec:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001cf0:	f000 f85a 	bl	8001da8 <encoder_set_middle>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	20000798 	.word	0x20000798
 8001d00:	40000400 	.word	0x40000400
 8001d04:	200007a8 	.word	0x200007a8
 8001d08:	200007a0 	.word	0x200007a0
 8001d0c:	00000000 	.word	0x00000000

08001d10 <encoder_init>:

void encoder_init()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
 8001d14:	a305      	add	r3, pc, #20	; (adr r3, 8001d2c <encoder_init+0x1c>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <encoder_init+0x18>)
 8001d1c:	f008 f8f2 	bl	8009f04 <iprintf>
    #endif
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	f3af 8000 	nop.w
 8001d28:	0800de64 	.word	0x0800de64
 8001d2c:	24a478cb 	.word	0x24a478cb
 8001d30:	40192ab8 	.word	0x40192ab8

08001d34 <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <encoder_start+0x3c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <encoder_start+0x40>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <encoder_start+0x44>)
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001d52:	f000 f829 	bl	8001da8 <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d56:	213c      	movs	r1, #60	; 0x3c
 8001d58:	4808      	ldr	r0, [pc, #32]	; (8001d7c <encoder_start+0x48>)
 8001d5a:	f006 f8e5 	bl	8007f28 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d5e:	213c      	movs	r1, #60	; 0x3c
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <encoder_start+0x4c>)
 8001d62:	f006 f8e1 	bl	8007f28 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8001d66:	4807      	ldr	r0, [pc, #28]	; (8001d84 <encoder_start+0x50>)
 8001d68:	f005 fe12 	bl	8007990 <HAL_TIM_Base_Start_IT>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000798 	.word	0x20000798
 8001d74:	200007a8 	.word	0x200007a8
 8001d78:	200007a0 	.word	0x200007a0
 8001d7c:	200006c4 	.word	0x200006c4
 8001d80:	20000544 	.word	0x20000544
 8001d84:	200004fc 	.word	0x200004fc

08001d88 <encoder_stop>:

void encoder_stop()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001d8c:	213c      	movs	r1, #60	; 0x3c
 8001d8e:	4804      	ldr	r0, [pc, #16]	; (8001da0 <encoder_stop+0x18>)
 8001d90:	f006 f958 	bl	8008044 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001d94:	213c      	movs	r1, #60	; 0x3c
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <encoder_stop+0x1c>)
 8001d98:	f006 f954 	bl	8008044 <HAL_TIM_Encoder_Stop>
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200006c4 	.word	0x200006c4
 8001da4:	20000544 	.word	0x20000544

08001da8 <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <encoder_set_middle+0x20>)
 8001dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <encoder_set_middle+0x24>)
 8001db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8001dda:	230b      	movs	r3, #11
 8001ddc:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001de2:	2302      	movs	r3, #2
 8001de4:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8001dea:	463a      	mov	r2, r7
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 ff2f 	bl	8005c54 <HAL_FLASHEx_Erase>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8001e0a:	f003 fdc1 	bl	8005990 <HAL_FLASH_Unlock>
	flash_erase();
 8001e0e:	f7ff ffdf 	bl	8001dd0 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e00e      	b.n	8001e36 <flash_writting+0x38>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	6979      	ldr	r1, [r7, #20]
 8001e24:	2000      	movs	r0, #0
 8001e26:	f003 fd5f 	bl	80058e8 <HAL_FLASH_Program>
		data++;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3ea      	bcc.n	8001e18 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 8001e42:	f003 fdc7 	bl	80059d4 <HAL_FLASH_Lock>
#endif
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	68b8      	ldr	r0, [r7, #8]
 8001e62:	f007 f9bf 	bl	80091e4 <memcpy>
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <flash_write>:

void flash_write()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <flash_write+0x14>)
 8001e76:	2260      	movs	r2, #96	; 0x60
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <flash_write+0x18>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ffbf 	bl	8001dfe <flash_writting>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	080e0000 	.word	0x080e0000
 8001e88:	200007b0 	.word	0x200007b0

08001e8c <flash_read>:

void flash_read()
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <flash_read+0x14>)
 8001e92:	2260      	movs	r2, #96	; 0x60
 8001e94:	4903      	ldr	r1, [pc, #12]	; (8001ea4 <flash_read+0x18>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ffd9 	bl	8001e4e <flash_reading>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	080e0000 	.word	0x080e0000
 8001ea4:	200007b0 	.word	0x200007b0

08001ea8 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	flash_read();
 8001eac:	f7ff ffee 	bl	8001e8c <flash_read>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM14_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8001ec6:	f001 fea3 	bl	8003c10 <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		tim10_main();
 8001ed4:	f001 fd1c 	bl	8003910 <tim10_main>
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim11_main();
 8001ee2:	f001 fe3b 	bl	8003b5c <tim11_main>
	}
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40001000 	.word	0x40001000
 8001ef4:	40014400 	.word	0x40014400
 8001ef8:	40014800 	.word	0x40014800

08001efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f00:	f002 fb08 	bl	8004514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f04:	f000 f97c 	bl	8002200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f08:	f000 fd68 	bl	80029dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001f0c:	f000 fd46 	bl	800299c <MX_DMA_Init>
  MX_ADC1_Init();
 8001f10:	f000 f9e0 	bl	80022d4 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8001f14:	f000 fd18 	bl	8002948 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001f18:	f000 fc74 	bl	8002804 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001f1c:	f000 fc0e 	bl	800273c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f20:	f000 fb60 	bl	80025e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001f24:	f000 fbb6 	bl	8002694 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001f28:	f000 fca2 	bl	8002870 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001f2c:	f000 fcc4 	bl	80028b8 <MX_TIM11_Init>
  MX_SPI2_Init();
 8001f30:	f000 fb22 	bl	8002578 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001f34:	f000 faf2 	bl	800251c <MX_I2C1_Init>
  MX_TIM14_Init();
 8001f38:	f000 fce2 	bl	8002900 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8001f3c:	48ae      	ldr	r0, [pc, #696]	; (80021f8 <main+0x2fc>)
 8001f3e:	f007 ffe1 	bl	8009f04 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8001f42:	48ae      	ldr	r0, [pc, #696]	; (80021fc <main+0x300>)
 8001f44:	f008 f864 	bl	800a010 <puts>

  main_init();
 8001f48:	f000 fe32 	bl	8002bb0 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 8001f4c:	f000 fe46 	bl	8002bdc <main_print_while>

		if(switch_read_enter())
 8001f50:	f7ff fad2 	bl	80014f8 <switch_read_enter>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8144 	beq.w	80021e4 <main+0x2e8>
		{
			switch(rotary_read())
 8001f5c:	f7ff f9f0 	bl	8001340 <rotary_read>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f200 8140 	bhi.w	80021e8 <main+0x2ec>
 8001f68:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <main+0x74>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001fb1 	.word	0x08001fb1
 8001f74:	08001ffb 	.word	0x08001ffb
 8001f78:	0800201b 	.word	0x0800201b
 8001f7c:	0800203b 	.word	0x0800203b
 8001f80:	0800205b 	.word	0x0800205b
 8001f84:	0800207b 	.word	0x0800207b
 8001f88:	0800209b 	.word	0x0800209b
 8001f8c:	080020bb 	.word	0x080020bb
 8001f90:	080020db 	.word	0x080020db
 8001f94:	080020fb 	.word	0x080020fb
 8001f98:	0800211b 	.word	0x0800211b
 8001f9c:	0800213b 	.word	0x0800213b
 8001fa0:	0800215b 	.word	0x0800215b
 8001fa4:	0800217b 	.word	0x0800217b
 8001fa8:	0800219b 	.word	0x0800219b
 8001fac:	080021bb 	.word	0x080021bb
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8001fb0:	f7ff f9a2 	bl	80012f8 <rotary_read_playmode>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <main+0xde>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8001fba:	f7ff fc7d 	bl	80018b8 <analog_calibration_start>

            while(switch_read_enter())
 8001fbe:	e004      	b.n	8001fca <main+0xce>
            {

              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_d_print();
 8001fc0:	f000 fe1e 	bl	8002c00 <main_d_print>
              HAL_Delay(250);
 8001fc4:	20fa      	movs	r0, #250	; 0xfa
 8001fc6:	f002 fb17 	bl	80045f8 <HAL_Delay>
            while(switch_read_enter())
 8001fca:	f7ff fa95 	bl	80014f8 <switch_read_enter>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f5      	bne.n	8001fc0 <main+0xc4>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 8001fd4:	f7ff fc98 	bl	8001908 <analog_calibration_stop>
              HAL_Delay(250);
            }

            running_stop();
          }
          break;	// case 0x00:
 8001fd8:	e109      	b.n	80021ee <main+0x2f2>
            running_start();
 8001fda:	f000 fdf7 	bl	8002bcc <running_start>
            while(switch_read_enter())
 8001fde:	e004      	b.n	8001fea <main+0xee>
              main_d_print();
 8001fe0:	f000 fe0e 	bl	8002c00 <main_d_print>
              HAL_Delay(250);
 8001fe4:	20fa      	movs	r0, #250	; 0xfa
 8001fe6:	f002 fb07 	bl	80045f8 <HAL_Delay>
            while(switch_read_enter())
 8001fea:	f7ff fa85 	bl	80014f8 <switch_read_enter>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f5      	bne.n	8001fe0 <main+0xe4>
            running_stop();
 8001ff4:	f000 fe10 	bl	8002c18 <running_stop>
          break;	// case 0x00:
 8001ff8:	e0f9      	b.n	80021ee <main+0x2f2>
        case 0x01:	// 1
          running_start();
 8001ffa:	f000 fde7 	bl	8002bcc <running_start>

          while (switch_read_enter())
 8001ffe:	e004      	b.n	800200a <main+0x10e>
          {
            main_d_print();
 8002000:	f000 fdfe 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002004:	20fa      	movs	r0, #250	; 0xfa
 8002006:	f002 faf7 	bl	80045f8 <HAL_Delay>
          while (switch_read_enter())
 800200a:	f7ff fa75 	bl	80014f8 <switch_read_enter>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f5      	bne.n	8002000 <main+0x104>
          }

          running_stop();
 8002014:	f000 fe00 	bl	8002c18 <running_stop>
          break;
 8002018:	e0e9      	b.n	80021ee <main+0x2f2>
        case 0x02:	// 2
          running_start();
 800201a:	f000 fdd7 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800201e:	e004      	b.n	800202a <main+0x12e>
          {
            main_d_print();
 8002020:	f000 fdee 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002024:	20fa      	movs	r0, #250	; 0xfa
 8002026:	f002 fae7 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800202a:	f7ff fa65 	bl	80014f8 <switch_read_enter>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f5      	bne.n	8002020 <main+0x124>
          }

          running_stop();
 8002034:	f000 fdf0 	bl	8002c18 <running_stop>
          break;
 8002038:	e0d9      	b.n	80021ee <main+0x2f2>
        case 0x03:	// 3
          running_start();
 800203a:	f000 fdc7 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800203e:	e004      	b.n	800204a <main+0x14e>
          {
            main_d_print();
 8002040:	f000 fdde 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002044:	20fa      	movs	r0, #250	; 0xfa
 8002046:	f002 fad7 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800204a:	f7ff fa55 	bl	80014f8 <switch_read_enter>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f5      	bne.n	8002040 <main+0x144>
          }

          running_stop();
 8002054:	f000 fde0 	bl	8002c18 <running_stop>
          break;
 8002058:	e0c9      	b.n	80021ee <main+0x2f2>
        case 0x04:	// 4
          running_start();
 800205a:	f000 fdb7 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800205e:	e004      	b.n	800206a <main+0x16e>
          {
            main_d_print();
 8002060:	f000 fdce 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002064:	20fa      	movs	r0, #250	; 0xfa
 8002066:	f002 fac7 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800206a:	f7ff fa45 	bl	80014f8 <switch_read_enter>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f5      	bne.n	8002060 <main+0x164>
          }

          running_stop();
 8002074:	f000 fdd0 	bl	8002c18 <running_stop>
          break;
 8002078:	e0b9      	b.n	80021ee <main+0x2f2>
        case 0x05:	// 5
          running_start();
 800207a:	f000 fda7 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800207e:	e004      	b.n	800208a <main+0x18e>
          {
            main_d_print();
 8002080:	f000 fdbe 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002084:	20fa      	movs	r0, #250	; 0xfa
 8002086:	f002 fab7 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800208a:	f7ff fa35 	bl	80014f8 <switch_read_enter>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f5      	bne.n	8002080 <main+0x184>
          }

          running_stop();
 8002094:	f000 fdc0 	bl	8002c18 <running_stop>
          break;
 8002098:	e0a9      	b.n	80021ee <main+0x2f2>
        case 0x06:	// 6
          running_start();
 800209a:	f000 fd97 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800209e:	e004      	b.n	80020aa <main+0x1ae>
          {
            main_d_print();
 80020a0:	f000 fdae 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 80020a4:	20fa      	movs	r0, #250	; 0xfa
 80020a6:	f002 faa7 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 80020aa:	f7ff fa25 	bl	80014f8 <switch_read_enter>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f5      	bne.n	80020a0 <main+0x1a4>
          }

          running_stop();
 80020b4:	f000 fdb0 	bl	8002c18 <running_stop>
          break;
 80020b8:	e099      	b.n	80021ee <main+0x2f2>
        case 0x07:	// 7
          running_start();
 80020ba:	f000 fd87 	bl	8002bcc <running_start>

          while(switch_read_enter())
 80020be:	e004      	b.n	80020ca <main+0x1ce>
          {
            main_d_print();
 80020c0:	f000 fd9e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 80020c4:	20fa      	movs	r0, #250	; 0xfa
 80020c6:	f002 fa97 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 80020ca:	f7ff fa15 	bl	80014f8 <switch_read_enter>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f5      	bne.n	80020c0 <main+0x1c4>
          }

          running_stop();
 80020d4:	f000 fda0 	bl	8002c18 <running_stop>
          break;
 80020d8:	e089      	b.n	80021ee <main+0x2f2>
        case 0x08:	// 8
          running_start();
 80020da:	f000 fd77 	bl	8002bcc <running_start>

          while(switch_read_enter())
 80020de:	e004      	b.n	80020ea <main+0x1ee>
          {
            main_d_print();
 80020e0:	f000 fd8e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 80020e4:	20fa      	movs	r0, #250	; 0xfa
 80020e6:	f002 fa87 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 80020ea:	f7ff fa05 	bl	80014f8 <switch_read_enter>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f5      	bne.n	80020e0 <main+0x1e4>
          }

          running_stop();
 80020f4:	f000 fd90 	bl	8002c18 <running_stop>
          break;
 80020f8:	e079      	b.n	80021ee <main+0x2f2>
        case 0x09:	// 9
          running_start();
 80020fa:	f000 fd67 	bl	8002bcc <running_start>

          while(switch_read_enter())
 80020fe:	e004      	b.n	800210a <main+0x20e>
          {
            main_d_print();
 8002100:	f000 fd7e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002104:	20fa      	movs	r0, #250	; 0xfa
 8002106:	f002 fa77 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800210a:	f7ff f9f5 	bl	80014f8 <switch_read_enter>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f5      	bne.n	8002100 <main+0x204>
          }

          running_stop();
 8002114:	f000 fd80 	bl	8002c18 <running_stop>
          break;
 8002118:	e069      	b.n	80021ee <main+0x2f2>
        case 0x0A:	// A
          running_start();
 800211a:	f000 fd57 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800211e:	e004      	b.n	800212a <main+0x22e>
          {
            main_d_print();
 8002120:	f000 fd6e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002124:	20fa      	movs	r0, #250	; 0xfa
 8002126:	f002 fa67 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800212a:	f7ff f9e5 	bl	80014f8 <switch_read_enter>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f5      	bne.n	8002120 <main+0x224>
          }

          running_stop();
 8002134:	f000 fd70 	bl	8002c18 <running_stop>
          break;
 8002138:	e059      	b.n	80021ee <main+0x2f2>
        case 0x0B:	// B
          running_start();
 800213a:	f000 fd47 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800213e:	e004      	b.n	800214a <main+0x24e>
          {
            main_d_print();
 8002140:	f000 fd5e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002144:	20fa      	movs	r0, #250	; 0xfa
 8002146:	f002 fa57 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800214a:	f7ff f9d5 	bl	80014f8 <switch_read_enter>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f5      	bne.n	8002140 <main+0x244>
          }

          running_stop();
 8002154:	f000 fd60 	bl	8002c18 <running_stop>
          break;
 8002158:	e049      	b.n	80021ee <main+0x2f2>
        case 0x0C:	// C
          running_start();
 800215a:	f000 fd37 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800215e:	e004      	b.n	800216a <main+0x26e>
          {
            main_d_print();
 8002160:	f000 fd4e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002164:	20fa      	movs	r0, #250	; 0xfa
 8002166:	f002 fa47 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800216a:	f7ff f9c5 	bl	80014f8 <switch_read_enter>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f5      	bne.n	8002160 <main+0x264>
          }

          running_stop();
 8002174:	f000 fd50 	bl	8002c18 <running_stop>
          break;
 8002178:	e039      	b.n	80021ee <main+0x2f2>
        case 0x0D:	// D
          running_start();
 800217a:	f000 fd27 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800217e:	e004      	b.n	800218a <main+0x28e>
          {
            main_d_print();
 8002180:	f000 fd3e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 8002184:	20fa      	movs	r0, #250	; 0xfa
 8002186:	f002 fa37 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 800218a:	f7ff f9b5 	bl	80014f8 <switch_read_enter>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f5      	bne.n	8002180 <main+0x284>
          }

          running_stop();
 8002194:	f000 fd40 	bl	8002c18 <running_stop>
          break;
 8002198:	e029      	b.n	80021ee <main+0x2f2>
        case 0x0E:	// E
          running_start();
 800219a:	f000 fd17 	bl	8002bcc <running_start>

          while(switch_read_enter())
 800219e:	e004      	b.n	80021aa <main+0x2ae>
          {
            main_d_print();
 80021a0:	f000 fd2e 	bl	8002c00 <main_d_print>
            HAL_Delay(250);
 80021a4:	20fa      	movs	r0, #250	; 0xfa
 80021a6:	f002 fa27 	bl	80045f8 <HAL_Delay>
          while(switch_read_enter())
 80021aa:	f7ff f9a5 	bl	80014f8 <switch_read_enter>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f5      	bne.n	80021a0 <main+0x2a4>
          }

          running_stop();
 80021b4:	f000 fd30 	bl	8002c18 <running_stop>
          break;
 80021b8:	e019      	b.n	80021ee <main+0x2f2>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 80021ba:	f7ff f89d 	bl	80012f8 <rotary_read_playmode>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d013      	beq.n	80021ec <main+0x2f0>
          {
          }
          else    // if(!(rotary_read_playmode()== flash_print))
          {
            running_start();
 80021c4:	f000 fd02 	bl	8002bcc <running_start>

            while(switch_read_enter())
 80021c8:	e004      	b.n	80021d4 <main+0x2d8>
            {
              main_d_print();
 80021ca:	f000 fd19 	bl	8002c00 <main_d_print>
              HAL_Delay(250);
 80021ce:	20fa      	movs	r0, #250	; 0xfa
 80021d0:	f002 fa12 	bl	80045f8 <HAL_Delay>
            while(switch_read_enter())
 80021d4:	f7ff f990 	bl	80014f8 <switch_read_enter>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f5      	bne.n	80021ca <main+0x2ce>
            }

            running_stop();
 80021de:	f000 fd1b 	bl	8002c18 <running_stop>
          }
          break;
 80021e2:	e003      	b.n	80021ec <main+0x2f0>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 80021e4:	bf00      	nop
 80021e6:	e002      	b.n	80021ee <main+0x2f2>
          break;
 80021e8:	bf00      	nop
 80021ea:	e000      	b.n	80021ee <main+0x2f2>
          break;
 80021ec:	bf00      	nop
    HAL_Delay(500);
 80021ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021f2:	f002 fa01 	bl	80045f8 <HAL_Delay>
    main_print_while();
 80021f6:	e6a9      	b.n	8001f4c <main+0x50>
 80021f8:	0800de80 	.word	0x0800de80
 80021fc:	0800de88 	.word	0x0800de88

08002200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b094      	sub	sp, #80	; 0x50
 8002204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002206:	f107 0320 	add.w	r3, r7, #32
 800220a:	2230      	movs	r2, #48	; 0x30
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f006 fff6 	bl	8009200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <SystemClock_Config+0xcc>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <SystemClock_Config+0xcc>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	; 0x40
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <SystemClock_Config+0xcc>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <SystemClock_Config+0xd0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <SystemClock_Config+0xd0>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <SystemClock_Config+0xd0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800225c:	2301      	movs	r3, #1
 800225e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002260:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002266:	2302      	movs	r3, #2
 8002268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002270:	2308      	movs	r3, #8
 8002272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002274:	23a8      	movs	r3, #168	; 0xa8
 8002276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002278:	2302      	movs	r3, #2
 800227a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800227c:	2304      	movs	r3, #4
 800227e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002280:	f107 0320 	add.w	r3, r7, #32
 8002284:	4618      	mov	r0, r3
 8002286:	f004 f919 	bl	80064bc <HAL_RCC_OscConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002290:	f000 fcca 	bl	8002c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002294:	230f      	movs	r3, #15
 8002296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	2105      	movs	r1, #5
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fb7a 	bl	80069ac <HAL_RCC_ClockConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022be:	f000 fcb3 	bl	8002c28 <Error_Handler>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3750      	adds	r7, #80	; 0x50
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000

080022d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022da:	463b      	mov	r3, r7
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022e6:	4b8a      	ldr	r3, [pc, #552]	; (8002510 <MX_ADC1_Init+0x23c>)
 80022e8:	4a8a      	ldr	r2, [pc, #552]	; (8002514 <MX_ADC1_Init+0x240>)
 80022ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022ec:	4b88      	ldr	r3, [pc, #544]	; (8002510 <MX_ADC1_Init+0x23c>)
 80022ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022f4:	4b86      	ldr	r3, [pc, #536]	; (8002510 <MX_ADC1_Init+0x23c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022fa:	4b85      	ldr	r3, [pc, #532]	; (8002510 <MX_ADC1_Init+0x23c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002300:	4b83      	ldr	r3, [pc, #524]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002302:	2201      	movs	r2, #1
 8002304:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002306:	4b82      	ldr	r3, [pc, #520]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800230e:	4b80      	ldr	r3, [pc, #512]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002310:	2200      	movs	r2, #0
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002314:	4b7e      	ldr	r3, [pc, #504]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002316:	4a80      	ldr	r2, [pc, #512]	; (8002518 <MX_ADC1_Init+0x244>)
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800231a:	4b7d      	ldr	r3, [pc, #500]	; (8002510 <MX_ADC1_Init+0x23c>)
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8002320:	4b7b      	ldr	r3, [pc, #492]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002322:	2210      	movs	r2, #16
 8002324:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002326:	4b7a      	ldr	r3, [pc, #488]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800232e:	4b78      	ldr	r3, [pc, #480]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002330:	2201      	movs	r2, #1
 8002332:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002334:	4876      	ldr	r0, [pc, #472]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002336:	f002 f983 	bl	8004640 <HAL_ADC_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002340:	f000 fc72 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002344:	2309      	movs	r3, #9
 8002346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002348:	2301      	movs	r3, #1
 800234a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800234c:	2303      	movs	r3, #3
 800234e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	4619      	mov	r1, r3
 8002354:	486e      	ldr	r0, [pc, #440]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002356:	f002 fb35 	bl	80049c4 <HAL_ADC_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002360:	f000 fc62 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002364:	230a      	movs	r3, #10
 8002366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002368:	2302      	movs	r3, #2
 800236a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800236c:	463b      	mov	r3, r7
 800236e:	4619      	mov	r1, r3
 8002370:	4867      	ldr	r0, [pc, #412]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002372:	f002 fb27 	bl	80049c4 <HAL_ADC_ConfigChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800237c:	f000 fc54 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002380:	2308      	movs	r3, #8
 8002382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002384:	2303      	movs	r3, #3
 8002386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	4860      	ldr	r0, [pc, #384]	; (8002510 <MX_ADC1_Init+0x23c>)
 800238e:	f002 fb19 	bl	80049c4 <HAL_ADC_ConfigChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002398:	f000 fc46 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800239c:	230b      	movs	r3, #11
 800239e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80023a0:	2304      	movs	r3, #4
 80023a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023a4:	463b      	mov	r3, r7
 80023a6:	4619      	mov	r1, r3
 80023a8:	4859      	ldr	r0, [pc, #356]	; (8002510 <MX_ADC1_Init+0x23c>)
 80023aa:	f002 fb0b 	bl	80049c4 <HAL_ADC_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80023b4:	f000 fc38 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80023b8:	230f      	movs	r3, #15
 80023ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80023bc:	2305      	movs	r3, #5
 80023be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c0:	463b      	mov	r3, r7
 80023c2:	4619      	mov	r1, r3
 80023c4:	4852      	ldr	r0, [pc, #328]	; (8002510 <MX_ADC1_Init+0x23c>)
 80023c6:	f002 fafd 	bl	80049c4 <HAL_ADC_ConfigChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80023d0:	f000 fc2a 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023d4:	230c      	movs	r3, #12
 80023d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80023d8:	2306      	movs	r3, #6
 80023da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	484b      	ldr	r0, [pc, #300]	; (8002510 <MX_ADC1_Init+0x23c>)
 80023e2:	f002 faef 	bl	80049c4 <HAL_ADC_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80023ec:	f000 fc1c 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80023f0:	230e      	movs	r3, #14
 80023f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80023f4:	2307      	movs	r3, #7
 80023f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f8:	463b      	mov	r3, r7
 80023fa:	4619      	mov	r1, r3
 80023fc:	4844      	ldr	r0, [pc, #272]	; (8002510 <MX_ADC1_Init+0x23c>)
 80023fe:	f002 fae1 	bl	80049c4 <HAL_ADC_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002408:	f000 fc0e 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800240c:	230d      	movs	r3, #13
 800240e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002410:	2308      	movs	r3, #8
 8002412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002414:	463b      	mov	r3, r7
 8002416:	4619      	mov	r1, r3
 8002418:	483d      	ldr	r0, [pc, #244]	; (8002510 <MX_ADC1_Init+0x23c>)
 800241a:	f002 fad3 	bl	80049c4 <HAL_ADC_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002424:	f000 fc00 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002428:	2307      	movs	r3, #7
 800242a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800242c:	2309      	movs	r3, #9
 800242e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002430:	463b      	mov	r3, r7
 8002432:	4619      	mov	r1, r3
 8002434:	4836      	ldr	r0, [pc, #216]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002436:	f002 fac5 	bl	80049c4 <HAL_ADC_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002440:	f000 fbf2 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002444:	2300      	movs	r3, #0
 8002446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002448:	230a      	movs	r3, #10
 800244a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800244c:	463b      	mov	r3, r7
 800244e:	4619      	mov	r1, r3
 8002450:	482f      	ldr	r0, [pc, #188]	; (8002510 <MX_ADC1_Init+0x23c>)
 8002452:	f002 fab7 	bl	80049c4 <HAL_ADC_ConfigChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800245c:	f000 fbe4 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002460:	2306      	movs	r3, #6
 8002462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002464:	230b      	movs	r3, #11
 8002466:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4828      	ldr	r0, [pc, #160]	; (8002510 <MX_ADC1_Init+0x23c>)
 800246e:	f002 faa9 	bl	80049c4 <HAL_ADC_ConfigChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002478:	f000 fbd6 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800247c:	2301      	movs	r3, #1
 800247e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002480:	230c      	movs	r3, #12
 8002482:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002484:	463b      	mov	r3, r7
 8002486:	4619      	mov	r1, r3
 8002488:	4821      	ldr	r0, [pc, #132]	; (8002510 <MX_ADC1_Init+0x23c>)
 800248a:	f002 fa9b 	bl	80049c4 <HAL_ADC_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002494:	f000 fbc8 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002498:	2305      	movs	r3, #5
 800249a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800249c:	230d      	movs	r3, #13
 800249e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a0:	463b      	mov	r3, r7
 80024a2:	4619      	mov	r1, r3
 80024a4:	481a      	ldr	r0, [pc, #104]	; (8002510 <MX_ADC1_Init+0x23c>)
 80024a6:	f002 fa8d 	bl	80049c4 <HAL_ADC_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80024b0:	f000 fbba 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80024b8:	230e      	movs	r3, #14
 80024ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024bc:	463b      	mov	r3, r7
 80024be:	4619      	mov	r1, r3
 80024c0:	4813      	ldr	r0, [pc, #76]	; (8002510 <MX_ADC1_Init+0x23c>)
 80024c2:	f002 fa7f 	bl	80049c4 <HAL_ADC_ConfigChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80024cc:	f000 fbac 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024d0:	2304      	movs	r3, #4
 80024d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80024d4:	230f      	movs	r3, #15
 80024d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d8:	463b      	mov	r3, r7
 80024da:	4619      	mov	r1, r3
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <MX_ADC1_Init+0x23c>)
 80024de:	f002 fa71 	bl	80049c4 <HAL_ADC_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 80024e8:	f000 fb9e 	bl	8002c28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80024ec:	2303      	movs	r3, #3
 80024ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 80024f0:	2310      	movs	r3, #16
 80024f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f4:	463b      	mov	r3, r7
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_ADC1_Init+0x23c>)
 80024fa:	f002 fa63 	bl	80049c4 <HAL_ADC_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8002504:	f000 fb90 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000058c 	.word	0x2000058c
 8002514:	40012000 	.word	0x40012000
 8002518:	0f000001 	.word	0x0f000001

0800251c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_I2C1_Init+0x50>)
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <MX_I2C1_Init+0x54>)
 8002524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_I2C1_Init+0x50>)
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <MX_I2C1_Init+0x58>)
 800252a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_I2C1_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_I2C1_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_I2C1_Init+0x50>)
 800253a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_I2C1_Init+0x50>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_I2C1_Init+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_I2C1_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_I2C1_Init+0x50>)
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_I2C1_Init+0x50>)
 800255a:	f003 fe6b 	bl	8006234 <HAL_I2C_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002564:	f000 fb60 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200004a8 	.word	0x200004a8
 8002570:	40005400 	.word	0x40005400
 8002574:	000186a0 	.word	0x000186a0

08002578 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <MX_SPI2_Init+0x64>)
 800257e:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <MX_SPI2_Init+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <MX_SPI2_Init+0x64>)
 8002584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002588:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MX_SPI2_Init+0x64>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <MX_SPI2_Init+0x64>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_SPI2_Init+0x64>)
 8002598:	2202      	movs	r2, #2
 800259a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_SPI2_Init+0x64>)
 800259e:	2201      	movs	r2, #1
 80025a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_SPI2_Init+0x64>)
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_SPI2_Init+0x64>)
 80025ac:	2228      	movs	r2, #40	; 0x28
 80025ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <MX_SPI2_Init+0x64>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_SPI2_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <MX_SPI2_Init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_SPI2_Init+0x64>)
 80025c4:	220a      	movs	r2, #10
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_SPI2_Init+0x64>)
 80025ca:	f004 fbe9 	bl	8006da0 <HAL_SPI_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025d4:	f000 fb28 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000408 	.word	0x20000408
 80025e0:	40003800 	.word	0x40003800

080025e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	; 0x30
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f006 fe04 	bl	8009200 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <MX_TIM1_Init+0xa8>)
 8002602:	4a23      	ldr	r2, [pc, #140]	; (8002690 <MX_TIM1_Init+0xac>)
 8002604:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <MX_TIM1_Init+0xa8>)
 8002608:	2200      	movs	r2, #0
 800260a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b1f      	ldr	r3, [pc, #124]	; (800268c <MX_TIM1_Init+0xa8>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <MX_TIM1_Init+0xa8>)
 8002614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002618:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <MX_TIM1_Init+0xa8>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MX_TIM1_Init+0xa8>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <MX_TIM1_Init+0xa8>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800262c:	2303      	movs	r3, #3
 800262e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002634:	2301      	movs	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002644:	2301      	movs	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	4619      	mov	r1, r3
 8002656:	480d      	ldr	r0, [pc, #52]	; (800268c <MX_TIM1_Init+0xa8>)
 8002658:	f005 fbc0 	bl	8007ddc <HAL_TIM_Encoder_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002662:	f000 fae1 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4806      	ldr	r0, [pc, #24]	; (800268c <MX_TIM1_Init+0xa8>)
 8002674:	f006 f9e6 	bl	8008a44 <HAL_TIMEx_MasterConfigSynchronization>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800267e:	f000 fad3 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	3730      	adds	r7, #48	; 0x30
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200006c4 	.word	0x200006c4
 8002690:	40010000 	.word	0x40010000

08002694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f006 fdac 	bl	8009200 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <MX_TIM3_Init+0xa0>)
 80026b2:	4a21      	ldr	r2, [pc, #132]	; (8002738 <MX_TIM3_Init+0xa4>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <MX_TIM3_Init+0xa0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_TIM3_Init+0xa0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <MX_TIM3_Init+0xa0>)
 80026c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <MX_TIM3_Init+0xa0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <MX_TIM3_Init+0xa0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026d6:	2303      	movs	r3, #3
 80026d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026de:	2301      	movs	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	4619      	mov	r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <MX_TIM3_Init+0xa0>)
 8002702:	f005 fb6b 	bl	8007ddc <HAL_TIM_Encoder_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800270c:	f000 fa8c 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002710:	2300      	movs	r3, #0
 8002712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	4619      	mov	r1, r3
 800271c:	4805      	ldr	r0, [pc, #20]	; (8002734 <MX_TIM3_Init+0xa0>)
 800271e:	f006 f991 	bl	8008a44 <HAL_TIMEx_MasterConfigSynchronization>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002728:	f000 fa7e 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000544 	.word	0x20000544
 8002738:	40000400 	.word	0x40000400

0800273c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002742:	f107 0320 	add.w	r3, r7, #32
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	611a      	str	r2, [r3, #16]
 800275a:	615a      	str	r2, [r3, #20]
 800275c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <MX_TIM4_Init+0xc0>)
 8002760:	4a27      	ldr	r2, [pc, #156]	; (8002800 <MX_TIM4_Init+0xc4>)
 8002762:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <MX_TIM4_Init+0xc0>)
 8002766:	2202      	movs	r2, #2
 8002768:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <MX_TIM4_Init+0xc0>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <MX_TIM4_Init+0xc0>)
 8002772:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002776:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <MX_TIM4_Init+0xc0>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <MX_TIM4_Init+0xc0>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002784:	481d      	ldr	r0, [pc, #116]	; (80027fc <MX_TIM4_Init+0xc0>)
 8002786:	f005 f9a2 	bl	8007ace <HAL_TIM_PWM_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002790:	f000 fa4a 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800279c:	f107 0320 	add.w	r3, r7, #32
 80027a0:	4619      	mov	r1, r3
 80027a2:	4816      	ldr	r0, [pc, #88]	; (80027fc <MX_TIM4_Init+0xc0>)
 80027a4:	f006 f94e 	bl	8008a44 <HAL_TIMEx_MasterConfigSynchronization>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80027ae:	f000 fa3b 	bl	8002c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027b2:	2360      	movs	r3, #96	; 0x60
 80027b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <MX_TIM4_Init+0xc0>)
 80027ca:	f005 fddb 	bl	8008384 <HAL_TIM_PWM_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80027d4:	f000 fa28 	bl	8002c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	2204      	movs	r2, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4807      	ldr	r0, [pc, #28]	; (80027fc <MX_TIM4_Init+0xc0>)
 80027e0:	f005 fdd0 	bl	8008384 <HAL_TIM_PWM_ConfigChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80027ea:	f000 fa1d 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027ee:	4803      	ldr	r0, [pc, #12]	; (80027fc <MX_TIM4_Init+0xc0>)
 80027f0:	f000 fe94 	bl	800351c <HAL_TIM_MspPostInit>

}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000460 	.word	0x20000460
 8002800:	40000800 	.word	0x40000800

08002804 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280a:	463b      	mov	r3, r7
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <MX_TIM6_Init+0x64>)
 8002814:	4a15      	ldr	r2, [pc, #84]	; (800286c <MX_TIM6_Init+0x68>)
 8002816:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <MX_TIM6_Init+0x64>)
 800281a:	2204      	movs	r2, #4
 800281c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <MX_TIM6_Init+0x64>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <MX_TIM6_Init+0x64>)
 8002826:	f248 323f 	movw	r2, #33599	; 0x833f
 800282a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_TIM6_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <MX_TIM6_Init+0x64>)
 8002834:	f005 f85c 	bl	80078f0 <HAL_TIM_Base_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800283e:	f000 f9f3 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800284a:	463b      	mov	r3, r7
 800284c:	4619      	mov	r1, r3
 800284e:	4806      	ldr	r0, [pc, #24]	; (8002868 <MX_TIM6_Init+0x64>)
 8002850:	f006 f8f8 	bl	8008a44 <HAL_TIMEx_MasterConfigSynchronization>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800285a:	f000 f9e5 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000067c 	.word	0x2000067c
 800286c:	40001000 	.word	0x40001000

08002870 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MX_TIM10_Init+0x40>)
 8002876:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <MX_TIM10_Init+0x44>)
 8002878:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <MX_TIM10_Init+0x40>)
 800287c:	2204      	movs	r2, #4
 800287e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MX_TIM10_Init+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <MX_TIM10_Init+0x40>)
 8002888:	f248 323f 	movw	r2, #33599	; 0x833f
 800288c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <MX_TIM10_Init+0x40>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_TIM10_Init+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_TIM10_Init+0x40>)
 800289c:	f005 f828 	bl	80078f0 <HAL_TIM_Base_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80028a6:	f000 f9bf 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200004fc 	.word	0x200004fc
 80028b4:	40014400 	.word	0x40014400

080028b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <MX_TIM11_Init+0x44>)
 80028c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028c4:	2204      	movs	r2, #4
 80028c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028d0:	f248 323f 	movw	r2, #33599	; 0x833f
 80028d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_TIM11_Init+0x40>)
 80028e4:	f005 f804 	bl	80078f0 <HAL_TIM_Base_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80028ee:	f000 f99b 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200005d4 	.word	0x200005d4
 80028fc:	40014800 	.word	0x40014800

08002900 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_TIM14_Init+0x40>)
 8002906:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <MX_TIM14_Init+0x44>)
 8002908:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <MX_TIM14_Init+0x40>)
 800290c:	2204      	movs	r2, #4
 800290e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <MX_TIM14_Init+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <MX_TIM14_Init+0x40>)
 8002918:	f248 323f 	movw	r2, #33599	; 0x833f
 800291c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <MX_TIM14_Init+0x40>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_TIM14_Init+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_TIM14_Init+0x40>)
 800292c:	f004 ffe0 	bl	80078f0 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002936:	f000 f977 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000750 	.word	0x20000750
 8002944:	40002000 	.word	0x40002000

08002948 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <MX_USART6_UART_Init+0x50>)
 8002950:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002958:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_USART6_UART_Init+0x4c>)
 8002980:	f006 f8f0 	bl	8008b64 <HAL_UART_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800298a:	f000 f94d 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	2000070c 	.word	0x2000070c
 8002998:	40011400 	.word	0x40011400

0800299c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_DMA_Init+0x3c>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <MX_DMA_Init+0x3c>)
 80029ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_DMA_Init+0x3c>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	2038      	movs	r0, #56	; 0x38
 80029c4:	f002 fb79 	bl	80050ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029c8:	2038      	movs	r0, #56	; 0x38
 80029ca:	f002 fb92 	bl	80050f2 <HAL_NVIC_EnableIRQ>

}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800

080029dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b69      	ldr	r3, [pc, #420]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a68      	ldr	r2, [pc, #416]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b62      	ldr	r3, [pc, #392]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a61      	ldr	r2, [pc, #388]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b5f      	ldr	r3, [pc, #380]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a5a      	ldr	r2, [pc, #360]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b58      	ldr	r3, [pc, #352]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a53      	ldr	r2, [pc, #332]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b51      	ldr	r3, [pc, #324]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <MX_GPIO_Init+0x1c0>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002a84:	4846      	ldr	r0, [pc, #280]	; (8002ba0 <MX_GPIO_Init+0x1c4>)
 8002a86:	f003 fbbb 	bl	8006200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002a90:	4844      	ldr	r0, [pc, #272]	; (8002ba4 <MX_GPIO_Init+0x1c8>)
 8002a92:	f003 fbb5 	bl	8006200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002a9c:	4842      	ldr	r0, [pc, #264]	; (8002ba8 <MX_GPIO_Init+0x1cc>)
 8002a9e:	f003 fbaf 	bl	8006200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4841      	ldr	r0, [pc, #260]	; (8002bac <MX_GPIO_Init+0x1d0>)
 8002aa8:	f003 fbaa 	bl	8006200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002aac:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4836      	ldr	r0, [pc, #216]	; (8002ba0 <MX_GPIO_Init+0x1c4>)
 8002ac6:	f003 f9e7 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8002aca:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002ace:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	4830      	ldr	r0, [pc, #192]	; (8002ba0 <MX_GPIO_Init+0x1c4>)
 8002ae0:	f003 f9da 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8002ae4:	f640 0304 	movw	r3, #2052	; 0x804
 8002ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	482a      	ldr	r0, [pc, #168]	; (8002ba4 <MX_GPIO_Init+0x1c8>)
 8002afa:	f003 f9cd 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8002afe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b04:	2301      	movs	r3, #1
 8002b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	4823      	ldr	r0, [pc, #140]	; (8002ba4 <MX_GPIO_Init+0x1c8>)
 8002b18:	f003 f9be 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8002b1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	481c      	ldr	r0, [pc, #112]	; (8002ba8 <MX_GPIO_Init+0x1cc>)
 8002b36:	f003 f9af 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8002b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4816      	ldr	r0, [pc, #88]	; (8002ba8 <MX_GPIO_Init+0x1cc>)
 8002b50:	f003 f9a2 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b66:	2301      	movs	r3, #1
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <MX_GPIO_Init+0x1cc>)
 8002b72:	f003 f991 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8002b76:	2304      	movs	r3, #4
 8002b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4807      	ldr	r0, [pc, #28]	; (8002bac <MX_GPIO_Init+0x1d0>)
 8002b8e:	f003 f983 	bl	8005e98 <HAL_GPIO_Init>

}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	40020c00 	.word	0x40020c00

08002bb0 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  flash_init();
 8002bb4:	f7ff f978 	bl	8001ea8 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8002bb8:	f000 ffc2 	bl	8003b40 <tim11_init>
  /* encoder_init */
  tim10_init();
 8002bbc:	f000 fe78 	bl	80038b0 <tim10_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8002bc0:	f000 ffd6 	bl	8003b70 <tim6_init>
  /* print who am i */
  imu_init();
 8002bc4:	f7fe fa6e 	bl	80010a4 <imu_init>
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <running_start>:

void running_start()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8002bd0:	f000 fe7e 	bl	80038d0 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8002bd4:	f000 ffe0 	bl	8003b98 <tim6_start>
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <main_print_while>:

void main_print_while()
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	printf("///// WHILE /////\n\r");
 8002be0:	4806      	ldr	r0, [pc, #24]	; (8002bfc <main_print_while+0x20>)
 8002be2:	f007 f98f 	bl	8009f04 <iprintf>
  rotary_print_playmode();
 8002be6:	f7fe fbf5 	bl	80013d4 <rotary_print_playmode>
	print_rotary_value();
 8002bea:	f000 f915 	bl	8002e18 <print_rotary_value>
	/* print Tracer and Velotracer target and gains */
	tracer_print_values();
 8002bee:	f001 fa05 	bl	8003ffc <tracer_print_values>
	velotrace_print_values();
 8002bf2:	f001 fc1d 	bl	8004430 <velotrace_print_values>
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0800dea8 	.word	0x0800dea8

08002c00 <main_d_print>:

void main_d_print()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  #if D_TIM10
  printf("main.c > main_d_print > ");
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <main_d_print+0x14>)
 8002c06:	f007 f97d 	bl	8009f04 <iprintf>
  tim10_d_print();
 8002c0a:	f000 fef5 	bl	80039f8 <tim10_d_print>
  #endif
  #if D_TIM6
  printf("main.c > main_d_print > ");
  tim6_d_print();
  #endif
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	0800debc 	.word	0x0800debc

08002c18 <running_stop>:

void running_stop()
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8002c1c:	f000 ffea 	bl	8003bf4 <tim6_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8002c20:	f000 fe68 	bl	80038f4 <tim10_stop>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2c:	b672      	cpsid	i
}
 8002c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c30:	e7fe      	b.n	8002c30 <Error_Handler+0x8>

08002c32 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 f826 	bl	8002c88 <motor_enable>
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <motor_start>:

void motor_start()
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8002c44:	2100      	movs	r1, #0
 8002c46:	4806      	ldr	r0, [pc, #24]	; (8002c60 <motor_start+0x20>)
 8002c48:	f004 ff90 	bl	8007b6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	4804      	ldr	r0, [pc, #16]	; (8002c60 <motor_start+0x20>)
 8002c50:	f004 ff8c 	bl	8007b6c <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f000 f817 	bl	8002c88 <motor_enable>
#endif
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000460 	.word	0x20000460

08002c64 <motor_stop>:

void motor_stop()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f000 f80d 	bl	8002c88 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002c6e:	2104      	movs	r1, #4
 8002c70:	4804      	ldr	r0, [pc, #16]	; (8002c84 <motor_stop+0x20>)
 8002c72:	f005 f843 	bl	8007cfc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002c76:	2100      	movs	r1, #0
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <motor_stop+0x20>)
 8002c7a:	f005 f83f 	bl	8007cfc <HAL_TIM_PWM_Stop>
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000460 	.word	0x20000460

08002c88 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <motor_enable+0x28>)
 8002ca2:	701a      	strb	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	20000810 	.word	0x20000810

08002cb4 <motor_read_enable>:

char motor_read_enable()
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
    return enable;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <motor_read_enable+0x14>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000810 	.word	0x20000810

08002ccc <motor_set>:

void motor_set(double motor_left_, double motor_right_)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cd6:	ed87 1b00 	vstr	d1, [r7]
    if(motor_left_ < 0)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ce6:	f7fd fef9 	bl	8000adc <__aeabi_dcmplt>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <motor_set+0x3c>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	483a      	ldr	r0, [pc, #232]	; (8002de0 <motor_set+0x114>)
 8002cf6:	f003 fa83 	bl	8006200 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e004      	b.n	8002d12 <motor_set+0x46>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	4834      	ldr	r0, [pc, #208]	; (8002de0 <motor_set+0x114>)
 8002d0e:	f003 fa77 	bl	8006200 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d1e:	f7fd fedd 	bl	8000adc <__aeabi_dcmplt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <motor_set+0x76>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d2e:	482d      	ldr	r0, [pc, #180]	; (8002de4 <motor_set+0x118>)
 8002d30:	f003 fa66 	bl	8006200 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	e005      	b.n	8002d4e <motor_set+0x82>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d42:	2200      	movs	r2, #0
 8002d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d48:	4826      	ldr	r0, [pc, #152]	; (8002de4 <motor_set+0x118>)
 8002d4a:	f003 fa59 	bl	8006200 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <motor_set+0x11c>)
 8002d54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d58:	f7fd fede 	bl	8000b18 <__aeabi_dcmpgt>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <motor_set+0x9e>
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <motor_set+0x11c>)
 8002d68:	e001      	b.n	8002d6e <motor_set+0xa2>
 8002d6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <motor_set+0x11c>)
 8002d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d7c:	f7fd fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <motor_set+0xc2>
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <motor_set+0x11c>)
 8002d8c:	e001      	b.n	8002d92 <motor_set+0xc6>
 8002d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d92:	e9c7 2300 	strd	r2, r3, [r7]

    if(!enable)
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <motor_set+0x120>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <motor_set+0xea>
    {
        motor_left_ = 0;
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor_right_ = 0;
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9c7 2300 	strd	r2, r3, [r7]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <motor_set+0x124>)
 8002db8:	681c      	ldr	r4, [r3, #0]
 8002dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dbe:	f7fd fef3 	bl	8000ba8 <__aeabi_d2uiz>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <motor_set+0x124>)
 8002dc8:	681c      	ldr	r4, [r3, #0]
 8002dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dce:	f7fd feeb 	bl	8000ba8 <__aeabi_d2uiz>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40020800 	.word	0x40020800
 8002de8:	408f4000 	.word	0x408f4000
 8002dec:	20000810 	.word	0x20000810
 8002df0:	20000460 	.word	0x20000460

08002df4 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8002dfc:	1d39      	adds	r1, r7, #4
 8002dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e02:	2201      	movs	r2, #1
 8002e04:	4803      	ldr	r0, [pc, #12]	; (8002e14 <__io_putchar+0x20>)
 8002e06:	f005 fefa 	bl	8008bfe <HAL_UART_Transmit>
	return ch;
 8002e0a:	687b      	ldr	r3, [r7, #4]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000070c 	.word	0x2000070c

08002e18 <print_rotary_value>:

void print_rotary_value()
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8002e1c:	f7fe fa84 	bl	8001328 <rotary_read_value>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4619      	mov	r1, r3
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <print_rotary_value+0x18>)
 8002e26:	f007 f86d 	bl	8009f04 <iprintf>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	0800ded8 	.word	0x0800ded8

08002e34 <sidesensor_read>:

unsigned char subsensbuf, marker, sidedeltacount, markerstate, rightmarkercount;
SideSensorState sidesensorstate;

uint8_t sidesensor_read()
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 8002e3e:	2104      	movs	r1, #4
 8002e40:	4810      	ldr	r0, [pc, #64]	; (8002e84 <sidesensor_read+0x50>)
 8002e42:	f003 f9c5 	bl	80061d0 <HAL_GPIO_ReadPin>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	4413      	add	r3, r2
 8002e58:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 8002e5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e5e:	4809      	ldr	r0, [pc, #36]	; (8002e84 <sidesensor_read+0x50>)
 8002e60:	f003 f9b6 	bl	80061d0 <HAL_GPIO_ReadPin>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <sidesensor_read+0x3a>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e000      	b.n	8002e70 <sidesensor_read+0x3c>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	4413      	add	r3, r2
 8002e76:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8002e78:	79fb      	ldrb	r3, [r7, #7]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40020400 	.word	0x40020400

08002e88 <sidesensor_start>:

void sidesensor_start()
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
    marker = 0;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <sidesensor_start+0x2c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <sidesensor_start+0x30>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <sidesensor_start+0x34>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
    markerstate = 0;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <sidesensor_start+0x38>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <sidesensor_start+0x3c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	20000815 	.word	0x20000815
 8002eb8:	20000812 	.word	0x20000812
 8002ebc:	20000813 	.word	0x20000813
 8002ec0:	20000814 	.word	0x20000814
 8002ec4:	20000816 	.word	0x20000816

08002ec8 <sidesensor_stop>:

void sidesensor_stop()
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <sidesensor_right>:
{
	sidesensorstate = sidesensorstate_;
}

void sidesensor_right()
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
    markerstate = start_or_stop;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <sidesensor_right+0x28>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
    if(rightmarkercount == 1 - 1)
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <sidesensor_right+0x2c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
    }
    else if(rightmarkercount == 2 - 1)
    {
        // stop
    }
    rightmarkercount++;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <sidesensor_right+0x2c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <sidesensor_right+0x2c>)
 8002ef2:	701a      	strb	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000814 	.word	0x20000814
 8002f04:	20000816 	.word	0x20000816

08002f08 <sidesensor_left>:

void sidesensor_left()
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <sidesensor_left+0x14>)
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	20000814 	.word	0x20000814

08002f20 <sidesensor_cross>:

void sidesensor_cross()
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <sidesensor_cross+0x14>)
 8002f26:	2203      	movs	r2, #3
 8002f28:	701a      	strb	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	20000814 	.word	0x20000814

08002f38 <sidesensor_function>:
	// straight
	markerstate = straight;
}

void sidesensor_function()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8002f3e:	f7ff ff79 	bl	8002e34 <sidesensor_read>
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]

	if(subsens != subsensbuf)
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <sidesensor_function+0xac>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	79fa      	ldrb	r2, [r7, #7]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d044      	beq.n	8002fda <sidesensor_function+0xa2>
	{
		subsensbuf = subsens;
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <sidesensor_function+0xac>)
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <sidesensor_function+0xb0>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <sidesensor_function+0xb4>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <sidesensor_function+0xb4>)
 8002f6e:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d12b      	bne.n	8002fce <sidesensor_function+0x96>
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <sidesensor_function+0xb0>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d027      	beq.n	8002fce <sidesensor_function+0x96>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <sidesensor_function+0xb4>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <sidesensor_function+0xb4>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	109b      	asrs	r3, r3, #2
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8002f96:	797b      	ldrb	r3, [r7, #5]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10e      	bne.n	8002fba <sidesensor_function+0x82>
			{
				if (first == 0b01)
 8002f9c:	79bb      	ldrb	r3, [r7, #6]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d102      	bne.n	8002fa8 <sidesensor_function+0x70>
				{
					// right -> start / stop
                    sidesensor_right();
 8002fa2:	f7ff ff99 	bl	8002ed8 <sidesensor_right>
 8002fa6:	e00a      	b.n	8002fbe <sidesensor_function+0x86>
				}
				else if (first == 0b10)
 8002fa8:	79bb      	ldrb	r3, [r7, #6]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d102      	bne.n	8002fb4 <sidesensor_function+0x7c>
				{
					// left -> curve
                    sidesensor_left();
 8002fae:	f7ff ffab 	bl	8002f08 <sidesensor_left>
 8002fb2:	e004      	b.n	8002fbe <sidesensor_function+0x86>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8002fb4:	f7ff ffb4 	bl	8002f20 <sidesensor_cross>
 8002fb8:	e001      	b.n	8002fbe <sidesensor_function+0x86>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8002fba:	f7ff ffb1 	bl	8002f20 <sidesensor_cross>
			}
			sidedeltacount = 0;
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <sidesensor_function+0xb0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <sidesensor_function+0xb4>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
		{
 8002fca:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8002fcc:	e005      	b.n	8002fda <sidesensor_function+0xa2>
			sidedeltacount++;
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <sidesensor_function+0xb0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <sidesensor_function+0xb0>)
 8002fd8:	701a      	strb	r2, [r3, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000812 	.word	0x20000812
 8002fe8:	20000813 	.word	0x20000813
 8002fec:	20000815 	.word	0x20000815

08002ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_MspInit+0x54>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_MspInit+0x54>)
 8003000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003004:	6453      	str	r3, [r2, #68]	; 0x44
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_MspInit+0x54>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_MspInit+0x54>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_MspInit+0x54>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_MspInit+0x54>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	210f      	movs	r1, #15
 8003032:	f06f 0003 	mvn.w	r0, #3
 8003036:	f002 f840 	bl	80050ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800

08003048 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a49      	ldr	r2, [pc, #292]	; (800318c <HAL_ADC_MspInit+0x144>)
 8003066:	4293      	cmp	r3, r2
 8003068:	f040 808c 	bne.w	8003184 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_ADC_MspInit+0x148>)
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	4a46      	ldr	r2, [pc, #280]	; (8003190 <HAL_ADC_MspInit+0x148>)
 8003076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307a:	6453      	str	r3, [r2, #68]	; 0x44
 800307c:	4b44      	ldr	r3, [pc, #272]	; (8003190 <HAL_ADC_MspInit+0x148>)
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	4b40      	ldr	r3, [pc, #256]	; (8003190 <HAL_ADC_MspInit+0x148>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	4a3f      	ldr	r2, [pc, #252]	; (8003190 <HAL_ADC_MspInit+0x148>)
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	6313      	str	r3, [r2, #48]	; 0x30
 8003098:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_ADC_MspInit+0x148>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_ADC_MspInit+0x148>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_ADC_MspInit+0x148>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6313      	str	r3, [r2, #48]	; 0x30
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_ADC_MspInit+0x148>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_ADC_MspInit+0x148>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	4a31      	ldr	r2, [pc, #196]	; (8003190 <HAL_ADC_MspInit+0x148>)
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	6313      	str	r3, [r2, #48]	; 0x30
 80030d0:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_ADC_MspInit+0x148>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80030dc:	233f      	movs	r3, #63	; 0x3f
 80030de:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e0:	2303      	movs	r3, #3
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e8:	f107 031c 	add.w	r3, r7, #28
 80030ec:	4619      	mov	r1, r3
 80030ee:	4829      	ldr	r0, [pc, #164]	; (8003194 <HAL_ADC_MspInit+0x14c>)
 80030f0:	f002 fed2 	bl	8005e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80030f4:	23ff      	movs	r3, #255	; 0xff
 80030f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030f8:	2303      	movs	r3, #3
 80030fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4619      	mov	r1, r3
 8003106:	4824      	ldr	r0, [pc, #144]	; (8003198 <HAL_ADC_MspInit+0x150>)
 8003108:	f002 fec6 	bl	8005e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800310c:	2303      	movs	r3, #3
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003110:	2303      	movs	r3, #3
 8003112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	4619      	mov	r1, r3
 800311e:	481f      	ldr	r0, [pc, #124]	; (800319c <HAL_ADC_MspInit+0x154>)
 8003120:	f002 feba 	bl	8005e98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <HAL_ADC_MspInit+0x15c>)
 8003128:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 800312c:	2200      	movs	r2, #0
 800312e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 8003138:	2200      	movs	r2, #0
 800313a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 800313e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003142:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 8003146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 800314e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003152:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 8003156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800315a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 800315e:	2200      	movs	r2, #0
 8003160:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003168:	480d      	ldr	r0, [pc, #52]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 800316a:	f001 ffdd 	bl	8005128 <HAL_DMA_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003174:	f7ff fd58 	bl	8002c28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
 800317e:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <HAL_ADC_MspInit+0x158>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003184:	bf00      	nop
 8003186:	3730      	adds	r7, #48	; 0x30
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40012000 	.word	0x40012000
 8003190:	40023800 	.word	0x40023800
 8003194:	40020800 	.word	0x40020800
 8003198:	40020000 	.word	0x40020000
 800319c:	40020400 	.word	0x40020400
 80031a0:	2000061c 	.word	0x2000061c
 80031a4:	40026410 	.word	0x40026410

080031a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_I2C_MspInit+0x84>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d12c      	bne.n	8003224 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_I2C_MspInit+0x88>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <HAL_I2C_MspInit+0x88>)
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_I2C_MspInit+0x88>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ec:	2312      	movs	r3, #18
 80031ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031f8:	2304      	movs	r3, #4
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4619      	mov	r1, r3
 8003202:	480c      	ldr	r0, [pc, #48]	; (8003234 <HAL_I2C_MspInit+0x8c>)
 8003204:	f002 fe48 	bl	8005e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <HAL_I2C_MspInit+0x88>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4a07      	ldr	r2, [pc, #28]	; (8003230 <HAL_I2C_MspInit+0x88>)
 8003212:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003216:	6413      	str	r3, [r2, #64]	; 0x40
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_I2C_MspInit+0x88>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40005400 	.word	0x40005400
 8003230:	40023800 	.word	0x40023800
 8003234:	40020400 	.word	0x40020400

08003238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_SPI_MspInit+0x84>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12c      	bne.n	80032b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_SPI_MspInit+0x88>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_SPI_MspInit+0x88>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_SPI_MspInit+0x88>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_SPI_MspInit+0x88>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_SPI_MspInit+0x88>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_SPI_MspInit+0x88>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003292:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032a4:	2305      	movs	r3, #5
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	4619      	mov	r1, r3
 80032ae:	4805      	ldr	r0, [pc, #20]	; (80032c4 <HAL_SPI_MspInit+0x8c>)
 80032b0:	f002 fdf2 	bl	8005e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032b4:	bf00      	nop
 80032b6:	3728      	adds	r7, #40	; 0x28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40003800 	.word	0x40003800
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40020400 	.word	0x40020400

080032c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <HAL_TIM_Encoder_MspInit+0x108>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d13d      	bne.n	8003366 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a38      	ldr	r2, [pc, #224]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8003322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003334:	2301      	movs	r3, #1
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	4826      	ldr	r0, [pc, #152]	; (80033d8 <HAL_TIM_Encoder_MspInit+0x110>)
 8003340:	f002 fdaa 	bl	8005e98 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	2019      	movs	r0, #25
 800334a:	f001 feb6 	bl	80050ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800334e:	2019      	movs	r0, #25
 8003350:	f001 fecf 	bl	80050f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	2100      	movs	r1, #0
 8003358:	201a      	movs	r0, #26
 800335a:	f001 feae 	bl	80050ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800335e:	201a      	movs	r0, #26
 8003360:	f001 fec7 	bl	80050f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003364:	e030      	b.n	80033c8 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_TIM_Encoder_MspInit+0x114>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d12b      	bne.n	80033c8 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800337a:	f043 0302 	orr.w	r3, r3, #2
 800337e:	6413      	str	r3, [r2, #64]	; 0x40
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	6313      	str	r3, [r2, #48]	; 0x30
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 80033a8:	2330      	movs	r3, #48	; 0x30
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033b8:	2302      	movs	r3, #2
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	4619      	mov	r1, r3
 80033c2:	4807      	ldr	r0, [pc, #28]	; (80033e0 <HAL_TIM_Encoder_MspInit+0x118>)
 80033c4:	f002 fd68 	bl	8005e98 <HAL_GPIO_Init>
}
 80033c8:	bf00      	nop
 80033ca:	3730      	adds	r7, #48	; 0x30
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40020400 	.word	0x40020400

080033e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_TIM_PWM_MspInit+0x3c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10d      	bne.n	8003412 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_TIM_PWM_MspInit+0x40>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_TIM_PWM_MspInit+0x40>)
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <HAL_TIM_PWM_MspInit+0x40>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40000800 	.word	0x40000800
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a34      	ldr	r2, [pc, #208]	; (8003508 <HAL_TIM_Base_MspInit+0xe0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d116      	bne.n	8003468 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a32      	ldr	r2, [pc, #200]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 8003444:	f043 0310 	orr.w	r3, r3, #16
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b30      	ldr	r3, [pc, #192]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	2036      	movs	r0, #54	; 0x36
 800345c:	f001 fe2d 	bl	80050ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003460:	2036      	movs	r0, #54	; 0x36
 8003462:	f001 fe46 	bl	80050f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003466:	e04a      	b.n	80034fe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a28      	ldr	r2, [pc, #160]	; (8003510 <HAL_TIM_Base_MspInit+0xe8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d116      	bne.n	80034a0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b25      	ldr	r3, [pc, #148]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a24      	ldr	r2, [pc, #144]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	2100      	movs	r1, #0
 8003492:	2019      	movs	r0, #25
 8003494:	f001 fe11 	bl	80050ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003498:	2019      	movs	r0, #25
 800349a:	f001 fe2a 	bl	80050f2 <HAL_NVIC_EnableIRQ>
}
 800349e:	e02e      	b.n	80034fe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_TIM_Base_MspInit+0xec>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d116      	bne.n	80034d8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	201a      	movs	r0, #26
 80034cc:	f001 fdf5 	bl	80050ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80034d0:	201a      	movs	r0, #26
 80034d2:	f001 fe0e 	bl	80050f2 <HAL_NVIC_EnableIRQ>
}
 80034d6:	e012      	b.n	80034fe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <HAL_TIM_Base_MspInit+0xf0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6413      	str	r3, [r2, #64]	; 0x40
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_TIM_Base_MspInit+0xe4>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40001000 	.word	0x40001000
 800350c:	40023800 	.word	0x40023800
 8003510:	40014400 	.word	0x40014400
 8003514:	40014800 	.word	0x40014800
 8003518:	40002000 	.word	0x40002000

0800351c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 030c 	add.w	r3, r7, #12
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a12      	ldr	r2, [pc, #72]	; (8003584 <HAL_TIM_MspPostInit+0x68>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d11d      	bne.n	800357a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_TIM_MspPostInit+0x6c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <HAL_TIM_MspPostInit+0x6c>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_TIM_MspPostInit+0x6c>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 800355a:	23c0      	movs	r3, #192	; 0xc0
 800355c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800356a:	2302      	movs	r3, #2
 800356c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	; (800358c <HAL_TIM_MspPostInit+0x70>)
 8003576:	f002 fc8f 	bl	8005e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800357a:	bf00      	nop
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40000800 	.word	0x40000800
 8003588:	40023800 	.word	0x40023800
 800358c:	40020400 	.word	0x40020400

08003590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_UART_MspInit+0x84>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d12b      	bne.n	800360a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035bc:	f043 0320 	orr.w	r3, r3, #32
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035ea:	23c0      	movs	r3, #192	; 0xc0
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035fa:	2308      	movs	r3, #8
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4805      	ldr	r0, [pc, #20]	; (800361c <HAL_UART_MspInit+0x8c>)
 8003606:	f002 fc47 	bl	8005e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40011400 	.word	0x40011400
 8003618:	40023800 	.word	0x40023800
 800361c:	40020800 	.word	0x40020800

08003620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003624:	e7fe      	b.n	8003624 <NMI_Handler+0x4>

08003626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362a:	e7fe      	b.n	800362a <HardFault_Handler+0x4>

0800362c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003630:	e7fe      	b.n	8003630 <MemManage_Handler+0x4>

08003632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003636:	e7fe      	b.n	8003636 <BusFault_Handler+0x4>

08003638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800363c:	e7fe      	b.n	800363c <UsageFault_Handler+0x4>

0800363e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800366c:	f000 ffa4 	bl	80045b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}

08003674 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003678:	4803      	ldr	r0, [pc, #12]	; (8003688 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800367a:	f004 fd7a 	bl	8008172 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800367e:	4803      	ldr	r0, [pc, #12]	; (800368c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003680:	f004 fd77 	bl	8008172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200006c4 	.word	0x200006c4
 800368c:	200004fc 	.word	0x200004fc

08003690 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003694:	4803      	ldr	r0, [pc, #12]	; (80036a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003696:	f004 fd6c 	bl	8008172 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800369a:	4803      	ldr	r0, [pc, #12]	; (80036a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800369c:	f004 fd69 	bl	8008172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80036a0:	bf00      	nop
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200006c4 	.word	0x200006c4
 80036a8:	200005d4 	.word	0x200005d4

080036ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <TIM6_DAC_IRQHandler+0x10>)
 80036b2:	f004 fd5e 	bl	8008172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000067c 	.word	0x2000067c

080036c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <DMA2_Stream0_IRQHandler+0x10>)
 80036c6:	f001 fea5 	bl	8005414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2000061c 	.word	0x2000061c

080036d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	return 1;
 80036d8:	2301      	movs	r3, #1
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_kill>:

int _kill(int pid, int sig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036ee:	f005 fd4f 	bl	8009190 <__errno>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2216      	movs	r2, #22
 80036f6:	601a      	str	r2, [r3, #0]
	return -1;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_exit>:

void _exit (int status)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ffe7 	bl	80036e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003716:	e7fe      	b.n	8003716 <_exit+0x12>

08003718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e00a      	b.n	8003740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800372a:	f3af 8000 	nop.w
 800372e:	4601      	mov	r1, r0
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	60ba      	str	r2, [r7, #8]
 8003736:	b2ca      	uxtb	r2, r1
 8003738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	dbf0      	blt.n	800372a <_read+0x12>
	}

return len;
 8003748:	687b      	ldr	r3, [r7, #4]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e009      	b.n	8003778 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	60ba      	str	r2, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fb41 	bl	8002df4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	3301      	adds	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	dbf1      	blt.n	8003764 <_write+0x12>
	}
	return len;
 8003780:	687b      	ldr	r3, [r7, #4]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <_close>:

int _close(int file)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
	return -1;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b2:	605a      	str	r2, [r3, #4]
	return 0;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_isatty>:

int _isatty(int file)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
	return 1;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
	return 0;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <_sbrk+0x5c>)
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <_sbrk+0x60>)
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <_sbrk+0x64>)
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <_sbrk+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <_sbrk+0x64>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003824:	f005 fcb4 	bl	8009190 <__errno>
 8003828:	4603      	mov	r3, r0
 800382a:	220c      	movs	r2, #12
 800382c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	e009      	b.n	8003848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <_sbrk+0x64>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <_sbrk+0x64>)
 8003844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20020000 	.word	0x20020000
 8003854:	00000400 	.word	0x00000400
 8003858:	200001fc 	.word	0x200001fc
 800385c:	200008d8 	.word	0x200008d8

08003860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <SystemInit+0x28>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	4a07      	ldr	r2, [pc, #28]	; (8003888 <SystemInit+0x28>)
 800386c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <SystemInit+0x28>)
 8003876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800387a:	609a      	str	r2, [r3, #8]
#endif
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <tim10_read_velocity>:
{
  return velocity_right;
}

double tim10_read_velocity()
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return velocity;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <tim10_read_velocity+0x20>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	ec43 2b17 	vmov	d7, r2, r3
}
 800389a:	eeb0 0a47 	vmov.f32	s0, s14
 800389e:	eef0 0a67 	vmov.f32	s1, s15
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000828 	.word	0x20000828

080038b0 <tim10_init>:

/* only use in main.c */
void tim10_init()
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  tim10_length_set_zero();
 80038b4:	f000 f900 	bl	8003ab8 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 80038b8:	f000 f920 	bl	8003afc <tim10_velocity_set_zero>
	encoder_init();
 80038bc:	f7fe fa28 	bl	8001d10 <encoder_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <tim10_init+0x1c>)
 80038c2:	f004 f8d5 	bl	8007a70 <HAL_TIM_Base_Stop_IT>
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200004fc 	.word	0x200004fc

080038d0 <tim10_start>:

void tim10_start()
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start */
  encoder_start();
 80038d4:	f7fe fa2e 	bl	8001d34 <encoder_start>
  /* marker = subsensbuf = sidedeltacount = markerstate = rightmarkercount = 0 */
  sidesensor_start();
 80038d8:	f7ff fad6 	bl	8002e88 <sidesensor_start>
  tim10_length_set_zero();
 80038dc:	f000 f8ec 	bl	8003ab8 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 80038e0:	f000 f90c 	bl	8003afc <tim10_velocity_set_zero>
  HAL_TIM_Base_Start_IT(&htim10);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <tim10_start+0x20>)
 80038e6:	f004 f853 	bl	8007990 <HAL_TIM_Base_Start_IT>
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200004fc 	.word	0x200004fc

080038f4 <tim10_stop>:

void tim10_stop()
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 80038f8:	4804      	ldr	r0, [pc, #16]	; (800390c <tim10_stop+0x18>)
 80038fa:	f004 f8b9 	bl	8007a70 <HAL_TIM_Base_Stop_IT>
  sidesensor_stop();
 80038fe:	f7ff fae3 	bl	8002ec8 <sidesensor_stop>
  encoder_stop();
 8003902:	f7fe fa41 	bl	8001d88 <encoder_stop>
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200004fc 	.word	0x200004fc

08003910 <tim10_main>:

void tim10_main()
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
  double el, er, e;

  /* encoder をセットしてから encoder_length を読み出さないといけない */

  /* set encoder middle and update velocities */
  encoder_set();
 8003916:	f7fe f9c1 	bl	8001c9c <encoder_set>

  el = encoder_length_left();
 800391a:	f7fe f961 	bl	8001be0 <encoder_length_left>
 800391e:	ed87 0b04 	vstr	d0, [r7, #16]
  er = encoder_length_right();
 8003922:	f7fe f97d 	bl	8001c20 <encoder_length_right>
 8003926:	ed87 0b02 	vstr	d0, [r7, #8]
  e = encoder_length();
 800392a:	f7fe f93d 	bl	8001ba8 <encoder_length>
 800392e:	ed87 0b00 	vstr	d0, [r7]

  /* update velocity */
  velocity_left = el * (double) TIM10_Hz;
 8003932:	a329      	add	r3, pc, #164	; (adr r3, 80039d8 <tim10_main+0xc8>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800393c:	f7fc fe5c 	bl	80005f8 <__aeabi_dmul>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4926      	ldr	r1, [pc, #152]	; (80039e0 <tim10_main+0xd0>)
 8003946:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = er * (double) TIM10_Hz;
 800394a:	a323      	add	r3, pc, #140	; (adr r3, 80039d8 <tim10_main+0xc8>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003954:	f7fc fe50 	bl	80005f8 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4921      	ldr	r1, [pc, #132]	; (80039e4 <tim10_main+0xd4>)
 800395e:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = e * (double) TIM10_Hz;
 8003962:	a31d      	add	r3, pc, #116	; (adr r3, 80039d8 <tim10_main+0xc8>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800396c:	f7fc fe44 	bl	80005f8 <__aeabi_dmul>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	491c      	ldr	r1, [pc, #112]	; (80039e8 <tim10_main+0xd8>)
 8003976:	e9c1 2300 	strd	r2, r3, [r1]

  /* update lengths */
  length_left += velocity_left;
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <tim10_main+0xdc>)
 800397c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <tim10_main+0xd0>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fc fc81 	bl	800028c <__adddf3>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4917      	ldr	r1, [pc, #92]	; (80039ec <tim10_main+0xdc>)
 8003990:	e9c1 2300 	strd	r2, r3, [r1]
  length_right += velocity_right;
 8003994:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <tim10_main+0xe0>)
 8003996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <tim10_main+0xd4>)
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f7fc fc74 	bl	800028c <__adddf3>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4911      	ldr	r1, [pc, #68]	; (80039f0 <tim10_main+0xe0>)
 80039aa:	e9c1 2300 	strd	r2, r3, [r1]
  length += velocity;
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <tim10_main+0xe4>)
 80039b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <tim10_main+0xd8>)
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	f7fc fc67 	bl	800028c <__adddf3>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	490c      	ldr	r1, [pc, #48]	; (80039f4 <tim10_main+0xe4>)
 80039c4:	e9c1 2300 	strd	r2, r3, [r1]
  {
    course_state_function();
  }
  */

  sidesensor_function();
 80039c8:	f7ff fab6 	bl	8002f38 <sidesensor_function>
}
 80039cc:	bf00      	nop
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	f3af 8000 	nop.w
 80039d8:	e0000000 	.word	0xe0000000
 80039dc:	3f50624d 	.word	0x3f50624d
 80039e0:	20000838 	.word	0x20000838
 80039e4:	20000830 	.word	0x20000830
 80039e8:	20000828 	.word	0x20000828
 80039ec:	20000818 	.word	0x20000818
 80039f0:	20000840 	.word	0x20000840
 80039f4:	20000820 	.word	0x20000820

080039f8 <tim10_d_print>:

void tim10_d_print()
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	ed2d 8b02 	vpush	{d8}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af04      	add	r7, sp, #16
  #if D_TIM10
  printf("tim10.c > ");
 8003a02:	4823      	ldr	r0, [pc, #140]	; (8003a90 <tim10_d_print+0x98>)
 8003a04:	f006 fa7e 	bl	8009f04 <iprintf>
  printf("tim10_d_print() > encoder_length_left() = %7.5f, encoder_length_right() = %7.5f, encoder_length() = %7.5f\r\n", encoder_length_left(), encoder_length_right(), encoder_length());
 8003a08:	f7fe f8ea 	bl	8001be0 <encoder_length_left>
 8003a0c:	ec55 4b10 	vmov	r4, r5, d0
 8003a10:	f7fe f906 	bl	8001c20 <encoder_length_right>
 8003a14:	eeb0 8a40 	vmov.f32	s16, s0
 8003a18:	eef0 8a60 	vmov.f32	s17, s1
 8003a1c:	f7fe f8c4 	bl	8001ba8 <encoder_length>
 8003a20:	eeb0 7a40 	vmov.f32	s14, s0
 8003a24:	eef0 7a60 	vmov.f32	s15, s1
 8003a28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a2c:	ed8d 8b00 	vstr	d8, [sp]
 8003a30:	4622      	mov	r2, r4
 8003a32:	462b      	mov	r3, r5
 8003a34:	4817      	ldr	r0, [pc, #92]	; (8003a94 <tim10_d_print+0x9c>)
 8003a36:	f006 fa65 	bl	8009f04 <iprintf>
  printf("tim10_d_print() > velocity_left = %7.2f, velocity_right = %7.2f, velocity = %7.2f\r\n", velocity_left, velocity_right, velocity);
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <tim10_d_print+0xa0>)
 8003a3c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <tim10_d_print+0xa4>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	4916      	ldr	r1, [pc, #88]	; (8003aa0 <tim10_d_print+0xa8>)
 8003a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a50:	e9cd 2300 	strd	r2, r3, [sp]
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	4812      	ldr	r0, [pc, #72]	; (8003aa4 <tim10_d_print+0xac>)
 8003a5a:	f006 fa53 	bl	8009f04 <iprintf>
  printf("tim10_d_print() > length_left = %7.2f, length_right = %7.2f, length = %7.2f\r\n", length_left, length_right, length);
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <tim10_d_print+0xb0>)
 8003a60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <tim10_d_print+0xb4>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <tim10_d_print+0xb8>)
 8003a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a74:	e9cd 2300 	strd	r2, r3, [sp]
 8003a78:	4622      	mov	r2, r4
 8003a7a:	462b      	mov	r3, r5
 8003a7c:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <tim10_d_print+0xbc>)
 8003a7e:	f006 fa41 	bl	8009f04 <iprintf>
  #endif
  #if D_ENCODER
  encoder_d_print();
 8003a82:	f7fe f8eb 	bl	8001c5c <encoder_d_print>
  #endif
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	ecbd 8b02 	vpop	{d8}
 8003a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a90:	0800df50 	.word	0x0800df50
 8003a94:	0800df5c 	.word	0x0800df5c
 8003a98:	20000838 	.word	0x20000838
 8003a9c:	20000830 	.word	0x20000830
 8003aa0:	20000828 	.word	0x20000828
 8003aa4:	0800dfc8 	.word	0x0800dfc8
 8003aa8:	20000818 	.word	0x20000818
 8003aac:	20000840 	.word	0x20000840
 8003ab0:	20000820 	.word	0x20000820
 8003ab4:	0800e01c 	.word	0x0800e01c

08003ab8 <tim10_length_set_zero>:

/* private */
void tim10_length_set_zero()
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  length_left = 0;
 8003abc:	490c      	ldr	r1, [pc, #48]	; (8003af0 <tim10_length_set_zero+0x38>)
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	e9c1 2300 	strd	r2, r3, [r1]
  length_right = 0;
 8003aca:	490a      	ldr	r1, [pc, #40]	; (8003af4 <tim10_length_set_zero+0x3c>)
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9c1 2300 	strd	r2, r3, [r1]
  length = 0;
 8003ad8:	4907      	ldr	r1, [pc, #28]	; (8003af8 <tim10_length_set_zero+0x40>)
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003ae6:	bf00      	nop
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	20000818 	.word	0x20000818
 8003af4:	20000840 	.word	0x20000840
 8003af8:	20000820 	.word	0x20000820

08003afc <tim10_velocity_set_zero>:

void tim10_velocity_set_zero()
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  velocity_left = 0;
 8003b00:	490c      	ldr	r1, [pc, #48]	; (8003b34 <tim10_velocity_set_zero+0x38>)
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = 0;
 8003b0e:	490a      	ldr	r1, [pc, #40]	; (8003b38 <tim10_velocity_set_zero+0x3c>)
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = 0;
 8003b1c:	4907      	ldr	r1, [pc, #28]	; (8003b3c <tim10_velocity_set_zero+0x40>)
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20000838 	.word	0x20000838
 8003b38:	20000830 	.word	0x20000830
 8003b3c:	20000828 	.word	0x20000828

08003b40 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
    switch_init();
 8003b44:	f7fd fcd2 	bl	80014ec <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8003b48:	4803      	ldr	r0, [pc, #12]	; (8003b58 <tim11_init+0x18>)
 8003b4a:	f003 ff21 	bl	8007990 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8003b4e:	f7fd fbbf 	bl	80012d0 <rotary_init>
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200005d4 	.word	0x200005d4

08003b5c <tim11_main>:

void tim11_main()
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
    switch_enter();
 8003b60:	f7fd fd13 	bl	800158a <switch_enter>
    rotary_set_value();
 8003b64:	f7fd fbd4 	bl	8001310 <rotary_set_value>
}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0000      	movs	r0, r0
	...

08003b70 <tim6_init>:
int direction;
double leftmotor, rightmotor;
#endif

void tim6_init()
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
    motor_init();
 8003b74:	f7ff f85d 	bl	8002c32 <motor_init>
    analog_init();
 8003b78:	f7fd fede 	bl	8001938 <analog_init>
    velotrace_init(1);
 8003b7c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003b90 <tim6_init+0x20>
 8003b80:	f000 fab8 	bl	80040f4 <velotrace_init>
    tracer_init(1);
 8003b84:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8003b90 <tim6_init+0x20>
 8003b88:	f000 f90a 	bl	8003da0 <tracer_init>
}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	00000000 	.word	0x00000000
 8003b94:	3ff00000 	.word	0x3ff00000

08003b98 <tim6_start>:

void tim6_start()
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
    /* analogmin/max = FlashBuffer.analogmin/max */
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <tim6_start+0x40>)
 8003b9e:	480f      	ldr	r0, [pc, #60]	; (8003bdc <tim6_start+0x44>)
 8003ba0:	f7fd fe06 	bl	80017b0 <analog_set_from_flash>
    /* sensgettime = 0, HAL_ADC_Start_DMA() */
    printf("analog_start()\r\n");
 8003ba4:	480e      	ldr	r0, [pc, #56]	; (8003be0 <tim6_start+0x48>)
 8003ba6:	f006 fa33 	bl	800a010 <puts>
    analog_start();
 8003baa:	f7fd fed7 	bl	800195c <analog_start>
    /* samplingtime = 0, s_error = 0, before_error = 0, if search ( p/i/d = [0], target = [0] ) */
    printf("velotrace_start()\r\n");
 8003bae:	480d      	ldr	r0, [pc, #52]	; (8003be4 <tim6_start+0x4c>)
 8003bb0:	f006 fa2e 	bl	800a010 <puts>
    velotrace_start();
 8003bb4:	f000 fa60 	bl	8004078 <velotrace_start>
    /* samplingtime = 0, s_error = 0, before_error = 0 */
    printf("tracer_start()\r\n");
 8003bb8:	480b      	ldr	r0, [pc, #44]	; (8003be8 <tim6_start+0x50>)
 8003bba:	f006 fa29 	bl	800a010 <puts>
    tracer_start();
 8003bbe:	f000 f8ab 	bl	8003d18 <tracer_start>

    printf("motor_start()\r\n");
 8003bc2:	480a      	ldr	r0, [pc, #40]	; (8003bec <tim6_start+0x54>)
 8003bc4:	f006 fa24 	bl	800a010 <puts>
    analogr = 0;
    direction = 0;
    leftmotor = 0;
    rightmotor = 0;
    #endif
    motor_start();
 8003bc8:	f7ff f83a 	bl	8002c40 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8003bcc:	4808      	ldr	r0, [pc, #32]	; (8003bf0 <tim6_start+0x58>)
 8003bce:	f003 fedf 	bl	8007990 <HAL_TIM_Base_Start_IT>
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200007d2 	.word	0x200007d2
 8003bdc:	200007b2 	.word	0x200007b2
 8003be0:	0800e06c 	.word	0x0800e06c
 8003be4:	0800e07c 	.word	0x0800e07c
 8003be8:	0800e090 	.word	0x0800e090
 8003bec:	0800e0a0 	.word	0x0800e0a0
 8003bf0:	2000067c 	.word	0x2000067c

08003bf4 <tim6_stop>:

void tim6_stop()
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8003bf8:	4804      	ldr	r0, [pc, #16]	; (8003c0c <tim6_stop+0x18>)
 8003bfa:	f003 ff39 	bl	8007a70 <HAL_TIM_Base_Stop_IT>
    analog_stop();
 8003bfe:	f7fd feb9 	bl	8001974 <analog_stop>
    motor_stop();
 8003c02:	f7ff f82f 	bl	8002c64 <motor_stop>
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	2000067c 	.word	0x2000067c

08003c10 <tim6_main>:

void tim6_main()
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
    int direction;
    double leftmotor, rightmotor;
    #endif
    // #if !VELOTRACE_TUNING
    analogl = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	83fb      	strh	r3, [r7, #30]
    analogr = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	83bb      	strh	r3, [r7, #28]
    leftmotor   = velotrace_solve(tim10_read_velocity()) + 0;
    rightmotor  = velotrace_solve(tim10_read_velocity()) - 0;
    motor_set(leftmotor, rightmotor);
	#endif

    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	71fb      	strb	r3, [r7, #7]
 8003c22:	e01b      	b.n	8003c5c <tim6_main+0x4c>
    {
        if(i % 2 == 0)
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <tim6_main+0x34>
        {
            analogl += analog_sensor_get(i);
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd feca 	bl	80019cc <analog_sensor_get>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	8bfb      	ldrh	r3, [r7, #30]
 8003c3e:	4413      	add	r3, r2
 8003c40:	83fb      	strh	r3, [r7, #30]
 8003c42:	e008      	b.n	8003c56 <tim6_main+0x46>
        }
        else
        {
            analogr += analog_sensor_get(i);
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd fec0 	bl	80019cc <analog_sensor_get>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	8bbb      	ldrh	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	83bb      	strh	r3, [r7, #28]
    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	71fb      	strb	r3, [r7, #7]
 8003c5c:	f7fd fe10 	bl	8001880 <analog_read_calibrationsize>
 8003c60:	4603      	mov	r3, r0
 8003c62:	461a      	mov	r2, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d3dc      	bcc.n	8003c24 <tim6_main+0x14>
    }
    #endif

    // ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
    // When ( direction > 0 ) , must turn right.
    direction = (analogl - analogr);	// difference
 8003c6a:	8bfa      	ldrh	r2, [r7, #30]
 8003c6c:	8bbb      	ldrh	r3, [r7, #28]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	603b      	str	r3, [r7, #0]
    printf("motor_read_enable() = %1d\r\n", motor_read_enable());
    #endif

    // #endif  /* !VELOTRACE_TUNING */

    if(motor_read_enable())
 8003c72:	f7ff f81f 	bl	8002cb4 <motor_read_enable>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d026      	beq.n	8003cca <tim6_main+0xba>
        #if TRACER_TUNING
        leftmotor   = 0 + tracer_solve(direction);
        rightmotor  = 0 - tracer_solve(direction);
        #endif
        #if VELOTRACE_TUNING
        leftmotor   = velotrace_solve(tim10_read_velocity()) + 0;
 8003c7c:	f7ff fe06 	bl	800388c <tim10_read_velocity>
 8003c80:	eeb0 7a40 	vmov.f32	s14, s0
 8003c84:	eef0 7a60 	vmov.f32	s15, s1
 8003c88:	eeb0 0a47 	vmov.f32	s0, s14
 8003c8c:	eef0 0a67 	vmov.f32	s1, s15
 8003c90:	f000 fb4c 	bl	800432c <velotrace_solve>
 8003c94:	ec51 0b10 	vmov	r0, r1, d0
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	f7fc faf4 	bl	800028c <__adddf3>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor  = velotrace_solve(tim10_read_velocity()) - 0;
 8003cac:	f7ff fdee 	bl	800388c <tim10_read_velocity>
 8003cb0:	eeb0 7a40 	vmov.f32	s14, s0
 8003cb4:	eef0 7a60 	vmov.f32	s15, s1
 8003cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8003cbc:	eef0 0a67 	vmov.f32	s1, s15
 8003cc0:	f000 fb34 	bl	800432c <velotrace_solve>
 8003cc4:	ed87 0b02 	vstr	d0, [r7, #8]
 8003cc8:	e00b      	b.n	8003ce2 <tim6_main+0xd2>
        // printf("tracer_solve(direction) = %7.2f velotrace_solve(tim10_read_velocity()) = %7.2f\r\n", tracer_solve(direction), velotrace_solve(tim10_read_velocity()));
        #endif
    }
    else
    {
        leftmotor = 0;
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor = 0;
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9c7 2302 	strd	r2, r3, [r7, #8]

    #if D_TIM6_WHILE
    printf("leftmotor = %7.2f, rightmotor = %7.2f\r\n", leftmotor, rightmotor);
    #endif

    if(rotary_read_playmode() == motor_free)
 8003ce2:	f7fd fb09 	bl	80012f8 <rotary_read_playmode>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d106      	bne.n	8003cfa <tim6_main+0xea>
    {
        motor_set(0, 0);
 8003cec:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8003d10 <tim6_main+0x100>
 8003cf0:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8003d10 <tim6_main+0x100>
 8003cf4:	f7fe ffea 	bl	8002ccc <motor_set>
    {
		#if !TEMPORARY
        motor_set(leftmotor, rightmotor);
		#endif	/* TEMPLATE */
    }
}
 8003cf8:	e005      	b.n	8003d06 <tim6_main+0xf6>
        motor_set(leftmotor, rightmotor);
 8003cfa:	ed97 1b02 	vldr	d1, [r7, #8]
 8003cfe:	ed97 0b04 	vldr	d0, [r7, #16]
 8003d02:	f7fe ffe3 	bl	8002ccc <motor_set>
}
 8003d06:	bf00      	nop
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
	...

08003d18 <tracer_start>:
double samplingtime;

PID tracer_pid;

void tracer_start()
{
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af04      	add	r7, sp, #16
    tracer_init(1);
 8003d1e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003d80 <tracer_start+0x68>
 8003d22:	f000 f83d 	bl	8003da0 <tracer_init>
    tracer_set_gain(rotary_read_value());
 8003d26:	f7fd faff 	bl	8001328 <rotary_read_value>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f8f4 	bl	8003f1c <tracer_set_gain>
    tracer_set_target(0);
 8003d34:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8003d88 <tracer_start+0x70>
 8003d38:	f000 f93a 	bl	8003fb0 <tracer_set_target>
    #if D_TRACER
    printf("tracer.c > tracer_start > ");
 8003d3c:	4814      	ldr	r0, [pc, #80]	; (8003d90 <tracer_start+0x78>)
 8003d3e:	f006 f8e1 	bl	8009f04 <iprintf>
    printf("target = %5.2f\r\n", tracer_pid.target);
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <tracer_start+0x7c>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	4813      	ldr	r0, [pc, #76]	; (8003d98 <tracer_start+0x80>)
 8003d4a:	f006 f8db 	bl	8009f04 <iprintf>
    printf("tracer.c > tracer_start > ");
 8003d4e:	4810      	ldr	r0, [pc, #64]	; (8003d90 <tracer_start+0x78>)
 8003d50:	f006 f8d8 	bl	8009f04 <iprintf>
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <tracer_start+0x7c>)
 8003d56:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <tracer_start+0x7c>)
 8003d5c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d60:	490c      	ldr	r1, [pc, #48]	; (8003d94 <tracer_start+0x7c>)
 8003d62:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8003d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	480a      	ldr	r0, [pc, #40]	; (8003d9c <tracer_start+0x84>)
 8003d74:	f006 f8c6 	bl	8009f04 <iprintf>
    #endif
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	00000000 	.word	0x00000000
 8003d84:	3ff00000 	.word	0x3ff00000
	...
 8003d90:	0800e0b0 	.word	0x0800e0b0
 8003d94:	20000848 	.word	0x20000848
 8003d98:	0800e0cc 	.word	0x0800e0cc
 8003d9c:	0800e0e0 	.word	0x0800e0e0

08003da0 <tracer_init>:

void tracer_init(double samplingtime_)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
 8003daa:	480e      	ldr	r0, [pc, #56]	; (8003de4 <tracer_init+0x44>)
 8003dac:	f006 f8aa 	bl	8009f04 <iprintf>
    printf("tracer_init > ");
 8003db0:	480d      	ldr	r0, [pc, #52]	; (8003de8 <tracer_init+0x48>)
 8003db2:	f006 f8a7 	bl	8009f04 <iprintf>
    printf("sampling_time = 1, s_error = 0, before_error = 0\r\n");
 8003db6:	480d      	ldr	r0, [pc, #52]	; (8003dec <tracer_init+0x4c>)
 8003db8:	f006 f92a 	bl	800a010 <puts>
    #endif
    samplingtime = samplingtime_;
 8003dbc:	490c      	ldr	r1, [pc, #48]	; (8003df0 <tracer_init+0x50>)
 8003dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc2:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 8003dc6:	490b      	ldr	r1, [pc, #44]	; (8003df4 <tracer_init+0x54>)
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <tracer_init+0x58>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	0800e108 	.word	0x0800e108
 8003de8:	0800e114 	.word	0x0800e114
 8003dec:	0800e124 	.word	0x0800e124
 8003df0:	20000870 	.word	0x20000870
 8003df4:	20000868 	.word	0x20000868
 8003df8:	20000898 	.word	0x20000898

08003dfc <tracer_read_gain_kp>:

double tracer_read_gain_kp(unsigned short int i)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KP_MAX - TRACER_KP_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	f1c3 030f 	rsb	r3, r3, #15
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc fb89 	bl	8000524 <__aeabi_i2d>
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f7fc fbed 	bl	80005f8 <__aeabi_dmul>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <tracer_read_gain_kp+0x58>)
 8003e2c:	f7fc fd0e 	bl	800084c <__aeabi_ddiv>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	f04f 0000 	mov.w	r0, #0
 8003e38:	4907      	ldr	r1, [pc, #28]	; (8003e58 <tracer_read_gain_kp+0x5c>)
 8003e3a:	f7fc fa25 	bl	8000288 <__aeabi_dsub>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e46:	eeb0 0a47 	vmov.f32	s0, s14
 8003e4a:	eef0 0a67 	vmov.f32	s1, s15
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	402e0000 	.word	0x402e0000
 8003e58:	3fd00000 	.word	0x3fd00000

08003e5c <tracer_read_gain_ki>:

double tracer_read_gain_ki(unsigned short int i)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KI_MAX - TRACER_KI_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	f1c3 030f 	rsb	r3, r3, #15
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fc fb59 	bl	8000524 <__aeabi_i2d>
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	f7fc fbbd 	bl	80005f8 <__aeabi_dmul>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <tracer_read_gain_ki+0x5c>)
 8003e8c:	f7fc fcde 	bl	800084c <__aeabi_ddiv>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	f04f 0000 	mov.w	r0, #0
 8003e98:	f04f 0100 	mov.w	r1, #0
 8003e9c:	f7fc f9f4 	bl	8000288 <__aeabi_dsub>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	ec43 2b17 	vmov	d7, r2, r3
}
 8003ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8003eac:	eef0 0a67 	vmov.f32	s1, s15
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	402e0000 	.word	0x402e0000

08003ebc <tracer_read_gain_kd>:

double tracer_read_gain_kd(unsigned short int i)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KD_MAX - TRACER_KD_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	f1c3 030f 	rsb	r3, r3, #15
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fb29 	bl	8000524 <__aeabi_i2d>
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f7fc fb8d 	bl	80005f8 <__aeabi_dmul>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <tracer_read_gain_kd+0x5c>)
 8003eec:	f7fc fcae 	bl	800084c <__aeabi_ddiv>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f04f 0100 	mov.w	r1, #0
 8003efc:	f7fc f9c4 	bl	8000288 <__aeabi_dsub>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f08:	eeb0 0a47 	vmov.f32	s0, s14
 8003f0c:	eef0 0a67 	vmov.f32	s1, s15
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	402e0000 	.word	0x402e0000

08003f1c <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af04      	add	r7, sp, #16
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
    #if D_TRACER
    printf("tracer.c > ");
 8003f26:	481e      	ldr	r0, [pc, #120]	; (8003fa0 <tracer_set_gain+0x84>)
 8003f28:	f005 ffec 	bl	8009f04 <iprintf>
    printf("tracer_set_gain() > ");
 8003f2c:	481d      	ldr	r0, [pc, #116]	; (8003fa4 <tracer_set_gain+0x88>)
 8003f2e:	f005 ffe9 	bl	8009f04 <iprintf>
    #endif
    tracer_pid.kp = tracer_read_gain_kp(i);
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff61 	bl	8003dfc <tracer_read_gain_kp>
 8003f3a:	eeb0 7a40 	vmov.f32	s14, s0
 8003f3e:	eef0 7a60 	vmov.f32	s15, s1
 8003f42:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <tracer_set_gain+0x8c>)
 8003f44:	ed83 7b02 	vstr	d7, [r3, #8]
    tracer_pid.ki = tracer_read_gain_ki(i);
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ff86 	bl	8003e5c <tracer_read_gain_ki>
 8003f50:	eeb0 7a40 	vmov.f32	s14, s0
 8003f54:	eef0 7a60 	vmov.f32	s15, s1
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <tracer_set_gain+0x8c>)
 8003f5a:	ed83 7b04 	vstr	d7, [r3, #16]
    tracer_pid.kd = tracer_read_gain_kd(i);
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ffab 	bl	8003ebc <tracer_read_gain_kd>
 8003f66:	eeb0 7a40 	vmov.f32	s14, s0
 8003f6a:	eef0 7a60 	vmov.f32	s15, s1
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <tracer_set_gain+0x8c>)
 8003f70:	ed83 7b06 	vstr	d7, [r3, #24]
    #if D_TRACER
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <tracer_set_gain+0x8c>)
 8003f76:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <tracer_set_gain+0x8c>)
 8003f7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f80:	4909      	ldr	r1, [pc, #36]	; (8003fa8 <tracer_set_gain+0x8c>)
 8003f82:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8003f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f8a:	e9cd 2300 	strd	r2, r3, [sp]
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	4806      	ldr	r0, [pc, #24]	; (8003fac <tracer_set_gain+0x90>)
 8003f94:	f005 ffb6 	bl	8009f04 <iprintf>
    #endif
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa0:	0800e108 	.word	0x0800e108
 8003fa4:	0800e158 	.word	0x0800e158
 8003fa8:	20000848 	.word	0x20000848
 8003fac:	0800e0e0 	.word	0x0800e0e0

08003fb0 <tracer_set_target>:

void tracer_set_target(double target_)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
 8003fba:	480c      	ldr	r0, [pc, #48]	; (8003fec <tracer_set_target+0x3c>)
 8003fbc:	f005 ffa2 	bl	8009f04 <iprintf>
    printf("tracer_set_target() > ");
 8003fc0:	480b      	ldr	r0, [pc, #44]	; (8003ff0 <tracer_set_target+0x40>)
 8003fc2:	f005 ff9f 	bl	8009f04 <iprintf>
    #endif
    tracer_pid.target = target_;
 8003fc6:	490b      	ldr	r1, [pc, #44]	; (8003ff4 <tracer_set_target+0x44>)
 8003fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fcc:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_TRACER
    printf("target_ = %5.2f, target = %5.2f\r\n", target_, tracer_pid.target);
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <tracer_set_target+0x44>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8003fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fde:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <tracer_set_target+0x48>)
 8003fe0:	f005 ff90 	bl	8009f04 <iprintf>
    #endif
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	0800e108 	.word	0x0800e108
 8003ff0:	0800e170 	.word	0x0800e170
 8003ff4:	20000848 	.word	0x20000848
 8003ff8:	0800e188 	.word	0x0800e188

08003ffc <tracer_print_values>:
    printf("tracer.c > tracer_d_print() > target = %5d, kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", 0, tracer_read_gain_kp(0), tracer_read_gain_ki(0), tracer_read_gain_kd(0));
    printf("tracer.c > tracer_d_print() > before_error = %5d, s_error = %7.2f\r\n", before_error, s_error);
}

void tracer_print_values()
{
 8003ffc:	b5b0      	push	{r4, r5, r7, lr}
 8003ffe:	ed2d 8b02 	vpush	{d8}
 8004002:	b084      	sub	sp, #16
 8004004:	af04      	add	r7, sp, #16
	printf("Tracer\r\n");
 8004006:	4819      	ldr	r0, [pc, #100]	; (800406c <tracer_print_values+0x70>)
 8004008:	f006 f802 	bl	800a010 <puts>
	printf("target = 0\r\n");
 800400c:	4818      	ldr	r0, [pc, #96]	; (8004070 <tracer_print_values+0x74>)
 800400e:	f005 ffff 	bl	800a010 <puts>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", tracer_read_gain_kp(rotary_read_value()), tracer_read_gain_ki(rotary_read_value()), tracer_read_gain_kd(rotary_read_value()));
 8004012:	f7fd f989 	bl	8001328 <rotary_read_value>
 8004016:	4603      	mov	r3, r0
 8004018:	b29b      	uxth	r3, r3
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff feee 	bl	8003dfc <tracer_read_gain_kp>
 8004020:	ec55 4b10 	vmov	r4, r5, d0
 8004024:	f7fd f980 	bl	8001328 <rotary_read_value>
 8004028:	4603      	mov	r3, r0
 800402a:	b29b      	uxth	r3, r3
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ff15 	bl	8003e5c <tracer_read_gain_ki>
 8004032:	eeb0 8a40 	vmov.f32	s16, s0
 8004036:	eef0 8a60 	vmov.f32	s17, s1
 800403a:	f7fd f975 	bl	8001328 <rotary_read_value>
 800403e:	4603      	mov	r3, r0
 8004040:	b29b      	uxth	r3, r3
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff3a 	bl	8003ebc <tracer_read_gain_kd>
 8004048:	eeb0 7a40 	vmov.f32	s14, s0
 800404c:	eef0 7a60 	vmov.f32	s15, s1
 8004050:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004054:	ed8d 8b00 	vstr	d8, [sp]
 8004058:	4622      	mov	r2, r4
 800405a:	462b      	mov	r3, r5
 800405c:	4805      	ldr	r0, [pc, #20]	; (8004074 <tracer_print_values+0x78>)
 800405e:	f005 ff51 	bl	8009f04 <iprintf>
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	ecbd 8b02 	vpop	{d8}
 800406a:	bdb0      	pop	{r4, r5, r7, pc}
 800406c:	0800e244 	.word	0x0800e244
 8004070:	0800e24c 	.word	0x0800e24c
 8004074:	0800e258 	.word	0x0800e258

08004078 <velotrace_start>:
double samplingtime;

PID pid;

void velotrace_start()
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
    velotrace_init(1);
 800407c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80040e8 <velotrace_start+0x70>
 8004080:	f000 f838 	bl	80040f4 <velotrace_init>
    switch(rotary_read_playmode())
 8004084:	f7fd f938 	bl	80012f8 <rotary_read_playmode>
 8004088:	4603      	mov	r3, r0
 800408a:	2b01      	cmp	r3, #1
 800408c:	d002      	beq.n	8004094 <velotrace_start+0x1c>
 800408e:	2b06      	cmp	r3, #6
 8004090:	d007      	beq.n	80040a2 <velotrace_start+0x2a>
 8004092:	e015      	b.n	80040c0 <velotrace_start+0x48>
    {
        case search:
            velotrace_set_gain(0);
 8004094:	2000      	movs	r0, #0
 8004096:	f000 f907 	bl	80042a8 <velotrace_set_gain>
            velotrace_set_target(0);
 800409a:	2000      	movs	r0, #0
 800409c:	f000 f930 	bl	8004300 <velotrace_set_target>
            break;
 80040a0:	e01d      	b.n	80040de <velotrace_start+0x66>
        case velotrace_tuning:
            pid.target = 0;
 80040a2:	4913      	ldr	r1, [pc, #76]	; (80040f0 <velotrace_start+0x78>)
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9c1 2300 	strd	r2, r3, [r1]
            velotrace_set_gain(rotary_read_value());
 80040b0:	f7fd f93a 	bl	8001328 <rotary_read_value>
 80040b4:	4603      	mov	r3, r0
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f8f5 	bl	80042a8 <velotrace_set_gain>
            break;
 80040be:	e00e      	b.n	80040de <velotrace_start+0x66>
        default:
            velotrace_set_gain(rotary_read_value());
 80040c0:	f7fd f932 	bl	8001328 <rotary_read_value>
 80040c4:	4603      	mov	r3, r0
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f8ed 	bl	80042a8 <velotrace_set_gain>
            velotrace_set_target(rotary_read_value());
 80040ce:	f7fd f92b 	bl	8001328 <rotary_read_value>
 80040d2:	4603      	mov	r3, r0
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f912 	bl	8004300 <velotrace_set_target>
            break;
 80040dc:	bf00      	nop
    }
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	f3af 8000 	nop.w
 80040e8:	00000000 	.word	0x00000000
 80040ec:	3ff00000 	.word	0x3ff00000
 80040f0:	20000878 	.word	0x20000878

080040f4 <velotrace_init>:

void velotrace_init(double samplingtime_)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	ed87 0b00 	vstr	d0, [r7]
    #if D_VELOTRACE
    printf("samplingtime = 1, s_error = 0, before_error = 0\r\n");
    #endif
    samplingtime = samplingtime_;
 80040fe:	490c      	ldr	r1, [pc, #48]	; (8004130 <velotrace_init+0x3c>)
 8004100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004104:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 8004108:	490a      	ldr	r1, [pc, #40]	; (8004134 <velotrace_init+0x40>)
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <velotrace_init+0x44>)
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	20000870 	.word	0x20000870
 8004134:	20000868 	.word	0x20000868
 8004138:	20000898 	.word	0x20000898

0800413c <velotrace_read_target>:

double velotrace_read_target(unsigned short int i)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	f1c3 030f 	rsb	r3, r3, #15
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f9e9 	bl	8000524 <__aeabi_i2d>
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	f7fc fa4d 	bl	80005f8 <__aeabi_dmul>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <velotrace_read_target+0x5c>)
 800416c:	f7fc fb6e 	bl	800084c <__aeabi_ddiv>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	f04f 0000 	mov.w	r0, #0
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	f7fc f884 	bl	8000288 <__aeabi_dsub>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	ec43 2b17 	vmov	d7, r2, r3
}
 8004188:	eeb0 0a47 	vmov.f32	s0, s14
 800418c:	eef0 0a67 	vmov.f32	s1, s15
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	402e0000 	.word	0x402e0000

0800419c <velotrace_read_gain_kp>:

double velotrace_read_gain_kp(unsigned short int i)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	f1c3 030f 	rsb	r3, r3, #15
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc f9b9 	bl	8000524 <__aeabi_i2d>
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	f7fc fa1d 	bl	80005f8 <__aeabi_dmul>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <velotrace_read_gain_kp+0x5c>)
 80041cc:	f7fc fb3e 	bl	800084c <__aeabi_ddiv>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f7fc f854 	bl	8000288 <__aeabi_dsub>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80041e8:	eeb0 0a47 	vmov.f32	s0, s14
 80041ec:	eef0 0a67 	vmov.f32	s1, s15
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	402e0000 	.word	0x402e0000

080041fc <velotrace_read_gain_ki>:

double velotrace_read_gain_ki(unsigned short int i)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	f1c3 030f 	rsb	r3, r3, #15
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc f989 	bl	8000524 <__aeabi_i2d>
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <velotrace_read_gain_ki+0x44>)
 8004218:	f7fc fb18 	bl	800084c <__aeabi_ddiv>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	4907      	ldr	r1, [pc, #28]	; (8004244 <velotrace_read_gain_ki+0x48>)
 8004226:	f7fc f82f 	bl	8000288 <__aeabi_dsub>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004232:	eeb0 0a47 	vmov.f32	s0, s14
 8004236:	eef0 0a67 	vmov.f32	s1, s15
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	402e0000 	.word	0x402e0000
 8004244:	3ff00000 	.word	0x3ff00000

08004248 <velotrace_read_gain_kd>:

double velotrace_read_gain_kd(unsigned short int i)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	f1c3 030f 	rsb	r3, r3, #15
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f963 	bl	8000524 <__aeabi_i2d>
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	f7fc f9c7 	bl	80005f8 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <velotrace_read_gain_kd+0x5c>)
 8004278:	f7fc fae8 	bl	800084c <__aeabi_ddiv>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	f04f 0000 	mov.w	r0, #0
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	f7fb fffe 	bl	8000288 <__aeabi_dsub>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	ec43 2b17 	vmov	d7, r2, r3
}
 8004294:	eeb0 0a47 	vmov.f32	s0, s14
 8004298:	eef0 0a67 	vmov.f32	s1, s15
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	402e0000 	.word	0x402e0000

080042a8 <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("pid = velotrace_read_gain\r\n");
    #endif
    pid.kp = velotrace_read_gain_kp(i);
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff71 	bl	800419c <velotrace_read_gain_kp>
 80042ba:	eeb0 7a40 	vmov.f32	s14, s0
 80042be:	eef0 7a60 	vmov.f32	s15, s1
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <velotrace_set_gain+0x54>)
 80042c4:	ed83 7b02 	vstr	d7, [r3, #8]
    pid.ki = velotrace_read_gain_ki(i);
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff ff96 	bl	80041fc <velotrace_read_gain_ki>
 80042d0:	eeb0 7a40 	vmov.f32	s14, s0
 80042d4:	eef0 7a60 	vmov.f32	s15, s1
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <velotrace_set_gain+0x54>)
 80042da:	ed83 7b04 	vstr	d7, [r3, #16]
    pid.kd = velotrace_read_gain_kd(i);
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ffb1 	bl	8004248 <velotrace_read_gain_kd>
 80042e6:	eeb0 7a40 	vmov.f32	s14, s0
 80042ea:	eef0 7a60 	vmov.f32	s15, s1
 80042ee:	4b03      	ldr	r3, [pc, #12]	; (80042fc <velotrace_set_gain+0x54>)
 80042f0:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000878 	.word	0x20000878

08004300 <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("pid = velotrace_read_target\r\n");
    #endif
    pid.target = velotrace_read_target(i);
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff15 	bl	800413c <velotrace_read_target>
 8004312:	eeb0 7a40 	vmov.f32	s14, s0
 8004316:	eef0 7a60 	vmov.f32	s15, s1
 800431a:	4b03      	ldr	r3, [pc, #12]	; (8004328 <velotrace_set_target+0x28>)
 800431c:	ed83 7b00 	vstr	d7, [r3]
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000878 	.word	0x20000878

0800432c <velotrace_solve>:

double velotrace_solve(double reference_)
{
 800432c:	b5b0      	push	{r4, r5, r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	ed87 0b00 	vstr	d0, [r7]
    double error;
    double d_error;
    double result;

    error = reference_ - pid.target;
 8004336:	4b3a      	ldr	r3, [pc, #232]	; (8004420 <velotrace_solve+0xf4>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004340:	f7fb ffa2 	bl	8000288 <__aeabi_dsub>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	e9c7 2306 	strd	r2, r3, [r7, #24]

    d_error = (error - before_error) / (double) samplingtime;
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <velotrace_solve+0xf8>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004356:	f7fb ff97 	bl	8000288 <__aeabi_dsub>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <velotrace_solve+0xfc>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc fa70 	bl	800084c <__aeabi_ddiv>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error * (double) samplingtime;
 8004374:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <velotrace_solve+0xfc>)
 8004376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800437a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437e:	f7fc f93b 	bl	80005f8 <__aeabi_dmul>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4b28      	ldr	r3, [pc, #160]	; (800442c <velotrace_solve+0x100>)
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f7fb ff7c 	bl	800028c <__adddf3>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4924      	ldr	r1, [pc, #144]	; (800442c <velotrace_solve+0x100>)
 800439a:	e9c1 2300 	strd	r2, r3, [r1]

    result = - (pid.kp * error + pid. ki * s_error + pid.kd * d_error);
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <velotrace_solve+0xf4>)
 80043a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80043a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a8:	f7fc f926 	bl	80005f8 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <velotrace_solve+0xf4>)
 80043b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80043ba:	4b1c      	ldr	r3, [pc, #112]	; (800442c <velotrace_solve+0x100>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fc f91a 	bl	80005f8 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4620      	mov	r0, r4
 80043ca:	4629      	mov	r1, r5
 80043cc:	f7fb ff5e 	bl	800028c <__adddf3>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <velotrace_solve+0xf4>)
 80043da:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80043de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043e2:	f7fc f909 	bl	80005f8 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fb ff4d 	bl	800028c <__adddf3>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043fe:	60fb      	str	r3, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ = %5d\r\n");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, pid.kp, error, pid.ki, s_error, pid.kd, d_error);
    #endif

    before_error = error;
 8004400:	4908      	ldr	r1, [pc, #32]	; (8004424 <velotrace_solve+0xf8>)
 8004402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004406:	e9c1 2300 	strd	r2, r3, [r1]

    return result;
 800440a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800440e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004412:	eeb0 0a47 	vmov.f32	s0, s14
 8004416:	eef0 0a67 	vmov.f32	s1, s15
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bdb0      	pop	{r4, r5, r7, pc}
 8004420:	20000878 	.word	0x20000878
 8004424:	20000898 	.word	0x20000898
 8004428:	20000870 	.word	0x20000870
 800442c:	20000868 	.word	0x20000868

08004430 <velotrace_print_values>:

void velotrace_print_values()
{
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	ed2d 8b02 	vpush	{d8}
 8004436:	b084      	sub	sp, #16
 8004438:	af04      	add	r7, sp, #16
	printf("Velotrace\r\n");
 800443a:	481e      	ldr	r0, [pc, #120]	; (80044b4 <velotrace_print_values+0x84>)
 800443c:	f005 fde8 	bl	800a010 <puts>
	printf("target = %5.3f\r\n", velotrace_read_target(rotary_read_value()));
 8004440:	f7fc ff72 	bl	8001328 <rotary_read_value>
 8004444:	4603      	mov	r3, r0
 8004446:	b29b      	uxth	r3, r3
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fe77 	bl	800413c <velotrace_read_target>
 800444e:	ec53 2b10 	vmov	r2, r3, d0
 8004452:	4819      	ldr	r0, [pc, #100]	; (80044b8 <velotrace_print_values+0x88>)
 8004454:	f005 fd56 	bl	8009f04 <iprintf>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_read_gain_kp(rotary_read_value()), velotrace_read_gain_ki(rotary_read_value()), velotrace_read_gain_kd(rotary_read_value()));
 8004458:	f7fc ff66 	bl	8001328 <rotary_read_value>
 800445c:	4603      	mov	r3, r0
 800445e:	b29b      	uxth	r3, r3
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fe9b 	bl	800419c <velotrace_read_gain_kp>
 8004466:	ec55 4b10 	vmov	r4, r5, d0
 800446a:	f7fc ff5d 	bl	8001328 <rotary_read_value>
 800446e:	4603      	mov	r3, r0
 8004470:	b29b      	uxth	r3, r3
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fec2 	bl	80041fc <velotrace_read_gain_ki>
 8004478:	eeb0 8a40 	vmov.f32	s16, s0
 800447c:	eef0 8a60 	vmov.f32	s17, s1
 8004480:	f7fc ff52 	bl	8001328 <rotary_read_value>
 8004484:	4603      	mov	r3, r0
 8004486:	b29b      	uxth	r3, r3
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fedd 	bl	8004248 <velotrace_read_gain_kd>
 800448e:	eeb0 7a40 	vmov.f32	s14, s0
 8004492:	eef0 7a60 	vmov.f32	s15, s1
 8004496:	ed8d 7b02 	vstr	d7, [sp, #8]
 800449a:	ed8d 8b00 	vstr	d8, [sp]
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	4806      	ldr	r0, [pc, #24]	; (80044bc <velotrace_print_values+0x8c>)
 80044a4:	f005 fd2e 	bl	8009f04 <iprintf>
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	ecbd 8b02 	vpop	{d8}
 80044b0:	bdb0      	pop	{r4, r5, r7, pc}
 80044b2:	bf00      	nop
 80044b4:	0800e280 	.word	0x0800e280
 80044b8:	0800e28c 	.word	0x0800e28c
 80044bc:	0800e2a0 	.word	0x0800e2a0

080044c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044c6:	e003      	b.n	80044d0 <LoopCopyDataInit>

080044c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044ce:	3104      	adds	r1, #4

080044d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044d0:	480b      	ldr	r0, [pc, #44]	; (8004500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044d2:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044d8:	d3f6      	bcc.n	80044c8 <CopyDataInit>
  ldr  r2, =_sbss
 80044da:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044dc:	e002      	b.n	80044e4 <LoopFillZerobss>

080044de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044e0:	f842 3b04 	str.w	r3, [r2], #4

080044e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044e8:	d3f9      	bcc.n	80044de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044ea:	f7ff f9b9 	bl	8003860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ee:	f004 fe55 	bl	800919c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044f2:	f7fd fd03 	bl	8001efc <main>
  bx  lr    
 80044f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80044fc:	0800e7ac 	.word	0x0800e7ac
  ldr  r0, =_sdata
 8004500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004504:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004508:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800450c:	200008d4 	.word	0x200008d4

08004510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004510:	e7fe      	b.n	8004510 <ADC_IRQHandler>
	...

08004514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <HAL_Init+0x40>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <HAL_Init+0x40>)
 800451e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_Init+0x40>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <HAL_Init+0x40>)
 800452a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800452e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_Init+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a07      	ldr	r2, [pc, #28]	; (8004554 <HAL_Init+0x40>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800453c:	2003      	movs	r0, #3
 800453e:	f000 fdb1 	bl	80050a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004542:	2000      	movs	r0, #0
 8004544:	f000 f808 	bl	8004558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004548:	f7fe fd52 	bl	8002ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40023c00 	.word	0x40023c00

08004558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004560:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_InitTick+0x54>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_InitTick+0x58>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	4619      	mov	r1, r3
 800456a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fdc9 	bl	800510e <HAL_SYSTICK_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e00e      	b.n	80045a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d80a      	bhi.n	80045a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800458c:	2200      	movs	r2, #0
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	f000 fd91 	bl	80050ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004598:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <HAL_InitTick+0x5c>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000000 	.word	0x20000000
 80045b0:	20000008 	.word	0x20000008
 80045b4:	20000004 	.word	0x20000004

080045b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_IncTick+0x20>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_IncTick+0x24>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	4a04      	ldr	r2, [pc, #16]	; (80045dc <HAL_IncTick+0x24>)
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000008 	.word	0x20000008
 80045dc:	200008a0 	.word	0x200008a0

080045e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return uwTick;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_GetTick+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	200008a0 	.word	0x200008a0

080045f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004600:	f7ff ffee 	bl	80045e0 <HAL_GetTick>
 8004604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d005      	beq.n	800461e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_Delay+0x44>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800461e:	bf00      	nop
 8004620:	f7ff ffde 	bl	80045e0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	429a      	cmp	r2, r3
 800462e:	d8f7      	bhi.n	8004620 <HAL_Delay+0x28>
  {
  }
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000008 	.word	0x20000008

08004640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e033      	b.n	80046be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fe fcf2 	bl	8003048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	d118      	bne.n	80046b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004686:	f023 0302 	bic.w	r3, r3, #2
 800468a:	f043 0202 	orr.w	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fab8 	bl	8004c08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
 80046ae:	e001      	b.n	80046b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_Start_DMA+0x1e>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e0e9      	b.n	80048ba <HAL_ADC_Start_DMA+0x1f2>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d018      	beq.n	800472e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800470c:	4b6d      	ldr	r3, [pc, #436]	; (80048c4 <HAL_ADC_Start_DMA+0x1fc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a6d      	ldr	r2, [pc, #436]	; (80048c8 <HAL_ADC_Start_DMA+0x200>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	0c9a      	lsrs	r2, r3, #18
 8004718:	4613      	mov	r3, r2
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004720:	e002      	b.n	8004728 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3b01      	subs	r3, #1
 8004726:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f9      	bne.n	8004722 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473c:	d107      	bne.n	800474e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800474c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 80a1 	bne.w	80048a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004788:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d106      	bne.n	80047ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f023 0206 	bic.w	r2, r3, #6
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	645a      	str	r2, [r3, #68]	; 0x44
 80047aa:	e002      	b.n	80047b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047ba:	4b44      	ldr	r3, [pc, #272]	; (80048cc <HAL_ADC_Start_DMA+0x204>)
 80047bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	4a43      	ldr	r2, [pc, #268]	; (80048d0 <HAL_ADC_Start_DMA+0x208>)
 80047c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	4a42      	ldr	r2, [pc, #264]	; (80048d4 <HAL_ADC_Start_DMA+0x20c>)
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4a41      	ldr	r2, [pc, #260]	; (80048d8 <HAL_ADC_Start_DMA+0x210>)
 80047d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	334c      	adds	r3, #76	; 0x4c
 800480a:	4619      	mov	r1, r3
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f000 fd38 	bl	8005284 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2b00      	cmp	r3, #0
 800481e:	d12a      	bne.n	8004876 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a2d      	ldr	r2, [pc, #180]	; (80048dc <HAL_ADC_Start_DMA+0x214>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d015      	beq.n	8004856 <HAL_ADC_Start_DMA+0x18e>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <HAL_ADC_Start_DMA+0x218>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d105      	bne.n	8004840 <HAL_ADC_Start_DMA+0x178>
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <HAL_ADC_Start_DMA+0x204>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <HAL_ADC_Start_DMA+0x21c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d136      	bne.n	80048b8 <HAL_ADC_Start_DMA+0x1f0>
 800484a:	4b20      	ldr	r3, [pc, #128]	; (80048cc <HAL_ADC_Start_DMA+0x204>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d130      	bne.n	80048b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d129      	bne.n	80048b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	e020      	b.n	80048b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_ADC_Start_DMA+0x214>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d11b      	bne.n	80048b8 <HAL_ADC_Start_DMA+0x1f0>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d114      	bne.n	80048b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800489c:	609a      	str	r2, [r3, #8]
 800489e:	e00b      	b.n	80048b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f043 0210 	orr.w	r2, r3, #16
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	f043 0201 	orr.w	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000000 	.word	0x20000000
 80048c8:	431bde83 	.word	0x431bde83
 80048cc:	40012300 	.word	0x40012300
 80048d0:	08004e01 	.word	0x08004e01
 80048d4:	08004ebb 	.word	0x08004ebb
 80048d8:	08004ed7 	.word	0x08004ed7
 80048dc:	40012000 	.word	0x40012000
 80048e0:	40012100 	.word	0x40012100
 80048e4:	40012200 	.word	0x40012200

080048e8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_Stop_DMA+0x1a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e048      	b.n	8004994 <HAL_ADC_Stop_DMA+0xac>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d130      	bne.n	800498a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004936:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d10f      	bne.n	8004966 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fcf2 	bl	8005334 <HAL_DMA_Abort>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004974:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x1c>
 80049dc:	2302      	movs	r3, #2
 80049de:	e105      	b.n	8004bec <HAL_ADC_ConfigChannel+0x228>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	d925      	bls.n	8004a3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68d9      	ldr	r1, [r3, #12]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	3b1e      	subs	r3, #30
 8004a06:	2207      	movs	r2, #7
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43da      	mvns	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	400a      	ands	r2, r1
 8004a14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68d9      	ldr	r1, [r3, #12]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	4618      	mov	r0, r3
 8004a28:	4603      	mov	r3, r0
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4403      	add	r3, r0
 8004a2e:	3b1e      	subs	r3, #30
 8004a30:	409a      	lsls	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	e022      	b.n	8004a82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6919      	ldr	r1, [r3, #16]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	2207      	movs	r2, #7
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6919      	ldr	r1, [r3, #16]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	4618      	mov	r0, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4403      	add	r3, r0
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d824      	bhi.n	8004ad4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	3b05      	subs	r3, #5
 8004a9c:	221f      	movs	r2, #31
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4618      	mov	r0, r3
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3b05      	subs	r3, #5
 8004ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ad2:	e04c      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d824      	bhi.n	8004b26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	3b23      	subs	r3, #35	; 0x23
 8004aee:	221f      	movs	r2, #31
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43da      	mvns	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	400a      	ands	r2, r1
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	3b23      	subs	r3, #35	; 0x23
 8004b18:	fa00 f203 	lsl.w	r2, r0, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
 8004b24:	e023      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	3b41      	subs	r3, #65	; 0x41
 8004b38:	221f      	movs	r2, #31
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	400a      	ands	r2, r1
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	4618      	mov	r0, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	3b41      	subs	r3, #65	; 0x41
 8004b62:	fa00 f203 	lsl.w	r2, r0, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b6e:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <HAL_ADC_ConfigChannel+0x234>)
 8004b70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <HAL_ADC_ConfigChannel+0x238>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d109      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x1cc>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b12      	cmp	r3, #18
 8004b82:	d105      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <HAL_ADC_ConfigChannel+0x238>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d123      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x21e>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d003      	beq.n	8004baa <HAL_ADC_ConfigChannel+0x1e6>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b11      	cmp	r3, #17
 8004ba8:	d11b      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d111      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <HAL_ADC_ConfigChannel+0x23c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a10      	ldr	r2, [pc, #64]	; (8004c04 <HAL_ADC_ConfigChannel+0x240>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0c9a      	lsrs	r2, r3, #18
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bd4:	e002      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f9      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40012300 	.word	0x40012300
 8004bfc:	40012000 	.word	0x40012000
 8004c00:	20000000 	.word	0x20000000
 8004c04:	431bde83 	.word	0x431bde83

08004c08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c10:	4b79      	ldr	r3, [pc, #484]	; (8004df8 <ADC_Init+0x1f0>)
 8004c12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	021a      	lsls	r2, r3, #8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	4a58      	ldr	r2, [pc, #352]	; (8004dfc <ADC_Init+0x1f4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d022      	beq.n	8004ce6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6899      	ldr	r1, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	e00f      	b.n	8004d06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0202 	bic.w	r2, r2, #2
 8004d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6899      	ldr	r1, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7e1b      	ldrb	r3, [r3, #24]
 8004d20:	005a      	lsls	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01b      	beq.n	8004d6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	035a      	lsls	r2, r3, #13
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	e007      	b.n	8004d7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	051a      	lsls	r2, r3, #20
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6899      	ldr	r1, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dbe:	025a      	lsls	r2, r3, #9
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6899      	ldr	r1, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	029a      	lsls	r2, r3, #10
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40012300 	.word	0x40012300
 8004dfc:	0f000001 	.word	0x0f000001

08004e00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d13c      	bne.n	8004e94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d12b      	bne.n	8004e8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d127      	bne.n	8004e8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d119      	bne.n	8004e8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0220 	bic.w	r2, r2, #32
 8004e66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f043 0201 	orr.w	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7fc fde5 	bl	8001a5c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e92:	e00e      	b.n	8004eb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fd85 	bl	80049b0 <HAL_ADC_ErrorCallback>
}
 8004ea6:	e004      	b.n	8004eb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff fd67 	bl	800499c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2240      	movs	r2, #64	; 0x40
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff fd5a 	bl	80049b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <__NVIC_SetPriorityGrouping+0x44>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f20:	4013      	ands	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f36:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <__NVIC_SetPriorityGrouping+0x44>)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	60d3      	str	r3, [r2, #12]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <__NVIC_GetPriorityGrouping+0x18>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	0a1b      	lsrs	r3, r3, #8
 8004f56:	f003 0307 	and.w	r3, r3, #7
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	db0b      	blt.n	8004f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	f003 021f 	and.w	r2, r3, #31
 8004f80:	4907      	ldr	r1, [pc, #28]	; (8004fa0 <__NVIC_EnableIRQ+0x38>)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	2001      	movs	r0, #1
 8004f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	e000e100 	.word	0xe000e100

08004fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	db0a      	blt.n	8004fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	490c      	ldr	r1, [pc, #48]	; (8004ff0 <__NVIC_SetPriority+0x4c>)
 8004fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc2:	0112      	lsls	r2, r2, #4
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fcc:	e00a      	b.n	8004fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	4908      	ldr	r1, [pc, #32]	; (8004ff4 <__NVIC_SetPriority+0x50>)
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	3b04      	subs	r3, #4
 8004fdc:	0112      	lsls	r2, r2, #4
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	761a      	strb	r2, [r3, #24]
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000e100 	.word	0xe000e100
 8004ff4:	e000ed00 	.word	0xe000ed00

08004ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f1c3 0307 	rsb	r3, r3, #7
 8005012:	2b04      	cmp	r3, #4
 8005014:	bf28      	it	cs
 8005016:	2304      	movcs	r3, #4
 8005018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	3304      	adds	r3, #4
 800501e:	2b06      	cmp	r3, #6
 8005020:	d902      	bls.n	8005028 <NVIC_EncodePriority+0x30>
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3b03      	subs	r3, #3
 8005026:	e000      	b.n	800502a <NVIC_EncodePriority+0x32>
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800502c:	f04f 32ff 	mov.w	r2, #4294967295
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43da      	mvns	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	401a      	ands	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005040:	f04f 31ff 	mov.w	r1, #4294967295
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	43d9      	mvns	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005050:	4313      	orrs	r3, r2
         );
}
 8005052:	4618      	mov	r0, r3
 8005054:	3724      	adds	r7, #36	; 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005070:	d301      	bcc.n	8005076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005072:	2301      	movs	r3, #1
 8005074:	e00f      	b.n	8005096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005076:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <SysTick_Config+0x40>)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3b01      	subs	r3, #1
 800507c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800507e:	210f      	movs	r1, #15
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	f7ff ff8e 	bl	8004fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <SysTick_Config+0x40>)
 800508a:	2200      	movs	r2, #0
 800508c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <SysTick_Config+0x40>)
 8005090:	2207      	movs	r2, #7
 8005092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010

080050a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ff29 	bl	8004f04 <__NVIC_SetPriorityGrouping>
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	4603      	mov	r3, r0
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050cc:	f7ff ff3e 	bl	8004f4c <__NVIC_GetPriorityGrouping>
 80050d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	6978      	ldr	r0, [r7, #20]
 80050d8:	f7ff ff8e 	bl	8004ff8 <NVIC_EncodePriority>
 80050dc:	4602      	mov	r2, r0
 80050de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff ff5d 	bl	8004fa4 <__NVIC_SetPriority>
}
 80050ea:	bf00      	nop
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	4603      	mov	r3, r0
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff ff31 	bl	8004f68 <__NVIC_EnableIRQ>
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff ffa2 	bl	8005060 <SysTick_Config>
 800511c:	4603      	mov	r3, r0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005134:	f7ff fa54 	bl	80045e0 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e099      	b.n	8005278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005164:	e00f      	b.n	8005186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005166:	f7ff fa3b 	bl	80045e0 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b05      	cmp	r3, #5
 8005172:	d908      	bls.n	8005186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2203      	movs	r2, #3
 800517e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e078      	b.n	8005278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e8      	bne.n	8005166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4b38      	ldr	r3, [pc, #224]	; (8005280 <HAL_DMA_Init+0x158>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d107      	bne.n	80051f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	4313      	orrs	r3, r2
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b04      	cmp	r3, #4
 8005218:	d117      	bne.n	800524a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fadf 	bl	80057f0 <DMA_CheckFifoParam>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005246:	2301      	movs	r3, #1
 8005248:	e016      	b.n	8005278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa96 	bl	8005784 <DMA_CalcBaseAndBitshift>
 8005258:	4603      	mov	r3, r0
 800525a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	223f      	movs	r2, #63	; 0x3f
 8005262:	409a      	lsls	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	f010803f 	.word	0xf010803f

08005284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_DMA_Start_IT+0x26>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e040      	b.n	800532c <HAL_DMA_Start_IT+0xa8>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d12f      	bne.n	800531e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fa28 	bl	8005728 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	223f      	movs	r2, #63	; 0x3f
 80052de:	409a      	lsls	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0216 	orr.w	r2, r2, #22
 80052f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0208 	orr.w	r2, r2, #8
 800530a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e005      	b.n	800532a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005326:	2302      	movs	r3, #2
 8005328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800532a:	7dfb      	ldrb	r3, [r7, #23]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005342:	f7ff f94d 	bl	80045e0 <HAL_GetTick>
 8005346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d008      	beq.n	8005366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2280      	movs	r2, #128	; 0x80
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e052      	b.n	800540c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0216 	bic.w	r2, r2, #22
 8005374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <HAL_DMA_Abort+0x62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0208 	bic.w	r2, r2, #8
 80053a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053b6:	e013      	b.n	80053e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053b8:	f7ff f912 	bl	80045e0 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d90c      	bls.n	80053e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2203      	movs	r2, #3
 80053d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e015      	b.n	800540c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e4      	bne.n	80053b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	223f      	movs	r2, #63	; 0x3f
 80053f4:	409a      	lsls	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005420:	4b92      	ldr	r3, [pc, #584]	; (800566c <HAL_DMA_IRQHandler+0x258>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a92      	ldr	r2, [pc, #584]	; (8005670 <HAL_DMA_IRQHandler+0x25c>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	0a9b      	lsrs	r3, r3, #10
 800542c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005432:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543e:	2208      	movs	r2, #8
 8005440:	409a      	lsls	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01a      	beq.n	8005480 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0204 	bic.w	r2, r2, #4
 8005466:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	2208      	movs	r2, #8
 800546e:	409a      	lsls	r2, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	f043 0201 	orr.w	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	2201      	movs	r2, #1
 8005486:	409a      	lsls	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d012      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	2201      	movs	r2, #1
 80054a4:	409a      	lsls	r2, r3
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f043 0202 	orr.w	r2, r3, #2
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ba:	2204      	movs	r2, #4
 80054bc:	409a      	lsls	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d012      	beq.n	80054ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d8:	2204      	movs	r2, #4
 80054da:	409a      	lsls	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e4:	f043 0204 	orr.w	r2, r3, #4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	2210      	movs	r2, #16
 80054f2:	409a      	lsls	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d043      	beq.n	8005584 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d03c      	beq.n	8005584 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550e:	2210      	movs	r2, #16
 8005510:	409a      	lsls	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d018      	beq.n	8005556 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d108      	bne.n	8005544 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d024      	beq.n	8005584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
 8005542:	e01f      	b.n	8005584 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	4798      	blx	r3
 8005554:	e016      	b.n	8005584 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d107      	bne.n	8005574 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0208 	bic.w	r2, r2, #8
 8005572:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	2220      	movs	r2, #32
 800558a:	409a      	lsls	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 808e 	beq.w	80056b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8086 	beq.w	80056b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055aa:	2220      	movs	r2, #32
 80055ac:	409a      	lsls	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d136      	bne.n	800562c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0216 	bic.w	r2, r2, #22
 80055cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <HAL_DMA_IRQHandler+0x1da>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0208 	bic.w	r2, r2, #8
 80055fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005602:	223f      	movs	r2, #63	; 0x3f
 8005604:	409a      	lsls	r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	2b00      	cmp	r3, #0
 8005620:	d07d      	beq.n	800571e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
        }
        return;
 800562a:	e078      	b.n	800571e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01c      	beq.n	8005674 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d108      	bne.n	800565a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564c:	2b00      	cmp	r3, #0
 800564e:	d030      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4798      	blx	r3
 8005658:	e02b      	b.n	80056b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d027      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
 800566a:	e022      	b.n	80056b2 <HAL_DMA_IRQHandler+0x29e>
 800566c:	20000000 	.word	0x20000000
 8005670:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10f      	bne.n	80056a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0210 	bic.w	r2, r2, #16
 8005690:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d032      	beq.n	8005720 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d022      	beq.n	800570c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2205      	movs	r2, #5
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d307      	bcc.n	80056fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f2      	bne.n	80056de <HAL_DMA_IRQHandler+0x2ca>
 80056f8:	e000      	b.n	80056fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80056fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
 800571c:	e000      	b.n	8005720 <HAL_DMA_IRQHandler+0x30c>
        return;
 800571e:	bf00      	nop
    }
  }
}
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop

08005728 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005744:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d108      	bne.n	8005768 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005766:	e007      	b.n	8005778 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	3b10      	subs	r3, #16
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <DMA_CalcBaseAndBitshift+0x64>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	091b      	lsrs	r3, r3, #4
 800579c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <DMA_CalcBaseAndBitshift+0x68>)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d909      	bls.n	80057c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	1d1a      	adds	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	659a      	str	r2, [r3, #88]	; 0x58
 80057c4:	e007      	b.n	80057d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	aaaaaaab 	.word	0xaaaaaaab
 80057ec:	0800e2e0 	.word	0x0800e2e0

080057f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11f      	bne.n	800584a <DMA_CheckFifoParam+0x5a>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d856      	bhi.n	80058be <DMA_CheckFifoParam+0xce>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <DMA_CheckFifoParam+0x28>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	08005829 	.word	0x08005829
 800581c:	0800583b 	.word	0x0800583b
 8005820:	08005829 	.word	0x08005829
 8005824:	080058bf 	.word	0x080058bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d046      	beq.n	80058c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005838:	e043      	b.n	80058c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005842:	d140      	bne.n	80058c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005848:	e03d      	b.n	80058c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	d121      	bne.n	8005898 <DMA_CheckFifoParam+0xa8>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d837      	bhi.n	80058ca <DMA_CheckFifoParam+0xda>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <DMA_CheckFifoParam+0x70>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005871 	.word	0x08005871
 8005864:	08005877 	.word	0x08005877
 8005868:	08005871 	.word	0x08005871
 800586c:	08005889 	.word	0x08005889
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
      break;
 8005874:	e030      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d025      	beq.n	80058ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005886:	e022      	b.n	80058ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005890:	d11f      	bne.n	80058d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005896:	e01c      	b.n	80058d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d903      	bls.n	80058a6 <DMA_CheckFifoParam+0xb6>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d003      	beq.n	80058ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058a4:	e018      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
      break;
 80058aa:	e015      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00e      	beq.n	80058d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e00b      	b.n	80058d6 <DMA_CheckFifoParam+0xe6>
      break;
 80058be:	bf00      	nop
 80058c0:	e00a      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058c2:	bf00      	nop
 80058c4:	e008      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058c6:	bf00      	nop
 80058c8:	e006      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058ca:	bf00      	nop
 80058cc:	e004      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058ce:	bf00      	nop
 80058d0:	e002      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058d6:	bf00      	nop
    }
  } 
  
  return status; 
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058fa:	4b23      	ldr	r3, [pc, #140]	; (8005988 <HAL_FLASH_Program+0xa0>)
 80058fc:	7e1b      	ldrb	r3, [r3, #24]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_FLASH_Program+0x1e>
 8005902:	2302      	movs	r3, #2
 8005904:	e03b      	b.n	800597e <HAL_FLASH_Program+0x96>
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_FLASH_Program+0xa0>)
 8005908:	2201      	movs	r2, #1
 800590a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800590c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005910:	f000 f870 	bl	80059f4 <FLASH_WaitForLastOperation>
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12b      	bne.n	8005976 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005924:	783b      	ldrb	r3, [r7, #0]
 8005926:	4619      	mov	r1, r3
 8005928:	68b8      	ldr	r0, [r7, #8]
 800592a:	f000 f91b 	bl	8005b64 <FLASH_Program_Byte>
 800592e:	e016      	b.n	800595e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d105      	bne.n	8005942 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005936:	883b      	ldrh	r3, [r7, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	68b8      	ldr	r0, [r7, #8]
 800593c:	f000 f8ee 	bl	8005b1c <FLASH_Program_HalfWord>
 8005940:	e00d      	b.n	800595e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d105      	bne.n	8005954 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	68b8      	ldr	r0, [r7, #8]
 800594e:	f000 f8c3 	bl	8005ad8 <FLASH_Program_Word>
 8005952:	e004      	b.n	800595e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	f000 f88b 	bl	8005a74 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800595e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005962:	f000 f847 	bl	80059f4 <FLASH_WaitForLastOperation>
 8005966:	4603      	mov	r3, r0
 8005968:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_FLASH_Program+0xa4>)
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	4a07      	ldr	r2, [pc, #28]	; (800598c <HAL_FLASH_Program+0xa4>)
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005976:	4b04      	ldr	r3, [pc, #16]	; (8005988 <HAL_FLASH_Program+0xa0>)
 8005978:	2200      	movs	r2, #0
 800597a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	200008a4 	.word	0x200008a4
 800598c:	40023c00 	.word	0x40023c00

08005990 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_FLASH_Unlock+0x38>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da0b      	bge.n	80059ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_FLASH_Unlock+0x38>)
 80059a4:	4a09      	ldr	r2, [pc, #36]	; (80059cc <HAL_FLASH_Unlock+0x3c>)
 80059a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059a8:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <HAL_FLASH_Unlock+0x38>)
 80059aa:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <HAL_FLASH_Unlock+0x40>)
 80059ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_FLASH_Unlock+0x38>)
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da01      	bge.n	80059ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80059ba:	79fb      	ldrb	r3, [r7, #7]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	40023c00 	.word	0x40023c00
 80059cc:	45670123 	.word	0x45670123
 80059d0:	cdef89ab 	.word	0xcdef89ab

080059d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <HAL_FLASH_Lock+0x1c>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <HAL_FLASH_Lock+0x1c>)
 80059de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059e2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40023c00 	.word	0x40023c00

080059f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <FLASH_WaitForLastOperation+0x78>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005a06:	f7fe fdeb 	bl	80045e0 <HAL_GetTick>
 8005a0a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005a0c:	e010      	b.n	8005a30 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d00c      	beq.n	8005a30 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <FLASH_WaitForLastOperation+0x38>
 8005a1c:	f7fe fde0 	bl	80045e0 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d201      	bcs.n	8005a30 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e019      	b.n	8005a64 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <FLASH_WaitForLastOperation+0x7c>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e8      	bne.n	8005a0e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <FLASH_WaitForLastOperation+0x7c>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <FLASH_WaitForLastOperation+0x7c>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <FLASH_WaitForLastOperation+0x7c>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005a5a:	f000 f8a5 	bl	8005ba8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
  
}  
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200008a4 	.word	0x200008a4
 8005a70:	40023c00 	.word	0x40023c00

08005a74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a80:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <FLASH_Program_DoubleWord+0x60>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <FLASH_Program_DoubleWord+0x60>)
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <FLASH_Program_DoubleWord+0x60>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <FLASH_Program_DoubleWord+0x60>)
 8005a92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <FLASH_Program_DoubleWord+0x60>)
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <FLASH_Program_DoubleWord+0x60>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005aaa:	f3bf 8f6f 	isb	sy
}
 8005aae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	000a      	movs	r2, r1
 8005abe:	2300      	movs	r3, #0
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	3104      	adds	r1, #4
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40023c00 	.word	0x40023c00

08005ad8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <FLASH_Program_Word+0x40>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <FLASH_Program_Word+0x40>)
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005aee:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <FLASH_Program_Word+0x40>)
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <FLASH_Program_Word+0x40>)
 8005af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005af8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <FLASH_Program_Word+0x40>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	4a06      	ldr	r2, [pc, #24]	; (8005b18 <FLASH_Program_Word+0x40>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	601a      	str	r2, [r3, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40023c00 	.word	0x40023c00

08005b1c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b28:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <FLASH_Program_HalfWord+0x44>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <FLASH_Program_HalfWord+0x44>)
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <FLASH_Program_HalfWord+0x44>)
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <FLASH_Program_HalfWord+0x44>)
 8005b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <FLASH_Program_HalfWord+0x44>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <FLASH_Program_HalfWord+0x44>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	887a      	ldrh	r2, [r7, #2]
 8005b50:	801a      	strh	r2, [r3, #0]
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40023c00 	.word	0x40023c00

08005b64 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b70:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <FLASH_Program_Byte+0x40>)
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	4a0b      	ldr	r2, [pc, #44]	; (8005ba4 <FLASH_Program_Byte+0x40>)
 8005b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <FLASH_Program_Byte+0x40>)
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <FLASH_Program_Byte+0x40>)
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <FLASH_Program_Byte+0x40>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	4a06      	ldr	r2, [pc, #24]	; (8005ba4 <FLASH_Program_Byte+0x40>)
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	701a      	strb	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023c00 	.word	0x40023c00

08005ba8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005bac:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f043 0310 	orr.w	r3, r3, #16
 8005bc0:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005bc2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005bca:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005bd6:	4b1e      	ldr	r3, [pc, #120]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f043 0308 	orr.w	r3, r3, #8
 8005bde:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005be0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005be2:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005be4:	2220      	movs	r2, #32
 8005be6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005be8:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005bf4:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f043 0304 	orr.w	r3, r3, #4
 8005bfc:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005bfe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005c02:	2240      	movs	r2, #64	; 0x40
 8005c04:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f043 0302 	orr.w	r3, r3, #2
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005c1c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f043 0320 	orr.w	r3, r3, #32
 8005c38:	4a05      	ldr	r2, [pc, #20]	; (8005c50 <FLASH_SetErrorCode+0xa8>)
 8005c3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <FLASH_SetErrorCode+0xa4>)
 8005c3e:	2202      	movs	r2, #2
 8005c40:	60da      	str	r2, [r3, #12]
  }
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40023c00 	.word	0x40023c00
 8005c50:	200008a4 	.word	0x200008a4

08005c54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c66:	4b31      	ldr	r3, [pc, #196]	; (8005d2c <HAL_FLASHEx_Erase+0xd8>)
 8005c68:	7e1b      	ldrb	r3, [r3, #24]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_FLASHEx_Erase+0x1e>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e058      	b.n	8005d24 <HAL_FLASHEx_Erase+0xd0>
 8005c72:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <HAL_FLASHEx_Erase+0xd8>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c7c:	f7ff feba 	bl	80059f4 <FLASH_WaitForLastOperation>
 8005c80:	4603      	mov	r3, r0
 8005c82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d148      	bne.n	8005d1c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d115      	bne.n	8005cc6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f000 f844 	bl	8005d34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cb0:	f7ff fea0 	bl	80059f4 <FLASH_WaitForLastOperation>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005cb8:	4b1d      	ldr	r3, [pc, #116]	; (8005d30 <HAL_FLASHEx_Erase+0xdc>)
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	; (8005d30 <HAL_FLASHEx_Erase+0xdc>)
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	6113      	str	r3, [r2, #16]
 8005cc4:	e028      	b.n	8005d18 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60bb      	str	r3, [r7, #8]
 8005ccc:	e01c      	b.n	8005d08 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	68b8      	ldr	r0, [r7, #8]
 8005cd8:	f000 f850 	bl	8005d7c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ce0:	f7ff fe88 	bl	80059f4 <FLASH_WaitForLastOperation>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005ce8:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <HAL_FLASHEx_Erase+0xdc>)
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <HAL_FLASHEx_Erase+0xdc>)
 8005cee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005cf2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	601a      	str	r2, [r3, #0]
          break;
 8005d00:	e00a      	b.n	8005d18 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d3da      	bcc.n	8005cce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005d18:	f000 f878 	bl	8005e0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <HAL_FLASHEx_Erase+0xd8>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	761a      	strb	r2, [r3, #24]

  return status;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200008a4 	.word	0x200008a4
 8005d30:	40023c00 	.word	0x40023c00

08005d34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d40:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <FLASH_MassErase+0x44>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <FLASH_MassErase+0x44>)
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <FLASH_MassErase+0x44>)
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <FLASH_MassErase+0x44>)
 8005d52:	f043 0304 	orr.w	r3, r3, #4
 8005d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005d58:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <FLASH_MassErase+0x44>)
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	4313      	orrs	r3, r2
 8005d62:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <FLASH_MassErase+0x44>)
 8005d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d68:	6113      	str	r3, [r2, #16]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40023c00 	.word	0x40023c00

08005d7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e010      	b.n	8005dba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d103      	bne.n	8005da6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e009      	b.n	8005dba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d103      	bne.n	8005db4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e002      	b.n	8005dba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005db4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	490f      	ldr	r1, [pc, #60]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005dd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ddc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005dde:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <FLASH_Erase_Sector+0x8c>)
 8005df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfa:	6113      	str	r3, [r2, #16]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40023c00 	.word	0x40023c00

08005e0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d017      	beq.n	8005e4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005e28:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e40:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e4a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <FLASH_FlushCaches+0x88>)
 8005e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e86:	6013      	str	r3, [r2, #0]
  }
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40023c00 	.word	0x40023c00

08005e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b089      	sub	sp, #36	; 0x24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	e16b      	b.n	800618c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	f040 815a 	bne.w	8006186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d005      	beq.n	8005eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d130      	bne.n	8005f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f20:	2201      	movs	r2, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 0201 	and.w	r2, r3, #1
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d017      	beq.n	8005f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	2203      	movs	r2, #3
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d123      	bne.n	8005fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	08da      	lsrs	r2, r3, #3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3208      	adds	r2, #8
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	220f      	movs	r2, #15
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	08da      	lsrs	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3208      	adds	r2, #8
 8005fd6:	69b9      	ldr	r1, [r7, #24]
 8005fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 0203 	and.w	r2, r3, #3
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80b4 	beq.w	8006186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	4b60      	ldr	r3, [pc, #384]	; (80061a4 <HAL_GPIO_Init+0x30c>)
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	4a5f      	ldr	r2, [pc, #380]	; (80061a4 <HAL_GPIO_Init+0x30c>)
 8006028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800602c:	6453      	str	r3, [r2, #68]	; 0x44
 800602e:	4b5d      	ldr	r3, [pc, #372]	; (80061a4 <HAL_GPIO_Init+0x30c>)
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800603a:	4a5b      	ldr	r2, [pc, #364]	; (80061a8 <HAL_GPIO_Init+0x310>)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	3302      	adds	r3, #2
 8006042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	220f      	movs	r2, #15
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a52      	ldr	r2, [pc, #328]	; (80061ac <HAL_GPIO_Init+0x314>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d02b      	beq.n	80060be <HAL_GPIO_Init+0x226>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a51      	ldr	r2, [pc, #324]	; (80061b0 <HAL_GPIO_Init+0x318>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d025      	beq.n	80060ba <HAL_GPIO_Init+0x222>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a50      	ldr	r2, [pc, #320]	; (80061b4 <HAL_GPIO_Init+0x31c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <HAL_GPIO_Init+0x21e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a4f      	ldr	r2, [pc, #316]	; (80061b8 <HAL_GPIO_Init+0x320>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d019      	beq.n	80060b2 <HAL_GPIO_Init+0x21a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a4e      	ldr	r2, [pc, #312]	; (80061bc <HAL_GPIO_Init+0x324>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_GPIO_Init+0x216>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a4d      	ldr	r2, [pc, #308]	; (80061c0 <HAL_GPIO_Init+0x328>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00d      	beq.n	80060aa <HAL_GPIO_Init+0x212>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a4c      	ldr	r2, [pc, #304]	; (80061c4 <HAL_GPIO_Init+0x32c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <HAL_GPIO_Init+0x20e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a4b      	ldr	r2, [pc, #300]	; (80061c8 <HAL_GPIO_Init+0x330>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d101      	bne.n	80060a2 <HAL_GPIO_Init+0x20a>
 800609e:	2307      	movs	r3, #7
 80060a0:	e00e      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060a2:	2308      	movs	r3, #8
 80060a4:	e00c      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060a6:	2306      	movs	r3, #6
 80060a8:	e00a      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060aa:	2305      	movs	r3, #5
 80060ac:	e008      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060ae:	2304      	movs	r3, #4
 80060b0:	e006      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060b2:	2303      	movs	r3, #3
 80060b4:	e004      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e002      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <HAL_GPIO_Init+0x228>
 80060be:	2300      	movs	r3, #0
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	f002 0203 	and.w	r2, r2, #3
 80060c6:	0092      	lsls	r2, r2, #2
 80060c8:	4093      	lsls	r3, r2
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060d0:	4935      	ldr	r1, [pc, #212]	; (80061a8 <HAL_GPIO_Init+0x310>)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	089b      	lsrs	r3, r3, #2
 80060d6:	3302      	adds	r3, #2
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060de:	4b3b      	ldr	r3, [pc, #236]	; (80061cc <HAL_GPIO_Init+0x334>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006102:	4a32      	ldr	r2, [pc, #200]	; (80061cc <HAL_GPIO_Init+0x334>)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006108:	4b30      	ldr	r3, [pc, #192]	; (80061cc <HAL_GPIO_Init+0x334>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	43db      	mvns	r3, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4013      	ands	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800612c:	4a27      	ldr	r2, [pc, #156]	; (80061cc <HAL_GPIO_Init+0x334>)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006132:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_GPIO_Init+0x334>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	43db      	mvns	r3, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006156:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <HAL_GPIO_Init+0x334>)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <HAL_GPIO_Init+0x334>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006180:	4a12      	ldr	r2, [pc, #72]	; (80061cc <HAL_GPIO_Init+0x334>)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3301      	adds	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b0f      	cmp	r3, #15
 8006190:	f67f ae90 	bls.w	8005eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	3724      	adds	r7, #36	; 0x24
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800
 80061a8:	40013800 	.word	0x40013800
 80061ac:	40020000 	.word	0x40020000
 80061b0:	40020400 	.word	0x40020400
 80061b4:	40020800 	.word	0x40020800
 80061b8:	40020c00 	.word	0x40020c00
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40021400 	.word	0x40021400
 80061c4:	40021800 	.word	0x40021800
 80061c8:	40021c00 	.word	0x40021c00
 80061cc:	40013c00 	.word	0x40013c00

080061d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	887b      	ldrh	r3, [r7, #2]
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
 80061ec:	e001      	b.n	80061f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	807b      	strh	r3, [r7, #2]
 800620c:	4613      	mov	r3, r2
 800620e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006210:	787b      	ldrb	r3, [r7, #1]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006216:	887a      	ldrh	r2, [r7, #2]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800621c:	e003      	b.n	8006226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800621e:	887b      	ldrh	r3, [r7, #2]
 8006220:	041a      	lsls	r2, r3, #16
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	619a      	str	r2, [r3, #24]
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e12b      	b.n	800649e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fc ffa4 	bl	80031a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006298:	f000 fd5a 	bl	8006d50 <HAL_RCC_GetPCLK1Freq>
 800629c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4a81      	ldr	r2, [pc, #516]	; (80064a8 <HAL_I2C_Init+0x274>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d807      	bhi.n	80062b8 <HAL_I2C_Init+0x84>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a80      	ldr	r2, [pc, #512]	; (80064ac <HAL_I2C_Init+0x278>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	bf94      	ite	ls
 80062b0:	2301      	movls	r3, #1
 80062b2:	2300      	movhi	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e006      	b.n	80062c6 <HAL_I2C_Init+0x92>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a7d      	ldr	r2, [pc, #500]	; (80064b0 <HAL_I2C_Init+0x27c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	bf94      	ite	ls
 80062c0:	2301      	movls	r3, #1
 80062c2:	2300      	movhi	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0e7      	b.n	800649e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4a78      	ldr	r2, [pc, #480]	; (80064b4 <HAL_I2C_Init+0x280>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	0c9b      	lsrs	r3, r3, #18
 80062d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4a6a      	ldr	r2, [pc, #424]	; (80064a8 <HAL_I2C_Init+0x274>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d802      	bhi.n	8006308 <HAL_I2C_Init+0xd4>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3301      	adds	r3, #1
 8006306:	e009      	b.n	800631c <HAL_I2C_Init+0xe8>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	4a69      	ldr	r2, [pc, #420]	; (80064b8 <HAL_I2C_Init+0x284>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	099b      	lsrs	r3, r3, #6
 800631a:	3301      	adds	r3, #1
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	430b      	orrs	r3, r1
 8006322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800632e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	495c      	ldr	r1, [pc, #368]	; (80064a8 <HAL_I2C_Init+0x274>)
 8006338:	428b      	cmp	r3, r1
 800633a:	d819      	bhi.n	8006370 <HAL_I2C_Init+0x13c>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	1e59      	subs	r1, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	fbb1 f3f3 	udiv	r3, r1, r3
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006350:	400b      	ands	r3, r1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_I2C_Init+0x138>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1e59      	subs	r1, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	fbb1 f3f3 	udiv	r3, r1, r3
 8006364:	3301      	adds	r3, #1
 8006366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636a:	e051      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 800636c:	2304      	movs	r3, #4
 800636e:	e04f      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d111      	bne.n	800639c <HAL_I2C_Init+0x168>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	1e58      	subs	r0, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	440b      	add	r3, r1
 8006386:	fbb0 f3f3 	udiv	r3, r0, r3
 800638a:	3301      	adds	r3, #1
 800638c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e012      	b.n	80063c2 <HAL_I2C_Init+0x18e>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1e58      	subs	r0, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6859      	ldr	r1, [r3, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	0099      	lsls	r1, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_I2C_Init+0x196>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e022      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10e      	bne.n	80063f0 <HAL_I2C_Init+0x1bc>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1e58      	subs	r0, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6859      	ldr	r1, [r3, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	440b      	add	r3, r1
 80063e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063e4:	3301      	adds	r3, #1
 80063e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ee:	e00f      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e58      	subs	r0, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	0099      	lsls	r1, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	fbb0 f3f3 	udiv	r3, r0, r3
 8006406:	3301      	adds	r3, #1
 8006408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	6809      	ldr	r1, [r1, #0]
 8006414:	4313      	orrs	r3, r2
 8006416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800643e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6911      	ldr	r1, [r2, #16]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68d2      	ldr	r2, [r2, #12]
 800644a:	4311      	orrs	r1, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	430b      	orrs	r3, r1
 8006452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	000186a0 	.word	0x000186a0
 80064ac:	001e847f 	.word	0x001e847f
 80064b0:	003d08ff 	.word	0x003d08ff
 80064b4:	431bde83 	.word	0x431bde83
 80064b8:	10624dd3 	.word	0x10624dd3

080064bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e264      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d075      	beq.n	80065c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064da:	4ba3      	ldr	r3, [pc, #652]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 030c 	and.w	r3, r3, #12
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d00c      	beq.n	8006500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064e6:	4ba0      	ldr	r3, [pc, #640]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d112      	bne.n	8006518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064f2:	4b9d      	ldr	r3, [pc, #628]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fe:	d10b      	bne.n	8006518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006500:	4b99      	ldr	r3, [pc, #612]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05b      	beq.n	80065c4 <HAL_RCC_OscConfig+0x108>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d157      	bne.n	80065c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e23f      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	d106      	bne.n	8006530 <HAL_RCC_OscConfig+0x74>
 8006522:	4b91      	ldr	r3, [pc, #580]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a90      	ldr	r2, [pc, #576]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e01d      	b.n	800656c <HAL_RCC_OscConfig+0xb0>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006538:	d10c      	bne.n	8006554 <HAL_RCC_OscConfig+0x98>
 800653a:	4b8b      	ldr	r3, [pc, #556]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a8a      	ldr	r2, [pc, #552]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	4b88      	ldr	r3, [pc, #544]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a87      	ldr	r2, [pc, #540]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e00b      	b.n	800656c <HAL_RCC_OscConfig+0xb0>
 8006554:	4b84      	ldr	r3, [pc, #528]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a83      	ldr	r2, [pc, #524]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800655a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4b81      	ldr	r3, [pc, #516]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a80      	ldr	r2, [pc, #512]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800656a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d013      	beq.n	800659c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006574:	f7fe f834 	bl	80045e0 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800657c:	f7fe f830 	bl	80045e0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	; 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e204      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658e:	4b76      	ldr	r3, [pc, #472]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0xc0>
 800659a:	e014      	b.n	80065c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659c:	f7fe f820 	bl	80045e0 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065a4:	f7fe f81c 	bl	80045e0 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b64      	cmp	r3, #100	; 0x64
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e1f0      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065b6:	4b6c      	ldr	r3, [pc, #432]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0xe8>
 80065c2:	e000      	b.n	80065c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d063      	beq.n	800669a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065d2:	4b65      	ldr	r3, [pc, #404]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065de:	4b62      	ldr	r3, [pc, #392]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d11c      	bne.n	8006624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ea:	4b5f      	ldr	r3, [pc, #380]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d116      	bne.n	8006624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065f6:	4b5c      	ldr	r3, [pc, #368]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_RCC_OscConfig+0x152>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d001      	beq.n	800660e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e1c4      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660e:	4b56      	ldr	r3, [pc, #344]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4952      	ldr	r1, [pc, #328]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800661e:	4313      	orrs	r3, r2
 8006620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006622:	e03a      	b.n	800669a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d020      	beq.n	800666e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800662c:	4b4f      	ldr	r3, [pc, #316]	; (800676c <HAL_RCC_OscConfig+0x2b0>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fd ffd5 	bl	80045e0 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800663a:	f7fd ffd1 	bl	80045e0 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e1a5      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800664c:	4b46      	ldr	r3, [pc, #280]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006658:	4b43      	ldr	r3, [pc, #268]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4940      	ldr	r1, [pc, #256]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]
 800666c:	e015      	b.n	800669a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800666e:	4b3f      	ldr	r3, [pc, #252]	; (800676c <HAL_RCC_OscConfig+0x2b0>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fd ffb4 	bl	80045e0 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800667c:	f7fd ffb0 	bl	80045e0 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e184      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668e:	4b36      	ldr	r3, [pc, #216]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d030      	beq.n	8006708 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d016      	beq.n	80066dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ae:	4b30      	ldr	r3, [pc, #192]	; (8006770 <HAL_RCC_OscConfig+0x2b4>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fd ff94 	bl	80045e0 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066bc:	f7fd ff90 	bl	80045e0 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e164      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ce:	4b26      	ldr	r3, [pc, #152]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80066d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x200>
 80066da:	e015      	b.n	8006708 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <HAL_RCC_OscConfig+0x2b4>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e2:	f7fd ff7d 	bl	80045e0 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ea:	f7fd ff79 	bl	80045e0 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e14d      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 80066fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1f0      	bne.n	80066ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80a0 	beq.w	8006856 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006716:	2300      	movs	r3, #0
 8006718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800671a:	4b13      	ldr	r3, [pc, #76]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10f      	bne.n	8006746 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	4a0e      	ldr	r2, [pc, #56]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006734:	6413      	str	r3, [r2, #64]	; 0x40
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <HAL_RCC_OscConfig+0x2ac>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673e:	60bb      	str	r3, [r7, #8]
 8006740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_RCC_OscConfig+0x2b8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d121      	bne.n	8006796 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <HAL_RCC_OscConfig+0x2b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a07      	ldr	r2, [pc, #28]	; (8006774 <HAL_RCC_OscConfig+0x2b8>)
 8006758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800675e:	f7fd ff3f 	bl	80045e0 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006764:	e011      	b.n	800678a <HAL_RCC_OscConfig+0x2ce>
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800
 800676c:	42470000 	.word	0x42470000
 8006770:	42470e80 	.word	0x42470e80
 8006774:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006778:	f7fd ff32 	bl	80045e0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e106      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678a:	4b85      	ldr	r3, [pc, #532]	; (80069a0 <HAL_RCC_OscConfig+0x4e4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d106      	bne.n	80067ac <HAL_RCC_OscConfig+0x2f0>
 800679e:	4b81      	ldr	r3, [pc, #516]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	4a80      	ldr	r2, [pc, #512]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	6713      	str	r3, [r2, #112]	; 0x70
 80067aa:	e01c      	b.n	80067e6 <HAL_RCC_OscConfig+0x32a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b05      	cmp	r3, #5
 80067b2:	d10c      	bne.n	80067ce <HAL_RCC_OscConfig+0x312>
 80067b4:	4b7b      	ldr	r3, [pc, #492]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b8:	4a7a      	ldr	r2, [pc, #488]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067ba:	f043 0304 	orr.w	r3, r3, #4
 80067be:	6713      	str	r3, [r2, #112]	; 0x70
 80067c0:	4b78      	ldr	r3, [pc, #480]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c4:	4a77      	ldr	r2, [pc, #476]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	6713      	str	r3, [r2, #112]	; 0x70
 80067cc:	e00b      	b.n	80067e6 <HAL_RCC_OscConfig+0x32a>
 80067ce:	4b75      	ldr	r3, [pc, #468]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d2:	4a74      	ldr	r2, [pc, #464]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	6713      	str	r3, [r2, #112]	; 0x70
 80067da:	4b72      	ldr	r3, [pc, #456]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	4a71      	ldr	r2, [pc, #452]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80067e0:	f023 0304 	bic.w	r3, r3, #4
 80067e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d015      	beq.n	800681a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ee:	f7fd fef7 	bl	80045e0 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f4:	e00a      	b.n	800680c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f6:	f7fd fef3 	bl	80045e0 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	f241 3288 	movw	r2, #5000	; 0x1388
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e0c5      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800680c:	4b65      	ldr	r3, [pc, #404]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 800680e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0ee      	beq.n	80067f6 <HAL_RCC_OscConfig+0x33a>
 8006818:	e014      	b.n	8006844 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800681a:	f7fd fee1 	bl	80045e0 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006820:	e00a      	b.n	8006838 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006822:	f7fd fedd 	bl	80045e0 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006830:	4293      	cmp	r3, r2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e0af      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006838:	4b5a      	ldr	r3, [pc, #360]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1ee      	bne.n	8006822 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d105      	bne.n	8006856 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800684a:	4b56      	ldr	r3, [pc, #344]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	4a55      	ldr	r2, [pc, #340]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 8006850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006854:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 809b 	beq.w	8006996 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006860:	4b50      	ldr	r3, [pc, #320]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 030c 	and.w	r3, r3, #12
 8006868:	2b08      	cmp	r3, #8
 800686a:	d05c      	beq.n	8006926 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d141      	bne.n	80068f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006874:	4b4c      	ldr	r3, [pc, #304]	; (80069a8 <HAL_RCC_OscConfig+0x4ec>)
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687a:	f7fd feb1 	bl	80045e0 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006882:	f7fd fead 	bl	80045e0 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e081      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f0      	bne.n	8006882 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	019b      	lsls	r3, r3, #6
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	3b01      	subs	r3, #1
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	061b      	lsls	r3, r3, #24
 80068c4:	4937      	ldr	r1, [pc, #220]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068ca:	4b37      	ldr	r3, [pc, #220]	; (80069a8 <HAL_RCC_OscConfig+0x4ec>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d0:	f7fd fe86 	bl	80045e0 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d8:	f7fd fe82 	bl	80045e0 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e056      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0x41c>
 80068f6:	e04e      	b.n	8006996 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f8:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCC_OscConfig+0x4ec>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fe:	f7fd fe6f 	bl	80045e0 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006906:	f7fd fe6b 	bl	80045e0 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e03f      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006918:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f0      	bne.n	8006906 <HAL_RCC_OscConfig+0x44a>
 8006924:	e037      	b.n	8006996 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e032      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <HAL_RCC_OscConfig+0x4e8>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d028      	beq.n	8006992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800694a:	429a      	cmp	r2, r3
 800694c:	d121      	bne.n	8006992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006958:	429a      	cmp	r2, r3
 800695a:	d11a      	bne.n	8006992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006962:	4013      	ands	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006968:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800696a:	4293      	cmp	r3, r2
 800696c:	d111      	bne.n	8006992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	3b01      	subs	r3, #1
 800697c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800697e:	429a      	cmp	r2, r3
 8006980:	d107      	bne.n	8006992 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800698e:	429a      	cmp	r2, r3
 8006990:	d001      	beq.n	8006996 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40007000 	.word	0x40007000
 80069a4:	40023800 	.word	0x40023800
 80069a8:	42470060 	.word	0x42470060

080069ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e0cc      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c0:	4b68      	ldr	r3, [pc, #416]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d90c      	bls.n	80069e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ce:	4b65      	ldr	r3, [pc, #404]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d6:	4b63      	ldr	r3, [pc, #396]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d001      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e0b8      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d020      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a00:	4b59      	ldr	r3, [pc, #356]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	4a58      	ldr	r2, [pc, #352]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a18:	4b53      	ldr	r3, [pc, #332]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4a52      	ldr	r2, [pc, #328]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a24:	4b50      	ldr	r3, [pc, #320]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	494d      	ldr	r1, [pc, #308]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d044      	beq.n	8006acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d107      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4a:	4b47      	ldr	r3, [pc, #284]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d119      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e07f      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d003      	beq.n	8006a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d107      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a6a:	4b3f      	ldr	r3, [pc, #252]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e06f      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a7a:	4b3b      	ldr	r3, [pc, #236]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e067      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a8a:	4b37      	ldr	r3, [pc, #220]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f023 0203 	bic.w	r2, r3, #3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	4934      	ldr	r1, [pc, #208]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a9c:	f7fd fda0 	bl	80045e0 <HAL_GetTick>
 8006aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa2:	e00a      	b.n	8006aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa4:	f7fd fd9c 	bl	80045e0 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e04f      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aba:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 020c 	and.w	r2, r3, #12
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d1eb      	bne.n	8006aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006acc:	4b25      	ldr	r3, [pc, #148]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d20c      	bcs.n	8006af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ae2:	4b20      	ldr	r3, [pc, #128]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d001      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e032      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b00:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	4916      	ldr	r1, [pc, #88]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b1e:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	490e      	ldr	r1, [pc, #56]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b32:	f000 f821 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 8006b36:	4602      	mov	r2, r0
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	490a      	ldr	r1, [pc, #40]	; (8006b6c <HAL_RCC_ClockConfig+0x1c0>)
 8006b44:	5ccb      	ldrb	r3, [r1, r3]
 8006b46:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4a:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b4e:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fd fd00 	bl	8004558 <HAL_InitTick>

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40023c00 	.word	0x40023c00
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	0800e2c8 	.word	0x0800e2c8
 8006b70:	20000000 	.word	0x20000000
 8006b74:	20000004 	.word	0x20000004

08006b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	607b      	str	r3, [r7, #4]
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b90:	4b67      	ldr	r3, [pc, #412]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 030c 	and.w	r3, r3, #12
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d00d      	beq.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	f200 80bd 	bhi.w	8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_RCC_GetSysClockFreq+0x34>
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d003      	beq.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006baa:	e0b7      	b.n	8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bac:	4b61      	ldr	r3, [pc, #388]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006bae:	60bb      	str	r3, [r7, #8]
       break;
 8006bb0:	e0b7      	b.n	8006d22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bb2:	4b60      	ldr	r3, [pc, #384]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006bb4:	60bb      	str	r3, [r7, #8]
      break;
 8006bb6:	e0b4      	b.n	8006d22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bb8:	4b5d      	ldr	r3, [pc, #372]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bc2:	4b5b      	ldr	r3, [pc, #364]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d04d      	beq.n	8006c6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bce:	4b58      	ldr	r3, [pc, #352]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	099b      	lsrs	r3, r3, #6
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bde:	f04f 0100 	mov.w	r1, #0
 8006be2:	ea02 0800 	and.w	r8, r2, r0
 8006be6:	ea03 0901 	and.w	r9, r3, r1
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	014b      	lsls	r3, r1, #5
 8006bf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006bfc:	0142      	lsls	r2, r0, #5
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	ebb0 0008 	subs.w	r0, r0, r8
 8006c06:	eb61 0109 	sbc.w	r1, r1, r9
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	018b      	lsls	r3, r1, #6
 8006c14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c18:	0182      	lsls	r2, r0, #6
 8006c1a:	1a12      	subs	r2, r2, r0
 8006c1c:	eb63 0301 	sbc.w	r3, r3, r1
 8006c20:	f04f 0000 	mov.w	r0, #0
 8006c24:	f04f 0100 	mov.w	r1, #0
 8006c28:	00d9      	lsls	r1, r3, #3
 8006c2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c2e:	00d0      	lsls	r0, r2, #3
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	eb12 0208 	adds.w	r2, r2, r8
 8006c38:	eb43 0309 	adc.w	r3, r3, r9
 8006c3c:	f04f 0000 	mov.w	r0, #0
 8006c40:	f04f 0100 	mov.w	r1, #0
 8006c44:	0299      	lsls	r1, r3, #10
 8006c46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c4a:	0290      	lsls	r0, r2, #10
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	f7fa f814 	bl	8000c88 <__aeabi_uldivmod>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4613      	mov	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	e04a      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6a:	4b31      	ldr	r3, [pc, #196]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	099b      	lsrs	r3, r3, #6
 8006c70:	461a      	mov	r2, r3
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c7a:	f04f 0100 	mov.w	r1, #0
 8006c7e:	ea02 0400 	and.w	r4, r2, r0
 8006c82:	ea03 0501 	and.w	r5, r3, r1
 8006c86:	4620      	mov	r0, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	014b      	lsls	r3, r1, #5
 8006c94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c98:	0142      	lsls	r2, r0, #5
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	1b00      	subs	r0, r0, r4
 8006ca0:	eb61 0105 	sbc.w	r1, r1, r5
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	018b      	lsls	r3, r1, #6
 8006cae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006cb2:	0182      	lsls	r2, r0, #6
 8006cb4:	1a12      	subs	r2, r2, r0
 8006cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8006cba:	f04f 0000 	mov.w	r0, #0
 8006cbe:	f04f 0100 	mov.w	r1, #0
 8006cc2:	00d9      	lsls	r1, r3, #3
 8006cc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cc8:	00d0      	lsls	r0, r2, #3
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	1912      	adds	r2, r2, r4
 8006cd0:	eb45 0303 	adc.w	r3, r5, r3
 8006cd4:	f04f 0000 	mov.w	r0, #0
 8006cd8:	f04f 0100 	mov.w	r1, #0
 8006cdc:	0299      	lsls	r1, r3, #10
 8006cde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ce2:	0290      	lsls	r0, r2, #10
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4619      	mov	r1, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	f7f9 ffc8 	bl	8000c88 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	60bb      	str	r3, [r7, #8]
      break;
 8006d1a:	e002      	b.n	8006d22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d1e:	60bb      	str	r3, [r7, #8]
      break;
 8006d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d22:	68bb      	ldr	r3, [r7, #8]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d2e:	bf00      	nop
 8006d30:	40023800 	.word	0x40023800
 8006d34:	00f42400 	.word	0x00f42400

08006d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d3c:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20000000 	.word	0x20000000

08006d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d54:	f7ff fff0 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	0a9b      	lsrs	r3, r3, #10
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	4903      	ldr	r1, [pc, #12]	; (8006d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d66:	5ccb      	ldrb	r3, [r1, r3]
 8006d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40023800 	.word	0x40023800
 8006d74:	0800e2d8 	.word	0x0800e2d8

08006d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d7c:	f7ff ffdc 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006d80:	4602      	mov	r2, r0
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	0b5b      	lsrs	r3, r3, #13
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	4903      	ldr	r1, [pc, #12]	; (8006d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d8e:	5ccb      	ldrb	r3, [r1, r3]
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	0800e2d8 	.word	0x0800e2d8

08006da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e07b      	b.n	8006eaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc2:	d009      	beq.n	8006dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	61da      	str	r2, [r3, #28]
 8006dca:	e005      	b.n	8006dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fc fa20 	bl	8003238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	ea42 0103 	orr.w	r1, r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	f003 0104 	and.w	r1, r3, #4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f003 0210 	and.w	r2, r3, #16
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b088      	sub	sp, #32
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_SPI_Transmit+0x22>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e126      	b.n	8007122 <HAL_SPI_Transmit+0x270>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006edc:	f7fd fb80 	bl	80045e0 <HAL_GetTick>
 8006ee0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d002      	beq.n	8006ef8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ef6:	e10b      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_SPI_Transmit+0x52>
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f08:	e102      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	88fa      	ldrh	r2, [r7, #6]
 8006f22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	88fa      	ldrh	r2, [r7, #6]
 8006f28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f50:	d10f      	bne.n	8006f72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d007      	beq.n	8006f90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f98:	d14b      	bne.n	8007032 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_SPI_Transmit+0xf6>
 8006fa2:	8afb      	ldrh	r3, [r7, #22]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d13e      	bne.n	8007026 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fcc:	e02b      	b.n	8007026 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d112      	bne.n	8007002 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	881a      	ldrh	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007000:	e011      	b.n	8007026 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007002:	f7fd faed 	bl	80045e0 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d803      	bhi.n	800701a <HAL_SPI_Transmit+0x168>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d102      	bne.n	8007020 <HAL_SPI_Transmit+0x16e>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007024:	e074      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ce      	bne.n	8006fce <HAL_SPI_Transmit+0x11c>
 8007030:	e04c      	b.n	80070cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_Transmit+0x18e>
 800703a:	8afb      	ldrh	r3, [r7, #22]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d140      	bne.n	80070c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007066:	e02c      	b.n	80070c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d113      	bne.n	800709e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	7812      	ldrb	r2, [r2, #0]
 8007082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	86da      	strh	r2, [r3, #54]	; 0x36
 800709c:	e011      	b.n	80070c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800709e:	f7fd fa9f 	bl	80045e0 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d803      	bhi.n	80070b6 <HAL_SPI_Transmit+0x204>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d102      	bne.n	80070bc <HAL_SPI_Transmit+0x20a>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070c0:	e026      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1cd      	bne.n	8007068 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 fbcb 	bl	800786c <SPI_EndRxTxTransaction>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e000      	b.n	8007110 <HAL_SPI_Transmit+0x25e>
  }

error:
 800710e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007120:	7ffb      	ldrb	r3, [r7, #31]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b088      	sub	sp, #32
 800712e:	af02      	add	r7, sp, #8
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	603b      	str	r3, [r7, #0]
 8007136:	4613      	mov	r3, r2
 8007138:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007146:	d112      	bne.n	800716e <HAL_SPI_Receive+0x44>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10e      	bne.n	800716e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2204      	movs	r2, #4
 8007154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4613      	mov	r3, r2
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f8f1 	bl	800734c <HAL_SPI_TransmitReceive>
 800716a:	4603      	mov	r3, r0
 800716c:	e0ea      	b.n	8007344 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_SPI_Receive+0x52>
 8007178:	2302      	movs	r3, #2
 800717a:	e0e3      	b.n	8007344 <HAL_SPI_Receive+0x21a>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007184:	f7fd fa2c 	bl	80045e0 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b01      	cmp	r3, #1
 8007194:	d002      	beq.n	800719c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007196:	2302      	movs	r3, #2
 8007198:	75fb      	strb	r3, [r7, #23]
    goto error;
 800719a:	e0ca      	b.n	8007332 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_SPI_Receive+0x7e>
 80071a2:	88fb      	ldrh	r3, [r7, #6]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071ac:	e0c1      	b.n	8007332 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2204      	movs	r2, #4
 80071b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f4:	d10f      	bne.n	8007216 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007214:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d007      	beq.n	8007234 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007232:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d162      	bne.n	8007302 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800723c:	e02e      	b.n	800729c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	d115      	bne.n	8007278 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f103 020c 	add.w	r2, r3, #12
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	7812      	ldrb	r2, [r2, #0]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007276:	e011      	b.n	800729c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007278:	f7fd f9b2 	bl	80045e0 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d803      	bhi.n	8007290 <HAL_SPI_Receive+0x166>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d102      	bne.n	8007296 <HAL_SPI_Receive+0x16c>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	75fb      	strb	r3, [r7, #23]
          goto error;
 800729a:	e04a      	b.n	8007332 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1cb      	bne.n	800723e <HAL_SPI_Receive+0x114>
 80072a6:	e031      	b.n	800730c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d113      	bne.n	80072de <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	b292      	uxth	r2, r2
 80072c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	1c9a      	adds	r2, r3, #2
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072dc:	e011      	b.n	8007302 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072de:	f7fd f97f 	bl	80045e0 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d803      	bhi.n	80072f6 <HAL_SPI_Receive+0x1cc>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d102      	bne.n	80072fc <HAL_SPI_Receive+0x1d2>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007300:	e017      	b.n	8007332 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1cd      	bne.n	80072a8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fa45 	bl	80077a0 <SPI_EndRxTransaction>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	75fb      	strb	r3, [r7, #23]
 800732e:	e000      	b.n	8007332 <HAL_SPI_Receive+0x208>
  }

error :
 8007330:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007342:	7dfb      	ldrb	r3, [r7, #23]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08c      	sub	sp, #48	; 0x30
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800735a:	2301      	movs	r3, #1
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_SPI_TransmitReceive+0x26>
 800736e:	2302      	movs	r3, #2
 8007370:	e18a      	b.n	8007688 <HAL_SPI_TransmitReceive+0x33c>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737a:	f7fd f931 	bl	80045e0 <HAL_GetTick>
 800737e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007390:	887b      	ldrh	r3, [r7, #2]
 8007392:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007398:	2b01      	cmp	r3, #1
 800739a:	d00f      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x70>
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a2:	d107      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x68>
 80073ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d003      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073ba:	e15b      	b.n	8007674 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <HAL_SPI_TransmitReceive+0x82>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <HAL_SPI_TransmitReceive+0x82>
 80073c8:	887b      	ldrh	r3, [r7, #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073d4:	e14e      	b.n	8007674 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d003      	beq.n	80073ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2205      	movs	r2, #5
 80073e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	887a      	ldrh	r2, [r7, #2]
 80073fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	887a      	ldrh	r2, [r7, #2]
 8007400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	887a      	ldrh	r2, [r7, #2]
 800740c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	887a      	ldrh	r2, [r7, #2]
 8007412:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d007      	beq.n	800743e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800743c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007446:	d178      	bne.n	800753a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_SPI_TransmitReceive+0x10a>
 8007450:	8b7b      	ldrh	r3, [r7, #26]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d166      	bne.n	8007524 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	881a      	ldrh	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	1c9a      	adds	r2, r3, #2
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800747a:	e053      	b.n	8007524 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d11b      	bne.n	80074c2 <HAL_SPI_TransmitReceive+0x176>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d016      	beq.n	80074c2 <HAL_SPI_TransmitReceive+0x176>
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d113      	bne.n	80074c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	1c9a      	adds	r2, r3, #2
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d119      	bne.n	8007504 <HAL_SPI_TransmitReceive+0x1b8>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d014      	beq.n	8007504 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	b292      	uxth	r2, r2
 80074e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	1c9a      	adds	r2, r3, #2
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007500:	2301      	movs	r3, #1
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007504:	f7fd f86c 	bl	80045e0 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007510:	429a      	cmp	r2, r3
 8007512:	d807      	bhi.n	8007524 <HAL_SPI_TransmitReceive+0x1d8>
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d003      	beq.n	8007524 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007522:	e0a7      	b.n	8007674 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1a6      	bne.n	800747c <HAL_SPI_TransmitReceive+0x130>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1a1      	bne.n	800747c <HAL_SPI_TransmitReceive+0x130>
 8007538:	e07c      	b.n	8007634 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_SPI_TransmitReceive+0x1fc>
 8007542:	8b7b      	ldrh	r3, [r7, #26]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d16b      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	330c      	adds	r3, #12
 8007552:	7812      	ldrb	r2, [r2, #0]
 8007554:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800756e:	e057      	b.n	8007620 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b02      	cmp	r3, #2
 800757c:	d11c      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0x26c>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d017      	beq.n	80075b8 <HAL_SPI_TransmitReceive+0x26c>
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d114      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	7812      	ldrb	r2, [r2, #0]
 800759a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d119      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x2ae>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d014      	beq.n	80075fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f6:	2301      	movs	r3, #1
 80075f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075fa:	f7fc fff1 	bl	80045e0 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007606:	429a      	cmp	r2, r3
 8007608:	d803      	bhi.n	8007612 <HAL_SPI_TransmitReceive+0x2c6>
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d102      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x2cc>
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800761e:	e029      	b.n	8007674 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1a2      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x224>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d19d      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f917 	bl	800786c <SPI_EndRxTxTransaction>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007650:	e010      	b.n	8007674 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	e000      	b.n	8007674 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007672:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007688:	4618      	mov	r0, r3
 800768a:	3730      	adds	r7, #48	; 0x30
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	4613      	mov	r3, r2
 800769e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076a0:	f7fc ff9e 	bl	80045e0 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	1a9b      	subs	r3, r3, r2
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4413      	add	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076b0:	f7fc ff96 	bl	80045e0 <HAL_GetTick>
 80076b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076b6:	4b39      	ldr	r3, [pc, #228]	; (800779c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	015b      	lsls	r3, r3, #5
 80076bc:	0d1b      	lsrs	r3, r3, #20
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c6:	e054      	b.n	8007772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d050      	beq.n	8007772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076d0:	f7fc ff86 	bl	80045e0 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d902      	bls.n	80076e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d13d      	bne.n	8007762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fe:	d111      	bne.n	8007724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	d004      	beq.n	8007714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007712:	d107      	bne.n	8007724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772c:	d10f      	bne.n	800774e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800774c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e017      	b.n	8007792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3b01      	subs	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4013      	ands	r3, r2
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	429a      	cmp	r2, r3
 8007780:	bf0c      	ite	eq
 8007782:	2301      	moveq	r3, #1
 8007784:	2300      	movne	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	429a      	cmp	r2, r3
 800778e:	d19b      	bne.n	80076c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000000 	.word	0x20000000

080077a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b4:	d111      	bne.n	80077da <SPI_EndRxTransaction+0x3a>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077be:	d004      	beq.n	80077ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c8:	d107      	bne.n	80077da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e2:	d12a      	bne.n	800783a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ec:	d012      	beq.n	8007814 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2200      	movs	r2, #0
 80077f6:	2180      	movs	r1, #128	; 0x80
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff ff49 	bl	8007690 <SPI_WaitFlagStateUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02d      	beq.n	8007860 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	f043 0220 	orr.w	r2, r3, #32
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e026      	b.n	8007862 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	2101      	movs	r1, #1
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff ff36 	bl	8007690 <SPI_WaitFlagStateUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d01a      	beq.n	8007860 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f043 0220 	orr.w	r2, r3, #32
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e013      	b.n	8007862 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	2101      	movs	r1, #1
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff ff23 	bl	8007690 <SPI_WaitFlagStateUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007854:	f043 0220 	orr.w	r2, r3, #32
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e000      	b.n	8007862 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af02      	add	r7, sp, #8
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007878:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <SPI_EndRxTxTransaction+0x7c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1b      	ldr	r2, [pc, #108]	; (80078ec <SPI_EndRxTxTransaction+0x80>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	0d5b      	lsrs	r3, r3, #21
 8007884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007888:	fb02 f303 	mul.w	r3, r2, r3
 800788c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007896:	d112      	bne.n	80078be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	2180      	movs	r1, #128	; 0x80
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff fef4 	bl	8007690 <SPI_WaitFlagStateUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d016      	beq.n	80078dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b2:	f043 0220 	orr.w	r2, r3, #32
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e00f      	b.n	80078de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d4:	2b80      	cmp	r3, #128	; 0x80
 80078d6:	d0f2      	beq.n	80078be <SPI_EndRxTxTransaction+0x52>
 80078d8:	e000      	b.n	80078dc <SPI_EndRxTxTransaction+0x70>
        break;
 80078da:	bf00      	nop
  }

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000000 	.word	0x20000000
 80078ec:	165e9f81 	.word	0x165e9f81

080078f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e041      	b.n	8007986 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fb fd86 	bl	8003428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3304      	adds	r3, #4
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f000 fe12 	bl	8008558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d001      	beq.n	80079a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e04e      	b.n	8007a46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0201 	orr.w	r2, r2, #1
 80079be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d022      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d2:	d01d      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d018      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1e      	ldr	r2, [pc, #120]	; (8007a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1c      	ldr	r2, [pc, #112]	; (8007a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00e      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a1b      	ldr	r2, [pc, #108]	; (8007a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a19      	ldr	r2, [pc, #100]	; (8007a68 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a18      	ldr	r2, [pc, #96]	; (8007a6c <HAL_TIM_Base_Start_IT+0xdc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d111      	bne.n	8007a34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b06      	cmp	r3, #6
 8007a20:	d010      	beq.n	8007a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0201 	orr.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a32:	e007      	b.n	8007a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40010000 	.word	0x40010000
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40010400 	.word	0x40010400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40001800 	.word	0x40001800

08007a70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10f      	bne.n	8007ab8 <HAL_TIM_Base_Stop_IT+0x48>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	f240 4344 	movw	r3, #1092	; 0x444
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d107      	bne.n	8007ab8 <HAL_TIM_Base_Stop_IT+0x48>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e041      	b.n	8007b64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fb fc75 	bl	80033e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	f000 fd23 	bl	8008558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_TIM_PWM_Start+0x24>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e022      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x6a>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d109      	bne.n	8007baa <HAL_TIM_PWM_Start+0x3e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	bf14      	ite	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	2300      	moveq	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e015      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x6a>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d109      	bne.n	8007bc4 <HAL_TIM_PWM_Start+0x58>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e008      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x6a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e07c      	b.n	8007cd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d104      	bne.n	8007bee <HAL_TIM_PWM_Start+0x82>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bec:	e013      	b.n	8007c16 <HAL_TIM_PWM_Start+0xaa>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d104      	bne.n	8007bfe <HAL_TIM_PWM_Start+0x92>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bfc:	e00b      	b.n	8007c16 <HAL_TIM_PWM_Start+0xaa>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d104      	bne.n	8007c0e <HAL_TIM_PWM_Start+0xa2>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c0c:	e003      	b.n	8007c16 <HAL_TIM_PWM_Start+0xaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 feea 	bl	80089f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a2d      	ldr	r2, [pc, #180]	; (8007ce0 <HAL_TIM_PWM_Start+0x174>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d004      	beq.n	8007c38 <HAL_TIM_PWM_Start+0xcc>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a2c      	ldr	r2, [pc, #176]	; (8007ce4 <HAL_TIM_PWM_Start+0x178>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d101      	bne.n	8007c3c <HAL_TIM_PWM_Start+0xd0>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <HAL_TIM_PWM_Start+0xd2>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a22      	ldr	r2, [pc, #136]	; (8007ce0 <HAL_TIM_PWM_Start+0x174>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d022      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x136>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c64:	d01d      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x136>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1f      	ldr	r2, [pc, #124]	; (8007ce8 <HAL_TIM_PWM_Start+0x17c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d018      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x136>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1d      	ldr	r2, [pc, #116]	; (8007cec <HAL_TIM_PWM_Start+0x180>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d013      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x136>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1c      	ldr	r2, [pc, #112]	; (8007cf0 <HAL_TIM_PWM_Start+0x184>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00e      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x136>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a16      	ldr	r2, [pc, #88]	; (8007ce4 <HAL_TIM_PWM_Start+0x178>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d009      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x136>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a18      	ldr	r2, [pc, #96]	; (8007cf4 <HAL_TIM_PWM_Start+0x188>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d004      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x136>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <HAL_TIM_PWM_Start+0x18c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d111      	bne.n	8007cc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b06      	cmp	r3, #6
 8007cb2:	d010      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc4:	e007      	b.n	8007cd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0201 	orr.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	40010000 	.word	0x40010000
 8007ce4:	40010400 	.word	0x40010400
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40000c00 	.word	0x40000c00
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	40001800 	.word	0x40001800

08007cfc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fe72 	bl	80089f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a2e      	ldr	r2, [pc, #184]	; (8007dd4 <HAL_TIM_PWM_Stop+0xd8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d004      	beq.n	8007d28 <HAL_TIM_PWM_Stop+0x2c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a2d      	ldr	r2, [pc, #180]	; (8007dd8 <HAL_TIM_PWM_Stop+0xdc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d101      	bne.n	8007d2c <HAL_TIM_PWM_Stop+0x30>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <HAL_TIM_PWM_Stop+0x32>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d017      	beq.n	8007d62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6a1a      	ldr	r2, [r3, #32]
 8007d38:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10f      	bne.n	8007d62 <HAL_TIM_PWM_Stop+0x66>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a1a      	ldr	r2, [r3, #32]
 8007d48:	f240 4344 	movw	r3, #1092	; 0x444
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d107      	bne.n	8007d62 <HAL_TIM_PWM_Stop+0x66>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6a1a      	ldr	r2, [r3, #32]
 8007d68:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10f      	bne.n	8007d92 <HAL_TIM_PWM_Stop+0x96>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a1a      	ldr	r2, [r3, #32]
 8007d78:	f240 4344 	movw	r3, #1092	; 0x444
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d107      	bne.n	8007d92 <HAL_TIM_PWM_Stop+0x96>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0201 	bic.w	r2, r2, #1
 8007d90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <HAL_TIM_PWM_Stop+0xa6>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007da0:	e013      	b.n	8007dca <HAL_TIM_PWM_Stop+0xce>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d104      	bne.n	8007db2 <HAL_TIM_PWM_Stop+0xb6>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007db0:	e00b      	b.n	8007dca <HAL_TIM_PWM_Stop+0xce>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_PWM_Stop+0xc6>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc0:	e003      	b.n	8007dca <HAL_TIM_PWM_Stop+0xce>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40010400 	.word	0x40010400

08007ddc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e097      	b.n	8007f20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7fb fa5f 	bl	80032c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e20:	f023 0307 	bic.w	r3, r3, #7
 8007e24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f000 fb91 	bl	8008558 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e7c:	f023 030c 	bic.w	r3, r3, #12
 8007e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	011a      	lsls	r2, r3, #4
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	031b      	lsls	r3, r3, #12
 8007eac:	4313      	orrs	r3, r2
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007ec2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d110      	bne.n	8007f7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d102      	bne.n	8007f64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f5e:	7b7b      	ldrb	r3, [r7, #13]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d001      	beq.n	8007f68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e069      	b.n	800803c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f78:	e031      	b.n	8007fde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d110      	bne.n	8007fa2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d102      	bne.n	8007f8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f86:	7b3b      	ldrb	r3, [r7, #12]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d001      	beq.n	8007f90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e055      	b.n	800803c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fa0:	e01d      	b.n	8007fde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d108      	bne.n	8007fba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d105      	bne.n	8007fba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fae:	7b7b      	ldrb	r3, [r7, #13]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d102      	bne.n	8007fba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fb4:	7b3b      	ldrb	r3, [r7, #12]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d001      	beq.n	8007fbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e03e      	b.n	800803c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_TIM_Encoder_Start+0xc4>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d008      	beq.n	8007ffc <HAL_TIM_Encoder_Start+0xd4>
 8007fea:	e00f      	b.n	800800c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fcff 	bl	80089f8 <TIM_CCxChannelCmd>
      break;
 8007ffa:	e016      	b.n	800802a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2201      	movs	r2, #1
 8008002:	2104      	movs	r1, #4
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fcf7 	bl	80089f8 <TIM_CCxChannelCmd>
      break;
 800800a:	e00e      	b.n	800802a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2201      	movs	r2, #1
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fcef 	bl	80089f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	2104      	movs	r1, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fce8 	bl	80089f8 <TIM_CCxChannelCmd>
      break;
 8008028:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0201 	orr.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <HAL_TIM_Encoder_Stop+0x18>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b04      	cmp	r3, #4
 8008058:	d008      	beq.n	800806c <HAL_TIM_Encoder_Stop+0x28>
 800805a:	e00f      	b.n	800807c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2200      	movs	r2, #0
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f000 fcc7 	bl	80089f8 <TIM_CCxChannelCmd>
      break;
 800806a:	e016      	b.n	800809a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2200      	movs	r2, #0
 8008072:	2104      	movs	r1, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fcbf 	bl	80089f8 <TIM_CCxChannelCmd>
      break;
 800807a:	e00e      	b.n	800809a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2200      	movs	r2, #0
 8008082:	2100      	movs	r1, #0
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fcb7 	bl	80089f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	2104      	movs	r1, #4
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fcb0 	bl	80089f8 <TIM_CCxChannelCmd>
      break;
 8008098:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a1a      	ldr	r2, [r3, #32]
 80080a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10f      	bne.n	80080ca <HAL_TIM_Encoder_Stop+0x86>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6a1a      	ldr	r2, [r3, #32]
 80080b0:	f240 4344 	movw	r3, #1092	; 0x444
 80080b4:	4013      	ands	r3, r2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d107      	bne.n	80080ca <HAL_TIM_Encoder_Stop+0x86>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0201 	bic.w	r2, r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <HAL_TIM_Encoder_Stop+0x92>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d138      	bne.n	8008148 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d104      	bne.n	80080e6 <HAL_TIM_Encoder_Stop+0xa2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080e4:	e013      	b.n	800810e <HAL_TIM_Encoder_Stop+0xca>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d104      	bne.n	80080f6 <HAL_TIM_Encoder_Stop+0xb2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f4:	e00b      	b.n	800810e <HAL_TIM_Encoder_Stop+0xca>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d104      	bne.n	8008106 <HAL_TIM_Encoder_Stop+0xc2>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008104:	e003      	b.n	800810e <HAL_TIM_Encoder_Stop+0xca>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <HAL_TIM_Encoder_Stop+0xda>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800811c:	e024      	b.n	8008168 <HAL_TIM_Encoder_Stop+0x124>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b04      	cmp	r3, #4
 8008122:	d104      	bne.n	800812e <HAL_TIM_Encoder_Stop+0xea>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800812c:	e01c      	b.n	8008168 <HAL_TIM_Encoder_Stop+0x124>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b08      	cmp	r3, #8
 8008132:	d104      	bne.n	800813e <HAL_TIM_Encoder_Stop+0xfa>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800813c:	e014      	b.n	8008168 <HAL_TIM_Encoder_Stop+0x124>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008146:	e00f      	b.n	8008168 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b02      	cmp	r3, #2
 8008186:	d122      	bne.n	80081ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b02      	cmp	r3, #2
 8008194:	d11b      	bne.n	80081ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f06f 0202 	mvn.w	r2, #2
 800819e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f9b1 	bl	800851c <HAL_TIM_IC_CaptureCallback>
 80081ba:	e005      	b.n	80081c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f9a3 	bl	8008508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9b4 	bl	8008530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d122      	bne.n	8008222 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d11b      	bne.n	8008222 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f06f 0204 	mvn.w	r2, #4
 80081f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f987 	bl	800851c <HAL_TIM_IC_CaptureCallback>
 800820e:	e005      	b.n	800821c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f979 	bl	8008508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f98a 	bl	8008530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b08      	cmp	r3, #8
 800822e:	d122      	bne.n	8008276 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b08      	cmp	r3, #8
 800823c:	d11b      	bne.n	8008276 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f06f 0208 	mvn.w	r2, #8
 8008246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2204      	movs	r2, #4
 800824c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f95d 	bl	800851c <HAL_TIM_IC_CaptureCallback>
 8008262:	e005      	b.n	8008270 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f94f 	bl	8008508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f960 	bl	8008530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b10      	cmp	r3, #16
 8008282:	d122      	bne.n	80082ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b10      	cmp	r3, #16
 8008290:	d11b      	bne.n	80082ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f06f 0210 	mvn.w	r2, #16
 800829a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2208      	movs	r2, #8
 80082a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f933 	bl	800851c <HAL_TIM_IC_CaptureCallback>
 80082b6:	e005      	b.n	80082c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f925 	bl	8008508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f936 	bl	8008530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d10e      	bne.n	80082f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d107      	bne.n	80082f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f06f 0201 	mvn.w	r2, #1
 80082ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7f9 fddf 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008300:	2b80      	cmp	r3, #128	; 0x80
 8008302:	d10e      	bne.n	8008322 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830e:	2b80      	cmp	r3, #128	; 0x80
 8008310:	d107      	bne.n	8008322 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800831a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fc17 	bl	8008b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	d10e      	bne.n	800834e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d107      	bne.n	800834e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f8fb 	bl	8008544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b20      	cmp	r3, #32
 800835a:	d10e      	bne.n	800837a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b20      	cmp	r3, #32
 8008368:	d107      	bne.n	800837a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f06f 0220 	mvn.w	r2, #32
 8008372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fbe1 	bl	8008b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800839e:	2302      	movs	r3, #2
 80083a0:	e0ae      	b.n	8008500 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b0c      	cmp	r3, #12
 80083ae:	f200 809f 	bhi.w	80084f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	080083ed 	.word	0x080083ed
 80083bc:	080084f1 	.word	0x080084f1
 80083c0:	080084f1 	.word	0x080084f1
 80083c4:	080084f1 	.word	0x080084f1
 80083c8:	0800842d 	.word	0x0800842d
 80083cc:	080084f1 	.word	0x080084f1
 80083d0:	080084f1 	.word	0x080084f1
 80083d4:	080084f1 	.word	0x080084f1
 80083d8:	0800846f 	.word	0x0800846f
 80083dc:	080084f1 	.word	0x080084f1
 80083e0:	080084f1 	.word	0x080084f1
 80083e4:	080084f1 	.word	0x080084f1
 80083e8:	080084af 	.word	0x080084af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f950 	bl	8008698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0208 	orr.w	r2, r2, #8
 8008406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0204 	bic.w	r2, r2, #4
 8008416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6999      	ldr	r1, [r3, #24]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	691a      	ldr	r2, [r3, #16]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	619a      	str	r2, [r3, #24]
      break;
 800842a:	e064      	b.n	80084f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f9a0 	bl	8008778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6999      	ldr	r1, [r3, #24]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	021a      	lsls	r2, r3, #8
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	619a      	str	r2, [r3, #24]
      break;
 800846c:	e043      	b.n	80084f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f9f5 	bl	8008864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0208 	orr.w	r2, r2, #8
 8008488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0204 	bic.w	r2, r2, #4
 8008498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69d9      	ldr	r1, [r3, #28]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	61da      	str	r2, [r3, #28]
      break;
 80084ac:	e023      	b.n	80084f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fa49 	bl	800894c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69d9      	ldr	r1, [r3, #28]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	021a      	lsls	r2, r3, #8
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	61da      	str	r2, [r3, #28]
      break;
 80084ee:	e002      	b.n	80084f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	75fb      	strb	r3, [r7, #23]
      break;
 80084f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a40      	ldr	r2, [pc, #256]	; (800866c <TIM_Base_SetConfig+0x114>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d013      	beq.n	8008598 <TIM_Base_SetConfig+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008576:	d00f      	beq.n	8008598 <TIM_Base_SetConfig+0x40>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a3d      	ldr	r2, [pc, #244]	; (8008670 <TIM_Base_SetConfig+0x118>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00b      	beq.n	8008598 <TIM_Base_SetConfig+0x40>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a3c      	ldr	r2, [pc, #240]	; (8008674 <TIM_Base_SetConfig+0x11c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d007      	beq.n	8008598 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a3b      	ldr	r2, [pc, #236]	; (8008678 <TIM_Base_SetConfig+0x120>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d003      	beq.n	8008598 <TIM_Base_SetConfig+0x40>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a3a      	ldr	r2, [pc, #232]	; (800867c <TIM_Base_SetConfig+0x124>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d108      	bne.n	80085aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a2f      	ldr	r2, [pc, #188]	; (800866c <TIM_Base_SetConfig+0x114>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d02b      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b8:	d027      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a2c      	ldr	r2, [pc, #176]	; (8008670 <TIM_Base_SetConfig+0x118>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d023      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a2b      	ldr	r2, [pc, #172]	; (8008674 <TIM_Base_SetConfig+0x11c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d01f      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a2a      	ldr	r2, [pc, #168]	; (8008678 <TIM_Base_SetConfig+0x120>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d01b      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a29      	ldr	r2, [pc, #164]	; (800867c <TIM_Base_SetConfig+0x124>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d017      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a28      	ldr	r2, [pc, #160]	; (8008680 <TIM_Base_SetConfig+0x128>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a27      	ldr	r2, [pc, #156]	; (8008684 <TIM_Base_SetConfig+0x12c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00f      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a26      	ldr	r2, [pc, #152]	; (8008688 <TIM_Base_SetConfig+0x130>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00b      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a25      	ldr	r2, [pc, #148]	; (800868c <TIM_Base_SetConfig+0x134>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d007      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a24      	ldr	r2, [pc, #144]	; (8008690 <TIM_Base_SetConfig+0x138>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d003      	beq.n	800860a <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a23      	ldr	r2, [pc, #140]	; (8008694 <TIM_Base_SetConfig+0x13c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d108      	bne.n	800861c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a0a      	ldr	r2, [pc, #40]	; (800866c <TIM_Base_SetConfig+0x114>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d003      	beq.n	8008650 <TIM_Base_SetConfig+0xf8>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a0c      	ldr	r2, [pc, #48]	; (800867c <TIM_Base_SetConfig+0x124>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d103      	bne.n	8008658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	615a      	str	r2, [r3, #20]
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	40010000 	.word	0x40010000
 8008670:	40000400 	.word	0x40000400
 8008674:	40000800 	.word	0x40000800
 8008678:	40000c00 	.word	0x40000c00
 800867c:	40010400 	.word	0x40010400
 8008680:	40014000 	.word	0x40014000
 8008684:	40014400 	.word	0x40014400
 8008688:	40014800 	.word	0x40014800
 800868c:	40001800 	.word	0x40001800
 8008690:	40001c00 	.word	0x40001c00
 8008694:	40002000 	.word	0x40002000

08008698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	f023 0201 	bic.w	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 0302 	bic.w	r3, r3, #2
 80086e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a20      	ldr	r2, [pc, #128]	; (8008770 <TIM_OC1_SetConfig+0xd8>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d003      	beq.n	80086fc <TIM_OC1_SetConfig+0x64>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a1f      	ldr	r2, [pc, #124]	; (8008774 <TIM_OC1_SetConfig+0xdc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d10c      	bne.n	8008716 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f023 0308 	bic.w	r3, r3, #8
 8008702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f023 0304 	bic.w	r3, r3, #4
 8008714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a15      	ldr	r2, [pc, #84]	; (8008770 <TIM_OC1_SetConfig+0xd8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d003      	beq.n	8008726 <TIM_OC1_SetConfig+0x8e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a14      	ldr	r2, [pc, #80]	; (8008774 <TIM_OC1_SetConfig+0xdc>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d111      	bne.n	800874a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800872c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	621a      	str	r2, [r3, #32]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	40010000 	.word	0x40010000
 8008774:	40010400 	.word	0x40010400

08008778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f023 0210 	bic.w	r2, r3, #16
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	021b      	lsls	r3, r3, #8
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f023 0320 	bic.w	r3, r3, #32
 80087c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a22      	ldr	r2, [pc, #136]	; (800885c <TIM_OC2_SetConfig+0xe4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d003      	beq.n	80087e0 <TIM_OC2_SetConfig+0x68>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a21      	ldr	r2, [pc, #132]	; (8008860 <TIM_OC2_SetConfig+0xe8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d10d      	bne.n	80087fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a17      	ldr	r2, [pc, #92]	; (800885c <TIM_OC2_SetConfig+0xe4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d003      	beq.n	800880c <TIM_OC2_SetConfig+0x94>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a16      	ldr	r2, [pc, #88]	; (8008860 <TIM_OC2_SetConfig+0xe8>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d113      	bne.n	8008834 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800881a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	621a      	str	r2, [r3, #32]
}
 800884e:	bf00      	nop
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	40010000 	.word	0x40010000
 8008860:	40010400 	.word	0x40010400

08008864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	021b      	lsls	r3, r3, #8
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a21      	ldr	r2, [pc, #132]	; (8008944 <TIM_OC3_SetConfig+0xe0>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d003      	beq.n	80088ca <TIM_OC3_SetConfig+0x66>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a20      	ldr	r2, [pc, #128]	; (8008948 <TIM_OC3_SetConfig+0xe4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d10d      	bne.n	80088e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	021b      	lsls	r3, r3, #8
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a16      	ldr	r2, [pc, #88]	; (8008944 <TIM_OC3_SetConfig+0xe0>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d003      	beq.n	80088f6 <TIM_OC3_SetConfig+0x92>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a15      	ldr	r2, [pc, #84]	; (8008948 <TIM_OC3_SetConfig+0xe4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d113      	bne.n	800891e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	621a      	str	r2, [r3, #32]
}
 8008938:	bf00      	nop
 800893a:	371c      	adds	r7, #28
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	40010000 	.word	0x40010000
 8008948:	40010400 	.word	0x40010400

0800894c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800897a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	031b      	lsls	r3, r3, #12
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a12      	ldr	r2, [pc, #72]	; (80089f0 <TIM_OC4_SetConfig+0xa4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_OC4_SetConfig+0x68>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a11      	ldr	r2, [pc, #68]	; (80089f4 <TIM_OC4_SetConfig+0xa8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d109      	bne.n	80089c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	019b      	lsls	r3, r3, #6
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	621a      	str	r2, [r3, #32]
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	40010000 	.word	0x40010000
 80089f4:	40010400 	.word	0x40010400

080089f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f003 031f 	and.w	r3, r3, #31
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	401a      	ands	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 031f 	and.w	r3, r3, #31
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a30:	431a      	orrs	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e05a      	b.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a21      	ldr	r2, [pc, #132]	; (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d022      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa8:	d01d      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d018      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1b      	ldr	r2, [pc, #108]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d013      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a18      	ldr	r2, [pc, #96]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d009      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d004      	beq.n	8008ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d10c      	bne.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40010000 	.word	0x40010000
 8008b24:	40000400 	.word	0x40000400
 8008b28:	40000800 	.word	0x40000800
 8008b2c:	40000c00 	.word	0x40000c00
 8008b30:	40010400 	.word	0x40010400
 8008b34:	40014000 	.word	0x40014000
 8008b38:	40001800 	.word	0x40001800

08008b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e03f      	b.n	8008bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fa fd00 	bl	8003590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2224      	movs	r2, #36	; 0x24
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68da      	ldr	r2, [r3, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f929 	bl	8008e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	695a      	ldr	r2, [r3, #20]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b08a      	sub	sp, #40	; 0x28
 8008c02:	af02      	add	r7, sp, #8
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	603b      	str	r3, [r7, #0]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d17c      	bne.n	8008d18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <HAL_UART_Transmit+0x2c>
 8008c24:	88fb      	ldrh	r3, [r7, #6]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e075      	b.n	8008d1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_UART_Transmit+0x3e>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e06e      	b.n	8008d1a <HAL_UART_Transmit+0x11c>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2221      	movs	r2, #33	; 0x21
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c52:	f7fb fcc5 	bl	80045e0 <HAL_GetTick>
 8008c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	88fa      	ldrh	r2, [r7, #6]
 8008c62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6c:	d108      	bne.n	8008c80 <HAL_UART_Transmit+0x82>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	61bb      	str	r3, [r7, #24]
 8008c7e:	e003      	b.n	8008c88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c90:	e02a      	b.n	8008ce8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2180      	movs	r1, #128	; 0x80
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f840 	bl	8008d22 <UART_WaitOnFlagUntilTimeout>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e036      	b.n	8008d1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10b      	bne.n	8008cca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	e007      	b.n	8008cda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	781a      	ldrb	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1cf      	bne.n	8008c92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2140      	movs	r1, #64	; 0x40
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f810 	bl	8008d22 <UART_WaitOnFlagUntilTimeout>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e006      	b.n	8008d1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e000      	b.n	8008d1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d18:	2302      	movs	r3, #2
  }
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b090      	sub	sp, #64	; 0x40
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	603b      	str	r3, [r7, #0]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d32:	e050      	b.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d04c      	beq.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d42:	f7fb fc4d 	bl	80045e0 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d241      	bcs.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	330c      	adds	r3, #12
 8008d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d72:	637a      	str	r2, [r7, #52]	; 0x34
 8008d74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e5      	bne.n	8008d52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3314      	adds	r3, #20
 8008d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	613b      	str	r3, [r7, #16]
   return(result);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f023 0301 	bic.w	r3, r3, #1
 8008d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008da6:	623a      	str	r2, [r7, #32]
 8008da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	69f9      	ldr	r1, [r7, #28]
 8008dac:	6a3a      	ldr	r2, [r7, #32]
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e5      	bne.n	8008d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e00f      	b.n	8008df6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	4013      	ands	r3, r2
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	bf0c      	ite	eq
 8008de6:	2301      	moveq	r3, #1
 8008de8:	2300      	movne	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d09f      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3740      	adds	r7, #64	; 0x40
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	b09f      	sub	sp, #124	; 0x7c
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e16:	68d9      	ldr	r1, [r3, #12]
 8008e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	ea40 0301 	orr.w	r3, r0, r1
 8008e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	431a      	orrs	r2, r3
 8008e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e44:	f021 010c 	bic.w	r1, r1, #12
 8008e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5e:	6999      	ldr	r1, [r3, #24]
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	ea40 0301 	orr.w	r3, r0, r1
 8008e68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	4bc5      	ldr	r3, [pc, #788]	; (8009184 <UART_SetConfig+0x384>)
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d004      	beq.n	8008e7e <UART_SetConfig+0x7e>
 8008e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4bc3      	ldr	r3, [pc, #780]	; (8009188 <UART_SetConfig+0x388>)
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d103      	bne.n	8008e86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e7e:	f7fd ff7b 	bl	8006d78 <HAL_RCC_GetPCLK2Freq>
 8008e82:	6778      	str	r0, [r7, #116]	; 0x74
 8008e84:	e002      	b.n	8008e8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e86:	f7fd ff63 	bl	8006d50 <HAL_RCC_GetPCLK1Freq>
 8008e8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e94:	f040 80b6 	bne.w	8009004 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e9a:	461c      	mov	r4, r3
 8008e9c:	f04f 0500 	mov.w	r5, #0
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	1891      	adds	r1, r2, r2
 8008ea6:	6439      	str	r1, [r7, #64]	; 0x40
 8008ea8:	415b      	adcs	r3, r3
 8008eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8008eac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008eb0:	1912      	adds	r2, r2, r4
 8008eb2:	eb45 0303 	adc.w	r3, r5, r3
 8008eb6:	f04f 0000 	mov.w	r0, #0
 8008eba:	f04f 0100 	mov.w	r1, #0
 8008ebe:	00d9      	lsls	r1, r3, #3
 8008ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ec4:	00d0      	lsls	r0, r2, #3
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	1911      	adds	r1, r2, r4
 8008ecc:	6639      	str	r1, [r7, #96]	; 0x60
 8008ece:	416b      	adcs	r3, r5
 8008ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f04f 0300 	mov.w	r3, #0
 8008edc:	1891      	adds	r1, r2, r2
 8008ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ee0:	415b      	adcs	r3, r3
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ee8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008eec:	f7f7 fecc 	bl	8000c88 <__aeabi_uldivmod>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4ba5      	ldr	r3, [pc, #660]	; (800918c <UART_SetConfig+0x38c>)
 8008ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8008efa:	095b      	lsrs	r3, r3, #5
 8008efc:	011e      	lsls	r6, r3, #4
 8008efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f00:	461c      	mov	r4, r3
 8008f02:	f04f 0500 	mov.w	r5, #0
 8008f06:	4622      	mov	r2, r4
 8008f08:	462b      	mov	r3, r5
 8008f0a:	1891      	adds	r1, r2, r2
 8008f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8008f0e:	415b      	adcs	r3, r3
 8008f10:	637b      	str	r3, [r7, #52]	; 0x34
 8008f12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f16:	1912      	adds	r2, r2, r4
 8008f18:	eb45 0303 	adc.w	r3, r5, r3
 8008f1c:	f04f 0000 	mov.w	r0, #0
 8008f20:	f04f 0100 	mov.w	r1, #0
 8008f24:	00d9      	lsls	r1, r3, #3
 8008f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f2a:	00d0      	lsls	r0, r2, #3
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	1911      	adds	r1, r2, r4
 8008f32:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f34:	416b      	adcs	r3, r5
 8008f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f04f 0300 	mov.w	r3, #0
 8008f42:	1891      	adds	r1, r2, r2
 8008f44:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f46:	415b      	adcs	r3, r3
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008f52:	f7f7 fe99 	bl	8000c88 <__aeabi_uldivmod>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4b8c      	ldr	r3, [pc, #560]	; (800918c <UART_SetConfig+0x38c>)
 8008f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f60:	095b      	lsrs	r3, r3, #5
 8008f62:	2164      	movs	r1, #100	; 0x64
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	3332      	adds	r3, #50	; 0x32
 8008f6e:	4a87      	ldr	r2, [pc, #540]	; (800918c <UART_SetConfig+0x38c>)
 8008f70:	fba2 2303 	umull	r2, r3, r2, r3
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f7c:	441e      	add	r6, r3
 8008f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f80:	4618      	mov	r0, r3
 8008f82:	f04f 0100 	mov.w	r1, #0
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	1894      	adds	r4, r2, r2
 8008f8c:	623c      	str	r4, [r7, #32]
 8008f8e:	415b      	adcs	r3, r3
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
 8008f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f96:	1812      	adds	r2, r2, r0
 8008f98:	eb41 0303 	adc.w	r3, r1, r3
 8008f9c:	f04f 0400 	mov.w	r4, #0
 8008fa0:	f04f 0500 	mov.w	r5, #0
 8008fa4:	00dd      	lsls	r5, r3, #3
 8008fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008faa:	00d4      	lsls	r4, r2, #3
 8008fac:	4622      	mov	r2, r4
 8008fae:	462b      	mov	r3, r5
 8008fb0:	1814      	adds	r4, r2, r0
 8008fb2:	653c      	str	r4, [r7, #80]	; 0x50
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8008fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	1891      	adds	r1, r2, r2
 8008fc4:	61b9      	str	r1, [r7, #24]
 8008fc6:	415b      	adcs	r3, r3
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008fd2:	f7f7 fe59 	bl	8000c88 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4b6c      	ldr	r3, [pc, #432]	; (800918c <UART_SetConfig+0x38c>)
 8008fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	2164      	movs	r1, #100	; 0x64
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	3332      	adds	r3, #50	; 0x32
 8008fee:	4a67      	ldr	r2, [pc, #412]	; (800918c <UART_SetConfig+0x38c>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f003 0207 	and.w	r2, r3, #7
 8008ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4432      	add	r2, r6
 8009000:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009002:	e0b9      	b.n	8009178 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009006:	461c      	mov	r4, r3
 8009008:	f04f 0500 	mov.w	r5, #0
 800900c:	4622      	mov	r2, r4
 800900e:	462b      	mov	r3, r5
 8009010:	1891      	adds	r1, r2, r2
 8009012:	6139      	str	r1, [r7, #16]
 8009014:	415b      	adcs	r3, r3
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800901c:	1912      	adds	r2, r2, r4
 800901e:	eb45 0303 	adc.w	r3, r5, r3
 8009022:	f04f 0000 	mov.w	r0, #0
 8009026:	f04f 0100 	mov.w	r1, #0
 800902a:	00d9      	lsls	r1, r3, #3
 800902c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009030:	00d0      	lsls	r0, r2, #3
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	eb12 0804 	adds.w	r8, r2, r4
 800903a:	eb43 0905 	adc.w	r9, r3, r5
 800903e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4618      	mov	r0, r3
 8009044:	f04f 0100 	mov.w	r1, #0
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	008b      	lsls	r3, r1, #2
 8009052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009056:	0082      	lsls	r2, r0, #2
 8009058:	4640      	mov	r0, r8
 800905a:	4649      	mov	r1, r9
 800905c:	f7f7 fe14 	bl	8000c88 <__aeabi_uldivmod>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4b49      	ldr	r3, [pc, #292]	; (800918c <UART_SetConfig+0x38c>)
 8009066:	fba3 2302 	umull	r2, r3, r3, r2
 800906a:	095b      	lsrs	r3, r3, #5
 800906c:	011e      	lsls	r6, r3, #4
 800906e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009070:	4618      	mov	r0, r3
 8009072:	f04f 0100 	mov.w	r1, #0
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	1894      	adds	r4, r2, r2
 800907c:	60bc      	str	r4, [r7, #8]
 800907e:	415b      	adcs	r3, r3
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009086:	1812      	adds	r2, r2, r0
 8009088:	eb41 0303 	adc.w	r3, r1, r3
 800908c:	f04f 0400 	mov.w	r4, #0
 8009090:	f04f 0500 	mov.w	r5, #0
 8009094:	00dd      	lsls	r5, r3, #3
 8009096:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800909a:	00d4      	lsls	r4, r2, #3
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	1814      	adds	r4, r2, r0
 80090a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80090a4:	414b      	adcs	r3, r1
 80090a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f04f 0100 	mov.w	r1, #0
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	008b      	lsls	r3, r1, #2
 80090bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090c0:	0082      	lsls	r2, r0, #2
 80090c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80090c6:	f7f7 fddf 	bl	8000c88 <__aeabi_uldivmod>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4b2f      	ldr	r3, [pc, #188]	; (800918c <UART_SetConfig+0x38c>)
 80090d0:	fba3 1302 	umull	r1, r3, r3, r2
 80090d4:	095b      	lsrs	r3, r3, #5
 80090d6:	2164      	movs	r1, #100	; 0x64
 80090d8:	fb01 f303 	mul.w	r3, r1, r3
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	3332      	adds	r3, #50	; 0x32
 80090e2:	4a2a      	ldr	r2, [pc, #168]	; (800918c <UART_SetConfig+0x38c>)
 80090e4:	fba2 2303 	umull	r2, r3, r2, r3
 80090e8:	095b      	lsrs	r3, r3, #5
 80090ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090ee:	441e      	add	r6, r3
 80090f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090f2:	4618      	mov	r0, r3
 80090f4:	f04f 0100 	mov.w	r1, #0
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	1894      	adds	r4, r2, r2
 80090fe:	603c      	str	r4, [r7, #0]
 8009100:	415b      	adcs	r3, r3
 8009102:	607b      	str	r3, [r7, #4]
 8009104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009108:	1812      	adds	r2, r2, r0
 800910a:	eb41 0303 	adc.w	r3, r1, r3
 800910e:	f04f 0400 	mov.w	r4, #0
 8009112:	f04f 0500 	mov.w	r5, #0
 8009116:	00dd      	lsls	r5, r3, #3
 8009118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800911c:	00d4      	lsls	r4, r2, #3
 800911e:	4622      	mov	r2, r4
 8009120:	462b      	mov	r3, r5
 8009122:	eb12 0a00 	adds.w	sl, r2, r0
 8009126:	eb43 0b01 	adc.w	fp, r3, r1
 800912a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	4618      	mov	r0, r3
 8009130:	f04f 0100 	mov.w	r1, #0
 8009134:	f04f 0200 	mov.w	r2, #0
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	008b      	lsls	r3, r1, #2
 800913e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009142:	0082      	lsls	r2, r0, #2
 8009144:	4650      	mov	r0, sl
 8009146:	4659      	mov	r1, fp
 8009148:	f7f7 fd9e 	bl	8000c88 <__aeabi_uldivmod>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4b0e      	ldr	r3, [pc, #56]	; (800918c <UART_SetConfig+0x38c>)
 8009152:	fba3 1302 	umull	r1, r3, r3, r2
 8009156:	095b      	lsrs	r3, r3, #5
 8009158:	2164      	movs	r1, #100	; 0x64
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	3332      	adds	r3, #50	; 0x32
 8009164:	4a09      	ldr	r2, [pc, #36]	; (800918c <UART_SetConfig+0x38c>)
 8009166:	fba2 2303 	umull	r2, r3, r2, r3
 800916a:	095b      	lsrs	r3, r3, #5
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4432      	add	r2, r6
 8009176:	609a      	str	r2, [r3, #8]
}
 8009178:	bf00      	nop
 800917a:	377c      	adds	r7, #124	; 0x7c
 800917c:	46bd      	mov	sp, r7
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	bf00      	nop
 8009184:	40011000 	.word	0x40011000
 8009188:	40011400 	.word	0x40011400
 800918c:	51eb851f 	.word	0x51eb851f

08009190 <__errno>:
 8009190:	4b01      	ldr	r3, [pc, #4]	; (8009198 <__errno+0x8>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	2000000c 	.word	0x2000000c

0800919c <__libc_init_array>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4d0d      	ldr	r5, [pc, #52]	; (80091d4 <__libc_init_array+0x38>)
 80091a0:	4c0d      	ldr	r4, [pc, #52]	; (80091d8 <__libc_init_array+0x3c>)
 80091a2:	1b64      	subs	r4, r4, r5
 80091a4:	10a4      	asrs	r4, r4, #2
 80091a6:	2600      	movs	r6, #0
 80091a8:	42a6      	cmp	r6, r4
 80091aa:	d109      	bne.n	80091c0 <__libc_init_array+0x24>
 80091ac:	4d0b      	ldr	r5, [pc, #44]	; (80091dc <__libc_init_array+0x40>)
 80091ae:	4c0c      	ldr	r4, [pc, #48]	; (80091e0 <__libc_init_array+0x44>)
 80091b0:	f004 fcd4 	bl	800db5c <_init>
 80091b4:	1b64      	subs	r4, r4, r5
 80091b6:	10a4      	asrs	r4, r4, #2
 80091b8:	2600      	movs	r6, #0
 80091ba:	42a6      	cmp	r6, r4
 80091bc:	d105      	bne.n	80091ca <__libc_init_array+0x2e>
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c4:	4798      	blx	r3
 80091c6:	3601      	adds	r6, #1
 80091c8:	e7ee      	b.n	80091a8 <__libc_init_array+0xc>
 80091ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ce:	4798      	blx	r3
 80091d0:	3601      	adds	r6, #1
 80091d2:	e7f2      	b.n	80091ba <__libc_init_array+0x1e>
 80091d4:	0800e7a4 	.word	0x0800e7a4
 80091d8:	0800e7a4 	.word	0x0800e7a4
 80091dc:	0800e7a4 	.word	0x0800e7a4
 80091e0:	0800e7a8 	.word	0x0800e7a8

080091e4 <memcpy>:
 80091e4:	440a      	add	r2, r1
 80091e6:	4291      	cmp	r1, r2
 80091e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091ec:	d100      	bne.n	80091f0 <memcpy+0xc>
 80091ee:	4770      	bx	lr
 80091f0:	b510      	push	{r4, lr}
 80091f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091fa:	4291      	cmp	r1, r2
 80091fc:	d1f9      	bne.n	80091f2 <memcpy+0xe>
 80091fe:	bd10      	pop	{r4, pc}

08009200 <memset>:
 8009200:	4402      	add	r2, r0
 8009202:	4603      	mov	r3, r0
 8009204:	4293      	cmp	r3, r2
 8009206:	d100      	bne.n	800920a <memset+0xa>
 8009208:	4770      	bx	lr
 800920a:	f803 1b01 	strb.w	r1, [r3], #1
 800920e:	e7f9      	b.n	8009204 <memset+0x4>

08009210 <__cvt>:
 8009210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009214:	ec55 4b10 	vmov	r4, r5, d0
 8009218:	2d00      	cmp	r5, #0
 800921a:	460e      	mov	r6, r1
 800921c:	4619      	mov	r1, r3
 800921e:	462b      	mov	r3, r5
 8009220:	bfbb      	ittet	lt
 8009222:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009226:	461d      	movlt	r5, r3
 8009228:	2300      	movge	r3, #0
 800922a:	232d      	movlt	r3, #45	; 0x2d
 800922c:	700b      	strb	r3, [r1, #0]
 800922e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009230:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009234:	4691      	mov	r9, r2
 8009236:	f023 0820 	bic.w	r8, r3, #32
 800923a:	bfbc      	itt	lt
 800923c:	4622      	movlt	r2, r4
 800923e:	4614      	movlt	r4, r2
 8009240:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009244:	d005      	beq.n	8009252 <__cvt+0x42>
 8009246:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800924a:	d100      	bne.n	800924e <__cvt+0x3e>
 800924c:	3601      	adds	r6, #1
 800924e:	2102      	movs	r1, #2
 8009250:	e000      	b.n	8009254 <__cvt+0x44>
 8009252:	2103      	movs	r1, #3
 8009254:	ab03      	add	r3, sp, #12
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	ab02      	add	r3, sp, #8
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	ec45 4b10 	vmov	d0, r4, r5
 8009260:	4653      	mov	r3, sl
 8009262:	4632      	mov	r2, r6
 8009264:	f001 ff04 	bl	800b070 <_dtoa_r>
 8009268:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800926c:	4607      	mov	r7, r0
 800926e:	d102      	bne.n	8009276 <__cvt+0x66>
 8009270:	f019 0f01 	tst.w	r9, #1
 8009274:	d022      	beq.n	80092bc <__cvt+0xac>
 8009276:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800927a:	eb07 0906 	add.w	r9, r7, r6
 800927e:	d110      	bne.n	80092a2 <__cvt+0x92>
 8009280:	783b      	ldrb	r3, [r7, #0]
 8009282:	2b30      	cmp	r3, #48	; 0x30
 8009284:	d10a      	bne.n	800929c <__cvt+0x8c>
 8009286:	2200      	movs	r2, #0
 8009288:	2300      	movs	r3, #0
 800928a:	4620      	mov	r0, r4
 800928c:	4629      	mov	r1, r5
 800928e:	f7f7 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009292:	b918      	cbnz	r0, 800929c <__cvt+0x8c>
 8009294:	f1c6 0601 	rsb	r6, r6, #1
 8009298:	f8ca 6000 	str.w	r6, [sl]
 800929c:	f8da 3000 	ldr.w	r3, [sl]
 80092a0:	4499      	add	r9, r3
 80092a2:	2200      	movs	r2, #0
 80092a4:	2300      	movs	r3, #0
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f7 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ae:	b108      	cbz	r0, 80092b4 <__cvt+0xa4>
 80092b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80092b4:	2230      	movs	r2, #48	; 0x30
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	454b      	cmp	r3, r9
 80092ba:	d307      	bcc.n	80092cc <__cvt+0xbc>
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092c0:	1bdb      	subs	r3, r3, r7
 80092c2:	4638      	mov	r0, r7
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	b004      	add	sp, #16
 80092c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092cc:	1c59      	adds	r1, r3, #1
 80092ce:	9103      	str	r1, [sp, #12]
 80092d0:	701a      	strb	r2, [r3, #0]
 80092d2:	e7f0      	b.n	80092b6 <__cvt+0xa6>

080092d4 <__exponent>:
 80092d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092d6:	4603      	mov	r3, r0
 80092d8:	2900      	cmp	r1, #0
 80092da:	bfb8      	it	lt
 80092dc:	4249      	neglt	r1, r1
 80092de:	f803 2b02 	strb.w	r2, [r3], #2
 80092e2:	bfb4      	ite	lt
 80092e4:	222d      	movlt	r2, #45	; 0x2d
 80092e6:	222b      	movge	r2, #43	; 0x2b
 80092e8:	2909      	cmp	r1, #9
 80092ea:	7042      	strb	r2, [r0, #1]
 80092ec:	dd2a      	ble.n	8009344 <__exponent+0x70>
 80092ee:	f10d 0407 	add.w	r4, sp, #7
 80092f2:	46a4      	mov	ip, r4
 80092f4:	270a      	movs	r7, #10
 80092f6:	46a6      	mov	lr, r4
 80092f8:	460a      	mov	r2, r1
 80092fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80092fe:	fb07 1516 	mls	r5, r7, r6, r1
 8009302:	3530      	adds	r5, #48	; 0x30
 8009304:	2a63      	cmp	r2, #99	; 0x63
 8009306:	f104 34ff 	add.w	r4, r4, #4294967295
 800930a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800930e:	4631      	mov	r1, r6
 8009310:	dcf1      	bgt.n	80092f6 <__exponent+0x22>
 8009312:	3130      	adds	r1, #48	; 0x30
 8009314:	f1ae 0502 	sub.w	r5, lr, #2
 8009318:	f804 1c01 	strb.w	r1, [r4, #-1]
 800931c:	1c44      	adds	r4, r0, #1
 800931e:	4629      	mov	r1, r5
 8009320:	4561      	cmp	r1, ip
 8009322:	d30a      	bcc.n	800933a <__exponent+0x66>
 8009324:	f10d 0209 	add.w	r2, sp, #9
 8009328:	eba2 020e 	sub.w	r2, r2, lr
 800932c:	4565      	cmp	r5, ip
 800932e:	bf88      	it	hi
 8009330:	2200      	movhi	r2, #0
 8009332:	4413      	add	r3, r2
 8009334:	1a18      	subs	r0, r3, r0
 8009336:	b003      	add	sp, #12
 8009338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800933a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800933e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009342:	e7ed      	b.n	8009320 <__exponent+0x4c>
 8009344:	2330      	movs	r3, #48	; 0x30
 8009346:	3130      	adds	r1, #48	; 0x30
 8009348:	7083      	strb	r3, [r0, #2]
 800934a:	70c1      	strb	r1, [r0, #3]
 800934c:	1d03      	adds	r3, r0, #4
 800934e:	e7f1      	b.n	8009334 <__exponent+0x60>

08009350 <_printf_float>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	ed2d 8b02 	vpush	{d8}
 8009358:	b08d      	sub	sp, #52	; 0x34
 800935a:	460c      	mov	r4, r1
 800935c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009360:	4616      	mov	r6, r2
 8009362:	461f      	mov	r7, r3
 8009364:	4605      	mov	r5, r0
 8009366:	f003 f995 	bl	800c694 <_localeconv_r>
 800936a:	f8d0 a000 	ldr.w	sl, [r0]
 800936e:	4650      	mov	r0, sl
 8009370:	f7f6 ff2e 	bl	80001d0 <strlen>
 8009374:	2300      	movs	r3, #0
 8009376:	930a      	str	r3, [sp, #40]	; 0x28
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	9305      	str	r3, [sp, #20]
 800937c:	f8d8 3000 	ldr.w	r3, [r8]
 8009380:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009384:	3307      	adds	r3, #7
 8009386:	f023 0307 	bic.w	r3, r3, #7
 800938a:	f103 0208 	add.w	r2, r3, #8
 800938e:	f8c8 2000 	str.w	r2, [r8]
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800939a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800939e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093a2:	9307      	str	r3, [sp, #28]
 80093a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80093a8:	ee08 0a10 	vmov	s16, r0
 80093ac:	4b9f      	ldr	r3, [pc, #636]	; (800962c <_printf_float+0x2dc>)
 80093ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295
 80093b6:	f7f7 fbb9 	bl	8000b2c <__aeabi_dcmpun>
 80093ba:	bb88      	cbnz	r0, 8009420 <_printf_float+0xd0>
 80093bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093c0:	4b9a      	ldr	r3, [pc, #616]	; (800962c <_printf_float+0x2dc>)
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	f7f7 fb93 	bl	8000af0 <__aeabi_dcmple>
 80093ca:	bb48      	cbnz	r0, 8009420 <_printf_float+0xd0>
 80093cc:	2200      	movs	r2, #0
 80093ce:	2300      	movs	r3, #0
 80093d0:	4640      	mov	r0, r8
 80093d2:	4649      	mov	r1, r9
 80093d4:	f7f7 fb82 	bl	8000adc <__aeabi_dcmplt>
 80093d8:	b110      	cbz	r0, 80093e0 <_printf_float+0x90>
 80093da:	232d      	movs	r3, #45	; 0x2d
 80093dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e0:	4b93      	ldr	r3, [pc, #588]	; (8009630 <_printf_float+0x2e0>)
 80093e2:	4894      	ldr	r0, [pc, #592]	; (8009634 <_printf_float+0x2e4>)
 80093e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093e8:	bf94      	ite	ls
 80093ea:	4698      	movls	r8, r3
 80093ec:	4680      	movhi	r8, r0
 80093ee:	2303      	movs	r3, #3
 80093f0:	6123      	str	r3, [r4, #16]
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	f023 0204 	bic.w	r2, r3, #4
 80093f8:	6022      	str	r2, [r4, #0]
 80093fa:	f04f 0900 	mov.w	r9, #0
 80093fe:	9700      	str	r7, [sp, #0]
 8009400:	4633      	mov	r3, r6
 8009402:	aa0b      	add	r2, sp, #44	; 0x2c
 8009404:	4621      	mov	r1, r4
 8009406:	4628      	mov	r0, r5
 8009408:	f000 f9d8 	bl	80097bc <_printf_common>
 800940c:	3001      	adds	r0, #1
 800940e:	f040 8090 	bne.w	8009532 <_printf_float+0x1e2>
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	b00d      	add	sp, #52	; 0x34
 8009418:	ecbd 8b02 	vpop	{d8}
 800941c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 fb80 	bl	8000b2c <__aeabi_dcmpun>
 800942c:	b140      	cbz	r0, 8009440 <_printf_float+0xf0>
 800942e:	464b      	mov	r3, r9
 8009430:	2b00      	cmp	r3, #0
 8009432:	bfbc      	itt	lt
 8009434:	232d      	movlt	r3, #45	; 0x2d
 8009436:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800943a:	487f      	ldr	r0, [pc, #508]	; (8009638 <_printf_float+0x2e8>)
 800943c:	4b7f      	ldr	r3, [pc, #508]	; (800963c <_printf_float+0x2ec>)
 800943e:	e7d1      	b.n	80093e4 <_printf_float+0x94>
 8009440:	6863      	ldr	r3, [r4, #4]
 8009442:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009446:	9206      	str	r2, [sp, #24]
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	d13f      	bne.n	80094cc <_printf_float+0x17c>
 800944c:	2306      	movs	r3, #6
 800944e:	6063      	str	r3, [r4, #4]
 8009450:	9b05      	ldr	r3, [sp, #20]
 8009452:	6861      	ldr	r1, [r4, #4]
 8009454:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009458:	2300      	movs	r3, #0
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	ab0a      	add	r3, sp, #40	; 0x28
 800945e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009462:	ab09      	add	r3, sp, #36	; 0x24
 8009464:	ec49 8b10 	vmov	d0, r8, r9
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	6022      	str	r2, [r4, #0]
 800946c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009470:	4628      	mov	r0, r5
 8009472:	f7ff fecd 	bl	8009210 <__cvt>
 8009476:	9b06      	ldr	r3, [sp, #24]
 8009478:	9909      	ldr	r1, [sp, #36]	; 0x24
 800947a:	2b47      	cmp	r3, #71	; 0x47
 800947c:	4680      	mov	r8, r0
 800947e:	d108      	bne.n	8009492 <_printf_float+0x142>
 8009480:	1cc8      	adds	r0, r1, #3
 8009482:	db02      	blt.n	800948a <_printf_float+0x13a>
 8009484:	6863      	ldr	r3, [r4, #4]
 8009486:	4299      	cmp	r1, r3
 8009488:	dd41      	ble.n	800950e <_printf_float+0x1be>
 800948a:	f1ab 0b02 	sub.w	fp, fp, #2
 800948e:	fa5f fb8b 	uxtb.w	fp, fp
 8009492:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009496:	d820      	bhi.n	80094da <_printf_float+0x18a>
 8009498:	3901      	subs	r1, #1
 800949a:	465a      	mov	r2, fp
 800949c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094a0:	9109      	str	r1, [sp, #36]	; 0x24
 80094a2:	f7ff ff17 	bl	80092d4 <__exponent>
 80094a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094a8:	1813      	adds	r3, r2, r0
 80094aa:	2a01      	cmp	r2, #1
 80094ac:	4681      	mov	r9, r0
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	dc02      	bgt.n	80094b8 <_printf_float+0x168>
 80094b2:	6822      	ldr	r2, [r4, #0]
 80094b4:	07d2      	lsls	r2, r2, #31
 80094b6:	d501      	bpl.n	80094bc <_printf_float+0x16c>
 80094b8:	3301      	adds	r3, #1
 80094ba:	6123      	str	r3, [r4, #16]
 80094bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d09c      	beq.n	80093fe <_printf_float+0xae>
 80094c4:	232d      	movs	r3, #45	; 0x2d
 80094c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ca:	e798      	b.n	80093fe <_printf_float+0xae>
 80094cc:	9a06      	ldr	r2, [sp, #24]
 80094ce:	2a47      	cmp	r2, #71	; 0x47
 80094d0:	d1be      	bne.n	8009450 <_printf_float+0x100>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1bc      	bne.n	8009450 <_printf_float+0x100>
 80094d6:	2301      	movs	r3, #1
 80094d8:	e7b9      	b.n	800944e <_printf_float+0xfe>
 80094da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094de:	d118      	bne.n	8009512 <_printf_float+0x1c2>
 80094e0:	2900      	cmp	r1, #0
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	dd0b      	ble.n	80094fe <_printf_float+0x1ae>
 80094e6:	6121      	str	r1, [r4, #16]
 80094e8:	b913      	cbnz	r3, 80094f0 <_printf_float+0x1a0>
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	07d0      	lsls	r0, r2, #31
 80094ee:	d502      	bpl.n	80094f6 <_printf_float+0x1a6>
 80094f0:	3301      	adds	r3, #1
 80094f2:	440b      	add	r3, r1
 80094f4:	6123      	str	r3, [r4, #16]
 80094f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80094f8:	f04f 0900 	mov.w	r9, #0
 80094fc:	e7de      	b.n	80094bc <_printf_float+0x16c>
 80094fe:	b913      	cbnz	r3, 8009506 <_printf_float+0x1b6>
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	07d2      	lsls	r2, r2, #31
 8009504:	d501      	bpl.n	800950a <_printf_float+0x1ba>
 8009506:	3302      	adds	r3, #2
 8009508:	e7f4      	b.n	80094f4 <_printf_float+0x1a4>
 800950a:	2301      	movs	r3, #1
 800950c:	e7f2      	b.n	80094f4 <_printf_float+0x1a4>
 800950e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009514:	4299      	cmp	r1, r3
 8009516:	db05      	blt.n	8009524 <_printf_float+0x1d4>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	6121      	str	r1, [r4, #16]
 800951c:	07d8      	lsls	r0, r3, #31
 800951e:	d5ea      	bpl.n	80094f6 <_printf_float+0x1a6>
 8009520:	1c4b      	adds	r3, r1, #1
 8009522:	e7e7      	b.n	80094f4 <_printf_float+0x1a4>
 8009524:	2900      	cmp	r1, #0
 8009526:	bfd4      	ite	le
 8009528:	f1c1 0202 	rsble	r2, r1, #2
 800952c:	2201      	movgt	r2, #1
 800952e:	4413      	add	r3, r2
 8009530:	e7e0      	b.n	80094f4 <_printf_float+0x1a4>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	055a      	lsls	r2, r3, #21
 8009536:	d407      	bmi.n	8009548 <_printf_float+0x1f8>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	4642      	mov	r2, r8
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	d12c      	bne.n	80095a0 <_printf_float+0x250>
 8009546:	e764      	b.n	8009412 <_printf_float+0xc2>
 8009548:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800954c:	f240 80e0 	bls.w	8009710 <_printf_float+0x3c0>
 8009550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009554:	2200      	movs	r2, #0
 8009556:	2300      	movs	r3, #0
 8009558:	f7f7 fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800955c:	2800      	cmp	r0, #0
 800955e:	d034      	beq.n	80095ca <_printf_float+0x27a>
 8009560:	4a37      	ldr	r2, [pc, #220]	; (8009640 <_printf_float+0x2f0>)
 8009562:	2301      	movs	r3, #1
 8009564:	4631      	mov	r1, r6
 8009566:	4628      	mov	r0, r5
 8009568:	47b8      	blx	r7
 800956a:	3001      	adds	r0, #1
 800956c:	f43f af51 	beq.w	8009412 <_printf_float+0xc2>
 8009570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009574:	429a      	cmp	r2, r3
 8009576:	db02      	blt.n	800957e <_printf_float+0x22e>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	07d8      	lsls	r0, r3, #31
 800957c:	d510      	bpl.n	80095a0 <_printf_float+0x250>
 800957e:	ee18 3a10 	vmov	r3, s16
 8009582:	4652      	mov	r2, sl
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	f43f af41 	beq.w	8009412 <_printf_float+0xc2>
 8009590:	f04f 0800 	mov.w	r8, #0
 8009594:	f104 091a 	add.w	r9, r4, #26
 8009598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959a:	3b01      	subs	r3, #1
 800959c:	4543      	cmp	r3, r8
 800959e:	dc09      	bgt.n	80095b4 <_printf_float+0x264>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	079b      	lsls	r3, r3, #30
 80095a4:	f100 8105 	bmi.w	80097b2 <_printf_float+0x462>
 80095a8:	68e0      	ldr	r0, [r4, #12]
 80095aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ac:	4298      	cmp	r0, r3
 80095ae:	bfb8      	it	lt
 80095b0:	4618      	movlt	r0, r3
 80095b2:	e730      	b.n	8009416 <_printf_float+0xc6>
 80095b4:	2301      	movs	r3, #1
 80095b6:	464a      	mov	r2, r9
 80095b8:	4631      	mov	r1, r6
 80095ba:	4628      	mov	r0, r5
 80095bc:	47b8      	blx	r7
 80095be:	3001      	adds	r0, #1
 80095c0:	f43f af27 	beq.w	8009412 <_printf_float+0xc2>
 80095c4:	f108 0801 	add.w	r8, r8, #1
 80095c8:	e7e6      	b.n	8009598 <_printf_float+0x248>
 80095ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dc39      	bgt.n	8009644 <_printf_float+0x2f4>
 80095d0:	4a1b      	ldr	r2, [pc, #108]	; (8009640 <_printf_float+0x2f0>)
 80095d2:	2301      	movs	r3, #1
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b8      	blx	r7
 80095da:	3001      	adds	r0, #1
 80095dc:	f43f af19 	beq.w	8009412 <_printf_float+0xc2>
 80095e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095e4:	4313      	orrs	r3, r2
 80095e6:	d102      	bne.n	80095ee <_printf_float+0x29e>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	07d9      	lsls	r1, r3, #31
 80095ec:	d5d8      	bpl.n	80095a0 <_printf_float+0x250>
 80095ee:	ee18 3a10 	vmov	r3, s16
 80095f2:	4652      	mov	r2, sl
 80095f4:	4631      	mov	r1, r6
 80095f6:	4628      	mov	r0, r5
 80095f8:	47b8      	blx	r7
 80095fa:	3001      	adds	r0, #1
 80095fc:	f43f af09 	beq.w	8009412 <_printf_float+0xc2>
 8009600:	f04f 0900 	mov.w	r9, #0
 8009604:	f104 0a1a 	add.w	sl, r4, #26
 8009608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960a:	425b      	negs	r3, r3
 800960c:	454b      	cmp	r3, r9
 800960e:	dc01      	bgt.n	8009614 <_printf_float+0x2c4>
 8009610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009612:	e792      	b.n	800953a <_printf_float+0x1ea>
 8009614:	2301      	movs	r3, #1
 8009616:	4652      	mov	r2, sl
 8009618:	4631      	mov	r1, r6
 800961a:	4628      	mov	r0, r5
 800961c:	47b8      	blx	r7
 800961e:	3001      	adds	r0, #1
 8009620:	f43f aef7 	beq.w	8009412 <_printf_float+0xc2>
 8009624:	f109 0901 	add.w	r9, r9, #1
 8009628:	e7ee      	b.n	8009608 <_printf_float+0x2b8>
 800962a:	bf00      	nop
 800962c:	7fefffff 	.word	0x7fefffff
 8009630:	0800e2ec 	.word	0x0800e2ec
 8009634:	0800e2f0 	.word	0x0800e2f0
 8009638:	0800e2f8 	.word	0x0800e2f8
 800963c:	0800e2f4 	.word	0x0800e2f4
 8009640:	0800e2fc 	.word	0x0800e2fc
 8009644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009648:	429a      	cmp	r2, r3
 800964a:	bfa8      	it	ge
 800964c:	461a      	movge	r2, r3
 800964e:	2a00      	cmp	r2, #0
 8009650:	4691      	mov	r9, r2
 8009652:	dc37      	bgt.n	80096c4 <_printf_float+0x374>
 8009654:	f04f 0b00 	mov.w	fp, #0
 8009658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800965c:	f104 021a 	add.w	r2, r4, #26
 8009660:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	eba3 0309 	sub.w	r3, r3, r9
 8009668:	455b      	cmp	r3, fp
 800966a:	dc33      	bgt.n	80096d4 <_printf_float+0x384>
 800966c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009670:	429a      	cmp	r2, r3
 8009672:	db3b      	blt.n	80096ec <_printf_float+0x39c>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	07da      	lsls	r2, r3, #31
 8009678:	d438      	bmi.n	80096ec <_printf_float+0x39c>
 800967a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800967c:	9b05      	ldr	r3, [sp, #20]
 800967e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	eba2 0901 	sub.w	r9, r2, r1
 8009686:	4599      	cmp	r9, r3
 8009688:	bfa8      	it	ge
 800968a:	4699      	movge	r9, r3
 800968c:	f1b9 0f00 	cmp.w	r9, #0
 8009690:	dc35      	bgt.n	80096fe <_printf_float+0x3ae>
 8009692:	f04f 0800 	mov.w	r8, #0
 8009696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800969a:	f104 0a1a 	add.w	sl, r4, #26
 800969e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096a2:	1a9b      	subs	r3, r3, r2
 80096a4:	eba3 0309 	sub.w	r3, r3, r9
 80096a8:	4543      	cmp	r3, r8
 80096aa:	f77f af79 	ble.w	80095a0 <_printf_float+0x250>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4652      	mov	r2, sl
 80096b2:	4631      	mov	r1, r6
 80096b4:	4628      	mov	r0, r5
 80096b6:	47b8      	blx	r7
 80096b8:	3001      	adds	r0, #1
 80096ba:	f43f aeaa 	beq.w	8009412 <_printf_float+0xc2>
 80096be:	f108 0801 	add.w	r8, r8, #1
 80096c2:	e7ec      	b.n	800969e <_printf_float+0x34e>
 80096c4:	4613      	mov	r3, r2
 80096c6:	4631      	mov	r1, r6
 80096c8:	4642      	mov	r2, r8
 80096ca:	4628      	mov	r0, r5
 80096cc:	47b8      	blx	r7
 80096ce:	3001      	adds	r0, #1
 80096d0:	d1c0      	bne.n	8009654 <_printf_float+0x304>
 80096d2:	e69e      	b.n	8009412 <_printf_float+0xc2>
 80096d4:	2301      	movs	r3, #1
 80096d6:	4631      	mov	r1, r6
 80096d8:	4628      	mov	r0, r5
 80096da:	9205      	str	r2, [sp, #20]
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	f43f ae97 	beq.w	8009412 <_printf_float+0xc2>
 80096e4:	9a05      	ldr	r2, [sp, #20]
 80096e6:	f10b 0b01 	add.w	fp, fp, #1
 80096ea:	e7b9      	b.n	8009660 <_printf_float+0x310>
 80096ec:	ee18 3a10 	vmov	r3, s16
 80096f0:	4652      	mov	r2, sl
 80096f2:	4631      	mov	r1, r6
 80096f4:	4628      	mov	r0, r5
 80096f6:	47b8      	blx	r7
 80096f8:	3001      	adds	r0, #1
 80096fa:	d1be      	bne.n	800967a <_printf_float+0x32a>
 80096fc:	e689      	b.n	8009412 <_printf_float+0xc2>
 80096fe:	9a05      	ldr	r2, [sp, #20]
 8009700:	464b      	mov	r3, r9
 8009702:	4442      	add	r2, r8
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	d1c1      	bne.n	8009692 <_printf_float+0x342>
 800970e:	e680      	b.n	8009412 <_printf_float+0xc2>
 8009710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009712:	2a01      	cmp	r2, #1
 8009714:	dc01      	bgt.n	800971a <_printf_float+0x3ca>
 8009716:	07db      	lsls	r3, r3, #31
 8009718:	d538      	bpl.n	800978c <_printf_float+0x43c>
 800971a:	2301      	movs	r3, #1
 800971c:	4642      	mov	r2, r8
 800971e:	4631      	mov	r1, r6
 8009720:	4628      	mov	r0, r5
 8009722:	47b8      	blx	r7
 8009724:	3001      	adds	r0, #1
 8009726:	f43f ae74 	beq.w	8009412 <_printf_float+0xc2>
 800972a:	ee18 3a10 	vmov	r3, s16
 800972e:	4652      	mov	r2, sl
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f ae6b 	beq.w	8009412 <_printf_float+0xc2>
 800973c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009740:	2200      	movs	r2, #0
 8009742:	2300      	movs	r3, #0
 8009744:	f7f7 f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009748:	b9d8      	cbnz	r0, 8009782 <_printf_float+0x432>
 800974a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800974c:	f108 0201 	add.w	r2, r8, #1
 8009750:	3b01      	subs	r3, #1
 8009752:	4631      	mov	r1, r6
 8009754:	4628      	mov	r0, r5
 8009756:	47b8      	blx	r7
 8009758:	3001      	adds	r0, #1
 800975a:	d10e      	bne.n	800977a <_printf_float+0x42a>
 800975c:	e659      	b.n	8009412 <_printf_float+0xc2>
 800975e:	2301      	movs	r3, #1
 8009760:	4652      	mov	r2, sl
 8009762:	4631      	mov	r1, r6
 8009764:	4628      	mov	r0, r5
 8009766:	47b8      	blx	r7
 8009768:	3001      	adds	r0, #1
 800976a:	f43f ae52 	beq.w	8009412 <_printf_float+0xc2>
 800976e:	f108 0801 	add.w	r8, r8, #1
 8009772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009774:	3b01      	subs	r3, #1
 8009776:	4543      	cmp	r3, r8
 8009778:	dcf1      	bgt.n	800975e <_printf_float+0x40e>
 800977a:	464b      	mov	r3, r9
 800977c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009780:	e6dc      	b.n	800953c <_printf_float+0x1ec>
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	f104 0a1a 	add.w	sl, r4, #26
 800978a:	e7f2      	b.n	8009772 <_printf_float+0x422>
 800978c:	2301      	movs	r3, #1
 800978e:	4642      	mov	r2, r8
 8009790:	e7df      	b.n	8009752 <_printf_float+0x402>
 8009792:	2301      	movs	r3, #1
 8009794:	464a      	mov	r2, r9
 8009796:	4631      	mov	r1, r6
 8009798:	4628      	mov	r0, r5
 800979a:	47b8      	blx	r7
 800979c:	3001      	adds	r0, #1
 800979e:	f43f ae38 	beq.w	8009412 <_printf_float+0xc2>
 80097a2:	f108 0801 	add.w	r8, r8, #1
 80097a6:	68e3      	ldr	r3, [r4, #12]
 80097a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097aa:	1a5b      	subs	r3, r3, r1
 80097ac:	4543      	cmp	r3, r8
 80097ae:	dcf0      	bgt.n	8009792 <_printf_float+0x442>
 80097b0:	e6fa      	b.n	80095a8 <_printf_float+0x258>
 80097b2:	f04f 0800 	mov.w	r8, #0
 80097b6:	f104 0919 	add.w	r9, r4, #25
 80097ba:	e7f4      	b.n	80097a6 <_printf_float+0x456>

080097bc <_printf_common>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	4616      	mov	r6, r2
 80097c2:	4699      	mov	r9, r3
 80097c4:	688a      	ldr	r2, [r1, #8]
 80097c6:	690b      	ldr	r3, [r1, #16]
 80097c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097cc:	4293      	cmp	r3, r2
 80097ce:	bfb8      	it	lt
 80097d0:	4613      	movlt	r3, r2
 80097d2:	6033      	str	r3, [r6, #0]
 80097d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097d8:	4607      	mov	r7, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	b10a      	cbz	r2, 80097e2 <_printf_common+0x26>
 80097de:	3301      	adds	r3, #1
 80097e0:	6033      	str	r3, [r6, #0]
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	0699      	lsls	r1, r3, #26
 80097e6:	bf42      	ittt	mi
 80097e8:	6833      	ldrmi	r3, [r6, #0]
 80097ea:	3302      	addmi	r3, #2
 80097ec:	6033      	strmi	r3, [r6, #0]
 80097ee:	6825      	ldr	r5, [r4, #0]
 80097f0:	f015 0506 	ands.w	r5, r5, #6
 80097f4:	d106      	bne.n	8009804 <_printf_common+0x48>
 80097f6:	f104 0a19 	add.w	sl, r4, #25
 80097fa:	68e3      	ldr	r3, [r4, #12]
 80097fc:	6832      	ldr	r2, [r6, #0]
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	42ab      	cmp	r3, r5
 8009802:	dc26      	bgt.n	8009852 <_printf_common+0x96>
 8009804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009808:	1e13      	subs	r3, r2, #0
 800980a:	6822      	ldr	r2, [r4, #0]
 800980c:	bf18      	it	ne
 800980e:	2301      	movne	r3, #1
 8009810:	0692      	lsls	r2, r2, #26
 8009812:	d42b      	bmi.n	800986c <_printf_common+0xb0>
 8009814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009818:	4649      	mov	r1, r9
 800981a:	4638      	mov	r0, r7
 800981c:	47c0      	blx	r8
 800981e:	3001      	adds	r0, #1
 8009820:	d01e      	beq.n	8009860 <_printf_common+0xa4>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	68e5      	ldr	r5, [r4, #12]
 8009826:	6832      	ldr	r2, [r6, #0]
 8009828:	f003 0306 	and.w	r3, r3, #6
 800982c:	2b04      	cmp	r3, #4
 800982e:	bf08      	it	eq
 8009830:	1aad      	subeq	r5, r5, r2
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	6922      	ldr	r2, [r4, #16]
 8009836:	bf0c      	ite	eq
 8009838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800983c:	2500      	movne	r5, #0
 800983e:	4293      	cmp	r3, r2
 8009840:	bfc4      	itt	gt
 8009842:	1a9b      	subgt	r3, r3, r2
 8009844:	18ed      	addgt	r5, r5, r3
 8009846:	2600      	movs	r6, #0
 8009848:	341a      	adds	r4, #26
 800984a:	42b5      	cmp	r5, r6
 800984c:	d11a      	bne.n	8009884 <_printf_common+0xc8>
 800984e:	2000      	movs	r0, #0
 8009850:	e008      	b.n	8009864 <_printf_common+0xa8>
 8009852:	2301      	movs	r3, #1
 8009854:	4652      	mov	r2, sl
 8009856:	4649      	mov	r1, r9
 8009858:	4638      	mov	r0, r7
 800985a:	47c0      	blx	r8
 800985c:	3001      	adds	r0, #1
 800985e:	d103      	bne.n	8009868 <_printf_common+0xac>
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009868:	3501      	adds	r5, #1
 800986a:	e7c6      	b.n	80097fa <_printf_common+0x3e>
 800986c:	18e1      	adds	r1, r4, r3
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	2030      	movs	r0, #48	; 0x30
 8009872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009876:	4422      	add	r2, r4
 8009878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800987c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009880:	3302      	adds	r3, #2
 8009882:	e7c7      	b.n	8009814 <_printf_common+0x58>
 8009884:	2301      	movs	r3, #1
 8009886:	4622      	mov	r2, r4
 8009888:	4649      	mov	r1, r9
 800988a:	4638      	mov	r0, r7
 800988c:	47c0      	blx	r8
 800988e:	3001      	adds	r0, #1
 8009890:	d0e6      	beq.n	8009860 <_printf_common+0xa4>
 8009892:	3601      	adds	r6, #1
 8009894:	e7d9      	b.n	800984a <_printf_common+0x8e>
	...

08009898 <_printf_i>:
 8009898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	4691      	mov	r9, r2
 80098a0:	7e27      	ldrb	r7, [r4, #24]
 80098a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098a4:	2f78      	cmp	r7, #120	; 0x78
 80098a6:	4680      	mov	r8, r0
 80098a8:	469a      	mov	sl, r3
 80098aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ae:	d807      	bhi.n	80098c0 <_printf_i+0x28>
 80098b0:	2f62      	cmp	r7, #98	; 0x62
 80098b2:	d80a      	bhi.n	80098ca <_printf_i+0x32>
 80098b4:	2f00      	cmp	r7, #0
 80098b6:	f000 80d8 	beq.w	8009a6a <_printf_i+0x1d2>
 80098ba:	2f58      	cmp	r7, #88	; 0x58
 80098bc:	f000 80a3 	beq.w	8009a06 <_printf_i+0x16e>
 80098c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098c8:	e03a      	b.n	8009940 <_printf_i+0xa8>
 80098ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ce:	2b15      	cmp	r3, #21
 80098d0:	d8f6      	bhi.n	80098c0 <_printf_i+0x28>
 80098d2:	a001      	add	r0, pc, #4	; (adr r0, 80098d8 <_printf_i+0x40>)
 80098d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098d8:	08009931 	.word	0x08009931
 80098dc:	08009945 	.word	0x08009945
 80098e0:	080098c1 	.word	0x080098c1
 80098e4:	080098c1 	.word	0x080098c1
 80098e8:	080098c1 	.word	0x080098c1
 80098ec:	080098c1 	.word	0x080098c1
 80098f0:	08009945 	.word	0x08009945
 80098f4:	080098c1 	.word	0x080098c1
 80098f8:	080098c1 	.word	0x080098c1
 80098fc:	080098c1 	.word	0x080098c1
 8009900:	080098c1 	.word	0x080098c1
 8009904:	08009a51 	.word	0x08009a51
 8009908:	08009975 	.word	0x08009975
 800990c:	08009a33 	.word	0x08009a33
 8009910:	080098c1 	.word	0x080098c1
 8009914:	080098c1 	.word	0x080098c1
 8009918:	08009a73 	.word	0x08009a73
 800991c:	080098c1 	.word	0x080098c1
 8009920:	08009975 	.word	0x08009975
 8009924:	080098c1 	.word	0x080098c1
 8009928:	080098c1 	.word	0x080098c1
 800992c:	08009a3b 	.word	0x08009a3b
 8009930:	680b      	ldr	r3, [r1, #0]
 8009932:	1d1a      	adds	r2, r3, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	600a      	str	r2, [r1, #0]
 8009938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800993c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009940:	2301      	movs	r3, #1
 8009942:	e0a3      	b.n	8009a8c <_printf_i+0x1f4>
 8009944:	6825      	ldr	r5, [r4, #0]
 8009946:	6808      	ldr	r0, [r1, #0]
 8009948:	062e      	lsls	r6, r5, #24
 800994a:	f100 0304 	add.w	r3, r0, #4
 800994e:	d50a      	bpl.n	8009966 <_printf_i+0xce>
 8009950:	6805      	ldr	r5, [r0, #0]
 8009952:	600b      	str	r3, [r1, #0]
 8009954:	2d00      	cmp	r5, #0
 8009956:	da03      	bge.n	8009960 <_printf_i+0xc8>
 8009958:	232d      	movs	r3, #45	; 0x2d
 800995a:	426d      	negs	r5, r5
 800995c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009960:	485e      	ldr	r0, [pc, #376]	; (8009adc <_printf_i+0x244>)
 8009962:	230a      	movs	r3, #10
 8009964:	e019      	b.n	800999a <_printf_i+0x102>
 8009966:	f015 0f40 	tst.w	r5, #64	; 0x40
 800996a:	6805      	ldr	r5, [r0, #0]
 800996c:	600b      	str	r3, [r1, #0]
 800996e:	bf18      	it	ne
 8009970:	b22d      	sxthne	r5, r5
 8009972:	e7ef      	b.n	8009954 <_printf_i+0xbc>
 8009974:	680b      	ldr	r3, [r1, #0]
 8009976:	6825      	ldr	r5, [r4, #0]
 8009978:	1d18      	adds	r0, r3, #4
 800997a:	6008      	str	r0, [r1, #0]
 800997c:	0628      	lsls	r0, r5, #24
 800997e:	d501      	bpl.n	8009984 <_printf_i+0xec>
 8009980:	681d      	ldr	r5, [r3, #0]
 8009982:	e002      	b.n	800998a <_printf_i+0xf2>
 8009984:	0669      	lsls	r1, r5, #25
 8009986:	d5fb      	bpl.n	8009980 <_printf_i+0xe8>
 8009988:	881d      	ldrh	r5, [r3, #0]
 800998a:	4854      	ldr	r0, [pc, #336]	; (8009adc <_printf_i+0x244>)
 800998c:	2f6f      	cmp	r7, #111	; 0x6f
 800998e:	bf0c      	ite	eq
 8009990:	2308      	moveq	r3, #8
 8009992:	230a      	movne	r3, #10
 8009994:	2100      	movs	r1, #0
 8009996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800999a:	6866      	ldr	r6, [r4, #4]
 800999c:	60a6      	str	r6, [r4, #8]
 800999e:	2e00      	cmp	r6, #0
 80099a0:	bfa2      	ittt	ge
 80099a2:	6821      	ldrge	r1, [r4, #0]
 80099a4:	f021 0104 	bicge.w	r1, r1, #4
 80099a8:	6021      	strge	r1, [r4, #0]
 80099aa:	b90d      	cbnz	r5, 80099b0 <_printf_i+0x118>
 80099ac:	2e00      	cmp	r6, #0
 80099ae:	d04d      	beq.n	8009a4c <_printf_i+0x1b4>
 80099b0:	4616      	mov	r6, r2
 80099b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80099b6:	fb03 5711 	mls	r7, r3, r1, r5
 80099ba:	5dc7      	ldrb	r7, [r0, r7]
 80099bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099c0:	462f      	mov	r7, r5
 80099c2:	42bb      	cmp	r3, r7
 80099c4:	460d      	mov	r5, r1
 80099c6:	d9f4      	bls.n	80099b2 <_printf_i+0x11a>
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d10b      	bne.n	80099e4 <_printf_i+0x14c>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	07df      	lsls	r7, r3, #31
 80099d0:	d508      	bpl.n	80099e4 <_printf_i+0x14c>
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	6861      	ldr	r1, [r4, #4]
 80099d6:	4299      	cmp	r1, r3
 80099d8:	bfde      	ittt	le
 80099da:	2330      	movle	r3, #48	; 0x30
 80099dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099e4:	1b92      	subs	r2, r2, r6
 80099e6:	6122      	str	r2, [r4, #16]
 80099e8:	f8cd a000 	str.w	sl, [sp]
 80099ec:	464b      	mov	r3, r9
 80099ee:	aa03      	add	r2, sp, #12
 80099f0:	4621      	mov	r1, r4
 80099f2:	4640      	mov	r0, r8
 80099f4:	f7ff fee2 	bl	80097bc <_printf_common>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d14c      	bne.n	8009a96 <_printf_i+0x1fe>
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	b004      	add	sp, #16
 8009a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a06:	4835      	ldr	r0, [pc, #212]	; (8009adc <_printf_i+0x244>)
 8009a08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	680e      	ldr	r6, [r1, #0]
 8009a10:	061f      	lsls	r7, r3, #24
 8009a12:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a16:	600e      	str	r6, [r1, #0]
 8009a18:	d514      	bpl.n	8009a44 <_printf_i+0x1ac>
 8009a1a:	07d9      	lsls	r1, r3, #31
 8009a1c:	bf44      	itt	mi
 8009a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a22:	6023      	strmi	r3, [r4, #0]
 8009a24:	b91d      	cbnz	r5, 8009a2e <_printf_i+0x196>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f023 0320 	bic.w	r3, r3, #32
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	2310      	movs	r3, #16
 8009a30:	e7b0      	b.n	8009994 <_printf_i+0xfc>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	f043 0320 	orr.w	r3, r3, #32
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	2378      	movs	r3, #120	; 0x78
 8009a3c:	4828      	ldr	r0, [pc, #160]	; (8009ae0 <_printf_i+0x248>)
 8009a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a42:	e7e3      	b.n	8009a0c <_printf_i+0x174>
 8009a44:	065e      	lsls	r6, r3, #25
 8009a46:	bf48      	it	mi
 8009a48:	b2ad      	uxthmi	r5, r5
 8009a4a:	e7e6      	b.n	8009a1a <_printf_i+0x182>
 8009a4c:	4616      	mov	r6, r2
 8009a4e:	e7bb      	b.n	80099c8 <_printf_i+0x130>
 8009a50:	680b      	ldr	r3, [r1, #0]
 8009a52:	6826      	ldr	r6, [r4, #0]
 8009a54:	6960      	ldr	r0, [r4, #20]
 8009a56:	1d1d      	adds	r5, r3, #4
 8009a58:	600d      	str	r5, [r1, #0]
 8009a5a:	0635      	lsls	r5, r6, #24
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	d501      	bpl.n	8009a64 <_printf_i+0x1cc>
 8009a60:	6018      	str	r0, [r3, #0]
 8009a62:	e002      	b.n	8009a6a <_printf_i+0x1d2>
 8009a64:	0671      	lsls	r1, r6, #25
 8009a66:	d5fb      	bpl.n	8009a60 <_printf_i+0x1c8>
 8009a68:	8018      	strh	r0, [r3, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6123      	str	r3, [r4, #16]
 8009a6e:	4616      	mov	r6, r2
 8009a70:	e7ba      	b.n	80099e8 <_printf_i+0x150>
 8009a72:	680b      	ldr	r3, [r1, #0]
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	600a      	str	r2, [r1, #0]
 8009a78:	681e      	ldr	r6, [r3, #0]
 8009a7a:	6862      	ldr	r2, [r4, #4]
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7f6 fbae 	bl	80001e0 <memchr>
 8009a84:	b108      	cbz	r0, 8009a8a <_printf_i+0x1f2>
 8009a86:	1b80      	subs	r0, r0, r6
 8009a88:	6060      	str	r0, [r4, #4]
 8009a8a:	6863      	ldr	r3, [r4, #4]
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a94:	e7a8      	b.n	80099e8 <_printf_i+0x150>
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	4632      	mov	r2, r6
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	47d0      	blx	sl
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d0ab      	beq.n	80099fc <_printf_i+0x164>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	079b      	lsls	r3, r3, #30
 8009aa8:	d413      	bmi.n	8009ad2 <_printf_i+0x23a>
 8009aaa:	68e0      	ldr	r0, [r4, #12]
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	4298      	cmp	r0, r3
 8009ab0:	bfb8      	it	lt
 8009ab2:	4618      	movlt	r0, r3
 8009ab4:	e7a4      	b.n	8009a00 <_printf_i+0x168>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4632      	mov	r2, r6
 8009aba:	4649      	mov	r1, r9
 8009abc:	4640      	mov	r0, r8
 8009abe:	47d0      	blx	sl
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d09b      	beq.n	80099fc <_printf_i+0x164>
 8009ac4:	3501      	adds	r5, #1
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	9903      	ldr	r1, [sp, #12]
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	42ab      	cmp	r3, r5
 8009ace:	dcf2      	bgt.n	8009ab6 <_printf_i+0x21e>
 8009ad0:	e7eb      	b.n	8009aaa <_printf_i+0x212>
 8009ad2:	2500      	movs	r5, #0
 8009ad4:	f104 0619 	add.w	r6, r4, #25
 8009ad8:	e7f5      	b.n	8009ac6 <_printf_i+0x22e>
 8009ada:	bf00      	nop
 8009adc:	0800e2fe 	.word	0x0800e2fe
 8009ae0:	0800e30f 	.word	0x0800e30f

08009ae4 <_scanf_float>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	b087      	sub	sp, #28
 8009aea:	4617      	mov	r7, r2
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	688b      	ldr	r3, [r1, #8]
 8009af0:	1e5a      	subs	r2, r3, #1
 8009af2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009af6:	bf83      	ittte	hi
 8009af8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009afc:	195b      	addhi	r3, r3, r5
 8009afe:	9302      	strhi	r3, [sp, #8]
 8009b00:	2300      	movls	r3, #0
 8009b02:	bf86      	itte	hi
 8009b04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b08:	608b      	strhi	r3, [r1, #8]
 8009b0a:	9302      	strls	r3, [sp, #8]
 8009b0c:	680b      	ldr	r3, [r1, #0]
 8009b0e:	468b      	mov	fp, r1
 8009b10:	2500      	movs	r5, #0
 8009b12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009b16:	f84b 3b1c 	str.w	r3, [fp], #28
 8009b1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009b1e:	4680      	mov	r8, r0
 8009b20:	460c      	mov	r4, r1
 8009b22:	465e      	mov	r6, fp
 8009b24:	46aa      	mov	sl, r5
 8009b26:	46a9      	mov	r9, r5
 8009b28:	9501      	str	r5, [sp, #4]
 8009b2a:	68a2      	ldr	r2, [r4, #8]
 8009b2c:	b152      	cbz	r2, 8009b44 <_scanf_float+0x60>
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b4e      	cmp	r3, #78	; 0x4e
 8009b34:	d864      	bhi.n	8009c00 <_scanf_float+0x11c>
 8009b36:	2b40      	cmp	r3, #64	; 0x40
 8009b38:	d83c      	bhi.n	8009bb4 <_scanf_float+0xd0>
 8009b3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009b3e:	b2c8      	uxtb	r0, r1
 8009b40:	280e      	cmp	r0, #14
 8009b42:	d93a      	bls.n	8009bba <_scanf_float+0xd6>
 8009b44:	f1b9 0f00 	cmp.w	r9, #0
 8009b48:	d003      	beq.n	8009b52 <_scanf_float+0x6e>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b56:	f1ba 0f01 	cmp.w	sl, #1
 8009b5a:	f200 8113 	bhi.w	8009d84 <_scanf_float+0x2a0>
 8009b5e:	455e      	cmp	r6, fp
 8009b60:	f200 8105 	bhi.w	8009d6e <_scanf_float+0x28a>
 8009b64:	2501      	movs	r5, #1
 8009b66:	4628      	mov	r0, r5
 8009b68:	b007      	add	sp, #28
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009b72:	2a0d      	cmp	r2, #13
 8009b74:	d8e6      	bhi.n	8009b44 <_scanf_float+0x60>
 8009b76:	a101      	add	r1, pc, #4	; (adr r1, 8009b7c <_scanf_float+0x98>)
 8009b78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b7c:	08009cbb 	.word	0x08009cbb
 8009b80:	08009b45 	.word	0x08009b45
 8009b84:	08009b45 	.word	0x08009b45
 8009b88:	08009b45 	.word	0x08009b45
 8009b8c:	08009d1b 	.word	0x08009d1b
 8009b90:	08009cf3 	.word	0x08009cf3
 8009b94:	08009b45 	.word	0x08009b45
 8009b98:	08009b45 	.word	0x08009b45
 8009b9c:	08009cc9 	.word	0x08009cc9
 8009ba0:	08009b45 	.word	0x08009b45
 8009ba4:	08009b45 	.word	0x08009b45
 8009ba8:	08009b45 	.word	0x08009b45
 8009bac:	08009b45 	.word	0x08009b45
 8009bb0:	08009c81 	.word	0x08009c81
 8009bb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009bb8:	e7db      	b.n	8009b72 <_scanf_float+0x8e>
 8009bba:	290e      	cmp	r1, #14
 8009bbc:	d8c2      	bhi.n	8009b44 <_scanf_float+0x60>
 8009bbe:	a001      	add	r0, pc, #4	; (adr r0, 8009bc4 <_scanf_float+0xe0>)
 8009bc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009bc4:	08009c73 	.word	0x08009c73
 8009bc8:	08009b45 	.word	0x08009b45
 8009bcc:	08009c73 	.word	0x08009c73
 8009bd0:	08009d07 	.word	0x08009d07
 8009bd4:	08009b45 	.word	0x08009b45
 8009bd8:	08009c21 	.word	0x08009c21
 8009bdc:	08009c5d 	.word	0x08009c5d
 8009be0:	08009c5d 	.word	0x08009c5d
 8009be4:	08009c5d 	.word	0x08009c5d
 8009be8:	08009c5d 	.word	0x08009c5d
 8009bec:	08009c5d 	.word	0x08009c5d
 8009bf0:	08009c5d 	.word	0x08009c5d
 8009bf4:	08009c5d 	.word	0x08009c5d
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009c5d 	.word	0x08009c5d
 8009c00:	2b6e      	cmp	r3, #110	; 0x6e
 8009c02:	d809      	bhi.n	8009c18 <_scanf_float+0x134>
 8009c04:	2b60      	cmp	r3, #96	; 0x60
 8009c06:	d8b2      	bhi.n	8009b6e <_scanf_float+0x8a>
 8009c08:	2b54      	cmp	r3, #84	; 0x54
 8009c0a:	d077      	beq.n	8009cfc <_scanf_float+0x218>
 8009c0c:	2b59      	cmp	r3, #89	; 0x59
 8009c0e:	d199      	bne.n	8009b44 <_scanf_float+0x60>
 8009c10:	2d07      	cmp	r5, #7
 8009c12:	d197      	bne.n	8009b44 <_scanf_float+0x60>
 8009c14:	2508      	movs	r5, #8
 8009c16:	e029      	b.n	8009c6c <_scanf_float+0x188>
 8009c18:	2b74      	cmp	r3, #116	; 0x74
 8009c1a:	d06f      	beq.n	8009cfc <_scanf_float+0x218>
 8009c1c:	2b79      	cmp	r3, #121	; 0x79
 8009c1e:	e7f6      	b.n	8009c0e <_scanf_float+0x12a>
 8009c20:	6821      	ldr	r1, [r4, #0]
 8009c22:	05c8      	lsls	r0, r1, #23
 8009c24:	d51a      	bpl.n	8009c5c <_scanf_float+0x178>
 8009c26:	9b02      	ldr	r3, [sp, #8]
 8009c28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c2c:	6021      	str	r1, [r4, #0]
 8009c2e:	f109 0901 	add.w	r9, r9, #1
 8009c32:	b11b      	cbz	r3, 8009c3c <_scanf_float+0x158>
 8009c34:	3b01      	subs	r3, #1
 8009c36:	3201      	adds	r2, #1
 8009c38:	9302      	str	r3, [sp, #8]
 8009c3a:	60a2      	str	r2, [r4, #8]
 8009c3c:	68a3      	ldr	r3, [r4, #8]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	60a3      	str	r3, [r4, #8]
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	3301      	adds	r3, #1
 8009c46:	6123      	str	r3, [r4, #16]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	f340 8084 	ble.w	8009d5c <_scanf_float+0x278>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	3301      	adds	r3, #1
 8009c58:	603b      	str	r3, [r7, #0]
 8009c5a:	e766      	b.n	8009b2a <_scanf_float+0x46>
 8009c5c:	eb1a 0f05 	cmn.w	sl, r5
 8009c60:	f47f af70 	bne.w	8009b44 <_scanf_float+0x60>
 8009c64:	6822      	ldr	r2, [r4, #0]
 8009c66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009c6a:	6022      	str	r2, [r4, #0]
 8009c6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009c70:	e7e4      	b.n	8009c3c <_scanf_float+0x158>
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	0610      	lsls	r0, r2, #24
 8009c76:	f57f af65 	bpl.w	8009b44 <_scanf_float+0x60>
 8009c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c7e:	e7f4      	b.n	8009c6a <_scanf_float+0x186>
 8009c80:	f1ba 0f00 	cmp.w	sl, #0
 8009c84:	d10e      	bne.n	8009ca4 <_scanf_float+0x1c0>
 8009c86:	f1b9 0f00 	cmp.w	r9, #0
 8009c8a:	d10e      	bne.n	8009caa <_scanf_float+0x1c6>
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c96:	d108      	bne.n	8009caa <_scanf_float+0x1c6>
 8009c98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	f04f 0a01 	mov.w	sl, #1
 8009ca2:	e7e3      	b.n	8009c6c <_scanf_float+0x188>
 8009ca4:	f1ba 0f02 	cmp.w	sl, #2
 8009ca8:	d055      	beq.n	8009d56 <_scanf_float+0x272>
 8009caa:	2d01      	cmp	r5, #1
 8009cac:	d002      	beq.n	8009cb4 <_scanf_float+0x1d0>
 8009cae:	2d04      	cmp	r5, #4
 8009cb0:	f47f af48 	bne.w	8009b44 <_scanf_float+0x60>
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	b2ed      	uxtb	r5, r5
 8009cb8:	e7d8      	b.n	8009c6c <_scanf_float+0x188>
 8009cba:	f1ba 0f01 	cmp.w	sl, #1
 8009cbe:	f47f af41 	bne.w	8009b44 <_scanf_float+0x60>
 8009cc2:	f04f 0a02 	mov.w	sl, #2
 8009cc6:	e7d1      	b.n	8009c6c <_scanf_float+0x188>
 8009cc8:	b97d      	cbnz	r5, 8009cea <_scanf_float+0x206>
 8009cca:	f1b9 0f00 	cmp.w	r9, #0
 8009cce:	f47f af3c 	bne.w	8009b4a <_scanf_float+0x66>
 8009cd2:	6822      	ldr	r2, [r4, #0]
 8009cd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009cd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009cdc:	f47f af39 	bne.w	8009b52 <_scanf_float+0x6e>
 8009ce0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ce4:	6022      	str	r2, [r4, #0]
 8009ce6:	2501      	movs	r5, #1
 8009ce8:	e7c0      	b.n	8009c6c <_scanf_float+0x188>
 8009cea:	2d03      	cmp	r5, #3
 8009cec:	d0e2      	beq.n	8009cb4 <_scanf_float+0x1d0>
 8009cee:	2d05      	cmp	r5, #5
 8009cf0:	e7de      	b.n	8009cb0 <_scanf_float+0x1cc>
 8009cf2:	2d02      	cmp	r5, #2
 8009cf4:	f47f af26 	bne.w	8009b44 <_scanf_float+0x60>
 8009cf8:	2503      	movs	r5, #3
 8009cfa:	e7b7      	b.n	8009c6c <_scanf_float+0x188>
 8009cfc:	2d06      	cmp	r5, #6
 8009cfe:	f47f af21 	bne.w	8009b44 <_scanf_float+0x60>
 8009d02:	2507      	movs	r5, #7
 8009d04:	e7b2      	b.n	8009c6c <_scanf_float+0x188>
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	0591      	lsls	r1, r2, #22
 8009d0a:	f57f af1b 	bpl.w	8009b44 <_scanf_float+0x60>
 8009d0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009d12:	6022      	str	r2, [r4, #0]
 8009d14:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d18:	e7a8      	b.n	8009c6c <_scanf_float+0x188>
 8009d1a:	6822      	ldr	r2, [r4, #0]
 8009d1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009d20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009d24:	d006      	beq.n	8009d34 <_scanf_float+0x250>
 8009d26:	0550      	lsls	r0, r2, #21
 8009d28:	f57f af0c 	bpl.w	8009b44 <_scanf_float+0x60>
 8009d2c:	f1b9 0f00 	cmp.w	r9, #0
 8009d30:	f43f af0f 	beq.w	8009b52 <_scanf_float+0x6e>
 8009d34:	0591      	lsls	r1, r2, #22
 8009d36:	bf58      	it	pl
 8009d38:	9901      	ldrpl	r1, [sp, #4]
 8009d3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d3e:	bf58      	it	pl
 8009d40:	eba9 0101 	subpl.w	r1, r9, r1
 8009d44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009d48:	bf58      	it	pl
 8009d4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d4e:	6022      	str	r2, [r4, #0]
 8009d50:	f04f 0900 	mov.w	r9, #0
 8009d54:	e78a      	b.n	8009c6c <_scanf_float+0x188>
 8009d56:	f04f 0a03 	mov.w	sl, #3
 8009d5a:	e787      	b.n	8009c6c <_scanf_float+0x188>
 8009d5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d60:	4639      	mov	r1, r7
 8009d62:	4640      	mov	r0, r8
 8009d64:	4798      	blx	r3
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f43f aedf 	beq.w	8009b2a <_scanf_float+0x46>
 8009d6c:	e6ea      	b.n	8009b44 <_scanf_float+0x60>
 8009d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d76:	463a      	mov	r2, r7
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4798      	blx	r3
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	e6ec      	b.n	8009b5e <_scanf_float+0x7a>
 8009d84:	1e6b      	subs	r3, r5, #1
 8009d86:	2b06      	cmp	r3, #6
 8009d88:	d825      	bhi.n	8009dd6 <_scanf_float+0x2f2>
 8009d8a:	2d02      	cmp	r5, #2
 8009d8c:	d836      	bhi.n	8009dfc <_scanf_float+0x318>
 8009d8e:	455e      	cmp	r6, fp
 8009d90:	f67f aee8 	bls.w	8009b64 <_scanf_float+0x80>
 8009d94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d9c:	463a      	mov	r2, r7
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4798      	blx	r3
 8009da2:	6923      	ldr	r3, [r4, #16]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	e7f1      	b.n	8009d8e <_scanf_float+0x2aa>
 8009daa:	9802      	ldr	r0, [sp, #8]
 8009dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009db0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009db4:	9002      	str	r0, [sp, #8]
 8009db6:	463a      	mov	r2, r7
 8009db8:	4640      	mov	r0, r8
 8009dba:	4798      	blx	r3
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dc6:	fa5f fa8a 	uxtb.w	sl, sl
 8009dca:	f1ba 0f02 	cmp.w	sl, #2
 8009dce:	d1ec      	bne.n	8009daa <_scanf_float+0x2c6>
 8009dd0:	3d03      	subs	r5, #3
 8009dd2:	b2ed      	uxtb	r5, r5
 8009dd4:	1b76      	subs	r6, r6, r5
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	05da      	lsls	r2, r3, #23
 8009dda:	d52f      	bpl.n	8009e3c <_scanf_float+0x358>
 8009ddc:	055b      	lsls	r3, r3, #21
 8009dde:	d510      	bpl.n	8009e02 <_scanf_float+0x31e>
 8009de0:	455e      	cmp	r6, fp
 8009de2:	f67f aebf 	bls.w	8009b64 <_scanf_float+0x80>
 8009de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009dee:	463a      	mov	r2, r7
 8009df0:	4640      	mov	r0, r8
 8009df2:	4798      	blx	r3
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	6123      	str	r3, [r4, #16]
 8009dfa:	e7f1      	b.n	8009de0 <_scanf_float+0x2fc>
 8009dfc:	46aa      	mov	sl, r5
 8009dfe:	9602      	str	r6, [sp, #8]
 8009e00:	e7df      	b.n	8009dc2 <_scanf_float+0x2de>
 8009e02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e06:	6923      	ldr	r3, [r4, #16]
 8009e08:	2965      	cmp	r1, #101	; 0x65
 8009e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009e12:	6123      	str	r3, [r4, #16]
 8009e14:	d00c      	beq.n	8009e30 <_scanf_float+0x34c>
 8009e16:	2945      	cmp	r1, #69	; 0x45
 8009e18:	d00a      	beq.n	8009e30 <_scanf_float+0x34c>
 8009e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e1e:	463a      	mov	r2, r7
 8009e20:	4640      	mov	r0, r8
 8009e22:	4798      	blx	r3
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	1eb5      	subs	r5, r6, #2
 8009e2e:	6123      	str	r3, [r4, #16]
 8009e30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e34:	463a      	mov	r2, r7
 8009e36:	4640      	mov	r0, r8
 8009e38:	4798      	blx	r3
 8009e3a:	462e      	mov	r6, r5
 8009e3c:	6825      	ldr	r5, [r4, #0]
 8009e3e:	f015 0510 	ands.w	r5, r5, #16
 8009e42:	d158      	bne.n	8009ef6 <_scanf_float+0x412>
 8009e44:	7035      	strb	r5, [r6, #0]
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e50:	d11c      	bne.n	8009e8c <_scanf_float+0x3a8>
 8009e52:	9b01      	ldr	r3, [sp, #4]
 8009e54:	454b      	cmp	r3, r9
 8009e56:	eba3 0209 	sub.w	r2, r3, r9
 8009e5a:	d124      	bne.n	8009ea6 <_scanf_float+0x3c2>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4659      	mov	r1, fp
 8009e60:	4640      	mov	r0, r8
 8009e62:	f000 ff2b 	bl	800acbc <_strtod_r>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	6821      	ldr	r1, [r4, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f011 0f02 	tst.w	r1, #2
 8009e70:	ec57 6b10 	vmov	r6, r7, d0
 8009e74:	f103 0204 	add.w	r2, r3, #4
 8009e78:	d020      	beq.n	8009ebc <_scanf_float+0x3d8>
 8009e7a:	9903      	ldr	r1, [sp, #12]
 8009e7c:	600a      	str	r2, [r1, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	e9c3 6700 	strd	r6, r7, [r3]
 8009e84:	68e3      	ldr	r3, [r4, #12]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60e3      	str	r3, [r4, #12]
 8009e8a:	e66c      	b.n	8009b66 <_scanf_float+0x82>
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0e4      	beq.n	8009e5c <_scanf_float+0x378>
 8009e92:	9905      	ldr	r1, [sp, #20]
 8009e94:	230a      	movs	r3, #10
 8009e96:	462a      	mov	r2, r5
 8009e98:	3101      	adds	r1, #1
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	f000 ff98 	bl	800add0 <_strtol_r>
 8009ea0:	9b04      	ldr	r3, [sp, #16]
 8009ea2:	9e05      	ldr	r6, [sp, #20]
 8009ea4:	1ac2      	subs	r2, r0, r3
 8009ea6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009eaa:	429e      	cmp	r6, r3
 8009eac:	bf28      	it	cs
 8009eae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009eb2:	4912      	ldr	r1, [pc, #72]	; (8009efc <_scanf_float+0x418>)
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f000 f8b9 	bl	800a02c <siprintf>
 8009eba:	e7cf      	b.n	8009e5c <_scanf_float+0x378>
 8009ebc:	f011 0f04 	tst.w	r1, #4
 8009ec0:	9903      	ldr	r1, [sp, #12]
 8009ec2:	600a      	str	r2, [r1, #0]
 8009ec4:	d1db      	bne.n	8009e7e <_scanf_float+0x39a>
 8009ec6:	f8d3 8000 	ldr.w	r8, [r3]
 8009eca:	ee10 2a10 	vmov	r2, s0
 8009ece:	ee10 0a10 	vmov	r0, s0
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f6 fe29 	bl	8000b2c <__aeabi_dcmpun>
 8009eda:	b128      	cbz	r0, 8009ee8 <_scanf_float+0x404>
 8009edc:	4808      	ldr	r0, [pc, #32]	; (8009f00 <_scanf_float+0x41c>)
 8009ede:	f000 f89f 	bl	800a020 <nanf>
 8009ee2:	ed88 0a00 	vstr	s0, [r8]
 8009ee6:	e7cd      	b.n	8009e84 <_scanf_float+0x3a0>
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fe7c 	bl	8000be8 <__aeabi_d2f>
 8009ef0:	f8c8 0000 	str.w	r0, [r8]
 8009ef4:	e7c6      	b.n	8009e84 <_scanf_float+0x3a0>
 8009ef6:	2500      	movs	r5, #0
 8009ef8:	e635      	b.n	8009b66 <_scanf_float+0x82>
 8009efa:	bf00      	nop
 8009efc:	0800e320 	.word	0x0800e320
 8009f00:	0800e798 	.word	0x0800e798

08009f04 <iprintf>:
 8009f04:	b40f      	push	{r0, r1, r2, r3}
 8009f06:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <iprintf+0x2c>)
 8009f08:	b513      	push	{r0, r1, r4, lr}
 8009f0a:	681c      	ldr	r4, [r3, #0]
 8009f0c:	b124      	cbz	r4, 8009f18 <iprintf+0x14>
 8009f0e:	69a3      	ldr	r3, [r4, #24]
 8009f10:	b913      	cbnz	r3, 8009f18 <iprintf+0x14>
 8009f12:	4620      	mov	r0, r4
 8009f14:	f001 ffb2 	bl	800be7c <__sinit>
 8009f18:	ab05      	add	r3, sp, #20
 8009f1a:	9a04      	ldr	r2, [sp, #16]
 8009f1c:	68a1      	ldr	r1, [r4, #8]
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	4620      	mov	r0, r4
 8009f22:	f003 fb37 	bl	800d594 <_vfiprintf_r>
 8009f26:	b002      	add	sp, #8
 8009f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f2c:	b004      	add	sp, #16
 8009f2e:	4770      	bx	lr
 8009f30:	2000000c 	.word	0x2000000c

08009f34 <_puts_r>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	460e      	mov	r6, r1
 8009f38:	4605      	mov	r5, r0
 8009f3a:	b118      	cbz	r0, 8009f44 <_puts_r+0x10>
 8009f3c:	6983      	ldr	r3, [r0, #24]
 8009f3e:	b90b      	cbnz	r3, 8009f44 <_puts_r+0x10>
 8009f40:	f001 ff9c 	bl	800be7c <__sinit>
 8009f44:	69ab      	ldr	r3, [r5, #24]
 8009f46:	68ac      	ldr	r4, [r5, #8]
 8009f48:	b913      	cbnz	r3, 8009f50 <_puts_r+0x1c>
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f001 ff96 	bl	800be7c <__sinit>
 8009f50:	4b2c      	ldr	r3, [pc, #176]	; (800a004 <_puts_r+0xd0>)
 8009f52:	429c      	cmp	r4, r3
 8009f54:	d120      	bne.n	8009f98 <_puts_r+0x64>
 8009f56:	686c      	ldr	r4, [r5, #4]
 8009f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f5a:	07db      	lsls	r3, r3, #31
 8009f5c:	d405      	bmi.n	8009f6a <_puts_r+0x36>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	0598      	lsls	r0, r3, #22
 8009f62:	d402      	bmi.n	8009f6a <_puts_r+0x36>
 8009f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f66:	f002 fb9a 	bl	800c69e <__retarget_lock_acquire_recursive>
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	0719      	lsls	r1, r3, #28
 8009f6e:	d51d      	bpl.n	8009fac <_puts_r+0x78>
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	b1db      	cbz	r3, 8009fac <_puts_r+0x78>
 8009f74:	3e01      	subs	r6, #1
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	60a3      	str	r3, [r4, #8]
 8009f80:	bb39      	cbnz	r1, 8009fd2 <_puts_r+0x9e>
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	da38      	bge.n	8009ff8 <_puts_r+0xc4>
 8009f86:	4622      	mov	r2, r4
 8009f88:	210a      	movs	r1, #10
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 ff22 	bl	800add4 <__swbuf_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d011      	beq.n	8009fb8 <_puts_r+0x84>
 8009f94:	250a      	movs	r5, #10
 8009f96:	e011      	b.n	8009fbc <_puts_r+0x88>
 8009f98:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <_puts_r+0xd4>)
 8009f9a:	429c      	cmp	r4, r3
 8009f9c:	d101      	bne.n	8009fa2 <_puts_r+0x6e>
 8009f9e:	68ac      	ldr	r4, [r5, #8]
 8009fa0:	e7da      	b.n	8009f58 <_puts_r+0x24>
 8009fa2:	4b1a      	ldr	r3, [pc, #104]	; (800a00c <_puts_r+0xd8>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	bf08      	it	eq
 8009fa8:	68ec      	ldreq	r4, [r5, #12]
 8009faa:	e7d5      	b.n	8009f58 <_puts_r+0x24>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 ff62 	bl	800ae78 <__swsetup_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d0dd      	beq.n	8009f74 <_puts_r+0x40>
 8009fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fbe:	07da      	lsls	r2, r3, #31
 8009fc0:	d405      	bmi.n	8009fce <_puts_r+0x9a>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	059b      	lsls	r3, r3, #22
 8009fc6:	d402      	bmi.n	8009fce <_puts_r+0x9a>
 8009fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fca:	f002 fb69 	bl	800c6a0 <__retarget_lock_release_recursive>
 8009fce:	4628      	mov	r0, r5
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	da04      	bge.n	8009fe0 <_puts_r+0xac>
 8009fd6:	69a2      	ldr	r2, [r4, #24]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	dc06      	bgt.n	8009fea <_puts_r+0xb6>
 8009fdc:	290a      	cmp	r1, #10
 8009fde:	d004      	beq.n	8009fea <_puts_r+0xb6>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	7019      	strb	r1, [r3, #0]
 8009fe8:	e7c5      	b.n	8009f76 <_puts_r+0x42>
 8009fea:	4622      	mov	r2, r4
 8009fec:	4628      	mov	r0, r5
 8009fee:	f000 fef1 	bl	800add4 <__swbuf_r>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d1bf      	bne.n	8009f76 <_puts_r+0x42>
 8009ff6:	e7df      	b.n	8009fb8 <_puts_r+0x84>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	250a      	movs	r5, #10
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	6022      	str	r2, [r4, #0]
 800a000:	701d      	strb	r5, [r3, #0]
 800a002:	e7db      	b.n	8009fbc <_puts_r+0x88>
 800a004:	0800e530 	.word	0x0800e530
 800a008:	0800e550 	.word	0x0800e550
 800a00c:	0800e510 	.word	0x0800e510

0800a010 <puts>:
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <puts+0xc>)
 800a012:	4601      	mov	r1, r0
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f7ff bf8d 	b.w	8009f34 <_puts_r>
 800a01a:	bf00      	nop
 800a01c:	2000000c 	.word	0x2000000c

0800a020 <nanf>:
 800a020:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a028 <nanf+0x8>
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	7fc00000 	.word	0x7fc00000

0800a02c <siprintf>:
 800a02c:	b40e      	push	{r1, r2, r3}
 800a02e:	b500      	push	{lr}
 800a030:	b09c      	sub	sp, #112	; 0x70
 800a032:	ab1d      	add	r3, sp, #116	; 0x74
 800a034:	9002      	str	r0, [sp, #8]
 800a036:	9006      	str	r0, [sp, #24]
 800a038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a03c:	4809      	ldr	r0, [pc, #36]	; (800a064 <siprintf+0x38>)
 800a03e:	9107      	str	r1, [sp, #28]
 800a040:	9104      	str	r1, [sp, #16]
 800a042:	4909      	ldr	r1, [pc, #36]	; (800a068 <siprintf+0x3c>)
 800a044:	f853 2b04 	ldr.w	r2, [r3], #4
 800a048:	9105      	str	r1, [sp, #20]
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	a902      	add	r1, sp, #8
 800a050:	f003 f976 	bl	800d340 <_svfiprintf_r>
 800a054:	9b02      	ldr	r3, [sp, #8]
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
 800a05a:	b01c      	add	sp, #112	; 0x70
 800a05c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a060:	b003      	add	sp, #12
 800a062:	4770      	bx	lr
 800a064:	2000000c 	.word	0x2000000c
 800a068:	ffff0208 	.word	0xffff0208

0800a06c <sulp>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4604      	mov	r4, r0
 800a070:	460d      	mov	r5, r1
 800a072:	ec45 4b10 	vmov	d0, r4, r5
 800a076:	4616      	mov	r6, r2
 800a078:	f002 fefe 	bl	800ce78 <__ulp>
 800a07c:	ec51 0b10 	vmov	r0, r1, d0
 800a080:	b17e      	cbz	r6, 800a0a2 <sulp+0x36>
 800a082:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a086:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	dd09      	ble.n	800a0a2 <sulp+0x36>
 800a08e:	051b      	lsls	r3, r3, #20
 800a090:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a094:	2400      	movs	r4, #0
 800a096:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a09a:	4622      	mov	r2, r4
 800a09c:	462b      	mov	r3, r5
 800a09e:	f7f6 faab 	bl	80005f8 <__aeabi_dmul>
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}
 800a0a4:	0000      	movs	r0, r0
	...

0800a0a8 <_strtod_l>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	b0a3      	sub	sp, #140	; 0x8c
 800a0ae:	461f      	mov	r7, r3
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	931e      	str	r3, [sp, #120]	; 0x78
 800a0b4:	4ba4      	ldr	r3, [pc, #656]	; (800a348 <_strtod_l+0x2a0>)
 800a0b6:	9219      	str	r2, [sp, #100]	; 0x64
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	9307      	str	r3, [sp, #28]
 800a0bc:	4604      	mov	r4, r0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	4688      	mov	r8, r1
 800a0c2:	f7f6 f885 	bl	80001d0 <strlen>
 800a0c6:	f04f 0a00 	mov.w	sl, #0
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	f04f 0b00 	mov.w	fp, #0
 800a0d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a0d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0d6:	781a      	ldrb	r2, [r3, #0]
 800a0d8:	2a2b      	cmp	r2, #43	; 0x2b
 800a0da:	d04c      	beq.n	800a176 <_strtod_l+0xce>
 800a0dc:	d839      	bhi.n	800a152 <_strtod_l+0xaa>
 800a0de:	2a0d      	cmp	r2, #13
 800a0e0:	d832      	bhi.n	800a148 <_strtod_l+0xa0>
 800a0e2:	2a08      	cmp	r2, #8
 800a0e4:	d832      	bhi.n	800a14c <_strtod_l+0xa4>
 800a0e6:	2a00      	cmp	r2, #0
 800a0e8:	d03c      	beq.n	800a164 <_strtod_l+0xbc>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a0ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a0f0:	7833      	ldrb	r3, [r6, #0]
 800a0f2:	2b30      	cmp	r3, #48	; 0x30
 800a0f4:	f040 80b4 	bne.w	800a260 <_strtod_l+0x1b8>
 800a0f8:	7873      	ldrb	r3, [r6, #1]
 800a0fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0fe:	2b58      	cmp	r3, #88	; 0x58
 800a100:	d16c      	bne.n	800a1dc <_strtod_l+0x134>
 800a102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	ab1e      	add	r3, sp, #120	; 0x78
 800a108:	9702      	str	r7, [sp, #8]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	4a8f      	ldr	r2, [pc, #572]	; (800a34c <_strtod_l+0x2a4>)
 800a10e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a110:	a91d      	add	r1, sp, #116	; 0x74
 800a112:	4620      	mov	r0, r4
 800a114:	f001 ffb6 	bl	800c084 <__gethex>
 800a118:	f010 0707 	ands.w	r7, r0, #7
 800a11c:	4605      	mov	r5, r0
 800a11e:	d005      	beq.n	800a12c <_strtod_l+0x84>
 800a120:	2f06      	cmp	r7, #6
 800a122:	d12a      	bne.n	800a17a <_strtod_l+0xd2>
 800a124:	3601      	adds	r6, #1
 800a126:	2300      	movs	r3, #0
 800a128:	961d      	str	r6, [sp, #116]	; 0x74
 800a12a:	930e      	str	r3, [sp, #56]	; 0x38
 800a12c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f040 8596 	bne.w	800ac60 <_strtod_l+0xbb8>
 800a134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a136:	b1db      	cbz	r3, 800a170 <_strtod_l+0xc8>
 800a138:	4652      	mov	r2, sl
 800a13a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a13e:	ec43 2b10 	vmov	d0, r2, r3
 800a142:	b023      	add	sp, #140	; 0x8c
 800a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a148:	2a20      	cmp	r2, #32
 800a14a:	d1ce      	bne.n	800a0ea <_strtod_l+0x42>
 800a14c:	3301      	adds	r3, #1
 800a14e:	931d      	str	r3, [sp, #116]	; 0x74
 800a150:	e7c0      	b.n	800a0d4 <_strtod_l+0x2c>
 800a152:	2a2d      	cmp	r2, #45	; 0x2d
 800a154:	d1c9      	bne.n	800a0ea <_strtod_l+0x42>
 800a156:	2201      	movs	r2, #1
 800a158:	920e      	str	r2, [sp, #56]	; 0x38
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	921d      	str	r2, [sp, #116]	; 0x74
 800a15e:	785b      	ldrb	r3, [r3, #1]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1c4      	bne.n	800a0ee <_strtod_l+0x46>
 800a164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a166:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f040 8576 	bne.w	800ac5c <_strtod_l+0xbb4>
 800a170:	4652      	mov	r2, sl
 800a172:	465b      	mov	r3, fp
 800a174:	e7e3      	b.n	800a13e <_strtod_l+0x96>
 800a176:	2200      	movs	r2, #0
 800a178:	e7ee      	b.n	800a158 <_strtod_l+0xb0>
 800a17a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a17c:	b13a      	cbz	r2, 800a18e <_strtod_l+0xe6>
 800a17e:	2135      	movs	r1, #53	; 0x35
 800a180:	a820      	add	r0, sp, #128	; 0x80
 800a182:	f002 ff84 	bl	800d08e <__copybits>
 800a186:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a188:	4620      	mov	r0, r4
 800a18a:	f002 fb49 	bl	800c820 <_Bfree>
 800a18e:	3f01      	subs	r7, #1
 800a190:	2f05      	cmp	r7, #5
 800a192:	d807      	bhi.n	800a1a4 <_strtod_l+0xfc>
 800a194:	e8df f007 	tbb	[pc, r7]
 800a198:	1d180b0e 	.word	0x1d180b0e
 800a19c:	030e      	.short	0x030e
 800a19e:	f04f 0b00 	mov.w	fp, #0
 800a1a2:	46da      	mov	sl, fp
 800a1a4:	0728      	lsls	r0, r5, #28
 800a1a6:	d5c1      	bpl.n	800a12c <_strtod_l+0x84>
 800a1a8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a1ac:	e7be      	b.n	800a12c <_strtod_l+0x84>
 800a1ae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a1b2:	e7f7      	b.n	800a1a4 <_strtod_l+0xfc>
 800a1b4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a1b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a1ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a1c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a1c6:	e7ed      	b.n	800a1a4 <_strtod_l+0xfc>
 800a1c8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a350 <_strtod_l+0x2a8>
 800a1cc:	f04f 0a00 	mov.w	sl, #0
 800a1d0:	e7e8      	b.n	800a1a4 <_strtod_l+0xfc>
 800a1d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a1d6:	f04f 3aff 	mov.w	sl, #4294967295
 800a1da:	e7e3      	b.n	800a1a4 <_strtod_l+0xfc>
 800a1dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	921d      	str	r2, [sp, #116]	; 0x74
 800a1e2:	785b      	ldrb	r3, [r3, #1]
 800a1e4:	2b30      	cmp	r3, #48	; 0x30
 800a1e6:	d0f9      	beq.n	800a1dc <_strtod_l+0x134>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d09f      	beq.n	800a12c <_strtod_l+0x84>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f04f 0900 	mov.w	r9, #0
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a1f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1fc:	464f      	mov	r7, r9
 800a1fe:	220a      	movs	r2, #10
 800a200:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a202:	7806      	ldrb	r6, [r0, #0]
 800a204:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a208:	b2d9      	uxtb	r1, r3
 800a20a:	2909      	cmp	r1, #9
 800a20c:	d92a      	bls.n	800a264 <_strtod_l+0x1bc>
 800a20e:	9907      	ldr	r1, [sp, #28]
 800a210:	462a      	mov	r2, r5
 800a212:	f003 fb4c 	bl	800d8ae <strncmp>
 800a216:	b398      	cbz	r0, 800a280 <_strtod_l+0x1d8>
 800a218:	2000      	movs	r0, #0
 800a21a:	4633      	mov	r3, r6
 800a21c:	463d      	mov	r5, r7
 800a21e:	9007      	str	r0, [sp, #28]
 800a220:	4602      	mov	r2, r0
 800a222:	2b65      	cmp	r3, #101	; 0x65
 800a224:	d001      	beq.n	800a22a <_strtod_l+0x182>
 800a226:	2b45      	cmp	r3, #69	; 0x45
 800a228:	d118      	bne.n	800a25c <_strtod_l+0x1b4>
 800a22a:	b91d      	cbnz	r5, 800a234 <_strtod_l+0x18c>
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	4303      	orrs	r3, r0
 800a230:	d098      	beq.n	800a164 <_strtod_l+0xbc>
 800a232:	2500      	movs	r5, #0
 800a234:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a238:	f108 0301 	add.w	r3, r8, #1
 800a23c:	931d      	str	r3, [sp, #116]	; 0x74
 800a23e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a242:	2b2b      	cmp	r3, #43	; 0x2b
 800a244:	d075      	beq.n	800a332 <_strtod_l+0x28a>
 800a246:	2b2d      	cmp	r3, #45	; 0x2d
 800a248:	d07b      	beq.n	800a342 <_strtod_l+0x29a>
 800a24a:	f04f 0c00 	mov.w	ip, #0
 800a24e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a252:	2909      	cmp	r1, #9
 800a254:	f240 8082 	bls.w	800a35c <_strtod_l+0x2b4>
 800a258:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a25c:	2600      	movs	r6, #0
 800a25e:	e09d      	b.n	800a39c <_strtod_l+0x2f4>
 800a260:	2300      	movs	r3, #0
 800a262:	e7c4      	b.n	800a1ee <_strtod_l+0x146>
 800a264:	2f08      	cmp	r7, #8
 800a266:	bfd8      	it	le
 800a268:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a26a:	f100 0001 	add.w	r0, r0, #1
 800a26e:	bfda      	itte	le
 800a270:	fb02 3301 	mlale	r3, r2, r1, r3
 800a274:	9309      	strle	r3, [sp, #36]	; 0x24
 800a276:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a27a:	3701      	adds	r7, #1
 800a27c:	901d      	str	r0, [sp, #116]	; 0x74
 800a27e:	e7bf      	b.n	800a200 <_strtod_l+0x158>
 800a280:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a282:	195a      	adds	r2, r3, r5
 800a284:	921d      	str	r2, [sp, #116]	; 0x74
 800a286:	5d5b      	ldrb	r3, [r3, r5]
 800a288:	2f00      	cmp	r7, #0
 800a28a:	d037      	beq.n	800a2fc <_strtod_l+0x254>
 800a28c:	9007      	str	r0, [sp, #28]
 800a28e:	463d      	mov	r5, r7
 800a290:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a294:	2a09      	cmp	r2, #9
 800a296:	d912      	bls.n	800a2be <_strtod_l+0x216>
 800a298:	2201      	movs	r2, #1
 800a29a:	e7c2      	b.n	800a222 <_strtod_l+0x17a>
 800a29c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	921d      	str	r2, [sp, #116]	; 0x74
 800a2a2:	785b      	ldrb	r3, [r3, #1]
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	2b30      	cmp	r3, #48	; 0x30
 800a2a8:	d0f8      	beq.n	800a29c <_strtod_l+0x1f4>
 800a2aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a2ae:	2a08      	cmp	r2, #8
 800a2b0:	f200 84db 	bhi.w	800ac6a <_strtod_l+0xbc2>
 800a2b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a2b6:	9007      	str	r0, [sp, #28]
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	920a      	str	r2, [sp, #40]	; 0x28
 800a2bc:	4605      	mov	r5, r0
 800a2be:	3b30      	subs	r3, #48	; 0x30
 800a2c0:	f100 0201 	add.w	r2, r0, #1
 800a2c4:	d014      	beq.n	800a2f0 <_strtod_l+0x248>
 800a2c6:	9907      	ldr	r1, [sp, #28]
 800a2c8:	4411      	add	r1, r2
 800a2ca:	9107      	str	r1, [sp, #28]
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	eb00 0e05 	add.w	lr, r0, r5
 800a2d2:	210a      	movs	r1, #10
 800a2d4:	4572      	cmp	r2, lr
 800a2d6:	d113      	bne.n	800a300 <_strtod_l+0x258>
 800a2d8:	182a      	adds	r2, r5, r0
 800a2da:	2a08      	cmp	r2, #8
 800a2dc:	f105 0501 	add.w	r5, r5, #1
 800a2e0:	4405      	add	r5, r0
 800a2e2:	dc1c      	bgt.n	800a31e <_strtod_l+0x276>
 800a2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2e6:	220a      	movs	r2, #10
 800a2e8:	fb02 3301 	mla	r3, r2, r1, r3
 800a2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2f2:	1c59      	adds	r1, r3, #1
 800a2f4:	911d      	str	r1, [sp, #116]	; 0x74
 800a2f6:	785b      	ldrb	r3, [r3, #1]
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	e7c9      	b.n	800a290 <_strtod_l+0x1e8>
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	e7d2      	b.n	800a2a6 <_strtod_l+0x1fe>
 800a300:	2a08      	cmp	r2, #8
 800a302:	dc04      	bgt.n	800a30e <_strtod_l+0x266>
 800a304:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a306:	434e      	muls	r6, r1
 800a308:	9609      	str	r6, [sp, #36]	; 0x24
 800a30a:	3201      	adds	r2, #1
 800a30c:	e7e2      	b.n	800a2d4 <_strtod_l+0x22c>
 800a30e:	f102 0c01 	add.w	ip, r2, #1
 800a312:	f1bc 0f10 	cmp.w	ip, #16
 800a316:	bfd8      	it	le
 800a318:	fb01 f909 	mulle.w	r9, r1, r9
 800a31c:	e7f5      	b.n	800a30a <_strtod_l+0x262>
 800a31e:	2d10      	cmp	r5, #16
 800a320:	bfdc      	itt	le
 800a322:	220a      	movle	r2, #10
 800a324:	fb02 3909 	mlale	r9, r2, r9, r3
 800a328:	e7e1      	b.n	800a2ee <_strtod_l+0x246>
 800a32a:	2300      	movs	r3, #0
 800a32c:	9307      	str	r3, [sp, #28]
 800a32e:	2201      	movs	r2, #1
 800a330:	e77c      	b.n	800a22c <_strtod_l+0x184>
 800a332:	f04f 0c00 	mov.w	ip, #0
 800a336:	f108 0302 	add.w	r3, r8, #2
 800a33a:	931d      	str	r3, [sp, #116]	; 0x74
 800a33c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a340:	e785      	b.n	800a24e <_strtod_l+0x1a6>
 800a342:	f04f 0c01 	mov.w	ip, #1
 800a346:	e7f6      	b.n	800a336 <_strtod_l+0x28e>
 800a348:	0800e5dc 	.word	0x0800e5dc
 800a34c:	0800e328 	.word	0x0800e328
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a356:	1c59      	adds	r1, r3, #1
 800a358:	911d      	str	r1, [sp, #116]	; 0x74
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	2b30      	cmp	r3, #48	; 0x30
 800a35e:	d0f9      	beq.n	800a354 <_strtod_l+0x2ac>
 800a360:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a364:	2908      	cmp	r1, #8
 800a366:	f63f af79 	bhi.w	800a25c <_strtod_l+0x1b4>
 800a36a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a36e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a370:	9308      	str	r3, [sp, #32]
 800a372:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a374:	1c59      	adds	r1, r3, #1
 800a376:	911d      	str	r1, [sp, #116]	; 0x74
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a37e:	2e09      	cmp	r6, #9
 800a380:	d937      	bls.n	800a3f2 <_strtod_l+0x34a>
 800a382:	9e08      	ldr	r6, [sp, #32]
 800a384:	1b89      	subs	r1, r1, r6
 800a386:	2908      	cmp	r1, #8
 800a388:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a38c:	dc02      	bgt.n	800a394 <_strtod_l+0x2ec>
 800a38e:	4576      	cmp	r6, lr
 800a390:	bfa8      	it	ge
 800a392:	4676      	movge	r6, lr
 800a394:	f1bc 0f00 	cmp.w	ip, #0
 800a398:	d000      	beq.n	800a39c <_strtod_l+0x2f4>
 800a39a:	4276      	negs	r6, r6
 800a39c:	2d00      	cmp	r5, #0
 800a39e:	d14f      	bne.n	800a440 <_strtod_l+0x398>
 800a3a0:	9904      	ldr	r1, [sp, #16]
 800a3a2:	4301      	orrs	r1, r0
 800a3a4:	f47f aec2 	bne.w	800a12c <_strtod_l+0x84>
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	f47f aedb 	bne.w	800a164 <_strtod_l+0xbc>
 800a3ae:	2b69      	cmp	r3, #105	; 0x69
 800a3b0:	d027      	beq.n	800a402 <_strtod_l+0x35a>
 800a3b2:	dc24      	bgt.n	800a3fe <_strtod_l+0x356>
 800a3b4:	2b49      	cmp	r3, #73	; 0x49
 800a3b6:	d024      	beq.n	800a402 <_strtod_l+0x35a>
 800a3b8:	2b4e      	cmp	r3, #78	; 0x4e
 800a3ba:	f47f aed3 	bne.w	800a164 <_strtod_l+0xbc>
 800a3be:	499e      	ldr	r1, [pc, #632]	; (800a638 <_strtod_l+0x590>)
 800a3c0:	a81d      	add	r0, sp, #116	; 0x74
 800a3c2:	f002 f8b7 	bl	800c534 <__match>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f43f aecc 	beq.w	800a164 <_strtod_l+0xbc>
 800a3cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b28      	cmp	r3, #40	; 0x28
 800a3d2:	d12d      	bne.n	800a430 <_strtod_l+0x388>
 800a3d4:	4999      	ldr	r1, [pc, #612]	; (800a63c <_strtod_l+0x594>)
 800a3d6:	aa20      	add	r2, sp, #128	; 0x80
 800a3d8:	a81d      	add	r0, sp, #116	; 0x74
 800a3da:	f002 f8bf 	bl	800c55c <__hexnan>
 800a3de:	2805      	cmp	r0, #5
 800a3e0:	d126      	bne.n	800a430 <_strtod_l+0x388>
 800a3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a3e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a3ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a3f0:	e69c      	b.n	800a12c <_strtod_l+0x84>
 800a3f2:	210a      	movs	r1, #10
 800a3f4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a3f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a3fc:	e7b9      	b.n	800a372 <_strtod_l+0x2ca>
 800a3fe:	2b6e      	cmp	r3, #110	; 0x6e
 800a400:	e7db      	b.n	800a3ba <_strtod_l+0x312>
 800a402:	498f      	ldr	r1, [pc, #572]	; (800a640 <_strtod_l+0x598>)
 800a404:	a81d      	add	r0, sp, #116	; 0x74
 800a406:	f002 f895 	bl	800c534 <__match>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	f43f aeaa 	beq.w	800a164 <_strtod_l+0xbc>
 800a410:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a412:	498c      	ldr	r1, [pc, #560]	; (800a644 <_strtod_l+0x59c>)
 800a414:	3b01      	subs	r3, #1
 800a416:	a81d      	add	r0, sp, #116	; 0x74
 800a418:	931d      	str	r3, [sp, #116]	; 0x74
 800a41a:	f002 f88b 	bl	800c534 <__match>
 800a41e:	b910      	cbnz	r0, 800a426 <_strtod_l+0x37e>
 800a420:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a422:	3301      	adds	r3, #1
 800a424:	931d      	str	r3, [sp, #116]	; 0x74
 800a426:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a654 <_strtod_l+0x5ac>
 800a42a:	f04f 0a00 	mov.w	sl, #0
 800a42e:	e67d      	b.n	800a12c <_strtod_l+0x84>
 800a430:	4885      	ldr	r0, [pc, #532]	; (800a648 <_strtod_l+0x5a0>)
 800a432:	f003 f9e1 	bl	800d7f8 <nan>
 800a436:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a43a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a43e:	e675      	b.n	800a12c <_strtod_l+0x84>
 800a440:	9b07      	ldr	r3, [sp, #28]
 800a442:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a444:	1af3      	subs	r3, r6, r3
 800a446:	2f00      	cmp	r7, #0
 800a448:	bf08      	it	eq
 800a44a:	462f      	moveq	r7, r5
 800a44c:	2d10      	cmp	r5, #16
 800a44e:	9308      	str	r3, [sp, #32]
 800a450:	46a8      	mov	r8, r5
 800a452:	bfa8      	it	ge
 800a454:	f04f 0810 	movge.w	r8, #16
 800a458:	f7f6 f854 	bl	8000504 <__aeabi_ui2d>
 800a45c:	2d09      	cmp	r5, #9
 800a45e:	4682      	mov	sl, r0
 800a460:	468b      	mov	fp, r1
 800a462:	dd13      	ble.n	800a48c <_strtod_l+0x3e4>
 800a464:	4b79      	ldr	r3, [pc, #484]	; (800a64c <_strtod_l+0x5a4>)
 800a466:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a46a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a46e:	f7f6 f8c3 	bl	80005f8 <__aeabi_dmul>
 800a472:	4682      	mov	sl, r0
 800a474:	4648      	mov	r0, r9
 800a476:	468b      	mov	fp, r1
 800a478:	f7f6 f844 	bl	8000504 <__aeabi_ui2d>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4650      	mov	r0, sl
 800a482:	4659      	mov	r1, fp
 800a484:	f7f5 ff02 	bl	800028c <__adddf3>
 800a488:	4682      	mov	sl, r0
 800a48a:	468b      	mov	fp, r1
 800a48c:	2d0f      	cmp	r5, #15
 800a48e:	dc38      	bgt.n	800a502 <_strtod_l+0x45a>
 800a490:	9b08      	ldr	r3, [sp, #32]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f43f ae4a 	beq.w	800a12c <_strtod_l+0x84>
 800a498:	dd24      	ble.n	800a4e4 <_strtod_l+0x43c>
 800a49a:	2b16      	cmp	r3, #22
 800a49c:	dc0b      	bgt.n	800a4b6 <_strtod_l+0x40e>
 800a49e:	4d6b      	ldr	r5, [pc, #428]	; (800a64c <_strtod_l+0x5a4>)
 800a4a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a4a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a4a8:	4652      	mov	r2, sl
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	f7f6 f8a4 	bl	80005f8 <__aeabi_dmul>
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	468b      	mov	fp, r1
 800a4b4:	e63a      	b.n	800a12c <_strtod_l+0x84>
 800a4b6:	9a08      	ldr	r2, [sp, #32]
 800a4b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	db20      	blt.n	800a502 <_strtod_l+0x45a>
 800a4c0:	4c62      	ldr	r4, [pc, #392]	; (800a64c <_strtod_l+0x5a4>)
 800a4c2:	f1c5 050f 	rsb	r5, r5, #15
 800a4c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4d2:	f7f6 f891 	bl	80005f8 <__aeabi_dmul>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	1b5d      	subs	r5, r3, r5
 800a4da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a4de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a4e2:	e7e3      	b.n	800a4ac <_strtod_l+0x404>
 800a4e4:	9b08      	ldr	r3, [sp, #32]
 800a4e6:	3316      	adds	r3, #22
 800a4e8:	db0b      	blt.n	800a502 <_strtod_l+0x45a>
 800a4ea:	9b07      	ldr	r3, [sp, #28]
 800a4ec:	4a57      	ldr	r2, [pc, #348]	; (800a64c <_strtod_l+0x5a4>)
 800a4ee:	1b9e      	subs	r6, r3, r6
 800a4f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a4f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4f8:	4650      	mov	r0, sl
 800a4fa:	4659      	mov	r1, fp
 800a4fc:	f7f6 f9a6 	bl	800084c <__aeabi_ddiv>
 800a500:	e7d6      	b.n	800a4b0 <_strtod_l+0x408>
 800a502:	9b08      	ldr	r3, [sp, #32]
 800a504:	eba5 0808 	sub.w	r8, r5, r8
 800a508:	4498      	add	r8, r3
 800a50a:	f1b8 0f00 	cmp.w	r8, #0
 800a50e:	dd71      	ble.n	800a5f4 <_strtod_l+0x54c>
 800a510:	f018 030f 	ands.w	r3, r8, #15
 800a514:	d00a      	beq.n	800a52c <_strtod_l+0x484>
 800a516:	494d      	ldr	r1, [pc, #308]	; (800a64c <_strtod_l+0x5a4>)
 800a518:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a51c:	4652      	mov	r2, sl
 800a51e:	465b      	mov	r3, fp
 800a520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	4682      	mov	sl, r0
 800a52a:	468b      	mov	fp, r1
 800a52c:	f038 080f 	bics.w	r8, r8, #15
 800a530:	d04d      	beq.n	800a5ce <_strtod_l+0x526>
 800a532:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a536:	dd22      	ble.n	800a57e <_strtod_l+0x4d6>
 800a538:	2500      	movs	r5, #0
 800a53a:	462e      	mov	r6, r5
 800a53c:	9509      	str	r5, [sp, #36]	; 0x24
 800a53e:	9507      	str	r5, [sp, #28]
 800a540:	2322      	movs	r3, #34	; 0x22
 800a542:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a654 <_strtod_l+0x5ac>
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	f04f 0a00 	mov.w	sl, #0
 800a54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f43f adec 	beq.w	800a12c <_strtod_l+0x84>
 800a554:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a556:	4620      	mov	r0, r4
 800a558:	f002 f962 	bl	800c820 <_Bfree>
 800a55c:	9907      	ldr	r1, [sp, #28]
 800a55e:	4620      	mov	r0, r4
 800a560:	f002 f95e 	bl	800c820 <_Bfree>
 800a564:	4631      	mov	r1, r6
 800a566:	4620      	mov	r0, r4
 800a568:	f002 f95a 	bl	800c820 <_Bfree>
 800a56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a56e:	4620      	mov	r0, r4
 800a570:	f002 f956 	bl	800c820 <_Bfree>
 800a574:	4629      	mov	r1, r5
 800a576:	4620      	mov	r0, r4
 800a578:	f002 f952 	bl	800c820 <_Bfree>
 800a57c:	e5d6      	b.n	800a12c <_strtod_l+0x84>
 800a57e:	2300      	movs	r3, #0
 800a580:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a584:	4650      	mov	r0, sl
 800a586:	4659      	mov	r1, fp
 800a588:	4699      	mov	r9, r3
 800a58a:	f1b8 0f01 	cmp.w	r8, #1
 800a58e:	dc21      	bgt.n	800a5d4 <_strtod_l+0x52c>
 800a590:	b10b      	cbz	r3, 800a596 <_strtod_l+0x4ee>
 800a592:	4682      	mov	sl, r0
 800a594:	468b      	mov	fp, r1
 800a596:	4b2e      	ldr	r3, [pc, #184]	; (800a650 <_strtod_l+0x5a8>)
 800a598:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a59c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a5a0:	4652      	mov	r2, sl
 800a5a2:	465b      	mov	r3, fp
 800a5a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	4b29      	ldr	r3, [pc, #164]	; (800a654 <_strtod_l+0x5ac>)
 800a5ae:	460a      	mov	r2, r1
 800a5b0:	400b      	ands	r3, r1
 800a5b2:	4929      	ldr	r1, [pc, #164]	; (800a658 <_strtod_l+0x5b0>)
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	4682      	mov	sl, r0
 800a5b8:	d8be      	bhi.n	800a538 <_strtod_l+0x490>
 800a5ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a5be:	428b      	cmp	r3, r1
 800a5c0:	bf86      	itte	hi
 800a5c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a65c <_strtod_l+0x5b4>
 800a5c6:	f04f 3aff 	movhi.w	sl, #4294967295
 800a5ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	e081      	b.n	800a6d8 <_strtod_l+0x630>
 800a5d4:	f018 0f01 	tst.w	r8, #1
 800a5d8:	d007      	beq.n	800a5ea <_strtod_l+0x542>
 800a5da:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <_strtod_l+0x5a8>)
 800a5dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	f109 0901 	add.w	r9, r9, #1
 800a5ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a5f2:	e7ca      	b.n	800a58a <_strtod_l+0x4e2>
 800a5f4:	d0eb      	beq.n	800a5ce <_strtod_l+0x526>
 800a5f6:	f1c8 0800 	rsb	r8, r8, #0
 800a5fa:	f018 020f 	ands.w	r2, r8, #15
 800a5fe:	d00a      	beq.n	800a616 <_strtod_l+0x56e>
 800a600:	4b12      	ldr	r3, [pc, #72]	; (800a64c <_strtod_l+0x5a4>)
 800a602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a606:	4650      	mov	r0, sl
 800a608:	4659      	mov	r1, fp
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	f7f6 f91d 	bl	800084c <__aeabi_ddiv>
 800a612:	4682      	mov	sl, r0
 800a614:	468b      	mov	fp, r1
 800a616:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a61a:	d0d8      	beq.n	800a5ce <_strtod_l+0x526>
 800a61c:	f1b8 0f1f 	cmp.w	r8, #31
 800a620:	dd1e      	ble.n	800a660 <_strtod_l+0x5b8>
 800a622:	2500      	movs	r5, #0
 800a624:	462e      	mov	r6, r5
 800a626:	9509      	str	r5, [sp, #36]	; 0x24
 800a628:	9507      	str	r5, [sp, #28]
 800a62a:	2322      	movs	r3, #34	; 0x22
 800a62c:	f04f 0a00 	mov.w	sl, #0
 800a630:	f04f 0b00 	mov.w	fp, #0
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	e789      	b.n	800a54c <_strtod_l+0x4a4>
 800a638:	0800e2f9 	.word	0x0800e2f9
 800a63c:	0800e33c 	.word	0x0800e33c
 800a640:	0800e2f1 	.word	0x0800e2f1
 800a644:	0800e47c 	.word	0x0800e47c
 800a648:	0800e798 	.word	0x0800e798
 800a64c:	0800e678 	.word	0x0800e678
 800a650:	0800e650 	.word	0x0800e650
 800a654:	7ff00000 	.word	0x7ff00000
 800a658:	7ca00000 	.word	0x7ca00000
 800a65c:	7fefffff 	.word	0x7fefffff
 800a660:	f018 0310 	ands.w	r3, r8, #16
 800a664:	bf18      	it	ne
 800a666:	236a      	movne	r3, #106	; 0x6a
 800a668:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800aa20 <_strtod_l+0x978>
 800a66c:	9304      	str	r3, [sp, #16]
 800a66e:	4650      	mov	r0, sl
 800a670:	4659      	mov	r1, fp
 800a672:	2300      	movs	r3, #0
 800a674:	f018 0f01 	tst.w	r8, #1
 800a678:	d004      	beq.n	800a684 <_strtod_l+0x5dc>
 800a67a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a67e:	f7f5 ffbb 	bl	80005f8 <__aeabi_dmul>
 800a682:	2301      	movs	r3, #1
 800a684:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a688:	f109 0908 	add.w	r9, r9, #8
 800a68c:	d1f2      	bne.n	800a674 <_strtod_l+0x5cc>
 800a68e:	b10b      	cbz	r3, 800a694 <_strtod_l+0x5ec>
 800a690:	4682      	mov	sl, r0
 800a692:	468b      	mov	fp, r1
 800a694:	9b04      	ldr	r3, [sp, #16]
 800a696:	b1bb      	cbz	r3, 800a6c8 <_strtod_l+0x620>
 800a698:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a69c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	4659      	mov	r1, fp
 800a6a4:	dd10      	ble.n	800a6c8 <_strtod_l+0x620>
 800a6a6:	2b1f      	cmp	r3, #31
 800a6a8:	f340 8128 	ble.w	800a8fc <_strtod_l+0x854>
 800a6ac:	2b34      	cmp	r3, #52	; 0x34
 800a6ae:	bfde      	ittt	le
 800a6b0:	3b20      	suble	r3, #32
 800a6b2:	f04f 32ff 	movle.w	r2, #4294967295
 800a6b6:	fa02 f303 	lslle.w	r3, r2, r3
 800a6ba:	f04f 0a00 	mov.w	sl, #0
 800a6be:	bfcc      	ite	gt
 800a6c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a6c4:	ea03 0b01 	andle.w	fp, r3, r1
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4650      	mov	r0, sl
 800a6ce:	4659      	mov	r1, fp
 800a6d0:	f7f6 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d1a4      	bne.n	800a622 <_strtod_l+0x57a>
 800a6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6de:	462b      	mov	r3, r5
 800a6e0:	463a      	mov	r2, r7
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f002 f908 	bl	800c8f8 <__s2b>
 800a6e8:	9009      	str	r0, [sp, #36]	; 0x24
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	f43f af24 	beq.w	800a538 <_strtod_l+0x490>
 800a6f0:	9b07      	ldr	r3, [sp, #28]
 800a6f2:	1b9e      	subs	r6, r3, r6
 800a6f4:	9b08      	ldr	r3, [sp, #32]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfb4      	ite	lt
 800a6fa:	4633      	movlt	r3, r6
 800a6fc:	2300      	movge	r3, #0
 800a6fe:	9310      	str	r3, [sp, #64]	; 0x40
 800a700:	9b08      	ldr	r3, [sp, #32]
 800a702:	2500      	movs	r5, #0
 800a704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a708:	9318      	str	r3, [sp, #96]	; 0x60
 800a70a:	462e      	mov	r6, r5
 800a70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70e:	4620      	mov	r0, r4
 800a710:	6859      	ldr	r1, [r3, #4]
 800a712:	f002 f845 	bl	800c7a0 <_Balloc>
 800a716:	9007      	str	r0, [sp, #28]
 800a718:	2800      	cmp	r0, #0
 800a71a:	f43f af11 	beq.w	800a540 <_strtod_l+0x498>
 800a71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a720:	691a      	ldr	r2, [r3, #16]
 800a722:	3202      	adds	r2, #2
 800a724:	f103 010c 	add.w	r1, r3, #12
 800a728:	0092      	lsls	r2, r2, #2
 800a72a:	300c      	adds	r0, #12
 800a72c:	f7fe fd5a 	bl	80091e4 <memcpy>
 800a730:	ec4b ab10 	vmov	d0, sl, fp
 800a734:	aa20      	add	r2, sp, #128	; 0x80
 800a736:	a91f      	add	r1, sp, #124	; 0x7c
 800a738:	4620      	mov	r0, r4
 800a73a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a73e:	f002 fc17 	bl	800cf70 <__d2b>
 800a742:	901e      	str	r0, [sp, #120]	; 0x78
 800a744:	2800      	cmp	r0, #0
 800a746:	f43f aefb 	beq.w	800a540 <_strtod_l+0x498>
 800a74a:	2101      	movs	r1, #1
 800a74c:	4620      	mov	r0, r4
 800a74e:	f002 f96d 	bl	800ca2c <__i2b>
 800a752:	4606      	mov	r6, r0
 800a754:	2800      	cmp	r0, #0
 800a756:	f43f aef3 	beq.w	800a540 <_strtod_l+0x498>
 800a75a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a75c:	9904      	ldr	r1, [sp, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfab      	itete	ge
 800a762:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a764:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a766:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a768:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a76c:	bfac      	ite	ge
 800a76e:	eb03 0902 	addge.w	r9, r3, r2
 800a772:	1ad7      	sublt	r7, r2, r3
 800a774:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a776:	eba3 0801 	sub.w	r8, r3, r1
 800a77a:	4490      	add	r8, r2
 800a77c:	4ba3      	ldr	r3, [pc, #652]	; (800aa0c <_strtod_l+0x964>)
 800a77e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a782:	4598      	cmp	r8, r3
 800a784:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a788:	f280 80cc 	bge.w	800a924 <_strtod_l+0x87c>
 800a78c:	eba3 0308 	sub.w	r3, r3, r8
 800a790:	2b1f      	cmp	r3, #31
 800a792:	eba2 0203 	sub.w	r2, r2, r3
 800a796:	f04f 0101 	mov.w	r1, #1
 800a79a:	f300 80b6 	bgt.w	800a90a <_strtod_l+0x862>
 800a79e:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a2:	9311      	str	r3, [sp, #68]	; 0x44
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a7a8:	eb09 0802 	add.w	r8, r9, r2
 800a7ac:	9b04      	ldr	r3, [sp, #16]
 800a7ae:	45c1      	cmp	r9, r8
 800a7b0:	4417      	add	r7, r2
 800a7b2:	441f      	add	r7, r3
 800a7b4:	464b      	mov	r3, r9
 800a7b6:	bfa8      	it	ge
 800a7b8:	4643      	movge	r3, r8
 800a7ba:	42bb      	cmp	r3, r7
 800a7bc:	bfa8      	it	ge
 800a7be:	463b      	movge	r3, r7
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bfc2      	ittt	gt
 800a7c4:	eba8 0803 	subgt.w	r8, r8, r3
 800a7c8:	1aff      	subgt	r7, r7, r3
 800a7ca:	eba9 0903 	subgt.w	r9, r9, r3
 800a7ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	dd17      	ble.n	800a804 <_strtod_l+0x75c>
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f002 f9e3 	bl	800cba4 <__pow5mult>
 800a7de:	4606      	mov	r6, r0
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	f43f aead 	beq.w	800a540 <_strtod_l+0x498>
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f002 f934 	bl	800ca58 <__multiply>
 800a7f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	f43f aea4 	beq.w	800a540 <_strtod_l+0x498>
 800a7f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f002 f810 	bl	800c820 <_Bfree>
 800a800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a802:	931e      	str	r3, [sp, #120]	; 0x78
 800a804:	f1b8 0f00 	cmp.w	r8, #0
 800a808:	f300 8091 	bgt.w	800a92e <_strtod_l+0x886>
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dd08      	ble.n	800a824 <_strtod_l+0x77c>
 800a812:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a814:	9907      	ldr	r1, [sp, #28]
 800a816:	4620      	mov	r0, r4
 800a818:	f002 f9c4 	bl	800cba4 <__pow5mult>
 800a81c:	9007      	str	r0, [sp, #28]
 800a81e:	2800      	cmp	r0, #0
 800a820:	f43f ae8e 	beq.w	800a540 <_strtod_l+0x498>
 800a824:	2f00      	cmp	r7, #0
 800a826:	dd08      	ble.n	800a83a <_strtod_l+0x792>
 800a828:	9907      	ldr	r1, [sp, #28]
 800a82a:	463a      	mov	r2, r7
 800a82c:	4620      	mov	r0, r4
 800a82e:	f002 fa13 	bl	800cc58 <__lshift>
 800a832:	9007      	str	r0, [sp, #28]
 800a834:	2800      	cmp	r0, #0
 800a836:	f43f ae83 	beq.w	800a540 <_strtod_l+0x498>
 800a83a:	f1b9 0f00 	cmp.w	r9, #0
 800a83e:	dd08      	ble.n	800a852 <_strtod_l+0x7aa>
 800a840:	4631      	mov	r1, r6
 800a842:	464a      	mov	r2, r9
 800a844:	4620      	mov	r0, r4
 800a846:	f002 fa07 	bl	800cc58 <__lshift>
 800a84a:	4606      	mov	r6, r0
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f43f ae77 	beq.w	800a540 <_strtod_l+0x498>
 800a852:	9a07      	ldr	r2, [sp, #28]
 800a854:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a856:	4620      	mov	r0, r4
 800a858:	f002 fa86 	bl	800cd68 <__mdiff>
 800a85c:	4605      	mov	r5, r0
 800a85e:	2800      	cmp	r0, #0
 800a860:	f43f ae6e 	beq.w	800a540 <_strtod_l+0x498>
 800a864:	68c3      	ldr	r3, [r0, #12]
 800a866:	930f      	str	r3, [sp, #60]	; 0x3c
 800a868:	2300      	movs	r3, #0
 800a86a:	60c3      	str	r3, [r0, #12]
 800a86c:	4631      	mov	r1, r6
 800a86e:	f002 fa5f 	bl	800cd30 <__mcmp>
 800a872:	2800      	cmp	r0, #0
 800a874:	da65      	bge.n	800a942 <_strtod_l+0x89a>
 800a876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a878:	ea53 030a 	orrs.w	r3, r3, sl
 800a87c:	f040 8087 	bne.w	800a98e <_strtod_l+0x8e6>
 800a880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a884:	2b00      	cmp	r3, #0
 800a886:	f040 8082 	bne.w	800a98e <_strtod_l+0x8e6>
 800a88a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a88e:	0d1b      	lsrs	r3, r3, #20
 800a890:	051b      	lsls	r3, r3, #20
 800a892:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a896:	d97a      	bls.n	800a98e <_strtod_l+0x8e6>
 800a898:	696b      	ldr	r3, [r5, #20]
 800a89a:	b913      	cbnz	r3, 800a8a2 <_strtod_l+0x7fa>
 800a89c:	692b      	ldr	r3, [r5, #16]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	dd75      	ble.n	800a98e <_strtod_l+0x8e6>
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f002 f9d6 	bl	800cc58 <__lshift>
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	f002 fa3e 	bl	800cd30 <__mcmp>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	dd6a      	ble.n	800a98e <_strtod_l+0x8e6>
 800a8b8:	9904      	ldr	r1, [sp, #16]
 800a8ba:	4a55      	ldr	r2, [pc, #340]	; (800aa10 <_strtod_l+0x968>)
 800a8bc:	465b      	mov	r3, fp
 800a8be:	2900      	cmp	r1, #0
 800a8c0:	f000 8085 	beq.w	800a9ce <_strtod_l+0x926>
 800a8c4:	ea02 010b 	and.w	r1, r2, fp
 800a8c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a8cc:	dc7f      	bgt.n	800a9ce <_strtod_l+0x926>
 800a8ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a8d2:	f77f aeaa 	ble.w	800a62a <_strtod_l+0x582>
 800a8d6:	4a4f      	ldr	r2, [pc, #316]	; (800aa14 <_strtod_l+0x96c>)
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a8de:	4650      	mov	r0, sl
 800a8e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a8e4:	4659      	mov	r1, fp
 800a8e6:	f7f5 fe87 	bl	80005f8 <__aeabi_dmul>
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4303      	orrs	r3, r0
 800a8ee:	bf08      	it	eq
 800a8f0:	2322      	moveq	r3, #34	; 0x22
 800a8f2:	4682      	mov	sl, r0
 800a8f4:	468b      	mov	fp, r1
 800a8f6:	bf08      	it	eq
 800a8f8:	6023      	streq	r3, [r4, #0]
 800a8fa:	e62b      	b.n	800a554 <_strtod_l+0x4ac>
 800a8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a900:	fa02 f303 	lsl.w	r3, r2, r3
 800a904:	ea03 0a0a 	and.w	sl, r3, sl
 800a908:	e6de      	b.n	800a6c8 <_strtod_l+0x620>
 800a90a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a90e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a912:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a916:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a91a:	fa01 f308 	lsl.w	r3, r1, r8
 800a91e:	930c      	str	r3, [sp, #48]	; 0x30
 800a920:	9111      	str	r1, [sp, #68]	; 0x44
 800a922:	e741      	b.n	800a7a8 <_strtod_l+0x700>
 800a924:	2300      	movs	r3, #0
 800a926:	930c      	str	r3, [sp, #48]	; 0x30
 800a928:	2301      	movs	r3, #1
 800a92a:	9311      	str	r3, [sp, #68]	; 0x44
 800a92c:	e73c      	b.n	800a7a8 <_strtod_l+0x700>
 800a92e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a930:	4642      	mov	r2, r8
 800a932:	4620      	mov	r0, r4
 800a934:	f002 f990 	bl	800cc58 <__lshift>
 800a938:	901e      	str	r0, [sp, #120]	; 0x78
 800a93a:	2800      	cmp	r0, #0
 800a93c:	f47f af66 	bne.w	800a80c <_strtod_l+0x764>
 800a940:	e5fe      	b.n	800a540 <_strtod_l+0x498>
 800a942:	465f      	mov	r7, fp
 800a944:	d16e      	bne.n	800aa24 <_strtod_l+0x97c>
 800a946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a94c:	b342      	cbz	r2, 800a9a0 <_strtod_l+0x8f8>
 800a94e:	4a32      	ldr	r2, [pc, #200]	; (800aa18 <_strtod_l+0x970>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d128      	bne.n	800a9a6 <_strtod_l+0x8fe>
 800a954:	9b04      	ldr	r3, [sp, #16]
 800a956:	4650      	mov	r0, sl
 800a958:	b1eb      	cbz	r3, 800a996 <_strtod_l+0x8ee>
 800a95a:	4a2d      	ldr	r2, [pc, #180]	; (800aa10 <_strtod_l+0x968>)
 800a95c:	403a      	ands	r2, r7
 800a95e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a962:	f04f 31ff 	mov.w	r1, #4294967295
 800a966:	d819      	bhi.n	800a99c <_strtod_l+0x8f4>
 800a968:	0d12      	lsrs	r2, r2, #20
 800a96a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a96e:	fa01 f303 	lsl.w	r3, r1, r3
 800a972:	4298      	cmp	r0, r3
 800a974:	d117      	bne.n	800a9a6 <_strtod_l+0x8fe>
 800a976:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <_strtod_l+0x974>)
 800a978:	429f      	cmp	r7, r3
 800a97a:	d102      	bne.n	800a982 <_strtod_l+0x8da>
 800a97c:	3001      	adds	r0, #1
 800a97e:	f43f addf 	beq.w	800a540 <_strtod_l+0x498>
 800a982:	4b23      	ldr	r3, [pc, #140]	; (800aa10 <_strtod_l+0x968>)
 800a984:	403b      	ands	r3, r7
 800a986:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a98a:	f04f 0a00 	mov.w	sl, #0
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1a0      	bne.n	800a8d6 <_strtod_l+0x82e>
 800a994:	e5de      	b.n	800a554 <_strtod_l+0x4ac>
 800a996:	f04f 33ff 	mov.w	r3, #4294967295
 800a99a:	e7ea      	b.n	800a972 <_strtod_l+0x8ca>
 800a99c:	460b      	mov	r3, r1
 800a99e:	e7e8      	b.n	800a972 <_strtod_l+0x8ca>
 800a9a0:	ea53 030a 	orrs.w	r3, r3, sl
 800a9a4:	d088      	beq.n	800a8b8 <_strtod_l+0x810>
 800a9a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a8:	b1db      	cbz	r3, 800a9e2 <_strtod_l+0x93a>
 800a9aa:	423b      	tst	r3, r7
 800a9ac:	d0ef      	beq.n	800a98e <_strtod_l+0x8e6>
 800a9ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9b0:	9a04      	ldr	r2, [sp, #16]
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	b1c3      	cbz	r3, 800a9ea <_strtod_l+0x942>
 800a9b8:	f7ff fb58 	bl	800a06c <sulp>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9c4:	f7f5 fc62 	bl	800028c <__adddf3>
 800a9c8:	4682      	mov	sl, r0
 800a9ca:	468b      	mov	fp, r1
 800a9cc:	e7df      	b.n	800a98e <_strtod_l+0x8e6>
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a9d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a9d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a9dc:	f04f 3aff 	mov.w	sl, #4294967295
 800a9e0:	e7d5      	b.n	800a98e <_strtod_l+0x8e6>
 800a9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9e4:	ea13 0f0a 	tst.w	r3, sl
 800a9e8:	e7e0      	b.n	800a9ac <_strtod_l+0x904>
 800a9ea:	f7ff fb3f 	bl	800a06c <sulp>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9f6:	f7f5 fc47 	bl	8000288 <__aeabi_dsub>
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4682      	mov	sl, r0
 800aa00:	468b      	mov	fp, r1
 800aa02:	f7f6 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d0c1      	beq.n	800a98e <_strtod_l+0x8e6>
 800aa0a:	e60e      	b.n	800a62a <_strtod_l+0x582>
 800aa0c:	fffffc02 	.word	0xfffffc02
 800aa10:	7ff00000 	.word	0x7ff00000
 800aa14:	39500000 	.word	0x39500000
 800aa18:	000fffff 	.word	0x000fffff
 800aa1c:	7fefffff 	.word	0x7fefffff
 800aa20:	0800e350 	.word	0x0800e350
 800aa24:	4631      	mov	r1, r6
 800aa26:	4628      	mov	r0, r5
 800aa28:	f002 fafe 	bl	800d028 <__ratio>
 800aa2c:	ec59 8b10 	vmov	r8, r9, d0
 800aa30:	ee10 0a10 	vmov	r0, s0
 800aa34:	2200      	movs	r2, #0
 800aa36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	f7f6 f858 	bl	8000af0 <__aeabi_dcmple>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d07c      	beq.n	800ab3e <_strtod_l+0xa96>
 800aa44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d04c      	beq.n	800aae4 <_strtod_l+0xa3c>
 800aa4a:	4b95      	ldr	r3, [pc, #596]	; (800aca0 <_strtod_l+0xbf8>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800aa52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aca0 <_strtod_l+0xbf8>
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	4b92      	ldr	r3, [pc, #584]	; (800aca4 <_strtod_l+0xbfc>)
 800aa5c:	403b      	ands	r3, r7
 800aa5e:	9311      	str	r3, [sp, #68]	; 0x44
 800aa60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa62:	4b91      	ldr	r3, [pc, #580]	; (800aca8 <_strtod_l+0xc00>)
 800aa64:	429a      	cmp	r2, r3
 800aa66:	f040 80b2 	bne.w	800abce <_strtod_l+0xb26>
 800aa6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa72:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aa76:	ec4b ab10 	vmov	d0, sl, fp
 800aa7a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800aa7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aa82:	f002 f9f9 	bl	800ce78 <__ulp>
 800aa86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa8a:	ec53 2b10 	vmov	r2, r3, d0
 800aa8e:	f7f5 fdb3 	bl	80005f8 <__aeabi_dmul>
 800aa92:	4652      	mov	r2, sl
 800aa94:	465b      	mov	r3, fp
 800aa96:	f7f5 fbf9 	bl	800028c <__adddf3>
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4981      	ldr	r1, [pc, #516]	; (800aca4 <_strtod_l+0xbfc>)
 800aa9e:	4a83      	ldr	r2, [pc, #524]	; (800acac <_strtod_l+0xc04>)
 800aaa0:	4019      	ands	r1, r3
 800aaa2:	4291      	cmp	r1, r2
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	d95e      	bls.n	800ab66 <_strtod_l+0xabe>
 800aaa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaaa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d103      	bne.n	800aaba <_strtod_l+0xa12>
 800aab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab4:	3301      	adds	r3, #1
 800aab6:	f43f ad43 	beq.w	800a540 <_strtod_l+0x498>
 800aaba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800acb8 <_strtod_l+0xc10>
 800aabe:	f04f 3aff 	mov.w	sl, #4294967295
 800aac2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aac4:	4620      	mov	r0, r4
 800aac6:	f001 feab 	bl	800c820 <_Bfree>
 800aaca:	9907      	ldr	r1, [sp, #28]
 800aacc:	4620      	mov	r0, r4
 800aace:	f001 fea7 	bl	800c820 <_Bfree>
 800aad2:	4631      	mov	r1, r6
 800aad4:	4620      	mov	r0, r4
 800aad6:	f001 fea3 	bl	800c820 <_Bfree>
 800aada:	4629      	mov	r1, r5
 800aadc:	4620      	mov	r0, r4
 800aade:	f001 fe9f 	bl	800c820 <_Bfree>
 800aae2:	e613      	b.n	800a70c <_strtod_l+0x664>
 800aae4:	f1ba 0f00 	cmp.w	sl, #0
 800aae8:	d11b      	bne.n	800ab22 <_strtod_l+0xa7a>
 800aaea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaee:	b9f3      	cbnz	r3, 800ab2e <_strtod_l+0xa86>
 800aaf0:	4b6b      	ldr	r3, [pc, #428]	; (800aca0 <_strtod_l+0xbf8>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f7f5 fff0 	bl	8000adc <__aeabi_dcmplt>
 800aafc:	b9d0      	cbnz	r0, 800ab34 <_strtod_l+0xa8c>
 800aafe:	4640      	mov	r0, r8
 800ab00:	4649      	mov	r1, r9
 800ab02:	4b6b      	ldr	r3, [pc, #428]	; (800acb0 <_strtod_l+0xc08>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	f7f5 fd77 	bl	80005f8 <__aeabi_dmul>
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4689      	mov	r9, r1
 800ab0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab12:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ab16:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab18:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ab1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ab20:	e79b      	b.n	800aa5a <_strtod_l+0x9b2>
 800ab22:	f1ba 0f01 	cmp.w	sl, #1
 800ab26:	d102      	bne.n	800ab2e <_strtod_l+0xa86>
 800ab28:	2f00      	cmp	r7, #0
 800ab2a:	f43f ad7e 	beq.w	800a62a <_strtod_l+0x582>
 800ab2e:	4b61      	ldr	r3, [pc, #388]	; (800acb4 <_strtod_l+0xc0c>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	e78c      	b.n	800aa4e <_strtod_l+0x9a6>
 800ab34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800acb0 <_strtod_l+0xc08>
 800ab38:	f04f 0800 	mov.w	r8, #0
 800ab3c:	e7e7      	b.n	800ab0e <_strtod_l+0xa66>
 800ab3e:	4b5c      	ldr	r3, [pc, #368]	; (800acb0 <_strtod_l+0xc08>)
 800ab40:	4640      	mov	r0, r8
 800ab42:	4649      	mov	r1, r9
 800ab44:	2200      	movs	r2, #0
 800ab46:	f7f5 fd57 	bl	80005f8 <__aeabi_dmul>
 800ab4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	4689      	mov	r9, r1
 800ab50:	b933      	cbnz	r3, 800ab60 <_strtod_l+0xab8>
 800ab52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab56:	9012      	str	r0, [sp, #72]	; 0x48
 800ab58:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ab5e:	e7dd      	b.n	800ab1c <_strtod_l+0xa74>
 800ab60:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ab64:	e7f9      	b.n	800ab5a <_strtod_l+0xab2>
 800ab66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ab6a:	9b04      	ldr	r3, [sp, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1a8      	bne.n	800aac2 <_strtod_l+0xa1a>
 800ab70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab76:	0d1b      	lsrs	r3, r3, #20
 800ab78:	051b      	lsls	r3, r3, #20
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d1a1      	bne.n	800aac2 <_strtod_l+0xa1a>
 800ab7e:	4640      	mov	r0, r8
 800ab80:	4649      	mov	r1, r9
 800ab82:	f7f6 f899 	bl	8000cb8 <__aeabi_d2lz>
 800ab86:	f7f5 fd09 	bl	800059c <__aeabi_l2d>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4640      	mov	r0, r8
 800ab90:	4649      	mov	r1, r9
 800ab92:	f7f5 fb79 	bl	8000288 <__aeabi_dsub>
 800ab96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab9c:	ea43 030a 	orr.w	r3, r3, sl
 800aba0:	4313      	orrs	r3, r2
 800aba2:	4680      	mov	r8, r0
 800aba4:	4689      	mov	r9, r1
 800aba6:	d053      	beq.n	800ac50 <_strtod_l+0xba8>
 800aba8:	a335      	add	r3, pc, #212	; (adr r3, 800ac80 <_strtod_l+0xbd8>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 ff95 	bl	8000adc <__aeabi_dcmplt>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	f47f acce 	bne.w	800a554 <_strtod_l+0x4ac>
 800abb8:	a333      	add	r3, pc, #204	; (adr r3, 800ac88 <_strtod_l+0xbe0>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	4640      	mov	r0, r8
 800abc0:	4649      	mov	r1, r9
 800abc2:	f7f5 ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f43f af7b 	beq.w	800aac2 <_strtod_l+0xa1a>
 800abcc:	e4c2      	b.n	800a554 <_strtod_l+0x4ac>
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	b333      	cbz	r3, 800ac20 <_strtod_l+0xb78>
 800abd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800abd8:	d822      	bhi.n	800ac20 <_strtod_l+0xb78>
 800abda:	a32d      	add	r3, pc, #180	; (adr r3, 800ac90 <_strtod_l+0xbe8>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 ff84 	bl	8000af0 <__aeabi_dcmple>
 800abe8:	b1a0      	cbz	r0, 800ac14 <_strtod_l+0xb6c>
 800abea:	4649      	mov	r1, r9
 800abec:	4640      	mov	r0, r8
 800abee:	f7f5 ffdb 	bl	8000ba8 <__aeabi_d2uiz>
 800abf2:	2801      	cmp	r0, #1
 800abf4:	bf38      	it	cc
 800abf6:	2001      	movcc	r0, #1
 800abf8:	f7f5 fc84 	bl	8000504 <__aeabi_ui2d>
 800abfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abfe:	4680      	mov	r8, r0
 800ac00:	4689      	mov	r9, r1
 800ac02:	bb13      	cbnz	r3, 800ac4a <_strtod_l+0xba2>
 800ac04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac08:	9014      	str	r0, [sp, #80]	; 0x50
 800ac0a:	9315      	str	r3, [sp, #84]	; 0x54
 800ac0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ac10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ac14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ac1c:	1a9b      	subs	r3, r3, r2
 800ac1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ac28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac2c:	f002 f924 	bl	800ce78 <__ulp>
 800ac30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac34:	ec53 2b10 	vmov	r2, r3, d0
 800ac38:	f7f5 fcde 	bl	80005f8 <__aeabi_dmul>
 800ac3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac40:	f7f5 fb24 	bl	800028c <__adddf3>
 800ac44:	4682      	mov	sl, r0
 800ac46:	468b      	mov	fp, r1
 800ac48:	e78f      	b.n	800ab6a <_strtod_l+0xac2>
 800ac4a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ac4e:	e7dd      	b.n	800ac0c <_strtod_l+0xb64>
 800ac50:	a311      	add	r3, pc, #68	; (adr r3, 800ac98 <_strtod_l+0xbf0>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 ff41 	bl	8000adc <__aeabi_dcmplt>
 800ac5a:	e7b4      	b.n	800abc6 <_strtod_l+0xb1e>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	930e      	str	r3, [sp, #56]	; 0x38
 800ac60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	f7ff ba65 	b.w	800a134 <_strtod_l+0x8c>
 800ac6a:	2b65      	cmp	r3, #101	; 0x65
 800ac6c:	f43f ab5d 	beq.w	800a32a <_strtod_l+0x282>
 800ac70:	2b45      	cmp	r3, #69	; 0x45
 800ac72:	f43f ab5a 	beq.w	800a32a <_strtod_l+0x282>
 800ac76:	2201      	movs	r2, #1
 800ac78:	f7ff bb92 	b.w	800a3a0 <_strtod_l+0x2f8>
 800ac7c:	f3af 8000 	nop.w
 800ac80:	94a03595 	.word	0x94a03595
 800ac84:	3fdfffff 	.word	0x3fdfffff
 800ac88:	35afe535 	.word	0x35afe535
 800ac8c:	3fe00000 	.word	0x3fe00000
 800ac90:	ffc00000 	.word	0xffc00000
 800ac94:	41dfffff 	.word	0x41dfffff
 800ac98:	94a03595 	.word	0x94a03595
 800ac9c:	3fcfffff 	.word	0x3fcfffff
 800aca0:	3ff00000 	.word	0x3ff00000
 800aca4:	7ff00000 	.word	0x7ff00000
 800aca8:	7fe00000 	.word	0x7fe00000
 800acac:	7c9fffff 	.word	0x7c9fffff
 800acb0:	3fe00000 	.word	0x3fe00000
 800acb4:	bff00000 	.word	0xbff00000
 800acb8:	7fefffff 	.word	0x7fefffff

0800acbc <_strtod_r>:
 800acbc:	4b01      	ldr	r3, [pc, #4]	; (800acc4 <_strtod_r+0x8>)
 800acbe:	f7ff b9f3 	b.w	800a0a8 <_strtod_l>
 800acc2:	bf00      	nop
 800acc4:	20000074 	.word	0x20000074

0800acc8 <_strtol_l.isra.0>:
 800acc8:	2b01      	cmp	r3, #1
 800acca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acce:	d001      	beq.n	800acd4 <_strtol_l.isra.0+0xc>
 800acd0:	2b24      	cmp	r3, #36	; 0x24
 800acd2:	d906      	bls.n	800ace2 <_strtol_l.isra.0+0x1a>
 800acd4:	f7fe fa5c 	bl	8009190 <__errno>
 800acd8:	2316      	movs	r3, #22
 800acda:	6003      	str	r3, [r0, #0]
 800acdc:	2000      	movs	r0, #0
 800acde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace2:	4f3a      	ldr	r7, [pc, #232]	; (800adcc <_strtol_l.isra.0+0x104>)
 800ace4:	468e      	mov	lr, r1
 800ace6:	4676      	mov	r6, lr
 800ace8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800acec:	5de5      	ldrb	r5, [r4, r7]
 800acee:	f015 0508 	ands.w	r5, r5, #8
 800acf2:	d1f8      	bne.n	800ace6 <_strtol_l.isra.0+0x1e>
 800acf4:	2c2d      	cmp	r4, #45	; 0x2d
 800acf6:	d134      	bne.n	800ad62 <_strtol_l.isra.0+0x9a>
 800acf8:	f89e 4000 	ldrb.w	r4, [lr]
 800acfc:	f04f 0801 	mov.w	r8, #1
 800ad00:	f106 0e02 	add.w	lr, r6, #2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d05c      	beq.n	800adc2 <_strtol_l.isra.0+0xfa>
 800ad08:	2b10      	cmp	r3, #16
 800ad0a:	d10c      	bne.n	800ad26 <_strtol_l.isra.0+0x5e>
 800ad0c:	2c30      	cmp	r4, #48	; 0x30
 800ad0e:	d10a      	bne.n	800ad26 <_strtol_l.isra.0+0x5e>
 800ad10:	f89e 4000 	ldrb.w	r4, [lr]
 800ad14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad18:	2c58      	cmp	r4, #88	; 0x58
 800ad1a:	d14d      	bne.n	800adb8 <_strtol_l.isra.0+0xf0>
 800ad1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ad20:	2310      	movs	r3, #16
 800ad22:	f10e 0e02 	add.w	lr, lr, #2
 800ad26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ad2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad2e:	2600      	movs	r6, #0
 800ad30:	fbbc f9f3 	udiv	r9, ip, r3
 800ad34:	4635      	mov	r5, r6
 800ad36:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ad3e:	2f09      	cmp	r7, #9
 800ad40:	d818      	bhi.n	800ad74 <_strtol_l.isra.0+0xac>
 800ad42:	463c      	mov	r4, r7
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	dd24      	ble.n	800ad92 <_strtol_l.isra.0+0xca>
 800ad48:	2e00      	cmp	r6, #0
 800ad4a:	db1f      	blt.n	800ad8c <_strtol_l.isra.0+0xc4>
 800ad4c:	45a9      	cmp	r9, r5
 800ad4e:	d31d      	bcc.n	800ad8c <_strtol_l.isra.0+0xc4>
 800ad50:	d101      	bne.n	800ad56 <_strtol_l.isra.0+0x8e>
 800ad52:	45a2      	cmp	sl, r4
 800ad54:	db1a      	blt.n	800ad8c <_strtol_l.isra.0+0xc4>
 800ad56:	fb05 4503 	mla	r5, r5, r3, r4
 800ad5a:	2601      	movs	r6, #1
 800ad5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ad60:	e7eb      	b.n	800ad3a <_strtol_l.isra.0+0x72>
 800ad62:	2c2b      	cmp	r4, #43	; 0x2b
 800ad64:	bf08      	it	eq
 800ad66:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ad6a:	46a8      	mov	r8, r5
 800ad6c:	bf08      	it	eq
 800ad6e:	f106 0e02 	addeq.w	lr, r6, #2
 800ad72:	e7c7      	b.n	800ad04 <_strtol_l.isra.0+0x3c>
 800ad74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ad78:	2f19      	cmp	r7, #25
 800ad7a:	d801      	bhi.n	800ad80 <_strtol_l.isra.0+0xb8>
 800ad7c:	3c37      	subs	r4, #55	; 0x37
 800ad7e:	e7e1      	b.n	800ad44 <_strtol_l.isra.0+0x7c>
 800ad80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ad84:	2f19      	cmp	r7, #25
 800ad86:	d804      	bhi.n	800ad92 <_strtol_l.isra.0+0xca>
 800ad88:	3c57      	subs	r4, #87	; 0x57
 800ad8a:	e7db      	b.n	800ad44 <_strtol_l.isra.0+0x7c>
 800ad8c:	f04f 36ff 	mov.w	r6, #4294967295
 800ad90:	e7e4      	b.n	800ad5c <_strtol_l.isra.0+0x94>
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	da05      	bge.n	800ada2 <_strtol_l.isra.0+0xda>
 800ad96:	2322      	movs	r3, #34	; 0x22
 800ad98:	6003      	str	r3, [r0, #0]
 800ad9a:	4665      	mov	r5, ip
 800ad9c:	b942      	cbnz	r2, 800adb0 <_strtol_l.isra.0+0xe8>
 800ad9e:	4628      	mov	r0, r5
 800ada0:	e79d      	b.n	800acde <_strtol_l.isra.0+0x16>
 800ada2:	f1b8 0f00 	cmp.w	r8, #0
 800ada6:	d000      	beq.n	800adaa <_strtol_l.isra.0+0xe2>
 800ada8:	426d      	negs	r5, r5
 800adaa:	2a00      	cmp	r2, #0
 800adac:	d0f7      	beq.n	800ad9e <_strtol_l.isra.0+0xd6>
 800adae:	b10e      	cbz	r6, 800adb4 <_strtol_l.isra.0+0xec>
 800adb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800adb4:	6011      	str	r1, [r2, #0]
 800adb6:	e7f2      	b.n	800ad9e <_strtol_l.isra.0+0xd6>
 800adb8:	2430      	movs	r4, #48	; 0x30
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1b3      	bne.n	800ad26 <_strtol_l.isra.0+0x5e>
 800adbe:	2308      	movs	r3, #8
 800adc0:	e7b1      	b.n	800ad26 <_strtol_l.isra.0+0x5e>
 800adc2:	2c30      	cmp	r4, #48	; 0x30
 800adc4:	d0a4      	beq.n	800ad10 <_strtol_l.isra.0+0x48>
 800adc6:	230a      	movs	r3, #10
 800adc8:	e7ad      	b.n	800ad26 <_strtol_l.isra.0+0x5e>
 800adca:	bf00      	nop
 800adcc:	0800e379 	.word	0x0800e379

0800add0 <_strtol_r>:
 800add0:	f7ff bf7a 	b.w	800acc8 <_strtol_l.isra.0>

0800add4 <__swbuf_r>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	460e      	mov	r6, r1
 800add8:	4614      	mov	r4, r2
 800adda:	4605      	mov	r5, r0
 800addc:	b118      	cbz	r0, 800ade6 <__swbuf_r+0x12>
 800adde:	6983      	ldr	r3, [r0, #24]
 800ade0:	b90b      	cbnz	r3, 800ade6 <__swbuf_r+0x12>
 800ade2:	f001 f84b 	bl	800be7c <__sinit>
 800ade6:	4b21      	ldr	r3, [pc, #132]	; (800ae6c <__swbuf_r+0x98>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	d12b      	bne.n	800ae44 <__swbuf_r+0x70>
 800adec:	686c      	ldr	r4, [r5, #4]
 800adee:	69a3      	ldr	r3, [r4, #24]
 800adf0:	60a3      	str	r3, [r4, #8]
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	071a      	lsls	r2, r3, #28
 800adf6:	d52f      	bpl.n	800ae58 <__swbuf_r+0x84>
 800adf8:	6923      	ldr	r3, [r4, #16]
 800adfa:	b36b      	cbz	r3, 800ae58 <__swbuf_r+0x84>
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	6820      	ldr	r0, [r4, #0]
 800ae00:	1ac0      	subs	r0, r0, r3
 800ae02:	6963      	ldr	r3, [r4, #20]
 800ae04:	b2f6      	uxtb	r6, r6
 800ae06:	4283      	cmp	r3, r0
 800ae08:	4637      	mov	r7, r6
 800ae0a:	dc04      	bgt.n	800ae16 <__swbuf_r+0x42>
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 ffa0 	bl	800bd54 <_fflush_r>
 800ae14:	bb30      	cbnz	r0, 800ae64 <__swbuf_r+0x90>
 800ae16:	68a3      	ldr	r3, [r4, #8]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	60a3      	str	r3, [r4, #8]
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	6022      	str	r2, [r4, #0]
 800ae22:	701e      	strb	r6, [r3, #0]
 800ae24:	6963      	ldr	r3, [r4, #20]
 800ae26:	3001      	adds	r0, #1
 800ae28:	4283      	cmp	r3, r0
 800ae2a:	d004      	beq.n	800ae36 <__swbuf_r+0x62>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	07db      	lsls	r3, r3, #31
 800ae30:	d506      	bpl.n	800ae40 <__swbuf_r+0x6c>
 800ae32:	2e0a      	cmp	r6, #10
 800ae34:	d104      	bne.n	800ae40 <__swbuf_r+0x6c>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f000 ff8b 	bl	800bd54 <_fflush_r>
 800ae3e:	b988      	cbnz	r0, 800ae64 <__swbuf_r+0x90>
 800ae40:	4638      	mov	r0, r7
 800ae42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae44:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <__swbuf_r+0x9c>)
 800ae46:	429c      	cmp	r4, r3
 800ae48:	d101      	bne.n	800ae4e <__swbuf_r+0x7a>
 800ae4a:	68ac      	ldr	r4, [r5, #8]
 800ae4c:	e7cf      	b.n	800adee <__swbuf_r+0x1a>
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <__swbuf_r+0xa0>)
 800ae50:	429c      	cmp	r4, r3
 800ae52:	bf08      	it	eq
 800ae54:	68ec      	ldreq	r4, [r5, #12]
 800ae56:	e7ca      	b.n	800adee <__swbuf_r+0x1a>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f000 f80c 	bl	800ae78 <__swsetup_r>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d0cb      	beq.n	800adfc <__swbuf_r+0x28>
 800ae64:	f04f 37ff 	mov.w	r7, #4294967295
 800ae68:	e7ea      	b.n	800ae40 <__swbuf_r+0x6c>
 800ae6a:	bf00      	nop
 800ae6c:	0800e530 	.word	0x0800e530
 800ae70:	0800e550 	.word	0x0800e550
 800ae74:	0800e510 	.word	0x0800e510

0800ae78 <__swsetup_r>:
 800ae78:	4b32      	ldr	r3, [pc, #200]	; (800af44 <__swsetup_r+0xcc>)
 800ae7a:	b570      	push	{r4, r5, r6, lr}
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460c      	mov	r4, r1
 800ae82:	b125      	cbz	r5, 800ae8e <__swsetup_r+0x16>
 800ae84:	69ab      	ldr	r3, [r5, #24]
 800ae86:	b913      	cbnz	r3, 800ae8e <__swsetup_r+0x16>
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 fff7 	bl	800be7c <__sinit>
 800ae8e:	4b2e      	ldr	r3, [pc, #184]	; (800af48 <__swsetup_r+0xd0>)
 800ae90:	429c      	cmp	r4, r3
 800ae92:	d10f      	bne.n	800aeb4 <__swsetup_r+0x3c>
 800ae94:	686c      	ldr	r4, [r5, #4]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae9c:	0719      	lsls	r1, r3, #28
 800ae9e:	d42c      	bmi.n	800aefa <__swsetup_r+0x82>
 800aea0:	06dd      	lsls	r5, r3, #27
 800aea2:	d411      	bmi.n	800aec8 <__swsetup_r+0x50>
 800aea4:	2309      	movs	r3, #9
 800aea6:	6033      	str	r3, [r6, #0]
 800aea8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	e03e      	b.n	800af32 <__swsetup_r+0xba>
 800aeb4:	4b25      	ldr	r3, [pc, #148]	; (800af4c <__swsetup_r+0xd4>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d101      	bne.n	800aebe <__swsetup_r+0x46>
 800aeba:	68ac      	ldr	r4, [r5, #8]
 800aebc:	e7eb      	b.n	800ae96 <__swsetup_r+0x1e>
 800aebe:	4b24      	ldr	r3, [pc, #144]	; (800af50 <__swsetup_r+0xd8>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	bf08      	it	eq
 800aec4:	68ec      	ldreq	r4, [r5, #12]
 800aec6:	e7e6      	b.n	800ae96 <__swsetup_r+0x1e>
 800aec8:	0758      	lsls	r0, r3, #29
 800aeca:	d512      	bpl.n	800aef2 <__swsetup_r+0x7a>
 800aecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aece:	b141      	cbz	r1, 800aee2 <__swsetup_r+0x6a>
 800aed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed4:	4299      	cmp	r1, r3
 800aed6:	d002      	beq.n	800aede <__swsetup_r+0x66>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f002 f92b 	bl	800d134 <_free_r>
 800aede:	2300      	movs	r3, #0
 800aee0:	6363      	str	r3, [r4, #52]	; 0x34
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	2300      	movs	r3, #0
 800aeec:	6063      	str	r3, [r4, #4]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	f043 0308 	orr.w	r3, r3, #8
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	b94b      	cbnz	r3, 800af12 <__swsetup_r+0x9a>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af08:	d003      	beq.n	800af12 <__swsetup_r+0x9a>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4630      	mov	r0, r6
 800af0e:	f001 fbed 	bl	800c6ec <__smakebuf_r>
 800af12:	89a0      	ldrh	r0, [r4, #12]
 800af14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af18:	f010 0301 	ands.w	r3, r0, #1
 800af1c:	d00a      	beq.n	800af34 <__swsetup_r+0xbc>
 800af1e:	2300      	movs	r3, #0
 800af20:	60a3      	str	r3, [r4, #8]
 800af22:	6963      	ldr	r3, [r4, #20]
 800af24:	425b      	negs	r3, r3
 800af26:	61a3      	str	r3, [r4, #24]
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	b943      	cbnz	r3, 800af3e <__swsetup_r+0xc6>
 800af2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af30:	d1ba      	bne.n	800aea8 <__swsetup_r+0x30>
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	0781      	lsls	r1, r0, #30
 800af36:	bf58      	it	pl
 800af38:	6963      	ldrpl	r3, [r4, #20]
 800af3a:	60a3      	str	r3, [r4, #8]
 800af3c:	e7f4      	b.n	800af28 <__swsetup_r+0xb0>
 800af3e:	2000      	movs	r0, #0
 800af40:	e7f7      	b.n	800af32 <__swsetup_r+0xba>
 800af42:	bf00      	nop
 800af44:	2000000c 	.word	0x2000000c
 800af48:	0800e530 	.word	0x0800e530
 800af4c:	0800e550 	.word	0x0800e550
 800af50:	0800e510 	.word	0x0800e510

0800af54 <quorem>:
 800af54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	6903      	ldr	r3, [r0, #16]
 800af5a:	690c      	ldr	r4, [r1, #16]
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	4607      	mov	r7, r0
 800af60:	f2c0 8081 	blt.w	800b066 <quorem+0x112>
 800af64:	3c01      	subs	r4, #1
 800af66:	f101 0814 	add.w	r8, r1, #20
 800af6a:	f100 0514 	add.w	r5, r0, #20
 800af6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af72:	9301      	str	r3, [sp, #4]
 800af74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af7c:	3301      	adds	r3, #1
 800af7e:	429a      	cmp	r2, r3
 800af80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af88:	fbb2 f6f3 	udiv	r6, r2, r3
 800af8c:	d331      	bcc.n	800aff2 <quorem+0x9e>
 800af8e:	f04f 0e00 	mov.w	lr, #0
 800af92:	4640      	mov	r0, r8
 800af94:	46ac      	mov	ip, r5
 800af96:	46f2      	mov	sl, lr
 800af98:	f850 2b04 	ldr.w	r2, [r0], #4
 800af9c:	b293      	uxth	r3, r2
 800af9e:	fb06 e303 	mla	r3, r6, r3, lr
 800afa2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	ebaa 0303 	sub.w	r3, sl, r3
 800afac:	0c12      	lsrs	r2, r2, #16
 800afae:	f8dc a000 	ldr.w	sl, [ip]
 800afb2:	fb06 e202 	mla	r2, r6, r2, lr
 800afb6:	fa13 f38a 	uxtah	r3, r3, sl
 800afba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afbe:	fa1f fa82 	uxth.w	sl, r2
 800afc2:	f8dc 2000 	ldr.w	r2, [ip]
 800afc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800afca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afce:	b29b      	uxth	r3, r3
 800afd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afd4:	4581      	cmp	r9, r0
 800afd6:	f84c 3b04 	str.w	r3, [ip], #4
 800afda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afde:	d2db      	bcs.n	800af98 <quorem+0x44>
 800afe0:	f855 300b 	ldr.w	r3, [r5, fp]
 800afe4:	b92b      	cbnz	r3, 800aff2 <quorem+0x9e>
 800afe6:	9b01      	ldr	r3, [sp, #4]
 800afe8:	3b04      	subs	r3, #4
 800afea:	429d      	cmp	r5, r3
 800afec:	461a      	mov	r2, r3
 800afee:	d32e      	bcc.n	800b04e <quorem+0xfa>
 800aff0:	613c      	str	r4, [r7, #16]
 800aff2:	4638      	mov	r0, r7
 800aff4:	f001 fe9c 	bl	800cd30 <__mcmp>
 800aff8:	2800      	cmp	r0, #0
 800affa:	db24      	blt.n	800b046 <quorem+0xf2>
 800affc:	3601      	adds	r6, #1
 800affe:	4628      	mov	r0, r5
 800b000:	f04f 0c00 	mov.w	ip, #0
 800b004:	f858 2b04 	ldr.w	r2, [r8], #4
 800b008:	f8d0 e000 	ldr.w	lr, [r0]
 800b00c:	b293      	uxth	r3, r2
 800b00e:	ebac 0303 	sub.w	r3, ip, r3
 800b012:	0c12      	lsrs	r2, r2, #16
 800b014:	fa13 f38e 	uxtah	r3, r3, lr
 800b018:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b01c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b020:	b29b      	uxth	r3, r3
 800b022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b026:	45c1      	cmp	r9, r8
 800b028:	f840 3b04 	str.w	r3, [r0], #4
 800b02c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b030:	d2e8      	bcs.n	800b004 <quorem+0xb0>
 800b032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b03a:	b922      	cbnz	r2, 800b046 <quorem+0xf2>
 800b03c:	3b04      	subs	r3, #4
 800b03e:	429d      	cmp	r5, r3
 800b040:	461a      	mov	r2, r3
 800b042:	d30a      	bcc.n	800b05a <quorem+0x106>
 800b044:	613c      	str	r4, [r7, #16]
 800b046:	4630      	mov	r0, r6
 800b048:	b003      	add	sp, #12
 800b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	3b04      	subs	r3, #4
 800b052:	2a00      	cmp	r2, #0
 800b054:	d1cc      	bne.n	800aff0 <quorem+0x9c>
 800b056:	3c01      	subs	r4, #1
 800b058:	e7c7      	b.n	800afea <quorem+0x96>
 800b05a:	6812      	ldr	r2, [r2, #0]
 800b05c:	3b04      	subs	r3, #4
 800b05e:	2a00      	cmp	r2, #0
 800b060:	d1f0      	bne.n	800b044 <quorem+0xf0>
 800b062:	3c01      	subs	r4, #1
 800b064:	e7eb      	b.n	800b03e <quorem+0xea>
 800b066:	2000      	movs	r0, #0
 800b068:	e7ee      	b.n	800b048 <quorem+0xf4>
 800b06a:	0000      	movs	r0, r0
 800b06c:	0000      	movs	r0, r0
	...

0800b070 <_dtoa_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	ed2d 8b02 	vpush	{d8}
 800b078:	ec57 6b10 	vmov	r6, r7, d0
 800b07c:	b095      	sub	sp, #84	; 0x54
 800b07e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b080:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b084:	9105      	str	r1, [sp, #20]
 800b086:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b08a:	4604      	mov	r4, r0
 800b08c:	9209      	str	r2, [sp, #36]	; 0x24
 800b08e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b090:	b975      	cbnz	r5, 800b0b0 <_dtoa_r+0x40>
 800b092:	2010      	movs	r0, #16
 800b094:	f001 fb6a 	bl	800c76c <malloc>
 800b098:	4602      	mov	r2, r0
 800b09a:	6260      	str	r0, [r4, #36]	; 0x24
 800b09c:	b920      	cbnz	r0, 800b0a8 <_dtoa_r+0x38>
 800b09e:	4bb2      	ldr	r3, [pc, #712]	; (800b368 <_dtoa_r+0x2f8>)
 800b0a0:	21ea      	movs	r1, #234	; 0xea
 800b0a2:	48b2      	ldr	r0, [pc, #712]	; (800b36c <_dtoa_r+0x2fc>)
 800b0a4:	f002 fc34 	bl	800d910 <__assert_func>
 800b0a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0ac:	6005      	str	r5, [r0, #0]
 800b0ae:	60c5      	str	r5, [r0, #12]
 800b0b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0b2:	6819      	ldr	r1, [r3, #0]
 800b0b4:	b151      	cbz	r1, 800b0cc <_dtoa_r+0x5c>
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	604a      	str	r2, [r1, #4]
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	4093      	lsls	r3, r2
 800b0be:	608b      	str	r3, [r1, #8]
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f001 fbad 	bl	800c820 <_Bfree>
 800b0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	1e3b      	subs	r3, r7, #0
 800b0ce:	bfb9      	ittee	lt
 800b0d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b0d4:	9303      	strlt	r3, [sp, #12]
 800b0d6:	2300      	movge	r3, #0
 800b0d8:	f8c8 3000 	strge.w	r3, [r8]
 800b0dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b0e0:	4ba3      	ldr	r3, [pc, #652]	; (800b370 <_dtoa_r+0x300>)
 800b0e2:	bfbc      	itt	lt
 800b0e4:	2201      	movlt	r2, #1
 800b0e6:	f8c8 2000 	strlt.w	r2, [r8]
 800b0ea:	ea33 0309 	bics.w	r3, r3, r9
 800b0ee:	d11b      	bne.n	800b128 <_dtoa_r+0xb8>
 800b0f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0fc:	4333      	orrs	r3, r6
 800b0fe:	f000 857a 	beq.w	800bbf6 <_dtoa_r+0xb86>
 800b102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b104:	b963      	cbnz	r3, 800b120 <_dtoa_r+0xb0>
 800b106:	4b9b      	ldr	r3, [pc, #620]	; (800b374 <_dtoa_r+0x304>)
 800b108:	e024      	b.n	800b154 <_dtoa_r+0xe4>
 800b10a:	4b9b      	ldr	r3, [pc, #620]	; (800b378 <_dtoa_r+0x308>)
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	3308      	adds	r3, #8
 800b110:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	9800      	ldr	r0, [sp, #0]
 800b116:	b015      	add	sp, #84	; 0x54
 800b118:	ecbd 8b02 	vpop	{d8}
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	4b94      	ldr	r3, [pc, #592]	; (800b374 <_dtoa_r+0x304>)
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	3303      	adds	r3, #3
 800b126:	e7f3      	b.n	800b110 <_dtoa_r+0xa0>
 800b128:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b12c:	2200      	movs	r2, #0
 800b12e:	ec51 0b17 	vmov	r0, r1, d7
 800b132:	2300      	movs	r3, #0
 800b134:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b138:	f7f5 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b13c:	4680      	mov	r8, r0
 800b13e:	b158      	cbz	r0, 800b158 <_dtoa_r+0xe8>
 800b140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b142:	2301      	movs	r3, #1
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 8551 	beq.w	800bbf0 <_dtoa_r+0xb80>
 800b14e:	488b      	ldr	r0, [pc, #556]	; (800b37c <_dtoa_r+0x30c>)
 800b150:	6018      	str	r0, [r3, #0]
 800b152:	1e43      	subs	r3, r0, #1
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	e7dd      	b.n	800b114 <_dtoa_r+0xa4>
 800b158:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b15c:	aa12      	add	r2, sp, #72	; 0x48
 800b15e:	a913      	add	r1, sp, #76	; 0x4c
 800b160:	4620      	mov	r0, r4
 800b162:	f001 ff05 	bl	800cf70 <__d2b>
 800b166:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b16a:	4683      	mov	fp, r0
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	d07c      	beq.n	800b26a <_dtoa_r+0x1fa>
 800b170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b172:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b17a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b17e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b182:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b186:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b18a:	4b7d      	ldr	r3, [pc, #500]	; (800b380 <_dtoa_r+0x310>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	4630      	mov	r0, r6
 800b190:	4639      	mov	r1, r7
 800b192:	f7f5 f879 	bl	8000288 <__aeabi_dsub>
 800b196:	a36e      	add	r3, pc, #440	; (adr r3, 800b350 <_dtoa_r+0x2e0>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 fa2c 	bl	80005f8 <__aeabi_dmul>
 800b1a0:	a36d      	add	r3, pc, #436	; (adr r3, 800b358 <_dtoa_r+0x2e8>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 f871 	bl	800028c <__adddf3>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	460f      	mov	r7, r1
 800b1b0:	f7f5 f9b8 	bl	8000524 <__aeabi_i2d>
 800b1b4:	a36a      	add	r3, pc, #424	; (adr r3, 800b360 <_dtoa_r+0x2f0>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f7f5 fa1d 	bl	80005f8 <__aeabi_dmul>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	f7f5 f861 	bl	800028c <__adddf3>
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	f7f5 fcc3 	bl	8000b58 <__aeabi_d2iz>
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4682      	mov	sl, r0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f5 fc7e 	bl	8000adc <__aeabi_dcmplt>
 800b1e0:	b148      	cbz	r0, 800b1f6 <_dtoa_r+0x186>
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	f7f5 f99e 	bl	8000524 <__aeabi_i2d>
 800b1e8:	4632      	mov	r2, r6
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	f7f5 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1f0:	b908      	cbnz	r0, 800b1f6 <_dtoa_r+0x186>
 800b1f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1f6:	f1ba 0f16 	cmp.w	sl, #22
 800b1fa:	d854      	bhi.n	800b2a6 <_dtoa_r+0x236>
 800b1fc:	4b61      	ldr	r3, [pc, #388]	; (800b384 <_dtoa_r+0x314>)
 800b1fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b20a:	f7f5 fc67 	bl	8000adc <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d04b      	beq.n	800b2aa <_dtoa_r+0x23a>
 800b212:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b216:	2300      	movs	r3, #0
 800b218:	930e      	str	r3, [sp, #56]	; 0x38
 800b21a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b21c:	1b5d      	subs	r5, r3, r5
 800b21e:	1e6b      	subs	r3, r5, #1
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	bf43      	ittte	mi
 800b224:	2300      	movmi	r3, #0
 800b226:	f1c5 0801 	rsbmi	r8, r5, #1
 800b22a:	9304      	strmi	r3, [sp, #16]
 800b22c:	f04f 0800 	movpl.w	r8, #0
 800b230:	f1ba 0f00 	cmp.w	sl, #0
 800b234:	db3b      	blt.n	800b2ae <_dtoa_r+0x23e>
 800b236:	9b04      	ldr	r3, [sp, #16]
 800b238:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b23c:	4453      	add	r3, sl
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	2300      	movs	r3, #0
 800b242:	9306      	str	r3, [sp, #24]
 800b244:	9b05      	ldr	r3, [sp, #20]
 800b246:	2b09      	cmp	r3, #9
 800b248:	d869      	bhi.n	800b31e <_dtoa_r+0x2ae>
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	bfc4      	itt	gt
 800b24e:	3b04      	subgt	r3, #4
 800b250:	9305      	strgt	r3, [sp, #20]
 800b252:	9b05      	ldr	r3, [sp, #20]
 800b254:	f1a3 0302 	sub.w	r3, r3, #2
 800b258:	bfcc      	ite	gt
 800b25a:	2500      	movgt	r5, #0
 800b25c:	2501      	movle	r5, #1
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d869      	bhi.n	800b336 <_dtoa_r+0x2c6>
 800b262:	e8df f003 	tbb	[pc, r3]
 800b266:	4e2c      	.short	0x4e2c
 800b268:	5a4c      	.short	0x5a4c
 800b26a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b26e:	441d      	add	r5, r3
 800b270:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b274:	2b20      	cmp	r3, #32
 800b276:	bfc1      	itttt	gt
 800b278:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b27c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b280:	fa09 f303 	lslgt.w	r3, r9, r3
 800b284:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b288:	bfda      	itte	le
 800b28a:	f1c3 0320 	rsble	r3, r3, #32
 800b28e:	fa06 f003 	lslle.w	r0, r6, r3
 800b292:	4318      	orrgt	r0, r3
 800b294:	f7f5 f936 	bl	8000504 <__aeabi_ui2d>
 800b298:	2301      	movs	r3, #1
 800b29a:	4606      	mov	r6, r0
 800b29c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b2a0:	3d01      	subs	r5, #1
 800b2a2:	9310      	str	r3, [sp, #64]	; 0x40
 800b2a4:	e771      	b.n	800b18a <_dtoa_r+0x11a>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e7b6      	b.n	800b218 <_dtoa_r+0x1a8>
 800b2aa:	900e      	str	r0, [sp, #56]	; 0x38
 800b2ac:	e7b5      	b.n	800b21a <_dtoa_r+0x1aa>
 800b2ae:	f1ca 0300 	rsb	r3, sl, #0
 800b2b2:	9306      	str	r3, [sp, #24]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	eba8 080a 	sub.w	r8, r8, sl
 800b2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800b2bc:	e7c2      	b.n	800b244 <_dtoa_r+0x1d4>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9308      	str	r3, [sp, #32]
 800b2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dc39      	bgt.n	800b33c <_dtoa_r+0x2cc>
 800b2c8:	f04f 0901 	mov.w	r9, #1
 800b2cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b2d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2d8:	2200      	movs	r2, #0
 800b2da:	6042      	str	r2, [r0, #4]
 800b2dc:	2204      	movs	r2, #4
 800b2de:	f102 0614 	add.w	r6, r2, #20
 800b2e2:	429e      	cmp	r6, r3
 800b2e4:	6841      	ldr	r1, [r0, #4]
 800b2e6:	d92f      	bls.n	800b348 <_dtoa_r+0x2d8>
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f001 fa59 	bl	800c7a0 <_Balloc>
 800b2ee:	9000      	str	r0, [sp, #0]
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d14b      	bne.n	800b38c <_dtoa_r+0x31c>
 800b2f4:	4b24      	ldr	r3, [pc, #144]	; (800b388 <_dtoa_r+0x318>)
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2fc:	e6d1      	b.n	800b0a2 <_dtoa_r+0x32>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e7de      	b.n	800b2c0 <_dtoa_r+0x250>
 800b302:	2300      	movs	r3, #0
 800b304:	9308      	str	r3, [sp, #32]
 800b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b308:	eb0a 0903 	add.w	r9, sl, r3
 800b30c:	f109 0301 	add.w	r3, r9, #1
 800b310:	2b01      	cmp	r3, #1
 800b312:	9301      	str	r3, [sp, #4]
 800b314:	bfb8      	it	lt
 800b316:	2301      	movlt	r3, #1
 800b318:	e7dd      	b.n	800b2d6 <_dtoa_r+0x266>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e7f2      	b.n	800b304 <_dtoa_r+0x294>
 800b31e:	2501      	movs	r5, #1
 800b320:	2300      	movs	r3, #0
 800b322:	9305      	str	r3, [sp, #20]
 800b324:	9508      	str	r5, [sp, #32]
 800b326:	f04f 39ff 	mov.w	r9, #4294967295
 800b32a:	2200      	movs	r2, #0
 800b32c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b330:	2312      	movs	r3, #18
 800b332:	9209      	str	r2, [sp, #36]	; 0x24
 800b334:	e7cf      	b.n	800b2d6 <_dtoa_r+0x266>
 800b336:	2301      	movs	r3, #1
 800b338:	9308      	str	r3, [sp, #32]
 800b33a:	e7f4      	b.n	800b326 <_dtoa_r+0x2b6>
 800b33c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b340:	f8cd 9004 	str.w	r9, [sp, #4]
 800b344:	464b      	mov	r3, r9
 800b346:	e7c6      	b.n	800b2d6 <_dtoa_r+0x266>
 800b348:	3101      	adds	r1, #1
 800b34a:	6041      	str	r1, [r0, #4]
 800b34c:	0052      	lsls	r2, r2, #1
 800b34e:	e7c6      	b.n	800b2de <_dtoa_r+0x26e>
 800b350:	636f4361 	.word	0x636f4361
 800b354:	3fd287a7 	.word	0x3fd287a7
 800b358:	8b60c8b3 	.word	0x8b60c8b3
 800b35c:	3fc68a28 	.word	0x3fc68a28
 800b360:	509f79fb 	.word	0x509f79fb
 800b364:	3fd34413 	.word	0x3fd34413
 800b368:	0800e486 	.word	0x0800e486
 800b36c:	0800e49d 	.word	0x0800e49d
 800b370:	7ff00000 	.word	0x7ff00000
 800b374:	0800e482 	.word	0x0800e482
 800b378:	0800e479 	.word	0x0800e479
 800b37c:	0800e2fd 	.word	0x0800e2fd
 800b380:	3ff80000 	.word	0x3ff80000
 800b384:	0800e678 	.word	0x0800e678
 800b388:	0800e4fc 	.word	0x0800e4fc
 800b38c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b38e:	9a00      	ldr	r2, [sp, #0]
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	9b01      	ldr	r3, [sp, #4]
 800b394:	2b0e      	cmp	r3, #14
 800b396:	f200 80ad 	bhi.w	800b4f4 <_dtoa_r+0x484>
 800b39a:	2d00      	cmp	r5, #0
 800b39c:	f000 80aa 	beq.w	800b4f4 <_dtoa_r+0x484>
 800b3a0:	f1ba 0f00 	cmp.w	sl, #0
 800b3a4:	dd36      	ble.n	800b414 <_dtoa_r+0x3a4>
 800b3a6:	4ac3      	ldr	r2, [pc, #780]	; (800b6b4 <_dtoa_r+0x644>)
 800b3a8:	f00a 030f 	and.w	r3, sl, #15
 800b3ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3b0:	ed93 7b00 	vldr	d7, [r3]
 800b3b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b3b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b3bc:	eeb0 8a47 	vmov.f32	s16, s14
 800b3c0:	eef0 8a67 	vmov.f32	s17, s15
 800b3c4:	d016      	beq.n	800b3f4 <_dtoa_r+0x384>
 800b3c6:	4bbc      	ldr	r3, [pc, #752]	; (800b6b8 <_dtoa_r+0x648>)
 800b3c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b3cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3d0:	f7f5 fa3c 	bl	800084c <__aeabi_ddiv>
 800b3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d8:	f007 070f 	and.w	r7, r7, #15
 800b3dc:	2503      	movs	r5, #3
 800b3de:	4eb6      	ldr	r6, [pc, #728]	; (800b6b8 <_dtoa_r+0x648>)
 800b3e0:	b957      	cbnz	r7, 800b3f8 <_dtoa_r+0x388>
 800b3e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e6:	ec53 2b18 	vmov	r2, r3, d8
 800b3ea:	f7f5 fa2f 	bl	800084c <__aeabi_ddiv>
 800b3ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3f2:	e029      	b.n	800b448 <_dtoa_r+0x3d8>
 800b3f4:	2502      	movs	r5, #2
 800b3f6:	e7f2      	b.n	800b3de <_dtoa_r+0x36e>
 800b3f8:	07f9      	lsls	r1, r7, #31
 800b3fa:	d508      	bpl.n	800b40e <_dtoa_r+0x39e>
 800b3fc:	ec51 0b18 	vmov	r0, r1, d8
 800b400:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b404:	f7f5 f8f8 	bl	80005f8 <__aeabi_dmul>
 800b408:	ec41 0b18 	vmov	d8, r0, r1
 800b40c:	3501      	adds	r5, #1
 800b40e:	107f      	asrs	r7, r7, #1
 800b410:	3608      	adds	r6, #8
 800b412:	e7e5      	b.n	800b3e0 <_dtoa_r+0x370>
 800b414:	f000 80a6 	beq.w	800b564 <_dtoa_r+0x4f4>
 800b418:	f1ca 0600 	rsb	r6, sl, #0
 800b41c:	4ba5      	ldr	r3, [pc, #660]	; (800b6b4 <_dtoa_r+0x644>)
 800b41e:	4fa6      	ldr	r7, [pc, #664]	; (800b6b8 <_dtoa_r+0x648>)
 800b420:	f006 020f 	and.w	r2, r6, #15
 800b424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b430:	f7f5 f8e2 	bl	80005f8 <__aeabi_dmul>
 800b434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b438:	1136      	asrs	r6, r6, #4
 800b43a:	2300      	movs	r3, #0
 800b43c:	2502      	movs	r5, #2
 800b43e:	2e00      	cmp	r6, #0
 800b440:	f040 8085 	bne.w	800b54e <_dtoa_r+0x4de>
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1d2      	bne.n	800b3ee <_dtoa_r+0x37e>
 800b448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 808c 	beq.w	800b568 <_dtoa_r+0x4f8>
 800b450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b454:	4b99      	ldr	r3, [pc, #612]	; (800b6bc <_dtoa_r+0x64c>)
 800b456:	2200      	movs	r2, #0
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f5 fb3e 	bl	8000adc <__aeabi_dcmplt>
 800b460:	2800      	cmp	r0, #0
 800b462:	f000 8081 	beq.w	800b568 <_dtoa_r+0x4f8>
 800b466:	9b01      	ldr	r3, [sp, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d07d      	beq.n	800b568 <_dtoa_r+0x4f8>
 800b46c:	f1b9 0f00 	cmp.w	r9, #0
 800b470:	dd3c      	ble.n	800b4ec <_dtoa_r+0x47c>
 800b472:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b476:	9307      	str	r3, [sp, #28]
 800b478:	2200      	movs	r2, #0
 800b47a:	4b91      	ldr	r3, [pc, #580]	; (800b6c0 <_dtoa_r+0x650>)
 800b47c:	4630      	mov	r0, r6
 800b47e:	4639      	mov	r1, r7
 800b480:	f7f5 f8ba 	bl	80005f8 <__aeabi_dmul>
 800b484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b488:	3501      	adds	r5, #1
 800b48a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b48e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b492:	4628      	mov	r0, r5
 800b494:	f7f5 f846 	bl	8000524 <__aeabi_i2d>
 800b498:	4632      	mov	r2, r6
 800b49a:	463b      	mov	r3, r7
 800b49c:	f7f5 f8ac 	bl	80005f8 <__aeabi_dmul>
 800b4a0:	4b88      	ldr	r3, [pc, #544]	; (800b6c4 <_dtoa_r+0x654>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f7f4 fef2 	bl	800028c <__adddf3>
 800b4a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b4ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4b0:	9303      	str	r3, [sp, #12]
 800b4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d15c      	bne.n	800b572 <_dtoa_r+0x502>
 800b4b8:	4b83      	ldr	r3, [pc, #524]	; (800b6c8 <_dtoa_r+0x658>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	4630      	mov	r0, r6
 800b4be:	4639      	mov	r1, r7
 800b4c0:	f7f4 fee2 	bl	8000288 <__aeabi_dsub>
 800b4c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	460f      	mov	r7, r1
 800b4cc:	f7f5 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	f040 8296 	bne.w	800ba02 <_dtoa_r+0x992>
 800b4d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 fafb 	bl	8000adc <__aeabi_dcmplt>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f040 8288 	bne.w	800b9fc <_dtoa_r+0x98c>
 800b4ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b4f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f2c0 8158 	blt.w	800b7ac <_dtoa_r+0x73c>
 800b4fc:	f1ba 0f0e 	cmp.w	sl, #14
 800b500:	f300 8154 	bgt.w	800b7ac <_dtoa_r+0x73c>
 800b504:	4b6b      	ldr	r3, [pc, #428]	; (800b6b4 <_dtoa_r+0x644>)
 800b506:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b50a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	f280 80e3 	bge.w	800b6dc <_dtoa_r+0x66c>
 800b516:	9b01      	ldr	r3, [sp, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f300 80df 	bgt.w	800b6dc <_dtoa_r+0x66c>
 800b51e:	f040 826d 	bne.w	800b9fc <_dtoa_r+0x98c>
 800b522:	4b69      	ldr	r3, [pc, #420]	; (800b6c8 <_dtoa_r+0x658>)
 800b524:	2200      	movs	r2, #0
 800b526:	4640      	mov	r0, r8
 800b528:	4649      	mov	r1, r9
 800b52a:	f7f5 f865 	bl	80005f8 <__aeabi_dmul>
 800b52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b532:	f7f5 fae7 	bl	8000b04 <__aeabi_dcmpge>
 800b536:	9e01      	ldr	r6, [sp, #4]
 800b538:	4637      	mov	r7, r6
 800b53a:	2800      	cmp	r0, #0
 800b53c:	f040 8243 	bne.w	800b9c6 <_dtoa_r+0x956>
 800b540:	9d00      	ldr	r5, [sp, #0]
 800b542:	2331      	movs	r3, #49	; 0x31
 800b544:	f805 3b01 	strb.w	r3, [r5], #1
 800b548:	f10a 0a01 	add.w	sl, sl, #1
 800b54c:	e23f      	b.n	800b9ce <_dtoa_r+0x95e>
 800b54e:	07f2      	lsls	r2, r6, #31
 800b550:	d505      	bpl.n	800b55e <_dtoa_r+0x4ee>
 800b552:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b556:	f7f5 f84f 	bl	80005f8 <__aeabi_dmul>
 800b55a:	3501      	adds	r5, #1
 800b55c:	2301      	movs	r3, #1
 800b55e:	1076      	asrs	r6, r6, #1
 800b560:	3708      	adds	r7, #8
 800b562:	e76c      	b.n	800b43e <_dtoa_r+0x3ce>
 800b564:	2502      	movs	r5, #2
 800b566:	e76f      	b.n	800b448 <_dtoa_r+0x3d8>
 800b568:	9b01      	ldr	r3, [sp, #4]
 800b56a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b56e:	930c      	str	r3, [sp, #48]	; 0x30
 800b570:	e78d      	b.n	800b48e <_dtoa_r+0x41e>
 800b572:	9900      	ldr	r1, [sp, #0]
 800b574:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b578:	4b4e      	ldr	r3, [pc, #312]	; (800b6b4 <_dtoa_r+0x644>)
 800b57a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b57e:	4401      	add	r1, r0
 800b580:	9102      	str	r1, [sp, #8]
 800b582:	9908      	ldr	r1, [sp, #32]
 800b584:	eeb0 8a47 	vmov.f32	s16, s14
 800b588:	eef0 8a67 	vmov.f32	s17, s15
 800b58c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b590:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b594:	2900      	cmp	r1, #0
 800b596:	d045      	beq.n	800b624 <_dtoa_r+0x5b4>
 800b598:	494c      	ldr	r1, [pc, #304]	; (800b6cc <_dtoa_r+0x65c>)
 800b59a:	2000      	movs	r0, #0
 800b59c:	f7f5 f956 	bl	800084c <__aeabi_ddiv>
 800b5a0:	ec53 2b18 	vmov	r2, r3, d8
 800b5a4:	f7f4 fe70 	bl	8000288 <__aeabi_dsub>
 800b5a8:	9d00      	ldr	r5, [sp, #0]
 800b5aa:	ec41 0b18 	vmov	d8, r0, r1
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7f5 fad1 	bl	8000b58 <__aeabi_d2iz>
 800b5b6:	900c      	str	r0, [sp, #48]	; 0x30
 800b5b8:	f7f4 ffb4 	bl	8000524 <__aeabi_i2d>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	f7f4 fe60 	bl	8000288 <__aeabi_dsub>
 800b5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ca:	3330      	adds	r3, #48	; 0x30
 800b5cc:	f805 3b01 	strb.w	r3, [r5], #1
 800b5d0:	ec53 2b18 	vmov	r2, r3, d8
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	f7f5 fa80 	bl	8000adc <__aeabi_dcmplt>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d165      	bne.n	800b6ac <_dtoa_r+0x63c>
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	463b      	mov	r3, r7
 800b5e4:	4935      	ldr	r1, [pc, #212]	; (800b6bc <_dtoa_r+0x64c>)
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7f4 fe4e 	bl	8000288 <__aeabi_dsub>
 800b5ec:	ec53 2b18 	vmov	r2, r3, d8
 800b5f0:	f7f5 fa74 	bl	8000adc <__aeabi_dcmplt>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f040 80b9 	bne.w	800b76c <_dtoa_r+0x6fc>
 800b5fa:	9b02      	ldr	r3, [sp, #8]
 800b5fc:	429d      	cmp	r5, r3
 800b5fe:	f43f af75 	beq.w	800b4ec <_dtoa_r+0x47c>
 800b602:	4b2f      	ldr	r3, [pc, #188]	; (800b6c0 <_dtoa_r+0x650>)
 800b604:	ec51 0b18 	vmov	r0, r1, d8
 800b608:	2200      	movs	r2, #0
 800b60a:	f7f4 fff5 	bl	80005f8 <__aeabi_dmul>
 800b60e:	4b2c      	ldr	r3, [pc, #176]	; (800b6c0 <_dtoa_r+0x650>)
 800b610:	ec41 0b18 	vmov	d8, r0, r1
 800b614:	2200      	movs	r2, #0
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f4 ffed 	bl	80005f8 <__aeabi_dmul>
 800b61e:	4606      	mov	r6, r0
 800b620:	460f      	mov	r7, r1
 800b622:	e7c4      	b.n	800b5ae <_dtoa_r+0x53e>
 800b624:	ec51 0b17 	vmov	r0, r1, d7
 800b628:	f7f4 ffe6 	bl	80005f8 <__aeabi_dmul>
 800b62c:	9b02      	ldr	r3, [sp, #8]
 800b62e:	9d00      	ldr	r5, [sp, #0]
 800b630:	930c      	str	r3, [sp, #48]	; 0x30
 800b632:	ec41 0b18 	vmov	d8, r0, r1
 800b636:	4639      	mov	r1, r7
 800b638:	4630      	mov	r0, r6
 800b63a:	f7f5 fa8d 	bl	8000b58 <__aeabi_d2iz>
 800b63e:	9011      	str	r0, [sp, #68]	; 0x44
 800b640:	f7f4 ff70 	bl	8000524 <__aeabi_i2d>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f4 fe1c 	bl	8000288 <__aeabi_dsub>
 800b650:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b652:	3330      	adds	r3, #48	; 0x30
 800b654:	f805 3b01 	strb.w	r3, [r5], #1
 800b658:	9b02      	ldr	r3, [sp, #8]
 800b65a:	429d      	cmp	r5, r3
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	f04f 0200 	mov.w	r2, #0
 800b664:	d134      	bne.n	800b6d0 <_dtoa_r+0x660>
 800b666:	4b19      	ldr	r3, [pc, #100]	; (800b6cc <_dtoa_r+0x65c>)
 800b668:	ec51 0b18 	vmov	r0, r1, d8
 800b66c:	f7f4 fe0e 	bl	800028c <__adddf3>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4630      	mov	r0, r6
 800b676:	4639      	mov	r1, r7
 800b678:	f7f5 fa4e 	bl	8000b18 <__aeabi_dcmpgt>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d175      	bne.n	800b76c <_dtoa_r+0x6fc>
 800b680:	ec53 2b18 	vmov	r2, r3, d8
 800b684:	4911      	ldr	r1, [pc, #68]	; (800b6cc <_dtoa_r+0x65c>)
 800b686:	2000      	movs	r0, #0
 800b688:	f7f4 fdfe 	bl	8000288 <__aeabi_dsub>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4630      	mov	r0, r6
 800b692:	4639      	mov	r1, r7
 800b694:	f7f5 fa22 	bl	8000adc <__aeabi_dcmplt>
 800b698:	2800      	cmp	r0, #0
 800b69a:	f43f af27 	beq.w	800b4ec <_dtoa_r+0x47c>
 800b69e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6a0:	1e6b      	subs	r3, r5, #1
 800b6a2:	930c      	str	r3, [sp, #48]	; 0x30
 800b6a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6a8:	2b30      	cmp	r3, #48	; 0x30
 800b6aa:	d0f8      	beq.n	800b69e <_dtoa_r+0x62e>
 800b6ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b6b0:	e04a      	b.n	800b748 <_dtoa_r+0x6d8>
 800b6b2:	bf00      	nop
 800b6b4:	0800e678 	.word	0x0800e678
 800b6b8:	0800e650 	.word	0x0800e650
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	40240000 	.word	0x40240000
 800b6c4:	401c0000 	.word	0x401c0000
 800b6c8:	40140000 	.word	0x40140000
 800b6cc:	3fe00000 	.word	0x3fe00000
 800b6d0:	4baf      	ldr	r3, [pc, #700]	; (800b990 <_dtoa_r+0x920>)
 800b6d2:	f7f4 ff91 	bl	80005f8 <__aeabi_dmul>
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	460f      	mov	r7, r1
 800b6da:	e7ac      	b.n	800b636 <_dtoa_r+0x5c6>
 800b6dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b6e0:	9d00      	ldr	r5, [sp, #0]
 800b6e2:	4642      	mov	r2, r8
 800b6e4:	464b      	mov	r3, r9
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f5 f8af 	bl	800084c <__aeabi_ddiv>
 800b6ee:	f7f5 fa33 	bl	8000b58 <__aeabi_d2iz>
 800b6f2:	9002      	str	r0, [sp, #8]
 800b6f4:	f7f4 ff16 	bl	8000524 <__aeabi_i2d>
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	f7f4 ff7c 	bl	80005f8 <__aeabi_dmul>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4630      	mov	r0, r6
 800b706:	4639      	mov	r1, r7
 800b708:	f7f4 fdbe 	bl	8000288 <__aeabi_dsub>
 800b70c:	9e02      	ldr	r6, [sp, #8]
 800b70e:	9f01      	ldr	r7, [sp, #4]
 800b710:	3630      	adds	r6, #48	; 0x30
 800b712:	f805 6b01 	strb.w	r6, [r5], #1
 800b716:	9e00      	ldr	r6, [sp, #0]
 800b718:	1bae      	subs	r6, r5, r6
 800b71a:	42b7      	cmp	r7, r6
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	d137      	bne.n	800b792 <_dtoa_r+0x722>
 800b722:	f7f4 fdb3 	bl	800028c <__adddf3>
 800b726:	4642      	mov	r2, r8
 800b728:	464b      	mov	r3, r9
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	f7f5 f9f3 	bl	8000b18 <__aeabi_dcmpgt>
 800b732:	b9c8      	cbnz	r0, 800b768 <_dtoa_r+0x6f8>
 800b734:	4642      	mov	r2, r8
 800b736:	464b      	mov	r3, r9
 800b738:	4630      	mov	r0, r6
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f5 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b740:	b110      	cbz	r0, 800b748 <_dtoa_r+0x6d8>
 800b742:	9b02      	ldr	r3, [sp, #8]
 800b744:	07d9      	lsls	r1, r3, #31
 800b746:	d40f      	bmi.n	800b768 <_dtoa_r+0x6f8>
 800b748:	4620      	mov	r0, r4
 800b74a:	4659      	mov	r1, fp
 800b74c:	f001 f868 	bl	800c820 <_Bfree>
 800b750:	2300      	movs	r3, #0
 800b752:	702b      	strb	r3, [r5, #0]
 800b754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b756:	f10a 0001 	add.w	r0, sl, #1
 800b75a:	6018      	str	r0, [r3, #0]
 800b75c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f43f acd8 	beq.w	800b114 <_dtoa_r+0xa4>
 800b764:	601d      	str	r5, [r3, #0]
 800b766:	e4d5      	b.n	800b114 <_dtoa_r+0xa4>
 800b768:	f8cd a01c 	str.w	sl, [sp, #28]
 800b76c:	462b      	mov	r3, r5
 800b76e:	461d      	mov	r5, r3
 800b770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b774:	2a39      	cmp	r2, #57	; 0x39
 800b776:	d108      	bne.n	800b78a <_dtoa_r+0x71a>
 800b778:	9a00      	ldr	r2, [sp, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d1f7      	bne.n	800b76e <_dtoa_r+0x6fe>
 800b77e:	9a07      	ldr	r2, [sp, #28]
 800b780:	9900      	ldr	r1, [sp, #0]
 800b782:	3201      	adds	r2, #1
 800b784:	9207      	str	r2, [sp, #28]
 800b786:	2230      	movs	r2, #48	; 0x30
 800b788:	700a      	strb	r2, [r1, #0]
 800b78a:	781a      	ldrb	r2, [r3, #0]
 800b78c:	3201      	adds	r2, #1
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e78c      	b.n	800b6ac <_dtoa_r+0x63c>
 800b792:	4b7f      	ldr	r3, [pc, #508]	; (800b990 <_dtoa_r+0x920>)
 800b794:	2200      	movs	r2, #0
 800b796:	f7f4 ff2f 	bl	80005f8 <__aeabi_dmul>
 800b79a:	2200      	movs	r2, #0
 800b79c:	2300      	movs	r3, #0
 800b79e:	4606      	mov	r6, r0
 800b7a0:	460f      	mov	r7, r1
 800b7a2:	f7f5 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d09b      	beq.n	800b6e2 <_dtoa_r+0x672>
 800b7aa:	e7cd      	b.n	800b748 <_dtoa_r+0x6d8>
 800b7ac:	9a08      	ldr	r2, [sp, #32]
 800b7ae:	2a00      	cmp	r2, #0
 800b7b0:	f000 80c4 	beq.w	800b93c <_dtoa_r+0x8cc>
 800b7b4:	9a05      	ldr	r2, [sp, #20]
 800b7b6:	2a01      	cmp	r2, #1
 800b7b8:	f300 80a8 	bgt.w	800b90c <_dtoa_r+0x89c>
 800b7bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7be:	2a00      	cmp	r2, #0
 800b7c0:	f000 80a0 	beq.w	800b904 <_dtoa_r+0x894>
 800b7c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7c8:	9e06      	ldr	r6, [sp, #24]
 800b7ca:	4645      	mov	r5, r8
 800b7cc:	9a04      	ldr	r2, [sp, #16]
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	441a      	add	r2, r3
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	4498      	add	r8, r3
 800b7d6:	9204      	str	r2, [sp, #16]
 800b7d8:	f001 f928 	bl	800ca2c <__i2b>
 800b7dc:	4607      	mov	r7, r0
 800b7de:	2d00      	cmp	r5, #0
 800b7e0:	dd0b      	ble.n	800b7fa <_dtoa_r+0x78a>
 800b7e2:	9b04      	ldr	r3, [sp, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	dd08      	ble.n	800b7fa <_dtoa_r+0x78a>
 800b7e8:	42ab      	cmp	r3, r5
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	bfa8      	it	ge
 800b7ee:	462b      	movge	r3, r5
 800b7f0:	eba8 0803 	sub.w	r8, r8, r3
 800b7f4:	1aed      	subs	r5, r5, r3
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	9b06      	ldr	r3, [sp, #24]
 800b7fc:	b1fb      	cbz	r3, 800b83e <_dtoa_r+0x7ce>
 800b7fe:	9b08      	ldr	r3, [sp, #32]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 809f 	beq.w	800b944 <_dtoa_r+0x8d4>
 800b806:	2e00      	cmp	r6, #0
 800b808:	dd11      	ble.n	800b82e <_dtoa_r+0x7be>
 800b80a:	4639      	mov	r1, r7
 800b80c:	4632      	mov	r2, r6
 800b80e:	4620      	mov	r0, r4
 800b810:	f001 f9c8 	bl	800cba4 <__pow5mult>
 800b814:	465a      	mov	r2, fp
 800b816:	4601      	mov	r1, r0
 800b818:	4607      	mov	r7, r0
 800b81a:	4620      	mov	r0, r4
 800b81c:	f001 f91c 	bl	800ca58 <__multiply>
 800b820:	4659      	mov	r1, fp
 800b822:	9007      	str	r0, [sp, #28]
 800b824:	4620      	mov	r0, r4
 800b826:	f000 fffb 	bl	800c820 <_Bfree>
 800b82a:	9b07      	ldr	r3, [sp, #28]
 800b82c:	469b      	mov	fp, r3
 800b82e:	9b06      	ldr	r3, [sp, #24]
 800b830:	1b9a      	subs	r2, r3, r6
 800b832:	d004      	beq.n	800b83e <_dtoa_r+0x7ce>
 800b834:	4659      	mov	r1, fp
 800b836:	4620      	mov	r0, r4
 800b838:	f001 f9b4 	bl	800cba4 <__pow5mult>
 800b83c:	4683      	mov	fp, r0
 800b83e:	2101      	movs	r1, #1
 800b840:	4620      	mov	r0, r4
 800b842:	f001 f8f3 	bl	800ca2c <__i2b>
 800b846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b848:	2b00      	cmp	r3, #0
 800b84a:	4606      	mov	r6, r0
 800b84c:	dd7c      	ble.n	800b948 <_dtoa_r+0x8d8>
 800b84e:	461a      	mov	r2, r3
 800b850:	4601      	mov	r1, r0
 800b852:	4620      	mov	r0, r4
 800b854:	f001 f9a6 	bl	800cba4 <__pow5mult>
 800b858:	9b05      	ldr	r3, [sp, #20]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	4606      	mov	r6, r0
 800b85e:	dd76      	ble.n	800b94e <_dtoa_r+0x8de>
 800b860:	2300      	movs	r3, #0
 800b862:	9306      	str	r3, [sp, #24]
 800b864:	6933      	ldr	r3, [r6, #16]
 800b866:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b86a:	6918      	ldr	r0, [r3, #16]
 800b86c:	f001 f88e 	bl	800c98c <__hi0bits>
 800b870:	f1c0 0020 	rsb	r0, r0, #32
 800b874:	9b04      	ldr	r3, [sp, #16]
 800b876:	4418      	add	r0, r3
 800b878:	f010 001f 	ands.w	r0, r0, #31
 800b87c:	f000 8086 	beq.w	800b98c <_dtoa_r+0x91c>
 800b880:	f1c0 0320 	rsb	r3, r0, #32
 800b884:	2b04      	cmp	r3, #4
 800b886:	dd7f      	ble.n	800b988 <_dtoa_r+0x918>
 800b888:	f1c0 001c 	rsb	r0, r0, #28
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	4403      	add	r3, r0
 800b890:	4480      	add	r8, r0
 800b892:	4405      	add	r5, r0
 800b894:	9304      	str	r3, [sp, #16]
 800b896:	f1b8 0f00 	cmp.w	r8, #0
 800b89a:	dd05      	ble.n	800b8a8 <_dtoa_r+0x838>
 800b89c:	4659      	mov	r1, fp
 800b89e:	4642      	mov	r2, r8
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f001 f9d9 	bl	800cc58 <__lshift>
 800b8a6:	4683      	mov	fp, r0
 800b8a8:	9b04      	ldr	r3, [sp, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dd05      	ble.n	800b8ba <_dtoa_r+0x84a>
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f001 f9d0 	bl	800cc58 <__lshift>
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d069      	beq.n	800b994 <_dtoa_r+0x924>
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	4658      	mov	r0, fp
 800b8c4:	f001 fa34 	bl	800cd30 <__mcmp>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	da63      	bge.n	800b994 <_dtoa_r+0x924>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4659      	mov	r1, fp
 800b8d0:	220a      	movs	r2, #10
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 ffc6 	bl	800c864 <__multadd>
 800b8d8:	9b08      	ldr	r3, [sp, #32]
 800b8da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8de:	4683      	mov	fp, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 818f 	beq.w	800bc04 <_dtoa_r+0xb94>
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 ffb9 	bl	800c864 <__multadd>
 800b8f2:	f1b9 0f00 	cmp.w	r9, #0
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	f300 808e 	bgt.w	800ba18 <_dtoa_r+0x9a8>
 800b8fc:	9b05      	ldr	r3, [sp, #20]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	dc50      	bgt.n	800b9a4 <_dtoa_r+0x934>
 800b902:	e089      	b.n	800ba18 <_dtoa_r+0x9a8>
 800b904:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b90a:	e75d      	b.n	800b7c8 <_dtoa_r+0x758>
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	1e5e      	subs	r6, r3, #1
 800b910:	9b06      	ldr	r3, [sp, #24]
 800b912:	42b3      	cmp	r3, r6
 800b914:	bfbf      	itttt	lt
 800b916:	9b06      	ldrlt	r3, [sp, #24]
 800b918:	9606      	strlt	r6, [sp, #24]
 800b91a:	1af2      	sublt	r2, r6, r3
 800b91c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b91e:	bfb6      	itet	lt
 800b920:	189b      	addlt	r3, r3, r2
 800b922:	1b9e      	subge	r6, r3, r6
 800b924:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b926:	9b01      	ldr	r3, [sp, #4]
 800b928:	bfb8      	it	lt
 800b92a:	2600      	movlt	r6, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bfb5      	itete	lt
 800b930:	eba8 0503 	sublt.w	r5, r8, r3
 800b934:	9b01      	ldrge	r3, [sp, #4]
 800b936:	2300      	movlt	r3, #0
 800b938:	4645      	movge	r5, r8
 800b93a:	e747      	b.n	800b7cc <_dtoa_r+0x75c>
 800b93c:	9e06      	ldr	r6, [sp, #24]
 800b93e:	9f08      	ldr	r7, [sp, #32]
 800b940:	4645      	mov	r5, r8
 800b942:	e74c      	b.n	800b7de <_dtoa_r+0x76e>
 800b944:	9a06      	ldr	r2, [sp, #24]
 800b946:	e775      	b.n	800b834 <_dtoa_r+0x7c4>
 800b948:	9b05      	ldr	r3, [sp, #20]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	dc18      	bgt.n	800b980 <_dtoa_r+0x910>
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	b9b3      	cbnz	r3, 800b980 <_dtoa_r+0x910>
 800b952:	9b03      	ldr	r3, [sp, #12]
 800b954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b958:	b9a3      	cbnz	r3, 800b984 <_dtoa_r+0x914>
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b960:	0d1b      	lsrs	r3, r3, #20
 800b962:	051b      	lsls	r3, r3, #20
 800b964:	b12b      	cbz	r3, 800b972 <_dtoa_r+0x902>
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	3301      	adds	r3, #1
 800b96a:	9304      	str	r3, [sp, #16]
 800b96c:	f108 0801 	add.w	r8, r8, #1
 800b970:	2301      	movs	r3, #1
 800b972:	9306      	str	r3, [sp, #24]
 800b974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b976:	2b00      	cmp	r3, #0
 800b978:	f47f af74 	bne.w	800b864 <_dtoa_r+0x7f4>
 800b97c:	2001      	movs	r0, #1
 800b97e:	e779      	b.n	800b874 <_dtoa_r+0x804>
 800b980:	2300      	movs	r3, #0
 800b982:	e7f6      	b.n	800b972 <_dtoa_r+0x902>
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	e7f4      	b.n	800b972 <_dtoa_r+0x902>
 800b988:	d085      	beq.n	800b896 <_dtoa_r+0x826>
 800b98a:	4618      	mov	r0, r3
 800b98c:	301c      	adds	r0, #28
 800b98e:	e77d      	b.n	800b88c <_dtoa_r+0x81c>
 800b990:	40240000 	.word	0x40240000
 800b994:	9b01      	ldr	r3, [sp, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dc38      	bgt.n	800ba0c <_dtoa_r+0x99c>
 800b99a:	9b05      	ldr	r3, [sp, #20]
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	dd35      	ble.n	800ba0c <_dtoa_r+0x99c>
 800b9a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b9a4:	f1b9 0f00 	cmp.w	r9, #0
 800b9a8:	d10d      	bne.n	800b9c6 <_dtoa_r+0x956>
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	464b      	mov	r3, r9
 800b9ae:	2205      	movs	r2, #5
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 ff57 	bl	800c864 <__multadd>
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	4658      	mov	r0, fp
 800b9bc:	f001 f9b8 	bl	800cd30 <__mcmp>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	f73f adbd 	bgt.w	800b540 <_dtoa_r+0x4d0>
 800b9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c8:	9d00      	ldr	r5, [sp, #0]
 800b9ca:	ea6f 0a03 	mvn.w	sl, r3
 800b9ce:	f04f 0800 	mov.w	r8, #0
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 ff23 	bl	800c820 <_Bfree>
 800b9da:	2f00      	cmp	r7, #0
 800b9dc:	f43f aeb4 	beq.w	800b748 <_dtoa_r+0x6d8>
 800b9e0:	f1b8 0f00 	cmp.w	r8, #0
 800b9e4:	d005      	beq.n	800b9f2 <_dtoa_r+0x982>
 800b9e6:	45b8      	cmp	r8, r7
 800b9e8:	d003      	beq.n	800b9f2 <_dtoa_r+0x982>
 800b9ea:	4641      	mov	r1, r8
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f000 ff17 	bl	800c820 <_Bfree>
 800b9f2:	4639      	mov	r1, r7
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f000 ff13 	bl	800c820 <_Bfree>
 800b9fa:	e6a5      	b.n	800b748 <_dtoa_r+0x6d8>
 800b9fc:	2600      	movs	r6, #0
 800b9fe:	4637      	mov	r7, r6
 800ba00:	e7e1      	b.n	800b9c6 <_dtoa_r+0x956>
 800ba02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ba04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ba08:	4637      	mov	r7, r6
 800ba0a:	e599      	b.n	800b540 <_dtoa_r+0x4d0>
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 80fd 	beq.w	800bc12 <_dtoa_r+0xba2>
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	dd05      	ble.n	800ba28 <_dtoa_r+0x9b8>
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	462a      	mov	r2, r5
 800ba20:	4620      	mov	r0, r4
 800ba22:	f001 f919 	bl	800cc58 <__lshift>
 800ba26:	4607      	mov	r7, r0
 800ba28:	9b06      	ldr	r3, [sp, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d05c      	beq.n	800bae8 <_dtoa_r+0xa78>
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 feb5 	bl	800c7a0 <_Balloc>
 800ba36:	4605      	mov	r5, r0
 800ba38:	b928      	cbnz	r0, 800ba46 <_dtoa_r+0x9d6>
 800ba3a:	4b80      	ldr	r3, [pc, #512]	; (800bc3c <_dtoa_r+0xbcc>)
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba42:	f7ff bb2e 	b.w	800b0a2 <_dtoa_r+0x32>
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	3202      	adds	r2, #2
 800ba4a:	0092      	lsls	r2, r2, #2
 800ba4c:	f107 010c 	add.w	r1, r7, #12
 800ba50:	300c      	adds	r0, #12
 800ba52:	f7fd fbc7 	bl	80091e4 <memcpy>
 800ba56:	2201      	movs	r2, #1
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f001 f8fc 	bl	800cc58 <__lshift>
 800ba60:	9b00      	ldr	r3, [sp, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	9b00      	ldr	r3, [sp, #0]
 800ba68:	444b      	add	r3, r9
 800ba6a:	9307      	str	r3, [sp, #28]
 800ba6c:	9b02      	ldr	r3, [sp, #8]
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	46b8      	mov	r8, r7
 800ba74:	9306      	str	r3, [sp, #24]
 800ba76:	4607      	mov	r7, r0
 800ba78:	9b01      	ldr	r3, [sp, #4]
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	4658      	mov	r0, fp
 800ba80:	9302      	str	r3, [sp, #8]
 800ba82:	f7ff fa67 	bl	800af54 <quorem>
 800ba86:	4603      	mov	r3, r0
 800ba88:	3330      	adds	r3, #48	; 0x30
 800ba8a:	9004      	str	r0, [sp, #16]
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	4658      	mov	r0, fp
 800ba90:	9308      	str	r3, [sp, #32]
 800ba92:	f001 f94d 	bl	800cd30 <__mcmp>
 800ba96:	463a      	mov	r2, r7
 800ba98:	4681      	mov	r9, r0
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f001 f963 	bl	800cd68 <__mdiff>
 800baa2:	68c2      	ldr	r2, [r0, #12]
 800baa4:	9b08      	ldr	r3, [sp, #32]
 800baa6:	4605      	mov	r5, r0
 800baa8:	bb02      	cbnz	r2, 800baec <_dtoa_r+0xa7c>
 800baaa:	4601      	mov	r1, r0
 800baac:	4658      	mov	r0, fp
 800baae:	f001 f93f 	bl	800cd30 <__mcmp>
 800bab2:	9b08      	ldr	r3, [sp, #32]
 800bab4:	4602      	mov	r2, r0
 800bab6:	4629      	mov	r1, r5
 800bab8:	4620      	mov	r0, r4
 800baba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800babe:	f000 feaf 	bl	800c820 <_Bfree>
 800bac2:	9b05      	ldr	r3, [sp, #20]
 800bac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bac6:	9d01      	ldr	r5, [sp, #4]
 800bac8:	ea43 0102 	orr.w	r1, r3, r2
 800bacc:	9b06      	ldr	r3, [sp, #24]
 800bace:	430b      	orrs	r3, r1
 800bad0:	9b08      	ldr	r3, [sp, #32]
 800bad2:	d10d      	bne.n	800baf0 <_dtoa_r+0xa80>
 800bad4:	2b39      	cmp	r3, #57	; 0x39
 800bad6:	d029      	beq.n	800bb2c <_dtoa_r+0xabc>
 800bad8:	f1b9 0f00 	cmp.w	r9, #0
 800badc:	dd01      	ble.n	800bae2 <_dtoa_r+0xa72>
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	3331      	adds	r3, #49	; 0x31
 800bae2:	9a02      	ldr	r2, [sp, #8]
 800bae4:	7013      	strb	r3, [r2, #0]
 800bae6:	e774      	b.n	800b9d2 <_dtoa_r+0x962>
 800bae8:	4638      	mov	r0, r7
 800baea:	e7b9      	b.n	800ba60 <_dtoa_r+0x9f0>
 800baec:	2201      	movs	r2, #1
 800baee:	e7e2      	b.n	800bab6 <_dtoa_r+0xa46>
 800baf0:	f1b9 0f00 	cmp.w	r9, #0
 800baf4:	db06      	blt.n	800bb04 <_dtoa_r+0xa94>
 800baf6:	9905      	ldr	r1, [sp, #20]
 800baf8:	ea41 0909 	orr.w	r9, r1, r9
 800bafc:	9906      	ldr	r1, [sp, #24]
 800bafe:	ea59 0101 	orrs.w	r1, r9, r1
 800bb02:	d120      	bne.n	800bb46 <_dtoa_r+0xad6>
 800bb04:	2a00      	cmp	r2, #0
 800bb06:	ddec      	ble.n	800bae2 <_dtoa_r+0xa72>
 800bb08:	4659      	mov	r1, fp
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	f001 f8a2 	bl	800cc58 <__lshift>
 800bb14:	4631      	mov	r1, r6
 800bb16:	4683      	mov	fp, r0
 800bb18:	f001 f90a 	bl	800cd30 <__mcmp>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	dc02      	bgt.n	800bb28 <_dtoa_r+0xab8>
 800bb22:	d1de      	bne.n	800bae2 <_dtoa_r+0xa72>
 800bb24:	07da      	lsls	r2, r3, #31
 800bb26:	d5dc      	bpl.n	800bae2 <_dtoa_r+0xa72>
 800bb28:	2b39      	cmp	r3, #57	; 0x39
 800bb2a:	d1d8      	bne.n	800bade <_dtoa_r+0xa6e>
 800bb2c:	9a02      	ldr	r2, [sp, #8]
 800bb2e:	2339      	movs	r3, #57	; 0x39
 800bb30:	7013      	strb	r3, [r2, #0]
 800bb32:	462b      	mov	r3, r5
 800bb34:	461d      	mov	r5, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb3c:	2a39      	cmp	r2, #57	; 0x39
 800bb3e:	d050      	beq.n	800bbe2 <_dtoa_r+0xb72>
 800bb40:	3201      	adds	r2, #1
 800bb42:	701a      	strb	r2, [r3, #0]
 800bb44:	e745      	b.n	800b9d2 <_dtoa_r+0x962>
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	dd03      	ble.n	800bb52 <_dtoa_r+0xae2>
 800bb4a:	2b39      	cmp	r3, #57	; 0x39
 800bb4c:	d0ee      	beq.n	800bb2c <_dtoa_r+0xabc>
 800bb4e:	3301      	adds	r3, #1
 800bb50:	e7c7      	b.n	800bae2 <_dtoa_r+0xa72>
 800bb52:	9a01      	ldr	r2, [sp, #4]
 800bb54:	9907      	ldr	r1, [sp, #28]
 800bb56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb5a:	428a      	cmp	r2, r1
 800bb5c:	d02a      	beq.n	800bbb4 <_dtoa_r+0xb44>
 800bb5e:	4659      	mov	r1, fp
 800bb60:	2300      	movs	r3, #0
 800bb62:	220a      	movs	r2, #10
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fe7d 	bl	800c864 <__multadd>
 800bb6a:	45b8      	cmp	r8, r7
 800bb6c:	4683      	mov	fp, r0
 800bb6e:	f04f 0300 	mov.w	r3, #0
 800bb72:	f04f 020a 	mov.w	r2, #10
 800bb76:	4641      	mov	r1, r8
 800bb78:	4620      	mov	r0, r4
 800bb7a:	d107      	bne.n	800bb8c <_dtoa_r+0xb1c>
 800bb7c:	f000 fe72 	bl	800c864 <__multadd>
 800bb80:	4680      	mov	r8, r0
 800bb82:	4607      	mov	r7, r0
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	3301      	adds	r3, #1
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	e775      	b.n	800ba78 <_dtoa_r+0xa08>
 800bb8c:	f000 fe6a 	bl	800c864 <__multadd>
 800bb90:	4639      	mov	r1, r7
 800bb92:	4680      	mov	r8, r0
 800bb94:	2300      	movs	r3, #0
 800bb96:	220a      	movs	r2, #10
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 fe63 	bl	800c864 <__multadd>
 800bb9e:	4607      	mov	r7, r0
 800bba0:	e7f0      	b.n	800bb84 <_dtoa_r+0xb14>
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	9a00      	ldr	r2, [sp, #0]
 800bba8:	bfcc      	ite	gt
 800bbaa:	464d      	movgt	r5, r9
 800bbac:	2501      	movle	r5, #1
 800bbae:	4415      	add	r5, r2
 800bbb0:	f04f 0800 	mov.w	r8, #0
 800bbb4:	4659      	mov	r1, fp
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	4620      	mov	r0, r4
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	f001 f84c 	bl	800cc58 <__lshift>
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4683      	mov	fp, r0
 800bbc4:	f001 f8b4 	bl	800cd30 <__mcmp>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	dcb2      	bgt.n	800bb32 <_dtoa_r+0xac2>
 800bbcc:	d102      	bne.n	800bbd4 <_dtoa_r+0xb64>
 800bbce:	9b01      	ldr	r3, [sp, #4]
 800bbd0:	07db      	lsls	r3, r3, #31
 800bbd2:	d4ae      	bmi.n	800bb32 <_dtoa_r+0xac2>
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	461d      	mov	r5, r3
 800bbd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbdc:	2a30      	cmp	r2, #48	; 0x30
 800bbde:	d0fa      	beq.n	800bbd6 <_dtoa_r+0xb66>
 800bbe0:	e6f7      	b.n	800b9d2 <_dtoa_r+0x962>
 800bbe2:	9a00      	ldr	r2, [sp, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d1a5      	bne.n	800bb34 <_dtoa_r+0xac4>
 800bbe8:	f10a 0a01 	add.w	sl, sl, #1
 800bbec:	2331      	movs	r3, #49	; 0x31
 800bbee:	e779      	b.n	800bae4 <_dtoa_r+0xa74>
 800bbf0:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <_dtoa_r+0xbd0>)
 800bbf2:	f7ff baaf 	b.w	800b154 <_dtoa_r+0xe4>
 800bbf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f47f aa86 	bne.w	800b10a <_dtoa_r+0x9a>
 800bbfe:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <_dtoa_r+0xbd4>)
 800bc00:	f7ff baa8 	b.w	800b154 <_dtoa_r+0xe4>
 800bc04:	f1b9 0f00 	cmp.w	r9, #0
 800bc08:	dc03      	bgt.n	800bc12 <_dtoa_r+0xba2>
 800bc0a:	9b05      	ldr	r3, [sp, #20]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	f73f aec9 	bgt.w	800b9a4 <_dtoa_r+0x934>
 800bc12:	9d00      	ldr	r5, [sp, #0]
 800bc14:	4631      	mov	r1, r6
 800bc16:	4658      	mov	r0, fp
 800bc18:	f7ff f99c 	bl	800af54 <quorem>
 800bc1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bc20:	f805 3b01 	strb.w	r3, [r5], #1
 800bc24:	9a00      	ldr	r2, [sp, #0]
 800bc26:	1aaa      	subs	r2, r5, r2
 800bc28:	4591      	cmp	r9, r2
 800bc2a:	ddba      	ble.n	800bba2 <_dtoa_r+0xb32>
 800bc2c:	4659      	mov	r1, fp
 800bc2e:	2300      	movs	r3, #0
 800bc30:	220a      	movs	r2, #10
 800bc32:	4620      	mov	r0, r4
 800bc34:	f000 fe16 	bl	800c864 <__multadd>
 800bc38:	4683      	mov	fp, r0
 800bc3a:	e7eb      	b.n	800bc14 <_dtoa_r+0xba4>
 800bc3c:	0800e4fc 	.word	0x0800e4fc
 800bc40:	0800e2fc 	.word	0x0800e2fc
 800bc44:	0800e479 	.word	0x0800e479

0800bc48 <__sflush_r>:
 800bc48:	898a      	ldrh	r2, [r1, #12]
 800bc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4e:	4605      	mov	r5, r0
 800bc50:	0710      	lsls	r0, r2, #28
 800bc52:	460c      	mov	r4, r1
 800bc54:	d458      	bmi.n	800bd08 <__sflush_r+0xc0>
 800bc56:	684b      	ldr	r3, [r1, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc05      	bgt.n	800bc68 <__sflush_r+0x20>
 800bc5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dc02      	bgt.n	800bc68 <__sflush_r+0x20>
 800bc62:	2000      	movs	r0, #0
 800bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc6a:	2e00      	cmp	r6, #0
 800bc6c:	d0f9      	beq.n	800bc62 <__sflush_r+0x1a>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc74:	682f      	ldr	r7, [r5, #0]
 800bc76:	602b      	str	r3, [r5, #0]
 800bc78:	d032      	beq.n	800bce0 <__sflush_r+0x98>
 800bc7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	075a      	lsls	r2, r3, #29
 800bc80:	d505      	bpl.n	800bc8e <__sflush_r+0x46>
 800bc82:	6863      	ldr	r3, [r4, #4]
 800bc84:	1ac0      	subs	r0, r0, r3
 800bc86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc88:	b10b      	cbz	r3, 800bc8e <__sflush_r+0x46>
 800bc8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc8c:	1ac0      	subs	r0, r0, r3
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4602      	mov	r2, r0
 800bc92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc94:	6a21      	ldr	r1, [r4, #32]
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b0      	blx	r6
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	d106      	bne.n	800bcae <__sflush_r+0x66>
 800bca0:	6829      	ldr	r1, [r5, #0]
 800bca2:	291d      	cmp	r1, #29
 800bca4:	d82c      	bhi.n	800bd00 <__sflush_r+0xb8>
 800bca6:	4a2a      	ldr	r2, [pc, #168]	; (800bd50 <__sflush_r+0x108>)
 800bca8:	40ca      	lsrs	r2, r1
 800bcaa:	07d6      	lsls	r6, r2, #31
 800bcac:	d528      	bpl.n	800bd00 <__sflush_r+0xb8>
 800bcae:	2200      	movs	r2, #0
 800bcb0:	6062      	str	r2, [r4, #4]
 800bcb2:	04d9      	lsls	r1, r3, #19
 800bcb4:	6922      	ldr	r2, [r4, #16]
 800bcb6:	6022      	str	r2, [r4, #0]
 800bcb8:	d504      	bpl.n	800bcc4 <__sflush_r+0x7c>
 800bcba:	1c42      	adds	r2, r0, #1
 800bcbc:	d101      	bne.n	800bcc2 <__sflush_r+0x7a>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	b903      	cbnz	r3, 800bcc4 <__sflush_r+0x7c>
 800bcc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bcc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcc6:	602f      	str	r7, [r5, #0]
 800bcc8:	2900      	cmp	r1, #0
 800bcca:	d0ca      	beq.n	800bc62 <__sflush_r+0x1a>
 800bccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcd0:	4299      	cmp	r1, r3
 800bcd2:	d002      	beq.n	800bcda <__sflush_r+0x92>
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f001 fa2d 	bl	800d134 <_free_r>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	6360      	str	r0, [r4, #52]	; 0x34
 800bcde:	e7c1      	b.n	800bc64 <__sflush_r+0x1c>
 800bce0:	6a21      	ldr	r1, [r4, #32]
 800bce2:	2301      	movs	r3, #1
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b0      	blx	r6
 800bce8:	1c41      	adds	r1, r0, #1
 800bcea:	d1c7      	bne.n	800bc7c <__sflush_r+0x34>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0c4      	beq.n	800bc7c <__sflush_r+0x34>
 800bcf2:	2b1d      	cmp	r3, #29
 800bcf4:	d001      	beq.n	800bcfa <__sflush_r+0xb2>
 800bcf6:	2b16      	cmp	r3, #22
 800bcf8:	d101      	bne.n	800bcfe <__sflush_r+0xb6>
 800bcfa:	602f      	str	r7, [r5, #0]
 800bcfc:	e7b1      	b.n	800bc62 <__sflush_r+0x1a>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd04:	81a3      	strh	r3, [r4, #12]
 800bd06:	e7ad      	b.n	800bc64 <__sflush_r+0x1c>
 800bd08:	690f      	ldr	r7, [r1, #16]
 800bd0a:	2f00      	cmp	r7, #0
 800bd0c:	d0a9      	beq.n	800bc62 <__sflush_r+0x1a>
 800bd0e:	0793      	lsls	r3, r2, #30
 800bd10:	680e      	ldr	r6, [r1, #0]
 800bd12:	bf08      	it	eq
 800bd14:	694b      	ldreq	r3, [r1, #20]
 800bd16:	600f      	str	r7, [r1, #0]
 800bd18:	bf18      	it	ne
 800bd1a:	2300      	movne	r3, #0
 800bd1c:	eba6 0807 	sub.w	r8, r6, r7
 800bd20:	608b      	str	r3, [r1, #8]
 800bd22:	f1b8 0f00 	cmp.w	r8, #0
 800bd26:	dd9c      	ble.n	800bc62 <__sflush_r+0x1a>
 800bd28:	6a21      	ldr	r1, [r4, #32]
 800bd2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd2c:	4643      	mov	r3, r8
 800bd2e:	463a      	mov	r2, r7
 800bd30:	4628      	mov	r0, r5
 800bd32:	47b0      	blx	r6
 800bd34:	2800      	cmp	r0, #0
 800bd36:	dc06      	bgt.n	800bd46 <__sflush_r+0xfe>
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	e78e      	b.n	800bc64 <__sflush_r+0x1c>
 800bd46:	4407      	add	r7, r0
 800bd48:	eba8 0800 	sub.w	r8, r8, r0
 800bd4c:	e7e9      	b.n	800bd22 <__sflush_r+0xda>
 800bd4e:	bf00      	nop
 800bd50:	20400001 	.word	0x20400001

0800bd54 <_fflush_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	690b      	ldr	r3, [r1, #16]
 800bd58:	4605      	mov	r5, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	b913      	cbnz	r3, 800bd64 <_fflush_r+0x10>
 800bd5e:	2500      	movs	r5, #0
 800bd60:	4628      	mov	r0, r5
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	b118      	cbz	r0, 800bd6e <_fflush_r+0x1a>
 800bd66:	6983      	ldr	r3, [r0, #24]
 800bd68:	b90b      	cbnz	r3, 800bd6e <_fflush_r+0x1a>
 800bd6a:	f000 f887 	bl	800be7c <__sinit>
 800bd6e:	4b14      	ldr	r3, [pc, #80]	; (800bdc0 <_fflush_r+0x6c>)
 800bd70:	429c      	cmp	r4, r3
 800bd72:	d11b      	bne.n	800bdac <_fflush_r+0x58>
 800bd74:	686c      	ldr	r4, [r5, #4]
 800bd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0ef      	beq.n	800bd5e <_fflush_r+0xa>
 800bd7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd80:	07d0      	lsls	r0, r2, #31
 800bd82:	d404      	bmi.n	800bd8e <_fflush_r+0x3a>
 800bd84:	0599      	lsls	r1, r3, #22
 800bd86:	d402      	bmi.n	800bd8e <_fflush_r+0x3a>
 800bd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd8a:	f000 fc88 	bl	800c69e <__retarget_lock_acquire_recursive>
 800bd8e:	4628      	mov	r0, r5
 800bd90:	4621      	mov	r1, r4
 800bd92:	f7ff ff59 	bl	800bc48 <__sflush_r>
 800bd96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd98:	07da      	lsls	r2, r3, #31
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	d4e0      	bmi.n	800bd60 <_fflush_r+0xc>
 800bd9e:	89a3      	ldrh	r3, [r4, #12]
 800bda0:	059b      	lsls	r3, r3, #22
 800bda2:	d4dd      	bmi.n	800bd60 <_fflush_r+0xc>
 800bda4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bda6:	f000 fc7b 	bl	800c6a0 <__retarget_lock_release_recursive>
 800bdaa:	e7d9      	b.n	800bd60 <_fflush_r+0xc>
 800bdac:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <_fflush_r+0x70>)
 800bdae:	429c      	cmp	r4, r3
 800bdb0:	d101      	bne.n	800bdb6 <_fflush_r+0x62>
 800bdb2:	68ac      	ldr	r4, [r5, #8]
 800bdb4:	e7df      	b.n	800bd76 <_fflush_r+0x22>
 800bdb6:	4b04      	ldr	r3, [pc, #16]	; (800bdc8 <_fflush_r+0x74>)
 800bdb8:	429c      	cmp	r4, r3
 800bdba:	bf08      	it	eq
 800bdbc:	68ec      	ldreq	r4, [r5, #12]
 800bdbe:	e7da      	b.n	800bd76 <_fflush_r+0x22>
 800bdc0:	0800e530 	.word	0x0800e530
 800bdc4:	0800e550 	.word	0x0800e550
 800bdc8:	0800e510 	.word	0x0800e510

0800bdcc <std>:
 800bdcc:	2300      	movs	r3, #0
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	e9c0 3300 	strd	r3, r3, [r0]
 800bdd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdda:	6083      	str	r3, [r0, #8]
 800bddc:	8181      	strh	r1, [r0, #12]
 800bdde:	6643      	str	r3, [r0, #100]	; 0x64
 800bde0:	81c2      	strh	r2, [r0, #14]
 800bde2:	6183      	str	r3, [r0, #24]
 800bde4:	4619      	mov	r1, r3
 800bde6:	2208      	movs	r2, #8
 800bde8:	305c      	adds	r0, #92	; 0x5c
 800bdea:	f7fd fa09 	bl	8009200 <memset>
 800bdee:	4b05      	ldr	r3, [pc, #20]	; (800be04 <std+0x38>)
 800bdf0:	6263      	str	r3, [r4, #36]	; 0x24
 800bdf2:	4b05      	ldr	r3, [pc, #20]	; (800be08 <std+0x3c>)
 800bdf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdf6:	4b05      	ldr	r3, [pc, #20]	; (800be0c <std+0x40>)
 800bdf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdfa:	4b05      	ldr	r3, [pc, #20]	; (800be10 <std+0x44>)
 800bdfc:	6224      	str	r4, [r4, #32]
 800bdfe:	6323      	str	r3, [r4, #48]	; 0x30
 800be00:	bd10      	pop	{r4, pc}
 800be02:	bf00      	nop
 800be04:	0800d829 	.word	0x0800d829
 800be08:	0800d84b 	.word	0x0800d84b
 800be0c:	0800d883 	.word	0x0800d883
 800be10:	0800d8a7 	.word	0x0800d8a7

0800be14 <_cleanup_r>:
 800be14:	4901      	ldr	r1, [pc, #4]	; (800be1c <_cleanup_r+0x8>)
 800be16:	f000 b8af 	b.w	800bf78 <_fwalk_reent>
 800be1a:	bf00      	nop
 800be1c:	0800bd55 	.word	0x0800bd55

0800be20 <__sfmoreglue>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	1e4a      	subs	r2, r1, #1
 800be24:	2568      	movs	r5, #104	; 0x68
 800be26:	4355      	muls	r5, r2
 800be28:	460e      	mov	r6, r1
 800be2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be2e:	f001 f9d1 	bl	800d1d4 <_malloc_r>
 800be32:	4604      	mov	r4, r0
 800be34:	b140      	cbz	r0, 800be48 <__sfmoreglue+0x28>
 800be36:	2100      	movs	r1, #0
 800be38:	e9c0 1600 	strd	r1, r6, [r0]
 800be3c:	300c      	adds	r0, #12
 800be3e:	60a0      	str	r0, [r4, #8]
 800be40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be44:	f7fd f9dc 	bl	8009200 <memset>
 800be48:	4620      	mov	r0, r4
 800be4a:	bd70      	pop	{r4, r5, r6, pc}

0800be4c <__sfp_lock_acquire>:
 800be4c:	4801      	ldr	r0, [pc, #4]	; (800be54 <__sfp_lock_acquire+0x8>)
 800be4e:	f000 bc26 	b.w	800c69e <__retarget_lock_acquire_recursive>
 800be52:	bf00      	nop
 800be54:	200008cc 	.word	0x200008cc

0800be58 <__sfp_lock_release>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__sfp_lock_release+0x8>)
 800be5a:	f000 bc21 	b.w	800c6a0 <__retarget_lock_release_recursive>
 800be5e:	bf00      	nop
 800be60:	200008cc 	.word	0x200008cc

0800be64 <__sinit_lock_acquire>:
 800be64:	4801      	ldr	r0, [pc, #4]	; (800be6c <__sinit_lock_acquire+0x8>)
 800be66:	f000 bc1a 	b.w	800c69e <__retarget_lock_acquire_recursive>
 800be6a:	bf00      	nop
 800be6c:	200008c7 	.word	0x200008c7

0800be70 <__sinit_lock_release>:
 800be70:	4801      	ldr	r0, [pc, #4]	; (800be78 <__sinit_lock_release+0x8>)
 800be72:	f000 bc15 	b.w	800c6a0 <__retarget_lock_release_recursive>
 800be76:	bf00      	nop
 800be78:	200008c7 	.word	0x200008c7

0800be7c <__sinit>:
 800be7c:	b510      	push	{r4, lr}
 800be7e:	4604      	mov	r4, r0
 800be80:	f7ff fff0 	bl	800be64 <__sinit_lock_acquire>
 800be84:	69a3      	ldr	r3, [r4, #24]
 800be86:	b11b      	cbz	r3, 800be90 <__sinit+0x14>
 800be88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be8c:	f7ff bff0 	b.w	800be70 <__sinit_lock_release>
 800be90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be94:	6523      	str	r3, [r4, #80]	; 0x50
 800be96:	4b13      	ldr	r3, [pc, #76]	; (800bee4 <__sinit+0x68>)
 800be98:	4a13      	ldr	r2, [pc, #76]	; (800bee8 <__sinit+0x6c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be9e:	42a3      	cmp	r3, r4
 800bea0:	bf04      	itt	eq
 800bea2:	2301      	moveq	r3, #1
 800bea4:	61a3      	streq	r3, [r4, #24]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f820 	bl	800beec <__sfp>
 800beac:	6060      	str	r0, [r4, #4]
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 f81c 	bl	800beec <__sfp>
 800beb4:	60a0      	str	r0, [r4, #8]
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 f818 	bl	800beec <__sfp>
 800bebc:	2200      	movs	r2, #0
 800bebe:	60e0      	str	r0, [r4, #12]
 800bec0:	2104      	movs	r1, #4
 800bec2:	6860      	ldr	r0, [r4, #4]
 800bec4:	f7ff ff82 	bl	800bdcc <std>
 800bec8:	68a0      	ldr	r0, [r4, #8]
 800beca:	2201      	movs	r2, #1
 800becc:	2109      	movs	r1, #9
 800bece:	f7ff ff7d 	bl	800bdcc <std>
 800bed2:	68e0      	ldr	r0, [r4, #12]
 800bed4:	2202      	movs	r2, #2
 800bed6:	2112      	movs	r1, #18
 800bed8:	f7ff ff78 	bl	800bdcc <std>
 800bedc:	2301      	movs	r3, #1
 800bede:	61a3      	str	r3, [r4, #24]
 800bee0:	e7d2      	b.n	800be88 <__sinit+0xc>
 800bee2:	bf00      	nop
 800bee4:	0800e2e8 	.word	0x0800e2e8
 800bee8:	0800be15 	.word	0x0800be15

0800beec <__sfp>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	4607      	mov	r7, r0
 800bef0:	f7ff ffac 	bl	800be4c <__sfp_lock_acquire>
 800bef4:	4b1e      	ldr	r3, [pc, #120]	; (800bf70 <__sfp+0x84>)
 800bef6:	681e      	ldr	r6, [r3, #0]
 800bef8:	69b3      	ldr	r3, [r6, #24]
 800befa:	b913      	cbnz	r3, 800bf02 <__sfp+0x16>
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff ffbd 	bl	800be7c <__sinit>
 800bf02:	3648      	adds	r6, #72	; 0x48
 800bf04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	d503      	bpl.n	800bf14 <__sfp+0x28>
 800bf0c:	6833      	ldr	r3, [r6, #0]
 800bf0e:	b30b      	cbz	r3, 800bf54 <__sfp+0x68>
 800bf10:	6836      	ldr	r6, [r6, #0]
 800bf12:	e7f7      	b.n	800bf04 <__sfp+0x18>
 800bf14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf18:	b9d5      	cbnz	r5, 800bf50 <__sfp+0x64>
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <__sfp+0x88>)
 800bf1c:	60e3      	str	r3, [r4, #12]
 800bf1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf22:	6665      	str	r5, [r4, #100]	; 0x64
 800bf24:	f000 fbba 	bl	800c69c <__retarget_lock_init_recursive>
 800bf28:	f7ff ff96 	bl	800be58 <__sfp_lock_release>
 800bf2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf34:	6025      	str	r5, [r4, #0]
 800bf36:	61a5      	str	r5, [r4, #24]
 800bf38:	2208      	movs	r2, #8
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf40:	f7fd f95e 	bl	8009200 <memset>
 800bf44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf50:	3468      	adds	r4, #104	; 0x68
 800bf52:	e7d9      	b.n	800bf08 <__sfp+0x1c>
 800bf54:	2104      	movs	r1, #4
 800bf56:	4638      	mov	r0, r7
 800bf58:	f7ff ff62 	bl	800be20 <__sfmoreglue>
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	6030      	str	r0, [r6, #0]
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d1d5      	bne.n	800bf10 <__sfp+0x24>
 800bf64:	f7ff ff78 	bl	800be58 <__sfp_lock_release>
 800bf68:	230c      	movs	r3, #12
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	e7ee      	b.n	800bf4c <__sfp+0x60>
 800bf6e:	bf00      	nop
 800bf70:	0800e2e8 	.word	0x0800e2e8
 800bf74:	ffff0001 	.word	0xffff0001

0800bf78 <_fwalk_reent>:
 800bf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	4688      	mov	r8, r1
 800bf80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf84:	2700      	movs	r7, #0
 800bf86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf8a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf8e:	d505      	bpl.n	800bf9c <_fwalk_reent+0x24>
 800bf90:	6824      	ldr	r4, [r4, #0]
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	d1f7      	bne.n	800bf86 <_fwalk_reent+0xe>
 800bf96:	4638      	mov	r0, r7
 800bf98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf9c:	89ab      	ldrh	r3, [r5, #12]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d907      	bls.n	800bfb2 <_fwalk_reent+0x3a>
 800bfa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	d003      	beq.n	800bfb2 <_fwalk_reent+0x3a>
 800bfaa:	4629      	mov	r1, r5
 800bfac:	4630      	mov	r0, r6
 800bfae:	47c0      	blx	r8
 800bfb0:	4307      	orrs	r7, r0
 800bfb2:	3568      	adds	r5, #104	; 0x68
 800bfb4:	e7e9      	b.n	800bf8a <_fwalk_reent+0x12>

0800bfb6 <rshift>:
 800bfb6:	6903      	ldr	r3, [r0, #16]
 800bfb8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bfbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfc0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfc4:	f100 0414 	add.w	r4, r0, #20
 800bfc8:	dd45      	ble.n	800c056 <rshift+0xa0>
 800bfca:	f011 011f 	ands.w	r1, r1, #31
 800bfce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfd2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bfd6:	d10c      	bne.n	800bff2 <rshift+0x3c>
 800bfd8:	f100 0710 	add.w	r7, r0, #16
 800bfdc:	4629      	mov	r1, r5
 800bfde:	42b1      	cmp	r1, r6
 800bfe0:	d334      	bcc.n	800c04c <rshift+0x96>
 800bfe2:	1a9b      	subs	r3, r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	1eea      	subs	r2, r5, #3
 800bfe8:	4296      	cmp	r6, r2
 800bfea:	bf38      	it	cc
 800bfec:	2300      	movcc	r3, #0
 800bfee:	4423      	add	r3, r4
 800bff0:	e015      	b.n	800c01e <rshift+0x68>
 800bff2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bff6:	f1c1 0820 	rsb	r8, r1, #32
 800bffa:	40cf      	lsrs	r7, r1
 800bffc:	f105 0e04 	add.w	lr, r5, #4
 800c000:	46a1      	mov	r9, r4
 800c002:	4576      	cmp	r6, lr
 800c004:	46f4      	mov	ip, lr
 800c006:	d815      	bhi.n	800c034 <rshift+0x7e>
 800c008:	1a9b      	subs	r3, r3, r2
 800c00a:	009a      	lsls	r2, r3, #2
 800c00c:	3a04      	subs	r2, #4
 800c00e:	3501      	adds	r5, #1
 800c010:	42ae      	cmp	r6, r5
 800c012:	bf38      	it	cc
 800c014:	2200      	movcc	r2, #0
 800c016:	18a3      	adds	r3, r4, r2
 800c018:	50a7      	str	r7, [r4, r2]
 800c01a:	b107      	cbz	r7, 800c01e <rshift+0x68>
 800c01c:	3304      	adds	r3, #4
 800c01e:	1b1a      	subs	r2, r3, r4
 800c020:	42a3      	cmp	r3, r4
 800c022:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c026:	bf08      	it	eq
 800c028:	2300      	moveq	r3, #0
 800c02a:	6102      	str	r2, [r0, #16]
 800c02c:	bf08      	it	eq
 800c02e:	6143      	streq	r3, [r0, #20]
 800c030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c034:	f8dc c000 	ldr.w	ip, [ip]
 800c038:	fa0c fc08 	lsl.w	ip, ip, r8
 800c03c:	ea4c 0707 	orr.w	r7, ip, r7
 800c040:	f849 7b04 	str.w	r7, [r9], #4
 800c044:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c048:	40cf      	lsrs	r7, r1
 800c04a:	e7da      	b.n	800c002 <rshift+0x4c>
 800c04c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c050:	f847 cf04 	str.w	ip, [r7, #4]!
 800c054:	e7c3      	b.n	800bfde <rshift+0x28>
 800c056:	4623      	mov	r3, r4
 800c058:	e7e1      	b.n	800c01e <rshift+0x68>

0800c05a <__hexdig_fun>:
 800c05a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c05e:	2b09      	cmp	r3, #9
 800c060:	d802      	bhi.n	800c068 <__hexdig_fun+0xe>
 800c062:	3820      	subs	r0, #32
 800c064:	b2c0      	uxtb	r0, r0
 800c066:	4770      	bx	lr
 800c068:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c06c:	2b05      	cmp	r3, #5
 800c06e:	d801      	bhi.n	800c074 <__hexdig_fun+0x1a>
 800c070:	3847      	subs	r0, #71	; 0x47
 800c072:	e7f7      	b.n	800c064 <__hexdig_fun+0xa>
 800c074:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c078:	2b05      	cmp	r3, #5
 800c07a:	d801      	bhi.n	800c080 <__hexdig_fun+0x26>
 800c07c:	3827      	subs	r0, #39	; 0x27
 800c07e:	e7f1      	b.n	800c064 <__hexdig_fun+0xa>
 800c080:	2000      	movs	r0, #0
 800c082:	4770      	bx	lr

0800c084 <__gethex>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	ed2d 8b02 	vpush	{d8}
 800c08c:	b089      	sub	sp, #36	; 0x24
 800c08e:	ee08 0a10 	vmov	s16, r0
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	4bbc      	ldr	r3, [pc, #752]	; (800c388 <__gethex+0x304>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	9301      	str	r3, [sp, #4]
 800c09a:	4618      	mov	r0, r3
 800c09c:	468b      	mov	fp, r1
 800c09e:	4690      	mov	r8, r2
 800c0a0:	f7f4 f896 	bl	80001d0 <strlen>
 800c0a4:	9b01      	ldr	r3, [sp, #4]
 800c0a6:	f8db 2000 	ldr.w	r2, [fp]
 800c0aa:	4403      	add	r3, r0
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c0b2:	9305      	str	r3, [sp, #20]
 800c0b4:	1c93      	adds	r3, r2, #2
 800c0b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c0ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c0be:	32fe      	adds	r2, #254	; 0xfe
 800c0c0:	18d1      	adds	r1, r2, r3
 800c0c2:	461f      	mov	r7, r3
 800c0c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0c8:	9100      	str	r1, [sp, #0]
 800c0ca:	2830      	cmp	r0, #48	; 0x30
 800c0cc:	d0f8      	beq.n	800c0c0 <__gethex+0x3c>
 800c0ce:	f7ff ffc4 	bl	800c05a <__hexdig_fun>
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d13a      	bne.n	800c14e <__gethex+0xca>
 800c0d8:	9901      	ldr	r1, [sp, #4]
 800c0da:	4652      	mov	r2, sl
 800c0dc:	4638      	mov	r0, r7
 800c0de:	f001 fbe6 	bl	800d8ae <strncmp>
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d168      	bne.n	800c1ba <__gethex+0x136>
 800c0e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c0ec:	eb07 060a 	add.w	r6, r7, sl
 800c0f0:	f7ff ffb3 	bl	800c05a <__hexdig_fun>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d062      	beq.n	800c1be <__gethex+0x13a>
 800c0f8:	4633      	mov	r3, r6
 800c0fa:	7818      	ldrb	r0, [r3, #0]
 800c0fc:	2830      	cmp	r0, #48	; 0x30
 800c0fe:	461f      	mov	r7, r3
 800c100:	f103 0301 	add.w	r3, r3, #1
 800c104:	d0f9      	beq.n	800c0fa <__gethex+0x76>
 800c106:	f7ff ffa8 	bl	800c05a <__hexdig_fun>
 800c10a:	2301      	movs	r3, #1
 800c10c:	fab0 f480 	clz	r4, r0
 800c110:	0964      	lsrs	r4, r4, #5
 800c112:	4635      	mov	r5, r6
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	463a      	mov	r2, r7
 800c118:	4616      	mov	r6, r2
 800c11a:	3201      	adds	r2, #1
 800c11c:	7830      	ldrb	r0, [r6, #0]
 800c11e:	f7ff ff9c 	bl	800c05a <__hexdig_fun>
 800c122:	2800      	cmp	r0, #0
 800c124:	d1f8      	bne.n	800c118 <__gethex+0x94>
 800c126:	9901      	ldr	r1, [sp, #4]
 800c128:	4652      	mov	r2, sl
 800c12a:	4630      	mov	r0, r6
 800c12c:	f001 fbbf 	bl	800d8ae <strncmp>
 800c130:	b980      	cbnz	r0, 800c154 <__gethex+0xd0>
 800c132:	b94d      	cbnz	r5, 800c148 <__gethex+0xc4>
 800c134:	eb06 050a 	add.w	r5, r6, sl
 800c138:	462a      	mov	r2, r5
 800c13a:	4616      	mov	r6, r2
 800c13c:	3201      	adds	r2, #1
 800c13e:	7830      	ldrb	r0, [r6, #0]
 800c140:	f7ff ff8b 	bl	800c05a <__hexdig_fun>
 800c144:	2800      	cmp	r0, #0
 800c146:	d1f8      	bne.n	800c13a <__gethex+0xb6>
 800c148:	1bad      	subs	r5, r5, r6
 800c14a:	00ad      	lsls	r5, r5, #2
 800c14c:	e004      	b.n	800c158 <__gethex+0xd4>
 800c14e:	2400      	movs	r4, #0
 800c150:	4625      	mov	r5, r4
 800c152:	e7e0      	b.n	800c116 <__gethex+0x92>
 800c154:	2d00      	cmp	r5, #0
 800c156:	d1f7      	bne.n	800c148 <__gethex+0xc4>
 800c158:	7833      	ldrb	r3, [r6, #0]
 800c15a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c15e:	2b50      	cmp	r3, #80	; 0x50
 800c160:	d13b      	bne.n	800c1da <__gethex+0x156>
 800c162:	7873      	ldrb	r3, [r6, #1]
 800c164:	2b2b      	cmp	r3, #43	; 0x2b
 800c166:	d02c      	beq.n	800c1c2 <__gethex+0x13e>
 800c168:	2b2d      	cmp	r3, #45	; 0x2d
 800c16a:	d02e      	beq.n	800c1ca <__gethex+0x146>
 800c16c:	1c71      	adds	r1, r6, #1
 800c16e:	f04f 0900 	mov.w	r9, #0
 800c172:	7808      	ldrb	r0, [r1, #0]
 800c174:	f7ff ff71 	bl	800c05a <__hexdig_fun>
 800c178:	1e43      	subs	r3, r0, #1
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b18      	cmp	r3, #24
 800c17e:	d82c      	bhi.n	800c1da <__gethex+0x156>
 800c180:	f1a0 0210 	sub.w	r2, r0, #16
 800c184:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c188:	f7ff ff67 	bl	800c05a <__hexdig_fun>
 800c18c:	1e43      	subs	r3, r0, #1
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	2b18      	cmp	r3, #24
 800c192:	d91d      	bls.n	800c1d0 <__gethex+0x14c>
 800c194:	f1b9 0f00 	cmp.w	r9, #0
 800c198:	d000      	beq.n	800c19c <__gethex+0x118>
 800c19a:	4252      	negs	r2, r2
 800c19c:	4415      	add	r5, r2
 800c19e:	f8cb 1000 	str.w	r1, [fp]
 800c1a2:	b1e4      	cbz	r4, 800c1de <__gethex+0x15a>
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf14      	ite	ne
 800c1aa:	2700      	movne	r7, #0
 800c1ac:	2706      	moveq	r7, #6
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	b009      	add	sp, #36	; 0x24
 800c1b2:	ecbd 8b02 	vpop	{d8}
 800c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ba:	463e      	mov	r6, r7
 800c1bc:	4625      	mov	r5, r4
 800c1be:	2401      	movs	r4, #1
 800c1c0:	e7ca      	b.n	800c158 <__gethex+0xd4>
 800c1c2:	f04f 0900 	mov.w	r9, #0
 800c1c6:	1cb1      	adds	r1, r6, #2
 800c1c8:	e7d3      	b.n	800c172 <__gethex+0xee>
 800c1ca:	f04f 0901 	mov.w	r9, #1
 800c1ce:	e7fa      	b.n	800c1c6 <__gethex+0x142>
 800c1d0:	230a      	movs	r3, #10
 800c1d2:	fb03 0202 	mla	r2, r3, r2, r0
 800c1d6:	3a10      	subs	r2, #16
 800c1d8:	e7d4      	b.n	800c184 <__gethex+0x100>
 800c1da:	4631      	mov	r1, r6
 800c1dc:	e7df      	b.n	800c19e <__gethex+0x11a>
 800c1de:	1bf3      	subs	r3, r6, r7
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	2b07      	cmp	r3, #7
 800c1e6:	dc0b      	bgt.n	800c200 <__gethex+0x17c>
 800c1e8:	ee18 0a10 	vmov	r0, s16
 800c1ec:	f000 fad8 	bl	800c7a0 <_Balloc>
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	b940      	cbnz	r0, 800c206 <__gethex+0x182>
 800c1f4:	4b65      	ldr	r3, [pc, #404]	; (800c38c <__gethex+0x308>)
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	21de      	movs	r1, #222	; 0xde
 800c1fa:	4865      	ldr	r0, [pc, #404]	; (800c390 <__gethex+0x30c>)
 800c1fc:	f001 fb88 	bl	800d910 <__assert_func>
 800c200:	3101      	adds	r1, #1
 800c202:	105b      	asrs	r3, r3, #1
 800c204:	e7ee      	b.n	800c1e4 <__gethex+0x160>
 800c206:	f100 0914 	add.w	r9, r0, #20
 800c20a:	f04f 0b00 	mov.w	fp, #0
 800c20e:	f1ca 0301 	rsb	r3, sl, #1
 800c212:	f8cd 9008 	str.w	r9, [sp, #8]
 800c216:	f8cd b000 	str.w	fp, [sp]
 800c21a:	9306      	str	r3, [sp, #24]
 800c21c:	42b7      	cmp	r7, r6
 800c21e:	d340      	bcc.n	800c2a2 <__gethex+0x21e>
 800c220:	9802      	ldr	r0, [sp, #8]
 800c222:	9b00      	ldr	r3, [sp, #0]
 800c224:	f840 3b04 	str.w	r3, [r0], #4
 800c228:	eba0 0009 	sub.w	r0, r0, r9
 800c22c:	1080      	asrs	r0, r0, #2
 800c22e:	0146      	lsls	r6, r0, #5
 800c230:	6120      	str	r0, [r4, #16]
 800c232:	4618      	mov	r0, r3
 800c234:	f000 fbaa 	bl	800c98c <__hi0bits>
 800c238:	1a30      	subs	r0, r6, r0
 800c23a:	f8d8 6000 	ldr.w	r6, [r8]
 800c23e:	42b0      	cmp	r0, r6
 800c240:	dd63      	ble.n	800c30a <__gethex+0x286>
 800c242:	1b87      	subs	r7, r0, r6
 800c244:	4639      	mov	r1, r7
 800c246:	4620      	mov	r0, r4
 800c248:	f000 ff44 	bl	800d0d4 <__any_on>
 800c24c:	4682      	mov	sl, r0
 800c24e:	b1a8      	cbz	r0, 800c27c <__gethex+0x1f8>
 800c250:	1e7b      	subs	r3, r7, #1
 800c252:	1159      	asrs	r1, r3, #5
 800c254:	f003 021f 	and.w	r2, r3, #31
 800c258:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c25c:	f04f 0a01 	mov.w	sl, #1
 800c260:	fa0a f202 	lsl.w	r2, sl, r2
 800c264:	420a      	tst	r2, r1
 800c266:	d009      	beq.n	800c27c <__gethex+0x1f8>
 800c268:	4553      	cmp	r3, sl
 800c26a:	dd05      	ble.n	800c278 <__gethex+0x1f4>
 800c26c:	1eb9      	subs	r1, r7, #2
 800c26e:	4620      	mov	r0, r4
 800c270:	f000 ff30 	bl	800d0d4 <__any_on>
 800c274:	2800      	cmp	r0, #0
 800c276:	d145      	bne.n	800c304 <__gethex+0x280>
 800c278:	f04f 0a02 	mov.w	sl, #2
 800c27c:	4639      	mov	r1, r7
 800c27e:	4620      	mov	r0, r4
 800c280:	f7ff fe99 	bl	800bfb6 <rshift>
 800c284:	443d      	add	r5, r7
 800c286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c28a:	42ab      	cmp	r3, r5
 800c28c:	da4c      	bge.n	800c328 <__gethex+0x2a4>
 800c28e:	ee18 0a10 	vmov	r0, s16
 800c292:	4621      	mov	r1, r4
 800c294:	f000 fac4 	bl	800c820 <_Bfree>
 800c298:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c29a:	2300      	movs	r3, #0
 800c29c:	6013      	str	r3, [r2, #0]
 800c29e:	27a3      	movs	r7, #163	; 0xa3
 800c2a0:	e785      	b.n	800c1ae <__gethex+0x12a>
 800c2a2:	1e73      	subs	r3, r6, #1
 800c2a4:	9a05      	ldr	r2, [sp, #20]
 800c2a6:	9303      	str	r3, [sp, #12]
 800c2a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d019      	beq.n	800c2e4 <__gethex+0x260>
 800c2b0:	f1bb 0f20 	cmp.w	fp, #32
 800c2b4:	d107      	bne.n	800c2c6 <__gethex+0x242>
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	9a00      	ldr	r2, [sp, #0]
 800c2ba:	f843 2b04 	str.w	r2, [r3], #4
 800c2be:	9302      	str	r3, [sp, #8]
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	469b      	mov	fp, r3
 800c2c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c2ca:	f7ff fec6 	bl	800c05a <__hexdig_fun>
 800c2ce:	9b00      	ldr	r3, [sp, #0]
 800c2d0:	f000 000f 	and.w	r0, r0, #15
 800c2d4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c2d8:	4303      	orrs	r3, r0
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	f10b 0b04 	add.w	fp, fp, #4
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	e00d      	b.n	800c300 <__gethex+0x27c>
 800c2e4:	9b03      	ldr	r3, [sp, #12]
 800c2e6:	9a06      	ldr	r2, [sp, #24]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	42bb      	cmp	r3, r7
 800c2ec:	d3e0      	bcc.n	800c2b0 <__gethex+0x22c>
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	9901      	ldr	r1, [sp, #4]
 800c2f2:	9307      	str	r3, [sp, #28]
 800c2f4:	4652      	mov	r2, sl
 800c2f6:	f001 fada 	bl	800d8ae <strncmp>
 800c2fa:	9b07      	ldr	r3, [sp, #28]
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d1d7      	bne.n	800c2b0 <__gethex+0x22c>
 800c300:	461e      	mov	r6, r3
 800c302:	e78b      	b.n	800c21c <__gethex+0x198>
 800c304:	f04f 0a03 	mov.w	sl, #3
 800c308:	e7b8      	b.n	800c27c <__gethex+0x1f8>
 800c30a:	da0a      	bge.n	800c322 <__gethex+0x29e>
 800c30c:	1a37      	subs	r7, r6, r0
 800c30e:	4621      	mov	r1, r4
 800c310:	ee18 0a10 	vmov	r0, s16
 800c314:	463a      	mov	r2, r7
 800c316:	f000 fc9f 	bl	800cc58 <__lshift>
 800c31a:	1bed      	subs	r5, r5, r7
 800c31c:	4604      	mov	r4, r0
 800c31e:	f100 0914 	add.w	r9, r0, #20
 800c322:	f04f 0a00 	mov.w	sl, #0
 800c326:	e7ae      	b.n	800c286 <__gethex+0x202>
 800c328:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c32c:	42a8      	cmp	r0, r5
 800c32e:	dd72      	ble.n	800c416 <__gethex+0x392>
 800c330:	1b45      	subs	r5, r0, r5
 800c332:	42ae      	cmp	r6, r5
 800c334:	dc36      	bgt.n	800c3a4 <__gethex+0x320>
 800c336:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d02a      	beq.n	800c394 <__gethex+0x310>
 800c33e:	2b03      	cmp	r3, #3
 800c340:	d02c      	beq.n	800c39c <__gethex+0x318>
 800c342:	2b01      	cmp	r3, #1
 800c344:	d115      	bne.n	800c372 <__gethex+0x2ee>
 800c346:	42ae      	cmp	r6, r5
 800c348:	d113      	bne.n	800c372 <__gethex+0x2ee>
 800c34a:	2e01      	cmp	r6, #1
 800c34c:	d10b      	bne.n	800c366 <__gethex+0x2e2>
 800c34e:	9a04      	ldr	r2, [sp, #16]
 800c350:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	2301      	movs	r3, #1
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	f8c9 3000 	str.w	r3, [r9]
 800c35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c360:	2762      	movs	r7, #98	; 0x62
 800c362:	601c      	str	r4, [r3, #0]
 800c364:	e723      	b.n	800c1ae <__gethex+0x12a>
 800c366:	1e71      	subs	r1, r6, #1
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 feb3 	bl	800d0d4 <__any_on>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d1ed      	bne.n	800c34e <__gethex+0x2ca>
 800c372:	ee18 0a10 	vmov	r0, s16
 800c376:	4621      	mov	r1, r4
 800c378:	f000 fa52 	bl	800c820 <_Bfree>
 800c37c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c37e:	2300      	movs	r3, #0
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	2750      	movs	r7, #80	; 0x50
 800c384:	e713      	b.n	800c1ae <__gethex+0x12a>
 800c386:	bf00      	nop
 800c388:	0800e5dc 	.word	0x0800e5dc
 800c38c:	0800e4fc 	.word	0x0800e4fc
 800c390:	0800e570 	.word	0x0800e570
 800c394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1eb      	bne.n	800c372 <__gethex+0x2ee>
 800c39a:	e7d8      	b.n	800c34e <__gethex+0x2ca>
 800c39c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1d5      	bne.n	800c34e <__gethex+0x2ca>
 800c3a2:	e7e6      	b.n	800c372 <__gethex+0x2ee>
 800c3a4:	1e6f      	subs	r7, r5, #1
 800c3a6:	f1ba 0f00 	cmp.w	sl, #0
 800c3aa:	d131      	bne.n	800c410 <__gethex+0x38c>
 800c3ac:	b127      	cbz	r7, 800c3b8 <__gethex+0x334>
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 fe8f 	bl	800d0d4 <__any_on>
 800c3b6:	4682      	mov	sl, r0
 800c3b8:	117b      	asrs	r3, r7, #5
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c3c0:	f007 071f 	and.w	r7, r7, #31
 800c3c4:	fa01 f707 	lsl.w	r7, r1, r7
 800c3c8:	421f      	tst	r7, r3
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	bf18      	it	ne
 800c3d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c3d4:	1b76      	subs	r6, r6, r5
 800c3d6:	f7ff fdee 	bl	800bfb6 <rshift>
 800c3da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3de:	2702      	movs	r7, #2
 800c3e0:	f1ba 0f00 	cmp.w	sl, #0
 800c3e4:	d048      	beq.n	800c478 <__gethex+0x3f4>
 800c3e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d015      	beq.n	800c41a <__gethex+0x396>
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d017      	beq.n	800c422 <__gethex+0x39e>
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d109      	bne.n	800c40a <__gethex+0x386>
 800c3f6:	f01a 0f02 	tst.w	sl, #2
 800c3fa:	d006      	beq.n	800c40a <__gethex+0x386>
 800c3fc:	f8d9 0000 	ldr.w	r0, [r9]
 800c400:	ea4a 0a00 	orr.w	sl, sl, r0
 800c404:	f01a 0f01 	tst.w	sl, #1
 800c408:	d10e      	bne.n	800c428 <__gethex+0x3a4>
 800c40a:	f047 0710 	orr.w	r7, r7, #16
 800c40e:	e033      	b.n	800c478 <__gethex+0x3f4>
 800c410:	f04f 0a01 	mov.w	sl, #1
 800c414:	e7d0      	b.n	800c3b8 <__gethex+0x334>
 800c416:	2701      	movs	r7, #1
 800c418:	e7e2      	b.n	800c3e0 <__gethex+0x35c>
 800c41a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c41c:	f1c3 0301 	rsb	r3, r3, #1
 800c420:	9315      	str	r3, [sp, #84]	; 0x54
 800c422:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c424:	2b00      	cmp	r3, #0
 800c426:	d0f0      	beq.n	800c40a <__gethex+0x386>
 800c428:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c42c:	f104 0314 	add.w	r3, r4, #20
 800c430:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c434:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c438:	f04f 0c00 	mov.w	ip, #0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c442:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c446:	d01c      	beq.n	800c482 <__gethex+0x3fe>
 800c448:	3201      	adds	r2, #1
 800c44a:	6002      	str	r2, [r0, #0]
 800c44c:	2f02      	cmp	r7, #2
 800c44e:	f104 0314 	add.w	r3, r4, #20
 800c452:	d13f      	bne.n	800c4d4 <__gethex+0x450>
 800c454:	f8d8 2000 	ldr.w	r2, [r8]
 800c458:	3a01      	subs	r2, #1
 800c45a:	42b2      	cmp	r2, r6
 800c45c:	d10a      	bne.n	800c474 <__gethex+0x3f0>
 800c45e:	1171      	asrs	r1, r6, #5
 800c460:	2201      	movs	r2, #1
 800c462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c466:	f006 061f 	and.w	r6, r6, #31
 800c46a:	fa02 f606 	lsl.w	r6, r2, r6
 800c46e:	421e      	tst	r6, r3
 800c470:	bf18      	it	ne
 800c472:	4617      	movne	r7, r2
 800c474:	f047 0720 	orr.w	r7, r7, #32
 800c478:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c47a:	601c      	str	r4, [r3, #0]
 800c47c:	9b04      	ldr	r3, [sp, #16]
 800c47e:	601d      	str	r5, [r3, #0]
 800c480:	e695      	b.n	800c1ae <__gethex+0x12a>
 800c482:	4299      	cmp	r1, r3
 800c484:	f843 cc04 	str.w	ip, [r3, #-4]
 800c488:	d8d8      	bhi.n	800c43c <__gethex+0x3b8>
 800c48a:	68a3      	ldr	r3, [r4, #8]
 800c48c:	459b      	cmp	fp, r3
 800c48e:	db19      	blt.n	800c4c4 <__gethex+0x440>
 800c490:	6861      	ldr	r1, [r4, #4]
 800c492:	ee18 0a10 	vmov	r0, s16
 800c496:	3101      	adds	r1, #1
 800c498:	f000 f982 	bl	800c7a0 <_Balloc>
 800c49c:	4681      	mov	r9, r0
 800c49e:	b918      	cbnz	r0, 800c4a8 <__gethex+0x424>
 800c4a0:	4b1a      	ldr	r3, [pc, #104]	; (800c50c <__gethex+0x488>)
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	2184      	movs	r1, #132	; 0x84
 800c4a6:	e6a8      	b.n	800c1fa <__gethex+0x176>
 800c4a8:	6922      	ldr	r2, [r4, #16]
 800c4aa:	3202      	adds	r2, #2
 800c4ac:	f104 010c 	add.w	r1, r4, #12
 800c4b0:	0092      	lsls	r2, r2, #2
 800c4b2:	300c      	adds	r0, #12
 800c4b4:	f7fc fe96 	bl	80091e4 <memcpy>
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	ee18 0a10 	vmov	r0, s16
 800c4be:	f000 f9af 	bl	800c820 <_Bfree>
 800c4c2:	464c      	mov	r4, r9
 800c4c4:	6923      	ldr	r3, [r4, #16]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4cc:	6122      	str	r2, [r4, #16]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	615a      	str	r2, [r3, #20]
 800c4d2:	e7bb      	b.n	800c44c <__gethex+0x3c8>
 800c4d4:	6922      	ldr	r2, [r4, #16]
 800c4d6:	455a      	cmp	r2, fp
 800c4d8:	dd0b      	ble.n	800c4f2 <__gethex+0x46e>
 800c4da:	2101      	movs	r1, #1
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7ff fd6a 	bl	800bfb6 <rshift>
 800c4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4e6:	3501      	adds	r5, #1
 800c4e8:	42ab      	cmp	r3, r5
 800c4ea:	f6ff aed0 	blt.w	800c28e <__gethex+0x20a>
 800c4ee:	2701      	movs	r7, #1
 800c4f0:	e7c0      	b.n	800c474 <__gethex+0x3f0>
 800c4f2:	f016 061f 	ands.w	r6, r6, #31
 800c4f6:	d0fa      	beq.n	800c4ee <__gethex+0x46a>
 800c4f8:	449a      	add	sl, r3
 800c4fa:	f1c6 0620 	rsb	r6, r6, #32
 800c4fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c502:	f000 fa43 	bl	800c98c <__hi0bits>
 800c506:	42b0      	cmp	r0, r6
 800c508:	dbe7      	blt.n	800c4da <__gethex+0x456>
 800c50a:	e7f0      	b.n	800c4ee <__gethex+0x46a>
 800c50c:	0800e4fc 	.word	0x0800e4fc

0800c510 <L_shift>:
 800c510:	f1c2 0208 	rsb	r2, r2, #8
 800c514:	0092      	lsls	r2, r2, #2
 800c516:	b570      	push	{r4, r5, r6, lr}
 800c518:	f1c2 0620 	rsb	r6, r2, #32
 800c51c:	6843      	ldr	r3, [r0, #4]
 800c51e:	6804      	ldr	r4, [r0, #0]
 800c520:	fa03 f506 	lsl.w	r5, r3, r6
 800c524:	432c      	orrs	r4, r5
 800c526:	40d3      	lsrs	r3, r2
 800c528:	6004      	str	r4, [r0, #0]
 800c52a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c52e:	4288      	cmp	r0, r1
 800c530:	d3f4      	bcc.n	800c51c <L_shift+0xc>
 800c532:	bd70      	pop	{r4, r5, r6, pc}

0800c534 <__match>:
 800c534:	b530      	push	{r4, r5, lr}
 800c536:	6803      	ldr	r3, [r0, #0]
 800c538:	3301      	adds	r3, #1
 800c53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c53e:	b914      	cbnz	r4, 800c546 <__match+0x12>
 800c540:	6003      	str	r3, [r0, #0]
 800c542:	2001      	movs	r0, #1
 800c544:	bd30      	pop	{r4, r5, pc}
 800c546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c54a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c54e:	2d19      	cmp	r5, #25
 800c550:	bf98      	it	ls
 800c552:	3220      	addls	r2, #32
 800c554:	42a2      	cmp	r2, r4
 800c556:	d0f0      	beq.n	800c53a <__match+0x6>
 800c558:	2000      	movs	r0, #0
 800c55a:	e7f3      	b.n	800c544 <__match+0x10>

0800c55c <__hexnan>:
 800c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c560:	680b      	ldr	r3, [r1, #0]
 800c562:	6801      	ldr	r1, [r0, #0]
 800c564:	115e      	asrs	r6, r3, #5
 800c566:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c56a:	f013 031f 	ands.w	r3, r3, #31
 800c56e:	b087      	sub	sp, #28
 800c570:	bf18      	it	ne
 800c572:	3604      	addne	r6, #4
 800c574:	2500      	movs	r5, #0
 800c576:	1f37      	subs	r7, r6, #4
 800c578:	4682      	mov	sl, r0
 800c57a:	4690      	mov	r8, r2
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c582:	46b9      	mov	r9, r7
 800c584:	463c      	mov	r4, r7
 800c586:	9502      	str	r5, [sp, #8]
 800c588:	46ab      	mov	fp, r5
 800c58a:	784a      	ldrb	r2, [r1, #1]
 800c58c:	1c4b      	adds	r3, r1, #1
 800c58e:	9303      	str	r3, [sp, #12]
 800c590:	b342      	cbz	r2, 800c5e4 <__hexnan+0x88>
 800c592:	4610      	mov	r0, r2
 800c594:	9105      	str	r1, [sp, #20]
 800c596:	9204      	str	r2, [sp, #16]
 800c598:	f7ff fd5f 	bl	800c05a <__hexdig_fun>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d14f      	bne.n	800c640 <__hexnan+0xe4>
 800c5a0:	9a04      	ldr	r2, [sp, #16]
 800c5a2:	9905      	ldr	r1, [sp, #20]
 800c5a4:	2a20      	cmp	r2, #32
 800c5a6:	d818      	bhi.n	800c5da <__hexnan+0x7e>
 800c5a8:	9b02      	ldr	r3, [sp, #8]
 800c5aa:	459b      	cmp	fp, r3
 800c5ac:	dd13      	ble.n	800c5d6 <__hexnan+0x7a>
 800c5ae:	454c      	cmp	r4, r9
 800c5b0:	d206      	bcs.n	800c5c0 <__hexnan+0x64>
 800c5b2:	2d07      	cmp	r5, #7
 800c5b4:	dc04      	bgt.n	800c5c0 <__hexnan+0x64>
 800c5b6:	462a      	mov	r2, r5
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff ffa8 	bl	800c510 <L_shift>
 800c5c0:	4544      	cmp	r4, r8
 800c5c2:	d950      	bls.n	800c666 <__hexnan+0x10a>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f1a4 0904 	sub.w	r9, r4, #4
 800c5ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5ce:	f8cd b008 	str.w	fp, [sp, #8]
 800c5d2:	464c      	mov	r4, r9
 800c5d4:	461d      	mov	r5, r3
 800c5d6:	9903      	ldr	r1, [sp, #12]
 800c5d8:	e7d7      	b.n	800c58a <__hexnan+0x2e>
 800c5da:	2a29      	cmp	r2, #41	; 0x29
 800c5dc:	d156      	bne.n	800c68c <__hexnan+0x130>
 800c5de:	3102      	adds	r1, #2
 800c5e0:	f8ca 1000 	str.w	r1, [sl]
 800c5e4:	f1bb 0f00 	cmp.w	fp, #0
 800c5e8:	d050      	beq.n	800c68c <__hexnan+0x130>
 800c5ea:	454c      	cmp	r4, r9
 800c5ec:	d206      	bcs.n	800c5fc <__hexnan+0xa0>
 800c5ee:	2d07      	cmp	r5, #7
 800c5f0:	dc04      	bgt.n	800c5fc <__hexnan+0xa0>
 800c5f2:	462a      	mov	r2, r5
 800c5f4:	4649      	mov	r1, r9
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f7ff ff8a 	bl	800c510 <L_shift>
 800c5fc:	4544      	cmp	r4, r8
 800c5fe:	d934      	bls.n	800c66a <__hexnan+0x10e>
 800c600:	f1a8 0204 	sub.w	r2, r8, #4
 800c604:	4623      	mov	r3, r4
 800c606:	f853 1b04 	ldr.w	r1, [r3], #4
 800c60a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c60e:	429f      	cmp	r7, r3
 800c610:	d2f9      	bcs.n	800c606 <__hexnan+0xaa>
 800c612:	1b3b      	subs	r3, r7, r4
 800c614:	f023 0303 	bic.w	r3, r3, #3
 800c618:	3304      	adds	r3, #4
 800c61a:	3401      	adds	r4, #1
 800c61c:	3e03      	subs	r6, #3
 800c61e:	42b4      	cmp	r4, r6
 800c620:	bf88      	it	hi
 800c622:	2304      	movhi	r3, #4
 800c624:	4443      	add	r3, r8
 800c626:	2200      	movs	r2, #0
 800c628:	f843 2b04 	str.w	r2, [r3], #4
 800c62c:	429f      	cmp	r7, r3
 800c62e:	d2fb      	bcs.n	800c628 <__hexnan+0xcc>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	b91b      	cbnz	r3, 800c63c <__hexnan+0xe0>
 800c634:	4547      	cmp	r7, r8
 800c636:	d127      	bne.n	800c688 <__hexnan+0x12c>
 800c638:	2301      	movs	r3, #1
 800c63a:	603b      	str	r3, [r7, #0]
 800c63c:	2005      	movs	r0, #5
 800c63e:	e026      	b.n	800c68e <__hexnan+0x132>
 800c640:	3501      	adds	r5, #1
 800c642:	2d08      	cmp	r5, #8
 800c644:	f10b 0b01 	add.w	fp, fp, #1
 800c648:	dd06      	ble.n	800c658 <__hexnan+0xfc>
 800c64a:	4544      	cmp	r4, r8
 800c64c:	d9c3      	bls.n	800c5d6 <__hexnan+0x7a>
 800c64e:	2300      	movs	r3, #0
 800c650:	f844 3c04 	str.w	r3, [r4, #-4]
 800c654:	2501      	movs	r5, #1
 800c656:	3c04      	subs	r4, #4
 800c658:	6822      	ldr	r2, [r4, #0]
 800c65a:	f000 000f 	and.w	r0, r0, #15
 800c65e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	e7b7      	b.n	800c5d6 <__hexnan+0x7a>
 800c666:	2508      	movs	r5, #8
 800c668:	e7b5      	b.n	800c5d6 <__hexnan+0x7a>
 800c66a:	9b01      	ldr	r3, [sp, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0df      	beq.n	800c630 <__hexnan+0xd4>
 800c670:	f04f 32ff 	mov.w	r2, #4294967295
 800c674:	f1c3 0320 	rsb	r3, r3, #32
 800c678:	fa22 f303 	lsr.w	r3, r2, r3
 800c67c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c680:	401a      	ands	r2, r3
 800c682:	f846 2c04 	str.w	r2, [r6, #-4]
 800c686:	e7d3      	b.n	800c630 <__hexnan+0xd4>
 800c688:	3f04      	subs	r7, #4
 800c68a:	e7d1      	b.n	800c630 <__hexnan+0xd4>
 800c68c:	2004      	movs	r0, #4
 800c68e:	b007      	add	sp, #28
 800c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c694 <_localeconv_r>:
 800c694:	4800      	ldr	r0, [pc, #0]	; (800c698 <_localeconv_r+0x4>)
 800c696:	4770      	bx	lr
 800c698:	20000164 	.word	0x20000164

0800c69c <__retarget_lock_init_recursive>:
 800c69c:	4770      	bx	lr

0800c69e <__retarget_lock_acquire_recursive>:
 800c69e:	4770      	bx	lr

0800c6a0 <__retarget_lock_release_recursive>:
 800c6a0:	4770      	bx	lr

0800c6a2 <__swhatbuf_r>:
 800c6a2:	b570      	push	{r4, r5, r6, lr}
 800c6a4:	460e      	mov	r6, r1
 800c6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	b096      	sub	sp, #88	; 0x58
 800c6ae:	4614      	mov	r4, r2
 800c6b0:	461d      	mov	r5, r3
 800c6b2:	da07      	bge.n	800c6c4 <__swhatbuf_r+0x22>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	602b      	str	r3, [r5, #0]
 800c6b8:	89b3      	ldrh	r3, [r6, #12]
 800c6ba:	061a      	lsls	r2, r3, #24
 800c6bc:	d410      	bmi.n	800c6e0 <__swhatbuf_r+0x3e>
 800c6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6c2:	e00e      	b.n	800c6e2 <__swhatbuf_r+0x40>
 800c6c4:	466a      	mov	r2, sp
 800c6c6:	f001 f963 	bl	800d990 <_fstat_r>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	dbf2      	blt.n	800c6b4 <__swhatbuf_r+0x12>
 800c6ce:	9a01      	ldr	r2, [sp, #4]
 800c6d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6d8:	425a      	negs	r2, r3
 800c6da:	415a      	adcs	r2, r3
 800c6dc:	602a      	str	r2, [r5, #0]
 800c6de:	e7ee      	b.n	800c6be <__swhatbuf_r+0x1c>
 800c6e0:	2340      	movs	r3, #64	; 0x40
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	b016      	add	sp, #88	; 0x58
 800c6e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6ec <__smakebuf_r>:
 800c6ec:	898b      	ldrh	r3, [r1, #12]
 800c6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6f0:	079d      	lsls	r5, r3, #30
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	d507      	bpl.n	800c708 <__smakebuf_r+0x1c>
 800c6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6fc:	6023      	str	r3, [r4, #0]
 800c6fe:	6123      	str	r3, [r4, #16]
 800c700:	2301      	movs	r3, #1
 800c702:	6163      	str	r3, [r4, #20]
 800c704:	b002      	add	sp, #8
 800c706:	bd70      	pop	{r4, r5, r6, pc}
 800c708:	ab01      	add	r3, sp, #4
 800c70a:	466a      	mov	r2, sp
 800c70c:	f7ff ffc9 	bl	800c6a2 <__swhatbuf_r>
 800c710:	9900      	ldr	r1, [sp, #0]
 800c712:	4605      	mov	r5, r0
 800c714:	4630      	mov	r0, r6
 800c716:	f000 fd5d 	bl	800d1d4 <_malloc_r>
 800c71a:	b948      	cbnz	r0, 800c730 <__smakebuf_r+0x44>
 800c71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c720:	059a      	lsls	r2, r3, #22
 800c722:	d4ef      	bmi.n	800c704 <__smakebuf_r+0x18>
 800c724:	f023 0303 	bic.w	r3, r3, #3
 800c728:	f043 0302 	orr.w	r3, r3, #2
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	e7e3      	b.n	800c6f8 <__smakebuf_r+0xc>
 800c730:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <__smakebuf_r+0x7c>)
 800c732:	62b3      	str	r3, [r6, #40]	; 0x28
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	6020      	str	r0, [r4, #0]
 800c738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	9b00      	ldr	r3, [sp, #0]
 800c740:	6163      	str	r3, [r4, #20]
 800c742:	9b01      	ldr	r3, [sp, #4]
 800c744:	6120      	str	r0, [r4, #16]
 800c746:	b15b      	cbz	r3, 800c760 <__smakebuf_r+0x74>
 800c748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c74c:	4630      	mov	r0, r6
 800c74e:	f001 f931 	bl	800d9b4 <_isatty_r>
 800c752:	b128      	cbz	r0, 800c760 <__smakebuf_r+0x74>
 800c754:	89a3      	ldrh	r3, [r4, #12]
 800c756:	f023 0303 	bic.w	r3, r3, #3
 800c75a:	f043 0301 	orr.w	r3, r3, #1
 800c75e:	81a3      	strh	r3, [r4, #12]
 800c760:	89a0      	ldrh	r0, [r4, #12]
 800c762:	4305      	orrs	r5, r0
 800c764:	81a5      	strh	r5, [r4, #12]
 800c766:	e7cd      	b.n	800c704 <__smakebuf_r+0x18>
 800c768:	0800be15 	.word	0x0800be15

0800c76c <malloc>:
 800c76c:	4b02      	ldr	r3, [pc, #8]	; (800c778 <malloc+0xc>)
 800c76e:	4601      	mov	r1, r0
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	f000 bd2f 	b.w	800d1d4 <_malloc_r>
 800c776:	bf00      	nop
 800c778:	2000000c 	.word	0x2000000c

0800c77c <__ascii_mbtowc>:
 800c77c:	b082      	sub	sp, #8
 800c77e:	b901      	cbnz	r1, 800c782 <__ascii_mbtowc+0x6>
 800c780:	a901      	add	r1, sp, #4
 800c782:	b142      	cbz	r2, 800c796 <__ascii_mbtowc+0x1a>
 800c784:	b14b      	cbz	r3, 800c79a <__ascii_mbtowc+0x1e>
 800c786:	7813      	ldrb	r3, [r2, #0]
 800c788:	600b      	str	r3, [r1, #0]
 800c78a:	7812      	ldrb	r2, [r2, #0]
 800c78c:	1e10      	subs	r0, r2, #0
 800c78e:	bf18      	it	ne
 800c790:	2001      	movne	r0, #1
 800c792:	b002      	add	sp, #8
 800c794:	4770      	bx	lr
 800c796:	4610      	mov	r0, r2
 800c798:	e7fb      	b.n	800c792 <__ascii_mbtowc+0x16>
 800c79a:	f06f 0001 	mvn.w	r0, #1
 800c79e:	e7f8      	b.n	800c792 <__ascii_mbtowc+0x16>

0800c7a0 <_Balloc>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	b976      	cbnz	r6, 800c7c8 <_Balloc+0x28>
 800c7aa:	2010      	movs	r0, #16
 800c7ac:	f7ff ffde 	bl	800c76c <malloc>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	6260      	str	r0, [r4, #36]	; 0x24
 800c7b4:	b920      	cbnz	r0, 800c7c0 <_Balloc+0x20>
 800c7b6:	4b18      	ldr	r3, [pc, #96]	; (800c818 <_Balloc+0x78>)
 800c7b8:	4818      	ldr	r0, [pc, #96]	; (800c81c <_Balloc+0x7c>)
 800c7ba:	2166      	movs	r1, #102	; 0x66
 800c7bc:	f001 f8a8 	bl	800d910 <__assert_func>
 800c7c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7c4:	6006      	str	r6, [r0, #0]
 800c7c6:	60c6      	str	r6, [r0, #12]
 800c7c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7ca:	68f3      	ldr	r3, [r6, #12]
 800c7cc:	b183      	cbz	r3, 800c7f0 <_Balloc+0x50>
 800c7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7d6:	b9b8      	cbnz	r0, 800c808 <_Balloc+0x68>
 800c7d8:	2101      	movs	r1, #1
 800c7da:	fa01 f605 	lsl.w	r6, r1, r5
 800c7de:	1d72      	adds	r2, r6, #5
 800c7e0:	0092      	lsls	r2, r2, #2
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 fc97 	bl	800d116 <_calloc_r>
 800c7e8:	b160      	cbz	r0, 800c804 <_Balloc+0x64>
 800c7ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7ee:	e00e      	b.n	800c80e <_Balloc+0x6e>
 800c7f0:	2221      	movs	r2, #33	; 0x21
 800c7f2:	2104      	movs	r1, #4
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f000 fc8e 	bl	800d116 <_calloc_r>
 800c7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7fc:	60f0      	str	r0, [r6, #12]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1e4      	bne.n	800c7ce <_Balloc+0x2e>
 800c804:	2000      	movs	r0, #0
 800c806:	bd70      	pop	{r4, r5, r6, pc}
 800c808:	6802      	ldr	r2, [r0, #0]
 800c80a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c80e:	2300      	movs	r3, #0
 800c810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c814:	e7f7      	b.n	800c806 <_Balloc+0x66>
 800c816:	bf00      	nop
 800c818:	0800e486 	.word	0x0800e486
 800c81c:	0800e5f0 	.word	0x0800e5f0

0800c820 <_Bfree>:
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c824:	4605      	mov	r5, r0
 800c826:	460c      	mov	r4, r1
 800c828:	b976      	cbnz	r6, 800c848 <_Bfree+0x28>
 800c82a:	2010      	movs	r0, #16
 800c82c:	f7ff ff9e 	bl	800c76c <malloc>
 800c830:	4602      	mov	r2, r0
 800c832:	6268      	str	r0, [r5, #36]	; 0x24
 800c834:	b920      	cbnz	r0, 800c840 <_Bfree+0x20>
 800c836:	4b09      	ldr	r3, [pc, #36]	; (800c85c <_Bfree+0x3c>)
 800c838:	4809      	ldr	r0, [pc, #36]	; (800c860 <_Bfree+0x40>)
 800c83a:	218a      	movs	r1, #138	; 0x8a
 800c83c:	f001 f868 	bl	800d910 <__assert_func>
 800c840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c844:	6006      	str	r6, [r0, #0]
 800c846:	60c6      	str	r6, [r0, #12]
 800c848:	b13c      	cbz	r4, 800c85a <_Bfree+0x3a>
 800c84a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c84c:	6862      	ldr	r2, [r4, #4]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c854:	6021      	str	r1, [r4, #0]
 800c856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	0800e486 	.word	0x0800e486
 800c860:	0800e5f0 	.word	0x0800e5f0

0800c864 <__multadd>:
 800c864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c868:	690e      	ldr	r6, [r1, #16]
 800c86a:	4607      	mov	r7, r0
 800c86c:	4698      	mov	r8, r3
 800c86e:	460c      	mov	r4, r1
 800c870:	f101 0014 	add.w	r0, r1, #20
 800c874:	2300      	movs	r3, #0
 800c876:	6805      	ldr	r5, [r0, #0]
 800c878:	b2a9      	uxth	r1, r5
 800c87a:	fb02 8101 	mla	r1, r2, r1, r8
 800c87e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c882:	0c2d      	lsrs	r5, r5, #16
 800c884:	fb02 c505 	mla	r5, r2, r5, ip
 800c888:	b289      	uxth	r1, r1
 800c88a:	3301      	adds	r3, #1
 800c88c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c890:	429e      	cmp	r6, r3
 800c892:	f840 1b04 	str.w	r1, [r0], #4
 800c896:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c89a:	dcec      	bgt.n	800c876 <__multadd+0x12>
 800c89c:	f1b8 0f00 	cmp.w	r8, #0
 800c8a0:	d022      	beq.n	800c8e8 <__multadd+0x84>
 800c8a2:	68a3      	ldr	r3, [r4, #8]
 800c8a4:	42b3      	cmp	r3, r6
 800c8a6:	dc19      	bgt.n	800c8dc <__multadd+0x78>
 800c8a8:	6861      	ldr	r1, [r4, #4]
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	3101      	adds	r1, #1
 800c8ae:	f7ff ff77 	bl	800c7a0 <_Balloc>
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	b928      	cbnz	r0, 800c8c2 <__multadd+0x5e>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <__multadd+0x8c>)
 800c8ba:	480e      	ldr	r0, [pc, #56]	; (800c8f4 <__multadd+0x90>)
 800c8bc:	21b5      	movs	r1, #181	; 0xb5
 800c8be:	f001 f827 	bl	800d910 <__assert_func>
 800c8c2:	6922      	ldr	r2, [r4, #16]
 800c8c4:	3202      	adds	r2, #2
 800c8c6:	f104 010c 	add.w	r1, r4, #12
 800c8ca:	0092      	lsls	r2, r2, #2
 800c8cc:	300c      	adds	r0, #12
 800c8ce:	f7fc fc89 	bl	80091e4 <memcpy>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	f7ff ffa3 	bl	800c820 <_Bfree>
 800c8da:	462c      	mov	r4, r5
 800c8dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c8e0:	3601      	adds	r6, #1
 800c8e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800c8e6:	6126      	str	r6, [r4, #16]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ee:	bf00      	nop
 800c8f0:	0800e4fc 	.word	0x0800e4fc
 800c8f4:	0800e5f0 	.word	0x0800e5f0

0800c8f8 <__s2b>:
 800c8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	4615      	mov	r5, r2
 800c900:	461f      	mov	r7, r3
 800c902:	2209      	movs	r2, #9
 800c904:	3308      	adds	r3, #8
 800c906:	4606      	mov	r6, r0
 800c908:	fb93 f3f2 	sdiv	r3, r3, r2
 800c90c:	2100      	movs	r1, #0
 800c90e:	2201      	movs	r2, #1
 800c910:	429a      	cmp	r2, r3
 800c912:	db09      	blt.n	800c928 <__s2b+0x30>
 800c914:	4630      	mov	r0, r6
 800c916:	f7ff ff43 	bl	800c7a0 <_Balloc>
 800c91a:	b940      	cbnz	r0, 800c92e <__s2b+0x36>
 800c91c:	4602      	mov	r2, r0
 800c91e:	4b19      	ldr	r3, [pc, #100]	; (800c984 <__s2b+0x8c>)
 800c920:	4819      	ldr	r0, [pc, #100]	; (800c988 <__s2b+0x90>)
 800c922:	21ce      	movs	r1, #206	; 0xce
 800c924:	f000 fff4 	bl	800d910 <__assert_func>
 800c928:	0052      	lsls	r2, r2, #1
 800c92a:	3101      	adds	r1, #1
 800c92c:	e7f0      	b.n	800c910 <__s2b+0x18>
 800c92e:	9b08      	ldr	r3, [sp, #32]
 800c930:	6143      	str	r3, [r0, #20]
 800c932:	2d09      	cmp	r5, #9
 800c934:	f04f 0301 	mov.w	r3, #1
 800c938:	6103      	str	r3, [r0, #16]
 800c93a:	dd16      	ble.n	800c96a <__s2b+0x72>
 800c93c:	f104 0909 	add.w	r9, r4, #9
 800c940:	46c8      	mov	r8, r9
 800c942:	442c      	add	r4, r5
 800c944:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c948:	4601      	mov	r1, r0
 800c94a:	3b30      	subs	r3, #48	; 0x30
 800c94c:	220a      	movs	r2, #10
 800c94e:	4630      	mov	r0, r6
 800c950:	f7ff ff88 	bl	800c864 <__multadd>
 800c954:	45a0      	cmp	r8, r4
 800c956:	d1f5      	bne.n	800c944 <__s2b+0x4c>
 800c958:	f1a5 0408 	sub.w	r4, r5, #8
 800c95c:	444c      	add	r4, r9
 800c95e:	1b2d      	subs	r5, r5, r4
 800c960:	1963      	adds	r3, r4, r5
 800c962:	42bb      	cmp	r3, r7
 800c964:	db04      	blt.n	800c970 <__s2b+0x78>
 800c966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c96a:	340a      	adds	r4, #10
 800c96c:	2509      	movs	r5, #9
 800c96e:	e7f6      	b.n	800c95e <__s2b+0x66>
 800c970:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c974:	4601      	mov	r1, r0
 800c976:	3b30      	subs	r3, #48	; 0x30
 800c978:	220a      	movs	r2, #10
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7ff ff72 	bl	800c864 <__multadd>
 800c980:	e7ee      	b.n	800c960 <__s2b+0x68>
 800c982:	bf00      	nop
 800c984:	0800e4fc 	.word	0x0800e4fc
 800c988:	0800e5f0 	.word	0x0800e5f0

0800c98c <__hi0bits>:
 800c98c:	0c03      	lsrs	r3, r0, #16
 800c98e:	041b      	lsls	r3, r3, #16
 800c990:	b9d3      	cbnz	r3, 800c9c8 <__hi0bits+0x3c>
 800c992:	0400      	lsls	r0, r0, #16
 800c994:	2310      	movs	r3, #16
 800c996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c99a:	bf04      	itt	eq
 800c99c:	0200      	lsleq	r0, r0, #8
 800c99e:	3308      	addeq	r3, #8
 800c9a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c9a4:	bf04      	itt	eq
 800c9a6:	0100      	lsleq	r0, r0, #4
 800c9a8:	3304      	addeq	r3, #4
 800c9aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c9ae:	bf04      	itt	eq
 800c9b0:	0080      	lsleq	r0, r0, #2
 800c9b2:	3302      	addeq	r3, #2
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	db05      	blt.n	800c9c4 <__hi0bits+0x38>
 800c9b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c9bc:	f103 0301 	add.w	r3, r3, #1
 800c9c0:	bf08      	it	eq
 800c9c2:	2320      	moveq	r3, #32
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	4770      	bx	lr
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e7e4      	b.n	800c996 <__hi0bits+0xa>

0800c9cc <__lo0bits>:
 800c9cc:	6803      	ldr	r3, [r0, #0]
 800c9ce:	f013 0207 	ands.w	r2, r3, #7
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	d00b      	beq.n	800c9ee <__lo0bits+0x22>
 800c9d6:	07da      	lsls	r2, r3, #31
 800c9d8:	d424      	bmi.n	800ca24 <__lo0bits+0x58>
 800c9da:	0798      	lsls	r0, r3, #30
 800c9dc:	bf49      	itett	mi
 800c9de:	085b      	lsrmi	r3, r3, #1
 800c9e0:	089b      	lsrpl	r3, r3, #2
 800c9e2:	2001      	movmi	r0, #1
 800c9e4:	600b      	strmi	r3, [r1, #0]
 800c9e6:	bf5c      	itt	pl
 800c9e8:	600b      	strpl	r3, [r1, #0]
 800c9ea:	2002      	movpl	r0, #2
 800c9ec:	4770      	bx	lr
 800c9ee:	b298      	uxth	r0, r3
 800c9f0:	b9b0      	cbnz	r0, 800ca20 <__lo0bits+0x54>
 800c9f2:	0c1b      	lsrs	r3, r3, #16
 800c9f4:	2010      	movs	r0, #16
 800c9f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c9fa:	bf04      	itt	eq
 800c9fc:	0a1b      	lsreq	r3, r3, #8
 800c9fe:	3008      	addeq	r0, #8
 800ca00:	071a      	lsls	r2, r3, #28
 800ca02:	bf04      	itt	eq
 800ca04:	091b      	lsreq	r3, r3, #4
 800ca06:	3004      	addeq	r0, #4
 800ca08:	079a      	lsls	r2, r3, #30
 800ca0a:	bf04      	itt	eq
 800ca0c:	089b      	lsreq	r3, r3, #2
 800ca0e:	3002      	addeq	r0, #2
 800ca10:	07da      	lsls	r2, r3, #31
 800ca12:	d403      	bmi.n	800ca1c <__lo0bits+0x50>
 800ca14:	085b      	lsrs	r3, r3, #1
 800ca16:	f100 0001 	add.w	r0, r0, #1
 800ca1a:	d005      	beq.n	800ca28 <__lo0bits+0x5c>
 800ca1c:	600b      	str	r3, [r1, #0]
 800ca1e:	4770      	bx	lr
 800ca20:	4610      	mov	r0, r2
 800ca22:	e7e8      	b.n	800c9f6 <__lo0bits+0x2a>
 800ca24:	2000      	movs	r0, #0
 800ca26:	4770      	bx	lr
 800ca28:	2020      	movs	r0, #32
 800ca2a:	4770      	bx	lr

0800ca2c <__i2b>:
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	460c      	mov	r4, r1
 800ca30:	2101      	movs	r1, #1
 800ca32:	f7ff feb5 	bl	800c7a0 <_Balloc>
 800ca36:	4602      	mov	r2, r0
 800ca38:	b928      	cbnz	r0, 800ca46 <__i2b+0x1a>
 800ca3a:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <__i2b+0x24>)
 800ca3c:	4805      	ldr	r0, [pc, #20]	; (800ca54 <__i2b+0x28>)
 800ca3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca42:	f000 ff65 	bl	800d910 <__assert_func>
 800ca46:	2301      	movs	r3, #1
 800ca48:	6144      	str	r4, [r0, #20]
 800ca4a:	6103      	str	r3, [r0, #16]
 800ca4c:	bd10      	pop	{r4, pc}
 800ca4e:	bf00      	nop
 800ca50:	0800e4fc 	.word	0x0800e4fc
 800ca54:	0800e5f0 	.word	0x0800e5f0

0800ca58 <__multiply>:
 800ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5c:	4614      	mov	r4, r2
 800ca5e:	690a      	ldr	r2, [r1, #16]
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	bfb8      	it	lt
 800ca66:	460b      	movlt	r3, r1
 800ca68:	460d      	mov	r5, r1
 800ca6a:	bfbc      	itt	lt
 800ca6c:	4625      	movlt	r5, r4
 800ca6e:	461c      	movlt	r4, r3
 800ca70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ca74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ca78:	68ab      	ldr	r3, [r5, #8]
 800ca7a:	6869      	ldr	r1, [r5, #4]
 800ca7c:	eb0a 0709 	add.w	r7, sl, r9
 800ca80:	42bb      	cmp	r3, r7
 800ca82:	b085      	sub	sp, #20
 800ca84:	bfb8      	it	lt
 800ca86:	3101      	addlt	r1, #1
 800ca88:	f7ff fe8a 	bl	800c7a0 <_Balloc>
 800ca8c:	b930      	cbnz	r0, 800ca9c <__multiply+0x44>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	4b42      	ldr	r3, [pc, #264]	; (800cb9c <__multiply+0x144>)
 800ca92:	4843      	ldr	r0, [pc, #268]	; (800cba0 <__multiply+0x148>)
 800ca94:	f240 115d 	movw	r1, #349	; 0x15d
 800ca98:	f000 ff3a 	bl	800d910 <__assert_func>
 800ca9c:	f100 0614 	add.w	r6, r0, #20
 800caa0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800caa4:	4633      	mov	r3, r6
 800caa6:	2200      	movs	r2, #0
 800caa8:	4543      	cmp	r3, r8
 800caaa:	d31e      	bcc.n	800caea <__multiply+0x92>
 800caac:	f105 0c14 	add.w	ip, r5, #20
 800cab0:	f104 0314 	add.w	r3, r4, #20
 800cab4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cab8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cabc:	9202      	str	r2, [sp, #8]
 800cabe:	ebac 0205 	sub.w	r2, ip, r5
 800cac2:	3a15      	subs	r2, #21
 800cac4:	f022 0203 	bic.w	r2, r2, #3
 800cac8:	3204      	adds	r2, #4
 800caca:	f105 0115 	add.w	r1, r5, #21
 800cace:	458c      	cmp	ip, r1
 800cad0:	bf38      	it	cc
 800cad2:	2204      	movcc	r2, #4
 800cad4:	9201      	str	r2, [sp, #4]
 800cad6:	9a02      	ldr	r2, [sp, #8]
 800cad8:	9303      	str	r3, [sp, #12]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d808      	bhi.n	800caf0 <__multiply+0x98>
 800cade:	2f00      	cmp	r7, #0
 800cae0:	dc55      	bgt.n	800cb8e <__multiply+0x136>
 800cae2:	6107      	str	r7, [r0, #16]
 800cae4:	b005      	add	sp, #20
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	f843 2b04 	str.w	r2, [r3], #4
 800caee:	e7db      	b.n	800caa8 <__multiply+0x50>
 800caf0:	f8b3 a000 	ldrh.w	sl, [r3]
 800caf4:	f1ba 0f00 	cmp.w	sl, #0
 800caf8:	d020      	beq.n	800cb3c <__multiply+0xe4>
 800cafa:	f105 0e14 	add.w	lr, r5, #20
 800cafe:	46b1      	mov	r9, r6
 800cb00:	2200      	movs	r2, #0
 800cb02:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cb06:	f8d9 b000 	ldr.w	fp, [r9]
 800cb0a:	b2a1      	uxth	r1, r4
 800cb0c:	fa1f fb8b 	uxth.w	fp, fp
 800cb10:	fb0a b101 	mla	r1, sl, r1, fp
 800cb14:	4411      	add	r1, r2
 800cb16:	f8d9 2000 	ldr.w	r2, [r9]
 800cb1a:	0c24      	lsrs	r4, r4, #16
 800cb1c:	0c12      	lsrs	r2, r2, #16
 800cb1e:	fb0a 2404 	mla	r4, sl, r4, r2
 800cb22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cb26:	b289      	uxth	r1, r1
 800cb28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cb2c:	45f4      	cmp	ip, lr
 800cb2e:	f849 1b04 	str.w	r1, [r9], #4
 800cb32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cb36:	d8e4      	bhi.n	800cb02 <__multiply+0xaa>
 800cb38:	9901      	ldr	r1, [sp, #4]
 800cb3a:	5072      	str	r2, [r6, r1]
 800cb3c:	9a03      	ldr	r2, [sp, #12]
 800cb3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb42:	3304      	adds	r3, #4
 800cb44:	f1b9 0f00 	cmp.w	r9, #0
 800cb48:	d01f      	beq.n	800cb8a <__multiply+0x132>
 800cb4a:	6834      	ldr	r4, [r6, #0]
 800cb4c:	f105 0114 	add.w	r1, r5, #20
 800cb50:	46b6      	mov	lr, r6
 800cb52:	f04f 0a00 	mov.w	sl, #0
 800cb56:	880a      	ldrh	r2, [r1, #0]
 800cb58:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cb5c:	fb09 b202 	mla	r2, r9, r2, fp
 800cb60:	4492      	add	sl, r2
 800cb62:	b2a4      	uxth	r4, r4
 800cb64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cb68:	f84e 4b04 	str.w	r4, [lr], #4
 800cb6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800cb70:	f8be 2000 	ldrh.w	r2, [lr]
 800cb74:	0c24      	lsrs	r4, r4, #16
 800cb76:	fb09 2404 	mla	r4, r9, r4, r2
 800cb7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cb7e:	458c      	cmp	ip, r1
 800cb80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cb84:	d8e7      	bhi.n	800cb56 <__multiply+0xfe>
 800cb86:	9a01      	ldr	r2, [sp, #4]
 800cb88:	50b4      	str	r4, [r6, r2]
 800cb8a:	3604      	adds	r6, #4
 800cb8c:	e7a3      	b.n	800cad6 <__multiply+0x7e>
 800cb8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1a5      	bne.n	800cae2 <__multiply+0x8a>
 800cb96:	3f01      	subs	r7, #1
 800cb98:	e7a1      	b.n	800cade <__multiply+0x86>
 800cb9a:	bf00      	nop
 800cb9c:	0800e4fc 	.word	0x0800e4fc
 800cba0:	0800e5f0 	.word	0x0800e5f0

0800cba4 <__pow5mult>:
 800cba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cba8:	4615      	mov	r5, r2
 800cbaa:	f012 0203 	ands.w	r2, r2, #3
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460f      	mov	r7, r1
 800cbb2:	d007      	beq.n	800cbc4 <__pow5mult+0x20>
 800cbb4:	4c25      	ldr	r4, [pc, #148]	; (800cc4c <__pow5mult+0xa8>)
 800cbb6:	3a01      	subs	r2, #1
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbbe:	f7ff fe51 	bl	800c864 <__multadd>
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	10ad      	asrs	r5, r5, #2
 800cbc6:	d03d      	beq.n	800cc44 <__pow5mult+0xa0>
 800cbc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cbca:	b97c      	cbnz	r4, 800cbec <__pow5mult+0x48>
 800cbcc:	2010      	movs	r0, #16
 800cbce:	f7ff fdcd 	bl	800c76c <malloc>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	6270      	str	r0, [r6, #36]	; 0x24
 800cbd6:	b928      	cbnz	r0, 800cbe4 <__pow5mult+0x40>
 800cbd8:	4b1d      	ldr	r3, [pc, #116]	; (800cc50 <__pow5mult+0xac>)
 800cbda:	481e      	ldr	r0, [pc, #120]	; (800cc54 <__pow5mult+0xb0>)
 800cbdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cbe0:	f000 fe96 	bl	800d910 <__assert_func>
 800cbe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbe8:	6004      	str	r4, [r0, #0]
 800cbea:	60c4      	str	r4, [r0, #12]
 800cbec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cbf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbf4:	b94c      	cbnz	r4, 800cc0a <__pow5mult+0x66>
 800cbf6:	f240 2171 	movw	r1, #625	; 0x271
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f7ff ff16 	bl	800ca2c <__i2b>
 800cc00:	2300      	movs	r3, #0
 800cc02:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc06:	4604      	mov	r4, r0
 800cc08:	6003      	str	r3, [r0, #0]
 800cc0a:	f04f 0900 	mov.w	r9, #0
 800cc0e:	07eb      	lsls	r3, r5, #31
 800cc10:	d50a      	bpl.n	800cc28 <__pow5mult+0x84>
 800cc12:	4639      	mov	r1, r7
 800cc14:	4622      	mov	r2, r4
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7ff ff1e 	bl	800ca58 <__multiply>
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	4680      	mov	r8, r0
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7ff fdfd 	bl	800c820 <_Bfree>
 800cc26:	4647      	mov	r7, r8
 800cc28:	106d      	asrs	r5, r5, #1
 800cc2a:	d00b      	beq.n	800cc44 <__pow5mult+0xa0>
 800cc2c:	6820      	ldr	r0, [r4, #0]
 800cc2e:	b938      	cbnz	r0, 800cc40 <__pow5mult+0x9c>
 800cc30:	4622      	mov	r2, r4
 800cc32:	4621      	mov	r1, r4
 800cc34:	4630      	mov	r0, r6
 800cc36:	f7ff ff0f 	bl	800ca58 <__multiply>
 800cc3a:	6020      	str	r0, [r4, #0]
 800cc3c:	f8c0 9000 	str.w	r9, [r0]
 800cc40:	4604      	mov	r4, r0
 800cc42:	e7e4      	b.n	800cc0e <__pow5mult+0x6a>
 800cc44:	4638      	mov	r0, r7
 800cc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0800e740 	.word	0x0800e740
 800cc50:	0800e486 	.word	0x0800e486
 800cc54:	0800e5f0 	.word	0x0800e5f0

0800cc58 <__lshift>:
 800cc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	6849      	ldr	r1, [r1, #4]
 800cc60:	6923      	ldr	r3, [r4, #16]
 800cc62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc66:	68a3      	ldr	r3, [r4, #8]
 800cc68:	4607      	mov	r7, r0
 800cc6a:	4691      	mov	r9, r2
 800cc6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc70:	f108 0601 	add.w	r6, r8, #1
 800cc74:	42b3      	cmp	r3, r6
 800cc76:	db0b      	blt.n	800cc90 <__lshift+0x38>
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f7ff fd91 	bl	800c7a0 <_Balloc>
 800cc7e:	4605      	mov	r5, r0
 800cc80:	b948      	cbnz	r0, 800cc96 <__lshift+0x3e>
 800cc82:	4602      	mov	r2, r0
 800cc84:	4b28      	ldr	r3, [pc, #160]	; (800cd28 <__lshift+0xd0>)
 800cc86:	4829      	ldr	r0, [pc, #164]	; (800cd2c <__lshift+0xd4>)
 800cc88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc8c:	f000 fe40 	bl	800d910 <__assert_func>
 800cc90:	3101      	adds	r1, #1
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	e7ee      	b.n	800cc74 <__lshift+0x1c>
 800cc96:	2300      	movs	r3, #0
 800cc98:	f100 0114 	add.w	r1, r0, #20
 800cc9c:	f100 0210 	add.w	r2, r0, #16
 800cca0:	4618      	mov	r0, r3
 800cca2:	4553      	cmp	r3, sl
 800cca4:	db33      	blt.n	800cd0e <__lshift+0xb6>
 800cca6:	6920      	ldr	r0, [r4, #16]
 800cca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccac:	f104 0314 	add.w	r3, r4, #20
 800ccb0:	f019 091f 	ands.w	r9, r9, #31
 800ccb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccbc:	d02b      	beq.n	800cd16 <__lshift+0xbe>
 800ccbe:	f1c9 0e20 	rsb	lr, r9, #32
 800ccc2:	468a      	mov	sl, r1
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	6818      	ldr	r0, [r3, #0]
 800ccc8:	fa00 f009 	lsl.w	r0, r0, r9
 800cccc:	4302      	orrs	r2, r0
 800ccce:	f84a 2b04 	str.w	r2, [sl], #4
 800ccd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd6:	459c      	cmp	ip, r3
 800ccd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccdc:	d8f3      	bhi.n	800ccc6 <__lshift+0x6e>
 800ccde:	ebac 0304 	sub.w	r3, ip, r4
 800cce2:	3b15      	subs	r3, #21
 800cce4:	f023 0303 	bic.w	r3, r3, #3
 800cce8:	3304      	adds	r3, #4
 800ccea:	f104 0015 	add.w	r0, r4, #21
 800ccee:	4584      	cmp	ip, r0
 800ccf0:	bf38      	it	cc
 800ccf2:	2304      	movcc	r3, #4
 800ccf4:	50ca      	str	r2, [r1, r3]
 800ccf6:	b10a      	cbz	r2, 800ccfc <__lshift+0xa4>
 800ccf8:	f108 0602 	add.w	r6, r8, #2
 800ccfc:	3e01      	subs	r6, #1
 800ccfe:	4638      	mov	r0, r7
 800cd00:	612e      	str	r6, [r5, #16]
 800cd02:	4621      	mov	r1, r4
 800cd04:	f7ff fd8c 	bl	800c820 <_Bfree>
 800cd08:	4628      	mov	r0, r5
 800cd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd12:	3301      	adds	r3, #1
 800cd14:	e7c5      	b.n	800cca2 <__lshift+0x4a>
 800cd16:	3904      	subs	r1, #4
 800cd18:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd20:	459c      	cmp	ip, r3
 800cd22:	d8f9      	bhi.n	800cd18 <__lshift+0xc0>
 800cd24:	e7ea      	b.n	800ccfc <__lshift+0xa4>
 800cd26:	bf00      	nop
 800cd28:	0800e4fc 	.word	0x0800e4fc
 800cd2c:	0800e5f0 	.word	0x0800e5f0

0800cd30 <__mcmp>:
 800cd30:	b530      	push	{r4, r5, lr}
 800cd32:	6902      	ldr	r2, [r0, #16]
 800cd34:	690c      	ldr	r4, [r1, #16]
 800cd36:	1b12      	subs	r2, r2, r4
 800cd38:	d10e      	bne.n	800cd58 <__mcmp+0x28>
 800cd3a:	f100 0314 	add.w	r3, r0, #20
 800cd3e:	3114      	adds	r1, #20
 800cd40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd50:	42a5      	cmp	r5, r4
 800cd52:	d003      	beq.n	800cd5c <__mcmp+0x2c>
 800cd54:	d305      	bcc.n	800cd62 <__mcmp+0x32>
 800cd56:	2201      	movs	r2, #1
 800cd58:	4610      	mov	r0, r2
 800cd5a:	bd30      	pop	{r4, r5, pc}
 800cd5c:	4283      	cmp	r3, r0
 800cd5e:	d3f3      	bcc.n	800cd48 <__mcmp+0x18>
 800cd60:	e7fa      	b.n	800cd58 <__mcmp+0x28>
 800cd62:	f04f 32ff 	mov.w	r2, #4294967295
 800cd66:	e7f7      	b.n	800cd58 <__mcmp+0x28>

0800cd68 <__mdiff>:
 800cd68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	4606      	mov	r6, r0
 800cd70:	4611      	mov	r1, r2
 800cd72:	4620      	mov	r0, r4
 800cd74:	4617      	mov	r7, r2
 800cd76:	f7ff ffdb 	bl	800cd30 <__mcmp>
 800cd7a:	1e05      	subs	r5, r0, #0
 800cd7c:	d110      	bne.n	800cda0 <__mdiff+0x38>
 800cd7e:	4629      	mov	r1, r5
 800cd80:	4630      	mov	r0, r6
 800cd82:	f7ff fd0d 	bl	800c7a0 <_Balloc>
 800cd86:	b930      	cbnz	r0, 800cd96 <__mdiff+0x2e>
 800cd88:	4b39      	ldr	r3, [pc, #228]	; (800ce70 <__mdiff+0x108>)
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	f240 2132 	movw	r1, #562	; 0x232
 800cd90:	4838      	ldr	r0, [pc, #224]	; (800ce74 <__mdiff+0x10c>)
 800cd92:	f000 fdbd 	bl	800d910 <__assert_func>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda0:	bfa4      	itt	ge
 800cda2:	463b      	movge	r3, r7
 800cda4:	4627      	movge	r7, r4
 800cda6:	4630      	mov	r0, r6
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	bfa6      	itte	ge
 800cdac:	461c      	movge	r4, r3
 800cdae:	2500      	movge	r5, #0
 800cdb0:	2501      	movlt	r5, #1
 800cdb2:	f7ff fcf5 	bl	800c7a0 <_Balloc>
 800cdb6:	b920      	cbnz	r0, 800cdc2 <__mdiff+0x5a>
 800cdb8:	4b2d      	ldr	r3, [pc, #180]	; (800ce70 <__mdiff+0x108>)
 800cdba:	4602      	mov	r2, r0
 800cdbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cdc0:	e7e6      	b.n	800cd90 <__mdiff+0x28>
 800cdc2:	693e      	ldr	r6, [r7, #16]
 800cdc4:	60c5      	str	r5, [r0, #12]
 800cdc6:	6925      	ldr	r5, [r4, #16]
 800cdc8:	f107 0114 	add.w	r1, r7, #20
 800cdcc:	f104 0914 	add.w	r9, r4, #20
 800cdd0:	f100 0e14 	add.w	lr, r0, #20
 800cdd4:	f107 0210 	add.w	r2, r7, #16
 800cdd8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cddc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cde0:	46f2      	mov	sl, lr
 800cde2:	2700      	movs	r7, #0
 800cde4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cde8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cdec:	fa1f f883 	uxth.w	r8, r3
 800cdf0:	fa17 f78b 	uxtah	r7, r7, fp
 800cdf4:	0c1b      	lsrs	r3, r3, #16
 800cdf6:	eba7 0808 	sub.w	r8, r7, r8
 800cdfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cdfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce02:	fa1f f888 	uxth.w	r8, r8
 800ce06:	141f      	asrs	r7, r3, #16
 800ce08:	454d      	cmp	r5, r9
 800ce0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce0e:	f84a 3b04 	str.w	r3, [sl], #4
 800ce12:	d8e7      	bhi.n	800cde4 <__mdiff+0x7c>
 800ce14:	1b2b      	subs	r3, r5, r4
 800ce16:	3b15      	subs	r3, #21
 800ce18:	f023 0303 	bic.w	r3, r3, #3
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	3415      	adds	r4, #21
 800ce20:	42a5      	cmp	r5, r4
 800ce22:	bf38      	it	cc
 800ce24:	2304      	movcc	r3, #4
 800ce26:	4419      	add	r1, r3
 800ce28:	4473      	add	r3, lr
 800ce2a:	469e      	mov	lr, r3
 800ce2c:	460d      	mov	r5, r1
 800ce2e:	4565      	cmp	r5, ip
 800ce30:	d30e      	bcc.n	800ce50 <__mdiff+0xe8>
 800ce32:	f10c 0203 	add.w	r2, ip, #3
 800ce36:	1a52      	subs	r2, r2, r1
 800ce38:	f022 0203 	bic.w	r2, r2, #3
 800ce3c:	3903      	subs	r1, #3
 800ce3e:	458c      	cmp	ip, r1
 800ce40:	bf38      	it	cc
 800ce42:	2200      	movcc	r2, #0
 800ce44:	441a      	add	r2, r3
 800ce46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce4a:	b17b      	cbz	r3, 800ce6c <__mdiff+0x104>
 800ce4c:	6106      	str	r6, [r0, #16]
 800ce4e:	e7a5      	b.n	800cd9c <__mdiff+0x34>
 800ce50:	f855 8b04 	ldr.w	r8, [r5], #4
 800ce54:	fa17 f488 	uxtah	r4, r7, r8
 800ce58:	1422      	asrs	r2, r4, #16
 800ce5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ce5e:	b2a4      	uxth	r4, r4
 800ce60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ce64:	f84e 4b04 	str.w	r4, [lr], #4
 800ce68:	1417      	asrs	r7, r2, #16
 800ce6a:	e7e0      	b.n	800ce2e <__mdiff+0xc6>
 800ce6c:	3e01      	subs	r6, #1
 800ce6e:	e7ea      	b.n	800ce46 <__mdiff+0xde>
 800ce70:	0800e4fc 	.word	0x0800e4fc
 800ce74:	0800e5f0 	.word	0x0800e5f0

0800ce78 <__ulp>:
 800ce78:	b082      	sub	sp, #8
 800ce7a:	ed8d 0b00 	vstr	d0, [sp]
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	4912      	ldr	r1, [pc, #72]	; (800cecc <__ulp+0x54>)
 800ce82:	4019      	ands	r1, r3
 800ce84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	dd05      	ble.n	800ce98 <__ulp+0x20>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	ec43 2b10 	vmov	d0, r2, r3
 800ce94:	b002      	add	sp, #8
 800ce96:	4770      	bx	lr
 800ce98:	4249      	negs	r1, r1
 800ce9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ce9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cea2:	f04f 0200 	mov.w	r2, #0
 800cea6:	f04f 0300 	mov.w	r3, #0
 800ceaa:	da04      	bge.n	800ceb6 <__ulp+0x3e>
 800ceac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ceb0:	fa41 f300 	asr.w	r3, r1, r0
 800ceb4:	e7ec      	b.n	800ce90 <__ulp+0x18>
 800ceb6:	f1a0 0114 	sub.w	r1, r0, #20
 800ceba:	291e      	cmp	r1, #30
 800cebc:	bfda      	itte	le
 800cebe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cec2:	fa20 f101 	lsrle.w	r1, r0, r1
 800cec6:	2101      	movgt	r1, #1
 800cec8:	460a      	mov	r2, r1
 800ceca:	e7e1      	b.n	800ce90 <__ulp+0x18>
 800cecc:	7ff00000 	.word	0x7ff00000

0800ced0 <__b2d>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	6905      	ldr	r5, [r0, #16]
 800ced4:	f100 0714 	add.w	r7, r0, #20
 800ced8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cedc:	1f2e      	subs	r6, r5, #4
 800cede:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7ff fd52 	bl	800c98c <__hi0bits>
 800cee8:	f1c0 0320 	rsb	r3, r0, #32
 800ceec:	280a      	cmp	r0, #10
 800ceee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cf6c <__b2d+0x9c>
 800cef2:	600b      	str	r3, [r1, #0]
 800cef4:	dc14      	bgt.n	800cf20 <__b2d+0x50>
 800cef6:	f1c0 0e0b 	rsb	lr, r0, #11
 800cefa:	fa24 f10e 	lsr.w	r1, r4, lr
 800cefe:	42b7      	cmp	r7, r6
 800cf00:	ea41 030c 	orr.w	r3, r1, ip
 800cf04:	bf34      	ite	cc
 800cf06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf0a:	2100      	movcs	r1, #0
 800cf0c:	3015      	adds	r0, #21
 800cf0e:	fa04 f000 	lsl.w	r0, r4, r0
 800cf12:	fa21 f10e 	lsr.w	r1, r1, lr
 800cf16:	ea40 0201 	orr.w	r2, r0, r1
 800cf1a:	ec43 2b10 	vmov	d0, r2, r3
 800cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf20:	42b7      	cmp	r7, r6
 800cf22:	bf3a      	itte	cc
 800cf24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf28:	f1a5 0608 	subcc.w	r6, r5, #8
 800cf2c:	2100      	movcs	r1, #0
 800cf2e:	380b      	subs	r0, #11
 800cf30:	d017      	beq.n	800cf62 <__b2d+0x92>
 800cf32:	f1c0 0c20 	rsb	ip, r0, #32
 800cf36:	fa04 f500 	lsl.w	r5, r4, r0
 800cf3a:	42be      	cmp	r6, r7
 800cf3c:	fa21 f40c 	lsr.w	r4, r1, ip
 800cf40:	ea45 0504 	orr.w	r5, r5, r4
 800cf44:	bf8c      	ite	hi
 800cf46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cf4a:	2400      	movls	r4, #0
 800cf4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cf50:	fa01 f000 	lsl.w	r0, r1, r0
 800cf54:	fa24 f40c 	lsr.w	r4, r4, ip
 800cf58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf5c:	ea40 0204 	orr.w	r2, r0, r4
 800cf60:	e7db      	b.n	800cf1a <__b2d+0x4a>
 800cf62:	ea44 030c 	orr.w	r3, r4, ip
 800cf66:	460a      	mov	r2, r1
 800cf68:	e7d7      	b.n	800cf1a <__b2d+0x4a>
 800cf6a:	bf00      	nop
 800cf6c:	3ff00000 	.word	0x3ff00000

0800cf70 <__d2b>:
 800cf70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	4689      	mov	r9, r1
 800cf76:	2101      	movs	r1, #1
 800cf78:	ec57 6b10 	vmov	r6, r7, d0
 800cf7c:	4690      	mov	r8, r2
 800cf7e:	f7ff fc0f 	bl	800c7a0 <_Balloc>
 800cf82:	4604      	mov	r4, r0
 800cf84:	b930      	cbnz	r0, 800cf94 <__d2b+0x24>
 800cf86:	4602      	mov	r2, r0
 800cf88:	4b25      	ldr	r3, [pc, #148]	; (800d020 <__d2b+0xb0>)
 800cf8a:	4826      	ldr	r0, [pc, #152]	; (800d024 <__d2b+0xb4>)
 800cf8c:	f240 310a 	movw	r1, #778	; 0x30a
 800cf90:	f000 fcbe 	bl	800d910 <__assert_func>
 800cf94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cf98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf9c:	bb35      	cbnz	r5, 800cfec <__d2b+0x7c>
 800cf9e:	2e00      	cmp	r6, #0
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	d028      	beq.n	800cff6 <__d2b+0x86>
 800cfa4:	4668      	mov	r0, sp
 800cfa6:	9600      	str	r6, [sp, #0]
 800cfa8:	f7ff fd10 	bl	800c9cc <__lo0bits>
 800cfac:	9900      	ldr	r1, [sp, #0]
 800cfae:	b300      	cbz	r0, 800cff2 <__d2b+0x82>
 800cfb0:	9a01      	ldr	r2, [sp, #4]
 800cfb2:	f1c0 0320 	rsb	r3, r0, #32
 800cfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfba:	430b      	orrs	r3, r1
 800cfbc:	40c2      	lsrs	r2, r0
 800cfbe:	6163      	str	r3, [r4, #20]
 800cfc0:	9201      	str	r2, [sp, #4]
 800cfc2:	9b01      	ldr	r3, [sp, #4]
 800cfc4:	61a3      	str	r3, [r4, #24]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	bf14      	ite	ne
 800cfca:	2202      	movne	r2, #2
 800cfcc:	2201      	moveq	r2, #1
 800cfce:	6122      	str	r2, [r4, #16]
 800cfd0:	b1d5      	cbz	r5, 800d008 <__d2b+0x98>
 800cfd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cfd6:	4405      	add	r5, r0
 800cfd8:	f8c9 5000 	str.w	r5, [r9]
 800cfdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cfe0:	f8c8 0000 	str.w	r0, [r8]
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	b003      	add	sp, #12
 800cfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cff0:	e7d5      	b.n	800cf9e <__d2b+0x2e>
 800cff2:	6161      	str	r1, [r4, #20]
 800cff4:	e7e5      	b.n	800cfc2 <__d2b+0x52>
 800cff6:	a801      	add	r0, sp, #4
 800cff8:	f7ff fce8 	bl	800c9cc <__lo0bits>
 800cffc:	9b01      	ldr	r3, [sp, #4]
 800cffe:	6163      	str	r3, [r4, #20]
 800d000:	2201      	movs	r2, #1
 800d002:	6122      	str	r2, [r4, #16]
 800d004:	3020      	adds	r0, #32
 800d006:	e7e3      	b.n	800cfd0 <__d2b+0x60>
 800d008:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d00c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d010:	f8c9 0000 	str.w	r0, [r9]
 800d014:	6918      	ldr	r0, [r3, #16]
 800d016:	f7ff fcb9 	bl	800c98c <__hi0bits>
 800d01a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d01e:	e7df      	b.n	800cfe0 <__d2b+0x70>
 800d020:	0800e4fc 	.word	0x0800e4fc
 800d024:	0800e5f0 	.word	0x0800e5f0

0800d028 <__ratio>:
 800d028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02c:	4688      	mov	r8, r1
 800d02e:	4669      	mov	r1, sp
 800d030:	4681      	mov	r9, r0
 800d032:	f7ff ff4d 	bl	800ced0 <__b2d>
 800d036:	a901      	add	r1, sp, #4
 800d038:	4640      	mov	r0, r8
 800d03a:	ec55 4b10 	vmov	r4, r5, d0
 800d03e:	f7ff ff47 	bl	800ced0 <__b2d>
 800d042:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d046:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d04a:	eba3 0c02 	sub.w	ip, r3, r2
 800d04e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d052:	1a9b      	subs	r3, r3, r2
 800d054:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d058:	ec51 0b10 	vmov	r0, r1, d0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	bfd6      	itet	le
 800d060:	460a      	movle	r2, r1
 800d062:	462a      	movgt	r2, r5
 800d064:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d068:	468b      	mov	fp, r1
 800d06a:	462f      	mov	r7, r5
 800d06c:	bfd4      	ite	le
 800d06e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d072:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d076:	4620      	mov	r0, r4
 800d078:	ee10 2a10 	vmov	r2, s0
 800d07c:	465b      	mov	r3, fp
 800d07e:	4639      	mov	r1, r7
 800d080:	f7f3 fbe4 	bl	800084c <__aeabi_ddiv>
 800d084:	ec41 0b10 	vmov	d0, r0, r1
 800d088:	b003      	add	sp, #12
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d08e <__copybits>:
 800d08e:	3901      	subs	r1, #1
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	1149      	asrs	r1, r1, #5
 800d094:	6914      	ldr	r4, [r2, #16]
 800d096:	3101      	adds	r1, #1
 800d098:	f102 0314 	add.w	r3, r2, #20
 800d09c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0a4:	1f05      	subs	r5, r0, #4
 800d0a6:	42a3      	cmp	r3, r4
 800d0a8:	d30c      	bcc.n	800d0c4 <__copybits+0x36>
 800d0aa:	1aa3      	subs	r3, r4, r2
 800d0ac:	3b11      	subs	r3, #17
 800d0ae:	f023 0303 	bic.w	r3, r3, #3
 800d0b2:	3211      	adds	r2, #17
 800d0b4:	42a2      	cmp	r2, r4
 800d0b6:	bf88      	it	hi
 800d0b8:	2300      	movhi	r3, #0
 800d0ba:	4418      	add	r0, r3
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4288      	cmp	r0, r1
 800d0c0:	d305      	bcc.n	800d0ce <__copybits+0x40>
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}
 800d0c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d0c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d0cc:	e7eb      	b.n	800d0a6 <__copybits+0x18>
 800d0ce:	f840 3b04 	str.w	r3, [r0], #4
 800d0d2:	e7f4      	b.n	800d0be <__copybits+0x30>

0800d0d4 <__any_on>:
 800d0d4:	f100 0214 	add.w	r2, r0, #20
 800d0d8:	6900      	ldr	r0, [r0, #16]
 800d0da:	114b      	asrs	r3, r1, #5
 800d0dc:	4298      	cmp	r0, r3
 800d0de:	b510      	push	{r4, lr}
 800d0e0:	db11      	blt.n	800d106 <__any_on+0x32>
 800d0e2:	dd0a      	ble.n	800d0fa <__any_on+0x26>
 800d0e4:	f011 011f 	ands.w	r1, r1, #31
 800d0e8:	d007      	beq.n	800d0fa <__any_on+0x26>
 800d0ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d0ee:	fa24 f001 	lsr.w	r0, r4, r1
 800d0f2:	fa00 f101 	lsl.w	r1, r0, r1
 800d0f6:	428c      	cmp	r4, r1
 800d0f8:	d10b      	bne.n	800d112 <__any_on+0x3e>
 800d0fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d803      	bhi.n	800d10a <__any_on+0x36>
 800d102:	2000      	movs	r0, #0
 800d104:	bd10      	pop	{r4, pc}
 800d106:	4603      	mov	r3, r0
 800d108:	e7f7      	b.n	800d0fa <__any_on+0x26>
 800d10a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d10e:	2900      	cmp	r1, #0
 800d110:	d0f5      	beq.n	800d0fe <__any_on+0x2a>
 800d112:	2001      	movs	r0, #1
 800d114:	e7f6      	b.n	800d104 <__any_on+0x30>

0800d116 <_calloc_r>:
 800d116:	b513      	push	{r0, r1, r4, lr}
 800d118:	434a      	muls	r2, r1
 800d11a:	4611      	mov	r1, r2
 800d11c:	9201      	str	r2, [sp, #4]
 800d11e:	f000 f859 	bl	800d1d4 <_malloc_r>
 800d122:	4604      	mov	r4, r0
 800d124:	b118      	cbz	r0, 800d12e <_calloc_r+0x18>
 800d126:	9a01      	ldr	r2, [sp, #4]
 800d128:	2100      	movs	r1, #0
 800d12a:	f7fc f869 	bl	8009200 <memset>
 800d12e:	4620      	mov	r0, r4
 800d130:	b002      	add	sp, #8
 800d132:	bd10      	pop	{r4, pc}

0800d134 <_free_r>:
 800d134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d136:	2900      	cmp	r1, #0
 800d138:	d048      	beq.n	800d1cc <_free_r+0x98>
 800d13a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d13e:	9001      	str	r0, [sp, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	f1a1 0404 	sub.w	r4, r1, #4
 800d146:	bfb8      	it	lt
 800d148:	18e4      	addlt	r4, r4, r3
 800d14a:	f000 fc6f 	bl	800da2c <__malloc_lock>
 800d14e:	4a20      	ldr	r2, [pc, #128]	; (800d1d0 <_free_r+0x9c>)
 800d150:	9801      	ldr	r0, [sp, #4]
 800d152:	6813      	ldr	r3, [r2, #0]
 800d154:	4615      	mov	r5, r2
 800d156:	b933      	cbnz	r3, 800d166 <_free_r+0x32>
 800d158:	6063      	str	r3, [r4, #4]
 800d15a:	6014      	str	r4, [r2, #0]
 800d15c:	b003      	add	sp, #12
 800d15e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d162:	f000 bc69 	b.w	800da38 <__malloc_unlock>
 800d166:	42a3      	cmp	r3, r4
 800d168:	d90b      	bls.n	800d182 <_free_r+0x4e>
 800d16a:	6821      	ldr	r1, [r4, #0]
 800d16c:	1862      	adds	r2, r4, r1
 800d16e:	4293      	cmp	r3, r2
 800d170:	bf04      	itt	eq
 800d172:	681a      	ldreq	r2, [r3, #0]
 800d174:	685b      	ldreq	r3, [r3, #4]
 800d176:	6063      	str	r3, [r4, #4]
 800d178:	bf04      	itt	eq
 800d17a:	1852      	addeq	r2, r2, r1
 800d17c:	6022      	streq	r2, [r4, #0]
 800d17e:	602c      	str	r4, [r5, #0]
 800d180:	e7ec      	b.n	800d15c <_free_r+0x28>
 800d182:	461a      	mov	r2, r3
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	b10b      	cbz	r3, 800d18c <_free_r+0x58>
 800d188:	42a3      	cmp	r3, r4
 800d18a:	d9fa      	bls.n	800d182 <_free_r+0x4e>
 800d18c:	6811      	ldr	r1, [r2, #0]
 800d18e:	1855      	adds	r5, r2, r1
 800d190:	42a5      	cmp	r5, r4
 800d192:	d10b      	bne.n	800d1ac <_free_r+0x78>
 800d194:	6824      	ldr	r4, [r4, #0]
 800d196:	4421      	add	r1, r4
 800d198:	1854      	adds	r4, r2, r1
 800d19a:	42a3      	cmp	r3, r4
 800d19c:	6011      	str	r1, [r2, #0]
 800d19e:	d1dd      	bne.n	800d15c <_free_r+0x28>
 800d1a0:	681c      	ldr	r4, [r3, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	6053      	str	r3, [r2, #4]
 800d1a6:	4421      	add	r1, r4
 800d1a8:	6011      	str	r1, [r2, #0]
 800d1aa:	e7d7      	b.n	800d15c <_free_r+0x28>
 800d1ac:	d902      	bls.n	800d1b4 <_free_r+0x80>
 800d1ae:	230c      	movs	r3, #12
 800d1b0:	6003      	str	r3, [r0, #0]
 800d1b2:	e7d3      	b.n	800d15c <_free_r+0x28>
 800d1b4:	6825      	ldr	r5, [r4, #0]
 800d1b6:	1961      	adds	r1, r4, r5
 800d1b8:	428b      	cmp	r3, r1
 800d1ba:	bf04      	itt	eq
 800d1bc:	6819      	ldreq	r1, [r3, #0]
 800d1be:	685b      	ldreq	r3, [r3, #4]
 800d1c0:	6063      	str	r3, [r4, #4]
 800d1c2:	bf04      	itt	eq
 800d1c4:	1949      	addeq	r1, r1, r5
 800d1c6:	6021      	streq	r1, [r4, #0]
 800d1c8:	6054      	str	r4, [r2, #4]
 800d1ca:	e7c7      	b.n	800d15c <_free_r+0x28>
 800d1cc:	b003      	add	sp, #12
 800d1ce:	bd30      	pop	{r4, r5, pc}
 800d1d0:	20000200 	.word	0x20000200

0800d1d4 <_malloc_r>:
 800d1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d6:	1ccd      	adds	r5, r1, #3
 800d1d8:	f025 0503 	bic.w	r5, r5, #3
 800d1dc:	3508      	adds	r5, #8
 800d1de:	2d0c      	cmp	r5, #12
 800d1e0:	bf38      	it	cc
 800d1e2:	250c      	movcc	r5, #12
 800d1e4:	2d00      	cmp	r5, #0
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	db01      	blt.n	800d1ee <_malloc_r+0x1a>
 800d1ea:	42a9      	cmp	r1, r5
 800d1ec:	d903      	bls.n	800d1f6 <_malloc_r+0x22>
 800d1ee:	230c      	movs	r3, #12
 800d1f0:	6033      	str	r3, [r6, #0]
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f6:	f000 fc19 	bl	800da2c <__malloc_lock>
 800d1fa:	4921      	ldr	r1, [pc, #132]	; (800d280 <_malloc_r+0xac>)
 800d1fc:	680a      	ldr	r2, [r1, #0]
 800d1fe:	4614      	mov	r4, r2
 800d200:	b99c      	cbnz	r4, 800d22a <_malloc_r+0x56>
 800d202:	4f20      	ldr	r7, [pc, #128]	; (800d284 <_malloc_r+0xb0>)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	b923      	cbnz	r3, 800d212 <_malloc_r+0x3e>
 800d208:	4621      	mov	r1, r4
 800d20a:	4630      	mov	r0, r6
 800d20c:	f000 fafc 	bl	800d808 <_sbrk_r>
 800d210:	6038      	str	r0, [r7, #0]
 800d212:	4629      	mov	r1, r5
 800d214:	4630      	mov	r0, r6
 800d216:	f000 faf7 	bl	800d808 <_sbrk_r>
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	d123      	bne.n	800d266 <_malloc_r+0x92>
 800d21e:	230c      	movs	r3, #12
 800d220:	6033      	str	r3, [r6, #0]
 800d222:	4630      	mov	r0, r6
 800d224:	f000 fc08 	bl	800da38 <__malloc_unlock>
 800d228:	e7e3      	b.n	800d1f2 <_malloc_r+0x1e>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	1b5b      	subs	r3, r3, r5
 800d22e:	d417      	bmi.n	800d260 <_malloc_r+0x8c>
 800d230:	2b0b      	cmp	r3, #11
 800d232:	d903      	bls.n	800d23c <_malloc_r+0x68>
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	441c      	add	r4, r3
 800d238:	6025      	str	r5, [r4, #0]
 800d23a:	e004      	b.n	800d246 <_malloc_r+0x72>
 800d23c:	6863      	ldr	r3, [r4, #4]
 800d23e:	42a2      	cmp	r2, r4
 800d240:	bf0c      	ite	eq
 800d242:	600b      	streq	r3, [r1, #0]
 800d244:	6053      	strne	r3, [r2, #4]
 800d246:	4630      	mov	r0, r6
 800d248:	f000 fbf6 	bl	800da38 <__malloc_unlock>
 800d24c:	f104 000b 	add.w	r0, r4, #11
 800d250:	1d23      	adds	r3, r4, #4
 800d252:	f020 0007 	bic.w	r0, r0, #7
 800d256:	1ac2      	subs	r2, r0, r3
 800d258:	d0cc      	beq.n	800d1f4 <_malloc_r+0x20>
 800d25a:	1a1b      	subs	r3, r3, r0
 800d25c:	50a3      	str	r3, [r4, r2]
 800d25e:	e7c9      	b.n	800d1f4 <_malloc_r+0x20>
 800d260:	4622      	mov	r2, r4
 800d262:	6864      	ldr	r4, [r4, #4]
 800d264:	e7cc      	b.n	800d200 <_malloc_r+0x2c>
 800d266:	1cc4      	adds	r4, r0, #3
 800d268:	f024 0403 	bic.w	r4, r4, #3
 800d26c:	42a0      	cmp	r0, r4
 800d26e:	d0e3      	beq.n	800d238 <_malloc_r+0x64>
 800d270:	1a21      	subs	r1, r4, r0
 800d272:	4630      	mov	r0, r6
 800d274:	f000 fac8 	bl	800d808 <_sbrk_r>
 800d278:	3001      	adds	r0, #1
 800d27a:	d1dd      	bne.n	800d238 <_malloc_r+0x64>
 800d27c:	e7cf      	b.n	800d21e <_malloc_r+0x4a>
 800d27e:	bf00      	nop
 800d280:	20000200 	.word	0x20000200
 800d284:	20000204 	.word	0x20000204

0800d288 <__ssputs_r>:
 800d288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	688e      	ldr	r6, [r1, #8]
 800d28e:	429e      	cmp	r6, r3
 800d290:	4682      	mov	sl, r0
 800d292:	460c      	mov	r4, r1
 800d294:	4690      	mov	r8, r2
 800d296:	461f      	mov	r7, r3
 800d298:	d838      	bhi.n	800d30c <__ssputs_r+0x84>
 800d29a:	898a      	ldrh	r2, [r1, #12]
 800d29c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2a0:	d032      	beq.n	800d308 <__ssputs_r+0x80>
 800d2a2:	6825      	ldr	r5, [r4, #0]
 800d2a4:	6909      	ldr	r1, [r1, #16]
 800d2a6:	eba5 0901 	sub.w	r9, r5, r1
 800d2aa:	6965      	ldr	r5, [r4, #20]
 800d2ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	444b      	add	r3, r9
 800d2b8:	106d      	asrs	r5, r5, #1
 800d2ba:	429d      	cmp	r5, r3
 800d2bc:	bf38      	it	cc
 800d2be:	461d      	movcc	r5, r3
 800d2c0:	0553      	lsls	r3, r2, #21
 800d2c2:	d531      	bpl.n	800d328 <__ssputs_r+0xa0>
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7ff ff85 	bl	800d1d4 <_malloc_r>
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	b950      	cbnz	r0, 800d2e4 <__ssputs_r+0x5c>
 800d2ce:	230c      	movs	r3, #12
 800d2d0:	f8ca 3000 	str.w	r3, [sl]
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2da:	81a3      	strh	r3, [r4, #12]
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e4:	6921      	ldr	r1, [r4, #16]
 800d2e6:	464a      	mov	r2, r9
 800d2e8:	f7fb ff7c 	bl	80091e4 <memcpy>
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f6:	81a3      	strh	r3, [r4, #12]
 800d2f8:	6126      	str	r6, [r4, #16]
 800d2fa:	6165      	str	r5, [r4, #20]
 800d2fc:	444e      	add	r6, r9
 800d2fe:	eba5 0509 	sub.w	r5, r5, r9
 800d302:	6026      	str	r6, [r4, #0]
 800d304:	60a5      	str	r5, [r4, #8]
 800d306:	463e      	mov	r6, r7
 800d308:	42be      	cmp	r6, r7
 800d30a:	d900      	bls.n	800d30e <__ssputs_r+0x86>
 800d30c:	463e      	mov	r6, r7
 800d30e:	4632      	mov	r2, r6
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	4641      	mov	r1, r8
 800d314:	f000 fb70 	bl	800d9f8 <memmove>
 800d318:	68a3      	ldr	r3, [r4, #8]
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	1b9b      	subs	r3, r3, r6
 800d31e:	4432      	add	r2, r6
 800d320:	60a3      	str	r3, [r4, #8]
 800d322:	6022      	str	r2, [r4, #0]
 800d324:	2000      	movs	r0, #0
 800d326:	e7db      	b.n	800d2e0 <__ssputs_r+0x58>
 800d328:	462a      	mov	r2, r5
 800d32a:	f000 fb8b 	bl	800da44 <_realloc_r>
 800d32e:	4606      	mov	r6, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	d1e1      	bne.n	800d2f8 <__ssputs_r+0x70>
 800d334:	6921      	ldr	r1, [r4, #16]
 800d336:	4650      	mov	r0, sl
 800d338:	f7ff fefc 	bl	800d134 <_free_r>
 800d33c:	e7c7      	b.n	800d2ce <__ssputs_r+0x46>
	...

0800d340 <_svfiprintf_r>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	4698      	mov	r8, r3
 800d346:	898b      	ldrh	r3, [r1, #12]
 800d348:	061b      	lsls	r3, r3, #24
 800d34a:	b09d      	sub	sp, #116	; 0x74
 800d34c:	4607      	mov	r7, r0
 800d34e:	460d      	mov	r5, r1
 800d350:	4614      	mov	r4, r2
 800d352:	d50e      	bpl.n	800d372 <_svfiprintf_r+0x32>
 800d354:	690b      	ldr	r3, [r1, #16]
 800d356:	b963      	cbnz	r3, 800d372 <_svfiprintf_r+0x32>
 800d358:	2140      	movs	r1, #64	; 0x40
 800d35a:	f7ff ff3b 	bl	800d1d4 <_malloc_r>
 800d35e:	6028      	str	r0, [r5, #0]
 800d360:	6128      	str	r0, [r5, #16]
 800d362:	b920      	cbnz	r0, 800d36e <_svfiprintf_r+0x2e>
 800d364:	230c      	movs	r3, #12
 800d366:	603b      	str	r3, [r7, #0]
 800d368:	f04f 30ff 	mov.w	r0, #4294967295
 800d36c:	e0d1      	b.n	800d512 <_svfiprintf_r+0x1d2>
 800d36e:	2340      	movs	r3, #64	; 0x40
 800d370:	616b      	str	r3, [r5, #20]
 800d372:	2300      	movs	r3, #0
 800d374:	9309      	str	r3, [sp, #36]	; 0x24
 800d376:	2320      	movs	r3, #32
 800d378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d380:	2330      	movs	r3, #48	; 0x30
 800d382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d52c <_svfiprintf_r+0x1ec>
 800d386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d38a:	f04f 0901 	mov.w	r9, #1
 800d38e:	4623      	mov	r3, r4
 800d390:	469a      	mov	sl, r3
 800d392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d396:	b10a      	cbz	r2, 800d39c <_svfiprintf_r+0x5c>
 800d398:	2a25      	cmp	r2, #37	; 0x25
 800d39a:	d1f9      	bne.n	800d390 <_svfiprintf_r+0x50>
 800d39c:	ebba 0b04 	subs.w	fp, sl, r4
 800d3a0:	d00b      	beq.n	800d3ba <_svfiprintf_r+0x7a>
 800d3a2:	465b      	mov	r3, fp
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	f7ff ff6d 	bl	800d288 <__ssputs_r>
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	f000 80aa 	beq.w	800d508 <_svfiprintf_r+0x1c8>
 800d3b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3b6:	445a      	add	r2, fp
 800d3b8:	9209      	str	r2, [sp, #36]	; 0x24
 800d3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f000 80a2 	beq.w	800d508 <_svfiprintf_r+0x1c8>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3ce:	f10a 0a01 	add.w	sl, sl, #1
 800d3d2:	9304      	str	r3, [sp, #16]
 800d3d4:	9307      	str	r3, [sp, #28]
 800d3d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3da:	931a      	str	r3, [sp, #104]	; 0x68
 800d3dc:	4654      	mov	r4, sl
 800d3de:	2205      	movs	r2, #5
 800d3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e4:	4851      	ldr	r0, [pc, #324]	; (800d52c <_svfiprintf_r+0x1ec>)
 800d3e6:	f7f2 fefb 	bl	80001e0 <memchr>
 800d3ea:	9a04      	ldr	r2, [sp, #16]
 800d3ec:	b9d8      	cbnz	r0, 800d426 <_svfiprintf_r+0xe6>
 800d3ee:	06d0      	lsls	r0, r2, #27
 800d3f0:	bf44      	itt	mi
 800d3f2:	2320      	movmi	r3, #32
 800d3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3f8:	0711      	lsls	r1, r2, #28
 800d3fa:	bf44      	itt	mi
 800d3fc:	232b      	movmi	r3, #43	; 0x2b
 800d3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d402:	f89a 3000 	ldrb.w	r3, [sl]
 800d406:	2b2a      	cmp	r3, #42	; 0x2a
 800d408:	d015      	beq.n	800d436 <_svfiprintf_r+0xf6>
 800d40a:	9a07      	ldr	r2, [sp, #28]
 800d40c:	4654      	mov	r4, sl
 800d40e:	2000      	movs	r0, #0
 800d410:	f04f 0c0a 	mov.w	ip, #10
 800d414:	4621      	mov	r1, r4
 800d416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d41a:	3b30      	subs	r3, #48	; 0x30
 800d41c:	2b09      	cmp	r3, #9
 800d41e:	d94e      	bls.n	800d4be <_svfiprintf_r+0x17e>
 800d420:	b1b0      	cbz	r0, 800d450 <_svfiprintf_r+0x110>
 800d422:	9207      	str	r2, [sp, #28]
 800d424:	e014      	b.n	800d450 <_svfiprintf_r+0x110>
 800d426:	eba0 0308 	sub.w	r3, r0, r8
 800d42a:	fa09 f303 	lsl.w	r3, r9, r3
 800d42e:	4313      	orrs	r3, r2
 800d430:	9304      	str	r3, [sp, #16]
 800d432:	46a2      	mov	sl, r4
 800d434:	e7d2      	b.n	800d3dc <_svfiprintf_r+0x9c>
 800d436:	9b03      	ldr	r3, [sp, #12]
 800d438:	1d19      	adds	r1, r3, #4
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	9103      	str	r1, [sp, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	bfbb      	ittet	lt
 800d442:	425b      	neglt	r3, r3
 800d444:	f042 0202 	orrlt.w	r2, r2, #2
 800d448:	9307      	strge	r3, [sp, #28]
 800d44a:	9307      	strlt	r3, [sp, #28]
 800d44c:	bfb8      	it	lt
 800d44e:	9204      	strlt	r2, [sp, #16]
 800d450:	7823      	ldrb	r3, [r4, #0]
 800d452:	2b2e      	cmp	r3, #46	; 0x2e
 800d454:	d10c      	bne.n	800d470 <_svfiprintf_r+0x130>
 800d456:	7863      	ldrb	r3, [r4, #1]
 800d458:	2b2a      	cmp	r3, #42	; 0x2a
 800d45a:	d135      	bne.n	800d4c8 <_svfiprintf_r+0x188>
 800d45c:	9b03      	ldr	r3, [sp, #12]
 800d45e:	1d1a      	adds	r2, r3, #4
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	9203      	str	r2, [sp, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	bfb8      	it	lt
 800d468:	f04f 33ff 	movlt.w	r3, #4294967295
 800d46c:	3402      	adds	r4, #2
 800d46e:	9305      	str	r3, [sp, #20]
 800d470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d53c <_svfiprintf_r+0x1fc>
 800d474:	7821      	ldrb	r1, [r4, #0]
 800d476:	2203      	movs	r2, #3
 800d478:	4650      	mov	r0, sl
 800d47a:	f7f2 feb1 	bl	80001e0 <memchr>
 800d47e:	b140      	cbz	r0, 800d492 <_svfiprintf_r+0x152>
 800d480:	2340      	movs	r3, #64	; 0x40
 800d482:	eba0 000a 	sub.w	r0, r0, sl
 800d486:	fa03 f000 	lsl.w	r0, r3, r0
 800d48a:	9b04      	ldr	r3, [sp, #16]
 800d48c:	4303      	orrs	r3, r0
 800d48e:	3401      	adds	r4, #1
 800d490:	9304      	str	r3, [sp, #16]
 800d492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d496:	4826      	ldr	r0, [pc, #152]	; (800d530 <_svfiprintf_r+0x1f0>)
 800d498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d49c:	2206      	movs	r2, #6
 800d49e:	f7f2 fe9f 	bl	80001e0 <memchr>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d038      	beq.n	800d518 <_svfiprintf_r+0x1d8>
 800d4a6:	4b23      	ldr	r3, [pc, #140]	; (800d534 <_svfiprintf_r+0x1f4>)
 800d4a8:	bb1b      	cbnz	r3, 800d4f2 <_svfiprintf_r+0x1b2>
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	3307      	adds	r3, #7
 800d4ae:	f023 0307 	bic.w	r3, r3, #7
 800d4b2:	3308      	adds	r3, #8
 800d4b4:	9303      	str	r3, [sp, #12]
 800d4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4b8:	4433      	add	r3, r6
 800d4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d4bc:	e767      	b.n	800d38e <_svfiprintf_r+0x4e>
 800d4be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	2001      	movs	r0, #1
 800d4c6:	e7a5      	b.n	800d414 <_svfiprintf_r+0xd4>
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	3401      	adds	r4, #1
 800d4cc:	9305      	str	r3, [sp, #20]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	f04f 0c0a 	mov.w	ip, #10
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4da:	3a30      	subs	r2, #48	; 0x30
 800d4dc:	2a09      	cmp	r2, #9
 800d4de:	d903      	bls.n	800d4e8 <_svfiprintf_r+0x1a8>
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d0c5      	beq.n	800d470 <_svfiprintf_r+0x130>
 800d4e4:	9105      	str	r1, [sp, #20]
 800d4e6:	e7c3      	b.n	800d470 <_svfiprintf_r+0x130>
 800d4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e7f0      	b.n	800d4d4 <_svfiprintf_r+0x194>
 800d4f2:	ab03      	add	r3, sp, #12
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	462a      	mov	r2, r5
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <_svfiprintf_r+0x1f8>)
 800d4fa:	a904      	add	r1, sp, #16
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f7fb ff27 	bl	8009350 <_printf_float>
 800d502:	1c42      	adds	r2, r0, #1
 800d504:	4606      	mov	r6, r0
 800d506:	d1d6      	bne.n	800d4b6 <_svfiprintf_r+0x176>
 800d508:	89ab      	ldrh	r3, [r5, #12]
 800d50a:	065b      	lsls	r3, r3, #25
 800d50c:	f53f af2c 	bmi.w	800d368 <_svfiprintf_r+0x28>
 800d510:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d512:	b01d      	add	sp, #116	; 0x74
 800d514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d518:	ab03      	add	r3, sp, #12
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	462a      	mov	r2, r5
 800d51e:	4b06      	ldr	r3, [pc, #24]	; (800d538 <_svfiprintf_r+0x1f8>)
 800d520:	a904      	add	r1, sp, #16
 800d522:	4638      	mov	r0, r7
 800d524:	f7fc f9b8 	bl	8009898 <_printf_i>
 800d528:	e7eb      	b.n	800d502 <_svfiprintf_r+0x1c2>
 800d52a:	bf00      	nop
 800d52c:	0800e74c 	.word	0x0800e74c
 800d530:	0800e756 	.word	0x0800e756
 800d534:	08009351 	.word	0x08009351
 800d538:	0800d289 	.word	0x0800d289
 800d53c:	0800e752 	.word	0x0800e752

0800d540 <__sfputc_r>:
 800d540:	6893      	ldr	r3, [r2, #8]
 800d542:	3b01      	subs	r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	b410      	push	{r4}
 800d548:	6093      	str	r3, [r2, #8]
 800d54a:	da08      	bge.n	800d55e <__sfputc_r+0x1e>
 800d54c:	6994      	ldr	r4, [r2, #24]
 800d54e:	42a3      	cmp	r3, r4
 800d550:	db01      	blt.n	800d556 <__sfputc_r+0x16>
 800d552:	290a      	cmp	r1, #10
 800d554:	d103      	bne.n	800d55e <__sfputc_r+0x1e>
 800d556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d55a:	f7fd bc3b 	b.w	800add4 <__swbuf_r>
 800d55e:	6813      	ldr	r3, [r2, #0]
 800d560:	1c58      	adds	r0, r3, #1
 800d562:	6010      	str	r0, [r2, #0]
 800d564:	7019      	strb	r1, [r3, #0]
 800d566:	4608      	mov	r0, r1
 800d568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <__sfputs_r>:
 800d56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d570:	4606      	mov	r6, r0
 800d572:	460f      	mov	r7, r1
 800d574:	4614      	mov	r4, r2
 800d576:	18d5      	adds	r5, r2, r3
 800d578:	42ac      	cmp	r4, r5
 800d57a:	d101      	bne.n	800d580 <__sfputs_r+0x12>
 800d57c:	2000      	movs	r0, #0
 800d57e:	e007      	b.n	800d590 <__sfputs_r+0x22>
 800d580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d584:	463a      	mov	r2, r7
 800d586:	4630      	mov	r0, r6
 800d588:	f7ff ffda 	bl	800d540 <__sfputc_r>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d1f3      	bne.n	800d578 <__sfputs_r+0xa>
 800d590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d594 <_vfiprintf_r>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	460d      	mov	r5, r1
 800d59a:	b09d      	sub	sp, #116	; 0x74
 800d59c:	4614      	mov	r4, r2
 800d59e:	4698      	mov	r8, r3
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	b118      	cbz	r0, 800d5ac <_vfiprintf_r+0x18>
 800d5a4:	6983      	ldr	r3, [r0, #24]
 800d5a6:	b90b      	cbnz	r3, 800d5ac <_vfiprintf_r+0x18>
 800d5a8:	f7fe fc68 	bl	800be7c <__sinit>
 800d5ac:	4b89      	ldr	r3, [pc, #548]	; (800d7d4 <_vfiprintf_r+0x240>)
 800d5ae:	429d      	cmp	r5, r3
 800d5b0:	d11b      	bne.n	800d5ea <_vfiprintf_r+0x56>
 800d5b2:	6875      	ldr	r5, [r6, #4]
 800d5b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5b6:	07d9      	lsls	r1, r3, #31
 800d5b8:	d405      	bmi.n	800d5c6 <_vfiprintf_r+0x32>
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d402      	bmi.n	800d5c6 <_vfiprintf_r+0x32>
 800d5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5c2:	f7ff f86c 	bl	800c69e <__retarget_lock_acquire_recursive>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	071b      	lsls	r3, r3, #28
 800d5ca:	d501      	bpl.n	800d5d0 <_vfiprintf_r+0x3c>
 800d5cc:	692b      	ldr	r3, [r5, #16]
 800d5ce:	b9eb      	cbnz	r3, 800d60c <_vfiprintf_r+0x78>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f7fd fc50 	bl	800ae78 <__swsetup_r>
 800d5d8:	b1c0      	cbz	r0, 800d60c <_vfiprintf_r+0x78>
 800d5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5dc:	07dc      	lsls	r4, r3, #31
 800d5de:	d50e      	bpl.n	800d5fe <_vfiprintf_r+0x6a>
 800d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e4:	b01d      	add	sp, #116	; 0x74
 800d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ea:	4b7b      	ldr	r3, [pc, #492]	; (800d7d8 <_vfiprintf_r+0x244>)
 800d5ec:	429d      	cmp	r5, r3
 800d5ee:	d101      	bne.n	800d5f4 <_vfiprintf_r+0x60>
 800d5f0:	68b5      	ldr	r5, [r6, #8]
 800d5f2:	e7df      	b.n	800d5b4 <_vfiprintf_r+0x20>
 800d5f4:	4b79      	ldr	r3, [pc, #484]	; (800d7dc <_vfiprintf_r+0x248>)
 800d5f6:	429d      	cmp	r5, r3
 800d5f8:	bf08      	it	eq
 800d5fa:	68f5      	ldreq	r5, [r6, #12]
 800d5fc:	e7da      	b.n	800d5b4 <_vfiprintf_r+0x20>
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	0598      	lsls	r0, r3, #22
 800d602:	d4ed      	bmi.n	800d5e0 <_vfiprintf_r+0x4c>
 800d604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d606:	f7ff f84b 	bl	800c6a0 <__retarget_lock_release_recursive>
 800d60a:	e7e9      	b.n	800d5e0 <_vfiprintf_r+0x4c>
 800d60c:	2300      	movs	r3, #0
 800d60e:	9309      	str	r3, [sp, #36]	; 0x24
 800d610:	2320      	movs	r3, #32
 800d612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d616:	f8cd 800c 	str.w	r8, [sp, #12]
 800d61a:	2330      	movs	r3, #48	; 0x30
 800d61c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7e0 <_vfiprintf_r+0x24c>
 800d620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d624:	f04f 0901 	mov.w	r9, #1
 800d628:	4623      	mov	r3, r4
 800d62a:	469a      	mov	sl, r3
 800d62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d630:	b10a      	cbz	r2, 800d636 <_vfiprintf_r+0xa2>
 800d632:	2a25      	cmp	r2, #37	; 0x25
 800d634:	d1f9      	bne.n	800d62a <_vfiprintf_r+0x96>
 800d636:	ebba 0b04 	subs.w	fp, sl, r4
 800d63a:	d00b      	beq.n	800d654 <_vfiprintf_r+0xc0>
 800d63c:	465b      	mov	r3, fp
 800d63e:	4622      	mov	r2, r4
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f7ff ff93 	bl	800d56e <__sfputs_r>
 800d648:	3001      	adds	r0, #1
 800d64a:	f000 80aa 	beq.w	800d7a2 <_vfiprintf_r+0x20e>
 800d64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d650:	445a      	add	r2, fp
 800d652:	9209      	str	r2, [sp, #36]	; 0x24
 800d654:	f89a 3000 	ldrb.w	r3, [sl]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 80a2 	beq.w	800d7a2 <_vfiprintf_r+0x20e>
 800d65e:	2300      	movs	r3, #0
 800d660:	f04f 32ff 	mov.w	r2, #4294967295
 800d664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d668:	f10a 0a01 	add.w	sl, sl, #1
 800d66c:	9304      	str	r3, [sp, #16]
 800d66e:	9307      	str	r3, [sp, #28]
 800d670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d674:	931a      	str	r3, [sp, #104]	; 0x68
 800d676:	4654      	mov	r4, sl
 800d678:	2205      	movs	r2, #5
 800d67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67e:	4858      	ldr	r0, [pc, #352]	; (800d7e0 <_vfiprintf_r+0x24c>)
 800d680:	f7f2 fdae 	bl	80001e0 <memchr>
 800d684:	9a04      	ldr	r2, [sp, #16]
 800d686:	b9d8      	cbnz	r0, 800d6c0 <_vfiprintf_r+0x12c>
 800d688:	06d1      	lsls	r1, r2, #27
 800d68a:	bf44      	itt	mi
 800d68c:	2320      	movmi	r3, #32
 800d68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d692:	0713      	lsls	r3, r2, #28
 800d694:	bf44      	itt	mi
 800d696:	232b      	movmi	r3, #43	; 0x2b
 800d698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d69c:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6a2:	d015      	beq.n	800d6d0 <_vfiprintf_r+0x13c>
 800d6a4:	9a07      	ldr	r2, [sp, #28]
 800d6a6:	4654      	mov	r4, sl
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f04f 0c0a 	mov.w	ip, #10
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b4:	3b30      	subs	r3, #48	; 0x30
 800d6b6:	2b09      	cmp	r3, #9
 800d6b8:	d94e      	bls.n	800d758 <_vfiprintf_r+0x1c4>
 800d6ba:	b1b0      	cbz	r0, 800d6ea <_vfiprintf_r+0x156>
 800d6bc:	9207      	str	r2, [sp, #28]
 800d6be:	e014      	b.n	800d6ea <_vfiprintf_r+0x156>
 800d6c0:	eba0 0308 	sub.w	r3, r0, r8
 800d6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	46a2      	mov	sl, r4
 800d6ce:	e7d2      	b.n	800d676 <_vfiprintf_r+0xe2>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	1d19      	adds	r1, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	9103      	str	r1, [sp, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bfbb      	ittet	lt
 800d6dc:	425b      	neglt	r3, r3
 800d6de:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e2:	9307      	strge	r3, [sp, #28]
 800d6e4:	9307      	strlt	r3, [sp, #28]
 800d6e6:	bfb8      	it	lt
 800d6e8:	9204      	strlt	r2, [sp, #16]
 800d6ea:	7823      	ldrb	r3, [r4, #0]
 800d6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ee:	d10c      	bne.n	800d70a <_vfiprintf_r+0x176>
 800d6f0:	7863      	ldrb	r3, [r4, #1]
 800d6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f4:	d135      	bne.n	800d762 <_vfiprintf_r+0x1ce>
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	1d1a      	adds	r2, r3, #4
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	9203      	str	r2, [sp, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	bfb8      	it	lt
 800d702:	f04f 33ff 	movlt.w	r3, #4294967295
 800d706:	3402      	adds	r4, #2
 800d708:	9305      	str	r3, [sp, #20]
 800d70a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7f0 <_vfiprintf_r+0x25c>
 800d70e:	7821      	ldrb	r1, [r4, #0]
 800d710:	2203      	movs	r2, #3
 800d712:	4650      	mov	r0, sl
 800d714:	f7f2 fd64 	bl	80001e0 <memchr>
 800d718:	b140      	cbz	r0, 800d72c <_vfiprintf_r+0x198>
 800d71a:	2340      	movs	r3, #64	; 0x40
 800d71c:	eba0 000a 	sub.w	r0, r0, sl
 800d720:	fa03 f000 	lsl.w	r0, r3, r0
 800d724:	9b04      	ldr	r3, [sp, #16]
 800d726:	4303      	orrs	r3, r0
 800d728:	3401      	adds	r4, #1
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d730:	482c      	ldr	r0, [pc, #176]	; (800d7e4 <_vfiprintf_r+0x250>)
 800d732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d736:	2206      	movs	r2, #6
 800d738:	f7f2 fd52 	bl	80001e0 <memchr>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d03f      	beq.n	800d7c0 <_vfiprintf_r+0x22c>
 800d740:	4b29      	ldr	r3, [pc, #164]	; (800d7e8 <_vfiprintf_r+0x254>)
 800d742:	bb1b      	cbnz	r3, 800d78c <_vfiprintf_r+0x1f8>
 800d744:	9b03      	ldr	r3, [sp, #12]
 800d746:	3307      	adds	r3, #7
 800d748:	f023 0307 	bic.w	r3, r3, #7
 800d74c:	3308      	adds	r3, #8
 800d74e:	9303      	str	r3, [sp, #12]
 800d750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d752:	443b      	add	r3, r7
 800d754:	9309      	str	r3, [sp, #36]	; 0x24
 800d756:	e767      	b.n	800d628 <_vfiprintf_r+0x94>
 800d758:	fb0c 3202 	mla	r2, ip, r2, r3
 800d75c:	460c      	mov	r4, r1
 800d75e:	2001      	movs	r0, #1
 800d760:	e7a5      	b.n	800d6ae <_vfiprintf_r+0x11a>
 800d762:	2300      	movs	r3, #0
 800d764:	3401      	adds	r4, #1
 800d766:	9305      	str	r3, [sp, #20]
 800d768:	4619      	mov	r1, r3
 800d76a:	f04f 0c0a 	mov.w	ip, #10
 800d76e:	4620      	mov	r0, r4
 800d770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d774:	3a30      	subs	r2, #48	; 0x30
 800d776:	2a09      	cmp	r2, #9
 800d778:	d903      	bls.n	800d782 <_vfiprintf_r+0x1ee>
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0c5      	beq.n	800d70a <_vfiprintf_r+0x176>
 800d77e:	9105      	str	r1, [sp, #20]
 800d780:	e7c3      	b.n	800d70a <_vfiprintf_r+0x176>
 800d782:	fb0c 2101 	mla	r1, ip, r1, r2
 800d786:	4604      	mov	r4, r0
 800d788:	2301      	movs	r3, #1
 800d78a:	e7f0      	b.n	800d76e <_vfiprintf_r+0x1da>
 800d78c:	ab03      	add	r3, sp, #12
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	462a      	mov	r2, r5
 800d792:	4b16      	ldr	r3, [pc, #88]	; (800d7ec <_vfiprintf_r+0x258>)
 800d794:	a904      	add	r1, sp, #16
 800d796:	4630      	mov	r0, r6
 800d798:	f7fb fdda 	bl	8009350 <_printf_float>
 800d79c:	4607      	mov	r7, r0
 800d79e:	1c78      	adds	r0, r7, #1
 800d7a0:	d1d6      	bne.n	800d750 <_vfiprintf_r+0x1bc>
 800d7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a4:	07d9      	lsls	r1, r3, #31
 800d7a6:	d405      	bmi.n	800d7b4 <_vfiprintf_r+0x220>
 800d7a8:	89ab      	ldrh	r3, [r5, #12]
 800d7aa:	059a      	lsls	r2, r3, #22
 800d7ac:	d402      	bmi.n	800d7b4 <_vfiprintf_r+0x220>
 800d7ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7b0:	f7fe ff76 	bl	800c6a0 <__retarget_lock_release_recursive>
 800d7b4:	89ab      	ldrh	r3, [r5, #12]
 800d7b6:	065b      	lsls	r3, r3, #25
 800d7b8:	f53f af12 	bmi.w	800d5e0 <_vfiprintf_r+0x4c>
 800d7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7be:	e711      	b.n	800d5e4 <_vfiprintf_r+0x50>
 800d7c0:	ab03      	add	r3, sp, #12
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4b09      	ldr	r3, [pc, #36]	; (800d7ec <_vfiprintf_r+0x258>)
 800d7c8:	a904      	add	r1, sp, #16
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f7fc f864 	bl	8009898 <_printf_i>
 800d7d0:	e7e4      	b.n	800d79c <_vfiprintf_r+0x208>
 800d7d2:	bf00      	nop
 800d7d4:	0800e530 	.word	0x0800e530
 800d7d8:	0800e550 	.word	0x0800e550
 800d7dc:	0800e510 	.word	0x0800e510
 800d7e0:	0800e74c 	.word	0x0800e74c
 800d7e4:	0800e756 	.word	0x0800e756
 800d7e8:	08009351 	.word	0x08009351
 800d7ec:	0800d56f 	.word	0x0800d56f
 800d7f0:	0800e752 	.word	0x0800e752
 800d7f4:	00000000 	.word	0x00000000

0800d7f8 <nan>:
 800d7f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d800 <nan+0x8>
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	00000000 	.word	0x00000000
 800d804:	7ff80000 	.word	0x7ff80000

0800d808 <_sbrk_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4d06      	ldr	r5, [pc, #24]	; (800d824 <_sbrk_r+0x1c>)
 800d80c:	2300      	movs	r3, #0
 800d80e:	4604      	mov	r4, r0
 800d810:	4608      	mov	r0, r1
 800d812:	602b      	str	r3, [r5, #0]
 800d814:	f7f5 ffee 	bl	80037f4 <_sbrk>
 800d818:	1c43      	adds	r3, r0, #1
 800d81a:	d102      	bne.n	800d822 <_sbrk_r+0x1a>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	b103      	cbz	r3, 800d822 <_sbrk_r+0x1a>
 800d820:	6023      	str	r3, [r4, #0]
 800d822:	bd38      	pop	{r3, r4, r5, pc}
 800d824:	200008d0 	.word	0x200008d0

0800d828 <__sread>:
 800d828:	b510      	push	{r4, lr}
 800d82a:	460c      	mov	r4, r1
 800d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d830:	f000 f92e 	bl	800da90 <_read_r>
 800d834:	2800      	cmp	r0, #0
 800d836:	bfab      	itete	ge
 800d838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d83a:	89a3      	ldrhlt	r3, [r4, #12]
 800d83c:	181b      	addge	r3, r3, r0
 800d83e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d842:	bfac      	ite	ge
 800d844:	6563      	strge	r3, [r4, #84]	; 0x54
 800d846:	81a3      	strhlt	r3, [r4, #12]
 800d848:	bd10      	pop	{r4, pc}

0800d84a <__swrite>:
 800d84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84e:	461f      	mov	r7, r3
 800d850:	898b      	ldrh	r3, [r1, #12]
 800d852:	05db      	lsls	r3, r3, #23
 800d854:	4605      	mov	r5, r0
 800d856:	460c      	mov	r4, r1
 800d858:	4616      	mov	r6, r2
 800d85a:	d505      	bpl.n	800d868 <__swrite+0x1e>
 800d85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d860:	2302      	movs	r3, #2
 800d862:	2200      	movs	r2, #0
 800d864:	f000 f8b6 	bl	800d9d4 <_lseek_r>
 800d868:	89a3      	ldrh	r3, [r4, #12]
 800d86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d86e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d872:	81a3      	strh	r3, [r4, #12]
 800d874:	4632      	mov	r2, r6
 800d876:	463b      	mov	r3, r7
 800d878:	4628      	mov	r0, r5
 800d87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d87e:	f000 b835 	b.w	800d8ec <_write_r>

0800d882 <__sseek>:
 800d882:	b510      	push	{r4, lr}
 800d884:	460c      	mov	r4, r1
 800d886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d88a:	f000 f8a3 	bl	800d9d4 <_lseek_r>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	89a3      	ldrh	r3, [r4, #12]
 800d892:	bf15      	itete	ne
 800d894:	6560      	strne	r0, [r4, #84]	; 0x54
 800d896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d89a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d89e:	81a3      	strheq	r3, [r4, #12]
 800d8a0:	bf18      	it	ne
 800d8a2:	81a3      	strhne	r3, [r4, #12]
 800d8a4:	bd10      	pop	{r4, pc}

0800d8a6 <__sclose>:
 800d8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8aa:	f000 b84f 	b.w	800d94c <_close_r>

0800d8ae <strncmp>:
 800d8ae:	b510      	push	{r4, lr}
 800d8b0:	b16a      	cbz	r2, 800d8ce <strncmp+0x20>
 800d8b2:	3901      	subs	r1, #1
 800d8b4:	1884      	adds	r4, r0, r2
 800d8b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d8ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d103      	bne.n	800d8ca <strncmp+0x1c>
 800d8c2:	42a0      	cmp	r0, r4
 800d8c4:	d001      	beq.n	800d8ca <strncmp+0x1c>
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1f5      	bne.n	800d8b6 <strncmp+0x8>
 800d8ca:	1a98      	subs	r0, r3, r2
 800d8cc:	bd10      	pop	{r4, pc}
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	e7fc      	b.n	800d8cc <strncmp+0x1e>

0800d8d2 <__ascii_wctomb>:
 800d8d2:	b149      	cbz	r1, 800d8e8 <__ascii_wctomb+0x16>
 800d8d4:	2aff      	cmp	r2, #255	; 0xff
 800d8d6:	bf85      	ittet	hi
 800d8d8:	238a      	movhi	r3, #138	; 0x8a
 800d8da:	6003      	strhi	r3, [r0, #0]
 800d8dc:	700a      	strbls	r2, [r1, #0]
 800d8de:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8e2:	bf98      	it	ls
 800d8e4:	2001      	movls	r0, #1
 800d8e6:	4770      	bx	lr
 800d8e8:	4608      	mov	r0, r1
 800d8ea:	4770      	bx	lr

0800d8ec <_write_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4d07      	ldr	r5, [pc, #28]	; (800d90c <_write_r+0x20>)
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	4608      	mov	r0, r1
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	602a      	str	r2, [r5, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	f7f5 ff29 	bl	8003752 <_write>
 800d900:	1c43      	adds	r3, r0, #1
 800d902:	d102      	bne.n	800d90a <_write_r+0x1e>
 800d904:	682b      	ldr	r3, [r5, #0]
 800d906:	b103      	cbz	r3, 800d90a <_write_r+0x1e>
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
 800d90c:	200008d0 	.word	0x200008d0

0800d910 <__assert_func>:
 800d910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d912:	4614      	mov	r4, r2
 800d914:	461a      	mov	r2, r3
 800d916:	4b09      	ldr	r3, [pc, #36]	; (800d93c <__assert_func+0x2c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4605      	mov	r5, r0
 800d91c:	68d8      	ldr	r0, [r3, #12]
 800d91e:	b14c      	cbz	r4, 800d934 <__assert_func+0x24>
 800d920:	4b07      	ldr	r3, [pc, #28]	; (800d940 <__assert_func+0x30>)
 800d922:	9100      	str	r1, [sp, #0]
 800d924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d928:	4906      	ldr	r1, [pc, #24]	; (800d944 <__assert_func+0x34>)
 800d92a:	462b      	mov	r3, r5
 800d92c:	f000 f81e 	bl	800d96c <fiprintf>
 800d930:	f000 f8c0 	bl	800dab4 <abort>
 800d934:	4b04      	ldr	r3, [pc, #16]	; (800d948 <__assert_func+0x38>)
 800d936:	461c      	mov	r4, r3
 800d938:	e7f3      	b.n	800d922 <__assert_func+0x12>
 800d93a:	bf00      	nop
 800d93c:	2000000c 	.word	0x2000000c
 800d940:	0800e75d 	.word	0x0800e75d
 800d944:	0800e76a 	.word	0x0800e76a
 800d948:	0800e798 	.word	0x0800e798

0800d94c <_close_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4d06      	ldr	r5, [pc, #24]	; (800d968 <_close_r+0x1c>)
 800d950:	2300      	movs	r3, #0
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	602b      	str	r3, [r5, #0]
 800d958:	f7f5 ff17 	bl	800378a <_close>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d102      	bne.n	800d966 <_close_r+0x1a>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	b103      	cbz	r3, 800d966 <_close_r+0x1a>
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	200008d0 	.word	0x200008d0

0800d96c <fiprintf>:
 800d96c:	b40e      	push	{r1, r2, r3}
 800d96e:	b503      	push	{r0, r1, lr}
 800d970:	4601      	mov	r1, r0
 800d972:	ab03      	add	r3, sp, #12
 800d974:	4805      	ldr	r0, [pc, #20]	; (800d98c <fiprintf+0x20>)
 800d976:	f853 2b04 	ldr.w	r2, [r3], #4
 800d97a:	6800      	ldr	r0, [r0, #0]
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	f7ff fe09 	bl	800d594 <_vfiprintf_r>
 800d982:	b002      	add	sp, #8
 800d984:	f85d eb04 	ldr.w	lr, [sp], #4
 800d988:	b003      	add	sp, #12
 800d98a:	4770      	bx	lr
 800d98c:	2000000c 	.word	0x2000000c

0800d990 <_fstat_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d07      	ldr	r5, [pc, #28]	; (800d9b0 <_fstat_r+0x20>)
 800d994:	2300      	movs	r3, #0
 800d996:	4604      	mov	r4, r0
 800d998:	4608      	mov	r0, r1
 800d99a:	4611      	mov	r1, r2
 800d99c:	602b      	str	r3, [r5, #0]
 800d99e:	f7f5 ff00 	bl	80037a2 <_fstat>
 800d9a2:	1c43      	adds	r3, r0, #1
 800d9a4:	d102      	bne.n	800d9ac <_fstat_r+0x1c>
 800d9a6:	682b      	ldr	r3, [r5, #0]
 800d9a8:	b103      	cbz	r3, 800d9ac <_fstat_r+0x1c>
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	bd38      	pop	{r3, r4, r5, pc}
 800d9ae:	bf00      	nop
 800d9b0:	200008d0 	.word	0x200008d0

0800d9b4 <_isatty_r>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	4d06      	ldr	r5, [pc, #24]	; (800d9d0 <_isatty_r+0x1c>)
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4608      	mov	r0, r1
 800d9be:	602b      	str	r3, [r5, #0]
 800d9c0:	f7f5 feff 	bl	80037c2 <_isatty>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_isatty_r+0x1a>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_isatty_r+0x1a>
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	200008d0 	.word	0x200008d0

0800d9d4 <_lseek_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4d07      	ldr	r5, [pc, #28]	; (800d9f4 <_lseek_r+0x20>)
 800d9d8:	4604      	mov	r4, r0
 800d9da:	4608      	mov	r0, r1
 800d9dc:	4611      	mov	r1, r2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	602a      	str	r2, [r5, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f7f5 fef8 	bl	80037d8 <_lseek>
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	d102      	bne.n	800d9f2 <_lseek_r+0x1e>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	b103      	cbz	r3, 800d9f2 <_lseek_r+0x1e>
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	bd38      	pop	{r3, r4, r5, pc}
 800d9f4:	200008d0 	.word	0x200008d0

0800d9f8 <memmove>:
 800d9f8:	4288      	cmp	r0, r1
 800d9fa:	b510      	push	{r4, lr}
 800d9fc:	eb01 0402 	add.w	r4, r1, r2
 800da00:	d902      	bls.n	800da08 <memmove+0x10>
 800da02:	4284      	cmp	r4, r0
 800da04:	4623      	mov	r3, r4
 800da06:	d807      	bhi.n	800da18 <memmove+0x20>
 800da08:	1e43      	subs	r3, r0, #1
 800da0a:	42a1      	cmp	r1, r4
 800da0c:	d008      	beq.n	800da20 <memmove+0x28>
 800da0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da16:	e7f8      	b.n	800da0a <memmove+0x12>
 800da18:	4402      	add	r2, r0
 800da1a:	4601      	mov	r1, r0
 800da1c:	428a      	cmp	r2, r1
 800da1e:	d100      	bne.n	800da22 <memmove+0x2a>
 800da20:	bd10      	pop	{r4, pc}
 800da22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da2a:	e7f7      	b.n	800da1c <memmove+0x24>

0800da2c <__malloc_lock>:
 800da2c:	4801      	ldr	r0, [pc, #4]	; (800da34 <__malloc_lock+0x8>)
 800da2e:	f7fe be36 	b.w	800c69e <__retarget_lock_acquire_recursive>
 800da32:	bf00      	nop
 800da34:	200008c8 	.word	0x200008c8

0800da38 <__malloc_unlock>:
 800da38:	4801      	ldr	r0, [pc, #4]	; (800da40 <__malloc_unlock+0x8>)
 800da3a:	f7fe be31 	b.w	800c6a0 <__retarget_lock_release_recursive>
 800da3e:	bf00      	nop
 800da40:	200008c8 	.word	0x200008c8

0800da44 <_realloc_r>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	4607      	mov	r7, r0
 800da48:	4614      	mov	r4, r2
 800da4a:	460e      	mov	r6, r1
 800da4c:	b921      	cbnz	r1, 800da58 <_realloc_r+0x14>
 800da4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da52:	4611      	mov	r1, r2
 800da54:	f7ff bbbe 	b.w	800d1d4 <_malloc_r>
 800da58:	b922      	cbnz	r2, 800da64 <_realloc_r+0x20>
 800da5a:	f7ff fb6b 	bl	800d134 <_free_r>
 800da5e:	4625      	mov	r5, r4
 800da60:	4628      	mov	r0, r5
 800da62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da64:	f000 f82d 	bl	800dac2 <_malloc_usable_size_r>
 800da68:	42a0      	cmp	r0, r4
 800da6a:	d20f      	bcs.n	800da8c <_realloc_r+0x48>
 800da6c:	4621      	mov	r1, r4
 800da6e:	4638      	mov	r0, r7
 800da70:	f7ff fbb0 	bl	800d1d4 <_malloc_r>
 800da74:	4605      	mov	r5, r0
 800da76:	2800      	cmp	r0, #0
 800da78:	d0f2      	beq.n	800da60 <_realloc_r+0x1c>
 800da7a:	4631      	mov	r1, r6
 800da7c:	4622      	mov	r2, r4
 800da7e:	f7fb fbb1 	bl	80091e4 <memcpy>
 800da82:	4631      	mov	r1, r6
 800da84:	4638      	mov	r0, r7
 800da86:	f7ff fb55 	bl	800d134 <_free_r>
 800da8a:	e7e9      	b.n	800da60 <_realloc_r+0x1c>
 800da8c:	4635      	mov	r5, r6
 800da8e:	e7e7      	b.n	800da60 <_realloc_r+0x1c>

0800da90 <_read_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d07      	ldr	r5, [pc, #28]	; (800dab0 <_read_r+0x20>)
 800da94:	4604      	mov	r4, r0
 800da96:	4608      	mov	r0, r1
 800da98:	4611      	mov	r1, r2
 800da9a:	2200      	movs	r2, #0
 800da9c:	602a      	str	r2, [r5, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	f7f5 fe3a 	bl	8003718 <_read>
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	d102      	bne.n	800daae <_read_r+0x1e>
 800daa8:	682b      	ldr	r3, [r5, #0]
 800daaa:	b103      	cbz	r3, 800daae <_read_r+0x1e>
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	bd38      	pop	{r3, r4, r5, pc}
 800dab0:	200008d0 	.word	0x200008d0

0800dab4 <abort>:
 800dab4:	b508      	push	{r3, lr}
 800dab6:	2006      	movs	r0, #6
 800dab8:	f000 f834 	bl	800db24 <raise>
 800dabc:	2001      	movs	r0, #1
 800dabe:	f7f5 fe21 	bl	8003704 <_exit>

0800dac2 <_malloc_usable_size_r>:
 800dac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dac6:	1f18      	subs	r0, r3, #4
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bfbc      	itt	lt
 800dacc:	580b      	ldrlt	r3, [r1, r0]
 800dace:	18c0      	addlt	r0, r0, r3
 800dad0:	4770      	bx	lr

0800dad2 <_raise_r>:
 800dad2:	291f      	cmp	r1, #31
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4604      	mov	r4, r0
 800dad8:	460d      	mov	r5, r1
 800dada:	d904      	bls.n	800dae6 <_raise_r+0x14>
 800dadc:	2316      	movs	r3, #22
 800dade:	6003      	str	r3, [r0, #0]
 800dae0:	f04f 30ff 	mov.w	r0, #4294967295
 800dae4:	bd38      	pop	{r3, r4, r5, pc}
 800dae6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dae8:	b112      	cbz	r2, 800daf0 <_raise_r+0x1e>
 800daea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daee:	b94b      	cbnz	r3, 800db04 <_raise_r+0x32>
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 f831 	bl	800db58 <_getpid_r>
 800daf6:	462a      	mov	r2, r5
 800daf8:	4601      	mov	r1, r0
 800dafa:	4620      	mov	r0, r4
 800dafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db00:	f000 b818 	b.w	800db34 <_kill_r>
 800db04:	2b01      	cmp	r3, #1
 800db06:	d00a      	beq.n	800db1e <_raise_r+0x4c>
 800db08:	1c59      	adds	r1, r3, #1
 800db0a:	d103      	bne.n	800db14 <_raise_r+0x42>
 800db0c:	2316      	movs	r3, #22
 800db0e:	6003      	str	r3, [r0, #0]
 800db10:	2001      	movs	r0, #1
 800db12:	e7e7      	b.n	800dae4 <_raise_r+0x12>
 800db14:	2400      	movs	r4, #0
 800db16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db1a:	4628      	mov	r0, r5
 800db1c:	4798      	blx	r3
 800db1e:	2000      	movs	r0, #0
 800db20:	e7e0      	b.n	800dae4 <_raise_r+0x12>
	...

0800db24 <raise>:
 800db24:	4b02      	ldr	r3, [pc, #8]	; (800db30 <raise+0xc>)
 800db26:	4601      	mov	r1, r0
 800db28:	6818      	ldr	r0, [r3, #0]
 800db2a:	f7ff bfd2 	b.w	800dad2 <_raise_r>
 800db2e:	bf00      	nop
 800db30:	2000000c 	.word	0x2000000c

0800db34 <_kill_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4d07      	ldr	r5, [pc, #28]	; (800db54 <_kill_r+0x20>)
 800db38:	2300      	movs	r3, #0
 800db3a:	4604      	mov	r4, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	4611      	mov	r1, r2
 800db40:	602b      	str	r3, [r5, #0]
 800db42:	f7f5 fdcf 	bl	80036e4 <_kill>
 800db46:	1c43      	adds	r3, r0, #1
 800db48:	d102      	bne.n	800db50 <_kill_r+0x1c>
 800db4a:	682b      	ldr	r3, [r5, #0]
 800db4c:	b103      	cbz	r3, 800db50 <_kill_r+0x1c>
 800db4e:	6023      	str	r3, [r4, #0]
 800db50:	bd38      	pop	{r3, r4, r5, pc}
 800db52:	bf00      	nop
 800db54:	200008d0 	.word	0x200008d0

0800db58 <_getpid_r>:
 800db58:	f7f5 bdbc 	b.w	80036d4 <_getpid>

0800db5c <_init>:
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	bf00      	nop
 800db60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db62:	bc08      	pop	{r3}
 800db64:	469e      	mov	lr, r3
 800db66:	4770      	bx	lr

0800db68 <_fini>:
 800db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6a:	bf00      	nop
 800db6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db6e:	bc08      	pop	{r3}
 800db70:	469e      	mov	lr, r3
 800db72:	4770      	bx	lr
