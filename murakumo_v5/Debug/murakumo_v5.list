
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e23c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0800e3d0  0800e3d0  0001e3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec9c  0800ec9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec9c  0800ec9c  0001ec9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eca4  0800eca4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eca4  0800eca4  0001eca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eca8  0800eca8  0001eca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ecac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c2c4  200001e0  0800ee8c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c4a4  0800ee8c  0002c4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d509  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065cd  00000000  00000000  0005d719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00063ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a98  00000000  00000000  000659f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288b7  00000000  00000000  00067490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267f5  00000000  00000000  0008fd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d58fc  00000000  00000000  000b653c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018be38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008988  00000000  00000000  0018be8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e3b4 	.word	0x0800e3b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e3b4 	.word	0x0800e3b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:

uint8_t initialized = 0;
Inertial inertial;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f005 fd26 	bl	8006a58 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f006 fb78 	bl	800770a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f006 fcad 	bl	8007982 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f005 fd12 	bl	8006a58 <HAL_GPIO_WritePin>
#endif
	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	2000040c 	.word	0x2000040c

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f005 fcf5 	bl	8006a58 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f006 fb47 	bl	800770a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f006 fb41 	bl	800770a <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f005 fce2 	bl	8006a58 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	2000040c 	.word	0x2000040c

080010a4 <imu_init>:
 * @fn imu_init()
 * @brief 
 * 
 */
void imu_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	if(initialized == 0)
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <imu_init+0x54>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11d      	bne.n	80010ee <imu_init+0x4a>
	{
		printf("Starting SPI2 (IMU)\r\n");
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <imu_init+0x58>)
 80010b4:	f009 fbd8 	bl	800a868 <puts>
		uint8_t wai, ret;
		ret = imu_initialize(&wai);
 80010b8:	1dbb      	adds	r3, r7, #6
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f826 	bl	800110c <imu_initialize>
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
		printf("who_am_i = %d\r\n", wai);
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <imu_init+0x5c>)
 80010ca:	f009 fb47 	bl	800a75c <iprintf>
		if(ret == 1)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d103      	bne.n	80010dc <imu_init+0x38>
		{
			printf("SPI INIT COLLECT!\r\n");
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <imu_init+0x60>)
 80010d6:	f009 fbc7 	bl	800a868 <puts>
 80010da:	e002      	b.n	80010e2 <imu_init+0x3e>
		}
		else
		{
			printf("SPI INIT FAILURE x_x \r\n");
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <imu_init+0x64>)
 80010de:	f009 fbc3 	bl	800a868 <puts>
		}
		initialized = initialized + 1;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <imu_init+0x54>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <imu_init+0x54>)
 80010ec:	701a      	strb	r2, [r3, #0]
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001fc 	.word	0x200001fc
 80010fc:	0800e3d0 	.word	0x0800e3d0
 8001100:	0800e3e8 	.word	0x0800e3e8
 8001104:	0800e3f8 	.word	0x0800e3f8
 8001108:	0800e40c 	.word	0x0800e40c

0800110c <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111a:	4833      	ldr	r0, [pc, #204]	; (80011e8 <imu_initialize+0xdc>)
 800111c:	f005 fc9c 	bl	8006a58 <HAL_GPIO_WritePin>
	uint8_t who_am_i, ret;
	ret = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

#if	INIT_ZERO
	inertial.linear = vector3_creation(0, 0, 0);
 8001124:	4c31      	ldr	r4, [pc, #196]	; (80011ec <imu_initialize+0xe0>)
 8001126:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80011f0 <imu_initialize+0xe4>
 800112a:	eddf 0a31 	vldr	s1, [pc, #196]	; 80011f0 <imu_initialize+0xe4>
 800112e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80011f0 <imu_initialize+0xe4>
 8001132:	f001 f9ad 	bl	8002490 <vector3_creation>
 8001136:	eef0 6a40 	vmov.f32	s13, s0
 800113a:	eeb0 7a60 	vmov.f32	s14, s1
 800113e:	eef0 7a41 	vmov.f32	s15, s2
 8001142:	edc4 6a00 	vstr	s13, [r4]
 8001146:	ed84 7a01 	vstr	s14, [r4, #4]
 800114a:	edc4 7a02 	vstr	s15, [r4, #8]
	inertial.angular = vector3_creation(0, 0, 0);
 800114e:	4c27      	ldr	r4, [pc, #156]	; (80011ec <imu_initialize+0xe0>)
 8001150:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80011f0 <imu_initialize+0xe4>
 8001154:	eddf 0a26 	vldr	s1, [pc, #152]	; 80011f0 <imu_initialize+0xe4>
 8001158:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80011f0 <imu_initialize+0xe4>
 800115c:	f001 f998 	bl	8002490 <vector3_creation>
 8001160:	eef0 6a40 	vmov.f32	s13, s0
 8001164:	eeb0 7a60 	vmov.f32	s14, s1
 8001168:	eef0 7a41 	vmov.f32	s15, s2
 800116c:	edc4 6a03 	vstr	s13, [r4, #12]
 8001170:	ed84 7a04 	vstr	s14, [r4, #16]
 8001174:	edc4 7a05 	vstr	s15, [r4, #20]
#endif

	//! User Bank 0 を選択
	imu_write_byte(REG_BANK_SEL, 0x00);
 8001178:	2100      	movs	r1, #0
 800117a:	207f      	movs	r0, #127	; 0x7f
 800117c:	f7ff ff64 	bl	8001048 <imu_write_byte>
	who_am_i = imu_read_byte(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ff33 	bl	8000fec <imu_read_byte>
 8001186:	4603      	mov	r3, r0
 8001188:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7bba      	ldrb	r2, [r7, #14]
 800118e:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2be0      	cmp	r3, #224	; 0xe0
 8001194:	d11c      	bne.n	80011d0 <imu_initialize+0xc4>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
		//! PWR_MGMT_1 推奨値 1
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800119a:	2101      	movs	r1, #1
 800119c:	2006      	movs	r0, #6
 800119e:	f7ff ff53 	bl	8001048 <imu_write_byte>
		//! PWR_MGMt_2 推奨値 0
		// imu_write_byte(PWR_MGMT_2, 0x00);
		HAL_Delay(100);
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f003 fe54 	bl	8004e50 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 80011a8:	2110      	movs	r1, #16
 80011aa:	2003      	movs	r0, #3
 80011ac:	f7ff ff4c 	bl	8001048 <imu_write_byte>
		 * 	10 : User Bank 2 : 加速度と角速度の値の設定ができる
		 * 	11 : User Bank 3 : I2C の設定が行える
		 * 
		 */
		//! User Bank 2 を選択
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 80011b0:	2120      	movs	r1, #32
 80011b2:	207f      	movs	r0, #127	; 0x7f
 80011b4:	f7ff ff48 	bl	8001048 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 9     [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2000 [dps] & bypass ) -> 0b 0000 0110 -> 0x06
		imu_write_byte(0x01, 0x06);
 80011b8:	2106      	movs	r1, #6
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff ff44 	bl	8001048 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 4.5   [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2 [dps] & bypass ) -> 0b 0000 0000 -> 0x06
		imu_write_byte(0x14, 0x00);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2014      	movs	r0, #20
 80011c4:	f7ff ff40 	bl	8001048 <imu_write_byte>

		//! User Bank 0 に戻す
		imu_write_byte(REG_BANK_SEL, 0x00);
 80011c8:	2100      	movs	r1, #0
 80011ca:	207f      	movs	r0, #127	; 0x7f
 80011cc:	f7ff ff3c 	bl	8001048 <imu_write_byte>
	}
#if USE_NCS
	CS_SET;
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <imu_initialize+0xdc>)
 80011d8:	f005 fc3e 	bl	8006a58 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020400 	.word	0x40020400
 80011ec:	20000210 	.word	0x20000210
 80011f0:	00000000 	.word	0x00000000

080011f4 <imu_start>:

void imu_start()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	/* imu_start */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <imu_stop>:

void imu_stop()
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
#if !USE_NCS
	CS_SET;
#endif
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <imu_update_gyro>:
 * --- --- --- --- --- --- --- --- --- ---
 * @attention 値を代入したら外部参照変数を呼び出して値を取得することになる
 *
*/
void imu_update_gyro()
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	float k_gyro;
	int16_t byte_data;
	float tmp;

	k_gyro = (GYRO_RANGE / (float) MAXDATA_RANGE);
 8001216:	4b56      	ldr	r3, [pc, #344]	; (8001370 <imu_update_gyro+0x160>)
 8001218:	60fb      	str	r3, [r7, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800121a:	2033      	movs	r0, #51	; 0x33
 800121c:	f7ff fee6 	bl	8000fec <imu_read_byte>
 8001220:	4603      	mov	r3, r0
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21c      	sxth	r4, r3
 8001226:	2034      	movs	r0, #52	; 0x34
 8001228:	f7ff fee0 	bl	8000fec <imu_read_byte>
 800122c:	4603      	mov	r3, r0
 800122e:	b21b      	sxth	r3, r3
 8001230:	4323      	orrs	r3, r4
 8001232:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 8001234:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001240:	ed97 7a03 	vldr	s14, [r7, #12]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.x = low_pass_filter(tmp, inertial.angular.x, LPF_RATE);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <imu_update_gyro+0x164>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f974 	bl	8000548 <__aeabi_f2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001368 <imu_update_gyro+0x158>
 8001268:	ec43 2b11 	vmov	d1, r2, r3
 800126c:	ec45 4b10 	vmov	d0, r4, r5
 8001270:	f001 f8d8 	bl	8002424 <low_pass_filter>
 8001274:	ec53 2b10 	vmov	r2, r3, d0
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fcb4 	bl	8000be8 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <imu_update_gyro+0x164>)
 8001284:	60d3      	str	r3, [r2, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 8001286:	2035      	movs	r0, #53	; 0x35
 8001288:	f7ff feb0 	bl	8000fec <imu_read_byte>
 800128c:	4603      	mov	r3, r0
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21c      	sxth	r4, r3
 8001292:	2036      	movs	r0, #54	; 0x36
 8001294:	f7ff feaa 	bl	8000fec <imu_read_byte>
 8001298:	4603      	mov	r3, r0
 800129a:	b21b      	sxth	r3, r3
 800129c:	4323      	orrs	r3, r4
 800129e:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80012a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.y = low_pass_filter(tmp, inertial.angular.y, LPF_RATE);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff f945 	bl	8000548 <__aeabi_f2d>
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <imu_update_gyro+0x164>)
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f93e 	bl	8000548 <__aeabi_f2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001368 <imu_update_gyro+0x158>
 80012d4:	ec43 2b11 	vmov	d1, r2, r3
 80012d8:	ec45 4b10 	vmov	d0, r4, r5
 80012dc:	f001 f8a2 	bl	8002424 <low_pass_filter>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc7e 	bl	8000be8 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <imu_update_gyro+0x164>)
 80012f0:	6113      	str	r3, [r2, #16]

	byte_data = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 80012f2:	2037      	movs	r0, #55	; 0x37
 80012f4:	f7ff fe7a 	bl	8000fec <imu_read_byte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21c      	sxth	r4, r3
 80012fe:	2038      	movs	r0, #56	; 0x38
 8001300:	f7ff fe74 	bl	8000fec <imu_read_byte>
 8001304:	4603      	mov	r3, r0
 8001306:	b21b      	sxth	r3, r3
 8001308:	4323      	orrs	r3, r4
 800130a:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 800130c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	ed97 7a03 	vldr	s14, [r7, #12]
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.z = low_pass_filter(tmp, inertial.angular.z, LPF_RATE);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4604      	mov	r4, r0
 800132c:	460d      	mov	r5, r1
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <imu_update_gyro+0x164>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f908 	bl	8000548 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001368 <imu_update_gyro+0x158>
 8001340:	ec43 2b11 	vmov	d1, r2, r3
 8001344:	ec45 4b10 	vmov	d0, r4, r5
 8001348:	f001 f86c 	bl	8002424 <low_pass_filter>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc48 	bl	8000be8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <imu_update_gyro+0x164>)
 800135c:	6153      	str	r3, [r2, #20]
	 * 		float y;
	 * 		float z;
	 * } Vector3;
	 * 
	 */
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bdb0      	pop	{r4, r5, r7, pc}
 8001366:	bf00      	nop
 8001368:	40000000 	.word	0x40000000
 800136c:	3fd33333 	.word	0x3fd33333
 8001370:	3d7a0000 	.word	0x3d7a0000
 8001374:	20000210 	.word	0x20000210

08001378 <imu_read_yaw>:
 * @brief 
 * 
 * @return float 
 */
float imu_read_yaw()
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	//! バイアス補正を加味した返り値（ inertial.angular.z はすでに LPF を通されている ）
	return inertial.angular.z - (BIAS_AVERAGE - TRUE_VALUE);
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <imu_read_yaw+0x20>)
 800137e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001382:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800139c <imu_read_yaw+0x24>
 8001386:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000210 	.word	0x20000210
 800139c:	3e0a704c 	.word	0x3e0a704c

080013a0 <led_init>:

uint8_t current_value;
uint8_t current_rgb_value;

void led_init()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    current_value = 0b11;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <led_init+0x24>)
 80013a6:	2203      	movs	r2, #3
 80013a8:	701a      	strb	r2, [r3, #0]
    current_rgb_value = 0b111;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <led_init+0x28>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	701a      	strb	r2, [r3, #0]
    led_write_led(0b11, 0b11);
 80013b0:	2103      	movs	r1, #3
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f8ae 	bl	8001514 <led_write_led>
    led_write_rgb(0b111);
 80013b8:	2007      	movs	r0, #7
 80013ba:	f000 f86b 	bl	8001494 <led_write_rgb>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000228 	.word	0x20000228
 80013c8:	20000229 	.word	0x20000229

080013cc <led_start>:

void led_start()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 80013d0:	2100      	movs	r1, #0
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f89e 	bl	8001514 <led_write_led>
    led_write_rgb(0b000);
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f85b 	bl	8001494 <led_write_rgb>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <led_stop>:

void led_stop()
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b11);
 80013e6:	2103      	movs	r1, #3
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f893 	bl	8001514 <led_write_led>
    led_write_rgb(0b001);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f000 f850 	bl	8001494 <led_write_rgb>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <led_write_led1>:
{
    return current_rgb_value;
}

void led_write_led1(uint8_t value_)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = value_ << 0;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	73fb      	strb	r3, [r7, #15]
    led2_value = current_value & 0b10;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <led_write_led1+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <led_write_led1+0x48>)
 8001424:	f005 fb18 	bl	8006a58 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	4313      	orrs	r3, r2
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <led_write_led1+0x44>)
 8001432:	701a      	strb	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000228 	.word	0x20000228
 8001440:	40020800 	.word	0x40020800

08001444 <led_write_led2>:

void led_write_led2(uint8_t value_)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = current_value & 0b01;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <led_write_led2+0x48>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
    led2_value = value_ << 1;
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, !value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <led_write_led2+0x4c>)
 8001472:	f005 faf1 	bl	8006a58 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <led_write_led2+0x48>)
 8001480:	701a      	strb	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000228 	.word	0x20000228
 8001490:	40020400 	.word	0x40020400

08001494 <led_write_rgb>:

void led_write_rgb(uint8_t rgb_)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (rgb_ & 0b100) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <led_write_rgb+0x74>)
 80014b6:	f005 facf 	bl	8006a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (rgb_ & 0b010) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <led_write_rgb+0x74>)
 80014d2:	f005 fac1 	bl	8006a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (rgb_ & 0b001) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <led_write_rgb+0x78>)
 80014ee:	f005 fab3 	bl	8006a58 <HAL_GPIO_WritePin>
    current_rgb_value = rgb_ & 0b0111;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <led_write_rgb+0x7c>)
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40020000 	.word	0x40020000
 800150c:	40020800 	.word	0x40020800
 8001510:	20000229 	.word	0x20000229

08001514 <led_write_led>:

void led_write_led(uint8_t mask_, uint8_t value_)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	71bb      	strb	r3, [r7, #6]
    if(mask_ & 0b01)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <led_write_led+0x28>
    {
        led_write_led1(0b01 & value_ >> 0);
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff5e 	bl	80013f8 <led_write_led1>
    }
    if(mask_ & 0b10)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <led_write_led+0x44>
    {
        led_write_led2(0b10 & value_ >> 1);
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff76 	bl	8001444 <led_write_led2>
    }
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001564:	f000 f804 	bl	8001570 <rotary_set_playmode>
    rotary_set_value();
 8001568:	f000 f81a 	bl	80015a0 <rotary_set_value>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001574:	f000 f82c 	bl	80015d0 <rotary_read>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <rotary_set_playmode+0x14>)
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000022a 	.word	0x2000022a

08001588 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
    return playmode;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <rotary_read_playmode+0x14>)
 800158e:	781b      	ldrb	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000022a 	.word	0x2000022a

080015a0 <rotary_set_value>:

void rotary_set_value()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    value = rotary_read();
 80015a4:	f000 f814 	bl	80015d0 <rotary_read>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <rotary_set_value+0x14>)
 80015ae:	701a      	strb	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000022b 	.word	0x2000022b

080015b8 <rotary_read_value>:

uint8_t rotary_read_value()
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
    return value;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <rotary_read_value+0x14>)
 80015be:	781b      	ldrb	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000022b 	.word	0x2000022b

080015d0 <rotary_read>:

uint8_t rotary_read()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <rotary_read+0x8c>)
 80015e0:	f005 fa22 	bl	8006a28 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf0c      	ite	eq
 80015ea:	2301      	moveq	r3, #1
 80015ec:	2300      	movne	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4413      	add	r3, r2
 80015f6:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 80015f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <rotary_read+0x8c>)
 80015fe:	f005 fa13 	bl	8006a28 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <rotary_read+0x3c>
 8001608:	2302      	movs	r3, #2
 800160a:	e000      	b.n	800160e <rotary_read+0x3e>
 800160c:	2300      	movs	r3, #0
 800160e:	b2da      	uxtb	r2, r3
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4413      	add	r3, r2
 8001614:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <rotary_read+0x90>)
 800161c:	f005 fa04 	bl	8006a28 <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <rotary_read+0x5a>
 8001626:	2304      	movs	r3, #4
 8001628:	e000      	b.n	800162c <rotary_read+0x5c>
 800162a:	2300      	movs	r3, #0
 800162c:	b2da      	uxtb	r2, r3
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4413      	add	r3, r2
 8001632:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <rotary_read+0x8c>)
 800163a:	f005 f9f5 	bl	8006a28 <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <rotary_read+0x78>
 8001644:	2308      	movs	r3, #8
 8001646:	e000      	b.n	800164a <rotary_read+0x7a>
 8001648:	2300      	movs	r3, #0
 800164a:	b2da      	uxtb	r2, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4413      	add	r3, r2
 8001650:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 8001652:	79fb      	ldrb	r3, [r7, #7]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000

08001664 <rotary_print_playmode>:

void rotary_print_playmode()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	printf("playmode = ");
 8001668:	482c      	ldr	r0, [pc, #176]	; (800171c <rotary_print_playmode+0xb8>)
 800166a:	f009 f877 	bl	800a75c <iprintf>
	switch(rotary_read_playmode())
 800166e:	f7ff ff8b 	bl	8001588 <rotary_read_playmode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d847      	bhi.n	8001708 <rotary_print_playmode+0xa4>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <rotary_print_playmode+0x1c>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	080016c1 	.word	0x080016c1
 8001684:	080016c9 	.word	0x080016c9
 8001688:	080016d1 	.word	0x080016d1
 800168c:	080016d9 	.word	0x080016d9
 8001690:	080016e1 	.word	0x080016e1
 8001694:	080016e9 	.word	0x080016e9
 8001698:	080016f1 	.word	0x080016f1
 800169c:	080016f9 	.word	0x080016f9
 80016a0:	08001709 	.word	0x08001709
 80016a4:	08001709 	.word	0x08001709
 80016a8:	08001709 	.word	0x08001709
 80016ac:	08001709 	.word	0x08001709
 80016b0:	08001709 	.word	0x08001709
 80016b4:	08001709 	.word	0x08001709
 80016b8:	08001709 	.word	0x08001709
 80016bc:	08001701 	.word	0x08001701
	{
		case calibration:
			printf("calibration");
 80016c0:	4817      	ldr	r0, [pc, #92]	; (8001720 <rotary_print_playmode+0xbc>)
 80016c2:	f009 f84b 	bl	800a75c <iprintf>
			break;
 80016c6:	e023      	b.n	8001710 <rotary_print_playmode+0xac>
		case search:
			printf("search");
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <rotary_print_playmode+0xc0>)
 80016ca:	f009 f847 	bl	800a75c <iprintf>
			break;
 80016ce:	e01f      	b.n	8001710 <rotary_print_playmode+0xac>
		case accel:
			printf("accel");
 80016d0:	4815      	ldr	r0, [pc, #84]	; (8001728 <rotary_print_playmode+0xc4>)
 80016d2:	f009 f843 	bl	800a75c <iprintf>
			break;
 80016d6:	e01b      	b.n	8001710 <rotary_print_playmode+0xac>
		case max_enable:
			printf("max_enable");
 80016d8:	4814      	ldr	r0, [pc, #80]	; (800172c <rotary_print_playmode+0xc8>)
 80016da:	f009 f83f 	bl	800a75c <iprintf>
			break;
 80016de:	e017      	b.n	8001710 <rotary_print_playmode+0xac>
        case motor_free:
            printf("motor_free");
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <rotary_print_playmode+0xcc>)
 80016e2:	f009 f83b 	bl	800a75c <iprintf>
            break;
 80016e6:	e013      	b.n	8001710 <rotary_print_playmode+0xac>
		case tracer_tuning:
			printf("tracer_tuning");
 80016e8:	4812      	ldr	r0, [pc, #72]	; (8001734 <rotary_print_playmode+0xd0>)
 80016ea:	f009 f837 	bl	800a75c <iprintf>
			break;
 80016ee:	e00f      	b.n	8001710 <rotary_print_playmode+0xac>
		case velotrace_tuning:
			printf("velotrace_tuning");
 80016f0:	4811      	ldr	r0, [pc, #68]	; (8001738 <rotary_print_playmode+0xd4>)
 80016f2:	f009 f833 	bl	800a75c <iprintf>
			break;
 80016f6:	e00b      	b.n	8001710 <rotary_print_playmode+0xac>
		case banquet:
			printf("banquet");
 80016f8:	4810      	ldr	r0, [pc, #64]	; (800173c <rotary_print_playmode+0xd8>)
 80016fa:	f009 f82f 	bl	800a75c <iprintf>
			break;
 80016fe:	e007      	b.n	8001710 <rotary_print_playmode+0xac>
		case flash_print:
			printf("flash_print");
 8001700:	480f      	ldr	r0, [pc, #60]	; (8001740 <rotary_print_playmode+0xdc>)
 8001702:	f009 f82b 	bl	800a75c <iprintf>
			break;
 8001706:	e003      	b.n	8001710 <rotary_print_playmode+0xac>
		default:
			printf("unknown playmode...");
 8001708:	480e      	ldr	r0, [pc, #56]	; (8001744 <rotary_print_playmode+0xe0>)
 800170a:	f009 f827 	bl	800a75c <iprintf>
			break;
 800170e:	bf00      	nop
	}
	printf("\r\n");
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <rotary_print_playmode+0xe4>)
 8001712:	f009 f8a9 	bl	800a868 <puts>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	0800e424 	.word	0x0800e424
 8001720:	0800e430 	.word	0x0800e430
 8001724:	0800e43c 	.word	0x0800e43c
 8001728:	0800e444 	.word	0x0800e444
 800172c:	0800e44c 	.word	0x0800e44c
 8001730:	0800e458 	.word	0x0800e458
 8001734:	0800e464 	.word	0x0800e464
 8001738:	0800e474 	.word	0x0800e474
 800173c:	0800e488 	.word	0x0800e488
 8001740:	0800e490 	.word	0x0800e490
 8001744:	0800e49c 	.word	0x0800e49c
 8001748:	0800e4b0 	.word	0x0800e4b0

0800174c <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
    enter = 1;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <switch_set_enter+0x14>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	2000022c 	.word	0x2000022c

08001764 <switch_reset_enter>:

void switch_reset_enter()
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
    enter = 0;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <switch_reset_enter+0x14>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	2000022c 	.word	0x2000022c

0800177c <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    switch_reset_enter();
 8001780:	f7ff fff0 	bl	8001764 <switch_reset_enter>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <switch_read_enter>:

uint8_t switch_read_enter()
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
    return enter;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <switch_read_enter+0x14>)
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000022c 	.word	0x2000022c

080017a0 <switch1_read>:

uint8_t switch1_read()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 80017a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <switch1_read+0x20>)
 80017aa:	f005 f93d 	bl	8006a28 <HAL_GPIO_ReadPin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40020800 	.word	0x40020800

080017c4 <switch2_read>:

uint8_t switch2_read()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 80017c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <switch2_read+0x20>)
 80017ce:	f005 f92b 	bl	8006a28 <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020800 	.word	0x40020800

080017e8 <switch_read>:

uint8_t switch_read()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 80017f2:	f7ff ffd5 	bl	80017a0 <switch1_read>
 80017f6:	4603      	mov	r3, r0
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4413      	add	r3, r2
 8001800:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 8001802:	f7ff ffdf 	bl	80017c4 <switch2_read>
 8001806:	4603      	mov	r3, r0
 8001808:	b2da      	uxtb	r2, r3
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4413      	add	r3, r2
 800180e:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001810:	79fb      	ldrb	r3, [r7, #7]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <switch_enter>:

void switch_enter()
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800181e:	f7ff ffe3 	bl	80017e8 <switch_read>
 8001822:	4603      	mov	r3, r0
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <switch_enter+0x14>
    {
        switch_reset_enter();
 8001828:	f7ff ff9c 	bl	8001764 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 800182c:	e006      	b.n	800183c <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800182e:	f7ff ffdb 	bl	80017e8 <switch_read>
 8001832:	4603      	mov	r3, r0
 8001834:	2b02      	cmp	r3, #2
 8001836:	d101      	bne.n	800183c <switch_enter+0x22>
        switch_set_enter();
 8001838:	f7ff ff88 	bl	800174c <switch_set_enter>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 8001840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001844:	b08e      	sub	sp, #56	; 0x38
 8001846:	af0a      	add	r7, sp, #40	; 0x28
 8001848:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 800184a:	482d      	ldr	r0, [pc, #180]	; (8001900 <analog_array_print+0xc0>)
 800184c:	f008 ff86 	bl	800a75c <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3318      	adds	r3, #24
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	331c      	adds	r3, #28
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	331e      	adds	r3, #30
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	331a      	adds	r3, #26
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4603      	mov	r3, r0
 8001872:	4824      	ldr	r0, [pc, #144]	; (8001904 <analog_array_print+0xc4>)
 8001874:	f008 ff72 	bl	800a75c <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	469c      	mov	ip, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	469e      	mov	lr, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3308      	adds	r3, #8
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4698      	mov	r8, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	330c      	adds	r3, #12
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3310      	adds	r3, #16
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3314      	adds	r3, #20
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3316      	adds	r3, #22
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	461c      	mov	r4, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3312      	adds	r3, #18
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	461d      	mov	r5, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	330e      	adds	r3, #14
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	461e      	mov	r6, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	330a      	adds	r3, #10
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3306      	adds	r3, #6
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3302      	adds	r3, #2
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	9308      	str	r3, [sp, #32]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	9307      	str	r3, [sp, #28]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	9306      	str	r3, [sp, #24]
 80018de:	9605      	str	r6, [sp, #20]
 80018e0:	9504      	str	r5, [sp, #16]
 80018e2:	9403      	str	r4, [sp, #12]
 80018e4:	9002      	str	r0, [sp, #8]
 80018e6:	9101      	str	r1, [sp, #4]
 80018e8:	9200      	str	r2, [sp, #0]
 80018ea:	4643      	mov	r3, r8
 80018ec:	4672      	mov	r2, lr
 80018ee:	4661      	mov	r1, ip
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <analog_array_print+0xc8>)
 80018f2:	f008 ff33 	bl	800a75c <iprintf>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001900:	0800e4b4 	.word	0x0800e4b4
 8001904:	0800e4bc 	.word	0x0800e4bc
 8001908:	0800e4d4 	.word	0x0800e4d4

0800190c <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 8001910:	4806      	ldr	r0, [pc, #24]	; (800192c <analog_print_max+0x20>)
 8001912:	f008 ff23 	bl	800a75c <iprintf>
	printf("analog_print_max\r\n");
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <analog_print_max+0x24>)
 8001918:	f008 ffa6 	bl	800a868 <puts>
	analog_array_print(analogmax);
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <analog_print_max+0x28>)
 800191e:	f7ff ff8f 	bl	8001840 <analog_array_print>
	printf(ESC_DEF);
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <analog_print_max+0x2c>)
 8001924:	f008 ff1a 	bl	800a75c <iprintf>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	0800e5cc 	.word	0x0800e5cc
 8001930:	0800e5d4 	.word	0x0800e5d4
 8001934:	200003d8 	.word	0x200003d8
 8001938:	0800e5e8 	.word	0x0800e5e8

0800193c <analog_print_min>:

void analog_print_min()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 8001940:	4806      	ldr	r0, [pc, #24]	; (800195c <analog_print_min+0x20>)
 8001942:	f008 ff0b 	bl	800a75c <iprintf>
	printf("analog_print_min\r\n");
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <analog_print_min+0x24>)
 8001948:	f008 ff8e 	bl	800a868 <puts>
	analog_array_print(analogmin);
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <analog_print_min+0x28>)
 800194e:	f7ff ff77 	bl	8001840 <analog_array_print>
	printf(ESC_DEF);
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <analog_print_min+0x2c>)
 8001954:	f008 ff02 	bl	800a75c <iprintf>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	0800e5f0 	.word	0x0800e5f0
 8001960:	0800e5f8 	.word	0x0800e5f8
 8001964:	20000274 	.word	0x20000274
 8001968:	0800e5e8 	.word	0x0800e5e8

0800196c <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af02      	add	r7, sp, #8
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	printf("analog_set_to_flash()\r\n");
 8001976:	482a      	ldr	r0, [pc, #168]	; (8001a20 <analog_set_on_flash+0xb4>)
 8001978:	f008 ff76 	bl	800a868 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e046      	b.n	8001a10 <analog_set_on_flash+0xa4>
	{
		printf(ESC_MAG);
 8001982:	4828      	ldr	r0, [pc, #160]	; (8001a24 <analog_set_on_flash+0xb8>)
 8001984:	f008 feea 	bl	800a75c <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <analog_set_on_flash+0xbc>)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	885b      	ldrh	r3, [r3, #2]
 8001992:	4619      	mov	r1, r3
 8001994:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <analog_set_on_flash+0xbc>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3310      	adds	r3, #16
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	885b      	ldrh	r3, [r3, #2]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	460a      	mov	r2, r1
 80019a6:	68f9      	ldr	r1, [r7, #12]
 80019a8:	4820      	ldr	r0, [pc, #128]	; (8001a2c <analog_set_on_flash+0xc0>)
 80019aa:	f008 fed7 	bl	800a75c <iprintf>
		printf(ESC_DEF);
 80019ae:	4820      	ldr	r0, [pc, #128]	; (8001a30 <analog_set_on_flash+0xc4>)
 80019b0:	f008 fed4 	bl	800a75c <iprintf>
		*(analogmin_ + i) = analogmin[i];
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	491d      	ldr	r1, [pc, #116]	; (8001a34 <analog_set_on_flash+0xc8>)
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019c4:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	491a      	ldr	r1, [pc, #104]	; (8001a38 <analog_set_on_flash+0xcc>)
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019d6:	801a      	strh	r2, [r3, #0]
		printf(ESC_GRE);
 80019d8:	4818      	ldr	r0, [pc, #96]	; (8001a3c <analog_set_on_flash+0xd0>)
 80019da:	f008 febf 	bl	800a75c <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <analog_set_on_flash+0xbc>)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	885b      	ldrh	r3, [r3, #2]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <analog_set_on_flash+0xbc>)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3310      	adds	r3, #16
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	885b      	ldrh	r3, [r3, #2]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	460a      	mov	r2, r1
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <analog_set_on_flash+0xc0>)
 8001a00:	f008 feac 	bl	800a75c <iprintf>
		printf(ESC_DEF);
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <analog_set_on_flash+0xc4>)
 8001a06:	f008 fea9 	bl	800a75c <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	d9b5      	bls.n	8001982 <analog_set_on_flash+0x16>
	}
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	0800e60c 	.word	0x0800e60c
 8001a24:	0800e624 	.word	0x0800e624
 8001a28:	200007f0 	.word	0x200007f0
 8001a2c:	0800e62c 	.word	0x0800e62c
 8001a30:	0800e5e8 	.word	0x0800e5e8
 8001a34:	20000274 	.word	0x20000274
 8001a38:	200003d8 	.word	0x200003d8
 8001a3c:	0800e668 	.word	0x0800e668

08001a40 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_from_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	e014      	b.n	8001a7a <analog_set_from_flash+0x3a>
	{
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
		analogmin[i] = *(analogmin_ + i);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	8819      	ldrh	r1, [r3, #0]
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <analog_set_from_flash+0x50>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	8819      	ldrh	r1, [r3, #0]
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <analog_set_from_flash+0x54>)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d9e7      	bls.n	8001a50 <analog_set_from_flash+0x10>
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
	}
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000274 	.word	0x20000274
 8001a94:	200003d8 	.word	0x200003d8

08001a98 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <analog_set_calibrationsize+0x1c>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	7013      	strb	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20000295 	.word	0x20000295

08001ab8 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <analog_set_analogmode+0x1c>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	7013      	strb	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	20000294 	.word	0x20000294

08001ad8 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
	return analogmode;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <analog_read_analogmode+0x14>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000294 	.word	0x20000294

08001af0 <analog_calibration_start>:

void analog_calibration_start()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001af6:	2010      	movs	r0, #16
 8001af8:	f7ff ffde 	bl	8001ab8 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	e00d      	b.n	8001b1e <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <analog_calibration_start+0x48>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <analog_calibration_start+0x4c>)
 8001b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d9ee      	bls.n	8001b02 <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001b24:	f7ff fef2 	bl	800190c <analog_print_max>
	analog_print_min();
 8001b28:	f7ff ff08 	bl	800193c <analog_print_min>
	analog_sensor_start();
 8001b2c:	f000 f83e 	bl	8001bac <analog_sensor_start>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200003d8 	.word	0x200003d8
 8001b3c:	20000274 	.word	0x20000274

08001b40 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001b44:	2010      	movs	r0, #16
 8001b46:	f7ff ffb7 	bl	8001ab8 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001b4a:	f000 f829 	bl	8001ba0 <analog_stop>
	analog_print_max();
 8001b4e:	f7ff fedd 	bl	800190c <analog_print_max>
	analog_print_min();
 8001b52:	f7ff fef3 	bl	800193c <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001b56:	4904      	ldr	r1, [pc, #16]	; (8001b68 <analog_calibration_stop+0x28>)
 8001b58:	4804      	ldr	r0, [pc, #16]	; (8001b6c <analog_calibration_stop+0x2c>)
 8001b5a:	f7ff ff07 	bl	800196c <analog_set_on_flash>
	flash_write();
 8001b5e:	f000 fc3b 	bl	80023d8 <flash_write>
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000812 	.word	0x20000812
 8001b6c:	200007f2 	.word	0x200007f2

08001b70 <analog_init>:

void analog_init()
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001b74:	2010      	movs	r0, #16
 8001b76:	f7ff ff8f 	bl	8001a98 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <analog_init+0x20>)
 8001b7c:	f003 f98c 	bl	8004e98 <HAL_ADC_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <analog_init+0x1a>
    {
        Error_Handler();
 8001b86:	f001 fc7e 	bl	8003486 <Error_Handler>
    }
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000590 	.word	0x20000590

08001b94 <analog_start>:

void analog_start()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("analog_sensor_start()\r\n");
	#endif
	analog_sensor_start();
 8001b98:	f000 f808 	bl	8001bac <analog_sensor_start>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <analog_stop>:

void analog_stop()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001ba4:	f000 f81a 	bl	8001bdc <analog_sensor_stop>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <analog_sensor_start>:

void analog_sensor_start()
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
	#endif
    sensgettime = 0;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <analog_sensor_start+0x24>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <analog_sensor_start+0x28>)
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <analog_sensor_start+0x2c>)
 8001bbc:	f003 f9b0 	bl	8004f20 <HAL_ADC_Start_DMA>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <analog_sensor_start+0x1e>
    {
        Error_Handler();
 8001bc6:	f001 fc5e 	bl	8003486 <Error_Handler>
    }
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000250 	.word	0x20000250
 8001bd4:	20000254 	.word	0x20000254
 8001bd8:	20000590 	.word	0x20000590

08001bdc <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <analog_sensor_stop+0x10>)
 8001be2:	f003 faad 	bl	8005140 <HAL_ADC_Stop_DMA>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000590 	.word	0x20000590

08001bf0 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (float) (analogmax[i] - analogmin[i]);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <analog_sensor_get+0x74>)
 8001bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c02:	4619      	mov	r1, r3
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <analog_sensor_get+0x78>)
 8001c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0c:	1acb      	subs	r3, r1, r3
 8001c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <analog_sensor_get+0x7c>)
 8001c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c26:	4619      	mov	r1, r3
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <analog_sensor_get+0x78>)
 8001c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c30:	1acb      	subs	r3, r1, r3
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c44:	ee17 2a90 	vmov	r2, s15
 8001c48:	b291      	uxth	r1, r2
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <analog_sensor_get+0x80>)
 8001c4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(float)800, 500);
#endif
	return analograte[i];
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <analog_sensor_get+0x80>)
 8001c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	20000230 	.word	0x20000230
 8001c68:	20000274 	.word	0x20000274
 8001c6c:	200003d8 	.word	0x200003d8
 8001c70:	20000298 	.word	0x20000298

08001c74 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c7c:	f000 f804 	bl	8001c88 <analog_get_and_sort>
#endif
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c88:	b490      	push	{r4, r7}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <analog_get_and_sort+0x120>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d968      	bls.n	8001d68 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <analog_get_and_sort+0x120>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	e05f      	b.n	8001d62 <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	71bb      	strb	r3, [r7, #6]
 8001ca6:	e02d      	b.n	8001d04 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	717b      	strb	r3, [r7, #5]
 8001cac:	e023      	b.n	8001cf6 <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001cae:	797b      	ldrb	r3, [r7, #5]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	493d      	ldr	r1, [pc, #244]	; (8001dac <analog_get_and_sort+0x124>)
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cbe:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001cc0:	7978      	ldrb	r0, [r7, #5]
 8001cc2:	79f9      	ldrb	r1, [r7, #7]
 8001cc4:	797b      	ldrb	r3, [r7, #5]
 8001cc6:	1e5a      	subs	r2, r3, #1
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4c38      	ldr	r4, [pc, #224]	; (8001dac <analog_get_and_sort+0x124>)
 8001ccc:	0100      	lsls	r0, r0, #4
 8001cce:	4401      	add	r1, r0
 8001cd0:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001cd4:	4935      	ldr	r1, [pc, #212]	; (8001dac <analog_get_and_sort+0x124>)
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	4413      	add	r3, r2
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001ce0:	797a      	ldrb	r2, [r7, #5]
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4931      	ldr	r1, [pc, #196]	; (8001dac <analog_get_and_sort+0x124>)
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001cf0:	797b      	ldrb	r3, [r7, #5]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	717b      	strb	r3, [r7, #5]
 8001cf6:	797a      	ldrb	r2, [r7, #5]
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d8d7      	bhi.n	8001cae <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001cfe:	79bb      	ldrb	r3, [r7, #6]
 8001d00:	3301      	adds	r3, #1
 8001d02:	71bb      	strb	r3, [r7, #6]
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d9ce      	bls.n	8001ca8 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001d0a:	79fa      	ldrb	r2, [r7, #7]
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <analog_get_and_sort+0x124>)
 8001d10:	3240      	adds	r2, #64	; 0x40
 8001d12:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d16:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <analog_get_and_sort+0x128>)
 8001d18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <analog_get_and_sort+0x12c>)
 8001d20:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <analog_get_and_sort+0x128>)
 8001d28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	428a      	cmp	r2, r1
 8001d30:	bf38      	it	cc
 8001d32:	460a      	movcc	r2, r1
 8001d34:	b291      	uxth	r1, r2
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <analog_get_and_sort+0x12c>)
 8001d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <analog_get_and_sort+0x130>)
 8001d40:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <analog_get_and_sort+0x128>)
 8001d48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	428a      	cmp	r2, r1
 8001d50:	bf28      	it	cs
 8001d52:	460a      	movcs	r2, r1
 8001d54:	b291      	uxth	r1, r2
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <analog_get_and_sort+0x130>)
 8001d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d99c      	bls.n	8001ca2 <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	713b      	strb	r3, [r7, #4]
 8001d6c:	e00f      	b.n	8001d8e <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001d6e:	7939      	ldrb	r1, [r7, #4]
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <analog_get_and_sort+0x120>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	793b      	ldrb	r3, [r7, #4]
 8001d76:	4811      	ldr	r0, [pc, #68]	; (8001dbc <analog_get_and_sort+0x134>)
 8001d78:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d7c:	490b      	ldr	r1, [pc, #44]	; (8001dac <analog_get_and_sort+0x124>)
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	4602      	mov	r2, r0
 8001d84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d88:	793b      	ldrb	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	713b      	strb	r3, [r7, #4]
 8001d8e:	793b      	ldrb	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d9ec      	bls.n	8001d6e <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <analog_get_and_sort+0x120>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <analog_get_and_sort+0x120>)
 8001d9c:	6013      	str	r3, [r2, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc90      	pop	{r4, r7}
 8001da6:	4770      	bx	lr
 8001da8:	20000250 	.word	0x20000250
 8001dac:	200002b8 	.word	0x200002b8
 8001db0:	20000230 	.word	0x20000230
 8001db4:	200003d8 	.word	0x200003d8
 8001db8:	20000274 	.word	0x20000274
 8001dbc:	20000254 	.word	0x20000254

08001dc0 <course_init>:
float course_curvature_radius;
float course_update_section_sampling_time_s;
unsigned int __debug_execute_count__;

void course_init(unsigned short int samplingtime_ms)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
	imu_init();
 8001dca:	f7ff f96b 	bl	80010a4 <imu_init>
	course_state_count = 0;
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <course_init+0x24>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	801a      	strh	r2, [r3, #0]
	course_set_update_section_freq_ms(samplingtime_ms);
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f862 	bl	8001ea0 <course_set_update_section_freq_ms>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000404 	.word	0x20000404

08001de8 <course_start>:

void course_start()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	/* course_start */
	course_reset_section_degree();
 8001dec:	f000 f882 	bl	8001ef4 <course_reset_section_degree>
	course_reset_flash_radius();
 8001df0:	f000 f96e 	bl	80020d0 <course_reset_flash_radius>
	imu_start();
 8001df4:	f7ff f9fe 	bl	80011f4 <imu_start>
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <course_stop>:

void course_stop()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free)
 8001e00:	f7ff fbc2 	bl	8001588 <rotary_read_playmode>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d004      	beq.n	8001e14 <course_stop+0x18>
 8001e0a:	f7ff fbbd 	bl	8001588 <rotary_read_playmode>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d101      	bne.n	8001e18 <course_stop+0x1c>
	{
		flash_write();
 8001e14:	f000 fae0 	bl	80023d8 <flash_write>
	}
	imu_stop();
 8001e18:	f7ff f9f3 	bl	8001202 <imu_stop>
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <course_update_section_degree>:
 * 好きな時に course_section_degree をリセットする
 * course_update_section_degree() は course_update_section_sampling_time_s の周期で常に実行され続ける
 * 
 */
void course_update_section_degree()
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	float tmp;
	imu_update_gyro();
 8001e26:	f7ff f9f3 	bl	8001210 <imu_update_gyro>
	#if D_COURSE_WHILE
	printf("imu_read_yaw() = %7.2lf, course_section_degree = %7.2lf\r\n", imu_read_yaw(), course_section_degree);
	#endif
	tmp = course_section_degree + imu_read_yaw() * course_update_section_sampling_time_s;
 8001e2a:	f7ff faa5 	bl	8001378 <imu_read_yaw>
 8001e2e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <course_update_section_degree+0x78>)
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <course_update_section_degree+0x7c>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	edc7 7a01 	vstr	s15, [r7, #4]
	course_section_degree = low_pass_filter(tmp, course_section_degree, 0);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_f2d>
 8001e50:	4604      	mov	r4, r0
 8001e52:	460d      	mov	r5, r1
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <course_update_section_degree+0x7c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb75 	bl	8000548 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 8001e90 <course_update_section_degree+0x70>
 8001e66:	ec43 2b11 	vmov	d1, r2, r3
 8001e6a:	ec45 4b10 	vmov	d0, r4, r5
 8001e6e:	f000 fad9 	bl	8002424 <low_pass_filter>
 8001e72:	ec53 2b10 	vmov	r2, r3, d0
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe feb5 	bl	8000be8 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <course_update_section_degree+0x7c>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8c:	f3af 8000 	nop.w
	...
 8001e98:	20000400 	.word	0x20000400
 8001e9c:	20000408 	.word	0x20000408

08001ea0 <course_set_update_section_freq_ms>:

void course_set_update_section_freq_ms(unsigned short int samplingtime_ms)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
	course_update_section_sampling_time_s = samplingtime_ms / (float) 1000;
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001ed0 <course_set_update_section_freq_ms+0x30>
 8001eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <course_set_update_section_freq_ms+0x34>)
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	447a0000 	.word	0x447a0000
 8001ed4:	20000400 	.word	0x20000400

08001ed8 <course_read_section_degree>:

float course_read_section_degree()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	return course_section_degree;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <course_read_section_degree+0x18>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	ee07 3a90 	vmov	s15, r3
}
 8001ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	20000408 	.word	0x20000408

08001ef4 <course_reset_section_degree>:

void course_reset_section_degree()
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	course_section_degree = 0;
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <course_reset_section_degree+0x18>)
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000408 	.word	0x20000408

08001f10 <course_reset>:

void course_reset()
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	course_reset_section_degree();
 8001f14:	f7ff ffee 	bl	8001ef4 <course_reset_section_degree>
	length_reset();
 8001f18:	f000 fb34 	bl	8002584 <length_reset>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <course_read_curvature_radius>:

float course_read_curvature_radius()
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
	return course_curvature_radius;
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <course_read_curvature_radius+0x18>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	ee07 3a90 	vmov	s15, r3
}
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	200003fc 	.word	0x200003fc

08001f3c <course_read_state_count>:

uint16_t course_read_state_count()
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
    return course_state_count;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <course_read_state_count+0x14>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000404 	.word	0x20000404

08001f54 <course_increment_state_count>:

void course_increment_state_count()
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
    course_state_count++;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <course_increment_state_count+0x1c>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <course_increment_state_count+0x1c>)
 8001f62:	801a      	strh	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000404 	.word	0x20000404
 8001f74:	00000000 	.word	0x00000000

08001f78 <course_calclate_radius>:
 * course_reset()					// 角度と長さ情報をリセットする
 * の順に呼び出す必要がある
 * 
 */
void course_calclate_radius()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
    float curvature_radius;
	float section_degree, section_length;
	float section_radian;

    /* 長さを取得する */
	section_length = length_read();
 8001f7e:	f000 fb15 	bl	80025ac <length_read>
 8001f82:	ed87 0a03 	vstr	s0, [r7, #12]
	//! 角度を取得する
	section_degree = course_read_section_degree();
 8001f86:	f7ff ffa7 	bl	8001ed8 <course_read_section_degree>
 8001f8a:	ed87 0a02 	vstr	s0, [r7, #8]

#if MODE_IMU_CALCLATE
	course_section_length = // course_section_length_from_imu
#endif

	section_radian = section_degree * M_PI / (float) 180;
 8001f8e:	68b8      	ldr	r0, [r7, #8]
 8001f90:	f7fe fada 	bl	8000548 <__aeabi_f2d>
 8001f94:	a314      	add	r3, pc, #80	; (adr r3, 8001fe8 <course_calclate_radius+0x70>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb2d 	bl	80005f8 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <course_calclate_radius+0x68>)
 8001fac:	f7fe fc4e 	bl	800084c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fe16 	bl	8000be8 <__aeabi_d2f>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	607b      	str	r3, [r7, #4]
	curvature_radius = section_length / section_radian;
 8001fc0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001fc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fcc:	edc7 7a00 	vstr	s15, [r7]
	course_curvature_radius = curvature_radius;
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <course_calclate_radius+0x6c>)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40668000 	.word	0x40668000
 8001fe4:	200003fc 	.word	0x200003fc
 8001fe8:	54442d18 	.word	0x54442d18
 8001fec:	400921fb 	.word	0x400921fb

08001ff0 <course_state_function>:
 * 左センサを読んだら、あるいは、一定区間進んだら course_state_function() を実行するようにプログラムする
 * 探索か二次走行かは course_state_function() 関数内で判断する必要がある
 * 
 */
void course_state_function()
{
 8001ff0:	b598      	push	{r3, r4, r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free )
 8001ff4:	f7ff fac8 	bl	8001588 <rotary_read_playmode>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d004      	beq.n	8002008 <course_state_function+0x18>
 8001ffe:	f7ff fac3 	bl	8001588 <rotary_read_playmode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11c      	bne.n	8002042 <course_state_function+0x52>
	{
#if USE_COURSE_STATE_COUNT
		course_increment_state_count();
#endif
		flashbuffer.course_state_count_max = course_read_state_count();
 8002008:	f7ff ff98 	bl	8001f3c <course_read_state_count>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <course_state_function+0x60>)
 8002012:	801a      	strh	r2, [r3, #0]
		course_calclate_radius();
 8002014:	f7ff ffb0 	bl	8001f78 <course_calclate_radius>
		flashbuffer.radius[course_state_count] = course_read_curvature_radius();
 8002018:	f7ff ff82 	bl	8001f20 <course_read_curvature_radius>
 800201c:	ee10 2a10 	vmov	r2, s0
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <course_state_function+0x64>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	461c      	mov	r4, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7fe fa8e 	bl	8000548 <__aeabi_f2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <course_state_function+0x60>)
 8002032:	f104 0109 	add.w	r1, r4, #9
 8002036:	00c9      	lsls	r1, r1, #3
 8002038:	4401      	add	r1, r0
 800203a:	e9c1 2300 	strd	r2, r3, [r1]
		#if D_COURSE_WHILE
		printf("radius = %lf\r\n", flashbuffer.radius[course_state_count]);
		#endif
		course_reset();
 800203e:	f7ff ff67 	bl	8001f10 <course_reset>
	}
	if(rotary_read_playmode() == accel)
 8002042:	f7ff faa1 	bl	8001588 <rotary_read_playmode>
//		velocity_control_switch_function();
#if USE_COURSE_STATE_COUNT
		course_increment_state_count();
#endif
	}
	course_increment_state_count();
 8002046:	f7ff ff85 	bl	8001f54 <course_increment_state_count>
}
 800204a:	bf00      	nop
 800204c:	bd98      	pop	{r3, r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	200007f0 	.word	0x200007f0
 8002054:	20000404 	.word	0x20000404

08002058 <course_d_print>:

void course_d_print()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
#if D_COURSE
	printf("length = %7.2lf, degree = %7.2lf, radius = %7.2lf\r\n", length_read(), course_read_section_degree(), course_read_curvature_radius());
	// printf("course_state_function の実行回数 = %d\r\n", __debug_eradiusecute_count__);
#endif
	encoder_d_print();
 800205c:	f000 f892 	bl	8002184 <encoder_d_print>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <course_print_flash>:
	// speed = - (4238566523291511 * pow(radius, 5)) / (double) 633825300114114700748351602688 + (8582934509267735 * pow(radius, 4)) / (double) 77371252455336267181195264 - (1459060547913519 * pow(radius, 3)) / (double) 2361183241434822606848 + (2682365349594497 * pow(radius, 2)) / (double) 2305843009213693952 + (1737420468106149 * radius) / (double) 4503599627370496 + 7057670738269725 / (double) 8796093022208;
	return speed;
}

void course_print_flash()
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
	uint16_t course_state_size;
	course_state_size = COURSE_STATE_SIZE;
 800206a:	f241 7370 	movw	r3, #6000	; 0x1770
 800206e:	80fb      	strh	r3, [r7, #6]
	//! print flash contents
	while(switch_read_enter())
 8002070:	e01d      	b.n	80020ae <course_print_flash+0x4a>
	{
		if(course_state_size > 0)
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <course_print_flash+0x42>
		{
			uint16_t index;
			index = COURSE_STATE_SIZE - course_state_size;
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 800207e:	3310      	adds	r3, #16
 8002080:	80bb      	strh	r3, [r7, #4]
			printf("%6d, %8lf\r\n", index, flashbuffer.radius[index]);
 8002082:	88b9      	ldrh	r1, [r7, #4]
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <course_print_flash+0x60>)
 8002088:	3309      	adds	r3, #9
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <course_print_flash+0x64>)
 8002094:	f008 fb62 	bl	800a75c <iprintf>
			course_state_size = course_state_size - 1;
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	3b01      	subs	r3, #1
 800209c:	80fb      	strh	r3, [r7, #6]
			HAL_Delay(100);
 800209e:	2064      	movs	r0, #100	; 0x64
 80020a0:	f002 fed6 	bl	8004e50 <HAL_Delay>
 80020a4:	e003      	b.n	80020ae <course_print_flash+0x4a>
		}
		else
		{
			HAL_Delay(1000);
 80020a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020aa:	f002 fed1 	bl	8004e50 <HAL_Delay>
	while(switch_read_enter())
 80020ae:	f7ff fb6b 	bl	8001788 <switch_read_enter>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1dc      	bne.n	8002072 <course_print_flash+0xe>
		}
	}
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200007f0 	.word	0x200007f0
 80020c8:	0800e670 	.word	0x0800e670
 80020cc:	00000000 	.word	0x00000000

080020d0 <course_reset_flash_radius>:

void course_reset_flash_radius()
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 80020d6:	f241 7370 	movw	r3, #6000	; 0x1770
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	e011      	b.n	8002102 <course_reset_flash_radius+0x32>
	{
		uint16_t index;
		index = COURSE_STATE_SIZE - course_state_size;
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 80020e4:	3310      	adds	r3, #16
 80020e6:	80bb      	strh	r3, [r7, #4]
		flashbuffer.radius[index] = COURSE_RADIUS_MAX;
 80020e8:	88bb      	ldrh	r3, [r7, #4]
 80020ea:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <course_reset_flash_radius+0x50>)
 80020ec:	3309      	adds	r3, #9
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	18d1      	adds	r1, r2, r3
 80020f2:	a309      	add	r3, pc, #36	; (adr r3, 8002118 <course_reset_flash_radius+0x48>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	3b01      	subs	r3, #1
 8002100:	80fb      	strh	r3, [r7, #6]
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ea      	bne.n	80020de <course_reset_flash_radius+0xe>
	}
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	00000000 	.word	0x00000000
 800211c:	40efffe0 	.word	0x40efffe0
 8002120:	200007f0 	.word	0x200007f0

08002124 <encoder_length_left>:
    #endif
    return (float) encoder * (float) LENGTHPERPULSE;
}

float encoder_length_left()
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_left * (float) LENGTHPERPULSE;
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <encoder_length_left+0x28>)
 800212a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002150 <encoder_length_left+0x2c>
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200007e4 	.word	0x200007e4
 8002150:	40c955c1 	.word	0x40c955c1

08002154 <encoder_length_right>:

float encoder_length_right()
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_right * (float) LENGTHPERPULSE;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <encoder_length_right+0x28>)
 800215a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002180 <encoder_length_right+0x2c>
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800216e:	eeb0 0a67 	vmov.f32	s0, s15
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	200007ec 	.word	0x200007ec
 8002180:	40c955c1 	.word	0x40c955c1

08002184 <encoder_d_print>:

void encoder_d_print()
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af02      	add	r7, sp, #8
    #if D_ENCODER
    printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %f\r\n", encoder_left, encoder_right, encoder);
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <encoder_d_print+0x38>)
 800218c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002190:	461c      	mov	r4, r3
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <encoder_d_print+0x3c>)
 8002194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002198:	461d      	mov	r5, r3
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <encoder_d_print+0x40>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9d2 	bl	8000548 <__aeabi_f2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	e9cd 2300 	strd	r2, r3, [sp]
 80021ac:	462a      	mov	r2, r5
 80021ae:	4621      	mov	r1, r4
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <encoder_d_print+0x44>)
 80021b2:	f008 fad3 	bl	800a75c <iprintf>
    #endif
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bdb0      	pop	{r4, r5, r7, pc}
 80021bc:	200007e4 	.word	0x200007e4
 80021c0:	200007ec 	.word	0x200007ec
 80021c4:	200007e8 	.word	0x200007e8
 80021c8:	0800e67c 	.word	0x0800e67c

080021cc <encoder_set>:

/* only read tim10_update_length */
void encoder_set()
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <encoder_set+0x58>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21a      	sxth	r2, r3
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <encoder_set+0x5c>)
 80021e0:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <encoder_set+0x60>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <encoder_set+0x64>)
 80021f2:	801a      	strh	r2, [r3, #0]
    encoder = (encoder_left + encoder_right) / (float) 2;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <encoder_set+0x5c>)
 80021f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <encoder_set+0x64>)
 80021fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002202:	4413      	add	r3, r2
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <encoder_set+0x68>)
 8002216:	edc3 7a00 	vstr	s15, [r3]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 800221a:	f000 f857 	bl	80022cc <encoder_set_middle>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40010000 	.word	0x40010000
 8002228:	200007e4 	.word	0x200007e4
 800222c:	40000400 	.word	0x40000400
 8002230:	200007ec 	.word	0x200007ec
 8002234:	200007e8 	.word	0x200007e8

08002238 <encoder_init>:

void encoder_init()
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
 800223c:	a305      	add	r3, pc, #20	; (adr r3, 8002254 <encoder_init+0x1c>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	4803      	ldr	r0, [pc, #12]	; (8002250 <encoder_init+0x18>)
 8002244:	f008 fa8a 	bl	800a75c <iprintf>
    #endif
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	f3af 8000 	nop.w
 8002250:	0800e6c0 	.word	0x0800e6c0
 8002254:	24a478cb 	.word	0x24a478cb
 8002258:	40192ab8 	.word	0x40192ab8

0800225c <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <encoder_start+0x38>)
 8002262:	2200      	movs	r2, #0
 8002264:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <encoder_start+0x3c>)
 8002268:	2200      	movs	r2, #0
 800226a:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <encoder_start+0x40>)
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

    encoder_set_middle();
 8002274:	f000 f82a 	bl	80022cc <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002278:	213c      	movs	r1, #60	; 0x3c
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <encoder_start+0x44>)
 800227c:	f006 fa80 	bl	8008780 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002280:	213c      	movs	r1, #60	; 0x3c
 8002282:	4808      	ldr	r0, [pc, #32]	; (80022a4 <encoder_start+0x48>)
 8002284:	f006 fa7c 	bl	8008780 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <encoder_start+0x4c>)
 800228a:	f005 ffad 	bl	80081e8 <HAL_TIM_Base_Start_IT>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200007e4 	.word	0x200007e4
 8002298:	200007ec 	.word	0x200007ec
 800229c:	200007e8 	.word	0x200007e8
 80022a0:	200006c8 	.word	0x200006c8
 80022a4:	20000548 	.word	0x20000548
 80022a8:	20000500 	.word	0x20000500

080022ac <encoder_stop>:

void encoder_stop()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80022b0:	213c      	movs	r1, #60	; 0x3c
 80022b2:	4804      	ldr	r0, [pc, #16]	; (80022c4 <encoder_stop+0x18>)
 80022b4:	f006 faf2 	bl	800889c <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 80022b8:	213c      	movs	r1, #60	; 0x3c
 80022ba:	4803      	ldr	r0, [pc, #12]	; (80022c8 <encoder_stop+0x1c>)
 80022bc:	f006 faee 	bl	800889c <HAL_TIM_Encoder_Stop>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200006c8 	.word	0x200006c8
 80022c8:	20000548 	.word	0x20000548

080022cc <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <encoder_set_middle+0x20>)
 80022d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <encoder_set_middle+0x24>)
 80022da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40000400 	.word	0x40000400
 80022f4:	00000000 	.word	0x00000000

080022f8 <fixed_section_main>:
 * @attention
 * course_state_function() を呼び出すと length_reset() が呼び出されることに注意
 * 
 */
void fixed_section_main()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
    float fixed_length = length_read();
 80022fe:	f000 f955 	bl	80025ac <length_read>
 8002302:	ed87 0a01 	vstr	s0, [r7, #4]
    if(fixed_length >= COURSE_SAMPLING_LENGTH)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe f91e 	bl	8000548 <__aeabi_f2d>
 800230c:	a308      	add	r3, pc, #32	; (adr r3, 8002330 <fixed_section_main+0x38>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f7fe fbf7 	bl	8000b04 <__aeabi_dcmpge>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d100      	bne.n	800231e <fixed_section_main+0x26>
    {
        course_state_function();
    }
}
 800231c:	e001      	b.n	8002322 <fixed_section_main+0x2a>
        course_state_function();
 800231e:	f7ff fe67 	bl	8001ff0 <course_state_function>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	f3af 8000 	nop.w
 8002330:	47ae147b 	.word	0x47ae147b
 8002334:	3f847ae1 	.word	0x3f847ae1

08002338 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8002342:	230b      	movs	r3, #11
 8002344:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8002346:	2301      	movs	r3, #1
 8002348:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800234a:	2302      	movs	r3, #2
 800234c:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8002352:	463a      	mov	r2, r7
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f004 f8a7 	bl	80064ac <HAL_FLASHEx_Erase>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8002372:	f003 ff39 	bl	80061e8 <HAL_FLASH_Unlock>
	flash_erase();
 8002376:	f7ff ffdf 	bl	8002338 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e00e      	b.n	800239e <flash_writting+0x38>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	2000      	movs	r0, #0
 800238e:	f003 fed7 	bl	8006140 <HAL_FLASH_Program>
		data++;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3301      	adds	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3ea      	bcc.n	8002380 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 80023aa:	f003 ff3f 	bl	800622c <HAL_FLASH_Lock>
#endif
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4619      	mov	r1, r3
 80023c8:	68b8      	ldr	r0, [r7, #8]
 80023ca:	f007 fb37 	bl	8009a3c <memcpy>
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <flash_write>:

void flash_write()
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <flash_write+0x18>)
 80023de:	f64b 32c8 	movw	r2, #48072	; 0xbbc8
 80023e2:	4904      	ldr	r1, [pc, #16]	; (80023f4 <flash_write+0x1c>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ffbe 	bl	8002366 <flash_writting>
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	080e0000 	.word	0x080e0000
 80023f4:	200007f0 	.word	0x200007f0

080023f8 <flash_read>:

void flash_read()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <flash_read+0x18>)
 80023fe:	f64b 32c8 	movw	r2, #48072	; 0xbbc8
 8002402:	4904      	ldr	r1, [pc, #16]	; (8002414 <flash_read+0x1c>)
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ffd6 	bl	80023b6 <flash_reading>
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	080e0000 	.word	0x080e0000
 8002414:	200007f0 	.word	0x200007f0

08002418 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	flash_read();
 800241c:	f7ff ffec 	bl	80023f8 <flash_read>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <low_pass_filter>:
#include "function.h"

double low_pass_filter(double val, double pre_val, double gamma)
{
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	ed87 0b04 	vstr	d0, [r7, #16]
 800242e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002432:	ed87 2b00 	vstr	d2, [r7]
	return (double) (gamma * (double) pre_val
 8002436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800243a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800243e:	f7fe f8db 	bl	80005f8 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4614      	mov	r4, r2
 8002448:	461d      	mov	r5, r3
			+ (double) (1 - gamma) * (double) val);
 800244a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800244e:	f04f 0000 	mov.w	r0, #0
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <low_pass_filter+0x68>)
 8002454:	f7fd ff18 	bl	8000288 <__aeabi_dsub>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002464:	f7fe f8c8 	bl	80005f8 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
	return (double) (gamma * (double) pre_val
 800246c:	4620      	mov	r0, r4
 800246e:	4629      	mov	r1, r5
 8002470:	f7fd ff0c 	bl	800028c <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	ec43 2b17 	vmov	d7, r2, r3
}
 800247c:	eeb0 0a47 	vmov.f32	s0, s14
 8002480:	eef0 0a67 	vmov.f32	s1, s15
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	bf00      	nop
 800248c:	3ff00000 	.word	0x3ff00000

08002490 <vector3_creation>:

    return vector_sum;
}

Vector3 vector3_creation(float x, float y, float z)
{
 8002490:	b480      	push	{r7}
 8002492:	b08f      	sub	sp, #60	; 0x3c
 8002494:	af00      	add	r7, sp, #0
 8002496:	ed87 0a07 	vstr	s0, [r7, #28]
 800249a:	edc7 0a06 	vstr	s1, [r7, #24]
 800249e:	ed87 1a05 	vstr	s2, [r7, #20]
    Vector3 new;
    new.x = x;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	623b      	str	r3, [r7, #32]
    new.y = y;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    new.z = z;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
    return new;
 80024ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b2:	f107 0220 	add.w	r2, r7, #32
 80024b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80024b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80024bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c2:	ee06 1a90 	vmov	s13, r1
 80024c6:	ee07 2a10 	vmov	s14, r2
 80024ca:	ee07 3a90 	vmov	s15, r3
}
 80024ce:	eeb0 0a66 	vmov.f32	s0, s13
 80024d2:	eef0 0a47 	vmov.f32	s1, s14
 80024d6:	eeb0 1a67 	vmov.f32	s2, s15
 80024da:	373c      	adds	r7, #60	; 0x3c
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <length_set_sampling_time_ms>:
float length_left, length_right;
float velocity_left, velocity_right;
float length_update_sampling_time_s;

void length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
    length_update_sampling_time_s = samplingtime_ms / (float) 1000;
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f8:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002514 <length_set_sampling_time_ms+0x30>
 80024fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <length_set_sampling_time_ms+0x34>)
 8002502:	edc3 7a00 	vstr	s15, [r3]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	447a0000 	.word	0x447a0000
 8002518:	2000c3b8 	.word	0x2000c3b8

0800251c <length_init>:

void length_init(unsigned short int samplingtime_ms)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
    length_set_sampling_time_ms(samplingtime_ms);
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ffdb 	bl	80024e4 <length_set_sampling_time_ms>
    encoder_init();
 800252e:	f7ff fe83 	bl	8002238 <encoder_init>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <length_start>:

void length_start()
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
    length_left = 0;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <length_start+0x2c>)
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <length_start+0x30>)
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    velocity_left = 0;
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <length_start+0x34>)
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    velocity_right = 0;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <length_start+0x38>)
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    encoder_start();
 8002560:	f7ff fe7c 	bl	800225c <encoder_start>
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000c3bc 	.word	0x2000c3bc
 800256c:	2000c3c8 	.word	0x2000c3c8
 8002570:	2000c3c4 	.word	0x2000c3c4
 8002574:	2000c3c0 	.word	0x2000c3c0

08002578 <length_stop>:

void length_stop()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
    encoder_stop();
 800257c:	f7ff fe96 	bl	80022ac <encoder_stop>
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <length_reset>:
    encoder_fin();
}

//! course_state_function() を呼び出すたびに length_reset() する
void length_reset()
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
    length_left = 0;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <length_reset+0x20>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <length_reset+0x24>)
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	2000c3bc 	.word	0x2000c3bc
 80025a8:	2000c3c8 	.word	0x2000c3c8

080025ac <length_read>:

//! 中央の長さを取る 単位 [ m ]
float length_read()
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
    return (length_left + length_right) / 2;
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <length_read+0x2c>)
 80025b2:	ed93 7a00 	vldr	s14, [r3]
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <length_read+0x30>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80025c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80025cc:	eeb0 0a67 	vmov.f32	s0, s15
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	2000c3bc 	.word	0x2000c3bc
 80025dc:	2000c3c8 	.word	0x2000c3c8

080025e0 <velocity_read>:
{
    return length_right;
}

float velocity_read()
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    return (velocity_left + velocity_right) / 2;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <velocity_read+0x2c>)
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <velocity_read+0x30>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80025f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002600:	eeb0 0a67 	vmov.f32	s0, s15
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	2000c3c4 	.word	0x2000c3c4
 8002610:	2000c3c0 	.word	0x2000c3c0

08002614 <length_update>:

void length_update()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
    float encoder_left, encoder_right;
    float sampling_time_s;
    sampling_time_s = length_update_sampling_time_s;
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <length_update+0x88>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]
    /* encoder をセットしてから encoder_length を読み出さないといけない */
    encoder_set();
 8002620:	f7ff fdd4 	bl	80021cc <encoder_set>
    encoder_left = encoder_length_left();
 8002624:	f7ff fd7e 	bl	8002124 <encoder_length_left>
 8002628:	ed87 0a02 	vstr	s0, [r7, #8]
    encoder_right = encoder_length_right();
 800262c:	f7ff fd92 	bl	8002154 <encoder_length_right>
 8002630:	ed87 0a01 	vstr	s0, [r7, #4]
    velocity_left = encoder_left * sampling_time_s;
 8002634:	ed97 7a02 	vldr	s14, [r7, #8]
 8002638:	edd7 7a03 	vldr	s15, [r7, #12]
 800263c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <length_update+0x8c>)
 8002642:	edc3 7a00 	vstr	s15, [r3]
    velocity_right = encoder_right * sampling_time_s;
 8002646:	ed97 7a01 	vldr	s14, [r7, #4]
 800264a:	edd7 7a03 	vldr	s15, [r7, #12]
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <length_update+0x90>)
 8002654:	edc3 7a00 	vstr	s15, [r3]
    length_left += velocity_left * sampling_time_s;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <length_update+0x8c>)
 800265a:	ed93 7a00 	vldr	s14, [r3]
 800265e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <length_update+0x94>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <length_update+0x94>)
 8002672:	edc3 7a00 	vstr	s15, [r3]
    length_right += velocity_right * sampling_time_s;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <length_update+0x90>)
 8002678:	ed93 7a00 	vldr	s14, [r3]
 800267c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <length_update+0x98>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <length_update+0x98>)
 8002690:	edc3 7a00 	vstr	s15, [r3]
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000c3b8 	.word	0x2000c3b8
 80026a0:	2000c3c4 	.word	0x2000c3c4
 80026a4:	2000c3c0 	.word	0x2000c3c0
 80026a8:	2000c3bc 	.word	0x2000c3bc
 80026ac:	2000c3c8 	.word	0x2000c3c8

080026b0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 80026c2:	f001 fe7b 	bl	80043bc <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 80026d0:	f001 ff2e 	bl	8004530 <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 80026de:	f001 fde3 	bl	80042a8 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a06      	ldr	r2, [pc, #24]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 80026ec:	f001 fe30 	bl	8004350 <tim11_main>
	}
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40001000 	.word	0x40001000
 80026fc:	40014400 	.word	0x40014400
 8002700:	40014800 	.word	0x40014800

08002704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002708:	f002 fb30 	bl	8004d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270c:	f000 f94c 	bl	80029a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002710:	f000 fd6e 	bl	80031f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002714:	f000 fd4c 	bl	80031b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002718:	f000 f9b0 	bl	8002a7c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 800271c:	f000 fd1e 	bl	800315c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8002720:	f000 fc44 	bl	8002fac <MX_TIM6_Init>
  MX_TIM4_Init();
 8002724:	f000 fbde 	bl	8002ee4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002728:	f000 fb30 	bl	8002d8c <MX_TIM1_Init>
  MX_TIM3_Init();
 800272c:	f000 fb86 	bl	8002e3c <MX_TIM3_Init>
  MX_TIM10_Init();
 8002730:	f000 fca8 	bl	8003084 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002734:	f000 fcca 	bl	80030cc <MX_TIM11_Init>
  MX_SPI2_Init();
 8002738:	f000 faf2 	bl	8002d20 <MX_SPI2_Init>
  MX_I2C1_Init();
 800273c:	f000 fac2 	bl	8002cc4 <MX_I2C1_Init>
  MX_TIM14_Init();
 8002740:	f000 fce8 	bl	8003114 <MX_TIM14_Init>
  MX_TIM7_Init();
 8002744:	f000 fc68 	bl	8003018 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8002748:	4895      	ldr	r0, [pc, #596]	; (80029a0 <main+0x29c>)
 800274a:	f008 f807 	bl	800a75c <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 800274e:	4895      	ldr	r0, [pc, #596]	; (80029a4 <main+0x2a0>)
 8002750:	f008 f88a 	bl	800a868 <puts>

  main_init();
 8002754:	f000 fe36 	bl	80033c4 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 8002758:	f000 fe76 	bl	8003448 <main_print_while>

		if(switch_read_enter())
 800275c:	f7ff f814 	bl	8001788 <switch_read_enter>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8114 	beq.w	8002990 <main+0x28c>
		{
			switch(rotary_read())
 8002768:	f7fe ff32 	bl	80015d0 <rotary_read>
 800276c:	4603      	mov	r3, r0
 800276e:	2b0f      	cmp	r3, #15
 8002770:	f200 8110 	bhi.w	8002994 <main+0x290>
 8002774:	a201      	add	r2, pc, #4	; (adr r2, 800277c <main+0x78>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	080027bd 	.word	0x080027bd
 8002780:	080027fb 	.word	0x080027fb
 8002784:	08002815 	.word	0x08002815
 8002788:	0800282f 	.word	0x0800282f
 800278c:	08002849 	.word	0x08002849
 8002790:	08002863 	.word	0x08002863
 8002794:	0800287d 	.word	0x0800287d
 8002798:	08002897 	.word	0x08002897
 800279c:	080028b1 	.word	0x080028b1
 80027a0:	080028cb 	.word	0x080028cb
 80027a4:	080028e5 	.word	0x080028e5
 80027a8:	080028ff 	.word	0x080028ff
 80027ac:	08002919 	.word	0x08002919
 80027b0:	08002933 	.word	0x08002933
 80027b4:	0800294d 	.word	0x0800294d
 80027b8:	08002967 	.word	0x08002967
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 80027bc:	f7fe fee4 	bl	8001588 <rotary_read_playmode>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 80027c6:	f7ff f993 	bl	8001af0 <analog_calibration_start>

            while(switch_read_enter())
 80027ca:	e001      	b.n	80027d0 <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 80027cc:	f000 fe4a 	bl	8003464 <main_main>
            while(switch_read_enter())
 80027d0:	f7fe ffda 	bl	8001788 <switch_read_enter>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f8      	bne.n	80027cc <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 80027da:	f7ff f9b1 	bl	8001b40 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 80027de:	e0da      	b.n	8002996 <main+0x292>
            running_start();
 80027e0:	f000 fe07 	bl	80033f2 <running_start>
            while(switch_read_enter())
 80027e4:	e001      	b.n	80027ea <main+0xe6>
              main_main();
 80027e6:	f000 fe3d 	bl	8003464 <main_main>
            while(switch_read_enter())
 80027ea:	f7fe ffcd 	bl	8001788 <switch_read_enter>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f8      	bne.n	80027e6 <main+0xe2>
            running_stop();
 80027f4:	f000 fe14 	bl	8003420 <running_stop>
          break;	// case 0x00:
 80027f8:	e0cd      	b.n	8002996 <main+0x292>
        case 0x01:	// 1
          running_start();
 80027fa:	f000 fdfa 	bl	80033f2 <running_start>

          while (switch_read_enter())
 80027fe:	e001      	b.n	8002804 <main+0x100>
          {
            main_main();
 8002800:	f000 fe30 	bl	8003464 <main_main>
          while (switch_read_enter())
 8002804:	f7fe ffc0 	bl	8001788 <switch_read_enter>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f8      	bne.n	8002800 <main+0xfc>
          }

          running_stop();
 800280e:	f000 fe07 	bl	8003420 <running_stop>
          break;
 8002812:	e0c0      	b.n	8002996 <main+0x292>
        case 0x02:	// 2
          running_start();
 8002814:	f000 fded 	bl	80033f2 <running_start>

          while(switch_read_enter())
 8002818:	e001      	b.n	800281e <main+0x11a>
          {
            main_main();
 800281a:	f000 fe23 	bl	8003464 <main_main>
          while(switch_read_enter())
 800281e:	f7fe ffb3 	bl	8001788 <switch_read_enter>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f8      	bne.n	800281a <main+0x116>
          }

          running_stop();
 8002828:	f000 fdfa 	bl	8003420 <running_stop>
          break;
 800282c:	e0b3      	b.n	8002996 <main+0x292>
        case 0x03:	// 3
          running_start();
 800282e:	f000 fde0 	bl	80033f2 <running_start>

          while(switch_read_enter())
 8002832:	e001      	b.n	8002838 <main+0x134>
          {
            main_main();
 8002834:	f000 fe16 	bl	8003464 <main_main>
          while(switch_read_enter())
 8002838:	f7fe ffa6 	bl	8001788 <switch_read_enter>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f8      	bne.n	8002834 <main+0x130>
          }

          running_stop();
 8002842:	f000 fded 	bl	8003420 <running_stop>
          break;
 8002846:	e0a6      	b.n	8002996 <main+0x292>
        case 0x04:	// 4
          running_start();
 8002848:	f000 fdd3 	bl	80033f2 <running_start>

          while(switch_read_enter())
 800284c:	e001      	b.n	8002852 <main+0x14e>
          {
            main_main();
 800284e:	f000 fe09 	bl	8003464 <main_main>
          while(switch_read_enter())
 8002852:	f7fe ff99 	bl	8001788 <switch_read_enter>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f8      	bne.n	800284e <main+0x14a>
          }

          running_stop();
 800285c:	f000 fde0 	bl	8003420 <running_stop>
          break;
 8002860:	e099      	b.n	8002996 <main+0x292>
        case 0x05:	// 5
          running_start();
 8002862:	f000 fdc6 	bl	80033f2 <running_start>

          while(switch_read_enter())
 8002866:	e001      	b.n	800286c <main+0x168>
          {
            main_main();
 8002868:	f000 fdfc 	bl	8003464 <main_main>
          while(switch_read_enter())
 800286c:	f7fe ff8c 	bl	8001788 <switch_read_enter>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f8      	bne.n	8002868 <main+0x164>
          }

          running_stop();
 8002876:	f000 fdd3 	bl	8003420 <running_stop>
          break;
 800287a:	e08c      	b.n	8002996 <main+0x292>
        case 0x06:	// 6
          running_start();
 800287c:	f000 fdb9 	bl	80033f2 <running_start>

          while(switch_read_enter())
 8002880:	e001      	b.n	8002886 <main+0x182>
          {
            main_main();
 8002882:	f000 fdef 	bl	8003464 <main_main>
          while(switch_read_enter())
 8002886:	f7fe ff7f 	bl	8001788 <switch_read_enter>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f8      	bne.n	8002882 <main+0x17e>
          }

          running_stop();
 8002890:	f000 fdc6 	bl	8003420 <running_stop>
          break;
 8002894:	e07f      	b.n	8002996 <main+0x292>
        case 0x07:	// 7
          running_start();
 8002896:	f000 fdac 	bl	80033f2 <running_start>

          while(switch_read_enter())
 800289a:	e001      	b.n	80028a0 <main+0x19c>
          {
            main_main();
 800289c:	f000 fde2 	bl	8003464 <main_main>
          while(switch_read_enter())
 80028a0:	f7fe ff72 	bl	8001788 <switch_read_enter>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f8      	bne.n	800289c <main+0x198>
          }

          running_stop();
 80028aa:	f000 fdb9 	bl	8003420 <running_stop>
          break;
 80028ae:	e072      	b.n	8002996 <main+0x292>
        case 0x08:	// 8
          running_start();
 80028b0:	f000 fd9f 	bl	80033f2 <running_start>

          while(switch_read_enter())
 80028b4:	e001      	b.n	80028ba <main+0x1b6>
          {
            main_main();
 80028b6:	f000 fdd5 	bl	8003464 <main_main>
          while(switch_read_enter())
 80028ba:	f7fe ff65 	bl	8001788 <switch_read_enter>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f8      	bne.n	80028b6 <main+0x1b2>
          }

          running_stop();
 80028c4:	f000 fdac 	bl	8003420 <running_stop>
          break;
 80028c8:	e065      	b.n	8002996 <main+0x292>
        case 0x09:	// 9
          running_start();
 80028ca:	f000 fd92 	bl	80033f2 <running_start>

          while(switch_read_enter())
 80028ce:	e001      	b.n	80028d4 <main+0x1d0>
          {
            main_main();
 80028d0:	f000 fdc8 	bl	8003464 <main_main>
          while(switch_read_enter())
 80028d4:	f7fe ff58 	bl	8001788 <switch_read_enter>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f8      	bne.n	80028d0 <main+0x1cc>
          }

          running_stop();
 80028de:	f000 fd9f 	bl	8003420 <running_stop>
          break;
 80028e2:	e058      	b.n	8002996 <main+0x292>
        case 0x0A:	// A
          running_start();
 80028e4:	f000 fd85 	bl	80033f2 <running_start>

          while(switch_read_enter())
 80028e8:	e001      	b.n	80028ee <main+0x1ea>
          {
            main_main();
 80028ea:	f000 fdbb 	bl	8003464 <main_main>
          while(switch_read_enter())
 80028ee:	f7fe ff4b 	bl	8001788 <switch_read_enter>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f8      	bne.n	80028ea <main+0x1e6>
          }

          running_stop();
 80028f8:	f000 fd92 	bl	8003420 <running_stop>
          break;
 80028fc:	e04b      	b.n	8002996 <main+0x292>
        case 0x0B:	// B
          running_start();
 80028fe:	f000 fd78 	bl	80033f2 <running_start>

          while(switch_read_enter())
 8002902:	e001      	b.n	8002908 <main+0x204>
          {
            main_main();
 8002904:	f000 fdae 	bl	8003464 <main_main>
          while(switch_read_enter())
 8002908:	f7fe ff3e 	bl	8001788 <switch_read_enter>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f8      	bne.n	8002904 <main+0x200>
          }

          running_stop();
 8002912:	f000 fd85 	bl	8003420 <running_stop>
          break;
 8002916:	e03e      	b.n	8002996 <main+0x292>
        case 0x0C:	// C
          running_start();
 8002918:	f000 fd6b 	bl	80033f2 <running_start>

          while(switch_read_enter())
 800291c:	e001      	b.n	8002922 <main+0x21e>
          {
            main_main();
 800291e:	f000 fda1 	bl	8003464 <main_main>
          while(switch_read_enter())
 8002922:	f7fe ff31 	bl	8001788 <switch_read_enter>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f8      	bne.n	800291e <main+0x21a>
          }

          running_stop();
 800292c:	f000 fd78 	bl	8003420 <running_stop>
          break;
 8002930:	e031      	b.n	8002996 <main+0x292>
        case 0x0D:	// D
          running_start();
 8002932:	f000 fd5e 	bl	80033f2 <running_start>

          while(switch_read_enter())
 8002936:	e001      	b.n	800293c <main+0x238>
          {
            main_main();
 8002938:	f000 fd94 	bl	8003464 <main_main>
          while(switch_read_enter())
 800293c:	f7fe ff24 	bl	8001788 <switch_read_enter>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f8      	bne.n	8002938 <main+0x234>
          }

          running_stop();
 8002946:	f000 fd6b 	bl	8003420 <running_stop>
          break;
 800294a:	e024      	b.n	8002996 <main+0x292>
        case 0x0E:	// E
          running_start();
 800294c:	f000 fd51 	bl	80033f2 <running_start>

          while(switch_read_enter())
 8002950:	e001      	b.n	8002956 <main+0x252>
          {
            main_main();
 8002952:	f000 fd87 	bl	8003464 <main_main>
          while(switch_read_enter())
 8002956:	f7fe ff17 	bl	8001788 <switch_read_enter>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f8      	bne.n	8002952 <main+0x24e>
          }

          running_stop();
 8002960:	f000 fd5e 	bl	8003420 <running_stop>
          break;
 8002964:	e017      	b.n	8002996 <main+0x292>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 8002966:	f7fe fe0f 	bl	8001588 <rotary_read_playmode>
 800296a:	4603      	mov	r3, r0
 800296c:	2b0f      	cmp	r3, #15
 800296e:	d102      	bne.n	8002976 <main+0x272>
          {
            course_print_flash();
 8002970:	f7ff fb78 	bl	8002064 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8002974:	e00f      	b.n	8002996 <main+0x292>
            running_start();
 8002976:	f000 fd3c 	bl	80033f2 <running_start>
            while(switch_read_enter())
 800297a:	e001      	b.n	8002980 <main+0x27c>
              main_main();
 800297c:	f000 fd72 	bl	8003464 <main_main>
            while(switch_read_enter())
 8002980:	f7fe ff02 	bl	8001788 <switch_read_enter>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f8      	bne.n	800297c <main+0x278>
            running_stop();
 800298a:	f000 fd49 	bl	8003420 <running_stop>
          break;
 800298e:	e002      	b.n	8002996 <main+0x292>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <main+0x292>
          break;
 8002994:	bf00      	nop
    HAL_Delay(500);
 8002996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800299a:	f002 fa59 	bl	8004e50 <HAL_Delay>
    main_print_while();
 800299e:	e6db      	b.n	8002758 <main+0x54>
 80029a0:	0800e6dc 	.word	0x0800e6dc
 80029a4:	0800e6e4 	.word	0x0800e6e4

080029a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b094      	sub	sp, #80	; 0x50
 80029ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ae:	f107 0320 	add.w	r3, r7, #32
 80029b2:	2230      	movs	r2, #48	; 0x30
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f007 f84e 	bl	8009a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <SystemClock_Config+0xcc>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <SystemClock_Config+0xcc>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <SystemClock_Config+0xcc>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <SystemClock_Config+0xd0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <SystemClock_Config+0xd0>)
 80029f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <SystemClock_Config+0xd0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002a08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a18:	2308      	movs	r3, #8
 8002a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a1c:	23a8      	movs	r3, #168	; 0xa8
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a20:	2302      	movs	r3, #2
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a24:	2304      	movs	r3, #4
 8002a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a28:	f107 0320 	add.w	r3, r7, #32
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 f971 	bl	8006d14 <HAL_RCC_OscConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a38:	f000 fd25 	bl	8003486 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a40:	2302      	movs	r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	2105      	movs	r1, #5
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 fbd2 	bl	8007204 <HAL_RCC_ClockConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a66:	f000 fd0e 	bl	8003486 <Error_Handler>
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3750      	adds	r7, #80	; 0x50
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000

08002a7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a82:	463b      	mov	r3, r7
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a8e:	4b8a      	ldr	r3, [pc, #552]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002a90:	4a8a      	ldr	r2, [pc, #552]	; (8002cbc <MX_ADC1_Init+0x240>)
 8002a92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a94:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002aa2:	4b85      	ldr	r3, [pc, #532]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002aa8:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002aae:	4b82      	ldr	r3, [pc, #520]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ab6:	4b80      	ldr	r3, [pc, #512]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002abe:	4a80      	ldr	r2, [pc, #512]	; (8002cc0 <MX_ADC1_Init+0x244>)
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8002ac8:	4b7b      	ldr	r3, [pc, #492]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002aca:	2210      	movs	r2, #16
 8002acc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002ace:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ad6:	4b78      	ldr	r3, [pc, #480]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002adc:	4876      	ldr	r0, [pc, #472]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ade:	f002 f9db 	bl	8004e98 <HAL_ADC_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ae8:	f000 fccd 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002aec:	2309      	movs	r3, #9
 8002aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002af4:	2303      	movs	r3, #3
 8002af6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002af8:	463b      	mov	r3, r7
 8002afa:	4619      	mov	r1, r3
 8002afc:	486e      	ldr	r0, [pc, #440]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002afe:	f002 fb8d 	bl	800521c <HAL_ADC_ConfigChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002b08:	f000 fcbd 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002b0c:	230a      	movs	r3, #10
 8002b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002b10:	2302      	movs	r3, #2
 8002b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b14:	463b      	mov	r3, r7
 8002b16:	4619      	mov	r1, r3
 8002b18:	4867      	ldr	r0, [pc, #412]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002b1a:	f002 fb7f 	bl	800521c <HAL_ADC_ConfigChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002b24:	f000 fcaf 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b30:	463b      	mov	r3, r7
 8002b32:	4619      	mov	r1, r3
 8002b34:	4860      	ldr	r0, [pc, #384]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002b36:	f002 fb71 	bl	800521c <HAL_ADC_ConfigChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002b40:	f000 fca1 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002b44:	230b      	movs	r3, #11
 8002b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4859      	ldr	r0, [pc, #356]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002b52:	f002 fb63 	bl	800521c <HAL_ADC_ConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002b5c:	f000 fc93 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002b60:	230f      	movs	r3, #15
 8002b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002b64:	2305      	movs	r3, #5
 8002b66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b68:	463b      	mov	r3, r7
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4852      	ldr	r0, [pc, #328]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002b6e:	f002 fb55 	bl	800521c <HAL_ADC_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002b78:	f000 fc85 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002b7c:	230c      	movs	r3, #12
 8002b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002b80:	2306      	movs	r3, #6
 8002b82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b84:	463b      	mov	r3, r7
 8002b86:	4619      	mov	r1, r3
 8002b88:	484b      	ldr	r0, [pc, #300]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002b8a:	f002 fb47 	bl	800521c <HAL_ADC_ConfigChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002b94:	f000 fc77 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002b98:	230e      	movs	r3, #14
 8002b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4844      	ldr	r0, [pc, #272]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ba6:	f002 fb39 	bl	800521c <HAL_ADC_ConfigChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002bb0:	f000 fc69 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002bb4:	230d      	movs	r3, #13
 8002bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002bb8:	2308      	movs	r3, #8
 8002bba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bbc:	463b      	mov	r3, r7
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	483d      	ldr	r0, [pc, #244]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002bc2:	f002 fb2b 	bl	800521c <HAL_ADC_ConfigChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002bcc:	f000 fc5b 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002bd4:	2309      	movs	r3, #9
 8002bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd8:	463b      	mov	r3, r7
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4836      	ldr	r0, [pc, #216]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002bde:	f002 fb1d 	bl	800521c <HAL_ADC_ConfigChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002be8:	f000 fc4d 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	482f      	ldr	r0, [pc, #188]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002bfa:	f002 fb0f 	bl	800521c <HAL_ADC_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002c04:	f000 fc3f 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002c08:	2306      	movs	r3, #6
 8002c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002c0c:	230b      	movs	r3, #11
 8002c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c10:	463b      	mov	r3, r7
 8002c12:	4619      	mov	r1, r3
 8002c14:	4828      	ldr	r0, [pc, #160]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002c16:	f002 fb01 	bl	800521c <HAL_ADC_ConfigChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002c20:	f000 fc31 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002c28:	230c      	movs	r3, #12
 8002c2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4821      	ldr	r0, [pc, #132]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002c32:	f002 faf3 	bl	800521c <HAL_ADC_ConfigChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002c3c:	f000 fc23 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c40:	2305      	movs	r3, #5
 8002c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002c44:	230d      	movs	r3, #13
 8002c46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c48:	463b      	mov	r3, r7
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	481a      	ldr	r0, [pc, #104]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002c4e:	f002 fae5 	bl	800521c <HAL_ADC_ConfigChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8002c58:	f000 fc15 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002c60:	230e      	movs	r3, #14
 8002c62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c64:	463b      	mov	r3, r7
 8002c66:	4619      	mov	r1, r3
 8002c68:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002c6a:	f002 fad7 	bl	800521c <HAL_ADC_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002c74:	f000 fc07 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c80:	463b      	mov	r3, r7
 8002c82:	4619      	mov	r1, r3
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002c86:	f002 fac9 	bl	800521c <HAL_ADC_ConfigChannel>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8002c90:	f000 fbf9 	bl	8003486 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c94:	2303      	movs	r3, #3
 8002c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8002c98:	2310      	movs	r3, #16
 8002c9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <MX_ADC1_Init+0x23c>)
 8002ca2:	f002 fabb 	bl	800521c <HAL_ADC_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8002cac:	f000 fbeb 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000590 	.word	0x20000590
 8002cbc:	40012000 	.word	0x40012000
 8002cc0:	0f000001 	.word	0x0f000001

08002cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <MX_I2C1_Init+0x54>)
 8002ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <MX_I2C1_Init+0x58>)
 8002cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d00:	4804      	ldr	r0, [pc, #16]	; (8002d14 <MX_I2C1_Init+0x50>)
 8002d02:	f003 fec3 	bl	8006a8c <HAL_I2C_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d0c:	f000 fbbb 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200004ac 	.word	0x200004ac
 8002d18:	40005400 	.word	0x40005400
 8002d1c:	000186a0 	.word	0x000186a0

08002d20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <MX_SPI2_Init+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d40:	2202      	movs	r2, #2
 8002d42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d54:	2228      	movs	r2, #40	; 0x28
 8002d56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <MX_SPI2_Init+0x64>)
 8002d72:	f004 fc41 	bl	80075f8 <HAL_SPI_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d7c:	f000 fb83 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000040c 	.word	0x2000040c
 8002d88:	40003800 	.word	0x40003800

08002d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d92:	f107 030c 	add.w	r3, r7, #12
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f006 fe5c 	bl	8009a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002daa:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <MX_TIM1_Init+0xac>)
 8002dac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dec:	2301      	movs	r3, #1
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002df8:	f107 030c 	add.w	r3, r7, #12
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002e00:	f005 fc18 	bl	8008634 <HAL_TIM_Encoder_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002e0a:	f000 fb3c 	bl	8003486 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4806      	ldr	r0, [pc, #24]	; (8002e34 <MX_TIM1_Init+0xa8>)
 8002e1c:	f006 fa3e 	bl	800929c <HAL_TIMEx_MasterConfigSynchronization>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002e26:	f000 fb2e 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	3730      	adds	r7, #48	; 0x30
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200006c8 	.word	0x200006c8
 8002e38:	40010000 	.word	0x40010000

08002e3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e42:	f107 030c 	add.w	r3, r7, #12
 8002e46:	2224      	movs	r2, #36	; 0x24
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f006 fe04 	bl	8009a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002e5a:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <MX_TIM3_Init+0xa4>)
 8002e5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e86:	2301      	movs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e96:	2301      	movs	r3, #1
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ea2:	f107 030c 	add.w	r3, r7, #12
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002eaa:	f005 fbc3 	bl	8008634 <HAL_TIM_Encoder_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002eb4:	f000 fae7 	bl	8003486 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_TIM3_Init+0xa0>)
 8002ec6:	f006 f9e9 	bl	800929c <HAL_TIMEx_MasterConfigSynchronization>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ed0:	f000 fad9 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	3730      	adds	r7, #48	; 0x30
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000548 	.word	0x20000548
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eea:	f107 0320 	add.w	r3, r7, #32
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <MX_TIM4_Init+0xc4>)
 8002f0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f0e:	2202      	movs	r2, #2
 8002f10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002f18:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f2c:	481d      	ldr	r0, [pc, #116]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f2e:	f005 f9fa 	bl	8008326 <HAL_TIM_PWM_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002f38:	f000 faa5 	bl	8003486 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f44:	f107 0320 	add.w	r3, r7, #32
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4816      	ldr	r0, [pc, #88]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f4c:	f006 f9a6 	bl	800929c <HAL_TIMEx_MasterConfigSynchronization>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002f56:	f000 fa96 	bl	8003486 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5a:	2360      	movs	r3, #96	; 0x60
 8002f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f72:	f005 fe33 	bl	8008bdc <HAL_TIM_PWM_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002f7c:	f000 fa83 	bl	8003486 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	2204      	movs	r2, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4807      	ldr	r0, [pc, #28]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f88:	f005 fe28 	bl	8008bdc <HAL_TIM_PWM_ConfigChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002f92:	f000 fa78 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f96:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <MX_TIM4_Init+0xc0>)
 8002f98:	f000 ff76 	bl	8003e88 <HAL_TIM_MspPostInit>

}
 8002f9c:	bf00      	nop
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000464 	.word	0x20000464
 8002fa8:	40000800 	.word	0x40000800

08002fac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <MX_TIM6_Init+0x64>)
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <MX_TIM6_Init+0x68>)
 8002fbe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <MX_TIM6_Init+0x64>)
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <MX_TIM6_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <MX_TIM6_Init+0x64>)
 8002fce:	f248 323f 	movw	r2, #33599	; 0x833f
 8002fd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <MX_TIM6_Init+0x64>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fda:	480d      	ldr	r0, [pc, #52]	; (8003010 <MX_TIM6_Init+0x64>)
 8002fdc:	f005 f8b4 	bl	8008148 <HAL_TIM_Base_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002fe6:	f000 fa4e 	bl	8003486 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ff2:	463b      	mov	r3, r7
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <MX_TIM6_Init+0x64>)
 8002ff8:	f006 f950 	bl	800929c <HAL_TIMEx_MasterConfigSynchronization>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003002:	f000 fa40 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000680 	.word	0x20000680
 8003014:	40001000 	.word	0x40001000

08003018 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301e:	463b      	mov	r3, r7
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <MX_TIM7_Init+0x64>)
 8003028:	4a15      	ldr	r2, [pc, #84]	; (8003080 <MX_TIM7_Init+0x68>)
 800302a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <MX_TIM7_Init+0x64>)
 800302e:	2204      	movs	r2, #4
 8003030:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <MX_TIM7_Init+0x64>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <MX_TIM7_Init+0x64>)
 800303a:	f248 323f 	movw	r2, #33599	; 0x833f
 800303e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <MX_TIM7_Init+0x64>)
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003046:	480d      	ldr	r0, [pc, #52]	; (800307c <MX_TIM7_Init+0x64>)
 8003048:	f005 f87e 	bl	8008148 <HAL_TIM_Base_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003052:	f000 fa18 	bl	8003486 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800305e:	463b      	mov	r3, r7
 8003060:	4619      	mov	r1, r3
 8003062:	4806      	ldr	r0, [pc, #24]	; (800307c <MX_TIM7_Init+0x64>)
 8003064:	f006 f91a 	bl	800929c <HAL_TIMEx_MasterConfigSynchronization>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800306e:	f000 fa0a 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000079c 	.word	0x2000079c
 8003080:	40001400 	.word	0x40001400

08003084 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <MX_TIM10_Init+0x40>)
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <MX_TIM10_Init+0x44>)
 800308c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <MX_TIM10_Init+0x40>)
 8003090:	2204      	movs	r2, #4
 8003092:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <MX_TIM10_Init+0x40>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <MX_TIM10_Init+0x40>)
 800309c:	f248 323f 	movw	r2, #33599	; 0x833f
 80030a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <MX_TIM10_Init+0x40>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <MX_TIM10_Init+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <MX_TIM10_Init+0x40>)
 80030b0:	f005 f84a 	bl	8008148 <HAL_TIM_Base_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80030ba:	f000 f9e4 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000500 	.word	0x20000500
 80030c8:	40014400 	.word	0x40014400

080030cc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80030d0:	4b0e      	ldr	r3, [pc, #56]	; (800310c <MX_TIM11_Init+0x40>)
 80030d2:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <MX_TIM11_Init+0x44>)
 80030d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <MX_TIM11_Init+0x40>)
 80030d8:	2204      	movs	r2, #4
 80030da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <MX_TIM11_Init+0x40>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <MX_TIM11_Init+0x40>)
 80030e4:	f248 323f 	movw	r2, #33599	; 0x833f
 80030e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <MX_TIM11_Init+0x40>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <MX_TIM11_Init+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030f6:	4805      	ldr	r0, [pc, #20]	; (800310c <MX_TIM11_Init+0x40>)
 80030f8:	f005 f826 	bl	8008148 <HAL_TIM_Base_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003102:	f000 f9c0 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200005d8 	.word	0x200005d8
 8003110:	40014800 	.word	0x40014800

08003114 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <MX_TIM14_Init+0x40>)
 800311a:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <MX_TIM14_Init+0x44>)
 800311c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <MX_TIM14_Init+0x40>)
 8003120:	2204      	movs	r2, #4
 8003122:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_TIM14_Init+0x40>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <MX_TIM14_Init+0x40>)
 800312c:	f248 323f 	movw	r2, #33599	; 0x833f
 8003130:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_TIM14_Init+0x40>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_TIM14_Init+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_TIM14_Init+0x40>)
 8003140:	f005 f802 	bl	8008148 <HAL_TIM_Base_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800314a:	f000 f99c 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000754 	.word	0x20000754
 8003158:	40002000 	.word	0x40002000

0800315c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <MX_USART6_UART_Init+0x50>)
 8003164:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 8003168:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800316c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 8003182:	220c      	movs	r2, #12
 8003184:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003192:	4805      	ldr	r0, [pc, #20]	; (80031a8 <MX_USART6_UART_Init+0x4c>)
 8003194:	f006 f912 	bl	80093bc <HAL_UART_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800319e:	f000 f972 	bl	8003486 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000710 	.word	0x20000710
 80031ac:	40011400 	.word	0x40011400

080031b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MX_DMA_Init+0x3c>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <MX_DMA_Init+0x3c>)
 80031c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <MX_DMA_Init+0x3c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	2038      	movs	r0, #56	; 0x38
 80031d8:	f002 fb9b 	bl	8005912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031dc:	2038      	movs	r0, #56	; 0x38
 80031de:	f002 fbb4 	bl	800594a <HAL_NVIC_EnableIRQ>

}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	4b69      	ldr	r3, [pc, #420]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a68      	ldr	r2, [pc, #416]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b66      	ldr	r3, [pc, #408]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a61      	ldr	r2, [pc, #388]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 800322c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a5a      	ldr	r2, [pc, #360]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	4b54      	ldr	r3, [pc, #336]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a53      	ldr	r2, [pc, #332]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b51      	ldr	r3, [pc, #324]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a4c      	ldr	r2, [pc, #304]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <MX_GPIO_Init+0x1c0>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003292:	2200      	movs	r2, #0
 8003294:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8003298:	4846      	ldr	r0, [pc, #280]	; (80033b4 <MX_GPIO_Init+0x1c4>)
 800329a:	f003 fbdd 	bl	8006a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 800329e:	2200      	movs	r2, #0
 80032a0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80032a4:	4844      	ldr	r0, [pc, #272]	; (80033b8 <MX_GPIO_Init+0x1c8>)
 80032a6:	f003 fbd7 	bl	8006a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80032b0:	4842      	ldr	r0, [pc, #264]	; (80033bc <MX_GPIO_Init+0x1cc>)
 80032b2:	f003 fbd1 	bl	8006a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2104      	movs	r1, #4
 80032ba:	4841      	ldr	r0, [pc, #260]	; (80033c0 <MX_GPIO_Init+0x1d0>)
 80032bc:	f003 fbcc 	bl	8006a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 80032c0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80032c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	4836      	ldr	r0, [pc, #216]	; (80033b4 <MX_GPIO_Init+0x1c4>)
 80032da:	f003 fa09 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 80032de:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 80032e2:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4619      	mov	r1, r3
 80032f2:	4830      	ldr	r0, [pc, #192]	; (80033b4 <MX_GPIO_Init+0x1c4>)
 80032f4:	f003 f9fc 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80032f8:	f640 0304 	movw	r3, #2052	; 0x804
 80032fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	4619      	mov	r1, r3
 800330c:	482a      	ldr	r0, [pc, #168]	; (80033b8 <MX_GPIO_Init+0x1c8>)
 800330e:	f003 f9ef 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8003312:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003318:	2301      	movs	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	4619      	mov	r1, r3
 800332a:	4823      	ldr	r0, [pc, #140]	; (80033b8 <MX_GPIO_Init+0x1c8>)
 800332c:	f003 f9e0 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8003330:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003336:	2301      	movs	r3, #1
 8003338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	4619      	mov	r1, r3
 8003348:	481c      	ldr	r0, [pc, #112]	; (80033bc <MX_GPIO_Init+0x1cc>)
 800334a:	f003 f9d1 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 800334e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	4816      	ldr	r0, [pc, #88]	; (80033bc <MX_GPIO_Init+0x1cc>)
 8003364:	f003 f9c4 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800337a:	2301      	movs	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	f107 0314 	add.w	r3, r7, #20
 8003382:	4619      	mov	r1, r3
 8003384:	480d      	ldr	r0, [pc, #52]	; (80033bc <MX_GPIO_Init+0x1cc>)
 8003386:	f003 f9b3 	bl	80066f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 800338a:	2304      	movs	r3, #4
 800338c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338e:	2301      	movs	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4619      	mov	r1, r3
 80033a0:	4807      	ldr	r0, [pc, #28]	; (80033c0 <MX_GPIO_Init+0x1d0>)
 80033a2:	f003 f9a5 	bl	80066f0 <HAL_GPIO_Init>

}
 80033a6:	bf00      	nop
 80033a8:	3728      	adds	r7, #40	; 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020800 	.word	0x40020800
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40020c00 	.word	0x40020c00

080033c4 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  #if USE_LED
  led_init();
 80033c8:	f7fd ffea 	bl	80013a0 <led_init>
  #endif
  flash_init();
 80033cc:	f7ff f824 	bl	8002418 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 80033d0:	f000 ffb0 	bl	8004334 <tim11_init>
  /* encoder_init */
  tim10_init();
 80033d4:	f000 ff10 	bl	80041f8 <tim10_init>
  /* tim7 */
  tim7_init();
 80033d8:	f001 f858 	bl	800448c <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 80033dc:	f000 ffc4 	bl	8004368 <tim6_init>
  /* imu のバイアス補正のための初期化 */
  if(rotary_read_playmode() == motor_free)
 80033e0:	f7fe f8d2 	bl	8001588 <rotary_read_playmode>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d101      	bne.n	80033ee <main_init+0x2a>
    imu_revision_init();
 80033ea:	f000 f93f 	bl	800366c <imu_revision_init>
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <running_start>:

void running_start()
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	af00      	add	r7, sp, #0
  HAL_Delay(2500);
 80033f6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80033fa:	f001 fd29 	bl	8004e50 <HAL_Delay>
  #if USE_LED
  led_start();
 80033fe:	f7fd ffe5 	bl	80013cc <led_start>
  #endif
  #if D_TIM7
  printf("main.c > running_start() > ");
  #endif
  tim7_start();
 8003402:	f001 f853 	bl	80044ac <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8003406:	f000 ff1d 	bl	8004244 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 800340a:	f000 ffb9 	bl	8004380 <tim6_start>
  /* imu のバイアス補正のための準備 */
  if(rotary_read_playmode() == motor_free)
 800340e:	f7fe f8bb 	bl	8001588 <rotary_read_playmode>
 8003412:	4603      	mov	r3, r0
 8003414:	2b04      	cmp	r3, #4
 8003416:	d101      	bne.n	800341c <running_start+0x2a>
    imu_revision_start();
 8003418:	f000 f930 	bl	800367c <imu_revision_start>
}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}

08003420 <running_stop>:

void running_stop()
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  #if USE_LED
  led_stop();
 8003424:	f7fd ffdd 	bl	80013e2 <led_stop>
  #endif
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8003428:	f000 ffb8 	bl	800439c <tim6_stop>
  /* tim7 */
  tim7_stop();
 800342c:	f001 f872 	bl	8004514 <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8003430:	f000 ff2a 	bl	8004288 <tim10_stop>
  /* imu バイアス補正のための終了 */
  if(rotary_read_playmode() == motor_free)
 8003434:	f7fe f8a8 	bl	8001588 <rotary_read_playmode>
 8003438:	4603      	mov	r3, r0
 800343a:	2b04      	cmp	r3, #4
 800343c:	d101      	bne.n	8003442 <running_stop+0x22>
    imu_revision_stop();
 800343e:	f000 f92d 	bl	800369c <imu_revision_stop>
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <main_print_while>:

void main_print_while()
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
	printf("////////////////////////////// WHILE //////////////////////////////\n\r");
 800344c:	4804      	ldr	r0, [pc, #16]	; (8003460 <main_print_while+0x18>)
 800344e:	f007 f985 	bl	800a75c <iprintf>
  rotary_print_playmode();
 8003452:	f7fe f907 	bl	8001664 <rotary_print_playmode>
	print_rotary_value();
 8003456:	f000 f8fb 	bl	8003650 <print_rotary_value>
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	0800e704 	.word	0x0800e704

08003464 <main_main>:

void main_main()
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  main_d_print();
 8003468:	f000 f805 	bl	8003476 <main_d_print>
	tim7_main();
	#endif
	#if D_TIM6_WHILE
	tim6_main();
	#endif
	HAL_Delay(1);
 800346c:	2001      	movs	r0, #1
 800346e:	f001 fcef 	bl	8004e50 <HAL_Delay>
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}

08003476 <main_d_print>:

void main_d_print()
{
 8003476:	b580      	push	{r7, lr}
 8003478:	af00      	add	r7, sp, #0
  revision_print();
 800347a:	f000 f915 	bl	80036a8 <revision_print>
  tim10_d_print();
 800347e:	f000 ff37 	bl	80042f0 <tim10_d_print>
  #endif
  #if D_TIM6
  printf("main.c > main_d_print > ");
  tim6_d_print();
  #endif
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}

08003486 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800348a:	b672      	cpsid	i
}
 800348c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800348e:	e7fe      	b.n	800348e <Error_Handler+0x8>

08003490 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003494:	2000      	movs	r0, #0
 8003496:	f000 f827 	bl	80034e8 <motor_enable>
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <motor_start>:

void motor_start()
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 80034a4:	2100      	movs	r1, #0
 80034a6:	4806      	ldr	r0, [pc, #24]	; (80034c0 <motor_start+0x20>)
 80034a8:	f004 ff8c 	bl	80083c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80034ac:	2104      	movs	r1, #4
 80034ae:	4804      	ldr	r0, [pc, #16]	; (80034c0 <motor_start+0x20>)
 80034b0:	f004 ff88 	bl	80083c4 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f000 f817 	bl	80034e8 <motor_enable>
#endif
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000464 	.word	0x20000464

080034c4 <motor_stop>:

void motor_stop()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
    motor_enable(0);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f000 f80d 	bl	80034e8 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80034ce:	2104      	movs	r1, #4
 80034d0:	4804      	ldr	r0, [pc, #16]	; (80034e4 <motor_stop+0x20>)
 80034d2:	f005 f83f 	bl	8008554 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80034d6:	2100      	movs	r1, #0
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <motor_stop+0x20>)
 80034da:	f005 f83b 	bl	8008554 <HAL_TIM_PWM_Stop>
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000464 	.word	0x20000464

080034e8 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <motor_enable+0x28>)
 8003502:	701a      	strb	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	2000c3cc 	.word	0x2000c3cc

08003514 <motor_read_enable>:

char motor_read_enable()
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
    return enable;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <motor_read_enable+0x14>)
 800351a:	781b      	ldrb	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	2000c3cc 	.word	0x2000c3cc

0800352c <motor_set>:

void motor_set(float motor_left_, float motor_right_)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	ed87 0a01 	vstr	s0, [r7, #4]
 8003536:	edc7 0a00 	vstr	s1, [r7]
    if(motor_left_ < 0)
 800353a:	edd7 7a01 	vldr	s15, [r7, #4]
 800353e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003546:	d50b      	bpl.n	8003560 <motor_set+0x34>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003548:	2200      	movs	r2, #0
 800354a:	2104      	movs	r1, #4
 800354c:	4831      	ldr	r0, [pc, #196]	; (8003614 <motor_set+0xe8>)
 800354e:	f003 fa83 	bl	8006a58 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8003552:	edd7 7a01 	vldr	s15, [r7, #4]
 8003556:	eef1 7a67 	vneg.f32	s15, s15
 800355a:	edc7 7a01 	vstr	s15, [r7, #4]
 800355e:	e004      	b.n	800356a <motor_set+0x3e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003560:	2201      	movs	r2, #1
 8003562:	2104      	movs	r1, #4
 8003564:	482b      	ldr	r0, [pc, #172]	; (8003614 <motor_set+0xe8>)
 8003566:	f003 fa77 	bl	8006a58 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 800356a:	edd7 7a00 	vldr	s15, [r7]
 800356e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003576:	d50c      	bpl.n	8003592 <motor_set+0x66>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003578:	2201      	movs	r2, #1
 800357a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800357e:	4826      	ldr	r0, [pc, #152]	; (8003618 <motor_set+0xec>)
 8003580:	f003 fa6a 	bl	8006a58 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8003584:	edd7 7a00 	vldr	s15, [r7]
 8003588:	eef1 7a67 	vneg.f32	s15, s15
 800358c:	edc7 7a00 	vstr	s15, [r7]
 8003590:	e005      	b.n	800359e <motor_set+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003592:	2200      	movs	r2, #0
 8003594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003598:	481f      	ldr	r0, [pc, #124]	; (8003618 <motor_set+0xec>)
 800359a:	f003 fa5d 	bl	8006a58 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 800359e:	edd7 7a01 	vldr	s15, [r7, #4]
 80035a2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800361c <motor_set+0xf0>
 80035a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	dd01      	ble.n	80035b4 <motor_set+0x88>
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <motor_set+0xf4>)
 80035b2:	e000      	b.n	80035b6 <motor_set+0x8a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	607b      	str	r3, [r7, #4]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 80035b8:	edd7 7a00 	vldr	s15, [r7]
 80035bc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800361c <motor_set+0xf0>
 80035c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	dd01      	ble.n	80035ce <motor_set+0xa2>
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <motor_set+0xf4>)
 80035cc:	e000      	b.n	80035d0 <motor_set+0xa4>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	603b      	str	r3, [r7, #0]

    if(!enable)
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <motor_set+0xf8>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <motor_set+0xba>
    {
        motor_left_ = 0;
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	607b      	str	r3, [r7, #4]
        motor_right_ = 0;
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <motor_set+0xfc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f2:	ee17 2a90 	vmov	r2, s15
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <motor_set+0xfc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	edd7 7a00 	vldr	s15, [r7]
 8003600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003604:	ee17 2a90 	vmov	r2, s15
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40020c00 	.word	0x40020c00
 8003618:	40020800 	.word	0x40020800
 800361c:	447a0000 	.word	0x447a0000
 8003620:	447a0000 	.word	0x447a0000
 8003624:	2000c3cc 	.word	0x2000c3cc
 8003628:	20000464 	.word	0x20000464

0800362c <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003634:	1d39      	adds	r1, r7, #4
 8003636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800363a:	2201      	movs	r2, #1
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <__io_putchar+0x20>)
 800363e:	f005 ff0a 	bl	8009456 <HAL_UART_Transmit>
	return ch;
 8003642:	687b      	ldr	r3, [r7, #4]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000710 	.word	0x20000710

08003650 <print_rotary_value>:

void print_rotary_value()
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8003654:	f7fd ffb0 	bl	80015b8 <rotary_read_value>
 8003658:	4603      	mov	r3, r0
 800365a:	4619      	mov	r1, r3
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <print_rotary_value+0x18>)
 800365e:	f007 f87d 	bl	800a75c <iprintf>
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	0800e74c 	.word	0x0800e74c

0800366c <imu_revision_init>:
unsigned int imu_revision_count;
float imu_revision_sum;
float imu_revision_average;

void imu_revision_init()
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
    //! course_init() されていることが前提で空関数
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <imu_revision_start>:

void imu_revision_start()
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
    imu_revision_count = 1;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <imu_revision_start+0x1c>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    course_start();
 8003686:	f7fe fbaf 	bl	8001de8 <course_start>
    HAL_Delay(5000);
 800368a:	f241 3088 	movw	r0, #5000	; 0x1388
 800368e:	f001 fbdf 	bl	8004e50 <HAL_Delay>
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2000c3d8 	.word	0x2000c3d8

0800369c <imu_revision_stop>:

void imu_revision_stop()
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
    course_stop();
 80036a0:	f7fe fbac 	bl	8001dfc <course_stop>
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <revision_print>:
        imu_revision_count = imu_revision_count + 1;
	}
}

void revision_print()
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
    #if IMU_REVISION
    imu_revision_print();
    #endif
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate, markerstate_volatile;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 80036c2:	2104      	movs	r1, #4
 80036c4:	4810      	ldr	r0, [pc, #64]	; (8003708 <sidesensor_read+0x50>)
 80036c6:	f003 f9af 	bl	8006a28 <HAL_GPIO_ReadPin>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	4413      	add	r3, r2
 80036dc:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 80036de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036e2:	4809      	ldr	r0, [pc, #36]	; (8003708 <sidesensor_read+0x50>)
 80036e4:	f003 f9a0 	bl	8006a28 <HAL_GPIO_ReadPin>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <sidesensor_read+0x3a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e000      	b.n	80036f4 <sidesensor_read+0x3c>
 80036f2:	2300      	movs	r3, #0
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	4413      	add	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]

    return subsens;
 80036fc:	79fb      	ldrb	r3, [r7, #7]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40020400 	.word	0x40020400

0800370c <sidesensor_start>:

void sidesensor_start()
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
    marker = 0;
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <sidesensor_start+0x34>)
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <sidesensor_start+0x38>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <sidesensor_start+0x3c>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <sidesensor_start+0x40>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
	markerstate = start;
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <sidesensor_start+0x44>)
 800372a:	2202      	movs	r2, #2
 800372c:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = none;
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <sidesensor_start+0x48>)
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000c3df 	.word	0x2000c3df
 8003744:	2000c3dc 	.word	0x2000c3dc
 8003748:	2000c3dd 	.word	0x2000c3dd
 800374c:	2000c3e2 	.word	0x2000c3e2
 8003750:	2000c3de 	.word	0x2000c3de
 8003754:	2000c3e0 	.word	0x2000c3e0

08003758 <sidesensor_stop>:

void sidesensor_stop()
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
	return markerstate;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <sidesensor_read_markerstate+0x14>)
 800376e:	781b      	ldrb	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000c3de 	.word	0x2000c3de

08003780 <sidesensor_right>:
{
	return markerstate_volatile;
}

void sidesensor_right()
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <sidesensor_right+0x44>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <sidesensor_right+0x1a>
    {
        // start
		markerstate_volatile = straight;
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <sidesensor_right+0x48>)
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
		markerstate = straight;
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <sidesensor_right+0x4c>)
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e009      	b.n	80037ae <sidesensor_right+0x2e>
    }
    else if(rightmarkercount == 2 - 1)
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <sidesensor_right+0x44>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <sidesensor_right+0x2e>
    {
        // stop
		markerstate_volatile = stop;
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <sidesensor_right+0x48>)
 80037a4:	2203      	movs	r2, #3
 80037a6:	701a      	strb	r2, [r3, #0]
		markerstate = stop;
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <sidesensor_right+0x4c>)
 80037aa:	2203      	movs	r2, #3
 80037ac:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <sidesensor_right+0x44>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <sidesensor_right+0x44>)
 80037b8:	701a      	strb	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	2000c3e2 	.word	0x2000c3e2
 80037c8:	2000c3e0 	.word	0x2000c3e0
 80037cc:	2000c3de 	.word	0x2000c3de

080037d0 <sidesensor_left>:

void sidesensor_left()
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <sidesensor_left+0x1c>)
 80037d6:	2204      	movs	r2, #4
 80037d8:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = curve;
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <sidesensor_left+0x20>)
 80037dc:	2204      	movs	r2, #4
 80037de:	701a      	strb	r2, [r3, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	2000c3de 	.word	0x2000c3de
 80037f0:	2000c3e0 	.word	0x2000c3e0

080037f4 <sidesensor_cross>:

void sidesensor_cross()
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <sidesensor_cross+0x1c>)
 80037fa:	2205      	movs	r2, #5
 80037fc:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = cross;
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <sidesensor_cross+0x20>)
 8003800:	2205      	movs	r2, #5
 8003802:	701a      	strb	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000c3de 	.word	0x2000c3de
 8003814:	2000c3e0 	.word	0x2000c3e0

08003818 <sidesensor_main>:
	markerstate = straight;
	markerstate_volatile = straight;
}

void sidesensor_main()
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 800381e:	f7ff ff4b 	bl	80036b8 <sidesensor_read>
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
	markerstate_volatile = none;
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <sidesensor_main+0xb0>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]

	if(subsens != subsensbuf)
 800382c:	4b27      	ldr	r3, [pc, #156]	; (80038cc <sidesensor_main+0xb4>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	79fa      	ldrb	r2, [r7, #7]
 8003832:	429a      	cmp	r2, r3
 8003834:	d044      	beq.n	80038c0 <sidesensor_main+0xa8>
	{
		subsensbuf = subsens;
 8003836:	4a25      	ldr	r2, [pc, #148]	; (80038cc <sidesensor_main+0xb4>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 800383c:	79fa      	ldrb	r2, [r7, #7]
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <sidesensor_main+0xb8>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <sidesensor_main+0xbc>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <sidesensor_main+0xbc>)
 8003854:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d12b      	bne.n	80038b4 <sidesensor_main+0x9c>
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <sidesensor_main+0xb8>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d027      	beq.n	80038b4 <sidesensor_main+0x9c>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <sidesensor_main+0xbc>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <sidesensor_main+0xbc>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	109b      	asrs	r3, r3, #2
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 800387c:	797b      	ldrb	r3, [r7, #5]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10e      	bne.n	80038a0 <sidesensor_main+0x88>
			{
				if (first == 0b01)
 8003882:	79bb      	ldrb	r3, [r7, #6]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d102      	bne.n	800388e <sidesensor_main+0x76>
				{
					// right -> start / stop
                    sidesensor_right();
 8003888:	f7ff ff7a 	bl	8003780 <sidesensor_right>
 800388c:	e00a      	b.n	80038a4 <sidesensor_main+0x8c>
				}
				else if (first == 0b10)
 800388e:	79bb      	ldrb	r3, [r7, #6]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d102      	bne.n	800389a <sidesensor_main+0x82>
				{
					// left -> curve
                    sidesensor_left();
 8003894:	f7ff ff9c 	bl	80037d0 <sidesensor_left>
 8003898:	e004      	b.n	80038a4 <sidesensor_main+0x8c>
				}
				else
				{
					// cross
                    sidesensor_cross();
 800389a:	f7ff ffab 	bl	80037f4 <sidesensor_cross>
 800389e:	e001      	b.n	80038a4 <sidesensor_main+0x8c>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 80038a0:	f7ff ffa8 	bl	80037f4 <sidesensor_cross>
			}
			sidedeltacount = 0;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <sidesensor_main+0xb8>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
			marker = 0;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <sidesensor_main+0xbc>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
		{
 80038b0:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 80038b2:	e005      	b.n	80038c0 <sidesensor_main+0xa8>
			sidedeltacount++;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <sidesensor_main+0xb8>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <sidesensor_main+0xb8>)
 80038be:	701a      	strb	r2, [r3, #0]
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	2000c3e0 	.word	0x2000c3e0
 80038cc:	2000c3dc 	.word	0x2000c3dc
 80038d0:	2000c3dd 	.word	0x2000c3dd
 80038d4:	2000c3df 	.word	0x2000c3df

080038d8 <slow_start>:
{
    slow_enable = slow_enable_;
}

void slow_start(PID *_pid)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
    /* slow_start */
    slowinglength = 0;
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <slow_start+0x48>)
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
    base_pointer = _pid;
 80038e8:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <slow_start+0x4c>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
    slow_pid.target = 0;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <slow_start+0x50>)
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
    slow_pid.kp = 0;
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <slow_start+0x50>)
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	605a      	str	r2, [r3, #4]
    slow_pid.ki = 0;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <slow_start+0x50>)
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
    slow_pid.kd = 0;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <slow_start+0x50>)
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
    slow_enable = 1;
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <slow_start+0x54>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	2000c400 	.word	0x2000c400
 8003924:	2000c3fc 	.word	0x2000c3fc
 8003928:	2000c3e8 	.word	0x2000c3e8
 800392c:	2000c3e4 	.word	0x2000c3e4

08003930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_MspInit+0x54>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a11      	ldr	r2, [pc, #68]	; (8003984 <HAL_MspInit+0x54>)
 8003940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003944:	6453      	str	r3, [r2, #68]	; 0x44
 8003946:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_MspInit+0x54>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	607b      	str	r3, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_MspInit+0x54>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <HAL_MspInit+0x54>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_MspInit+0x54>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	210f      	movs	r1, #15
 8003972:	f06f 0003 	mvn.w	r0, #3
 8003976:	f001 ffcc 	bl	8005912 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a49      	ldr	r2, [pc, #292]	; (8003acc <HAL_ADC_MspInit+0x144>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	f040 808c 	bne.w	8003ac4 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	4a46      	ldr	r2, [pc, #280]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6453      	str	r3, [r2, #68]	; 0x44
 80039bc:	4b44      	ldr	r3, [pc, #272]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4a3f      	ldr	r2, [pc, #252]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6313      	str	r3, [r2, #48]	; 0x30
 80039d8:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	4a38      	ldr	r2, [pc, #224]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6313      	str	r3, [r2, #48]	; 0x30
 80039f4:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_ADC_MspInit+0x148>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a1c:	233f      	movs	r3, #63	; 0x3f
 8003a1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a20:	2303      	movs	r3, #3
 8003a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4829      	ldr	r0, [pc, #164]	; (8003ad4 <HAL_ADC_MspInit+0x14c>)
 8003a30:	f002 fe5e 	bl	80066f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a34:	23ff      	movs	r3, #255	; 0xff
 8003a36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a40:	f107 031c 	add.w	r3, r7, #28
 8003a44:	4619      	mov	r1, r3
 8003a46:	4824      	ldr	r0, [pc, #144]	; (8003ad8 <HAL_ADC_MspInit+0x150>)
 8003a48:	f002 fe52 	bl	80066f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a50:	2303      	movs	r3, #3
 8003a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a58:	f107 031c 	add.w	r3, r7, #28
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	481f      	ldr	r0, [pc, #124]	; (8003adc <HAL_ADC_MspInit+0x154>)
 8003a60:	f002 fe46 	bl	80066f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a66:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_ADC_MspInit+0x15c>)
 8003a68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a76:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a7c:	4b18      	ldr	r3, [pc, #96]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a84:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a92:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a9c:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003aa8:	480d      	ldr	r0, [pc, #52]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003aaa:	f001 ff69 	bl	8005980 <HAL_DMA_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003ab4:	f7ff fce7 	bl	8003486 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <HAL_ADC_MspInit+0x158>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ac4:	bf00      	nop
 8003ac6:	3730      	adds	r7, #48	; 0x30
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40012000 	.word	0x40012000
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	20000620 	.word	0x20000620
 8003ae4:	40026410 	.word	0x40026410

08003ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_I2C_MspInit+0x84>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d12c      	bne.n	8003b64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b2c:	2312      	movs	r3, #18
 8003b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b30:	2301      	movs	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b34:	2303      	movs	r3, #3
 8003b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4619      	mov	r1, r3
 8003b42:	480c      	ldr	r0, [pc, #48]	; (8003b74 <HAL_I2C_MspInit+0x8c>)
 8003b44:	f002 fdd4 	bl	80066f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b56:	6413      	str	r3, [r2, #64]	; 0x40
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b64:	bf00      	nop
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40005400 	.word	0x40005400
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40020400 	.word	0x40020400

08003b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <HAL_SPI_MspInit+0x84>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d12c      	bne.n	8003bf4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <HAL_SPI_MspInit+0x88>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a17      	ldr	r2, [pc, #92]	; (8003c00 <HAL_SPI_MspInit+0x88>)
 8003ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_SPI_MspInit+0x88>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_SPI_MspInit+0x88>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <HAL_SPI_MspInit+0x88>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <HAL_SPI_MspInit+0x88>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003bd2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003be4:	2305      	movs	r3, #5
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <HAL_SPI_MspInit+0x8c>)
 8003bf0:	f002 fd7e 	bl	80066f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003bf4:	bf00      	nop
 8003bf6:	3728      	adds	r7, #40	; 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40003800 	.word	0x40003800
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40020400 	.word	0x40020400

08003c08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	; 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	f107 031c 	add.w	r3, r7, #28
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a3a      	ldr	r2, [pc, #232]	; (8003d10 <HAL_TIM_Encoder_MspInit+0x108>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d13d      	bne.n	8003ca6 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	4a38      	ldr	r2, [pc, #224]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	4a31      	ldr	r2, [pc, #196]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6313      	str	r3, [r2, #48]	; 0x30
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8003c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 031c 	add.w	r3, r7, #28
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4826      	ldr	r0, [pc, #152]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x110>)
 8003c80:	f002 fd36 	bl	80066f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c84:	2200      	movs	r2, #0
 8003c86:	2100      	movs	r1, #0
 8003c88:	2019      	movs	r0, #25
 8003c8a:	f001 fe42 	bl	8005912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c8e:	2019      	movs	r0, #25
 8003c90:	f001 fe5b 	bl	800594a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	2100      	movs	r1, #0
 8003c98:	201a      	movs	r0, #26
 8003c9a:	f001 fe3a 	bl	8005912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003c9e:	201a      	movs	r0, #26
 8003ca0:	f001 fe53 	bl	800594a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ca4:	e030      	b.n	8003d08 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_TIM_Encoder_MspInit+0x114>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d12b      	bne.n	8003d08 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	6313      	str	r3, [r2, #48]	; 0x30
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003ce8:	2330      	movs	r3, #48	; 0x30
 8003cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfc:	f107 031c 	add.w	r3, r7, #28
 8003d00:	4619      	mov	r1, r3
 8003d02:	4807      	ldr	r0, [pc, #28]	; (8003d20 <HAL_TIM_Encoder_MspInit+0x118>)
 8003d04:	f002 fcf4 	bl	80066f0 <HAL_GPIO_Init>
}
 8003d08:	bf00      	nop
 8003d0a:	3730      	adds	r7, #48	; 0x30
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40020400 	.word	0x40020400

08003d24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10d      	bne.n	8003d52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_TIM_PWM_MspInit+0x40>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_TIM_PWM_MspInit+0x40>)
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_TIM_PWM_MspInit+0x40>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40023800 	.word	0x40023800

08003d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a3e      	ldr	r2, [pc, #248]	; (8003e70 <HAL_TIM_Base_MspInit+0x108>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d116      	bne.n	8003da8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a3c      	ldr	r2, [pc, #240]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003d84:	f043 0310 	orr.w	r3, r3, #16
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b3a      	ldr	r3, [pc, #232]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2036      	movs	r0, #54	; 0x36
 8003d9c:	f001 fdb9 	bl	8005912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003da0:	2036      	movs	r0, #54	; 0x36
 8003da2:	f001 fdd2 	bl	800594a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003da6:	e05e      	b.n	8003e66 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a32      	ldr	r2, [pc, #200]	; (8003e78 <HAL_TIM_Base_MspInit+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	4b2f      	ldr	r3, [pc, #188]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a2e      	ldr	r2, [pc, #184]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003dbc:	f043 0320 	orr.w	r3, r3, #32
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
}
 8003dce:	e04a      	b.n	8003e66 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_TIM_Base_MspInit+0x114>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d116      	bne.n	8003e08 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2100      	movs	r1, #0
 8003dfa:	2019      	movs	r0, #25
 8003dfc:	f001 fd89 	bl	8005912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003e00:	2019      	movs	r0, #25
 8003e02:	f001 fda2 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 8003e06:	e02e      	b.n	8003e66 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_TIM_Base_MspInit+0x118>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d116      	bne.n	8003e40 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e20:	6453      	str	r3, [r2, #68]	; 0x44
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	201a      	movs	r0, #26
 8003e34:	f001 fd6d 	bl	8005912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003e38:	201a      	movs	r0, #26
 8003e3a:	f001 fd86 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 8003e3e:	e012      	b.n	8003e66 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM14)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_TIM_Base_MspInit+0x11c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10d      	bne.n	8003e66 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e58:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_TIM_Base_MspInit+0x10c>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	bf00      	nop
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40001000 	.word	0x40001000
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40001400 	.word	0x40001400
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800
 8003e84:	40002000 	.word	0x40002000

08003e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e90:	f107 030c 	add.w	r3, r7, #12
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <HAL_TIM_MspPostInit+0x68>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d11d      	bne.n	8003ee6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <HAL_TIM_MspPostInit+0x6c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <HAL_TIM_MspPostInit+0x6c>)
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <HAL_TIM_MspPostInit+0x6c>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8003ec6:	23c0      	movs	r3, #192	; 0xc0
 8003ec8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eda:	f107 030c 	add.w	r3, r7, #12
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <HAL_TIM_MspPostInit+0x70>)
 8003ee2:	f002 fc05 	bl	80066f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003ee6:	bf00      	nop
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40020400 	.word	0x40020400

08003efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 0314 	add.w	r3, r7, #20
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <HAL_UART_MspInit+0x84>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d12b      	bne.n	8003f76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <HAL_UART_MspInit+0x88>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_UART_MspInit+0x88>)
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_UART_MspInit+0x88>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_UART_MspInit+0x88>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <HAL_UART_MspInit+0x88>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_UART_MspInit+0x88>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f56:	23c0      	movs	r3, #192	; 0xc0
 8003f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f62:	2303      	movs	r3, #3
 8003f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f66:	2308      	movs	r3, #8
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4805      	ldr	r0, [pc, #20]	; (8003f88 <HAL_UART_MspInit+0x8c>)
 8003f72:	f002 fbbd 	bl	80066f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f76:	bf00      	nop
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40011400 	.word	0x40011400
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40020800 	.word	0x40020800

08003f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f90:	e7fe      	b.n	8003f90 <NMI_Handler+0x4>

08003f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f96:	e7fe      	b.n	8003f96 <HardFault_Handler+0x4>

08003f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f9c:	e7fe      	b.n	8003f9c <MemManage_Handler+0x4>

08003f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa2:	e7fe      	b.n	8003fa2 <BusFault_Handler+0x4>

08003fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <UsageFault_Handler+0x4>

08003faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fd8:	f000 ff1a 	bl	8004e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fe4:	4803      	ldr	r0, [pc, #12]	; (8003ff4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003fe6:	f004 fcf0 	bl	80089ca <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003fea:	4803      	ldr	r0, [pc, #12]	; (8003ff8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003fec:	f004 fced 	bl	80089ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	200006c8 	.word	0x200006c8
 8003ff8:	20000500 	.word	0x20000500

08003ffc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004000:	4803      	ldr	r0, [pc, #12]	; (8004010 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004002:	f004 fce2 	bl	80089ca <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004006:	4803      	ldr	r0, [pc, #12]	; (8004014 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004008:	f004 fcdf 	bl	80089ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200006c8 	.word	0x200006c8
 8004014:	200005d8 	.word	0x200005d8

08004018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800401c:	4802      	ldr	r0, [pc, #8]	; (8004028 <TIM6_DAC_IRQHandler+0x10>)
 800401e:	f004 fcd4 	bl	80089ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000680 	.word	0x20000680

0800402c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <DMA2_Stream0_IRQHandler+0x10>)
 8004032:	f001 fe1b 	bl	8005c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000620 	.word	0x20000620

08004040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	return 1;
 8004044:	2301      	movs	r3, #1
}
 8004046:	4618      	mov	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <_kill>:

int _kill(int pid, int sig)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800405a:	f005 fcc5 	bl	80099e8 <__errno>
 800405e:	4603      	mov	r3, r0
 8004060:	2216      	movs	r2, #22
 8004062:	601a      	str	r2, [r3, #0]
	return -1;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_exit>:

void _exit (int status)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004078:	f04f 31ff 	mov.w	r1, #4294967295
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff ffe7 	bl	8004050 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004082:	e7fe      	b.n	8004082 <_exit+0x12>

08004084 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	e00a      	b.n	80040ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004096:	f3af 8000 	nop.w
 800409a:	4601      	mov	r1, r0
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	60ba      	str	r2, [r7, #8]
 80040a2:	b2ca      	uxtb	r2, r1
 80040a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	3301      	adds	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	dbf0      	blt.n	8004096 <_read+0x12>
	}

return len;
 80040b4:	687b      	ldr	r3, [r7, #4]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e009      	b.n	80040e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	60ba      	str	r2, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff faa7 	bl	800362c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	dbf1      	blt.n	80040d0 <_write+0x12>
	}
	return len;
 80040ec:	687b      	ldr	r3, [r7, #4]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_close>:

int _close(int file)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
	return -1;
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800411e:	605a      	str	r2, [r3, #4]
	return 0;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <_isatty>:

int _isatty(int file)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
	return 1;
 8004136:	2301      	movs	r3, #1
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
	return 0;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <_sbrk+0x5c>)
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <_sbrk+0x60>)
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <_sbrk+0x64>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <_sbrk+0x64>)
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <_sbrk+0x68>)
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <_sbrk+0x64>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d207      	bcs.n	80041a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004190:	f005 fc2a 	bl	80099e8 <__errno>
 8004194:	4603      	mov	r3, r0
 8004196:	220c      	movs	r2, #12
 8004198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	e009      	b.n	80041b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <_sbrk+0x64>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <_sbrk+0x64>)
 80041b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20020000 	.word	0x20020000
 80041c0:	00000400 	.word	0x00000400
 80041c4:	20000200 	.word	0x20000200
 80041c8:	2000c4a8 	.word	0x2000c4a8

080041cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <SystemInit+0x28>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <SystemInit+0x28>)
 80041d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <SystemInit+0x28>)
 80041e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041e6:	609a      	str	r2, [r3, #8]
#endif
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <tim10_init>:
unsigned int samplingtime_ms;
float samplingtime_s;

/* only use in main.c */
void tim10_init()
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
	samplingtime_s = TIM10_TIME_MS / (float) 1000;
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <tim10_init+0x3c>)
 80041fe:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <tim10_init+0x40>)
 8004200:	601a      	str	r2, [r3, #0]
	samplingtime_ms = TIM10_TIME_MS;
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <tim10_init+0x44>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]
	length_init(samplingtime_ms);
 8004208:	4b0c      	ldr	r3, [pc, #48]	; (800423c <tim10_init+0x44>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe f984 	bl	800251c <length_init>
	course_init(samplingtime_ms);
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <tim10_init+0x44>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd fdd0 	bl	8001dc0 <course_init>
	velotrace_init(1);
 8004220:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004224:	f000 fbce 	bl	80049c4 <velotrace_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8004228:	4805      	ldr	r0, [pc, #20]	; (8004240 <tim10_init+0x48>)
 800422a:	f004 f84d 	bl	80082c8 <HAL_TIM_Base_Stop_IT>
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000c404 	.word	0x2000c404
 8004238:	3a83126f 	.word	0x3a83126f
 800423c:	2000c414 	.word	0x2000c414
 8004240:	20000500 	.word	0x20000500

08004244 <tim10_start>:

void tim10_start()
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
	tim10_left = 0;
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <tim10_start+0x38>)
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
	tim10_right = 0;
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <tim10_start+0x3c>)
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
	course_start();
 8004258:	f7fd fdc6 	bl	8001de8 <course_start>
	length_start();
 800425c:	f7fe f96e 	bl	800253c <length_start>
	velotrace_start();
 8004260:	f000 fbc0 	bl	80049e4 <velotrace_start>
	slow_start(velotrace_read_values());
 8004264:	f000 fccc 	bl	8004c00 <velotrace_read_values>
 8004268:	4603      	mov	r3, r0
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fb34 	bl	80038d8 <slow_start>
	HAL_TIM_Base_Start_IT(&htim10);
 8004270:	4804      	ldr	r0, [pc, #16]	; (8004284 <tim10_start+0x40>)
 8004272:	f003 ffb9 	bl	80081e8 <HAL_TIM_Base_Start_IT>
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000c40c 	.word	0x2000c40c
 8004280:	2000c418 	.word	0x2000c418
 8004284:	20000500 	.word	0x20000500

08004288 <tim10_stop>:

void tim10_stop()
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 800428c:	4805      	ldr	r0, [pc, #20]	; (80042a4 <tim10_stop+0x1c>)
 800428e:	f004 f81b 	bl	80082c8 <HAL_TIM_Base_Stop_IT>
	velotrace_stop();
 8004292:	f000 fbe7 	bl	8004a64 <velotrace_stop>
	length_stop();
 8004296:	f7fe f96f 	bl	8002578 <length_stop>
	course_stop();
 800429a:	f7fd fdaf 	bl	8001dfc <course_stop>
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000500 	.word	0x20000500

080042a8 <tim10_main>:
	length_fin();
	HAL_TIM_Base_Stop_IT(&htim10);
}

void tim10_main()
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
	//! 角度をアップデートし続ける
	course_update_section_degree();
 80042ac:	f7fd fdb8 	bl	8001e20 <course_update_section_degree>
	//! 長さをアップデートし続ける
	length_update();
 80042b0:	f7fe f9b0 	bl	8002614 <length_update>
	//! 速度制御の指令値をアップデートし続ける
	tim10_update_length();
 80042b4:	f000 f802 	bl	80042bc <tim10_update_length>
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}

080042bc <tim10_update_length>:

//! tim10_main でのみ呼び出されるべき関数
//! 速度制御の指令値を更新する
void tim10_update_length()
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
		slow_main();
		velotrace_set_values(slow_read_gain_values());
	}
	#endif

	tim10_left  = velotrace_solve(velocity_read());
 80042c0:	f7fe f98e 	bl	80025e0 <velocity_read>
 80042c4:	eef0 7a40 	vmov.f32	s15, s0
 80042c8:	eeb0 0a67 	vmov.f32	s0, s15
 80042cc:	f000 fcc6 	bl	8004c5c <velotrace_solve>
 80042d0:	eef0 7a40 	vmov.f32	s15, s0
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <tim10_update_length+0x2c>)
 80042d6:	edc3 7a00 	vstr	s15, [r3]
	tim10_right = tim10_left;
 80042da:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <tim10_update_length+0x2c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a03      	ldr	r2, [pc, #12]	; (80042ec <tim10_update_length+0x30>)
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2000c40c 	.word	0x2000c40c
 80042ec:	2000c418 	.word	0x2000c418

080042f0 <tim10_d_print>:
		course_state_function();
	}
 */

void tim10_d_print()
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	course_d_print();
 80042f4:	f7fd feb0 	bl	8002058 <course_d_print>
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}

080042fc <tim10_read_left>:

float tim10_read_left()
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
	return tim10_left;
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <tim10_read_left+0x18>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	ee07 3a90 	vmov	s15, r3
}
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	2000c40c 	.word	0x2000c40c

08004318 <tim10_read_right>:

float tim10_read_right()
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
	return tim10_right;
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <tim10_read_right+0x18>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	ee07 3a90 	vmov	s15, r3
}
 8004324:	eeb0 0a67 	vmov.f32	s0, s15
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	2000c418 	.word	0x2000c418

08004334 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
    switch_init();
 8004338:	f7fd fa20 	bl	800177c <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 800433c:	4803      	ldr	r0, [pc, #12]	; (800434c <tim11_init+0x18>)
 800433e:	f003 ff53 	bl	80081e8 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8004342:	f7fd f90d 	bl	8001560 <rotary_init>
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200005d8 	.word	0x200005d8

08004350 <tim11_main>:

void tim11_main()
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
    //! 1ms
    time_update_ms(1);
 8004354:	2001      	movs	r0, #1
 8004356:	f000 f9a1 	bl	800469c <time_update_ms>
    switch_enter();
 800435a:	f7fd fa5e 	bl	800181a <switch_enter>
    rotary_set_value();
 800435e:	f7fd f91f 	bl	80015a0 <rotary_set_value>
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <tim6_init>:
#endif

SideSensorState tim6_markerstate_before;

void tim6_init()
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
    motor_init();
 800436c:	f7ff f890 	bl	8003490 <motor_init>
    // sidesensor_init();
    HAL_TIM_Base_Stop_IT(&htim6);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <tim6_init+0x14>)
 8004372:	f003 ffa9 	bl	80082c8 <HAL_TIM_Base_Stop_IT>
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000680 	.word	0x20000680

08004380 <tim6_start>:

void tim6_start()
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
    #if D_TIM6
    leftmotor = 0;
    rightmotor = 0;
    #endif
    sidesensor_start();
 8004384:	f7ff f9c2 	bl	800370c <sidesensor_start>
    motor_start();
 8004388:	f7ff f88a 	bl	80034a0 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 800438c:	4802      	ldr	r0, [pc, #8]	; (8004398 <tim6_start+0x18>)
 800438e:	f003 ff2b 	bl	80081e8 <HAL_TIM_Base_Start_IT>
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000680 	.word	0x20000680

0800439c <tim6_stop>:

void tim6_stop()
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
    motor_stop();
 80043a0:	f7ff f890 	bl	80034c4 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 80043a4:	4804      	ldr	r0, [pc, #16]	; (80043b8 <tim6_stop+0x1c>)
 80043a6:	f003 ff8f 	bl	80082c8 <HAL_TIM_Base_Stop_IT>
    sidesensor_stop();
 80043aa:	f7ff f9d5 	bl	8003758 <sidesensor_stop>
    course_stop();
 80043ae:	f7fd fd25 	bl	8001dfc <course_stop>
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000680 	.word	0x20000680

080043bc <tim6_main>:

void tim6_main()
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	ed2d 8b02 	vpush	{d8}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
#if LEFT_MARKER_RADIUS
    SideSensorState markerstate_volatile;
#endif
    PlayMode playmode;

    playmode = rotary_read_playmode();
 80043c6:	f7fd f8df 	bl	8001588 <rotary_read_playmode>
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]

    //! コース状態の把握
    //! ここ以降 sidesensor_read_markerstate() / sidesensor_read_markerstate_volatile() で読みだせる
    sidesensor_main();
 80043ce:	f7ff fa23 	bl	8003818 <sidesensor_main>
    //! 格納されるのは直前のマーカの状態であり、区間中はリセットされないことに注意すべし！
    markerstate = sidesensor_read_markerstate();
 80043d2:	f7ff f9c9 	bl	8003768 <sidesensor_read_markerstate>
 80043d6:	4603      	mov	r3, r0
 80043d8:	71bb      	strb	r3, [r7, #6]
#if LEFT_MARKER_RADIUS
    //! 格納されるのは現在マーカを読んだか読んでないか、次に sidesensor_main() が来た時に変化することに注意
    markerstate_volatile = sidesensor_read_markerstate_volatile();
#endif

    if(motor_read_enable() && playmode != motor_free)
 80043da:	f7ff f89b 	bl	8003514 <motor_read_enable>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02b      	beq.n	800443c <tim6_main+0x80>
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d028      	beq.n	800443c <tim6_main+0x80>
                rightmotor  = tim10_read_right() + tim7_read_right();
                break;
        }
        #else
        #if TRACER_TUNING
        leftmotor  =  tim7_read_left();
 80043ea:	f000 f93b 	bl	8004664 <tim7_read_left>
 80043ee:	ed87 0a03 	vstr	s0, [r7, #12]
        rightmotor = tim7_read_right();
 80043f2:	f000 f945 	bl	8004680 <tim7_read_right>
 80043f6:	ed87 0a02 	vstr	s0, [r7, #8]
        #endif
        #if VELOTRACE_TUNING
        leftmotor  =  tim10_read_left();
 80043fa:	f7ff ff7f 	bl	80042fc <tim10_read_left>
 80043fe:	ed87 0a03 	vstr	s0, [r7, #12]
        rightmotor = tim10_read_right();
 8004402:	f7ff ff89 	bl	8004318 <tim10_read_right>
 8004406:	ed87 0a02 	vstr	s0, [r7, #8]
        #endif
        #if VELOTRACE_TUNING && TRACER_TUNING
        leftmotor  =  tim10_read_left() +  tim7_read_left();
 800440a:	f7ff ff77 	bl	80042fc <tim10_read_left>
 800440e:	eeb0 8a40 	vmov.f32	s16, s0
 8004412:	f000 f927 	bl	8004664 <tim7_read_left>
 8004416:	eef0 7a40 	vmov.f32	s15, s0
 800441a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800441e:	edc7 7a03 	vstr	s15, [r7, #12]
        rightmotor = tim10_read_right() + tim7_read_right();
 8004422:	f7ff ff79 	bl	8004318 <tim10_read_right>
 8004426:	eeb0 8a40 	vmov.f32	s16, s0
 800442a:	f000 f929 	bl	8004680 <tim7_read_right>
 800442e:	eef0 7a40 	vmov.f32	s15, s0
 8004432:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004436:	edc7 7a02 	vstr	s15, [r7, #8]
 800443a:	e005      	b.n	8004448 <tim6_main+0x8c>
        #endif
		#endif	/* !(TRACER_TUNING || VELOTRACE_TUNING) */
    }
    else
    {
        leftmotor = 0;
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
        rightmotor = 0;
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]
    {
        course_state_function();
    }
#else
    //! 距離が COURSE_SAMPLING_LENGTH になっていたら course_state_function() を実行する関数
    fixed_section_main();
 8004448:	f7fd ff56 	bl	80022f8 <fixed_section_main>
#endif

    switch(markerstate)
 800444c:	79bb      	ldrb	r3, [r7, #6]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d10a      	bne.n	8004468 <tim6_main+0xac>
    {
        case stop:
            switch_reset_enter();
 8004452:	f7fd f987 	bl	8001764 <switch_reset_enter>
            tim6_stop();
 8004456:	f7ff ffa1 	bl	800439c <tim6_stop>
            motor_set(leftmotor, rightmotor);
 800445a:	edd7 0a02 	vldr	s1, [r7, #8]
 800445e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004462:	f7ff f863 	bl	800352c <motor_set>
            break;
 8004466:	e006      	b.n	8004476 <tim6_main+0xba>
        default:
            motor_set(leftmotor, rightmotor);
 8004468:	edd7 0a02 	vldr	s1, [r7, #8]
 800446c:	ed97 0a03 	vldr	s0, [r7, #12]
 8004470:	f7ff f85c 	bl	800352c <motor_set>
            break;
 8004474:	bf00      	nop
    }

    tim6_markerstate_before = markerstate;
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <tim6_main+0xcc>)
 8004478:	79bb      	ldrb	r3, [r7, #6]
 800447a:	7013      	strb	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	ecbd 8b02 	vpop	{d8}
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000c41c 	.word	0x2000c41c

0800448c <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
    #endif
    analog_init();
 8004490:	f7fd fb6e 	bl	8001b70 <analog_init>
    tracer_init(1);
 8004494:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004498:	f000 f968 	bl	800476c <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <tim7_init+0x1c>)
 800449e:	f003 ff13 	bl	80082c8 <HAL_TIM_Base_Stop_IT>
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000079c 	.word	0x2000079c

080044ac <tim7_start>:

void tim7_start()
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
    #endif
    tim7_set_emergency(0);
 80044b0:	2000      	movs	r0, #0
 80044b2:	f000 f8c7 	bl	8004644 <tim7_set_emergency>
    tim7_left = 0;
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <tim7_start+0x54>)
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
    tim7_right = 0;
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <tim7_start+0x58>)
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 80044c6:	4910      	ldr	r1, [pc, #64]	; (8004508 <tim7_start+0x5c>)
 80044c8:	4810      	ldr	r0, [pc, #64]	; (800450c <tim7_start+0x60>)
 80044ca:	f7fd fab9 	bl	8001a40 <analog_set_from_flash>
    if(rotary_read_playmode() == search)
 80044ce:	f7fd f85b 	bl	8001588 <rotary_read_playmode>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d103      	bne.n	80044e0 <tim7_start+0x34>
    {
        analog_set_analogmode(analogmode_short);
 80044d8:	200c      	movs	r0, #12
 80044da:	f7fd faed 	bl	8001ab8 <analog_set_analogmode>
 80044de:	e002      	b.n	80044e6 <tim7_start+0x3a>
    }
    else
    {
        analog_set_analogmode(analogmode_all);
 80044e0:	2010      	movs	r0, #16
 80044e2:	f7fd fae9 	bl	8001ab8 <analog_set_analogmode>
    }

    /* 本番直前なので無条件に analogmode_short にする */
    analog_set_analogmode(analogmode_short);
 80044e6:	200c      	movs	r0, #12
 80044e8:	f7fd fae6 	bl	8001ab8 <analog_set_analogmode>

    analog_start();
 80044ec:	f7fd fb52 	bl	8001b94 <analog_start>
    tracer_start();
 80044f0:	f000 f918 	bl	8004724 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 80044f4:	4806      	ldr	r0, [pc, #24]	; (8004510 <tim7_start+0x64>)
 80044f6:	f003 fe77 	bl	80081e8 <HAL_TIM_Base_Start_IT>
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2000c428 	.word	0x2000c428
 8004504:	2000c420 	.word	0x2000c420
 8004508:	20000812 	.word	0x20000812
 800450c:	200007f2 	.word	0x200007f2
 8004510:	2000079c 	.word	0x2000079c

08004514 <tim7_stop>:

void tim7_stop()
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 8004518:	4804      	ldr	r0, [pc, #16]	; (800452c <tim7_stop+0x18>)
 800451a:	f003 fed5 	bl	80082c8 <HAL_TIM_Base_Stop_IT>
    tracer_stop();
 800451e:	f000 f91d 	bl	800475c <tracer_stop>
    analog_stop();
 8004522:	f7fd fb3d 	bl	8001ba0 <analog_stop>
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	2000079c 	.word	0x2000079c

08004530 <tim7_main>:

void tim7_main()
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 8004536:	f000 f819 	bl	800456c <tim7_read_direction>
 800453a:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("analogl = %5d, analogr = %5d, direction = %5d\r\n", analogl, analogr, direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f9e5 	bl	800490c <tracer_solve>
 8004542:	eef0 7a40 	vmov.f32	s15, s0
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <tim7_main+0x34>)
 8004548:	edc3 7a00 	vstr	s15, [r3]
    tim7_right  = - tim7_left;
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <tim7_main+0x34>)
 800454e:	edd3 7a00 	vldr	s15, [r3]
 8004552:	eef1 7a67 	vneg.f32	s15, s15
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <tim7_main+0x38>)
 8004558:	edc3 7a00 	vstr	s15, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	2000c428 	.word	0x2000c428
 8004568:	2000c420 	.word	0x2000c420

0800456c <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	80fb      	strh	r3, [r7, #6]
    analogr = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	80bb      	strh	r3, [r7, #4]

    switch(analog_read_analogmode())
 800457a:	f7fd faad 	bl	8001ad8 <analog_read_analogmode>
 800457e:	4603      	mov	r3, r0
 8004580:	2b10      	cmp	r3, #16
 8004582:	d834      	bhi.n	80045ee <tim7_read_direction+0x82>
 8004584:	a201      	add	r2, pc, #4	; (adr r2, 800458c <tim7_read_direction+0x20>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	080045ef 	.word	0x080045ef
 8004590:	080045ef 	.word	0x080045ef
 8004594:	080045ef 	.word	0x080045ef
 8004598:	080045ef 	.word	0x080045ef
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045ef 	.word	0x080045ef
 80045a4:	080045ef 	.word	0x080045ef
 80045a8:	080045ef 	.word	0x080045ef
 80045ac:	080045ef 	.word	0x080045ef
 80045b0:	080045ef 	.word	0x080045ef
 80045b4:	080045ef 	.word	0x080045ef
 80045b8:	080045ef 	.word	0x080045ef
 80045bc:	080045d1 	.word	0x080045d1
 80045c0:	080045ef 	.word	0x080045ef
 80045c4:	080045ef 	.word	0x080045ef
 80045c8:	080045ef 	.word	0x080045ef
 80045cc:	080045e5 	.word	0x080045e5
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 80045d0:	230c      	movs	r3, #12
 80045d2:	70fb      	strb	r3, [r7, #3]
            i_start = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	70bb      	strb	r3, [r7, #2]
            break;
 80045d8:	e00a      	b.n	80045f0 <tim7_read_direction+0x84>
        case analogmode_long:
            i_count = 4;
 80045da:	2304      	movs	r3, #4
 80045dc:	70fb      	strb	r3, [r7, #3]
            i_start = 12;
 80045de:	230c      	movs	r3, #12
 80045e0:	70bb      	strb	r3, [r7, #2]
            break;
 80045e2:	e005      	b.n	80045f0 <tim7_read_direction+0x84>
        case analogmode_all:
            i_count = 16;
 80045e4:	2310      	movs	r3, #16
 80045e6:	70fb      	strb	r3, [r7, #3]
            i_start = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	70bb      	strb	r3, [r7, #2]
            break;
 80045ec:	e000      	b.n	80045f0 <tim7_read_direction+0x84>
        default:
            /* unknown analogmode ... x_x */
            break;
 80045ee:	bf00      	nop
    }

    for(unsigned char i = i_start; i < i_count; i++)
 80045f0:	78bb      	ldrb	r3, [r7, #2]
 80045f2:	707b      	strb	r3, [r7, #1]
 80045f4:	e01b      	b.n	800462e <tim7_read_direction+0xc2>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 80045f6:	787b      	ldrb	r3, [r7, #1]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <tim7_read_direction+0xaa>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 8004602:	787b      	ldrb	r3, [r7, #1]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fd faf3 	bl	8001bf0 <analog_sensor_get>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	4413      	add	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
 8004614:	e008      	b.n	8004628 <tim7_read_direction+0xbc>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 8004616:	787b      	ldrb	r3, [r7, #1]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fd fae9 	bl	8001bf0 <analog_sensor_get>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	88bb      	ldrh	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	80bb      	strh	r3, [r7, #4]
    for(unsigned char i = i_start; i < i_count; i++)
 8004628:	787b      	ldrb	r3, [r7, #1]
 800462a:	3301      	adds	r3, #1
 800462c:	707b      	strb	r3, [r7, #1]
 800462e:	787a      	ldrb	r2, [r7, #1]
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3df      	bcc.n	80045f6 <tim7_read_direction+0x8a>
    if(analogl + analogr >= TIM7_EMERGENCY_THRESHOLD * i_count)
    {
    	// tim7_main_emergency();
    }

    return analogl - analogr;
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	88bb      	ldrh	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <tim7_set_emergency>:
{
	switch_reset_enter();
}

void tim7_set_emergency(char emergency_)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <tim7_set_emergency+0x1c>)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	7013      	strb	r3, [r2, #0]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	2000c424 	.word	0x2000c424

08004664 <tim7_read_left>:
{
    return tim7_emergency;
}

float tim7_read_left()
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <tim7_read_left+0x18>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	ee07 3a90 	vmov	s15, r3
}
 8004670:	eeb0 0a67 	vmov.f32	s0, s15
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000c428 	.word	0x2000c428

08004680 <tim7_read_right>:

float tim7_read_right()
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <tim7_read_right+0x18>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	ee07 3a90 	vmov	s15, r3
}
 800468c:	eeb0 0a67 	vmov.f32	s0, s15
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	2000c420 	.word	0x2000c420

0800469c <time_update_ms>:
 * @fn time_update_ms()
 * @brief 1 ms 周期で呼び出される割り込み内で実行する必要がある
 * 
 */
void time_update_ms(unsigned short int step)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	80fb      	strh	r3, [r7, #6]
    /**
     * @brief time_ms が 1 時間（ 3600,000 ミリ秒 ）を超えた時にゼロに戻す
     * 
     */
    time_countup(&time_ms, step, 6300000);
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <time_update_ms+0x30>)
 80046aa:	4619      	mov	r1, r3
 80046ac:	4808      	ldr	r0, [pc, #32]	; (80046d0 <time_update_ms+0x34>)
 80046ae:	f000 f813 	bl	80046d8 <time_countup>
    time_origin = time_ms * 1000;
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <time_update_ms+0x34>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <time_update_ms+0x38>)
 80046c0:	6013      	str	r3, [r2, #0]
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	00602160 	.word	0x00602160
 80046d0:	2000c434 	.word	0x2000c434
 80046d4:	2000c430 	.word	0x2000c430

080046d8 <time_countup>:
    time_ms = 0;
    time_origin = 0;
}

void time_countup(unsigned int *_time, unsigned short int step, unsigned int _time_max)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	460b      	mov	r3, r1
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	817b      	strh	r3, [r7, #10]
    if(*_time + step >= _time_max)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	4413      	add	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d809      	bhi.n	8004708 <time_countup+0x30>
    {
        *_time = 0;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
        time_reset_count = time_reset_count + 1;
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <time_countup+0x48>)
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <time_countup+0x48>)
 8004704:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        *_time = *_time + step;
    }
}
 8004706:	e005      	b.n	8004714 <time_countup+0x3c>
        *_time = *_time + step;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	897b      	ldrh	r3, [r7, #10]
 800470e:	441a      	add	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	2000c42c 	.word	0x2000c42c

08004724 <tracer_start>:
float tracer_samplingtime;

PID tracer_pid;

void tracer_start()
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
    tracer_s_error = 0;
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <tracer_start+0x2c>)
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
    tracer_before_error = 0;
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <tracer_start+0x30>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
    tracer_set_gain(rotary_read_value());
 8004736:	f7fc ff3f 	bl	80015b8 <rotary_read_value>
 800473a:	4603      	mov	r3, r0
 800473c:	b29b      	uxth	r3, r3
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f8ae 	bl	80048a0 <tracer_set_gain>
    tracer_set_target(0);
 8004744:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004758 <tracer_start+0x34>
 8004748:	f000 f8d0 	bl	80048ec <tracer_set_target>
    printf("tracer.c > tracer_start > ");
    printf("target = %5.2f\r\n", tracer_pid.target);
    printf("tracer.c > tracer_start > ");
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 800474c:	bf00      	nop
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2000c450 	.word	0x2000c450
 8004754:	2000c44c 	.word	0x2000c44c
 8004758:	00000000 	.word	0x00000000

0800475c <tracer_stop>:

void tracer_stop()
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
    tracer_set_target_zero();
 8004760:	f000 f822 	bl	80047a8 <tracer_set_target_zero>
    tracer_set_gain_zero();
 8004764:	f000 f812 	bl	800478c <tracer_set_gain_zero>
}
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}

0800476c <tracer_init>:

void tracer_init(float samplingtime_)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	ed87 0a01 	vstr	s0, [r7, #4]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_init > ");
    printf("sampling_time = 1, tracer_s_error = 0, tracer_before_error = 0\r\n");
    #endif
    tracer_samplingtime = samplingtime_;
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <tracer_init+0x1c>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	2000c448 	.word	0x2000c448

0800478c <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <tracer_set_gain_zero+0x18>)
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000c438 	.word	0x2000c438

080047a8 <tracer_set_target_zero>:

void tracer_set_target_zero()
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <tracer_set_target_zero+0x28>)
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	605a      	str	r2, [r3, #4]
    tracer_pid.ki = 0;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <tracer_set_target_zero+0x28>)
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	609a      	str	r2, [r3, #8]
    tracer_pid.kd = 0;
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <tracer_set_target_zero+0x28>)
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	60da      	str	r2, [r3, #12]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	2000c438 	.word	0x2000c438

080047d4 <tracer_read_gain_kp>:

float tracer_read_gain_kp(unsigned short int i)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KP_MAX - TRACER_KP_MIN) / (float) (TRACER_STEP_SIZE - 1);
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	f1c3 030f 	rsb	r3, r3, #15
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004814 <tracer_read_gain_kp+0x40>
 80047f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047f4:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80047f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004800:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004804:	eeb0 0a67 	vmov.f32	s0, s15
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	3e4ccccc 	.word	0x3e4ccccc

08004818 <tracer_read_gain_ki>:

float tracer_read_gain_ki(unsigned short int i)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KI_MAX - TRACER_KI_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	f1c3 030f 	rsb	r3, r3, #15
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004830:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004858 <tracer_read_gain_ki+0x40>
 8004834:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004838:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800483c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004840:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004858 <tracer_read_gain_ki+0x40>
 8004844:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004848:	eeb0 0a67 	vmov.f32	s0, s15
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	00000000 	.word	0x00000000

0800485c <tracer_read_gain_kd>:

float tracer_read_gain_kd(unsigned short int i)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KD_MAX - TRACER_KD_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	f1c3 030f 	rsb	r3, r3, #15
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004874:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800489c <tracer_read_gain_kd+0x40>
 8004878:	ee27 7a87 	vmul.f32	s14, s15, s14
 800487c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004884:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004888:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800488c:	eeb0 0a67 	vmov.f32	s0, s15
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	00000000 	.word	0x00000000

080048a0 <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	80fb      	strh	r3, [r7, #6]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_gain() > ");
    #endif
    tracer_pid.kp = tracer_read_gain_kp(i);
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ff91 	bl	80047d4 <tracer_read_gain_kp>
 80048b2:	eef0 7a40 	vmov.f32	s15, s0
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <tracer_set_gain+0x48>)
 80048b8:	edc3 7a01 	vstr	s15, [r3, #4]
    tracer_pid.ki = tracer_read_gain_ki(i);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ffaa 	bl	8004818 <tracer_read_gain_ki>
 80048c4:	eef0 7a40 	vmov.f32	s15, s0
 80048c8:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <tracer_set_gain+0x48>)
 80048ca:	edc3 7a02 	vstr	s15, [r3, #8]
    tracer_pid.kd = tracer_read_gain_kd(i);
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff ffc3 	bl	800485c <tracer_read_gain_kd>
 80048d6:	eef0 7a40 	vmov.f32	s15, s0
 80048da:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <tracer_set_gain+0x48>)
 80048dc:	edc3 7a03 	vstr	s15, [r3, #12]
    #if D_TRACER
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	2000c438 	.word	0x2000c438

080048ec <tracer_set_target>:

void tracer_set_target(float target_)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	ed87 0a01 	vstr	s0, [r7, #4]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_target() > ");
    #endif
    tracer_pid.target = target_;
 80048f6:	4a04      	ldr	r2, [pc, #16]	; (8004908 <tracer_set_target+0x1c>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6013      	str	r3, [r2, #0]
    #if D_TRACER
    printf("target_ = %5.2f, target = %5.2f\r\n", target_, tracer_pid.target);
    #endif
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	2000c438 	.word	0x2000c438

0800490c <tracer_solve>:

float tracer_solve(int reference_)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	617b      	str	r3, [r7, #20]

    d_error = (error - tracer_before_error) / (float) tracer_samplingtime;
 8004918:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <tracer_solve+0xa8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <tracer_solve+0xac>)
 800492a:	ed93 7a00 	vldr	s14, [r3]
 800492e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004932:	edc7 7a04 	vstr	s15, [r7, #16]
    tracer_s_error += error * (float) tracer_samplingtime;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <tracer_solve+0xac>)
 8004942:	edd3 7a00 	vldr	s15, [r3]
 8004946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800494a:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <tracer_solve+0xb0>)
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <tracer_solve+0xb0>)
 8004956:	edc3 7a00 	vstr	s15, [r3]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 800495a:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <tracer_solve+0xb4>)
 800495c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800496a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <tracer_solve+0xb4>)
 8004970:	edd3 6a02 	vldr	s13, [r3, #8]
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <tracer_solve+0xb0>)
 8004976:	edd3 7a00 	vldr	s15, [r3]
 800497a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800497e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <tracer_solve+0xb4>)
 8004984:	edd3 6a03 	vldr	s13, [r3, #12]
 8004988:	edd7 7a04 	vldr	s15, [r7, #16]
 800498c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004994:	edc7 7a03 	vstr	s15, [r7, #12]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 8004998:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <tracer_solve+0xa8>)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6013      	str	r3, [r2, #0]

    return result;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	ee07 3a90 	vmov	s15, r3
}
 80049a4:	eeb0 0a67 	vmov.f32	s0, s15
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000c44c 	.word	0x2000c44c
 80049b8:	2000c448 	.word	0x2000c448
 80049bc:	2000c450 	.word	0x2000c450
 80049c0:	2000c438 	.word	0x2000c438

080049c4 <velotrace_init>:
float velotrace_samplingtime;

PID velotrace_pid;

void velotrace_init(float samplingtime_)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_samplingtime = samplingtime_;
 80049ce:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <velotrace_init+0x1c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	2000c458 	.word	0x2000c458

080049e4 <velotrace_start>:

void velotrace_start()
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
    #if D_VELOTRACE
    printf("velotrace_samplingtime = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
    #endif
    velotrace_s_error = 0;
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <velotrace_start+0x78>)
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
    velotrace_before_error = 0;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <velotrace_start+0x7c>)
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
    switch(rotary_read_playmode())
 80049f8:	f7fc fdc6 	bl	8001588 <rotary_read_playmode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d00d      	beq.n	8004a1e <velotrace_start+0x3a>
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	dc19      	bgt.n	8004a3a <velotrace_start+0x56>
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d002      	beq.n	8004a10 <velotrace_start+0x2c>
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d011      	beq.n	8004a32 <velotrace_start+0x4e>
 8004a0e:	e014      	b.n	8004a3a <velotrace_start+0x56>
    {
        case search:
            velotrace_set_gain(0);
 8004a10:	2000      	movs	r0, #0
 8004a12:	f000 f8bb 	bl	8004b8c <velotrace_set_gain>
            velotrace_set_target(0);
 8004a16:	2000      	movs	r0, #0
 8004a18:	f000 f8de 	bl	8004bd8 <velotrace_set_target>
            break;
 8004a1c:	e01c      	b.n	8004a58 <velotrace_start+0x74>
        case velotrace_tuning:
            velotrace_set_target_zero();
 8004a1e:	f000 f90f 	bl	8004c40 <velotrace_set_target_zero>
            velotrace_set_gain(rotary_read_value());
 8004a22:	f7fc fdc9 	bl	80015b8 <rotary_read_value>
 8004a26:	4603      	mov	r3, r0
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f8ae 	bl	8004b8c <velotrace_set_gain>
            break;
 8004a30:	e012      	b.n	8004a58 <velotrace_start+0x74>
        case tracer_tuning:
            velotrace_set_target_zero();
 8004a32:	f000 f905 	bl	8004c40 <velotrace_set_target_zero>
            velotrace_set_gain_zero();
 8004a36:	f000 f8ed 	bl	8004c14 <velotrace_set_gain_zero>
        default:
            velotrace_set_gain(rotary_read_value());
 8004a3a:	f7fc fdbd 	bl	80015b8 <rotary_read_value>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f8a2 	bl	8004b8c <velotrace_set_gain>
            velotrace_set_target(rotary_read_value());
 8004a48:	f7fc fdb6 	bl	80015b8 <rotary_read_value>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f8c1 	bl	8004bd8 <velotrace_set_target>
            break;
 8004a56:	bf00      	nop
    }
}
 8004a58:	bf00      	nop
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	2000c45c 	.word	0x2000c45c
 8004a60:	2000c454 	.word	0x2000c454

08004a64 <velotrace_stop>:

void velotrace_stop()
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 8004a68:	f000 f8ea 	bl	8004c40 <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 8004a6c:	f000 f8d2 	bl	8004c14 <velotrace_set_gain_zero>
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <velotrace_read_target>:

float velotrace_read_target(unsigned short int i)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	f1c3 030f 	rsb	r3, r3, #15
 8004a84:	ee07 3a90 	vmov	s15, r3
 8004a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a8c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004ab4 <velotrace_read_target+0x40>
 8004a90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a94:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	00000000 	.word	0x00000000

08004ab8 <velotrace_read_gain_kp>:

float velotrace_read_gain_kp(unsigned short int i)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	f1c3 030f 	rsb	r3, r3, #15
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004af8 <velotrace_read_gain_kp+0x40>
 8004ad4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ad8:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004afc <velotrace_read_gain_kp+0x44>
 8004ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	00000000 	.word	0x00000000
 8004afc:	447a0000 	.word	0x447a0000

08004b00 <velotrace_read_gain_ki>:

float velotrace_read_gain_ki(unsigned short int i)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	f1c3 030f 	rsb	r3, r3, #15
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b18:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004b40 <velotrace_read_gain_ki+0x40>
 8004b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b20:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b28:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004b44 <velotrace_read_gain_ki+0x44>
 8004b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004b30:	eeb0 0a67 	vmov.f32	s0, s15
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	00000000 	.word	0x00000000
 8004b44:	42c80000 	.word	0x42c80000

08004b48 <velotrace_read_gain_kd>:

float velotrace_read_gain_kd(unsigned short int i)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	f1c3 030f 	rsb	r3, r3, #15
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004b88 <velotrace_read_gain_kd+0x40>
 8004b64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b68:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b70:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004b88 <velotrace_read_gain_kd+0x40>
 8004b74:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004b78:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	00000000 	.word	0x00000000

08004b8c <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("velotrace_pid = velotrace_read_gain\r\n");
    #endif
    velotrace_pid.kp = velotrace_read_gain_kp(i);
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff8d 	bl	8004ab8 <velotrace_read_gain_kp>
 8004b9e:	eef0 7a40 	vmov.f32	s15, s0
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <velotrace_set_gain+0x48>)
 8004ba4:	edc3 7a01 	vstr	s15, [r3, #4]
    velotrace_pid.ki = velotrace_read_gain_ki(i);
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ffa8 	bl	8004b00 <velotrace_read_gain_ki>
 8004bb0:	eef0 7a40 	vmov.f32	s15, s0
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <velotrace_set_gain+0x48>)
 8004bb6:	edc3 7a02 	vstr	s15, [r3, #8]
    velotrace_pid.kd = velotrace_read_gain_kd(i);
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ffc3 	bl	8004b48 <velotrace_read_gain_kd>
 8004bc2:	eef0 7a40 	vmov.f32	s15, s0
 8004bc6:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <velotrace_set_gain+0x48>)
 8004bc8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	2000c460 	.word	0x2000c460

08004bd8 <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("velotrace_pid = velotrace_read_target\r\n");
    #endif
    velotrace_pid.target = velotrace_read_target(i);
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff45 	bl	8004a74 <velotrace_read_target>
 8004bea:	eef0 7a40 	vmov.f32	s15, s0
 8004bee:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <velotrace_set_target+0x24>)
 8004bf0:	edc3 7a00 	vstr	s15, [r3]
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	2000c460 	.word	0x2000c460

08004c00 <velotrace_read_values>:
    velotrace_pid.ki = _pid->ki;
    velotrace_pid.kd = _pid->kd;
}

PID* velotrace_read_values()
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
    return &velotrace_pid;
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <velotrace_read_values+0x10>)
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	2000c460 	.word	0x2000c460

08004c14 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
    velotrace_pid.kp = 0;
 8004c18:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <velotrace_set_gain_zero+0x28>)
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]
    velotrace_pid.ki = 0;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <velotrace_set_gain_zero+0x28>)
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
    velotrace_pid.kd = 0;
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <velotrace_set_gain_zero+0x28>)
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	60da      	str	r2, [r3, #12]
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	2000c460 	.word	0x2000c460

08004c40 <velotrace_set_target_zero>:

void velotrace_set_target_zero()
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
    velotrace_pid.target = 0;
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <velotrace_set_target_zero+0x18>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	2000c460 	.word	0x2000c460

08004c5c <velotrace_solve>:

float velotrace_solve(float reference_)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	ed87 0a01 	vstr	s0, [r7, #4]
    float error;
    float d_error;
    float result;

    error = reference_ - velotrace_pid.target;
 8004c66:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <velotrace_solve+0xac>)
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c74:	edc7 7a05 	vstr	s15, [r7, #20]

    d_error = (error - velotrace_before_error) / (float) velotrace_samplingtime;
 8004c78:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <velotrace_solve+0xb0>)
 8004c7a:	edd3 7a00 	vldr	s15, [r3]
 8004c7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004c86:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <velotrace_solve+0xb4>)
 8004c88:	ed93 7a00 	vldr	s14, [r3]
 8004c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c90:	edc7 7a04 	vstr	s15, [r7, #16]
    velotrace_s_error += error * (float) velotrace_samplingtime;
 8004c94:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <velotrace_solve+0xb4>)
 8004c96:	ed93 7a00 	vldr	s14, [r3]
 8004c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <velotrace_solve+0xb8>)
 8004ca4:	edd3 7a00 	vldr	s15, [r3]
 8004ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cac:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <velotrace_solve+0xb8>)
 8004cae:	edc3 7a00 	vstr	s15, [r3]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <velotrace_solve+0xac>)
 8004cb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004cb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cc0:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <velotrace_solve+0xac>)
 8004cc2:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cc6:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <velotrace_solve+0xb8>)
 8004cc8:	edd3 7a00 	vldr	s15, [r3]
 8004ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <velotrace_solve+0xac>)
 8004cd6:	edd3 6a03 	vldr	s13, [r3, #12]
 8004cda:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce6:	eef1 7a67 	vneg.f32	s15, s15
 8004cea:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8004cee:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <velotrace_solve+0xb0>)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6013      	str	r3, [r2, #0]

    return result;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	ee07 3a90 	vmov	s15, r3
}
 8004cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	2000c460 	.word	0x2000c460
 8004d0c:	2000c454 	.word	0x2000c454
 8004d10:	2000c458 	.word	0x2000c458
 8004d14:	2000c45c 	.word	0x2000c45c

08004d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d1e:	e003      	b.n	8004d28 <LoopCopyDataInit>

08004d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d26:	3104      	adds	r1, #4

08004d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d28:	480b      	ldr	r0, [pc, #44]	; (8004d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d30:	d3f6      	bcc.n	8004d20 <CopyDataInit>
  ldr  r2, =_sbss
 8004d32:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d34:	e002      	b.n	8004d3c <LoopFillZerobss>

08004d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d38:	f842 3b04 	str.w	r3, [r2], #4

08004d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d40:	d3f9      	bcc.n	8004d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d42:	f7ff fa43 	bl	80041cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d46:	f004 fe55 	bl	80099f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d4a:	f7fd fcdb 	bl	8002704 <main>
  bx  lr    
 8004d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004d54:	0800ecac 	.word	0x0800ecac
  ldr  r0, =_sdata
 8004d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d5c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004d60:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004d64:	2000c4a4 	.word	0x2000c4a4

08004d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d68:	e7fe      	b.n	8004d68 <ADC_IRQHandler>
	...

08004d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d70:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <HAL_Init+0x40>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <HAL_Init+0x40>)
 8004d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_Init+0x40>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <HAL_Init+0x40>)
 8004d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_Init+0x40>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <HAL_Init+0x40>)
 8004d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d94:	2003      	movs	r0, #3
 8004d96:	f000 fdb1 	bl	80058fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f000 f808 	bl	8004db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004da0:	f7fe fdc6 	bl	8003930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023c00 	.word	0x40023c00

08004db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_InitTick+0x54>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <HAL_InitTick+0x58>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fdc9 	bl	8005966 <HAL_SYSTICK_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e00e      	b.n	8004dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b0f      	cmp	r3, #15
 8004de2:	d80a      	bhi.n	8004dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004de4:	2200      	movs	r2, #0
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	f000 fd91 	bl	8005912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004df0:	4a06      	ldr	r2, [pc, #24]	; (8004e0c <HAL_InitTick+0x5c>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000000 	.word	0x20000000
 8004e08:	20000008 	.word	0x20000008
 8004e0c:	20000004 	.word	0x20000004

08004e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_IncTick+0x20>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_IncTick+0x24>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4413      	add	r3, r2
 8004e20:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <HAL_IncTick+0x24>)
 8004e22:	6013      	str	r3, [r2, #0]
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000008 	.word	0x20000008
 8004e34:	2000c470 	.word	0x2000c470

08004e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <HAL_GetTick+0x14>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	2000c470 	.word	0x2000c470

08004e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e58:	f7ff ffee 	bl	8004e38 <HAL_GetTick>
 8004e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d005      	beq.n	8004e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <HAL_Delay+0x44>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e76:	bf00      	nop
 8004e78:	f7ff ffde 	bl	8004e38 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d8f7      	bhi.n	8004e78 <HAL_Delay+0x28>
  {
  }
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000008 	.word	0x20000008

08004e98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e033      	b.n	8004f16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fe fd66 	bl	8003988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d118      	bne.n	8004f08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ede:	f023 0302 	bic.w	r3, r3, #2
 8004ee2:	f043 0202 	orr.w	r2, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fab8 	bl	8005460 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
 8004f06:	e001      	b.n	8004f0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_ADC_Start_DMA+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e0e9      	b.n	8005112 <HAL_ADC_Start_DMA+0x1f2>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d018      	beq.n	8004f86 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f64:	4b6d      	ldr	r3, [pc, #436]	; (800511c <HAL_ADC_Start_DMA+0x1fc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a6d      	ldr	r2, [pc, #436]	; (8005120 <HAL_ADC_Start_DMA+0x200>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	0c9a      	lsrs	r2, r3, #18
 8004f70:	4613      	mov	r3, r2
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	4413      	add	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004f78:	e002      	b.n	8004f80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f9      	bne.n	8004f7a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	d107      	bne.n	8004fa6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 80a1 	bne.w	80050f8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fe0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff4:	d106      	bne.n	8005004 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f023 0206 	bic.w	r2, r3, #6
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
 8005002:	e002      	b.n	800500a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005012:	4b44      	ldr	r3, [pc, #272]	; (8005124 <HAL_ADC_Start_DMA+0x204>)
 8005014:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	4a43      	ldr	r2, [pc, #268]	; (8005128 <HAL_ADC_Start_DMA+0x208>)
 800501c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	4a42      	ldr	r2, [pc, #264]	; (800512c <HAL_ADC_Start_DMA+0x20c>)
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4a41      	ldr	r2, [pc, #260]	; (8005130 <HAL_ADC_Start_DMA+0x210>)
 800502c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005036:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005046:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005056:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	334c      	adds	r3, #76	; 0x4c
 8005062:	4619      	mov	r1, r3
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f000 fd38 	bl	8005adc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2b00      	cmp	r3, #0
 8005076:	d12a      	bne.n	80050ce <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <HAL_ADC_Start_DMA+0x214>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d015      	beq.n	80050ae <HAL_ADC_Start_DMA+0x18e>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2c      	ldr	r2, [pc, #176]	; (8005138 <HAL_ADC_Start_DMA+0x218>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d105      	bne.n	8005098 <HAL_ADC_Start_DMA+0x178>
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <HAL_ADC_Start_DMA+0x204>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <HAL_ADC_Start_DMA+0x21c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d136      	bne.n	8005110 <HAL_ADC_Start_DMA+0x1f0>
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <HAL_ADC_Start_DMA+0x204>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d130      	bne.n	8005110 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d129      	bne.n	8005110 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	e020      	b.n	8005110 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a18      	ldr	r2, [pc, #96]	; (8005134 <HAL_ADC_Start_DMA+0x214>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d11b      	bne.n	8005110 <HAL_ADC_Start_DMA+0x1f0>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d114      	bne.n	8005110 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050f4:	609a      	str	r2, [r3, #8]
 80050f6:	e00b      	b.n	8005110 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f043 0210 	orr.w	r2, r3, #16
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	f043 0201 	orr.w	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000000 	.word	0x20000000
 8005120:	431bde83 	.word	0x431bde83
 8005124:	40012300 	.word	0x40012300
 8005128:	08005659 	.word	0x08005659
 800512c:	08005713 	.word	0x08005713
 8005130:	0800572f 	.word	0x0800572f
 8005134:	40012000 	.word	0x40012000
 8005138:	40012100 	.word	0x40012100
 800513c:	40012200 	.word	0x40012200

08005140 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_ADC_Stop_DMA+0x1a>
 8005156:	2302      	movs	r3, #2
 8005158:	e048      	b.n	80051ec <HAL_ADC_Stop_DMA+0xac>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d130      	bne.n	80051e2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800518e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d10f      	bne.n	80051be <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fcf2 	bl	8005b8c <HAL_DMA_Abort>
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80051cc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_ADC_ConfigChannel+0x1c>
 8005234:	2302      	movs	r3, #2
 8005236:	e105      	b.n	8005444 <HAL_ADC_ConfigChannel+0x228>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b09      	cmp	r3, #9
 8005246:	d925      	bls.n	8005294 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68d9      	ldr	r1, [r3, #12]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	3b1e      	subs	r3, #30
 800525e:	2207      	movs	r2, #7
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43da      	mvns	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	400a      	ands	r2, r1
 800526c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68d9      	ldr	r1, [r3, #12]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	4618      	mov	r0, r3
 8005280:	4603      	mov	r3, r0
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	4403      	add	r3, r0
 8005286:	3b1e      	subs	r3, #30
 8005288:	409a      	lsls	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	e022      	b.n	80052da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6919      	ldr	r1, [r3, #16]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	2207      	movs	r2, #7
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43da      	mvns	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	400a      	ands	r2, r1
 80052b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6919      	ldr	r1, [r3, #16]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	4618      	mov	r0, r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4403      	add	r3, r0
 80052d0:	409a      	lsls	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d824      	bhi.n	800532c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	3b05      	subs	r3, #5
 80052f4:	221f      	movs	r2, #31
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43da      	mvns	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	400a      	ands	r2, r1
 8005302:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	4618      	mov	r0, r3
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	3b05      	subs	r3, #5
 800531e:	fa00 f203 	lsl.w	r2, r0, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	635a      	str	r2, [r3, #52]	; 0x34
 800532a:	e04c      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d824      	bhi.n	800537e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	3b23      	subs	r3, #35	; 0x23
 8005346:	221f      	movs	r2, #31
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	43da      	mvns	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	400a      	ands	r2, r1
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	4618      	mov	r0, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	3b23      	subs	r3, #35	; 0x23
 8005370:	fa00 f203 	lsl.w	r2, r0, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
 800537c:	e023      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	3b41      	subs	r3, #65	; 0x41
 8005390:	221f      	movs	r2, #31
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43da      	mvns	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	400a      	ands	r2, r1
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4618      	mov	r0, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	3b41      	subs	r3, #65	; 0x41
 80053ba:	fa00 f203 	lsl.w	r2, r0, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053c6:	4b22      	ldr	r3, [pc, #136]	; (8005450 <HAL_ADC_ConfigChannel+0x234>)
 80053c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_ADC_ConfigChannel+0x238>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d109      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x1cc>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b12      	cmp	r3, #18
 80053da:	d105      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a19      	ldr	r2, [pc, #100]	; (8005454 <HAL_ADC_ConfigChannel+0x238>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d123      	bne.n	800543a <HAL_ADC_ConfigChannel+0x21e>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d003      	beq.n	8005402 <HAL_ADC_ConfigChannel+0x1e6>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b11      	cmp	r3, #17
 8005400:	d11b      	bne.n	800543a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b10      	cmp	r3, #16
 8005414:	d111      	bne.n	800543a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <HAL_ADC_ConfigChannel+0x23c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a10      	ldr	r2, [pc, #64]	; (800545c <HAL_ADC_ConfigChannel+0x240>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	0c9a      	lsrs	r2, r3, #18
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800542c:	e002      	b.n	8005434 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	3b01      	subs	r3, #1
 8005432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f9      	bne.n	800542e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012300 	.word	0x40012300
 8005454:	40012000 	.word	0x40012000
 8005458:	20000000 	.word	0x20000000
 800545c:	431bde83 	.word	0x431bde83

08005460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005468:	4b79      	ldr	r3, [pc, #484]	; (8005650 <ADC_Init+0x1f0>)
 800546a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	021a      	lsls	r2, r3, #8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80054b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	4a58      	ldr	r2, [pc, #352]	; (8005654 <ADC_Init+0x1f4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6899      	ldr	r1, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6899      	ldr	r1, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	e00f      	b.n	800555e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800554c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800555c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0202 	bic.w	r2, r2, #2
 800556c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6899      	ldr	r1, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7e1b      	ldrb	r3, [r3, #24]
 8005578:	005a      	lsls	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80055aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6859      	ldr	r1, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	3b01      	subs	r3, #1
 80055b8:	035a      	lsls	r2, r3, #13
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	e007      	b.n	80055d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	051a      	lsls	r2, r3, #20
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6899      	ldr	r1, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005616:	025a      	lsls	r2, r3, #9
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	029a      	lsls	r2, r3, #10
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40012300 	.word	0x40012300
 8005654:	0f000001 	.word	0x0f000001

08005658 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800566e:	2b00      	cmp	r3, #0
 8005670:	d13c      	bne.n	80056ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d12b      	bne.n	80056e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005690:	2b00      	cmp	r3, #0
 8005692:	d127      	bne.n	80056e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d006      	beq.n	80056b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d119      	bne.n	80056e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0220 	bic.w	r2, r2, #32
 80056be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	f043 0201 	orr.w	r2, r3, #1
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7fc fac5 	bl	8001c74 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056ea:	e00e      	b.n	800570a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff fd85 	bl	8005208 <HAL_ADC_ErrorCallback>
}
 80056fe:	e004      	b.n	800570a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fd67 	bl	80051f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2240      	movs	r2, #64	; 0x40
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	f043 0204 	orr.w	r2, r3, #4
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fd5a 	bl	8005208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800576c:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <__NVIC_SetPriorityGrouping+0x44>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005778:	4013      	ands	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800578e:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	60d3      	str	r3, [r2, #12]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <__NVIC_GetPriorityGrouping+0x18>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	f003 0307 	and.w	r3, r3, #7
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db0b      	blt.n	80057ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	4907      	ldr	r1, [pc, #28]	; (80057f8 <__NVIC_EnableIRQ+0x38>)
 80057da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	2001      	movs	r0, #1
 80057e2:	fa00 f202 	lsl.w	r2, r0, r2
 80057e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e100 	.word	0xe000e100

080057fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580c:	2b00      	cmp	r3, #0
 800580e:	db0a      	blt.n	8005826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	490c      	ldr	r1, [pc, #48]	; (8005848 <__NVIC_SetPriority+0x4c>)
 8005816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581a:	0112      	lsls	r2, r2, #4
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	440b      	add	r3, r1
 8005820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005824:	e00a      	b.n	800583c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4908      	ldr	r1, [pc, #32]	; (800584c <__NVIC_SetPriority+0x50>)
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	3b04      	subs	r3, #4
 8005834:	0112      	lsls	r2, r2, #4
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	440b      	add	r3, r1
 800583a:	761a      	strb	r2, [r3, #24]
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	e000e100 	.word	0xe000e100
 800584c:	e000ed00 	.word	0xe000ed00

08005850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f1c3 0307 	rsb	r3, r3, #7
 800586a:	2b04      	cmp	r3, #4
 800586c:	bf28      	it	cs
 800586e:	2304      	movcs	r3, #4
 8005870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3304      	adds	r3, #4
 8005876:	2b06      	cmp	r3, #6
 8005878:	d902      	bls.n	8005880 <NVIC_EncodePriority+0x30>
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3b03      	subs	r3, #3
 800587e:	e000      	b.n	8005882 <NVIC_EncodePriority+0x32>
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005884:	f04f 32ff 	mov.w	r2, #4294967295
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43da      	mvns	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	401a      	ands	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005898:	f04f 31ff 	mov.w	r1, #4294967295
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	fa01 f303 	lsl.w	r3, r1, r3
 80058a2:	43d9      	mvns	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a8:	4313      	orrs	r3, r2
         );
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3724      	adds	r7, #36	; 0x24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058c8:	d301      	bcc.n	80058ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ca:	2301      	movs	r3, #1
 80058cc:	e00f      	b.n	80058ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <SysTick_Config+0x40>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058d6:	210f      	movs	r1, #15
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	f7ff ff8e 	bl	80057fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <SysTick_Config+0x40>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058e6:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <SysTick_Config+0x40>)
 80058e8:	2207      	movs	r2, #7
 80058ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	e000e010 	.word	0xe000e010

080058fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff ff29 	bl	800575c <__NVIC_SetPriorityGrouping>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005912:	b580      	push	{r7, lr}
 8005914:	b086      	sub	sp, #24
 8005916:	af00      	add	r7, sp, #0
 8005918:	4603      	mov	r3, r0
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005924:	f7ff ff3e 	bl	80057a4 <__NVIC_GetPriorityGrouping>
 8005928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	6978      	ldr	r0, [r7, #20]
 8005930:	f7ff ff8e 	bl	8005850 <NVIC_EncodePriority>
 8005934:	4602      	mov	r2, r0
 8005936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff5d 	bl	80057fc <__NVIC_SetPriority>
}
 8005942:	bf00      	nop
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	4603      	mov	r3, r0
 8005952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff ff31 	bl	80057c0 <__NVIC_EnableIRQ>
}
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff ffa2 	bl	80058b8 <SysTick_Config>
 8005974:	4603      	mov	r3, r0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800598c:	f7ff fa54 	bl	8004e38 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e099      	b.n	8005ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059bc:	e00f      	b.n	80059de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059be:	f7ff fa3b 	bl	8004e38 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d908      	bls.n	80059de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2203      	movs	r2, #3
 80059d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e078      	b.n	8005ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e8      	bne.n	80059be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4b38      	ldr	r3, [pc, #224]	; (8005ad8 <HAL_DMA_Init+0x158>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d107      	bne.n	8005a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	4313      	orrs	r3, r2
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d117      	bne.n	8005aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00e      	beq.n	8005aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fadf 	bl	8006048 <DMA_CheckFifoParam>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2240      	movs	r2, #64	; 0x40
 8005a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e016      	b.n	8005ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa96 	bl	8005fdc <DMA_CalcBaseAndBitshift>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab8:	223f      	movs	r2, #63	; 0x3f
 8005aba:	409a      	lsls	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	f010803f 	.word	0xf010803f

08005adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_DMA_Start_IT+0x26>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e040      	b.n	8005b84 <HAL_DMA_Start_IT+0xa8>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d12f      	bne.n	8005b76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fa28 	bl	8005f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b34:	223f      	movs	r2, #63	; 0x3f
 8005b36:	409a      	lsls	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0216 	orr.w	r2, r2, #22
 8005b4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0208 	orr.w	r2, r2, #8
 8005b62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e005      	b.n	8005b82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
 8005b80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b9a:	f7ff f94d 	bl	8004e38 <HAL_GetTick>
 8005b9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d008      	beq.n	8005bbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2280      	movs	r2, #128	; 0x80
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e052      	b.n	8005c64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0216 	bic.w	r2, r2, #22
 8005bcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <HAL_DMA_Abort+0x62>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0208 	bic.w	r2, r2, #8
 8005bfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c0e:	e013      	b.n	8005c38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c10:	f7ff f912 	bl	8004e38 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d90c      	bls.n	8005c38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2203      	movs	r2, #3
 8005c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e015      	b.n	8005c64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e4      	bne.n	8005c10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4a:	223f      	movs	r2, #63	; 0x3f
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c78:	4b92      	ldr	r3, [pc, #584]	; (8005ec4 <HAL_DMA_IRQHandler+0x258>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a92      	ldr	r2, [pc, #584]	; (8005ec8 <HAL_DMA_IRQHandler+0x25c>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	2208      	movs	r2, #8
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01a      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd0:	f043 0201 	orr.w	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d12:	2204      	movs	r2, #4
 8005d14:	409a      	lsls	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d012      	beq.n	8005d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	2204      	movs	r2, #4
 8005d32:	409a      	lsls	r2, r3
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	f043 0204 	orr.w	r2, r3, #4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d48:	2210      	movs	r2, #16
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d043      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d03c      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d66:	2210      	movs	r2, #16
 8005d68:	409a      	lsls	r2, r3
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d018      	beq.n	8005dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d108      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d024      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
 8005d9a:	e01f      	b.n	8005ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01b      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
 8005dac:	e016      	b.n	8005ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0208 	bic.w	r2, r2, #8
 8005dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	2220      	movs	r2, #32
 8005de2:	409a      	lsls	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 808e 	beq.w	8005f0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8086 	beq.w	8005f0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e02:	2220      	movs	r2, #32
 8005e04:	409a      	lsls	r2, r3
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d136      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0216 	bic.w	r2, r2, #22
 8005e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <HAL_DMA_IRQHandler+0x1da>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0208 	bic.w	r2, r2, #8
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5a:	223f      	movs	r2, #63	; 0x3f
 8005e5c:	409a      	lsls	r2, r3
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d07d      	beq.n	8005f76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	4798      	blx	r3
        }
        return;
 8005e82:	e078      	b.n	8005f76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01c      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d108      	bne.n	8005eb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d030      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
 8005eb0:	e02b      	b.n	8005f0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
 8005ec2:	e022      	b.n	8005f0a <HAL_DMA_IRQHandler+0x29e>
 8005ec4:	20000000 	.word	0x20000000
 8005ec8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10f      	bne.n	8005efa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0210 	bic.w	r2, r2, #16
 8005ee8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d032      	beq.n	8005f78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d022      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2205      	movs	r2, #5
 8005f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60bb      	str	r3, [r7, #8]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d307      	bcc.n	8005f52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f2      	bne.n	8005f36 <HAL_DMA_IRQHandler+0x2ca>
 8005f50:	e000      	b.n	8005f54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005f52:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
 8005f74:	e000      	b.n	8005f78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f76:	bf00      	nop
    }
  }
}
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop

08005f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d108      	bne.n	8005fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fbe:	e007      	b.n	8005fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
}
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	3b10      	subs	r3, #16
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <DMA_CalcBaseAndBitshift+0x64>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ff6:	4a13      	ldr	r2, [pc, #76]	; (8006044 <DMA_CalcBaseAndBitshift+0x68>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d909      	bls.n	800601e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	1d1a      	adds	r2, r3, #4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	659a      	str	r2, [r3, #88]	; 0x58
 800601c:	e007      	b.n	800602e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	aaaaaaab 	.word	0xaaaaaaab
 8006044:	0800e7dc 	.word	0x0800e7dc

08006048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11f      	bne.n	80060a2 <DMA_CheckFifoParam+0x5a>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d856      	bhi.n	8006116 <DMA_CheckFifoParam+0xce>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <DMA_CheckFifoParam+0x28>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006081 	.word	0x08006081
 8006074:	08006093 	.word	0x08006093
 8006078:	08006081 	.word	0x08006081
 800607c:	08006117 	.word	0x08006117
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d046      	beq.n	800611a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006090:	e043      	b.n	800611a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800609a:	d140      	bne.n	800611e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a0:	e03d      	b.n	800611e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	d121      	bne.n	80060f0 <DMA_CheckFifoParam+0xa8>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d837      	bhi.n	8006122 <DMA_CheckFifoParam+0xda>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <DMA_CheckFifoParam+0x70>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060cf 	.word	0x080060cf
 80060c0:	080060c9 	.word	0x080060c9
 80060c4:	080060e1 	.word	0x080060e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
      break;
 80060cc:	e030      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d025      	beq.n	8006126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060de:	e022      	b.n	8006126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060e8:	d11f      	bne.n	800612a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060ee:	e01c      	b.n	800612a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d903      	bls.n	80060fe <DMA_CheckFifoParam+0xb6>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d003      	beq.n	8006104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060fc:	e018      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
      break;
 8006102:	e015      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
      break;
 8006114:	e00b      	b.n	800612e <DMA_CheckFifoParam+0xe6>
      break;
 8006116:	bf00      	nop
 8006118:	e00a      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800611a:	bf00      	nop
 800611c:	e008      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800611e:	bf00      	nop
 8006120:	e006      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 8006122:	bf00      	nop
 8006124:	e004      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;   
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800612e:	bf00      	nop
    }
  } 
  
  return status; 
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop

08006140 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006152:	4b23      	ldr	r3, [pc, #140]	; (80061e0 <HAL_FLASH_Program+0xa0>)
 8006154:	7e1b      	ldrb	r3, [r3, #24]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_FLASH_Program+0x1e>
 800615a:	2302      	movs	r3, #2
 800615c:	e03b      	b.n	80061d6 <HAL_FLASH_Program+0x96>
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <HAL_FLASH_Program+0xa0>)
 8006160:	2201      	movs	r2, #1
 8006162:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006164:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006168:	f000 f870 	bl	800624c <FLASH_WaitForLastOperation>
 800616c:	4603      	mov	r3, r0
 800616e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d12b      	bne.n	80061ce <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d105      	bne.n	8006188 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800617c:	783b      	ldrb	r3, [r7, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	68b8      	ldr	r0, [r7, #8]
 8006182:	f000 f91b 	bl	80063bc <FLASH_Program_Byte>
 8006186:	e016      	b.n	80061b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d105      	bne.n	800619a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800618e:	883b      	ldrh	r3, [r7, #0]
 8006190:	4619      	mov	r1, r3
 8006192:	68b8      	ldr	r0, [r7, #8]
 8006194:	f000 f8ee 	bl	8006374 <FLASH_Program_HalfWord>
 8006198:	e00d      	b.n	80061b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d105      	bne.n	80061ac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	68b8      	ldr	r0, [r7, #8]
 80061a6:	f000 f8c3 	bl	8006330 <FLASH_Program_Word>
 80061aa:	e004      	b.n	80061b6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80061ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b0:	68b8      	ldr	r0, [r7, #8]
 80061b2:	f000 f88b 	bl	80062cc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061ba:	f000 f847 	bl	800624c <FLASH_WaitForLastOperation>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <HAL_FLASH_Program+0xa4>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	4a07      	ldr	r2, [pc, #28]	; (80061e4 <HAL_FLASH_Program+0xa4>)
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061ce:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <HAL_FLASH_Program+0xa0>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	2000c474 	.word	0x2000c474
 80061e4:	40023c00 	.word	0x40023c00

080061e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_FLASH_Unlock+0x38>)
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da0b      	bge.n	8006212 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <HAL_FLASH_Unlock+0x38>)
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <HAL_FLASH_Unlock+0x3c>)
 80061fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <HAL_FLASH_Unlock+0x38>)
 8006202:	4a09      	ldr	r2, [pc, #36]	; (8006228 <HAL_FLASH_Unlock+0x40>)
 8006204:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <HAL_FLASH_Unlock+0x38>)
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	da01      	bge.n	8006212 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006212:	79fb      	ldrb	r3, [r7, #7]
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40023c00 	.word	0x40023c00
 8006224:	45670123 	.word	0x45670123
 8006228:	cdef89ab 	.word	0xcdef89ab

0800622c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_FLASH_Lock+0x1c>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	4a04      	ldr	r2, [pc, #16]	; (8006248 <HAL_FLASH_Lock+0x1c>)
 8006236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800623a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40023c00 	.word	0x40023c00

0800624c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <FLASH_WaitForLastOperation+0x78>)
 800625a:	2200      	movs	r2, #0
 800625c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800625e:	f7fe fdeb 	bl	8004e38 <HAL_GetTick>
 8006262:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006264:	e010      	b.n	8006288 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d00c      	beq.n	8006288 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <FLASH_WaitForLastOperation+0x38>
 8006274:	f7fe fde0 	bl	8004e38 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d201      	bcs.n	8006288 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e019      	b.n	80062bc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <FLASH_WaitForLastOperation+0x7c>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e8      	bne.n	8006266 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <FLASH_WaitForLastOperation+0x7c>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80062a0:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <FLASH_WaitForLastOperation+0x7c>)
 80062a2:	2201      	movs	r2, #1
 80062a4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <FLASH_WaitForLastOperation+0x7c>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80062b2:	f000 f8a5 	bl	8006400 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
  
}  
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	2000c474 	.word	0x2000c474
 80062c8:	40023c00 	.word	0x40023c00

080062cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062d8:	4b14      	ldr	r3, [pc, #80]	; (800632c <FLASH_Program_DoubleWord+0x60>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a13      	ldr	r2, [pc, #76]	; (800632c <FLASH_Program_DoubleWord+0x60>)
 80062de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80062e4:	4b11      	ldr	r3, [pc, #68]	; (800632c <FLASH_Program_DoubleWord+0x60>)
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	4a10      	ldr	r2, [pc, #64]	; (800632c <FLASH_Program_DoubleWord+0x60>)
 80062ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80062ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <FLASH_Program_DoubleWord+0x60>)
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	4a0d      	ldr	r2, [pc, #52]	; (800632c <FLASH_Program_DoubleWord+0x60>)
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006302:	f3bf 8f6f 	isb	sy
}
 8006306:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	000a      	movs	r2, r1
 8006316:	2300      	movs	r3, #0
 8006318:	68f9      	ldr	r1, [r7, #12]
 800631a:	3104      	adds	r1, #4
 800631c:	4613      	mov	r3, r2
 800631e:	600b      	str	r3, [r1, #0]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40023c00 	.word	0x40023c00

08006330 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <FLASH_Program_Word+0x40>)
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <FLASH_Program_Word+0x40>)
 8006340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006344:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <FLASH_Program_Word+0x40>)
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <FLASH_Program_Word+0x40>)
 800634c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006350:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <FLASH_Program_Word+0x40>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	4a06      	ldr	r2, [pc, #24]	; (8006370 <FLASH_Program_Word+0x40>)
 8006358:	f043 0301 	orr.w	r3, r3, #1
 800635c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	601a      	str	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40023c00 	.word	0x40023c00

08006374 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006380:	4b0d      	ldr	r3, [pc, #52]	; (80063b8 <FLASH_Program_HalfWord+0x44>)
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <FLASH_Program_HalfWord+0x44>)
 8006386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <FLASH_Program_HalfWord+0x44>)
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <FLASH_Program_HalfWord+0x44>)
 8006392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006396:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <FLASH_Program_HalfWord+0x44>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	4a06      	ldr	r2, [pc, #24]	; (80063b8 <FLASH_Program_HalfWord+0x44>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	801a      	strh	r2, [r3, #0]
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40023c00 	.word	0x40023c00

080063bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <FLASH_Program_Byte+0x40>)
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	4a0b      	ldr	r2, [pc, #44]	; (80063fc <FLASH_Program_Byte+0x40>)
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <FLASH_Program_Byte+0x40>)
 80063d6:	4a09      	ldr	r2, [pc, #36]	; (80063fc <FLASH_Program_Byte+0x40>)
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <FLASH_Program_Byte+0x40>)
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	4a06      	ldr	r2, [pc, #24]	; (80063fc <FLASH_Program_Byte+0x40>)
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	701a      	strb	r2, [r3, #0]
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40023c00 	.word	0x40023c00

08006400 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006404:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d008      	beq.n	8006422 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f043 0310 	orr.w	r3, r3, #16
 8006418:	4a23      	ldr	r2, [pc, #140]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 800641a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800641c:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 800641e:	2210      	movs	r2, #16
 8006420:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800642e:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f043 0308 	orr.w	r3, r3, #8
 8006436:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 8006438:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800643a:	4b1a      	ldr	r3, [pc, #104]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 800643c:	2220      	movs	r2, #32
 800643e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006440:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800644c:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f043 0304 	orr.w	r3, r3, #4
 8006454:	4a14      	ldr	r2, [pc, #80]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 8006456:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006458:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 800645a:	2240      	movs	r2, #64	; 0x40
 800645c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800646a:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f043 0302 	orr.w	r3, r3, #2
 8006472:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 8006474:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 8006478:	2280      	movs	r2, #128	; 0x80
 800647a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006488:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	4a05      	ldr	r2, [pc, #20]	; (80064a8 <FLASH_SetErrorCode+0xa8>)
 8006492:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <FLASH_SetErrorCode+0xa4>)
 8006496:	2202      	movs	r2, #2
 8006498:	60da      	str	r2, [r3, #12]
  }
}
 800649a:	bf00      	nop
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40023c00 	.word	0x40023c00
 80064a8:	2000c474 	.word	0x2000c474

080064ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80064be:	4b31      	ldr	r3, [pc, #196]	; (8006584 <HAL_FLASHEx_Erase+0xd8>)
 80064c0:	7e1b      	ldrb	r3, [r3, #24]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_FLASHEx_Erase+0x1e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e058      	b.n	800657c <HAL_FLASHEx_Erase+0xd0>
 80064ca:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <HAL_FLASHEx_Erase+0xd8>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064d4:	f7ff feba 	bl	800624c <FLASH_WaitForLastOperation>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d148      	bne.n	8006574 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d115      	bne.n	800651e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	4619      	mov	r1, r3
 80064fe:	4610      	mov	r0, r2
 8006500:	f000 f844 	bl	800658c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006508:	f7ff fea0 	bl	800624c <FLASH_WaitForLastOperation>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006510:	4b1d      	ldr	r3, [pc, #116]	; (8006588 <HAL_FLASHEx_Erase+0xdc>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	4a1c      	ldr	r2, [pc, #112]	; (8006588 <HAL_FLASHEx_Erase+0xdc>)
 8006516:	f023 0304 	bic.w	r3, r3, #4
 800651a:	6113      	str	r3, [r2, #16]
 800651c:	e028      	b.n	8006570 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	60bb      	str	r3, [r7, #8]
 8006524:	e01c      	b.n	8006560 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4619      	mov	r1, r3
 800652e:	68b8      	ldr	r0, [r7, #8]
 8006530:	f000 f850 	bl	80065d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006534:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006538:	f7ff fe88 	bl	800624c <FLASH_WaitForLastOperation>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_FLASHEx_Erase+0xdc>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	4a10      	ldr	r2, [pc, #64]	; (8006588 <HAL_FLASHEx_Erase+0xdc>)
 8006546:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800654a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	601a      	str	r2, [r3, #0]
          break;
 8006558:	e00a      	b.n	8006570 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3301      	adds	r3, #1
 800655e:	60bb      	str	r3, [r7, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4413      	add	r3, r2
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d3da      	bcc.n	8006526 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006570:	f000 f878 	bl	8006664 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <HAL_FLASHEx_Erase+0xd8>)
 8006576:	2200      	movs	r2, #0
 8006578:	761a      	strb	r2, [r3, #24]

  return status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	2000c474 	.word	0x2000c474
 8006588:	40023c00 	.word	0x40023c00

0800658c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	6039      	str	r1, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006598:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <FLASH_MassErase+0x44>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <FLASH_MassErase+0x44>)
 800659e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <FLASH_MassErase+0x44>)
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	4a09      	ldr	r2, [pc, #36]	; (80065d0 <FLASH_MassErase+0x44>)
 80065aa:	f043 0304 	orr.w	r3, r3, #4
 80065ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <FLASH_MassErase+0x44>)
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	4313      	orrs	r3, r2
 80065ba:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <FLASH_MassErase+0x44>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c0:	6113      	str	r3, [r2, #16]
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40023c00 	.word	0x40023c00

080065d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e010      	b.n	8006612 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d103      	bne.n	80065fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80065f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e009      	b.n	8006612 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d103      	bne.n	800660c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e002      	b.n	8006612 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800660c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006610:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006612:	4b13      	ldr	r3, [pc, #76]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	4a12      	ldr	r2, [pc, #72]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 8006618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	490f      	ldr	r1, [pc, #60]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800662a:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 8006630:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006634:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006636:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4313      	orrs	r3, r2
 8006640:	4a07      	ldr	r2, [pc, #28]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 8006642:	f043 0302 	orr.w	r3, r3, #2
 8006646:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <FLASH_Erase_Sector+0x8c>)
 800664e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006652:	6113      	str	r3, [r2, #16]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40023c00 	.word	0x40023c00

08006664 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <FLASH_FlushCaches+0x88>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006670:	2b00      	cmp	r3, #0
 8006672:	d017      	beq.n	80066a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <FLASH_FlushCaches+0x88>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <FLASH_FlushCaches+0x88>)
 800667a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800667e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <FLASH_FlushCaches+0x88>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a19      	ldr	r2, [pc, #100]	; (80066ec <FLASH_FlushCaches+0x88>)
 8006686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	4b17      	ldr	r3, [pc, #92]	; (80066ec <FLASH_FlushCaches+0x88>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a16      	ldr	r2, [pc, #88]	; (80066ec <FLASH_FlushCaches+0x88>)
 8006692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006696:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006698:	4b14      	ldr	r3, [pc, #80]	; (80066ec <FLASH_FlushCaches+0x88>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a13      	ldr	r2, [pc, #76]	; (80066ec <FLASH_FlushCaches+0x88>)
 800669e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80066a4:	4b11      	ldr	r3, [pc, #68]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d017      	beq.n	80066e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80066b0:	4b0e      	ldr	r3, [pc, #56]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a07      	ldr	r2, [pc, #28]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a04      	ldr	r2, [pc, #16]	; (80066ec <FLASH_FlushCaches+0x88>)
 80066da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066de:	6013      	str	r3, [r2, #0]
  }
}
 80066e0:	bf00      	nop
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40023c00 	.word	0x40023c00

080066f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b089      	sub	sp, #36	; 0x24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	e16b      	b.n	80069e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800670c:	2201      	movs	r2, #1
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4013      	ands	r3, r2
 800671e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	429a      	cmp	r2, r3
 8006726:	f040 815a 	bne.w	80069de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b01      	cmp	r3, #1
 8006734:	d005      	beq.n	8006742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800673e:	2b02      	cmp	r3, #2
 8006740:	d130      	bne.n	80067a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	2203      	movs	r2, #3
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006778:	2201      	movs	r2, #1
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 0201 	and.w	r2, r3, #1
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d017      	beq.n	80067e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	2203      	movs	r2, #3
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43db      	mvns	r3, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4013      	ands	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d123      	bne.n	8006834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	08da      	lsrs	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3208      	adds	r2, #8
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	220f      	movs	r2, #15
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4013      	ands	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	4313      	orrs	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	08da      	lsrs	r2, r3, #3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3208      	adds	r2, #8
 800682e:	69b9      	ldr	r1, [r7, #24]
 8006830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	2203      	movs	r2, #3
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 0203 	and.w	r2, r3, #3
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	4313      	orrs	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80b4 	beq.w	80069de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	4b60      	ldr	r3, [pc, #384]	; (80069fc <HAL_GPIO_Init+0x30c>)
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	4a5f      	ldr	r2, [pc, #380]	; (80069fc <HAL_GPIO_Init+0x30c>)
 8006880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006884:	6453      	str	r3, [r2, #68]	; 0x44
 8006886:	4b5d      	ldr	r3, [pc, #372]	; (80069fc <HAL_GPIO_Init+0x30c>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006892:	4a5b      	ldr	r2, [pc, #364]	; (8006a00 <HAL_GPIO_Init+0x310>)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	089b      	lsrs	r3, r3, #2
 8006898:	3302      	adds	r3, #2
 800689a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	220f      	movs	r2, #15
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	43db      	mvns	r3, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4013      	ands	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a52      	ldr	r2, [pc, #328]	; (8006a04 <HAL_GPIO_Init+0x314>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d02b      	beq.n	8006916 <HAL_GPIO_Init+0x226>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a51      	ldr	r2, [pc, #324]	; (8006a08 <HAL_GPIO_Init+0x318>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d025      	beq.n	8006912 <HAL_GPIO_Init+0x222>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a50      	ldr	r2, [pc, #320]	; (8006a0c <HAL_GPIO_Init+0x31c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01f      	beq.n	800690e <HAL_GPIO_Init+0x21e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a4f      	ldr	r2, [pc, #316]	; (8006a10 <HAL_GPIO_Init+0x320>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d019      	beq.n	800690a <HAL_GPIO_Init+0x21a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a4e      	ldr	r2, [pc, #312]	; (8006a14 <HAL_GPIO_Init+0x324>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_GPIO_Init+0x216>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a4d      	ldr	r2, [pc, #308]	; (8006a18 <HAL_GPIO_Init+0x328>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00d      	beq.n	8006902 <HAL_GPIO_Init+0x212>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a4c      	ldr	r2, [pc, #304]	; (8006a1c <HAL_GPIO_Init+0x32c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d007      	beq.n	80068fe <HAL_GPIO_Init+0x20e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a4b      	ldr	r2, [pc, #300]	; (8006a20 <HAL_GPIO_Init+0x330>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d101      	bne.n	80068fa <HAL_GPIO_Init+0x20a>
 80068f6:	2307      	movs	r3, #7
 80068f8:	e00e      	b.n	8006918 <HAL_GPIO_Init+0x228>
 80068fa:	2308      	movs	r3, #8
 80068fc:	e00c      	b.n	8006918 <HAL_GPIO_Init+0x228>
 80068fe:	2306      	movs	r3, #6
 8006900:	e00a      	b.n	8006918 <HAL_GPIO_Init+0x228>
 8006902:	2305      	movs	r3, #5
 8006904:	e008      	b.n	8006918 <HAL_GPIO_Init+0x228>
 8006906:	2304      	movs	r3, #4
 8006908:	e006      	b.n	8006918 <HAL_GPIO_Init+0x228>
 800690a:	2303      	movs	r3, #3
 800690c:	e004      	b.n	8006918 <HAL_GPIO_Init+0x228>
 800690e:	2302      	movs	r3, #2
 8006910:	e002      	b.n	8006918 <HAL_GPIO_Init+0x228>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <HAL_GPIO_Init+0x228>
 8006916:	2300      	movs	r3, #0
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	f002 0203 	and.w	r2, r2, #3
 800691e:	0092      	lsls	r2, r2, #2
 8006920:	4093      	lsls	r3, r2
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4313      	orrs	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006928:	4935      	ldr	r1, [pc, #212]	; (8006a00 <HAL_GPIO_Init+0x310>)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	089b      	lsrs	r3, r3, #2
 800692e:	3302      	adds	r3, #2
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006936:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <HAL_GPIO_Init+0x334>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	43db      	mvns	r3, r3
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	4013      	ands	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800695a:	4a32      	ldr	r2, [pc, #200]	; (8006a24 <HAL_GPIO_Init+0x334>)
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006960:	4b30      	ldr	r3, [pc, #192]	; (8006a24 <HAL_GPIO_Init+0x334>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	43db      	mvns	r3, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4013      	ands	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006984:	4a27      	ldr	r2, [pc, #156]	; (8006a24 <HAL_GPIO_Init+0x334>)
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800698a:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <HAL_GPIO_Init+0x334>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	43db      	mvns	r3, r3
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	4013      	ands	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80069ae:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <HAL_GPIO_Init+0x334>)
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069b4:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <HAL_GPIO_Init+0x334>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	43db      	mvns	r3, r3
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4013      	ands	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069d8:	4a12      	ldr	r2, [pc, #72]	; (8006a24 <HAL_GPIO_Init+0x334>)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3301      	adds	r3, #1
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	f67f ae90 	bls.w	800670c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	3724      	adds	r7, #36	; 0x24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40023800 	.word	0x40023800
 8006a00:	40013800 	.word	0x40013800
 8006a04:	40020000 	.word	0x40020000
 8006a08:	40020400 	.word	0x40020400
 8006a0c:	40020800 	.word	0x40020800
 8006a10:	40020c00 	.word	0x40020c00
 8006a14:	40021000 	.word	0x40021000
 8006a18:	40021400 	.word	0x40021400
 8006a1c:	40021800 	.word	0x40021800
 8006a20:	40021c00 	.word	0x40021c00
 8006a24:	40013c00 	.word	0x40013c00

08006a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	887b      	ldrh	r3, [r7, #2]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
 8006a44:	e001      	b.n	8006a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	807b      	strh	r3, [r7, #2]
 8006a64:	4613      	mov	r3, r2
 8006a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a68:	787b      	ldrb	r3, [r7, #1]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a6e:	887a      	ldrh	r2, [r7, #2]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a74:	e003      	b.n	8006a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	041a      	lsls	r2, r3, #16
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	619a      	str	r2, [r3, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
	...

08006a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e12b      	b.n	8006cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fd f818 	bl	8003ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	; 0x24
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0201 	bic.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006af0:	f000 fd5a 	bl	80075a8 <HAL_RCC_GetPCLK1Freq>
 8006af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4a81      	ldr	r2, [pc, #516]	; (8006d00 <HAL_I2C_Init+0x274>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d807      	bhi.n	8006b10 <HAL_I2C_Init+0x84>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a80      	ldr	r2, [pc, #512]	; (8006d04 <HAL_I2C_Init+0x278>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	bf94      	ite	ls
 8006b08:	2301      	movls	r3, #1
 8006b0a:	2300      	movhi	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	e006      	b.n	8006b1e <HAL_I2C_Init+0x92>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a7d      	ldr	r2, [pc, #500]	; (8006d08 <HAL_I2C_Init+0x27c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	bf94      	ite	ls
 8006b18:	2301      	movls	r3, #1
 8006b1a:	2300      	movhi	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e0e7      	b.n	8006cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a78      	ldr	r2, [pc, #480]	; (8006d0c <HAL_I2C_Init+0x280>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	0c9b      	lsrs	r3, r3, #18
 8006b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	4a6a      	ldr	r2, [pc, #424]	; (8006d00 <HAL_I2C_Init+0x274>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d802      	bhi.n	8006b60 <HAL_I2C_Init+0xd4>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	e009      	b.n	8006b74 <HAL_I2C_Init+0xe8>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	4a69      	ldr	r2, [pc, #420]	; (8006d10 <HAL_I2C_Init+0x284>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	099b      	lsrs	r3, r3, #6
 8006b72:	3301      	adds	r3, #1
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	495c      	ldr	r1, [pc, #368]	; (8006d00 <HAL_I2C_Init+0x274>)
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d819      	bhi.n	8006bc8 <HAL_I2C_Init+0x13c>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	1e59      	subs	r1, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ba2:	1c59      	adds	r1, r3, #1
 8006ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ba8:	400b      	ands	r3, r1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_I2C_Init+0x138>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1e59      	subs	r1, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc2:	e051      	b.n	8006c68 <HAL_I2C_Init+0x1dc>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	e04f      	b.n	8006c68 <HAL_I2C_Init+0x1dc>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d111      	bne.n	8006bf4 <HAL_I2C_Init+0x168>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	1e58      	subs	r0, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6859      	ldr	r1, [r3, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	440b      	add	r3, r1
 8006bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006be2:	3301      	adds	r3, #1
 8006be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	bf0c      	ite	eq
 8006bec:	2301      	moveq	r3, #1
 8006bee:	2300      	movne	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	e012      	b.n	8006c1a <HAL_I2C_Init+0x18e>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	1e58      	subs	r0, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6859      	ldr	r1, [r3, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	0099      	lsls	r1, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_I2C_Init+0x196>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e022      	b.n	8006c68 <HAL_I2C_Init+0x1dc>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10e      	bne.n	8006c48 <HAL_I2C_Init+0x1bc>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1e58      	subs	r0, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6859      	ldr	r1, [r3, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	440b      	add	r3, r1
 8006c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c46:	e00f      	b.n	8006c68 <HAL_I2C_Init+0x1dc>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	1e58      	subs	r0, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	0099      	lsls	r1, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	6809      	ldr	r1, [r1, #0]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6911      	ldr	r1, [r2, #16]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	68d2      	ldr	r2, [r2, #12]
 8006ca2:	4311      	orrs	r1, r2
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	000186a0 	.word	0x000186a0
 8006d04:	001e847f 	.word	0x001e847f
 8006d08:	003d08ff 	.word	0x003d08ff
 8006d0c:	431bde83 	.word	0x431bde83
 8006d10:	10624dd3 	.word	0x10624dd3

08006d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e264      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d075      	beq.n	8006e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d32:	4ba3      	ldr	r3, [pc, #652]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 030c 	and.w	r3, r3, #12
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d00c      	beq.n	8006d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d3e:	4ba0      	ldr	r3, [pc, #640]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d112      	bne.n	8006d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d4a:	4b9d      	ldr	r3, [pc, #628]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d56:	d10b      	bne.n	8006d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d58:	4b99      	ldr	r3, [pc, #612]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d05b      	beq.n	8006e1c <HAL_RCC_OscConfig+0x108>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d157      	bne.n	8006e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e23f      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d78:	d106      	bne.n	8006d88 <HAL_RCC_OscConfig+0x74>
 8006d7a:	4b91      	ldr	r3, [pc, #580]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a90      	ldr	r2, [pc, #576]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	e01d      	b.n	8006dc4 <HAL_RCC_OscConfig+0xb0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d90:	d10c      	bne.n	8006dac <HAL_RCC_OscConfig+0x98>
 8006d92:	4b8b      	ldr	r3, [pc, #556]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a8a      	ldr	r2, [pc, #552]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4b88      	ldr	r3, [pc, #544]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a87      	ldr	r2, [pc, #540]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e00b      	b.n	8006dc4 <HAL_RCC_OscConfig+0xb0>
 8006dac:	4b84      	ldr	r3, [pc, #528]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a83      	ldr	r2, [pc, #524]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	4b81      	ldr	r3, [pc, #516]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a80      	ldr	r2, [pc, #512]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d013      	beq.n	8006df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dcc:	f7fe f834 	bl	8004e38 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd4:	f7fe f830 	bl	8004e38 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	; 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e204      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006de6:	4b76      	ldr	r3, [pc, #472]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCC_OscConfig+0xc0>
 8006df2:	e014      	b.n	8006e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df4:	f7fe f820 	bl	8004e38 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dfc:	f7fe f81c 	bl	8004e38 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b64      	cmp	r3, #100	; 0x64
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e1f0      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e0e:	4b6c      	ldr	r3, [pc, #432]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0xe8>
 8006e1a:	e000      	b.n	8006e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d063      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e2a:	4b65      	ldr	r3, [pc, #404]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 030c 	and.w	r3, r3, #12
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e36:	4b62      	ldr	r3, [pc, #392]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d11c      	bne.n	8006e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e42:	4b5f      	ldr	r3, [pc, #380]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d116      	bne.n	8006e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e4e:	4b5c      	ldr	r3, [pc, #368]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_RCC_OscConfig+0x152>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d001      	beq.n	8006e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e1c4      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e66:	4b56      	ldr	r3, [pc, #344]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	4952      	ldr	r1, [pc, #328]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7a:	e03a      	b.n	8006ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d020      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e84:	4b4f      	ldr	r3, [pc, #316]	; (8006fc4 <HAL_RCC_OscConfig+0x2b0>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8a:	f7fd ffd5 	bl	8004e38 <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e90:	e008      	b.n	8006ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e92:	f7fd ffd1 	bl	8004e38 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e1a5      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea4:	4b46      	ldr	r3, [pc, #280]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0f0      	beq.n	8006e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb0:	4b43      	ldr	r3, [pc, #268]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	4940      	ldr	r1, [pc, #256]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	600b      	str	r3, [r1, #0]
 8006ec4:	e015      	b.n	8006ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ec6:	4b3f      	ldr	r3, [pc, #252]	; (8006fc4 <HAL_RCC_OscConfig+0x2b0>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ecc:	f7fd ffb4 	bl	8004e38 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ed4:	f7fd ffb0 	bl	8004e38 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e184      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d030      	beq.n	8006f60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d016      	beq.n	8006f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f06:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <HAL_RCC_OscConfig+0x2b4>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0c:	f7fd ff94 	bl	8004e38 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f14:	f7fd ff90 	bl	8004e38 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e164      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f26:	4b26      	ldr	r3, [pc, #152]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x200>
 8006f32:	e015      	b.n	8006f60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f34:	4b24      	ldr	r3, [pc, #144]	; (8006fc8 <HAL_RCC_OscConfig+0x2b4>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f3a:	f7fd ff7d 	bl	8004e38 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f42:	f7fd ff79 	bl	8004e38 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e14d      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f54:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f0      	bne.n	8006f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80a0 	beq.w	80070ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10f      	bne.n	8006f9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60bb      	str	r3, [r7, #8]
 8006f82:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	4a0e      	ldr	r2, [pc, #56]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <HAL_RCC_OscConfig+0x2ac>)
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f96:	60bb      	str	r3, [r7, #8]
 8006f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCC_OscConfig+0x2b8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d121      	bne.n	8006fee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <HAL_RCC_OscConfig+0x2b8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a07      	ldr	r2, [pc, #28]	; (8006fcc <HAL_RCC_OscConfig+0x2b8>)
 8006fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fb6:	f7fd ff3f 	bl	8004e38 <HAL_GetTick>
 8006fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fbc:	e011      	b.n	8006fe2 <HAL_RCC_OscConfig+0x2ce>
 8006fbe:	bf00      	nop
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	42470000 	.word	0x42470000
 8006fc8:	42470e80 	.word	0x42470e80
 8006fcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fd0:	f7fd ff32 	bl	8004e38 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e106      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe2:	4b85      	ldr	r3, [pc, #532]	; (80071f8 <HAL_RCC_OscConfig+0x4e4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f0      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d106      	bne.n	8007004 <HAL_RCC_OscConfig+0x2f0>
 8006ff6:	4b81      	ldr	r3, [pc, #516]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	4a80      	ldr	r2, [pc, #512]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	6713      	str	r3, [r2, #112]	; 0x70
 8007002:	e01c      	b.n	800703e <HAL_RCC_OscConfig+0x32a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b05      	cmp	r3, #5
 800700a:	d10c      	bne.n	8007026 <HAL_RCC_OscConfig+0x312>
 800700c:	4b7b      	ldr	r3, [pc, #492]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	4a7a      	ldr	r2, [pc, #488]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007012:	f043 0304 	orr.w	r3, r3, #4
 8007016:	6713      	str	r3, [r2, #112]	; 0x70
 8007018:	4b78      	ldr	r3, [pc, #480]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	4a77      	ldr	r2, [pc, #476]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	6713      	str	r3, [r2, #112]	; 0x70
 8007024:	e00b      	b.n	800703e <HAL_RCC_OscConfig+0x32a>
 8007026:	4b75      	ldr	r3, [pc, #468]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	4a74      	ldr	r2, [pc, #464]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 800702c:	f023 0301 	bic.w	r3, r3, #1
 8007030:	6713      	str	r3, [r2, #112]	; 0x70
 8007032:	4b72      	ldr	r3, [pc, #456]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	4a71      	ldr	r2, [pc, #452]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007038:	f023 0304 	bic.w	r3, r3, #4
 800703c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d015      	beq.n	8007072 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007046:	f7fd fef7 	bl	8004e38 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704c:	e00a      	b.n	8007064 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800704e:	f7fd fef3 	bl	8004e38 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	f241 3288 	movw	r2, #5000	; 0x1388
 800705c:	4293      	cmp	r3, r2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e0c5      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007064:	4b65      	ldr	r3, [pc, #404]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0ee      	beq.n	800704e <HAL_RCC_OscConfig+0x33a>
 8007070:	e014      	b.n	800709c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007072:	f7fd fee1 	bl	8004e38 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007078:	e00a      	b.n	8007090 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707a:	f7fd fedd 	bl	8004e38 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	f241 3288 	movw	r2, #5000	; 0x1388
 8007088:	4293      	cmp	r3, r2
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e0af      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007090:	4b5a      	ldr	r3, [pc, #360]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1ee      	bne.n	800707a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d105      	bne.n	80070ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a2:	4b56      	ldr	r3, [pc, #344]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	4a55      	ldr	r2, [pc, #340]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 80070a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 809b 	beq.w	80071ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070b8:	4b50      	ldr	r3, [pc, #320]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 030c 	and.w	r3, r3, #12
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d05c      	beq.n	800717e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d141      	bne.n	8007150 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070cc:	4b4c      	ldr	r3, [pc, #304]	; (8007200 <HAL_RCC_OscConfig+0x4ec>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d2:	f7fd feb1 	bl	8004e38 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070da:	f7fd fead 	bl	8004e38 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e081      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ec:	4b43      	ldr	r3, [pc, #268]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f0      	bne.n	80070da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	019b      	lsls	r3, r3, #6
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	3b01      	subs	r3, #1
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	4937      	ldr	r1, [pc, #220]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 800711e:	4313      	orrs	r3, r2
 8007120:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007122:	4b37      	ldr	r3, [pc, #220]	; (8007200 <HAL_RCC_OscConfig+0x4ec>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007128:	f7fd fe86 	bl	8004e38 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007130:	f7fd fe82 	bl	8004e38 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e056      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007142:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0f0      	beq.n	8007130 <HAL_RCC_OscConfig+0x41c>
 800714e:	e04e      	b.n	80071ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007150:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCC_OscConfig+0x4ec>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007156:	f7fd fe6f 	bl	8004e38 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715e:	f7fd fe6b 	bl	8004e38 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e03f      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007170:	4b22      	ldr	r3, [pc, #136]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f0      	bne.n	800715e <HAL_RCC_OscConfig+0x44a>
 800717c:	e037      	b.n	80071ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e032      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800718a:	4b1c      	ldr	r3, [pc, #112]	; (80071fc <HAL_RCC_OscConfig+0x4e8>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d028      	beq.n	80071ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d121      	bne.n	80071ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d11a      	bne.n	80071ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071ba:	4013      	ands	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d111      	bne.n	80071ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	3b01      	subs	r3, #1
 80071d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d107      	bne.n	80071ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d001      	beq.n	80071ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40007000 	.word	0x40007000
 80071fc:	40023800 	.word	0x40023800
 8007200:	42470060 	.word	0x42470060

08007204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e0cc      	b.n	80073b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007218:	4b68      	ldr	r3, [pc, #416]	; (80073bc <HAL_RCC_ClockConfig+0x1b8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d90c      	bls.n	8007240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007226:	4b65      	ldr	r3, [pc, #404]	; (80073bc <HAL_RCC_ClockConfig+0x1b8>)
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800722e:	4b63      	ldr	r3, [pc, #396]	; (80073bc <HAL_RCC_ClockConfig+0x1b8>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	429a      	cmp	r2, r3
 800723a:	d001      	beq.n	8007240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e0b8      	b.n	80073b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d020      	beq.n	800728e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007258:	4b59      	ldr	r3, [pc, #356]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	4a58      	ldr	r2, [pc, #352]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007270:	4b53      	ldr	r3, [pc, #332]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	4a52      	ldr	r2, [pc, #328]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800727a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800727c:	4b50      	ldr	r3, [pc, #320]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	494d      	ldr	r1, [pc, #308]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	4313      	orrs	r3, r2
 800728c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d044      	beq.n	8007324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d107      	bne.n	80072b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072a2:	4b47      	ldr	r3, [pc, #284]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d119      	bne.n	80072e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e07f      	b.n	80073b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d003      	beq.n	80072c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d107      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c2:	4b3f      	ldr	r3, [pc, #252]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d109      	bne.n	80072e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e06f      	b.n	80073b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d2:	4b3b      	ldr	r3, [pc, #236]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e067      	b.n	80073b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072e2:	4b37      	ldr	r3, [pc, #220]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f023 0203 	bic.w	r2, r3, #3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	4934      	ldr	r1, [pc, #208]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072f4:	f7fd fda0 	bl	8004e38 <HAL_GetTick>
 80072f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fa:	e00a      	b.n	8007312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072fc:	f7fd fd9c 	bl	8004e38 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	f241 3288 	movw	r2, #5000	; 0x1388
 800730a:	4293      	cmp	r3, r2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e04f      	b.n	80073b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007312:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 020c 	and.w	r2, r3, #12
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	429a      	cmp	r2, r3
 8007322:	d1eb      	bne.n	80072fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007324:	4b25      	ldr	r3, [pc, #148]	; (80073bc <HAL_RCC_ClockConfig+0x1b8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d20c      	bcs.n	800734c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007332:	4b22      	ldr	r3, [pc, #136]	; (80073bc <HAL_RCC_ClockConfig+0x1b8>)
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800733a:	4b20      	ldr	r3, [pc, #128]	; (80073bc <HAL_RCC_ClockConfig+0x1b8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d001      	beq.n	800734c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e032      	b.n	80073b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d008      	beq.n	800736a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007358:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	4916      	ldr	r1, [pc, #88]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007366:	4313      	orrs	r3, r2
 8007368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d009      	beq.n	800738a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007376:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	490e      	ldr	r1, [pc, #56]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	4313      	orrs	r3, r2
 8007388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800738a:	f000 f821 	bl	80073d0 <HAL_RCC_GetSysClockFreq>
 800738e:	4602      	mov	r2, r0
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	091b      	lsrs	r3, r3, #4
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	490a      	ldr	r1, [pc, #40]	; (80073c4 <HAL_RCC_ClockConfig+0x1c0>)
 800739c:	5ccb      	ldrb	r3, [r1, r3]
 800739e:	fa22 f303 	lsr.w	r3, r2, r3
 80073a2:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 80073a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073a6:	4b09      	ldr	r3, [pc, #36]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fd fd00 	bl	8004db0 <HAL_InitTick>

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	40023c00 	.word	0x40023c00
 80073c0:	40023800 	.word	0x40023800
 80073c4:	0800e7c4 	.word	0x0800e7c4
 80073c8:	20000000 	.word	0x20000000
 80073cc:	20000004 	.word	0x20000004

080073d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	607b      	str	r3, [r7, #4]
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	2300      	movs	r3, #0
 80073e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073e8:	4b67      	ldr	r3, [pc, #412]	; (8007588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 030c 	and.w	r3, r3, #12
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d00d      	beq.n	8007410 <HAL_RCC_GetSysClockFreq+0x40>
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	f200 80bd 	bhi.w	8007574 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_RCC_GetSysClockFreq+0x34>
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d003      	beq.n	800740a <HAL_RCC_GetSysClockFreq+0x3a>
 8007402:	e0b7      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007404:	4b61      	ldr	r3, [pc, #388]	; (800758c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007406:	60bb      	str	r3, [r7, #8]
       break;
 8007408:	e0b7      	b.n	800757a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800740a:	4b60      	ldr	r3, [pc, #384]	; (800758c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800740c:	60bb      	str	r3, [r7, #8]
      break;
 800740e:	e0b4      	b.n	800757a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007410:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007418:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800741a:	4b5b      	ldr	r3, [pc, #364]	; (8007588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d04d      	beq.n	80074c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007426:	4b58      	ldr	r3, [pc, #352]	; (8007588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	099b      	lsrs	r3, r3, #6
 800742c:	461a      	mov	r2, r3
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007436:	f04f 0100 	mov.w	r1, #0
 800743a:	ea02 0800 	and.w	r8, r2, r0
 800743e:	ea03 0901 	and.w	r9, r3, r1
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	014b      	lsls	r3, r1, #5
 8007450:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007454:	0142      	lsls	r2, r0, #5
 8007456:	4610      	mov	r0, r2
 8007458:	4619      	mov	r1, r3
 800745a:	ebb0 0008 	subs.w	r0, r0, r8
 800745e:	eb61 0109 	sbc.w	r1, r1, r9
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	018b      	lsls	r3, r1, #6
 800746c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007470:	0182      	lsls	r2, r0, #6
 8007472:	1a12      	subs	r2, r2, r0
 8007474:	eb63 0301 	sbc.w	r3, r3, r1
 8007478:	f04f 0000 	mov.w	r0, #0
 800747c:	f04f 0100 	mov.w	r1, #0
 8007480:	00d9      	lsls	r1, r3, #3
 8007482:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007486:	00d0      	lsls	r0, r2, #3
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	eb12 0208 	adds.w	r2, r2, r8
 8007490:	eb43 0309 	adc.w	r3, r3, r9
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	f04f 0100 	mov.w	r1, #0
 800749c:	0299      	lsls	r1, r3, #10
 800749e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80074a2:	0290      	lsls	r0, r2, #10
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	f7f9 fbe8 	bl	8000c88 <__aeabi_uldivmod>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4613      	mov	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	e04a      	b.n	8007558 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074c2:	4b31      	ldr	r3, [pc, #196]	; (8007588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	099b      	lsrs	r3, r3, #6
 80074c8:	461a      	mov	r2, r3
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074d2:	f04f 0100 	mov.w	r1, #0
 80074d6:	ea02 0400 	and.w	r4, r2, r0
 80074da:	ea03 0501 	and.w	r5, r3, r1
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f04f 0200 	mov.w	r2, #0
 80074e6:	f04f 0300 	mov.w	r3, #0
 80074ea:	014b      	lsls	r3, r1, #5
 80074ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074f0:	0142      	lsls	r2, r0, #5
 80074f2:	4610      	mov	r0, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	1b00      	subs	r0, r0, r4
 80074f8:	eb61 0105 	sbc.w	r1, r1, r5
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	018b      	lsls	r3, r1, #6
 8007506:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800750a:	0182      	lsls	r2, r0, #6
 800750c:	1a12      	subs	r2, r2, r0
 800750e:	eb63 0301 	sbc.w	r3, r3, r1
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f04f 0100 	mov.w	r1, #0
 800751a:	00d9      	lsls	r1, r3, #3
 800751c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007520:	00d0      	lsls	r0, r2, #3
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	1912      	adds	r2, r2, r4
 8007528:	eb45 0303 	adc.w	r3, r5, r3
 800752c:	f04f 0000 	mov.w	r0, #0
 8007530:	f04f 0100 	mov.w	r1, #0
 8007534:	0299      	lsls	r1, r3, #10
 8007536:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800753a:	0290      	lsls	r0, r2, #10
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4610      	mov	r0, r2
 8007542:	4619      	mov	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	461a      	mov	r2, r3
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	f7f9 fb9c 	bl	8000c88 <__aeabi_uldivmod>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4613      	mov	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007558:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	0c1b      	lsrs	r3, r3, #16
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	3301      	adds	r3, #1
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007570:	60bb      	str	r3, [r7, #8]
      break;
 8007572:	e002      	b.n	800757a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007576:	60bb      	str	r3, [r7, #8]
      break;
 8007578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800757a:	68bb      	ldr	r3, [r7, #8]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800
 800758c:	00f42400 	.word	0x00f42400

08007590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007594:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007596:	681b      	ldr	r3, [r3, #0]
}
 8007598:	4618      	mov	r0, r3
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000000 	.word	0x20000000

080075a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075ac:	f7ff fff0 	bl	8007590 <HAL_RCC_GetHCLKFreq>
 80075b0:	4602      	mov	r2, r0
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	0a9b      	lsrs	r3, r3, #10
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	4903      	ldr	r1, [pc, #12]	; (80075cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075be:	5ccb      	ldrb	r3, [r1, r3]
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40023800 	.word	0x40023800
 80075cc:	0800e7d4 	.word	0x0800e7d4

080075d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075d4:	f7ff ffdc 	bl	8007590 <HAL_RCC_GetHCLKFreq>
 80075d8:	4602      	mov	r2, r0
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	0b5b      	lsrs	r3, r3, #13
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	4903      	ldr	r1, [pc, #12]	; (80075f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075e6:	5ccb      	ldrb	r3, [r1, r3]
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40023800 	.word	0x40023800
 80075f4:	0800e7d4 	.word	0x0800e7d4

080075f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e07b      	b.n	8007702 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2b00      	cmp	r3, #0
 8007610:	d108      	bne.n	8007624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800761a:	d009      	beq.n	8007630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	61da      	str	r2, [r3, #28]
 8007622:	e005      	b.n	8007630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fc fa94 	bl	8003b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b4:	ea42 0103 	orr.w	r1, r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	f003 0104 	and.w	r1, r3, #4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	f003 0210 	and.w	r2, r3, #16
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b088      	sub	sp, #32
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	603b      	str	r3, [r7, #0]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_SPI_Transmit+0x22>
 8007728:	2302      	movs	r3, #2
 800772a:	e126      	b.n	800797a <HAL_SPI_Transmit+0x270>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007734:	f7fd fb80 	bl	8004e38 <HAL_GetTick>
 8007738:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d002      	beq.n	8007750 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800774a:	2302      	movs	r3, #2
 800774c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800774e:	e10b      	b.n	8007968 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <HAL_SPI_Transmit+0x52>
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007760:	e102      	b.n	8007968 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2203      	movs	r2, #3
 8007766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	88fa      	ldrh	r2, [r7, #6]
 800777a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	88fa      	ldrh	r2, [r7, #6]
 8007780:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a8:	d10f      	bne.n	80077ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	d007      	beq.n	80077e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077f0:	d14b      	bne.n	800788a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_SPI_Transmit+0xf6>
 80077fa:	8afb      	ldrh	r3, [r7, #22]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d13e      	bne.n	800787e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	1c9a      	adds	r2, r3, #2
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007824:	e02b      	b.n	800787e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b02      	cmp	r3, #2
 8007832:	d112      	bne.n	800785a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	881a      	ldrh	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	1c9a      	adds	r2, r3, #2
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	86da      	strh	r2, [r3, #54]	; 0x36
 8007858:	e011      	b.n	800787e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800785a:	f7fd faed 	bl	8004e38 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d803      	bhi.n	8007872 <HAL_SPI_Transmit+0x168>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007870:	d102      	bne.n	8007878 <HAL_SPI_Transmit+0x16e>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800787c:	e074      	b.n	8007968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1ce      	bne.n	8007826 <HAL_SPI_Transmit+0x11c>
 8007888:	e04c      	b.n	8007924 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_SPI_Transmit+0x18e>
 8007892:	8afb      	ldrh	r3, [r7, #22]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d140      	bne.n	800791a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078be:	e02c      	b.n	800791a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d113      	bne.n	80078f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	7812      	ldrb	r2, [r2, #0]
 80078da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80078f4:	e011      	b.n	800791a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f6:	f7fd fa9f 	bl	8004e38 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d803      	bhi.n	800790e <HAL_SPI_Transmit+0x204>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d102      	bne.n	8007914 <HAL_SPI_Transmit+0x20a>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007918:	e026      	b.n	8007968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1cd      	bne.n	80078c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fbcb 	bl	80080c4 <SPI_EndRxTxTransaction>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	77fb      	strb	r3, [r7, #31]
 8007964:	e000      	b.n	8007968 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007978:	7ffb      	ldrb	r3, [r7, #31]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b088      	sub	sp, #32
 8007986:	af02      	add	r7, sp, #8
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800799e:	d112      	bne.n	80079c6 <HAL_SPI_Receive+0x44>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10e      	bne.n	80079c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2204      	movs	r2, #4
 80079ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	4613      	mov	r3, r2
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f8f1 	bl	8007ba4 <HAL_SPI_TransmitReceive>
 80079c2:	4603      	mov	r3, r0
 80079c4:	e0ea      	b.n	8007b9c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <HAL_SPI_Receive+0x52>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e0e3      	b.n	8007b9c <HAL_SPI_Receive+0x21a>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079dc:	f7fd fa2c 	bl	8004e38 <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d002      	beq.n	80079f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80079ee:	2302      	movs	r3, #2
 80079f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079f2:	e0ca      	b.n	8007b8a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <HAL_SPI_Receive+0x7e>
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a04:	e0c1      	b.n	8007b8a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	88fa      	ldrh	r2, [r7, #6]
 8007a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4c:	d10f      	bne.n	8007a6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	d007      	beq.n	8007a8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d162      	bne.n	8007b5a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a94:	e02e      	b.n	8007af4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d115      	bne.n	8007ad0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f103 020c 	add.w	r2, r3, #12
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	7812      	ldrb	r2, [r2, #0]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ace:	e011      	b.n	8007af4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ad0:	f7fd f9b2 	bl	8004e38 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d803      	bhi.n	8007ae8 <HAL_SPI_Receive+0x166>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d102      	bne.n	8007aee <HAL_SPI_Receive+0x16c>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007af2:	e04a      	b.n	8007b8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1cb      	bne.n	8007a96 <HAL_SPI_Receive+0x114>
 8007afe:	e031      	b.n	8007b64 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d113      	bne.n	8007b36 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b34:	e011      	b.n	8007b5a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b36:	f7fd f97f 	bl	8004e38 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d803      	bhi.n	8007b4e <HAL_SPI_Receive+0x1cc>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d102      	bne.n	8007b54 <HAL_SPI_Receive+0x1d2>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d102      	bne.n	8007b5a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b58:	e017      	b.n	8007b8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1cd      	bne.n	8007b00 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 fa45 	bl	8007ff8 <SPI_EndRxTransaction>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]
 8007b86:	e000      	b.n	8007b8a <HAL_SPI_Receive+0x208>
  }

error :
 8007b88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08c      	sub	sp, #48	; 0x30
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <HAL_SPI_TransmitReceive+0x26>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e18a      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x33c>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bd2:	f7fd f931 	bl	8004e38 <HAL_GetTick>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007be8:	887b      	ldrh	r3, [r7, #2]
 8007bea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d00f      	beq.n	8007c14 <HAL_SPI_TransmitReceive+0x70>
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bfa:	d107      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x68>
 8007c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d003      	beq.n	8007c14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c12:	e15b      	b.n	8007ecc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <HAL_SPI_TransmitReceive+0x82>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_SPI_TransmitReceive+0x82>
 8007c20:	887b      	ldrh	r3, [r7, #2]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c2c:	e14e      	b.n	8007ecc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d003      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2205      	movs	r2, #5
 8007c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	887a      	ldrh	r2, [r7, #2]
 8007c52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	887a      	ldrh	r2, [r7, #2]
 8007c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	887a      	ldrh	r2, [r7, #2]
 8007c64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	887a      	ldrh	r2, [r7, #2]
 8007c6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d007      	beq.n	8007c96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9e:	d178      	bne.n	8007d92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x10a>
 8007ca8:	8b7b      	ldrh	r3, [r7, #26]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d166      	bne.n	8007d7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	881a      	ldrh	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	1c9a      	adds	r2, r3, #2
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd2:	e053      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d11b      	bne.n	8007d1a <HAL_SPI_TransmitReceive+0x176>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d016      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x176>
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d113      	bne.n	8007d1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	881a      	ldrh	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	1c9a      	adds	r2, r3, #2
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d119      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x1b8>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d014      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	b292      	uxth	r2, r2
 8007d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	1c9a      	adds	r2, r3, #2
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d5c:	f7fd f86c 	bl	8004e38 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d807      	bhi.n	8007d7c <HAL_SPI_TransmitReceive+0x1d8>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d003      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d7a:	e0a7      	b.n	8007ecc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1a6      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x130>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1a1      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x130>
 8007d90:	e07c      	b.n	8007e8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_SPI_TransmitReceive+0x1fc>
 8007d9a:	8b7b      	ldrh	r3, [r7, #26]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d16b      	bne.n	8007e78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc6:	e057      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d11c      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x26c>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d017      	beq.n	8007e10 <HAL_SPI_TransmitReceive+0x26c>
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d114      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d119      	bne.n	8007e52 <HAL_SPI_TransmitReceive+0x2ae>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d014      	beq.n	8007e52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e52:	f7fc fff1 	bl	8004e38 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d803      	bhi.n	8007e6a <HAL_SPI_TransmitReceive+0x2c6>
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e68:	d102      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x2cc>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d103      	bne.n	8007e78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e76:	e029      	b.n	8007ecc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1a2      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x224>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d19d      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f917 	bl	80080c4 <SPI_EndRxTxTransaction>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d006      	beq.n	8007eaa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ea8:	e010      	b.n	8007ecc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10b      	bne.n	8007eca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	e000      	b.n	8007ecc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3730      	adds	r7, #48	; 0x30
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ef8:	f7fc ff9e 	bl	8004e38 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f08:	f7fc ff96 	bl	8004e38 <HAL_GetTick>
 8007f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f0e:	4b39      	ldr	r3, [pc, #228]	; (8007ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	015b      	lsls	r3, r3, #5
 8007f14:	0d1b      	lsrs	r3, r3, #20
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	fb02 f303 	mul.w	r3, r2, r3
 8007f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f1e:	e054      	b.n	8007fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d050      	beq.n	8007fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f28:	f7fc ff86 	bl	8004e38 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d902      	bls.n	8007f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d13d      	bne.n	8007fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f56:	d111      	bne.n	8007f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f60:	d004      	beq.n	8007f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6a:	d107      	bne.n	8007f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f84:	d10f      	bne.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e017      	b.n	8007fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	bf0c      	ite	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	2300      	movne	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d19b      	bne.n	8007f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000000 	.word	0x20000000

08007ff8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800800c:	d111      	bne.n	8008032 <SPI_EndRxTransaction+0x3a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008016:	d004      	beq.n	8008022 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008020:	d107      	bne.n	8008032 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008030:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800803a:	d12a      	bne.n	8008092 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008044:	d012      	beq.n	800806c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ff49 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d02d      	beq.n	80080b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e026      	b.n	80080ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	2101      	movs	r1, #1
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff ff36 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d01a      	beq.n	80080b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	f043 0220 	orr.w	r2, r3, #32
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e013      	b.n	80080ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	2101      	movs	r1, #1
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff ff23 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ac:	f043 0220 	orr.w	r2, r3, #32
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e000      	b.n	80080ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <SPI_EndRxTxTransaction+0x7c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a1b      	ldr	r2, [pc, #108]	; (8008144 <SPI_EndRxTxTransaction+0x80>)
 80080d6:	fba2 2303 	umull	r2, r3, r2, r3
 80080da:	0d5b      	lsrs	r3, r3, #21
 80080dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ee:	d112      	bne.n	8008116 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2200      	movs	r2, #0
 80080f8:	2180      	movs	r1, #128	; 0x80
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff fef4 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d016      	beq.n	8008134 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810a:	f043 0220 	orr.w	r2, r3, #32
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e00f      	b.n	8008136 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	3b01      	subs	r3, #1
 8008120:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812c:	2b80      	cmp	r3, #128	; 0x80
 800812e:	d0f2      	beq.n	8008116 <SPI_EndRxTxTransaction+0x52>
 8008130:	e000      	b.n	8008134 <SPI_EndRxTxTransaction+0x70>
        break;
 8008132:	bf00      	nop
  }

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000000 	.word	0x20000000
 8008144:	165e9f81 	.word	0x165e9f81

08008148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e041      	b.n	80081de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fb fdfa 	bl	8003d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f000 fe12 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d001      	beq.n	8008200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e04e      	b.n	800829e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a23      	ldr	r2, [pc, #140]	; (80082ac <HAL_TIM_Base_Start_IT+0xc4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d022      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x80>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822a:	d01d      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x80>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a1f      	ldr	r2, [pc, #124]	; (80082b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d018      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x80>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a1e      	ldr	r2, [pc, #120]	; (80082b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d013      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x80>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1c      	ldr	r2, [pc, #112]	; (80082b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00e      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x80>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1b      	ldr	r2, [pc, #108]	; (80082bc <HAL_TIM_Base_Start_IT+0xd4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d009      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x80>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x80>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a18      	ldr	r2, [pc, #96]	; (80082c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d111      	bne.n	800828c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b06      	cmp	r3, #6
 8008278:	d010      	beq.n	800829c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f042 0201 	orr.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828a:	e007      	b.n	800829c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0201 	orr.w	r2, r2, #1
 800829a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40000400 	.word	0x40000400
 80082b4:	40000800 	.word	0x40000800
 80082b8:	40000c00 	.word	0x40000c00
 80082bc:	40010400 	.word	0x40010400
 80082c0:	40014000 	.word	0x40014000
 80082c4:	40001800 	.word	0x40001800

080082c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0201 	bic.w	r2, r2, #1
 80082de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6a1a      	ldr	r2, [r3, #32]
 80082e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10f      	bne.n	8008310 <HAL_TIM_Base_Stop_IT+0x48>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6a1a      	ldr	r2, [r3, #32]
 80082f6:	f240 4344 	movw	r3, #1092	; 0x444
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d107      	bne.n	8008310 <HAL_TIM_Base_Stop_IT+0x48>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0201 	bic.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e041      	b.n	80083bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d106      	bne.n	8008352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7fb fce9 	bl	8003d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3304      	adds	r3, #4
 8008362:	4619      	mov	r1, r3
 8008364:	4610      	mov	r0, r2
 8008366:	f000 fd23 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <HAL_TIM_PWM_Start+0x24>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	bf14      	ite	ne
 80083e0:	2301      	movne	r3, #1
 80083e2:	2300      	moveq	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	e022      	b.n	800842e <HAL_TIM_PWM_Start+0x6a>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d109      	bne.n	8008402 <HAL_TIM_PWM_Start+0x3e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	bf14      	ite	ne
 80083fa:	2301      	movne	r3, #1
 80083fc:	2300      	moveq	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e015      	b.n	800842e <HAL_TIM_PWM_Start+0x6a>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d109      	bne.n	800841c <HAL_TIM_PWM_Start+0x58>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf14      	ite	ne
 8008414:	2301      	movne	r3, #1
 8008416:	2300      	moveq	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	e008      	b.n	800842e <HAL_TIM_PWM_Start+0x6a>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	bf14      	ite	ne
 8008428:	2301      	movne	r3, #1
 800842a:	2300      	moveq	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e07c      	b.n	8008530 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <HAL_TIM_PWM_Start+0x82>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008444:	e013      	b.n	800846e <HAL_TIM_PWM_Start+0xaa>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d104      	bne.n	8008456 <HAL_TIM_PWM_Start+0x92>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008454:	e00b      	b.n	800846e <HAL_TIM_PWM_Start+0xaa>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d104      	bne.n	8008466 <HAL_TIM_PWM_Start+0xa2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008464:	e003      	b.n	800846e <HAL_TIM_PWM_Start+0xaa>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2202      	movs	r2, #2
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2201      	movs	r2, #1
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 feea 	bl	8009250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2d      	ldr	r2, [pc, #180]	; (8008538 <HAL_TIM_PWM_Start+0x174>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d004      	beq.n	8008490 <HAL_TIM_PWM_Start+0xcc>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a2c      	ldr	r2, [pc, #176]	; (800853c <HAL_TIM_PWM_Start+0x178>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d101      	bne.n	8008494 <HAL_TIM_PWM_Start+0xd0>
 8008490:	2301      	movs	r3, #1
 8008492:	e000      	b.n	8008496 <HAL_TIM_PWM_Start+0xd2>
 8008494:	2300      	movs	r3, #0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a22      	ldr	r2, [pc, #136]	; (8008538 <HAL_TIM_PWM_Start+0x174>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d022      	beq.n	80084fa <HAL_TIM_PWM_Start+0x136>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084bc:	d01d      	beq.n	80084fa <HAL_TIM_PWM_Start+0x136>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <HAL_TIM_PWM_Start+0x17c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d018      	beq.n	80084fa <HAL_TIM_PWM_Start+0x136>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1d      	ldr	r2, [pc, #116]	; (8008544 <HAL_TIM_PWM_Start+0x180>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <HAL_TIM_PWM_Start+0x136>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1c      	ldr	r2, [pc, #112]	; (8008548 <HAL_TIM_PWM_Start+0x184>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00e      	beq.n	80084fa <HAL_TIM_PWM_Start+0x136>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a16      	ldr	r2, [pc, #88]	; (800853c <HAL_TIM_PWM_Start+0x178>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_TIM_PWM_Start+0x136>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a18      	ldr	r2, [pc, #96]	; (800854c <HAL_TIM_PWM_Start+0x188>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d004      	beq.n	80084fa <HAL_TIM_PWM_Start+0x136>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a16      	ldr	r2, [pc, #88]	; (8008550 <HAL_TIM_PWM_Start+0x18c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d111      	bne.n	800851e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b06      	cmp	r3, #6
 800850a:	d010      	beq.n	800852e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851c:	e007      	b.n	800852e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0201 	orr.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40010000 	.word	0x40010000
 800853c:	40010400 	.word	0x40010400
 8008540:	40000400 	.word	0x40000400
 8008544:	40000800 	.word	0x40000800
 8008548:	40000c00 	.word	0x40000c00
 800854c:	40014000 	.word	0x40014000
 8008550:	40001800 	.word	0x40001800

08008554 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fe72 	bl	8009250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2e      	ldr	r2, [pc, #184]	; (800862c <HAL_TIM_PWM_Stop+0xd8>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d004      	beq.n	8008580 <HAL_TIM_PWM_Stop+0x2c>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2d      	ldr	r2, [pc, #180]	; (8008630 <HAL_TIM_PWM_Stop+0xdc>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d101      	bne.n	8008584 <HAL_TIM_PWM_Stop+0x30>
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <HAL_TIM_PWM_Stop+0x32>
 8008584:	2300      	movs	r3, #0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d017      	beq.n	80085ba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6a1a      	ldr	r2, [r3, #32]
 8008590:	f241 1311 	movw	r3, #4369	; 0x1111
 8008594:	4013      	ands	r3, r2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10f      	bne.n	80085ba <HAL_TIM_PWM_Stop+0x66>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6a1a      	ldr	r2, [r3, #32]
 80085a0:	f240 4344 	movw	r3, #1092	; 0x444
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d107      	bne.n	80085ba <HAL_TIM_PWM_Stop+0x66>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6a1a      	ldr	r2, [r3, #32]
 80085c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80085c4:	4013      	ands	r3, r2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10f      	bne.n	80085ea <HAL_TIM_PWM_Stop+0x96>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6a1a      	ldr	r2, [r3, #32]
 80085d0:	f240 4344 	movw	r3, #1092	; 0x444
 80085d4:	4013      	ands	r3, r2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d107      	bne.n	80085ea <HAL_TIM_PWM_Stop+0x96>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0201 	bic.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d104      	bne.n	80085fa <HAL_TIM_PWM_Stop+0xa6>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085f8:	e013      	b.n	8008622 <HAL_TIM_PWM_Stop+0xce>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d104      	bne.n	800860a <HAL_TIM_PWM_Stop+0xb6>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008608:	e00b      	b.n	8008622 <HAL_TIM_PWM_Stop+0xce>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b08      	cmp	r3, #8
 800860e:	d104      	bne.n	800861a <HAL_TIM_PWM_Stop+0xc6>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008618:	e003      	b.n	8008622 <HAL_TIM_PWM_Stop+0xce>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40010000 	.word	0x40010000
 8008630:	40010400 	.word	0x40010400

08008634 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e097      	b.n	8008778 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d106      	bne.n	8008662 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7fb fad3 	bl	8003c08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2202      	movs	r2, #2
 8008666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6812      	ldr	r2, [r2, #0]
 8008674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008678:	f023 0307 	bic.w	r3, r3, #7
 800867c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3304      	adds	r3, #4
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f000 fb91 	bl	8008db0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	4313      	orrs	r3, r2
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80086d4:	f023 030c 	bic.w	r3, r3, #12
 80086d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	4313      	orrs	r3, r2
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	011a      	lsls	r2, r3, #4
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	031b      	lsls	r3, r3, #12
 8008704:	4313      	orrs	r3, r2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008712:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800871a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	4313      	orrs	r3, r2
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008790:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008798:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d110      	bne.n	80087d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d102      	bne.n	80087bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80087b6:	7b7b      	ldrb	r3, [r7, #13]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d001      	beq.n	80087c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e069      	b.n	8008894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087d0:	e031      	b.n	8008836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d110      	bne.n	80087fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d102      	bne.n	80087e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087de:	7b3b      	ldrb	r3, [r7, #12]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d001      	beq.n	80087e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e055      	b.n	8008894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087f8:	e01d      	b.n	8008836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d108      	bne.n	8008812 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d105      	bne.n	8008812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008806:	7b7b      	ldrb	r3, [r7, #13]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d102      	bne.n	8008812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800880c:	7b3b      	ldrb	r3, [r7, #12]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d001      	beq.n	8008816 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e03e      	b.n	8008894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2202      	movs	r2, #2
 800881a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2202      	movs	r2, #2
 8008822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <HAL_TIM_Encoder_Start+0xc4>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b04      	cmp	r3, #4
 8008840:	d008      	beq.n	8008854 <HAL_TIM_Encoder_Start+0xd4>
 8008842:	e00f      	b.n	8008864 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2201      	movs	r2, #1
 800884a:	2100      	movs	r1, #0
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fcff 	bl	8009250 <TIM_CCxChannelCmd>
      break;
 8008852:	e016      	b.n	8008882 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2201      	movs	r2, #1
 800885a:	2104      	movs	r1, #4
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fcf7 	bl	8009250 <TIM_CCxChannelCmd>
      break;
 8008862:	e00e      	b.n	8008882 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2201      	movs	r2, #1
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fcef 	bl	8009250 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2201      	movs	r2, #1
 8008878:	2104      	movs	r1, #4
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fce8 	bl	8009250 <TIM_CCxChannelCmd>
      break;
 8008880:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f042 0201 	orr.w	r2, r2, #1
 8008890:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <HAL_TIM_Encoder_Stop+0x18>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d008      	beq.n	80088c4 <HAL_TIM_Encoder_Stop+0x28>
 80088b2:	e00f      	b.n	80088d4 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fcc7 	bl	8009250 <TIM_CCxChannelCmd>
      break;
 80088c2:	e016      	b.n	80088f2 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2104      	movs	r1, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 fcbf 	bl	8009250 <TIM_CCxChannelCmd>
      break;
 80088d2:	e00e      	b.n	80088f2 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	2100      	movs	r1, #0
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 fcb7 	bl	8009250 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2200      	movs	r2, #0
 80088e8:	2104      	movs	r1, #4
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fcb0 	bl	8009250 <TIM_CCxChannelCmd>
      break;
 80088f0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6a1a      	ldr	r2, [r3, #32]
 80088f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80088fc:	4013      	ands	r3, r2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10f      	bne.n	8008922 <HAL_TIM_Encoder_Stop+0x86>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a1a      	ldr	r2, [r3, #32]
 8008908:	f240 4344 	movw	r3, #1092	; 0x444
 800890c:	4013      	ands	r3, r2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d107      	bne.n	8008922 <HAL_TIM_Encoder_Stop+0x86>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0201 	bic.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <HAL_TIM_Encoder_Stop+0x92>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b04      	cmp	r3, #4
 800892c:	d138      	bne.n	80089a0 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <HAL_TIM_Encoder_Stop+0xa2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800893c:	e013      	b.n	8008966 <HAL_TIM_Encoder_Stop+0xca>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d104      	bne.n	800894e <HAL_TIM_Encoder_Stop+0xb2>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800894c:	e00b      	b.n	8008966 <HAL_TIM_Encoder_Stop+0xca>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b08      	cmp	r3, #8
 8008952:	d104      	bne.n	800895e <HAL_TIM_Encoder_Stop+0xc2>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800895c:	e003      	b.n	8008966 <HAL_TIM_Encoder_Stop+0xca>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <HAL_TIM_Encoder_Stop+0xda>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008974:	e024      	b.n	80089c0 <HAL_TIM_Encoder_Stop+0x124>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b04      	cmp	r3, #4
 800897a:	d104      	bne.n	8008986 <HAL_TIM_Encoder_Stop+0xea>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008984:	e01c      	b.n	80089c0 <HAL_TIM_Encoder_Stop+0x124>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b08      	cmp	r3, #8
 800898a:	d104      	bne.n	8008996 <HAL_TIM_Encoder_Stop+0xfa>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008994:	e014      	b.n	80089c0 <HAL_TIM_Encoder_Stop+0x124>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800899e:	e00f      	b.n	80089c0 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d122      	bne.n	8008a26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d11b      	bne.n	8008a26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f06f 0202 	mvn.w	r2, #2
 80089f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f9b1 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008a12:	e005      	b.n	8008a20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9a3 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9b4 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d122      	bne.n	8008a7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f003 0304 	and.w	r3, r3, #4
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d11b      	bne.n	8008a7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f06f 0204 	mvn.w	r2, #4
 8008a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f987 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008a66:	e005      	b.n	8008a74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f979 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f98a 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b08      	cmp	r3, #8
 8008a86:	d122      	bne.n	8008ace <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b08      	cmp	r3, #8
 8008a94:	d11b      	bne.n	8008ace <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f06f 0208 	mvn.w	r2, #8
 8008a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f95d 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008aba:	e005      	b.n	8008ac8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f94f 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f960 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f003 0310 	and.w	r3, r3, #16
 8008ad8:	2b10      	cmp	r3, #16
 8008ada:	d122      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f003 0310 	and.w	r3, r3, #16
 8008ae6:	2b10      	cmp	r3, #16
 8008ae8:	d11b      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f06f 0210 	mvn.w	r2, #16
 8008af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2208      	movs	r2, #8
 8008af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f933 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008b0e:	e005      	b.n	8008b1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f925 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f936 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d10e      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d107      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f06f 0201 	mvn.w	r2, #1
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7f9 fdb1 	bl	80026b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b58:	2b80      	cmp	r3, #128	; 0x80
 8008b5a:	d10e      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b66:	2b80      	cmp	r3, #128	; 0x80
 8008b68:	d107      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc17 	bl	80093a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b84:	2b40      	cmp	r3, #64	; 0x40
 8008b86:	d10e      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	d107      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f8fb 	bl	8008d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f003 0320 	and.w	r3, r3, #32
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	d10e      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d107      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f06f 0220 	mvn.w	r2, #32
 8008bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fbe1 	bl	8009394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e0ae      	b.n	8008d58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b0c      	cmp	r3, #12
 8008c06:	f200 809f 	bhi.w	8008d48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c45 	.word	0x08008c45
 8008c14:	08008d49 	.word	0x08008d49
 8008c18:	08008d49 	.word	0x08008d49
 8008c1c:	08008d49 	.word	0x08008d49
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008d49 	.word	0x08008d49
 8008c28:	08008d49 	.word	0x08008d49
 8008c2c:	08008d49 	.word	0x08008d49
 8008c30:	08008cc7 	.word	0x08008cc7
 8008c34:	08008d49 	.word	0x08008d49
 8008c38:	08008d49 	.word	0x08008d49
 8008c3c:	08008d49 	.word	0x08008d49
 8008c40:	08008d07 	.word	0x08008d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f950 	bl	8008ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0208 	orr.w	r2, r2, #8
 8008c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	699a      	ldr	r2, [r3, #24]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0204 	bic.w	r2, r2, #4
 8008c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6999      	ldr	r1, [r3, #24]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	691a      	ldr	r2, [r3, #16]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	619a      	str	r2, [r3, #24]
      break;
 8008c82:	e064      	b.n	8008d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68b9      	ldr	r1, [r7, #8]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f9a0 	bl	8008fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699a      	ldr	r2, [r3, #24]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699a      	ldr	r2, [r3, #24]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6999      	ldr	r1, [r3, #24]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	021a      	lsls	r2, r3, #8
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	619a      	str	r2, [r3, #24]
      break;
 8008cc4:	e043      	b.n	8008d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f9f5 	bl	80090bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69da      	ldr	r2, [r3, #28]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f042 0208 	orr.w	r2, r2, #8
 8008ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69da      	ldr	r2, [r3, #28]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0204 	bic.w	r2, r2, #4
 8008cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69d9      	ldr	r1, [r3, #28]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	691a      	ldr	r2, [r3, #16]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	61da      	str	r2, [r3, #28]
      break;
 8008d04:	e023      	b.n	8008d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fa49 	bl	80091a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69da      	ldr	r2, [r3, #28]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	69d9      	ldr	r1, [r3, #28]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	021a      	lsls	r2, r3, #8
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	61da      	str	r2, [r3, #28]
      break;
 8008d46:	e002      	b.n	8008d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a40      	ldr	r2, [pc, #256]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d013      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dce:	d00f      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a3d      	ldr	r2, [pc, #244]	; (8008ec8 <TIM_Base_SetConfig+0x118>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a3c      	ldr	r2, [pc, #240]	; (8008ecc <TIM_Base_SetConfig+0x11c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a3b      	ldr	r2, [pc, #236]	; (8008ed0 <TIM_Base_SetConfig+0x120>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a3a      	ldr	r2, [pc, #232]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d108      	bne.n	8008e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2f      	ldr	r2, [pc, #188]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d02b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e10:	d027      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a2c      	ldr	r2, [pc, #176]	; (8008ec8 <TIM_Base_SetConfig+0x118>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d023      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	; (8008ecc <TIM_Base_SetConfig+0x11c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d01f      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a2a      	ldr	r2, [pc, #168]	; (8008ed0 <TIM_Base_SetConfig+0x120>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d01b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a29      	ldr	r2, [pc, #164]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d017      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <TIM_Base_SetConfig+0x128>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a27      	ldr	r2, [pc, #156]	; (8008edc <TIM_Base_SetConfig+0x12c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00f      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <TIM_Base_SetConfig+0x130>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <TIM_Base_SetConfig+0x134>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d007      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a24      	ldr	r2, [pc, #144]	; (8008ee8 <TIM_Base_SetConfig+0x138>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d003      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a23      	ldr	r2, [pc, #140]	; (8008eec <TIM_Base_SetConfig+0x13c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d108      	bne.n	8008e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <TIM_Base_SetConfig+0xf8>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d103      	bne.n	8008eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	691a      	ldr	r2, [r3, #16]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	615a      	str	r2, [r3, #20]
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40010000 	.word	0x40010000
 8008ec8:	40000400 	.word	0x40000400
 8008ecc:	40000800 	.word	0x40000800
 8008ed0:	40000c00 	.word	0x40000c00
 8008ed4:	40010400 	.word	0x40010400
 8008ed8:	40014000 	.word	0x40014000
 8008edc:	40014400 	.word	0x40014400
 8008ee0:	40014800 	.word	0x40014800
 8008ee4:	40001800 	.word	0x40001800
 8008ee8:	40001c00 	.word	0x40001c00
 8008eec:	40002000 	.word	0x40002000

08008ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	f023 0201 	bic.w	r2, r3, #1
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f023 0303 	bic.w	r3, r3, #3
 8008f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f023 0302 	bic.w	r3, r3, #2
 8008f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a20      	ldr	r2, [pc, #128]	; (8008fc8 <TIM_OC1_SetConfig+0xd8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC1_SetConfig+0x64>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a1f      	ldr	r2, [pc, #124]	; (8008fcc <TIM_OC1_SetConfig+0xdc>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d10c      	bne.n	8008f6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 0308 	bic.w	r3, r3, #8
 8008f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f023 0304 	bic.w	r3, r3, #4
 8008f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a15      	ldr	r2, [pc, #84]	; (8008fc8 <TIM_OC1_SetConfig+0xd8>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d003      	beq.n	8008f7e <TIM_OC1_SetConfig+0x8e>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a14      	ldr	r2, [pc, #80]	; (8008fcc <TIM_OC1_SetConfig+0xdc>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d111      	bne.n	8008fa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	621a      	str	r2, [r3, #32]
}
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	40010000 	.word	0x40010000
 8008fcc:	40010400 	.word	0x40010400

08008fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0210 	bic.w	r2, r3, #16
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f023 0320 	bic.w	r3, r3, #32
 800901a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a22      	ldr	r2, [pc, #136]	; (80090b4 <TIM_OC2_SetConfig+0xe4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d003      	beq.n	8009038 <TIM_OC2_SetConfig+0x68>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a21      	ldr	r2, [pc, #132]	; (80090b8 <TIM_OC2_SetConfig+0xe8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d10d      	bne.n	8009054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800903e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <TIM_OC2_SetConfig+0xe4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <TIM_OC2_SetConfig+0x94>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a16      	ldr	r2, [pc, #88]	; (80090b8 <TIM_OC2_SetConfig+0xe8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d113      	bne.n	800908c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800906a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	4313      	orrs	r3, r2
 800907e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	4313      	orrs	r3, r2
 800908a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	621a      	str	r2, [r3, #32]
}
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40010400 	.word	0x40010400

080090bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	021b      	lsls	r3, r3, #8
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a21      	ldr	r2, [pc, #132]	; (800919c <TIM_OC3_SetConfig+0xe0>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d003      	beq.n	8009122 <TIM_OC3_SetConfig+0x66>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a20      	ldr	r2, [pc, #128]	; (80091a0 <TIM_OC3_SetConfig+0xe4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d10d      	bne.n	800913e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	4313      	orrs	r3, r2
 8009134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800913c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a16      	ldr	r2, [pc, #88]	; (800919c <TIM_OC3_SetConfig+0xe0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_OC3_SetConfig+0x92>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <TIM_OC3_SetConfig+0xe4>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d113      	bne.n	8009176 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800915c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	621a      	str	r2, [r3, #32]
}
 8009190:	bf00      	nop
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	40010000 	.word	0x40010000
 80091a0:	40010400 	.word	0x40010400

080091a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	031b      	lsls	r3, r3, #12
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a12      	ldr	r2, [pc, #72]	; (8009248 <TIM_OC4_SetConfig+0xa4>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d003      	beq.n	800920c <TIM_OC4_SetConfig+0x68>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a11      	ldr	r2, [pc, #68]	; (800924c <TIM_OC4_SetConfig+0xa8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d109      	bne.n	8009220 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	019b      	lsls	r3, r3, #6
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	621a      	str	r2, [r3, #32]
}
 800923a:	bf00      	nop
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40010000 	.word	0x40010000
 800924c:	40010400 	.word	0x40010400

08009250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f003 031f 	and.w	r3, r3, #31
 8009262:	2201      	movs	r2, #1
 8009264:	fa02 f303 	lsl.w	r3, r2, r3
 8009268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	43db      	mvns	r3, r3
 8009272:	401a      	ands	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6a1a      	ldr	r2, [r3, #32]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f003 031f 	and.w	r3, r3, #31
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	fa01 f303 	lsl.w	r3, r1, r3
 8009288:	431a      	orrs	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	621a      	str	r2, [r3, #32]
}
 800928e:	bf00      	nop
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
	...

0800929c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092b0:	2302      	movs	r3, #2
 80092b2:	e05a      	b.n	800936a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a21      	ldr	r2, [pc, #132]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d022      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009300:	d01d      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a1d      	ldr	r2, [pc, #116]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d018      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a1b      	ldr	r2, [pc, #108]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d013      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a1a      	ldr	r2, [pc, #104]	; (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d00e      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a18      	ldr	r2, [pc, #96]	; (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d009      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a17      	ldr	r2, [pc, #92]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d004      	beq.n	800933e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a15      	ldr	r2, [pc, #84]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d10c      	bne.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4313      	orrs	r3, r2
 800934e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	40010000 	.word	0x40010000
 800937c:	40000400 	.word	0x40000400
 8009380:	40000800 	.word	0x40000800
 8009384:	40000c00 	.word	0x40000c00
 8009388:	40010400 	.word	0x40010400
 800938c:	40014000 	.word	0x40014000
 8009390:	40001800 	.word	0x40001800

08009394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e03f      	b.n	800944e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fa fd8a 	bl	8003efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2224      	movs	r2, #36	; 0x24
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f929 	bl	8009658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	695a      	ldr	r2, [r3, #20]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b08a      	sub	sp, #40	; 0x28
 800945a:	af02      	add	r7, sp, #8
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	603b      	str	r3, [r7, #0]
 8009462:	4613      	mov	r3, r2
 8009464:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b20      	cmp	r3, #32
 8009474:	d17c      	bne.n	8009570 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <HAL_UART_Transmit+0x2c>
 800947c:	88fb      	ldrh	r3, [r7, #6]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e075      	b.n	8009572 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_UART_Transmit+0x3e>
 8009490:	2302      	movs	r3, #2
 8009492:	e06e      	b.n	8009572 <HAL_UART_Transmit+0x11c>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2221      	movs	r2, #33	; 0x21
 80094a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094aa:	f7fb fcc5 	bl	8004e38 <HAL_GetTick>
 80094ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	88fa      	ldrh	r2, [r7, #6]
 80094b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	88fa      	ldrh	r2, [r7, #6]
 80094ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c4:	d108      	bne.n	80094d8 <HAL_UART_Transmit+0x82>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	61bb      	str	r3, [r7, #24]
 80094d6:	e003      	b.n	80094e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80094e8:	e02a      	b.n	8009540 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2200      	movs	r2, #0
 80094f2:	2180      	movs	r1, #128	; 0x80
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f840 	bl	800957a <UART_WaitOnFlagUntilTimeout>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e036      	b.n	8009572 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	3302      	adds	r3, #2
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	e007      	b.n	8009532 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	3301      	adds	r3, #1
 8009530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009536:	b29b      	uxth	r3, r3
 8009538:	3b01      	subs	r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009544:	b29b      	uxth	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1cf      	bne.n	80094ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2200      	movs	r2, #0
 8009552:	2140      	movs	r1, #64	; 0x40
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 f810 	bl	800957a <UART_WaitOnFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e006      	b.n	8009572 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	e000      	b.n	8009572 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009570:	2302      	movs	r3, #2
  }
}
 8009572:	4618      	mov	r0, r3
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b090      	sub	sp, #64	; 0x40
 800957e:	af00      	add	r7, sp, #0
 8009580:	60f8      	str	r0, [r7, #12]
 8009582:	60b9      	str	r1, [r7, #8]
 8009584:	603b      	str	r3, [r7, #0]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800958a:	e050      	b.n	800962e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800958c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d04c      	beq.n	800962e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009596:	2b00      	cmp	r3, #0
 8009598:	d007      	beq.n	80095aa <UART_WaitOnFlagUntilTimeout+0x30>
 800959a:	f7fb fc4d 	bl	8004e38 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d241      	bcs.n	800962e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	330c      	adds	r3, #12
 80095b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	330c      	adds	r3, #12
 80095c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095ca:	637a      	str	r2, [r7, #52]	; 0x34
 80095cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d2:	e841 2300 	strex	r3, r2, [r1]
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1e5      	bne.n	80095aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3314      	adds	r3, #20
 80095e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	613b      	str	r3, [r7, #16]
   return(result);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f023 0301 	bic.w	r3, r3, #1
 80095f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3314      	adds	r3, #20
 80095fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095fe:	623a      	str	r2, [r7, #32]
 8009600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	69f9      	ldr	r1, [r7, #28]
 8009604:	6a3a      	ldr	r2, [r7, #32]
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	61bb      	str	r3, [r7, #24]
   return(result);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e5      	bne.n	80095de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2220      	movs	r2, #32
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2220      	movs	r2, #32
 800961e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e00f      	b.n	800964e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	4013      	ands	r3, r2
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	429a      	cmp	r2, r3
 800963c:	bf0c      	ite	eq
 800963e:	2301      	moveq	r3, #1
 8009640:	2300      	movne	r3, #0
 8009642:	b2db      	uxtb	r3, r3
 8009644:	461a      	mov	r2, r3
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	429a      	cmp	r2, r3
 800964a:	d09f      	beq.n	800958c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3740      	adds	r7, #64	; 0x40
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	b09f      	sub	sp, #124	; 0x7c
 800965e:	af00      	add	r7, sp, #0
 8009660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800966c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800966e:	68d9      	ldr	r1, [r3, #12]
 8009670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	ea40 0301 	orr.w	r3, r0, r1
 8009678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800967a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	431a      	orrs	r2, r3
 8009684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	431a      	orrs	r2, r3
 800968a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	4313      	orrs	r3, r2
 8009690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800969c:	f021 010c 	bic.w	r1, r1, #12
 80096a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a6:	430b      	orrs	r3, r1
 80096a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b6:	6999      	ldr	r1, [r3, #24]
 80096b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	ea40 0301 	orr.w	r3, r0, r1
 80096c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4bc5      	ldr	r3, [pc, #788]	; (80099dc <UART_SetConfig+0x384>)
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d004      	beq.n	80096d6 <UART_SetConfig+0x7e>
 80096cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	4bc3      	ldr	r3, [pc, #780]	; (80099e0 <UART_SetConfig+0x388>)
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d103      	bne.n	80096de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096d6:	f7fd ff7b 	bl	80075d0 <HAL_RCC_GetPCLK2Freq>
 80096da:	6778      	str	r0, [r7, #116]	; 0x74
 80096dc:	e002      	b.n	80096e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096de:	f7fd ff63 	bl	80075a8 <HAL_RCC_GetPCLK1Freq>
 80096e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ec:	f040 80b6 	bne.w	800985c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f2:	461c      	mov	r4, r3
 80096f4:	f04f 0500 	mov.w	r5, #0
 80096f8:	4622      	mov	r2, r4
 80096fa:	462b      	mov	r3, r5
 80096fc:	1891      	adds	r1, r2, r2
 80096fe:	6439      	str	r1, [r7, #64]	; 0x40
 8009700:	415b      	adcs	r3, r3
 8009702:	647b      	str	r3, [r7, #68]	; 0x44
 8009704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009708:	1912      	adds	r2, r2, r4
 800970a:	eb45 0303 	adc.w	r3, r5, r3
 800970e:	f04f 0000 	mov.w	r0, #0
 8009712:	f04f 0100 	mov.w	r1, #0
 8009716:	00d9      	lsls	r1, r3, #3
 8009718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800971c:	00d0      	lsls	r0, r2, #3
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	1911      	adds	r1, r2, r4
 8009724:	6639      	str	r1, [r7, #96]	; 0x60
 8009726:	416b      	adcs	r3, r5
 8009728:	667b      	str	r3, [r7, #100]	; 0x64
 800972a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	461a      	mov	r2, r3
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	1891      	adds	r1, r2, r2
 8009736:	63b9      	str	r1, [r7, #56]	; 0x38
 8009738:	415b      	adcs	r3, r3
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800973c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009744:	f7f7 faa0 	bl	8000c88 <__aeabi_uldivmod>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4ba5      	ldr	r3, [pc, #660]	; (80099e4 <UART_SetConfig+0x38c>)
 800974e:	fba3 2302 	umull	r2, r3, r3, r2
 8009752:	095b      	lsrs	r3, r3, #5
 8009754:	011e      	lsls	r6, r3, #4
 8009756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009758:	461c      	mov	r4, r3
 800975a:	f04f 0500 	mov.w	r5, #0
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	1891      	adds	r1, r2, r2
 8009764:	6339      	str	r1, [r7, #48]	; 0x30
 8009766:	415b      	adcs	r3, r3
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
 800976a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800976e:	1912      	adds	r2, r2, r4
 8009770:	eb45 0303 	adc.w	r3, r5, r3
 8009774:	f04f 0000 	mov.w	r0, #0
 8009778:	f04f 0100 	mov.w	r1, #0
 800977c:	00d9      	lsls	r1, r3, #3
 800977e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009782:	00d0      	lsls	r0, r2, #3
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	1911      	adds	r1, r2, r4
 800978a:	65b9      	str	r1, [r7, #88]	; 0x58
 800978c:	416b      	adcs	r3, r5
 800978e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	461a      	mov	r2, r3
 8009796:	f04f 0300 	mov.w	r3, #0
 800979a:	1891      	adds	r1, r2, r2
 800979c:	62b9      	str	r1, [r7, #40]	; 0x28
 800979e:	415b      	adcs	r3, r3
 80097a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80097aa:	f7f7 fa6d 	bl	8000c88 <__aeabi_uldivmod>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4b8c      	ldr	r3, [pc, #560]	; (80099e4 <UART_SetConfig+0x38c>)
 80097b4:	fba3 1302 	umull	r1, r3, r3, r2
 80097b8:	095b      	lsrs	r3, r3, #5
 80097ba:	2164      	movs	r1, #100	; 0x64
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	3332      	adds	r3, #50	; 0x32
 80097c6:	4a87      	ldr	r2, [pc, #540]	; (80099e4 <UART_SetConfig+0x38c>)
 80097c8:	fba2 2303 	umull	r2, r3, r2, r3
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097d4:	441e      	add	r6, r3
 80097d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097d8:	4618      	mov	r0, r3
 80097da:	f04f 0100 	mov.w	r1, #0
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	1894      	adds	r4, r2, r2
 80097e4:	623c      	str	r4, [r7, #32]
 80097e6:	415b      	adcs	r3, r3
 80097e8:	627b      	str	r3, [r7, #36]	; 0x24
 80097ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097ee:	1812      	adds	r2, r2, r0
 80097f0:	eb41 0303 	adc.w	r3, r1, r3
 80097f4:	f04f 0400 	mov.w	r4, #0
 80097f8:	f04f 0500 	mov.w	r5, #0
 80097fc:	00dd      	lsls	r5, r3, #3
 80097fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009802:	00d4      	lsls	r4, r2, #3
 8009804:	4622      	mov	r2, r4
 8009806:	462b      	mov	r3, r5
 8009808:	1814      	adds	r4, r2, r0
 800980a:	653c      	str	r4, [r7, #80]	; 0x50
 800980c:	414b      	adcs	r3, r1
 800980e:	657b      	str	r3, [r7, #84]	; 0x54
 8009810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	461a      	mov	r2, r3
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	1891      	adds	r1, r2, r2
 800981c:	61b9      	str	r1, [r7, #24]
 800981e:	415b      	adcs	r3, r3
 8009820:	61fb      	str	r3, [r7, #28]
 8009822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800982a:	f7f7 fa2d 	bl	8000c88 <__aeabi_uldivmod>
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4b6c      	ldr	r3, [pc, #432]	; (80099e4 <UART_SetConfig+0x38c>)
 8009834:	fba3 1302 	umull	r1, r3, r3, r2
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	2164      	movs	r1, #100	; 0x64
 800983c:	fb01 f303 	mul.w	r3, r1, r3
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	3332      	adds	r3, #50	; 0x32
 8009846:	4a67      	ldr	r2, [pc, #412]	; (80099e4 <UART_SetConfig+0x38c>)
 8009848:	fba2 2303 	umull	r2, r3, r2, r3
 800984c:	095b      	lsrs	r3, r3, #5
 800984e:	f003 0207 	and.w	r2, r3, #7
 8009852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4432      	add	r2, r6
 8009858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800985a:	e0b9      	b.n	80099d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800985c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800985e:	461c      	mov	r4, r3
 8009860:	f04f 0500 	mov.w	r5, #0
 8009864:	4622      	mov	r2, r4
 8009866:	462b      	mov	r3, r5
 8009868:	1891      	adds	r1, r2, r2
 800986a:	6139      	str	r1, [r7, #16]
 800986c:	415b      	adcs	r3, r3
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009874:	1912      	adds	r2, r2, r4
 8009876:	eb45 0303 	adc.w	r3, r5, r3
 800987a:	f04f 0000 	mov.w	r0, #0
 800987e:	f04f 0100 	mov.w	r1, #0
 8009882:	00d9      	lsls	r1, r3, #3
 8009884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009888:	00d0      	lsls	r0, r2, #3
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	eb12 0804 	adds.w	r8, r2, r4
 8009892:	eb43 0905 	adc.w	r9, r3, r5
 8009896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	4618      	mov	r0, r3
 800989c:	f04f 0100 	mov.w	r1, #0
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	008b      	lsls	r3, r1, #2
 80098aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098ae:	0082      	lsls	r2, r0, #2
 80098b0:	4640      	mov	r0, r8
 80098b2:	4649      	mov	r1, r9
 80098b4:	f7f7 f9e8 	bl	8000c88 <__aeabi_uldivmod>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4b49      	ldr	r3, [pc, #292]	; (80099e4 <UART_SetConfig+0x38c>)
 80098be:	fba3 2302 	umull	r2, r3, r3, r2
 80098c2:	095b      	lsrs	r3, r3, #5
 80098c4:	011e      	lsls	r6, r3, #4
 80098c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098c8:	4618      	mov	r0, r3
 80098ca:	f04f 0100 	mov.w	r1, #0
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	1894      	adds	r4, r2, r2
 80098d4:	60bc      	str	r4, [r7, #8]
 80098d6:	415b      	adcs	r3, r3
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098de:	1812      	adds	r2, r2, r0
 80098e0:	eb41 0303 	adc.w	r3, r1, r3
 80098e4:	f04f 0400 	mov.w	r4, #0
 80098e8:	f04f 0500 	mov.w	r5, #0
 80098ec:	00dd      	lsls	r5, r3, #3
 80098ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098f2:	00d4      	lsls	r4, r2, #3
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	1814      	adds	r4, r2, r0
 80098fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80098fc:	414b      	adcs	r3, r1
 80098fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	4618      	mov	r0, r3
 8009906:	f04f 0100 	mov.w	r1, #0
 800990a:	f04f 0200 	mov.w	r2, #0
 800990e:	f04f 0300 	mov.w	r3, #0
 8009912:	008b      	lsls	r3, r1, #2
 8009914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009918:	0082      	lsls	r2, r0, #2
 800991a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800991e:	f7f7 f9b3 	bl	8000c88 <__aeabi_uldivmod>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4b2f      	ldr	r3, [pc, #188]	; (80099e4 <UART_SetConfig+0x38c>)
 8009928:	fba3 1302 	umull	r1, r3, r3, r2
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	2164      	movs	r1, #100	; 0x64
 8009930:	fb01 f303 	mul.w	r3, r1, r3
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	3332      	adds	r3, #50	; 0x32
 800993a:	4a2a      	ldr	r2, [pc, #168]	; (80099e4 <UART_SetConfig+0x38c>)
 800993c:	fba2 2303 	umull	r2, r3, r2, r3
 8009940:	095b      	lsrs	r3, r3, #5
 8009942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009946:	441e      	add	r6, r3
 8009948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800994a:	4618      	mov	r0, r3
 800994c:	f04f 0100 	mov.w	r1, #0
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	1894      	adds	r4, r2, r2
 8009956:	603c      	str	r4, [r7, #0]
 8009958:	415b      	adcs	r3, r3
 800995a:	607b      	str	r3, [r7, #4]
 800995c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009960:	1812      	adds	r2, r2, r0
 8009962:	eb41 0303 	adc.w	r3, r1, r3
 8009966:	f04f 0400 	mov.w	r4, #0
 800996a:	f04f 0500 	mov.w	r5, #0
 800996e:	00dd      	lsls	r5, r3, #3
 8009970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009974:	00d4      	lsls	r4, r2, #3
 8009976:	4622      	mov	r2, r4
 8009978:	462b      	mov	r3, r5
 800997a:	eb12 0a00 	adds.w	sl, r2, r0
 800997e:	eb43 0b01 	adc.w	fp, r3, r1
 8009982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	4618      	mov	r0, r3
 8009988:	f04f 0100 	mov.w	r1, #0
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	008b      	lsls	r3, r1, #2
 8009996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800999a:	0082      	lsls	r2, r0, #2
 800999c:	4650      	mov	r0, sl
 800999e:	4659      	mov	r1, fp
 80099a0:	f7f7 f972 	bl	8000c88 <__aeabi_uldivmod>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <UART_SetConfig+0x38c>)
 80099aa:	fba3 1302 	umull	r1, r3, r3, r2
 80099ae:	095b      	lsrs	r3, r3, #5
 80099b0:	2164      	movs	r1, #100	; 0x64
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	3332      	adds	r3, #50	; 0x32
 80099bc:	4a09      	ldr	r2, [pc, #36]	; (80099e4 <UART_SetConfig+0x38c>)
 80099be:	fba2 2303 	umull	r2, r3, r2, r3
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	f003 020f 	and.w	r2, r3, #15
 80099c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4432      	add	r2, r6
 80099ce:	609a      	str	r2, [r3, #8]
}
 80099d0:	bf00      	nop
 80099d2:	377c      	adds	r7, #124	; 0x7c
 80099d4:	46bd      	mov	sp, r7
 80099d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099da:	bf00      	nop
 80099dc:	40011000 	.word	0x40011000
 80099e0:	40011400 	.word	0x40011400
 80099e4:	51eb851f 	.word	0x51eb851f

080099e8 <__errno>:
 80099e8:	4b01      	ldr	r3, [pc, #4]	; (80099f0 <__errno+0x8>)
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	2000000c 	.word	0x2000000c

080099f4 <__libc_init_array>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	4d0d      	ldr	r5, [pc, #52]	; (8009a2c <__libc_init_array+0x38>)
 80099f8:	4c0d      	ldr	r4, [pc, #52]	; (8009a30 <__libc_init_array+0x3c>)
 80099fa:	1b64      	subs	r4, r4, r5
 80099fc:	10a4      	asrs	r4, r4, #2
 80099fe:	2600      	movs	r6, #0
 8009a00:	42a6      	cmp	r6, r4
 8009a02:	d109      	bne.n	8009a18 <__libc_init_array+0x24>
 8009a04:	4d0b      	ldr	r5, [pc, #44]	; (8009a34 <__libc_init_array+0x40>)
 8009a06:	4c0c      	ldr	r4, [pc, #48]	; (8009a38 <__libc_init_array+0x44>)
 8009a08:	f004 fcd4 	bl	800e3b4 <_init>
 8009a0c:	1b64      	subs	r4, r4, r5
 8009a0e:	10a4      	asrs	r4, r4, #2
 8009a10:	2600      	movs	r6, #0
 8009a12:	42a6      	cmp	r6, r4
 8009a14:	d105      	bne.n	8009a22 <__libc_init_array+0x2e>
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1c:	4798      	blx	r3
 8009a1e:	3601      	adds	r6, #1
 8009a20:	e7ee      	b.n	8009a00 <__libc_init_array+0xc>
 8009a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a26:	4798      	blx	r3
 8009a28:	3601      	adds	r6, #1
 8009a2a:	e7f2      	b.n	8009a12 <__libc_init_array+0x1e>
 8009a2c:	0800eca4 	.word	0x0800eca4
 8009a30:	0800eca4 	.word	0x0800eca4
 8009a34:	0800eca4 	.word	0x0800eca4
 8009a38:	0800eca8 	.word	0x0800eca8

08009a3c <memcpy>:
 8009a3c:	440a      	add	r2, r1
 8009a3e:	4291      	cmp	r1, r2
 8009a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a44:	d100      	bne.n	8009a48 <memcpy+0xc>
 8009a46:	4770      	bx	lr
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a52:	4291      	cmp	r1, r2
 8009a54:	d1f9      	bne.n	8009a4a <memcpy+0xe>
 8009a56:	bd10      	pop	{r4, pc}

08009a58 <memset>:
 8009a58:	4402      	add	r2, r0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d100      	bne.n	8009a62 <memset+0xa>
 8009a60:	4770      	bx	lr
 8009a62:	f803 1b01 	strb.w	r1, [r3], #1
 8009a66:	e7f9      	b.n	8009a5c <memset+0x4>

08009a68 <__cvt>:
 8009a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a6c:	ec55 4b10 	vmov	r4, r5, d0
 8009a70:	2d00      	cmp	r5, #0
 8009a72:	460e      	mov	r6, r1
 8009a74:	4619      	mov	r1, r3
 8009a76:	462b      	mov	r3, r5
 8009a78:	bfbb      	ittet	lt
 8009a7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a7e:	461d      	movlt	r5, r3
 8009a80:	2300      	movge	r3, #0
 8009a82:	232d      	movlt	r3, #45	; 0x2d
 8009a84:	700b      	strb	r3, [r1, #0]
 8009a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a8c:	4691      	mov	r9, r2
 8009a8e:	f023 0820 	bic.w	r8, r3, #32
 8009a92:	bfbc      	itt	lt
 8009a94:	4622      	movlt	r2, r4
 8009a96:	4614      	movlt	r4, r2
 8009a98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a9c:	d005      	beq.n	8009aaa <__cvt+0x42>
 8009a9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009aa2:	d100      	bne.n	8009aa6 <__cvt+0x3e>
 8009aa4:	3601      	adds	r6, #1
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	e000      	b.n	8009aac <__cvt+0x44>
 8009aaa:	2103      	movs	r1, #3
 8009aac:	ab03      	add	r3, sp, #12
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	ab02      	add	r3, sp, #8
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	ec45 4b10 	vmov	d0, r4, r5
 8009ab8:	4653      	mov	r3, sl
 8009aba:	4632      	mov	r2, r6
 8009abc:	f001 ff04 	bl	800b8c8 <_dtoa_r>
 8009ac0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	d102      	bne.n	8009ace <__cvt+0x66>
 8009ac8:	f019 0f01 	tst.w	r9, #1
 8009acc:	d022      	beq.n	8009b14 <__cvt+0xac>
 8009ace:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ad2:	eb07 0906 	add.w	r9, r7, r6
 8009ad6:	d110      	bne.n	8009afa <__cvt+0x92>
 8009ad8:	783b      	ldrb	r3, [r7, #0]
 8009ada:	2b30      	cmp	r3, #48	; 0x30
 8009adc:	d10a      	bne.n	8009af4 <__cvt+0x8c>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	f7f6 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aea:	b918      	cbnz	r0, 8009af4 <__cvt+0x8c>
 8009aec:	f1c6 0601 	rsb	r6, r6, #1
 8009af0:	f8ca 6000 	str.w	r6, [sl]
 8009af4:	f8da 3000 	ldr.w	r3, [sl]
 8009af8:	4499      	add	r9, r3
 8009afa:	2200      	movs	r2, #0
 8009afc:	2300      	movs	r3, #0
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b06:	b108      	cbz	r0, 8009b0c <__cvt+0xa4>
 8009b08:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b0c:	2230      	movs	r2, #48	; 0x30
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	454b      	cmp	r3, r9
 8009b12:	d307      	bcc.n	8009b24 <__cvt+0xbc>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b18:	1bdb      	subs	r3, r3, r7
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	b004      	add	sp, #16
 8009b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b24:	1c59      	adds	r1, r3, #1
 8009b26:	9103      	str	r1, [sp, #12]
 8009b28:	701a      	strb	r2, [r3, #0]
 8009b2a:	e7f0      	b.n	8009b0e <__cvt+0xa6>

08009b2c <__exponent>:
 8009b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2900      	cmp	r1, #0
 8009b32:	bfb8      	it	lt
 8009b34:	4249      	neglt	r1, r1
 8009b36:	f803 2b02 	strb.w	r2, [r3], #2
 8009b3a:	bfb4      	ite	lt
 8009b3c:	222d      	movlt	r2, #45	; 0x2d
 8009b3e:	222b      	movge	r2, #43	; 0x2b
 8009b40:	2909      	cmp	r1, #9
 8009b42:	7042      	strb	r2, [r0, #1]
 8009b44:	dd2a      	ble.n	8009b9c <__exponent+0x70>
 8009b46:	f10d 0407 	add.w	r4, sp, #7
 8009b4a:	46a4      	mov	ip, r4
 8009b4c:	270a      	movs	r7, #10
 8009b4e:	46a6      	mov	lr, r4
 8009b50:	460a      	mov	r2, r1
 8009b52:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b56:	fb07 1516 	mls	r5, r7, r6, r1
 8009b5a:	3530      	adds	r5, #48	; 0x30
 8009b5c:	2a63      	cmp	r2, #99	; 0x63
 8009b5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b66:	4631      	mov	r1, r6
 8009b68:	dcf1      	bgt.n	8009b4e <__exponent+0x22>
 8009b6a:	3130      	adds	r1, #48	; 0x30
 8009b6c:	f1ae 0502 	sub.w	r5, lr, #2
 8009b70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b74:	1c44      	adds	r4, r0, #1
 8009b76:	4629      	mov	r1, r5
 8009b78:	4561      	cmp	r1, ip
 8009b7a:	d30a      	bcc.n	8009b92 <__exponent+0x66>
 8009b7c:	f10d 0209 	add.w	r2, sp, #9
 8009b80:	eba2 020e 	sub.w	r2, r2, lr
 8009b84:	4565      	cmp	r5, ip
 8009b86:	bf88      	it	hi
 8009b88:	2200      	movhi	r2, #0
 8009b8a:	4413      	add	r3, r2
 8009b8c:	1a18      	subs	r0, r3, r0
 8009b8e:	b003      	add	sp, #12
 8009b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b9a:	e7ed      	b.n	8009b78 <__exponent+0x4c>
 8009b9c:	2330      	movs	r3, #48	; 0x30
 8009b9e:	3130      	adds	r1, #48	; 0x30
 8009ba0:	7083      	strb	r3, [r0, #2]
 8009ba2:	70c1      	strb	r1, [r0, #3]
 8009ba4:	1d03      	adds	r3, r0, #4
 8009ba6:	e7f1      	b.n	8009b8c <__exponent+0x60>

08009ba8 <_printf_float>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	ed2d 8b02 	vpush	{d8}
 8009bb0:	b08d      	sub	sp, #52	; 0x34
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009bb8:	4616      	mov	r6, r2
 8009bba:	461f      	mov	r7, r3
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	f003 f995 	bl	800ceec <_localeconv_r>
 8009bc2:	f8d0 a000 	ldr.w	sl, [r0]
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f7f6 fb02 	bl	80001d0 <strlen>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	930a      	str	r3, [sp, #40]	; 0x28
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009bdc:	3307      	adds	r3, #7
 8009bde:	f023 0307 	bic.w	r3, r3, #7
 8009be2:	f103 0208 	add.w	r2, r3, #8
 8009be6:	f8c8 2000 	str.w	r2, [r8]
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c00:	ee08 0a10 	vmov	s16, r0
 8009c04:	4b9f      	ldr	r3, [pc, #636]	; (8009e84 <_printf_float+0x2dc>)
 8009c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0e:	f7f6 ff8d 	bl	8000b2c <__aeabi_dcmpun>
 8009c12:	bb88      	cbnz	r0, 8009c78 <_printf_float+0xd0>
 8009c14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c18:	4b9a      	ldr	r3, [pc, #616]	; (8009e84 <_printf_float+0x2dc>)
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	f7f6 ff67 	bl	8000af0 <__aeabi_dcmple>
 8009c22:	bb48      	cbnz	r0, 8009c78 <_printf_float+0xd0>
 8009c24:	2200      	movs	r2, #0
 8009c26:	2300      	movs	r3, #0
 8009c28:	4640      	mov	r0, r8
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f6 ff56 	bl	8000adc <__aeabi_dcmplt>
 8009c30:	b110      	cbz	r0, 8009c38 <_printf_float+0x90>
 8009c32:	232d      	movs	r3, #45	; 0x2d
 8009c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c38:	4b93      	ldr	r3, [pc, #588]	; (8009e88 <_printf_float+0x2e0>)
 8009c3a:	4894      	ldr	r0, [pc, #592]	; (8009e8c <_printf_float+0x2e4>)
 8009c3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c40:	bf94      	ite	ls
 8009c42:	4698      	movls	r8, r3
 8009c44:	4680      	movhi	r8, r0
 8009c46:	2303      	movs	r3, #3
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	9b05      	ldr	r3, [sp, #20]
 8009c4c:	f023 0204 	bic.w	r2, r3, #4
 8009c50:	6022      	str	r2, [r4, #0]
 8009c52:	f04f 0900 	mov.w	r9, #0
 8009c56:	9700      	str	r7, [sp, #0]
 8009c58:	4633      	mov	r3, r6
 8009c5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f000 f9d8 	bl	800a014 <_printf_common>
 8009c64:	3001      	adds	r0, #1
 8009c66:	f040 8090 	bne.w	8009d8a <_printf_float+0x1e2>
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6e:	b00d      	add	sp, #52	; 0x34
 8009c70:	ecbd 8b02 	vpop	{d8}
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c78:	4642      	mov	r2, r8
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f7f6 ff54 	bl	8000b2c <__aeabi_dcmpun>
 8009c84:	b140      	cbz	r0, 8009c98 <_printf_float+0xf0>
 8009c86:	464b      	mov	r3, r9
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bfbc      	itt	lt
 8009c8c:	232d      	movlt	r3, #45	; 0x2d
 8009c8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c92:	487f      	ldr	r0, [pc, #508]	; (8009e90 <_printf_float+0x2e8>)
 8009c94:	4b7f      	ldr	r3, [pc, #508]	; (8009e94 <_printf_float+0x2ec>)
 8009c96:	e7d1      	b.n	8009c3c <_printf_float+0x94>
 8009c98:	6863      	ldr	r3, [r4, #4]
 8009c9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c9e:	9206      	str	r2, [sp, #24]
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	d13f      	bne.n	8009d24 <_printf_float+0x17c>
 8009ca4:	2306      	movs	r3, #6
 8009ca6:	6063      	str	r3, [r4, #4]
 8009ca8:	9b05      	ldr	r3, [sp, #20]
 8009caa:	6861      	ldr	r1, [r4, #4]
 8009cac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9303      	str	r3, [sp, #12]
 8009cb4:	ab0a      	add	r3, sp, #40	; 0x28
 8009cb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009cba:	ab09      	add	r3, sp, #36	; 0x24
 8009cbc:	ec49 8b10 	vmov	d0, r8, r9
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	6022      	str	r2, [r4, #0]
 8009cc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f7ff fecd 	bl	8009a68 <__cvt>
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cd2:	2b47      	cmp	r3, #71	; 0x47
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	d108      	bne.n	8009cea <_printf_float+0x142>
 8009cd8:	1cc8      	adds	r0, r1, #3
 8009cda:	db02      	blt.n	8009ce2 <_printf_float+0x13a>
 8009cdc:	6863      	ldr	r3, [r4, #4]
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	dd41      	ble.n	8009d66 <_printf_float+0x1be>
 8009ce2:	f1ab 0b02 	sub.w	fp, fp, #2
 8009ce6:	fa5f fb8b 	uxtb.w	fp, fp
 8009cea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cee:	d820      	bhi.n	8009d32 <_printf_float+0x18a>
 8009cf0:	3901      	subs	r1, #1
 8009cf2:	465a      	mov	r2, fp
 8009cf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8009cfa:	f7ff ff17 	bl	8009b2c <__exponent>
 8009cfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d00:	1813      	adds	r3, r2, r0
 8009d02:	2a01      	cmp	r2, #1
 8009d04:	4681      	mov	r9, r0
 8009d06:	6123      	str	r3, [r4, #16]
 8009d08:	dc02      	bgt.n	8009d10 <_printf_float+0x168>
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	07d2      	lsls	r2, r2, #31
 8009d0e:	d501      	bpl.n	8009d14 <_printf_float+0x16c>
 8009d10:	3301      	adds	r3, #1
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d09c      	beq.n	8009c56 <_printf_float+0xae>
 8009d1c:	232d      	movs	r3, #45	; 0x2d
 8009d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d22:	e798      	b.n	8009c56 <_printf_float+0xae>
 8009d24:	9a06      	ldr	r2, [sp, #24]
 8009d26:	2a47      	cmp	r2, #71	; 0x47
 8009d28:	d1be      	bne.n	8009ca8 <_printf_float+0x100>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1bc      	bne.n	8009ca8 <_printf_float+0x100>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e7b9      	b.n	8009ca6 <_printf_float+0xfe>
 8009d32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d36:	d118      	bne.n	8009d6a <_printf_float+0x1c2>
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	dd0b      	ble.n	8009d56 <_printf_float+0x1ae>
 8009d3e:	6121      	str	r1, [r4, #16]
 8009d40:	b913      	cbnz	r3, 8009d48 <_printf_float+0x1a0>
 8009d42:	6822      	ldr	r2, [r4, #0]
 8009d44:	07d0      	lsls	r0, r2, #31
 8009d46:	d502      	bpl.n	8009d4e <_printf_float+0x1a6>
 8009d48:	3301      	adds	r3, #1
 8009d4a:	440b      	add	r3, r1
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d50:	f04f 0900 	mov.w	r9, #0
 8009d54:	e7de      	b.n	8009d14 <_printf_float+0x16c>
 8009d56:	b913      	cbnz	r3, 8009d5e <_printf_float+0x1b6>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	07d2      	lsls	r2, r2, #31
 8009d5c:	d501      	bpl.n	8009d62 <_printf_float+0x1ba>
 8009d5e:	3302      	adds	r3, #2
 8009d60:	e7f4      	b.n	8009d4c <_printf_float+0x1a4>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e7f2      	b.n	8009d4c <_printf_float+0x1a4>
 8009d66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	db05      	blt.n	8009d7c <_printf_float+0x1d4>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	6121      	str	r1, [r4, #16]
 8009d74:	07d8      	lsls	r0, r3, #31
 8009d76:	d5ea      	bpl.n	8009d4e <_printf_float+0x1a6>
 8009d78:	1c4b      	adds	r3, r1, #1
 8009d7a:	e7e7      	b.n	8009d4c <_printf_float+0x1a4>
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	bfd4      	ite	le
 8009d80:	f1c1 0202 	rsble	r2, r1, #2
 8009d84:	2201      	movgt	r2, #1
 8009d86:	4413      	add	r3, r2
 8009d88:	e7e0      	b.n	8009d4c <_printf_float+0x1a4>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	055a      	lsls	r2, r3, #21
 8009d8e:	d407      	bmi.n	8009da0 <_printf_float+0x1f8>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	4642      	mov	r2, r8
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	d12c      	bne.n	8009df8 <_printf_float+0x250>
 8009d9e:	e764      	b.n	8009c6a <_printf_float+0xc2>
 8009da0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009da4:	f240 80e0 	bls.w	8009f68 <_printf_float+0x3c0>
 8009da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dac:	2200      	movs	r2, #0
 8009dae:	2300      	movs	r3, #0
 8009db0:	f7f6 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d034      	beq.n	8009e22 <_printf_float+0x27a>
 8009db8:	4a37      	ldr	r2, [pc, #220]	; (8009e98 <_printf_float+0x2f0>)
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	47b8      	blx	r7
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	f43f af51 	beq.w	8009c6a <_printf_float+0xc2>
 8009dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	db02      	blt.n	8009dd6 <_printf_float+0x22e>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	07d8      	lsls	r0, r3, #31
 8009dd4:	d510      	bpl.n	8009df8 <_printf_float+0x250>
 8009dd6:	ee18 3a10 	vmov	r3, s16
 8009dda:	4652      	mov	r2, sl
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f af41 	beq.w	8009c6a <_printf_float+0xc2>
 8009de8:	f04f 0800 	mov.w	r8, #0
 8009dec:	f104 091a 	add.w	r9, r4, #26
 8009df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df2:	3b01      	subs	r3, #1
 8009df4:	4543      	cmp	r3, r8
 8009df6:	dc09      	bgt.n	8009e0c <_printf_float+0x264>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	079b      	lsls	r3, r3, #30
 8009dfc:	f100 8105 	bmi.w	800a00a <_printf_float+0x462>
 8009e00:	68e0      	ldr	r0, [r4, #12]
 8009e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e04:	4298      	cmp	r0, r3
 8009e06:	bfb8      	it	lt
 8009e08:	4618      	movlt	r0, r3
 8009e0a:	e730      	b.n	8009c6e <_printf_float+0xc6>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	464a      	mov	r2, r9
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	47b8      	blx	r7
 8009e16:	3001      	adds	r0, #1
 8009e18:	f43f af27 	beq.w	8009c6a <_printf_float+0xc2>
 8009e1c:	f108 0801 	add.w	r8, r8, #1
 8009e20:	e7e6      	b.n	8009df0 <_printf_float+0x248>
 8009e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dc39      	bgt.n	8009e9c <_printf_float+0x2f4>
 8009e28:	4a1b      	ldr	r2, [pc, #108]	; (8009e98 <_printf_float+0x2f0>)
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f af19 	beq.w	8009c6a <_printf_float+0xc2>
 8009e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	d102      	bne.n	8009e46 <_printf_float+0x29e>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	07d9      	lsls	r1, r3, #31
 8009e44:	d5d8      	bpl.n	8009df8 <_printf_float+0x250>
 8009e46:	ee18 3a10 	vmov	r3, s16
 8009e4a:	4652      	mov	r2, sl
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b8      	blx	r7
 8009e52:	3001      	adds	r0, #1
 8009e54:	f43f af09 	beq.w	8009c6a <_printf_float+0xc2>
 8009e58:	f04f 0900 	mov.w	r9, #0
 8009e5c:	f104 0a1a 	add.w	sl, r4, #26
 8009e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e62:	425b      	negs	r3, r3
 8009e64:	454b      	cmp	r3, r9
 8009e66:	dc01      	bgt.n	8009e6c <_printf_float+0x2c4>
 8009e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e6a:	e792      	b.n	8009d92 <_printf_float+0x1ea>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	4652      	mov	r2, sl
 8009e70:	4631      	mov	r1, r6
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b8      	blx	r7
 8009e76:	3001      	adds	r0, #1
 8009e78:	f43f aef7 	beq.w	8009c6a <_printf_float+0xc2>
 8009e7c:	f109 0901 	add.w	r9, r9, #1
 8009e80:	e7ee      	b.n	8009e60 <_printf_float+0x2b8>
 8009e82:	bf00      	nop
 8009e84:	7fefffff 	.word	0x7fefffff
 8009e88:	0800e7e8 	.word	0x0800e7e8
 8009e8c:	0800e7ec 	.word	0x0800e7ec
 8009e90:	0800e7f4 	.word	0x0800e7f4
 8009e94:	0800e7f0 	.word	0x0800e7f0
 8009e98:	0800e7f8 	.word	0x0800e7f8
 8009e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	bfa8      	it	ge
 8009ea4:	461a      	movge	r2, r3
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	4691      	mov	r9, r2
 8009eaa:	dc37      	bgt.n	8009f1c <_printf_float+0x374>
 8009eac:	f04f 0b00 	mov.w	fp, #0
 8009eb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eb4:	f104 021a 	add.w	r2, r4, #26
 8009eb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eba:	9305      	str	r3, [sp, #20]
 8009ebc:	eba3 0309 	sub.w	r3, r3, r9
 8009ec0:	455b      	cmp	r3, fp
 8009ec2:	dc33      	bgt.n	8009f2c <_printf_float+0x384>
 8009ec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	db3b      	blt.n	8009f44 <_printf_float+0x39c>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	07da      	lsls	r2, r3, #31
 8009ed0:	d438      	bmi.n	8009f44 <_printf_float+0x39c>
 8009ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ed4:	9b05      	ldr	r3, [sp, #20]
 8009ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	eba2 0901 	sub.w	r9, r2, r1
 8009ede:	4599      	cmp	r9, r3
 8009ee0:	bfa8      	it	ge
 8009ee2:	4699      	movge	r9, r3
 8009ee4:	f1b9 0f00 	cmp.w	r9, #0
 8009ee8:	dc35      	bgt.n	8009f56 <_printf_float+0x3ae>
 8009eea:	f04f 0800 	mov.w	r8, #0
 8009eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ef2:	f104 0a1a 	add.w	sl, r4, #26
 8009ef6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	eba3 0309 	sub.w	r3, r3, r9
 8009f00:	4543      	cmp	r3, r8
 8009f02:	f77f af79 	ble.w	8009df8 <_printf_float+0x250>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4652      	mov	r2, sl
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	f43f aeaa 	beq.w	8009c6a <_printf_float+0xc2>
 8009f16:	f108 0801 	add.w	r8, r8, #1
 8009f1a:	e7ec      	b.n	8009ef6 <_printf_float+0x34e>
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	4631      	mov	r1, r6
 8009f20:	4642      	mov	r2, r8
 8009f22:	4628      	mov	r0, r5
 8009f24:	47b8      	blx	r7
 8009f26:	3001      	adds	r0, #1
 8009f28:	d1c0      	bne.n	8009eac <_printf_float+0x304>
 8009f2a:	e69e      	b.n	8009c6a <_printf_float+0xc2>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4631      	mov	r1, r6
 8009f30:	4628      	mov	r0, r5
 8009f32:	9205      	str	r2, [sp, #20]
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	f43f ae97 	beq.w	8009c6a <_printf_float+0xc2>
 8009f3c:	9a05      	ldr	r2, [sp, #20]
 8009f3e:	f10b 0b01 	add.w	fp, fp, #1
 8009f42:	e7b9      	b.n	8009eb8 <_printf_float+0x310>
 8009f44:	ee18 3a10 	vmov	r3, s16
 8009f48:	4652      	mov	r2, sl
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b8      	blx	r7
 8009f50:	3001      	adds	r0, #1
 8009f52:	d1be      	bne.n	8009ed2 <_printf_float+0x32a>
 8009f54:	e689      	b.n	8009c6a <_printf_float+0xc2>
 8009f56:	9a05      	ldr	r2, [sp, #20]
 8009f58:	464b      	mov	r3, r9
 8009f5a:	4442      	add	r2, r8
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b8      	blx	r7
 8009f62:	3001      	adds	r0, #1
 8009f64:	d1c1      	bne.n	8009eea <_printf_float+0x342>
 8009f66:	e680      	b.n	8009c6a <_printf_float+0xc2>
 8009f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f6a:	2a01      	cmp	r2, #1
 8009f6c:	dc01      	bgt.n	8009f72 <_printf_float+0x3ca>
 8009f6e:	07db      	lsls	r3, r3, #31
 8009f70:	d538      	bpl.n	8009fe4 <_printf_float+0x43c>
 8009f72:	2301      	movs	r3, #1
 8009f74:	4642      	mov	r2, r8
 8009f76:	4631      	mov	r1, r6
 8009f78:	4628      	mov	r0, r5
 8009f7a:	47b8      	blx	r7
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	f43f ae74 	beq.w	8009c6a <_printf_float+0xc2>
 8009f82:	ee18 3a10 	vmov	r3, s16
 8009f86:	4652      	mov	r2, sl
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f ae6b 	beq.w	8009c6a <_printf_float+0xc2>
 8009f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f7f6 fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa0:	b9d8      	cbnz	r0, 8009fda <_printf_float+0x432>
 8009fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa4:	f108 0201 	add.w	r2, r8, #1
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	4631      	mov	r1, r6
 8009fac:	4628      	mov	r0, r5
 8009fae:	47b8      	blx	r7
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d10e      	bne.n	8009fd2 <_printf_float+0x42a>
 8009fb4:	e659      	b.n	8009c6a <_printf_float+0xc2>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4652      	mov	r2, sl
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f43f ae52 	beq.w	8009c6a <_printf_float+0xc2>
 8009fc6:	f108 0801 	add.w	r8, r8, #1
 8009fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	4543      	cmp	r3, r8
 8009fd0:	dcf1      	bgt.n	8009fb6 <_printf_float+0x40e>
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fd8:	e6dc      	b.n	8009d94 <_printf_float+0x1ec>
 8009fda:	f04f 0800 	mov.w	r8, #0
 8009fde:	f104 0a1a 	add.w	sl, r4, #26
 8009fe2:	e7f2      	b.n	8009fca <_printf_float+0x422>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	e7df      	b.n	8009faa <_printf_float+0x402>
 8009fea:	2301      	movs	r3, #1
 8009fec:	464a      	mov	r2, r9
 8009fee:	4631      	mov	r1, r6
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	47b8      	blx	r7
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	f43f ae38 	beq.w	8009c6a <_printf_float+0xc2>
 8009ffa:	f108 0801 	add.w	r8, r8, #1
 8009ffe:	68e3      	ldr	r3, [r4, #12]
 800a000:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a002:	1a5b      	subs	r3, r3, r1
 800a004:	4543      	cmp	r3, r8
 800a006:	dcf0      	bgt.n	8009fea <_printf_float+0x442>
 800a008:	e6fa      	b.n	8009e00 <_printf_float+0x258>
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	f104 0919 	add.w	r9, r4, #25
 800a012:	e7f4      	b.n	8009ffe <_printf_float+0x456>

0800a014 <_printf_common>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	4616      	mov	r6, r2
 800a01a:	4699      	mov	r9, r3
 800a01c:	688a      	ldr	r2, [r1, #8]
 800a01e:	690b      	ldr	r3, [r1, #16]
 800a020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a024:	4293      	cmp	r3, r2
 800a026:	bfb8      	it	lt
 800a028:	4613      	movlt	r3, r2
 800a02a:	6033      	str	r3, [r6, #0]
 800a02c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a030:	4607      	mov	r7, r0
 800a032:	460c      	mov	r4, r1
 800a034:	b10a      	cbz	r2, 800a03a <_printf_common+0x26>
 800a036:	3301      	adds	r3, #1
 800a038:	6033      	str	r3, [r6, #0]
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	0699      	lsls	r1, r3, #26
 800a03e:	bf42      	ittt	mi
 800a040:	6833      	ldrmi	r3, [r6, #0]
 800a042:	3302      	addmi	r3, #2
 800a044:	6033      	strmi	r3, [r6, #0]
 800a046:	6825      	ldr	r5, [r4, #0]
 800a048:	f015 0506 	ands.w	r5, r5, #6
 800a04c:	d106      	bne.n	800a05c <_printf_common+0x48>
 800a04e:	f104 0a19 	add.w	sl, r4, #25
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	6832      	ldr	r2, [r6, #0]
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dc26      	bgt.n	800a0aa <_printf_common+0x96>
 800a05c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a060:	1e13      	subs	r3, r2, #0
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	bf18      	it	ne
 800a066:	2301      	movne	r3, #1
 800a068:	0692      	lsls	r2, r2, #26
 800a06a:	d42b      	bmi.n	800a0c4 <_printf_common+0xb0>
 800a06c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a070:	4649      	mov	r1, r9
 800a072:	4638      	mov	r0, r7
 800a074:	47c0      	blx	r8
 800a076:	3001      	adds	r0, #1
 800a078:	d01e      	beq.n	800a0b8 <_printf_common+0xa4>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	68e5      	ldr	r5, [r4, #12]
 800a07e:	6832      	ldr	r2, [r6, #0]
 800a080:	f003 0306 	and.w	r3, r3, #6
 800a084:	2b04      	cmp	r3, #4
 800a086:	bf08      	it	eq
 800a088:	1aad      	subeq	r5, r5, r2
 800a08a:	68a3      	ldr	r3, [r4, #8]
 800a08c:	6922      	ldr	r2, [r4, #16]
 800a08e:	bf0c      	ite	eq
 800a090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a094:	2500      	movne	r5, #0
 800a096:	4293      	cmp	r3, r2
 800a098:	bfc4      	itt	gt
 800a09a:	1a9b      	subgt	r3, r3, r2
 800a09c:	18ed      	addgt	r5, r5, r3
 800a09e:	2600      	movs	r6, #0
 800a0a0:	341a      	adds	r4, #26
 800a0a2:	42b5      	cmp	r5, r6
 800a0a4:	d11a      	bne.n	800a0dc <_printf_common+0xc8>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e008      	b.n	800a0bc <_printf_common+0xa8>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4652      	mov	r2, sl
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	47c0      	blx	r8
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d103      	bne.n	800a0c0 <_printf_common+0xac>
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	3501      	adds	r5, #1
 800a0c2:	e7c6      	b.n	800a052 <_printf_common+0x3e>
 800a0c4:	18e1      	adds	r1, r4, r3
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	2030      	movs	r0, #48	; 0x30
 800a0ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ce:	4422      	add	r2, r4
 800a0d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0d8:	3302      	adds	r3, #2
 800a0da:	e7c7      	b.n	800a06c <_printf_common+0x58>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4622      	mov	r2, r4
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	47c0      	blx	r8
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d0e6      	beq.n	800a0b8 <_printf_common+0xa4>
 800a0ea:	3601      	adds	r6, #1
 800a0ec:	e7d9      	b.n	800a0a2 <_printf_common+0x8e>
	...

0800a0f0 <_printf_i>:
 800a0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	4691      	mov	r9, r2
 800a0f8:	7e27      	ldrb	r7, [r4, #24]
 800a0fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0fc:	2f78      	cmp	r7, #120	; 0x78
 800a0fe:	4680      	mov	r8, r0
 800a100:	469a      	mov	sl, r3
 800a102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a106:	d807      	bhi.n	800a118 <_printf_i+0x28>
 800a108:	2f62      	cmp	r7, #98	; 0x62
 800a10a:	d80a      	bhi.n	800a122 <_printf_i+0x32>
 800a10c:	2f00      	cmp	r7, #0
 800a10e:	f000 80d8 	beq.w	800a2c2 <_printf_i+0x1d2>
 800a112:	2f58      	cmp	r7, #88	; 0x58
 800a114:	f000 80a3 	beq.w	800a25e <_printf_i+0x16e>
 800a118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a11c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a120:	e03a      	b.n	800a198 <_printf_i+0xa8>
 800a122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a126:	2b15      	cmp	r3, #21
 800a128:	d8f6      	bhi.n	800a118 <_printf_i+0x28>
 800a12a:	a001      	add	r0, pc, #4	; (adr r0, 800a130 <_printf_i+0x40>)
 800a12c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a130:	0800a189 	.word	0x0800a189
 800a134:	0800a19d 	.word	0x0800a19d
 800a138:	0800a119 	.word	0x0800a119
 800a13c:	0800a119 	.word	0x0800a119
 800a140:	0800a119 	.word	0x0800a119
 800a144:	0800a119 	.word	0x0800a119
 800a148:	0800a19d 	.word	0x0800a19d
 800a14c:	0800a119 	.word	0x0800a119
 800a150:	0800a119 	.word	0x0800a119
 800a154:	0800a119 	.word	0x0800a119
 800a158:	0800a119 	.word	0x0800a119
 800a15c:	0800a2a9 	.word	0x0800a2a9
 800a160:	0800a1cd 	.word	0x0800a1cd
 800a164:	0800a28b 	.word	0x0800a28b
 800a168:	0800a119 	.word	0x0800a119
 800a16c:	0800a119 	.word	0x0800a119
 800a170:	0800a2cb 	.word	0x0800a2cb
 800a174:	0800a119 	.word	0x0800a119
 800a178:	0800a1cd 	.word	0x0800a1cd
 800a17c:	0800a119 	.word	0x0800a119
 800a180:	0800a119 	.word	0x0800a119
 800a184:	0800a293 	.word	0x0800a293
 800a188:	680b      	ldr	r3, [r1, #0]
 800a18a:	1d1a      	adds	r2, r3, #4
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	600a      	str	r2, [r1, #0]
 800a190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a198:	2301      	movs	r3, #1
 800a19a:	e0a3      	b.n	800a2e4 <_printf_i+0x1f4>
 800a19c:	6825      	ldr	r5, [r4, #0]
 800a19e:	6808      	ldr	r0, [r1, #0]
 800a1a0:	062e      	lsls	r6, r5, #24
 800a1a2:	f100 0304 	add.w	r3, r0, #4
 800a1a6:	d50a      	bpl.n	800a1be <_printf_i+0xce>
 800a1a8:	6805      	ldr	r5, [r0, #0]
 800a1aa:	600b      	str	r3, [r1, #0]
 800a1ac:	2d00      	cmp	r5, #0
 800a1ae:	da03      	bge.n	800a1b8 <_printf_i+0xc8>
 800a1b0:	232d      	movs	r3, #45	; 0x2d
 800a1b2:	426d      	negs	r5, r5
 800a1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b8:	485e      	ldr	r0, [pc, #376]	; (800a334 <_printf_i+0x244>)
 800a1ba:	230a      	movs	r3, #10
 800a1bc:	e019      	b.n	800a1f2 <_printf_i+0x102>
 800a1be:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a1c2:	6805      	ldr	r5, [r0, #0]
 800a1c4:	600b      	str	r3, [r1, #0]
 800a1c6:	bf18      	it	ne
 800a1c8:	b22d      	sxthne	r5, r5
 800a1ca:	e7ef      	b.n	800a1ac <_printf_i+0xbc>
 800a1cc:	680b      	ldr	r3, [r1, #0]
 800a1ce:	6825      	ldr	r5, [r4, #0]
 800a1d0:	1d18      	adds	r0, r3, #4
 800a1d2:	6008      	str	r0, [r1, #0]
 800a1d4:	0628      	lsls	r0, r5, #24
 800a1d6:	d501      	bpl.n	800a1dc <_printf_i+0xec>
 800a1d8:	681d      	ldr	r5, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <_printf_i+0xf2>
 800a1dc:	0669      	lsls	r1, r5, #25
 800a1de:	d5fb      	bpl.n	800a1d8 <_printf_i+0xe8>
 800a1e0:	881d      	ldrh	r5, [r3, #0]
 800a1e2:	4854      	ldr	r0, [pc, #336]	; (800a334 <_printf_i+0x244>)
 800a1e4:	2f6f      	cmp	r7, #111	; 0x6f
 800a1e6:	bf0c      	ite	eq
 800a1e8:	2308      	moveq	r3, #8
 800a1ea:	230a      	movne	r3, #10
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1f2:	6866      	ldr	r6, [r4, #4]
 800a1f4:	60a6      	str	r6, [r4, #8]
 800a1f6:	2e00      	cmp	r6, #0
 800a1f8:	bfa2      	ittt	ge
 800a1fa:	6821      	ldrge	r1, [r4, #0]
 800a1fc:	f021 0104 	bicge.w	r1, r1, #4
 800a200:	6021      	strge	r1, [r4, #0]
 800a202:	b90d      	cbnz	r5, 800a208 <_printf_i+0x118>
 800a204:	2e00      	cmp	r6, #0
 800a206:	d04d      	beq.n	800a2a4 <_printf_i+0x1b4>
 800a208:	4616      	mov	r6, r2
 800a20a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a20e:	fb03 5711 	mls	r7, r3, r1, r5
 800a212:	5dc7      	ldrb	r7, [r0, r7]
 800a214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a218:	462f      	mov	r7, r5
 800a21a:	42bb      	cmp	r3, r7
 800a21c:	460d      	mov	r5, r1
 800a21e:	d9f4      	bls.n	800a20a <_printf_i+0x11a>
 800a220:	2b08      	cmp	r3, #8
 800a222:	d10b      	bne.n	800a23c <_printf_i+0x14c>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	07df      	lsls	r7, r3, #31
 800a228:	d508      	bpl.n	800a23c <_printf_i+0x14c>
 800a22a:	6923      	ldr	r3, [r4, #16]
 800a22c:	6861      	ldr	r1, [r4, #4]
 800a22e:	4299      	cmp	r1, r3
 800a230:	bfde      	ittt	le
 800a232:	2330      	movle	r3, #48	; 0x30
 800a234:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a238:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a23c:	1b92      	subs	r2, r2, r6
 800a23e:	6122      	str	r2, [r4, #16]
 800a240:	f8cd a000 	str.w	sl, [sp]
 800a244:	464b      	mov	r3, r9
 800a246:	aa03      	add	r2, sp, #12
 800a248:	4621      	mov	r1, r4
 800a24a:	4640      	mov	r0, r8
 800a24c:	f7ff fee2 	bl	800a014 <_printf_common>
 800a250:	3001      	adds	r0, #1
 800a252:	d14c      	bne.n	800a2ee <_printf_i+0x1fe>
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	b004      	add	sp, #16
 800a25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25e:	4835      	ldr	r0, [pc, #212]	; (800a334 <_printf_i+0x244>)
 800a260:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	680e      	ldr	r6, [r1, #0]
 800a268:	061f      	lsls	r7, r3, #24
 800a26a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a26e:	600e      	str	r6, [r1, #0]
 800a270:	d514      	bpl.n	800a29c <_printf_i+0x1ac>
 800a272:	07d9      	lsls	r1, r3, #31
 800a274:	bf44      	itt	mi
 800a276:	f043 0320 	orrmi.w	r3, r3, #32
 800a27a:	6023      	strmi	r3, [r4, #0]
 800a27c:	b91d      	cbnz	r5, 800a286 <_printf_i+0x196>
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	f023 0320 	bic.w	r3, r3, #32
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	2310      	movs	r3, #16
 800a288:	e7b0      	b.n	800a1ec <_printf_i+0xfc>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	f043 0320 	orr.w	r3, r3, #32
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	2378      	movs	r3, #120	; 0x78
 800a294:	4828      	ldr	r0, [pc, #160]	; (800a338 <_printf_i+0x248>)
 800a296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a29a:	e7e3      	b.n	800a264 <_printf_i+0x174>
 800a29c:	065e      	lsls	r6, r3, #25
 800a29e:	bf48      	it	mi
 800a2a0:	b2ad      	uxthmi	r5, r5
 800a2a2:	e7e6      	b.n	800a272 <_printf_i+0x182>
 800a2a4:	4616      	mov	r6, r2
 800a2a6:	e7bb      	b.n	800a220 <_printf_i+0x130>
 800a2a8:	680b      	ldr	r3, [r1, #0]
 800a2aa:	6826      	ldr	r6, [r4, #0]
 800a2ac:	6960      	ldr	r0, [r4, #20]
 800a2ae:	1d1d      	adds	r5, r3, #4
 800a2b0:	600d      	str	r5, [r1, #0]
 800a2b2:	0635      	lsls	r5, r6, #24
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	d501      	bpl.n	800a2bc <_printf_i+0x1cc>
 800a2b8:	6018      	str	r0, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <_printf_i+0x1d2>
 800a2bc:	0671      	lsls	r1, r6, #25
 800a2be:	d5fb      	bpl.n	800a2b8 <_printf_i+0x1c8>
 800a2c0:	8018      	strh	r0, [r3, #0]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	4616      	mov	r6, r2
 800a2c8:	e7ba      	b.n	800a240 <_printf_i+0x150>
 800a2ca:	680b      	ldr	r3, [r1, #0]
 800a2cc:	1d1a      	adds	r2, r3, #4
 800a2ce:	600a      	str	r2, [r1, #0]
 800a2d0:	681e      	ldr	r6, [r3, #0]
 800a2d2:	6862      	ldr	r2, [r4, #4]
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7f5 ff82 	bl	80001e0 <memchr>
 800a2dc:	b108      	cbz	r0, 800a2e2 <_printf_i+0x1f2>
 800a2de:	1b80      	subs	r0, r0, r6
 800a2e0:	6060      	str	r0, [r4, #4]
 800a2e2:	6863      	ldr	r3, [r4, #4]
 800a2e4:	6123      	str	r3, [r4, #16]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ec:	e7a8      	b.n	800a240 <_printf_i+0x150>
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	47d0      	blx	sl
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d0ab      	beq.n	800a254 <_printf_i+0x164>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	079b      	lsls	r3, r3, #30
 800a300:	d413      	bmi.n	800a32a <_printf_i+0x23a>
 800a302:	68e0      	ldr	r0, [r4, #12]
 800a304:	9b03      	ldr	r3, [sp, #12]
 800a306:	4298      	cmp	r0, r3
 800a308:	bfb8      	it	lt
 800a30a:	4618      	movlt	r0, r3
 800a30c:	e7a4      	b.n	800a258 <_printf_i+0x168>
 800a30e:	2301      	movs	r3, #1
 800a310:	4632      	mov	r2, r6
 800a312:	4649      	mov	r1, r9
 800a314:	4640      	mov	r0, r8
 800a316:	47d0      	blx	sl
 800a318:	3001      	adds	r0, #1
 800a31a:	d09b      	beq.n	800a254 <_printf_i+0x164>
 800a31c:	3501      	adds	r5, #1
 800a31e:	68e3      	ldr	r3, [r4, #12]
 800a320:	9903      	ldr	r1, [sp, #12]
 800a322:	1a5b      	subs	r3, r3, r1
 800a324:	42ab      	cmp	r3, r5
 800a326:	dcf2      	bgt.n	800a30e <_printf_i+0x21e>
 800a328:	e7eb      	b.n	800a302 <_printf_i+0x212>
 800a32a:	2500      	movs	r5, #0
 800a32c:	f104 0619 	add.w	r6, r4, #25
 800a330:	e7f5      	b.n	800a31e <_printf_i+0x22e>
 800a332:	bf00      	nop
 800a334:	0800e7fa 	.word	0x0800e7fa
 800a338:	0800e80b 	.word	0x0800e80b

0800a33c <_scanf_float>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	b087      	sub	sp, #28
 800a342:	4617      	mov	r7, r2
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	688b      	ldr	r3, [r1, #8]
 800a348:	1e5a      	subs	r2, r3, #1
 800a34a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a34e:	bf83      	ittte	hi
 800a350:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a354:	195b      	addhi	r3, r3, r5
 800a356:	9302      	strhi	r3, [sp, #8]
 800a358:	2300      	movls	r3, #0
 800a35a:	bf86      	itte	hi
 800a35c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a360:	608b      	strhi	r3, [r1, #8]
 800a362:	9302      	strls	r3, [sp, #8]
 800a364:	680b      	ldr	r3, [r1, #0]
 800a366:	468b      	mov	fp, r1
 800a368:	2500      	movs	r5, #0
 800a36a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a36e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a372:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a376:	4680      	mov	r8, r0
 800a378:	460c      	mov	r4, r1
 800a37a:	465e      	mov	r6, fp
 800a37c:	46aa      	mov	sl, r5
 800a37e:	46a9      	mov	r9, r5
 800a380:	9501      	str	r5, [sp, #4]
 800a382:	68a2      	ldr	r2, [r4, #8]
 800a384:	b152      	cbz	r2, 800a39c <_scanf_float+0x60>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2b4e      	cmp	r3, #78	; 0x4e
 800a38c:	d864      	bhi.n	800a458 <_scanf_float+0x11c>
 800a38e:	2b40      	cmp	r3, #64	; 0x40
 800a390:	d83c      	bhi.n	800a40c <_scanf_float+0xd0>
 800a392:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a396:	b2c8      	uxtb	r0, r1
 800a398:	280e      	cmp	r0, #14
 800a39a:	d93a      	bls.n	800a412 <_scanf_float+0xd6>
 800a39c:	f1b9 0f00 	cmp.w	r9, #0
 800a3a0:	d003      	beq.n	800a3aa <_scanf_float+0x6e>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3ae:	f1ba 0f01 	cmp.w	sl, #1
 800a3b2:	f200 8113 	bhi.w	800a5dc <_scanf_float+0x2a0>
 800a3b6:	455e      	cmp	r6, fp
 800a3b8:	f200 8105 	bhi.w	800a5c6 <_scanf_float+0x28a>
 800a3bc:	2501      	movs	r5, #1
 800a3be:	4628      	mov	r0, r5
 800a3c0:	b007      	add	sp, #28
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a3ca:	2a0d      	cmp	r2, #13
 800a3cc:	d8e6      	bhi.n	800a39c <_scanf_float+0x60>
 800a3ce:	a101      	add	r1, pc, #4	; (adr r1, 800a3d4 <_scanf_float+0x98>)
 800a3d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a3d4:	0800a513 	.word	0x0800a513
 800a3d8:	0800a39d 	.word	0x0800a39d
 800a3dc:	0800a39d 	.word	0x0800a39d
 800a3e0:	0800a39d 	.word	0x0800a39d
 800a3e4:	0800a573 	.word	0x0800a573
 800a3e8:	0800a54b 	.word	0x0800a54b
 800a3ec:	0800a39d 	.word	0x0800a39d
 800a3f0:	0800a39d 	.word	0x0800a39d
 800a3f4:	0800a521 	.word	0x0800a521
 800a3f8:	0800a39d 	.word	0x0800a39d
 800a3fc:	0800a39d 	.word	0x0800a39d
 800a400:	0800a39d 	.word	0x0800a39d
 800a404:	0800a39d 	.word	0x0800a39d
 800a408:	0800a4d9 	.word	0x0800a4d9
 800a40c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a410:	e7db      	b.n	800a3ca <_scanf_float+0x8e>
 800a412:	290e      	cmp	r1, #14
 800a414:	d8c2      	bhi.n	800a39c <_scanf_float+0x60>
 800a416:	a001      	add	r0, pc, #4	; (adr r0, 800a41c <_scanf_float+0xe0>)
 800a418:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a41c:	0800a4cb 	.word	0x0800a4cb
 800a420:	0800a39d 	.word	0x0800a39d
 800a424:	0800a4cb 	.word	0x0800a4cb
 800a428:	0800a55f 	.word	0x0800a55f
 800a42c:	0800a39d 	.word	0x0800a39d
 800a430:	0800a479 	.word	0x0800a479
 800a434:	0800a4b5 	.word	0x0800a4b5
 800a438:	0800a4b5 	.word	0x0800a4b5
 800a43c:	0800a4b5 	.word	0x0800a4b5
 800a440:	0800a4b5 	.word	0x0800a4b5
 800a444:	0800a4b5 	.word	0x0800a4b5
 800a448:	0800a4b5 	.word	0x0800a4b5
 800a44c:	0800a4b5 	.word	0x0800a4b5
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4b5 	.word	0x0800a4b5
 800a458:	2b6e      	cmp	r3, #110	; 0x6e
 800a45a:	d809      	bhi.n	800a470 <_scanf_float+0x134>
 800a45c:	2b60      	cmp	r3, #96	; 0x60
 800a45e:	d8b2      	bhi.n	800a3c6 <_scanf_float+0x8a>
 800a460:	2b54      	cmp	r3, #84	; 0x54
 800a462:	d077      	beq.n	800a554 <_scanf_float+0x218>
 800a464:	2b59      	cmp	r3, #89	; 0x59
 800a466:	d199      	bne.n	800a39c <_scanf_float+0x60>
 800a468:	2d07      	cmp	r5, #7
 800a46a:	d197      	bne.n	800a39c <_scanf_float+0x60>
 800a46c:	2508      	movs	r5, #8
 800a46e:	e029      	b.n	800a4c4 <_scanf_float+0x188>
 800a470:	2b74      	cmp	r3, #116	; 0x74
 800a472:	d06f      	beq.n	800a554 <_scanf_float+0x218>
 800a474:	2b79      	cmp	r3, #121	; 0x79
 800a476:	e7f6      	b.n	800a466 <_scanf_float+0x12a>
 800a478:	6821      	ldr	r1, [r4, #0]
 800a47a:	05c8      	lsls	r0, r1, #23
 800a47c:	d51a      	bpl.n	800a4b4 <_scanf_float+0x178>
 800a47e:	9b02      	ldr	r3, [sp, #8]
 800a480:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a484:	6021      	str	r1, [r4, #0]
 800a486:	f109 0901 	add.w	r9, r9, #1
 800a48a:	b11b      	cbz	r3, 800a494 <_scanf_float+0x158>
 800a48c:	3b01      	subs	r3, #1
 800a48e:	3201      	adds	r2, #1
 800a490:	9302      	str	r3, [sp, #8]
 800a492:	60a2      	str	r2, [r4, #8]
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	3b01      	subs	r3, #1
 800a498:	60a3      	str	r3, [r4, #8]
 800a49a:	6923      	ldr	r3, [r4, #16]
 800a49c:	3301      	adds	r3, #1
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	607b      	str	r3, [r7, #4]
 800a4a8:	f340 8084 	ble.w	800a5b4 <_scanf_float+0x278>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	603b      	str	r3, [r7, #0]
 800a4b2:	e766      	b.n	800a382 <_scanf_float+0x46>
 800a4b4:	eb1a 0f05 	cmn.w	sl, r5
 800a4b8:	f47f af70 	bne.w	800a39c <_scanf_float+0x60>
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a4c2:	6022      	str	r2, [r4, #0]
 800a4c4:	f806 3b01 	strb.w	r3, [r6], #1
 800a4c8:	e7e4      	b.n	800a494 <_scanf_float+0x158>
 800a4ca:	6822      	ldr	r2, [r4, #0]
 800a4cc:	0610      	lsls	r0, r2, #24
 800a4ce:	f57f af65 	bpl.w	800a39c <_scanf_float+0x60>
 800a4d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4d6:	e7f4      	b.n	800a4c2 <_scanf_float+0x186>
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	d10e      	bne.n	800a4fc <_scanf_float+0x1c0>
 800a4de:	f1b9 0f00 	cmp.w	r9, #0
 800a4e2:	d10e      	bne.n	800a502 <_scanf_float+0x1c6>
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a4ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a4ee:	d108      	bne.n	800a502 <_scanf_float+0x1c6>
 800a4f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4f4:	6022      	str	r2, [r4, #0]
 800a4f6:	f04f 0a01 	mov.w	sl, #1
 800a4fa:	e7e3      	b.n	800a4c4 <_scanf_float+0x188>
 800a4fc:	f1ba 0f02 	cmp.w	sl, #2
 800a500:	d055      	beq.n	800a5ae <_scanf_float+0x272>
 800a502:	2d01      	cmp	r5, #1
 800a504:	d002      	beq.n	800a50c <_scanf_float+0x1d0>
 800a506:	2d04      	cmp	r5, #4
 800a508:	f47f af48 	bne.w	800a39c <_scanf_float+0x60>
 800a50c:	3501      	adds	r5, #1
 800a50e:	b2ed      	uxtb	r5, r5
 800a510:	e7d8      	b.n	800a4c4 <_scanf_float+0x188>
 800a512:	f1ba 0f01 	cmp.w	sl, #1
 800a516:	f47f af41 	bne.w	800a39c <_scanf_float+0x60>
 800a51a:	f04f 0a02 	mov.w	sl, #2
 800a51e:	e7d1      	b.n	800a4c4 <_scanf_float+0x188>
 800a520:	b97d      	cbnz	r5, 800a542 <_scanf_float+0x206>
 800a522:	f1b9 0f00 	cmp.w	r9, #0
 800a526:	f47f af3c 	bne.w	800a3a2 <_scanf_float+0x66>
 800a52a:	6822      	ldr	r2, [r4, #0]
 800a52c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a530:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a534:	f47f af39 	bne.w	800a3aa <_scanf_float+0x6e>
 800a538:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a53c:	6022      	str	r2, [r4, #0]
 800a53e:	2501      	movs	r5, #1
 800a540:	e7c0      	b.n	800a4c4 <_scanf_float+0x188>
 800a542:	2d03      	cmp	r5, #3
 800a544:	d0e2      	beq.n	800a50c <_scanf_float+0x1d0>
 800a546:	2d05      	cmp	r5, #5
 800a548:	e7de      	b.n	800a508 <_scanf_float+0x1cc>
 800a54a:	2d02      	cmp	r5, #2
 800a54c:	f47f af26 	bne.w	800a39c <_scanf_float+0x60>
 800a550:	2503      	movs	r5, #3
 800a552:	e7b7      	b.n	800a4c4 <_scanf_float+0x188>
 800a554:	2d06      	cmp	r5, #6
 800a556:	f47f af21 	bne.w	800a39c <_scanf_float+0x60>
 800a55a:	2507      	movs	r5, #7
 800a55c:	e7b2      	b.n	800a4c4 <_scanf_float+0x188>
 800a55e:	6822      	ldr	r2, [r4, #0]
 800a560:	0591      	lsls	r1, r2, #22
 800a562:	f57f af1b 	bpl.w	800a39c <_scanf_float+0x60>
 800a566:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a570:	e7a8      	b.n	800a4c4 <_scanf_float+0x188>
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a578:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a57c:	d006      	beq.n	800a58c <_scanf_float+0x250>
 800a57e:	0550      	lsls	r0, r2, #21
 800a580:	f57f af0c 	bpl.w	800a39c <_scanf_float+0x60>
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	f43f af0f 	beq.w	800a3aa <_scanf_float+0x6e>
 800a58c:	0591      	lsls	r1, r2, #22
 800a58e:	bf58      	it	pl
 800a590:	9901      	ldrpl	r1, [sp, #4]
 800a592:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a596:	bf58      	it	pl
 800a598:	eba9 0101 	subpl.w	r1, r9, r1
 800a59c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a5a0:	bf58      	it	pl
 800a5a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	f04f 0900 	mov.w	r9, #0
 800a5ac:	e78a      	b.n	800a4c4 <_scanf_float+0x188>
 800a5ae:	f04f 0a03 	mov.w	sl, #3
 800a5b2:	e787      	b.n	800a4c4 <_scanf_float+0x188>
 800a5b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4798      	blx	r3
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f aedf 	beq.w	800a382 <_scanf_float+0x46>
 800a5c4:	e6ea      	b.n	800a39c <_scanf_float+0x60>
 800a5c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5ce:	463a      	mov	r2, r7
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	4798      	blx	r3
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	6123      	str	r3, [r4, #16]
 800a5da:	e6ec      	b.n	800a3b6 <_scanf_float+0x7a>
 800a5dc:	1e6b      	subs	r3, r5, #1
 800a5de:	2b06      	cmp	r3, #6
 800a5e0:	d825      	bhi.n	800a62e <_scanf_float+0x2f2>
 800a5e2:	2d02      	cmp	r5, #2
 800a5e4:	d836      	bhi.n	800a654 <_scanf_float+0x318>
 800a5e6:	455e      	cmp	r6, fp
 800a5e8:	f67f aee8 	bls.w	800a3bc <_scanf_float+0x80>
 800a5ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5f4:	463a      	mov	r2, r7
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	4798      	blx	r3
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	e7f1      	b.n	800a5e6 <_scanf_float+0x2aa>
 800a602:	9802      	ldr	r0, [sp, #8]
 800a604:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a608:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a60c:	9002      	str	r0, [sp, #8]
 800a60e:	463a      	mov	r2, r7
 800a610:	4640      	mov	r0, r8
 800a612:	4798      	blx	r3
 800a614:	6923      	ldr	r3, [r4, #16]
 800a616:	3b01      	subs	r3, #1
 800a618:	6123      	str	r3, [r4, #16]
 800a61a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a61e:	fa5f fa8a 	uxtb.w	sl, sl
 800a622:	f1ba 0f02 	cmp.w	sl, #2
 800a626:	d1ec      	bne.n	800a602 <_scanf_float+0x2c6>
 800a628:	3d03      	subs	r5, #3
 800a62a:	b2ed      	uxtb	r5, r5
 800a62c:	1b76      	subs	r6, r6, r5
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	05da      	lsls	r2, r3, #23
 800a632:	d52f      	bpl.n	800a694 <_scanf_float+0x358>
 800a634:	055b      	lsls	r3, r3, #21
 800a636:	d510      	bpl.n	800a65a <_scanf_float+0x31e>
 800a638:	455e      	cmp	r6, fp
 800a63a:	f67f aebf 	bls.w	800a3bc <_scanf_float+0x80>
 800a63e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a646:	463a      	mov	r2, r7
 800a648:	4640      	mov	r0, r8
 800a64a:	4798      	blx	r3
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	3b01      	subs	r3, #1
 800a650:	6123      	str	r3, [r4, #16]
 800a652:	e7f1      	b.n	800a638 <_scanf_float+0x2fc>
 800a654:	46aa      	mov	sl, r5
 800a656:	9602      	str	r6, [sp, #8]
 800a658:	e7df      	b.n	800a61a <_scanf_float+0x2de>
 800a65a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	2965      	cmp	r1, #101	; 0x65
 800a662:	f103 33ff 	add.w	r3, r3, #4294967295
 800a666:	f106 35ff 	add.w	r5, r6, #4294967295
 800a66a:	6123      	str	r3, [r4, #16]
 800a66c:	d00c      	beq.n	800a688 <_scanf_float+0x34c>
 800a66e:	2945      	cmp	r1, #69	; 0x45
 800a670:	d00a      	beq.n	800a688 <_scanf_float+0x34c>
 800a672:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a676:	463a      	mov	r2, r7
 800a678:	4640      	mov	r0, r8
 800a67a:	4798      	blx	r3
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a682:	3b01      	subs	r3, #1
 800a684:	1eb5      	subs	r5, r6, #2
 800a686:	6123      	str	r3, [r4, #16]
 800a688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a68c:	463a      	mov	r2, r7
 800a68e:	4640      	mov	r0, r8
 800a690:	4798      	blx	r3
 800a692:	462e      	mov	r6, r5
 800a694:	6825      	ldr	r5, [r4, #0]
 800a696:	f015 0510 	ands.w	r5, r5, #16
 800a69a:	d158      	bne.n	800a74e <_scanf_float+0x412>
 800a69c:	7035      	strb	r5, [r6, #0]
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a8:	d11c      	bne.n	800a6e4 <_scanf_float+0x3a8>
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	454b      	cmp	r3, r9
 800a6ae:	eba3 0209 	sub.w	r2, r3, r9
 800a6b2:	d124      	bne.n	800a6fe <_scanf_float+0x3c2>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	4659      	mov	r1, fp
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	f000 ff2b 	bl	800b514 <_strtod_r>
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	6821      	ldr	r1, [r4, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f011 0f02 	tst.w	r1, #2
 800a6c8:	ec57 6b10 	vmov	r6, r7, d0
 800a6cc:	f103 0204 	add.w	r2, r3, #4
 800a6d0:	d020      	beq.n	800a714 <_scanf_float+0x3d8>
 800a6d2:	9903      	ldr	r1, [sp, #12]
 800a6d4:	600a      	str	r2, [r1, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	e9c3 6700 	strd	r6, r7, [r3]
 800a6dc:	68e3      	ldr	r3, [r4, #12]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60e3      	str	r3, [r4, #12]
 800a6e2:	e66c      	b.n	800a3be <_scanf_float+0x82>
 800a6e4:	9b04      	ldr	r3, [sp, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0e4      	beq.n	800a6b4 <_scanf_float+0x378>
 800a6ea:	9905      	ldr	r1, [sp, #20]
 800a6ec:	230a      	movs	r3, #10
 800a6ee:	462a      	mov	r2, r5
 800a6f0:	3101      	adds	r1, #1
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	f000 ff98 	bl	800b628 <_strtol_r>
 800a6f8:	9b04      	ldr	r3, [sp, #16]
 800a6fa:	9e05      	ldr	r6, [sp, #20]
 800a6fc:	1ac2      	subs	r2, r0, r3
 800a6fe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a702:	429e      	cmp	r6, r3
 800a704:	bf28      	it	cs
 800a706:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a70a:	4912      	ldr	r1, [pc, #72]	; (800a754 <_scanf_float+0x418>)
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 f8b9 	bl	800a884 <siprintf>
 800a712:	e7cf      	b.n	800a6b4 <_scanf_float+0x378>
 800a714:	f011 0f04 	tst.w	r1, #4
 800a718:	9903      	ldr	r1, [sp, #12]
 800a71a:	600a      	str	r2, [r1, #0]
 800a71c:	d1db      	bne.n	800a6d6 <_scanf_float+0x39a>
 800a71e:	f8d3 8000 	ldr.w	r8, [r3]
 800a722:	ee10 2a10 	vmov	r2, s0
 800a726:	ee10 0a10 	vmov	r0, s0
 800a72a:	463b      	mov	r3, r7
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f6 f9fd 	bl	8000b2c <__aeabi_dcmpun>
 800a732:	b128      	cbz	r0, 800a740 <_scanf_float+0x404>
 800a734:	4808      	ldr	r0, [pc, #32]	; (800a758 <_scanf_float+0x41c>)
 800a736:	f000 f89f 	bl	800a878 <nanf>
 800a73a:	ed88 0a00 	vstr	s0, [r8]
 800a73e:	e7cd      	b.n	800a6dc <_scanf_float+0x3a0>
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 fa50 	bl	8000be8 <__aeabi_d2f>
 800a748:	f8c8 0000 	str.w	r0, [r8]
 800a74c:	e7c6      	b.n	800a6dc <_scanf_float+0x3a0>
 800a74e:	2500      	movs	r5, #0
 800a750:	e635      	b.n	800a3be <_scanf_float+0x82>
 800a752:	bf00      	nop
 800a754:	0800e81c 	.word	0x0800e81c
 800a758:	0800ec98 	.word	0x0800ec98

0800a75c <iprintf>:
 800a75c:	b40f      	push	{r0, r1, r2, r3}
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <iprintf+0x2c>)
 800a760:	b513      	push	{r0, r1, r4, lr}
 800a762:	681c      	ldr	r4, [r3, #0]
 800a764:	b124      	cbz	r4, 800a770 <iprintf+0x14>
 800a766:	69a3      	ldr	r3, [r4, #24]
 800a768:	b913      	cbnz	r3, 800a770 <iprintf+0x14>
 800a76a:	4620      	mov	r0, r4
 800a76c:	f001 ffb2 	bl	800c6d4 <__sinit>
 800a770:	ab05      	add	r3, sp, #20
 800a772:	9a04      	ldr	r2, [sp, #16]
 800a774:	68a1      	ldr	r1, [r4, #8]
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	4620      	mov	r0, r4
 800a77a:	f003 fb37 	bl	800ddec <_vfiprintf_r>
 800a77e:	b002      	add	sp, #8
 800a780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a784:	b004      	add	sp, #16
 800a786:	4770      	bx	lr
 800a788:	2000000c 	.word	0x2000000c

0800a78c <_puts_r>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	460e      	mov	r6, r1
 800a790:	4605      	mov	r5, r0
 800a792:	b118      	cbz	r0, 800a79c <_puts_r+0x10>
 800a794:	6983      	ldr	r3, [r0, #24]
 800a796:	b90b      	cbnz	r3, 800a79c <_puts_r+0x10>
 800a798:	f001 ff9c 	bl	800c6d4 <__sinit>
 800a79c:	69ab      	ldr	r3, [r5, #24]
 800a79e:	68ac      	ldr	r4, [r5, #8]
 800a7a0:	b913      	cbnz	r3, 800a7a8 <_puts_r+0x1c>
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f001 ff96 	bl	800c6d4 <__sinit>
 800a7a8:	4b2c      	ldr	r3, [pc, #176]	; (800a85c <_puts_r+0xd0>)
 800a7aa:	429c      	cmp	r4, r3
 800a7ac:	d120      	bne.n	800a7f0 <_puts_r+0x64>
 800a7ae:	686c      	ldr	r4, [r5, #4]
 800a7b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7b2:	07db      	lsls	r3, r3, #31
 800a7b4:	d405      	bmi.n	800a7c2 <_puts_r+0x36>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	0598      	lsls	r0, r3, #22
 800a7ba:	d402      	bmi.n	800a7c2 <_puts_r+0x36>
 800a7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7be:	f002 fb9a 	bl	800cef6 <__retarget_lock_acquire_recursive>
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	0719      	lsls	r1, r3, #28
 800a7c6:	d51d      	bpl.n	800a804 <_puts_r+0x78>
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	b1db      	cbz	r3, 800a804 <_puts_r+0x78>
 800a7cc:	3e01      	subs	r6, #1
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	60a3      	str	r3, [r4, #8]
 800a7d8:	bb39      	cbnz	r1, 800a82a <_puts_r+0x9e>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	da38      	bge.n	800a850 <_puts_r+0xc4>
 800a7de:	4622      	mov	r2, r4
 800a7e0:	210a      	movs	r1, #10
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 ff22 	bl	800b62c <__swbuf_r>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d011      	beq.n	800a810 <_puts_r+0x84>
 800a7ec:	250a      	movs	r5, #10
 800a7ee:	e011      	b.n	800a814 <_puts_r+0x88>
 800a7f0:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <_puts_r+0xd4>)
 800a7f2:	429c      	cmp	r4, r3
 800a7f4:	d101      	bne.n	800a7fa <_puts_r+0x6e>
 800a7f6:	68ac      	ldr	r4, [r5, #8]
 800a7f8:	e7da      	b.n	800a7b0 <_puts_r+0x24>
 800a7fa:	4b1a      	ldr	r3, [pc, #104]	; (800a864 <_puts_r+0xd8>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	bf08      	it	eq
 800a800:	68ec      	ldreq	r4, [r5, #12]
 800a802:	e7d5      	b.n	800a7b0 <_puts_r+0x24>
 800a804:	4621      	mov	r1, r4
 800a806:	4628      	mov	r0, r5
 800a808:	f000 ff62 	bl	800b6d0 <__swsetup_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d0dd      	beq.n	800a7cc <_puts_r+0x40>
 800a810:	f04f 35ff 	mov.w	r5, #4294967295
 800a814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a816:	07da      	lsls	r2, r3, #31
 800a818:	d405      	bmi.n	800a826 <_puts_r+0x9a>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	059b      	lsls	r3, r3, #22
 800a81e:	d402      	bmi.n	800a826 <_puts_r+0x9a>
 800a820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a822:	f002 fb69 	bl	800cef8 <__retarget_lock_release_recursive>
 800a826:	4628      	mov	r0, r5
 800a828:	bd70      	pop	{r4, r5, r6, pc}
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	da04      	bge.n	800a838 <_puts_r+0xac>
 800a82e:	69a2      	ldr	r2, [r4, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	dc06      	bgt.n	800a842 <_puts_r+0xb6>
 800a834:	290a      	cmp	r1, #10
 800a836:	d004      	beq.n	800a842 <_puts_r+0xb6>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	6022      	str	r2, [r4, #0]
 800a83e:	7019      	strb	r1, [r3, #0]
 800a840:	e7c5      	b.n	800a7ce <_puts_r+0x42>
 800a842:	4622      	mov	r2, r4
 800a844:	4628      	mov	r0, r5
 800a846:	f000 fef1 	bl	800b62c <__swbuf_r>
 800a84a:	3001      	adds	r0, #1
 800a84c:	d1bf      	bne.n	800a7ce <_puts_r+0x42>
 800a84e:	e7df      	b.n	800a810 <_puts_r+0x84>
 800a850:	6823      	ldr	r3, [r4, #0]
 800a852:	250a      	movs	r5, #10
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	6022      	str	r2, [r4, #0]
 800a858:	701d      	strb	r5, [r3, #0]
 800a85a:	e7db      	b.n	800a814 <_puts_r+0x88>
 800a85c:	0800ea30 	.word	0x0800ea30
 800a860:	0800ea50 	.word	0x0800ea50
 800a864:	0800ea10 	.word	0x0800ea10

0800a868 <puts>:
 800a868:	4b02      	ldr	r3, [pc, #8]	; (800a874 <puts+0xc>)
 800a86a:	4601      	mov	r1, r0
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	f7ff bf8d 	b.w	800a78c <_puts_r>
 800a872:	bf00      	nop
 800a874:	2000000c 	.word	0x2000000c

0800a878 <nanf>:
 800a878:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a880 <nanf+0x8>
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	7fc00000 	.word	0x7fc00000

0800a884 <siprintf>:
 800a884:	b40e      	push	{r1, r2, r3}
 800a886:	b500      	push	{lr}
 800a888:	b09c      	sub	sp, #112	; 0x70
 800a88a:	ab1d      	add	r3, sp, #116	; 0x74
 800a88c:	9002      	str	r0, [sp, #8]
 800a88e:	9006      	str	r0, [sp, #24]
 800a890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a894:	4809      	ldr	r0, [pc, #36]	; (800a8bc <siprintf+0x38>)
 800a896:	9107      	str	r1, [sp, #28]
 800a898:	9104      	str	r1, [sp, #16]
 800a89a:	4909      	ldr	r1, [pc, #36]	; (800a8c0 <siprintf+0x3c>)
 800a89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a0:	9105      	str	r1, [sp, #20]
 800a8a2:	6800      	ldr	r0, [r0, #0]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	a902      	add	r1, sp, #8
 800a8a8:	f003 f976 	bl	800db98 <_svfiprintf_r>
 800a8ac:	9b02      	ldr	r3, [sp, #8]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	b01c      	add	sp, #112	; 0x70
 800a8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8b8:	b003      	add	sp, #12
 800a8ba:	4770      	bx	lr
 800a8bc:	2000000c 	.word	0x2000000c
 800a8c0:	ffff0208 	.word	0xffff0208

0800a8c4 <sulp>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	ec45 4b10 	vmov	d0, r4, r5
 800a8ce:	4616      	mov	r6, r2
 800a8d0:	f002 fefe 	bl	800d6d0 <__ulp>
 800a8d4:	ec51 0b10 	vmov	r0, r1, d0
 800a8d8:	b17e      	cbz	r6, 800a8fa <sulp+0x36>
 800a8da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dd09      	ble.n	800a8fa <sulp+0x36>
 800a8e6:	051b      	lsls	r3, r3, #20
 800a8e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a8ec:	2400      	movs	r4, #0
 800a8ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	f7f5 fe7f 	bl	80005f8 <__aeabi_dmul>
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	0000      	movs	r0, r0
	...

0800a900 <_strtod_l>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	b0a3      	sub	sp, #140	; 0x8c
 800a906:	461f      	mov	r7, r3
 800a908:	2300      	movs	r3, #0
 800a90a:	931e      	str	r3, [sp, #120]	; 0x78
 800a90c:	4ba4      	ldr	r3, [pc, #656]	; (800aba0 <_strtod_l+0x2a0>)
 800a90e:	9219      	str	r2, [sp, #100]	; 0x64
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	9307      	str	r3, [sp, #28]
 800a914:	4604      	mov	r4, r0
 800a916:	4618      	mov	r0, r3
 800a918:	4688      	mov	r8, r1
 800a91a:	f7f5 fc59 	bl	80001d0 <strlen>
 800a91e:	f04f 0a00 	mov.w	sl, #0
 800a922:	4605      	mov	r5, r0
 800a924:	f04f 0b00 	mov.w	fp, #0
 800a928:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	2a2b      	cmp	r2, #43	; 0x2b
 800a932:	d04c      	beq.n	800a9ce <_strtod_l+0xce>
 800a934:	d839      	bhi.n	800a9aa <_strtod_l+0xaa>
 800a936:	2a0d      	cmp	r2, #13
 800a938:	d832      	bhi.n	800a9a0 <_strtod_l+0xa0>
 800a93a:	2a08      	cmp	r2, #8
 800a93c:	d832      	bhi.n	800a9a4 <_strtod_l+0xa4>
 800a93e:	2a00      	cmp	r2, #0
 800a940:	d03c      	beq.n	800a9bc <_strtod_l+0xbc>
 800a942:	2300      	movs	r3, #0
 800a944:	930e      	str	r3, [sp, #56]	; 0x38
 800a946:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a948:	7833      	ldrb	r3, [r6, #0]
 800a94a:	2b30      	cmp	r3, #48	; 0x30
 800a94c:	f040 80b4 	bne.w	800aab8 <_strtod_l+0x1b8>
 800a950:	7873      	ldrb	r3, [r6, #1]
 800a952:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a956:	2b58      	cmp	r3, #88	; 0x58
 800a958:	d16c      	bne.n	800aa34 <_strtod_l+0x134>
 800a95a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	ab1e      	add	r3, sp, #120	; 0x78
 800a960:	9702      	str	r7, [sp, #8]
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	4a8f      	ldr	r2, [pc, #572]	; (800aba4 <_strtod_l+0x2a4>)
 800a966:	ab1f      	add	r3, sp, #124	; 0x7c
 800a968:	a91d      	add	r1, sp, #116	; 0x74
 800a96a:	4620      	mov	r0, r4
 800a96c:	f001 ffb6 	bl	800c8dc <__gethex>
 800a970:	f010 0707 	ands.w	r7, r0, #7
 800a974:	4605      	mov	r5, r0
 800a976:	d005      	beq.n	800a984 <_strtod_l+0x84>
 800a978:	2f06      	cmp	r7, #6
 800a97a:	d12a      	bne.n	800a9d2 <_strtod_l+0xd2>
 800a97c:	3601      	adds	r6, #1
 800a97e:	2300      	movs	r3, #0
 800a980:	961d      	str	r6, [sp, #116]	; 0x74
 800a982:	930e      	str	r3, [sp, #56]	; 0x38
 800a984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a986:	2b00      	cmp	r3, #0
 800a988:	f040 8596 	bne.w	800b4b8 <_strtod_l+0xbb8>
 800a98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a98e:	b1db      	cbz	r3, 800a9c8 <_strtod_l+0xc8>
 800a990:	4652      	mov	r2, sl
 800a992:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a996:	ec43 2b10 	vmov	d0, r2, r3
 800a99a:	b023      	add	sp, #140	; 0x8c
 800a99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a0:	2a20      	cmp	r2, #32
 800a9a2:	d1ce      	bne.n	800a942 <_strtod_l+0x42>
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	931d      	str	r3, [sp, #116]	; 0x74
 800a9a8:	e7c0      	b.n	800a92c <_strtod_l+0x2c>
 800a9aa:	2a2d      	cmp	r2, #45	; 0x2d
 800a9ac:	d1c9      	bne.n	800a942 <_strtod_l+0x42>
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	920e      	str	r2, [sp, #56]	; 0x38
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	921d      	str	r2, [sp, #116]	; 0x74
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1c4      	bne.n	800a946 <_strtod_l+0x46>
 800a9bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f040 8576 	bne.w	800b4b4 <_strtod_l+0xbb4>
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	465b      	mov	r3, fp
 800a9cc:	e7e3      	b.n	800a996 <_strtod_l+0x96>
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	e7ee      	b.n	800a9b0 <_strtod_l+0xb0>
 800a9d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a9d4:	b13a      	cbz	r2, 800a9e6 <_strtod_l+0xe6>
 800a9d6:	2135      	movs	r1, #53	; 0x35
 800a9d8:	a820      	add	r0, sp, #128	; 0x80
 800a9da:	f002 ff84 	bl	800d8e6 <__copybits>
 800a9de:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f002 fb49 	bl	800d078 <_Bfree>
 800a9e6:	3f01      	subs	r7, #1
 800a9e8:	2f05      	cmp	r7, #5
 800a9ea:	d807      	bhi.n	800a9fc <_strtod_l+0xfc>
 800a9ec:	e8df f007 	tbb	[pc, r7]
 800a9f0:	1d180b0e 	.word	0x1d180b0e
 800a9f4:	030e      	.short	0x030e
 800a9f6:	f04f 0b00 	mov.w	fp, #0
 800a9fa:	46da      	mov	sl, fp
 800a9fc:	0728      	lsls	r0, r5, #28
 800a9fe:	d5c1      	bpl.n	800a984 <_strtod_l+0x84>
 800aa00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aa04:	e7be      	b.n	800a984 <_strtod_l+0x84>
 800aa06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800aa0a:	e7f7      	b.n	800a9fc <_strtod_l+0xfc>
 800aa0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800aa10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aa12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aa16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa1e:	e7ed      	b.n	800a9fc <_strtod_l+0xfc>
 800aa20:	f8df b184 	ldr.w	fp, [pc, #388]	; 800aba8 <_strtod_l+0x2a8>
 800aa24:	f04f 0a00 	mov.w	sl, #0
 800aa28:	e7e8      	b.n	800a9fc <_strtod_l+0xfc>
 800aa2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aa2e:	f04f 3aff 	mov.w	sl, #4294967295
 800aa32:	e7e3      	b.n	800a9fc <_strtod_l+0xfc>
 800aa34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	921d      	str	r2, [sp, #116]	; 0x74
 800aa3a:	785b      	ldrb	r3, [r3, #1]
 800aa3c:	2b30      	cmp	r3, #48	; 0x30
 800aa3e:	d0f9      	beq.n	800aa34 <_strtod_l+0x134>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d09f      	beq.n	800a984 <_strtod_l+0x84>
 800aa44:	2301      	movs	r3, #1
 800aa46:	f04f 0900 	mov.w	r9, #0
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa4e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aa54:	464f      	mov	r7, r9
 800aa56:	220a      	movs	r2, #10
 800aa58:	981d      	ldr	r0, [sp, #116]	; 0x74
 800aa5a:	7806      	ldrb	r6, [r0, #0]
 800aa5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aa60:	b2d9      	uxtb	r1, r3
 800aa62:	2909      	cmp	r1, #9
 800aa64:	d92a      	bls.n	800aabc <_strtod_l+0x1bc>
 800aa66:	9907      	ldr	r1, [sp, #28]
 800aa68:	462a      	mov	r2, r5
 800aa6a:	f003 fb4c 	bl	800e106 <strncmp>
 800aa6e:	b398      	cbz	r0, 800aad8 <_strtod_l+0x1d8>
 800aa70:	2000      	movs	r0, #0
 800aa72:	4633      	mov	r3, r6
 800aa74:	463d      	mov	r5, r7
 800aa76:	9007      	str	r0, [sp, #28]
 800aa78:	4602      	mov	r2, r0
 800aa7a:	2b65      	cmp	r3, #101	; 0x65
 800aa7c:	d001      	beq.n	800aa82 <_strtod_l+0x182>
 800aa7e:	2b45      	cmp	r3, #69	; 0x45
 800aa80:	d118      	bne.n	800aab4 <_strtod_l+0x1b4>
 800aa82:	b91d      	cbnz	r5, 800aa8c <_strtod_l+0x18c>
 800aa84:	9b04      	ldr	r3, [sp, #16]
 800aa86:	4303      	orrs	r3, r0
 800aa88:	d098      	beq.n	800a9bc <_strtod_l+0xbc>
 800aa8a:	2500      	movs	r5, #0
 800aa8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800aa90:	f108 0301 	add.w	r3, r8, #1
 800aa94:	931d      	str	r3, [sp, #116]	; 0x74
 800aa96:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aa9a:	2b2b      	cmp	r3, #43	; 0x2b
 800aa9c:	d075      	beq.n	800ab8a <_strtod_l+0x28a>
 800aa9e:	2b2d      	cmp	r3, #45	; 0x2d
 800aaa0:	d07b      	beq.n	800ab9a <_strtod_l+0x29a>
 800aaa2:	f04f 0c00 	mov.w	ip, #0
 800aaa6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aaaa:	2909      	cmp	r1, #9
 800aaac:	f240 8082 	bls.w	800abb4 <_strtod_l+0x2b4>
 800aab0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800aab4:	2600      	movs	r6, #0
 800aab6:	e09d      	b.n	800abf4 <_strtod_l+0x2f4>
 800aab8:	2300      	movs	r3, #0
 800aaba:	e7c4      	b.n	800aa46 <_strtod_l+0x146>
 800aabc:	2f08      	cmp	r7, #8
 800aabe:	bfd8      	it	le
 800aac0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800aac2:	f100 0001 	add.w	r0, r0, #1
 800aac6:	bfda      	itte	le
 800aac8:	fb02 3301 	mlale	r3, r2, r1, r3
 800aacc:	9309      	strle	r3, [sp, #36]	; 0x24
 800aace:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aad2:	3701      	adds	r7, #1
 800aad4:	901d      	str	r0, [sp, #116]	; 0x74
 800aad6:	e7bf      	b.n	800aa58 <_strtod_l+0x158>
 800aad8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aada:	195a      	adds	r2, r3, r5
 800aadc:	921d      	str	r2, [sp, #116]	; 0x74
 800aade:	5d5b      	ldrb	r3, [r3, r5]
 800aae0:	2f00      	cmp	r7, #0
 800aae2:	d037      	beq.n	800ab54 <_strtod_l+0x254>
 800aae4:	9007      	str	r0, [sp, #28]
 800aae6:	463d      	mov	r5, r7
 800aae8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800aaec:	2a09      	cmp	r2, #9
 800aaee:	d912      	bls.n	800ab16 <_strtod_l+0x216>
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	e7c2      	b.n	800aa7a <_strtod_l+0x17a>
 800aaf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	921d      	str	r2, [sp, #116]	; 0x74
 800aafa:	785b      	ldrb	r3, [r3, #1]
 800aafc:	3001      	adds	r0, #1
 800aafe:	2b30      	cmp	r3, #48	; 0x30
 800ab00:	d0f8      	beq.n	800aaf4 <_strtod_l+0x1f4>
 800ab02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ab06:	2a08      	cmp	r2, #8
 800ab08:	f200 84db 	bhi.w	800b4c2 <_strtod_l+0xbc2>
 800ab0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ab0e:	9007      	str	r0, [sp, #28]
 800ab10:	2000      	movs	r0, #0
 800ab12:	920a      	str	r2, [sp, #40]	; 0x28
 800ab14:	4605      	mov	r5, r0
 800ab16:	3b30      	subs	r3, #48	; 0x30
 800ab18:	f100 0201 	add.w	r2, r0, #1
 800ab1c:	d014      	beq.n	800ab48 <_strtod_l+0x248>
 800ab1e:	9907      	ldr	r1, [sp, #28]
 800ab20:	4411      	add	r1, r2
 800ab22:	9107      	str	r1, [sp, #28]
 800ab24:	462a      	mov	r2, r5
 800ab26:	eb00 0e05 	add.w	lr, r0, r5
 800ab2a:	210a      	movs	r1, #10
 800ab2c:	4572      	cmp	r2, lr
 800ab2e:	d113      	bne.n	800ab58 <_strtod_l+0x258>
 800ab30:	182a      	adds	r2, r5, r0
 800ab32:	2a08      	cmp	r2, #8
 800ab34:	f105 0501 	add.w	r5, r5, #1
 800ab38:	4405      	add	r5, r0
 800ab3a:	dc1c      	bgt.n	800ab76 <_strtod_l+0x276>
 800ab3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab3e:	220a      	movs	r2, #10
 800ab40:	fb02 3301 	mla	r3, r2, r1, r3
 800ab44:	9309      	str	r3, [sp, #36]	; 0x24
 800ab46:	2200      	movs	r2, #0
 800ab48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab4a:	1c59      	adds	r1, r3, #1
 800ab4c:	911d      	str	r1, [sp, #116]	; 0x74
 800ab4e:	785b      	ldrb	r3, [r3, #1]
 800ab50:	4610      	mov	r0, r2
 800ab52:	e7c9      	b.n	800aae8 <_strtod_l+0x1e8>
 800ab54:	4638      	mov	r0, r7
 800ab56:	e7d2      	b.n	800aafe <_strtod_l+0x1fe>
 800ab58:	2a08      	cmp	r2, #8
 800ab5a:	dc04      	bgt.n	800ab66 <_strtod_l+0x266>
 800ab5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ab5e:	434e      	muls	r6, r1
 800ab60:	9609      	str	r6, [sp, #36]	; 0x24
 800ab62:	3201      	adds	r2, #1
 800ab64:	e7e2      	b.n	800ab2c <_strtod_l+0x22c>
 800ab66:	f102 0c01 	add.w	ip, r2, #1
 800ab6a:	f1bc 0f10 	cmp.w	ip, #16
 800ab6e:	bfd8      	it	le
 800ab70:	fb01 f909 	mulle.w	r9, r1, r9
 800ab74:	e7f5      	b.n	800ab62 <_strtod_l+0x262>
 800ab76:	2d10      	cmp	r5, #16
 800ab78:	bfdc      	itt	le
 800ab7a:	220a      	movle	r2, #10
 800ab7c:	fb02 3909 	mlale	r9, r2, r9, r3
 800ab80:	e7e1      	b.n	800ab46 <_strtod_l+0x246>
 800ab82:	2300      	movs	r3, #0
 800ab84:	9307      	str	r3, [sp, #28]
 800ab86:	2201      	movs	r2, #1
 800ab88:	e77c      	b.n	800aa84 <_strtod_l+0x184>
 800ab8a:	f04f 0c00 	mov.w	ip, #0
 800ab8e:	f108 0302 	add.w	r3, r8, #2
 800ab92:	931d      	str	r3, [sp, #116]	; 0x74
 800ab94:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ab98:	e785      	b.n	800aaa6 <_strtod_l+0x1a6>
 800ab9a:	f04f 0c01 	mov.w	ip, #1
 800ab9e:	e7f6      	b.n	800ab8e <_strtod_l+0x28e>
 800aba0:	0800eadc 	.word	0x0800eadc
 800aba4:	0800e824 	.word	0x0800e824
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abae:	1c59      	adds	r1, r3, #1
 800abb0:	911d      	str	r1, [sp, #116]	; 0x74
 800abb2:	785b      	ldrb	r3, [r3, #1]
 800abb4:	2b30      	cmp	r3, #48	; 0x30
 800abb6:	d0f9      	beq.n	800abac <_strtod_l+0x2ac>
 800abb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800abbc:	2908      	cmp	r1, #8
 800abbe:	f63f af79 	bhi.w	800aab4 <_strtod_l+0x1b4>
 800abc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800abc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abc8:	9308      	str	r3, [sp, #32]
 800abca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abcc:	1c59      	adds	r1, r3, #1
 800abce:	911d      	str	r1, [sp, #116]	; 0x74
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800abd6:	2e09      	cmp	r6, #9
 800abd8:	d937      	bls.n	800ac4a <_strtod_l+0x34a>
 800abda:	9e08      	ldr	r6, [sp, #32]
 800abdc:	1b89      	subs	r1, r1, r6
 800abde:	2908      	cmp	r1, #8
 800abe0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800abe4:	dc02      	bgt.n	800abec <_strtod_l+0x2ec>
 800abe6:	4576      	cmp	r6, lr
 800abe8:	bfa8      	it	ge
 800abea:	4676      	movge	r6, lr
 800abec:	f1bc 0f00 	cmp.w	ip, #0
 800abf0:	d000      	beq.n	800abf4 <_strtod_l+0x2f4>
 800abf2:	4276      	negs	r6, r6
 800abf4:	2d00      	cmp	r5, #0
 800abf6:	d14f      	bne.n	800ac98 <_strtod_l+0x398>
 800abf8:	9904      	ldr	r1, [sp, #16]
 800abfa:	4301      	orrs	r1, r0
 800abfc:	f47f aec2 	bne.w	800a984 <_strtod_l+0x84>
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	f47f aedb 	bne.w	800a9bc <_strtod_l+0xbc>
 800ac06:	2b69      	cmp	r3, #105	; 0x69
 800ac08:	d027      	beq.n	800ac5a <_strtod_l+0x35a>
 800ac0a:	dc24      	bgt.n	800ac56 <_strtod_l+0x356>
 800ac0c:	2b49      	cmp	r3, #73	; 0x49
 800ac0e:	d024      	beq.n	800ac5a <_strtod_l+0x35a>
 800ac10:	2b4e      	cmp	r3, #78	; 0x4e
 800ac12:	f47f aed3 	bne.w	800a9bc <_strtod_l+0xbc>
 800ac16:	499e      	ldr	r1, [pc, #632]	; (800ae90 <_strtod_l+0x590>)
 800ac18:	a81d      	add	r0, sp, #116	; 0x74
 800ac1a:	f002 f8b7 	bl	800cd8c <__match>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	f43f aecc 	beq.w	800a9bc <_strtod_l+0xbc>
 800ac24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b28      	cmp	r3, #40	; 0x28
 800ac2a:	d12d      	bne.n	800ac88 <_strtod_l+0x388>
 800ac2c:	4999      	ldr	r1, [pc, #612]	; (800ae94 <_strtod_l+0x594>)
 800ac2e:	aa20      	add	r2, sp, #128	; 0x80
 800ac30:	a81d      	add	r0, sp, #116	; 0x74
 800ac32:	f002 f8bf 	bl	800cdb4 <__hexnan>
 800ac36:	2805      	cmp	r0, #5
 800ac38:	d126      	bne.n	800ac88 <_strtod_l+0x388>
 800ac3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ac40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac48:	e69c      	b.n	800a984 <_strtod_l+0x84>
 800ac4a:	210a      	movs	r1, #10
 800ac4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ac50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac54:	e7b9      	b.n	800abca <_strtod_l+0x2ca>
 800ac56:	2b6e      	cmp	r3, #110	; 0x6e
 800ac58:	e7db      	b.n	800ac12 <_strtod_l+0x312>
 800ac5a:	498f      	ldr	r1, [pc, #572]	; (800ae98 <_strtod_l+0x598>)
 800ac5c:	a81d      	add	r0, sp, #116	; 0x74
 800ac5e:	f002 f895 	bl	800cd8c <__match>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	f43f aeaa 	beq.w	800a9bc <_strtod_l+0xbc>
 800ac68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac6a:	498c      	ldr	r1, [pc, #560]	; (800ae9c <_strtod_l+0x59c>)
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	a81d      	add	r0, sp, #116	; 0x74
 800ac70:	931d      	str	r3, [sp, #116]	; 0x74
 800ac72:	f002 f88b 	bl	800cd8c <__match>
 800ac76:	b910      	cbnz	r0, 800ac7e <_strtod_l+0x37e>
 800ac78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	931d      	str	r3, [sp, #116]	; 0x74
 800ac7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800aeac <_strtod_l+0x5ac>
 800ac82:	f04f 0a00 	mov.w	sl, #0
 800ac86:	e67d      	b.n	800a984 <_strtod_l+0x84>
 800ac88:	4885      	ldr	r0, [pc, #532]	; (800aea0 <_strtod_l+0x5a0>)
 800ac8a:	f003 f9e1 	bl	800e050 <nan>
 800ac8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ac92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ac96:	e675      	b.n	800a984 <_strtod_l+0x84>
 800ac98:	9b07      	ldr	r3, [sp, #28]
 800ac9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac9c:	1af3      	subs	r3, r6, r3
 800ac9e:	2f00      	cmp	r7, #0
 800aca0:	bf08      	it	eq
 800aca2:	462f      	moveq	r7, r5
 800aca4:	2d10      	cmp	r5, #16
 800aca6:	9308      	str	r3, [sp, #32]
 800aca8:	46a8      	mov	r8, r5
 800acaa:	bfa8      	it	ge
 800acac:	f04f 0810 	movge.w	r8, #16
 800acb0:	f7f5 fc28 	bl	8000504 <__aeabi_ui2d>
 800acb4:	2d09      	cmp	r5, #9
 800acb6:	4682      	mov	sl, r0
 800acb8:	468b      	mov	fp, r1
 800acba:	dd13      	ble.n	800ace4 <_strtod_l+0x3e4>
 800acbc:	4b79      	ldr	r3, [pc, #484]	; (800aea4 <_strtod_l+0x5a4>)
 800acbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800acc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800acc6:	f7f5 fc97 	bl	80005f8 <__aeabi_dmul>
 800acca:	4682      	mov	sl, r0
 800accc:	4648      	mov	r0, r9
 800acce:	468b      	mov	fp, r1
 800acd0:	f7f5 fc18 	bl	8000504 <__aeabi_ui2d>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4650      	mov	r0, sl
 800acda:	4659      	mov	r1, fp
 800acdc:	f7f5 fad6 	bl	800028c <__adddf3>
 800ace0:	4682      	mov	sl, r0
 800ace2:	468b      	mov	fp, r1
 800ace4:	2d0f      	cmp	r5, #15
 800ace6:	dc38      	bgt.n	800ad5a <_strtod_l+0x45a>
 800ace8:	9b08      	ldr	r3, [sp, #32]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f43f ae4a 	beq.w	800a984 <_strtod_l+0x84>
 800acf0:	dd24      	ble.n	800ad3c <_strtod_l+0x43c>
 800acf2:	2b16      	cmp	r3, #22
 800acf4:	dc0b      	bgt.n	800ad0e <_strtod_l+0x40e>
 800acf6:	4d6b      	ldr	r5, [pc, #428]	; (800aea4 <_strtod_l+0x5a4>)
 800acf8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800acfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ad00:	4652      	mov	r2, sl
 800ad02:	465b      	mov	r3, fp
 800ad04:	f7f5 fc78 	bl	80005f8 <__aeabi_dmul>
 800ad08:	4682      	mov	sl, r0
 800ad0a:	468b      	mov	fp, r1
 800ad0c:	e63a      	b.n	800a984 <_strtod_l+0x84>
 800ad0e:	9a08      	ldr	r2, [sp, #32]
 800ad10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ad14:	4293      	cmp	r3, r2
 800ad16:	db20      	blt.n	800ad5a <_strtod_l+0x45a>
 800ad18:	4c62      	ldr	r4, [pc, #392]	; (800aea4 <_strtod_l+0x5a4>)
 800ad1a:	f1c5 050f 	rsb	r5, r5, #15
 800ad1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ad22:	4652      	mov	r2, sl
 800ad24:	465b      	mov	r3, fp
 800ad26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad2a:	f7f5 fc65 	bl	80005f8 <__aeabi_dmul>
 800ad2e:	9b08      	ldr	r3, [sp, #32]
 800ad30:	1b5d      	subs	r5, r3, r5
 800ad32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ad36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad3a:	e7e3      	b.n	800ad04 <_strtod_l+0x404>
 800ad3c:	9b08      	ldr	r3, [sp, #32]
 800ad3e:	3316      	adds	r3, #22
 800ad40:	db0b      	blt.n	800ad5a <_strtod_l+0x45a>
 800ad42:	9b07      	ldr	r3, [sp, #28]
 800ad44:	4a57      	ldr	r2, [pc, #348]	; (800aea4 <_strtod_l+0x5a4>)
 800ad46:	1b9e      	subs	r6, r3, r6
 800ad48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ad4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad50:	4650      	mov	r0, sl
 800ad52:	4659      	mov	r1, fp
 800ad54:	f7f5 fd7a 	bl	800084c <__aeabi_ddiv>
 800ad58:	e7d6      	b.n	800ad08 <_strtod_l+0x408>
 800ad5a:	9b08      	ldr	r3, [sp, #32]
 800ad5c:	eba5 0808 	sub.w	r8, r5, r8
 800ad60:	4498      	add	r8, r3
 800ad62:	f1b8 0f00 	cmp.w	r8, #0
 800ad66:	dd71      	ble.n	800ae4c <_strtod_l+0x54c>
 800ad68:	f018 030f 	ands.w	r3, r8, #15
 800ad6c:	d00a      	beq.n	800ad84 <_strtod_l+0x484>
 800ad6e:	494d      	ldr	r1, [pc, #308]	; (800aea4 <_strtod_l+0x5a4>)
 800ad70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad74:	4652      	mov	r2, sl
 800ad76:	465b      	mov	r3, fp
 800ad78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad7c:	f7f5 fc3c 	bl	80005f8 <__aeabi_dmul>
 800ad80:	4682      	mov	sl, r0
 800ad82:	468b      	mov	fp, r1
 800ad84:	f038 080f 	bics.w	r8, r8, #15
 800ad88:	d04d      	beq.n	800ae26 <_strtod_l+0x526>
 800ad8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ad8e:	dd22      	ble.n	800add6 <_strtod_l+0x4d6>
 800ad90:	2500      	movs	r5, #0
 800ad92:	462e      	mov	r6, r5
 800ad94:	9509      	str	r5, [sp, #36]	; 0x24
 800ad96:	9507      	str	r5, [sp, #28]
 800ad98:	2322      	movs	r3, #34	; 0x22
 800ad9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800aeac <_strtod_l+0x5ac>
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	f04f 0a00 	mov.w	sl, #0
 800ada4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f43f adec 	beq.w	800a984 <_strtod_l+0x84>
 800adac:	991e      	ldr	r1, [sp, #120]	; 0x78
 800adae:	4620      	mov	r0, r4
 800adb0:	f002 f962 	bl	800d078 <_Bfree>
 800adb4:	9907      	ldr	r1, [sp, #28]
 800adb6:	4620      	mov	r0, r4
 800adb8:	f002 f95e 	bl	800d078 <_Bfree>
 800adbc:	4631      	mov	r1, r6
 800adbe:	4620      	mov	r0, r4
 800adc0:	f002 f95a 	bl	800d078 <_Bfree>
 800adc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adc6:	4620      	mov	r0, r4
 800adc8:	f002 f956 	bl	800d078 <_Bfree>
 800adcc:	4629      	mov	r1, r5
 800adce:	4620      	mov	r0, r4
 800add0:	f002 f952 	bl	800d078 <_Bfree>
 800add4:	e5d6      	b.n	800a984 <_strtod_l+0x84>
 800add6:	2300      	movs	r3, #0
 800add8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800addc:	4650      	mov	r0, sl
 800adde:	4659      	mov	r1, fp
 800ade0:	4699      	mov	r9, r3
 800ade2:	f1b8 0f01 	cmp.w	r8, #1
 800ade6:	dc21      	bgt.n	800ae2c <_strtod_l+0x52c>
 800ade8:	b10b      	cbz	r3, 800adee <_strtod_l+0x4ee>
 800adea:	4682      	mov	sl, r0
 800adec:	468b      	mov	fp, r1
 800adee:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <_strtod_l+0x5a8>)
 800adf0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800adf4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800adf8:	4652      	mov	r2, sl
 800adfa:	465b      	mov	r3, fp
 800adfc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ae00:	f7f5 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ae04:	4b29      	ldr	r3, [pc, #164]	; (800aeac <_strtod_l+0x5ac>)
 800ae06:	460a      	mov	r2, r1
 800ae08:	400b      	ands	r3, r1
 800ae0a:	4929      	ldr	r1, [pc, #164]	; (800aeb0 <_strtod_l+0x5b0>)
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	4682      	mov	sl, r0
 800ae10:	d8be      	bhi.n	800ad90 <_strtod_l+0x490>
 800ae12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ae16:	428b      	cmp	r3, r1
 800ae18:	bf86      	itte	hi
 800ae1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800aeb4 <_strtod_l+0x5b4>
 800ae1e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ae26:	2300      	movs	r3, #0
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	e081      	b.n	800af30 <_strtod_l+0x630>
 800ae2c:	f018 0f01 	tst.w	r8, #1
 800ae30:	d007      	beq.n	800ae42 <_strtod_l+0x542>
 800ae32:	4b1d      	ldr	r3, [pc, #116]	; (800aea8 <_strtod_l+0x5a8>)
 800ae34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f7f5 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ae40:	2301      	movs	r3, #1
 800ae42:	f109 0901 	add.w	r9, r9, #1
 800ae46:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae4a:	e7ca      	b.n	800ade2 <_strtod_l+0x4e2>
 800ae4c:	d0eb      	beq.n	800ae26 <_strtod_l+0x526>
 800ae4e:	f1c8 0800 	rsb	r8, r8, #0
 800ae52:	f018 020f 	ands.w	r2, r8, #15
 800ae56:	d00a      	beq.n	800ae6e <_strtod_l+0x56e>
 800ae58:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <_strtod_l+0x5a4>)
 800ae5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae5e:	4650      	mov	r0, sl
 800ae60:	4659      	mov	r1, fp
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 fcf1 	bl	800084c <__aeabi_ddiv>
 800ae6a:	4682      	mov	sl, r0
 800ae6c:	468b      	mov	fp, r1
 800ae6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ae72:	d0d8      	beq.n	800ae26 <_strtod_l+0x526>
 800ae74:	f1b8 0f1f 	cmp.w	r8, #31
 800ae78:	dd1e      	ble.n	800aeb8 <_strtod_l+0x5b8>
 800ae7a:	2500      	movs	r5, #0
 800ae7c:	462e      	mov	r6, r5
 800ae7e:	9509      	str	r5, [sp, #36]	; 0x24
 800ae80:	9507      	str	r5, [sp, #28]
 800ae82:	2322      	movs	r3, #34	; 0x22
 800ae84:	f04f 0a00 	mov.w	sl, #0
 800ae88:	f04f 0b00 	mov.w	fp, #0
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	e789      	b.n	800ada4 <_strtod_l+0x4a4>
 800ae90:	0800e7f5 	.word	0x0800e7f5
 800ae94:	0800e838 	.word	0x0800e838
 800ae98:	0800e7ed 	.word	0x0800e7ed
 800ae9c:	0800e97c 	.word	0x0800e97c
 800aea0:	0800ec98 	.word	0x0800ec98
 800aea4:	0800eb78 	.word	0x0800eb78
 800aea8:	0800eb50 	.word	0x0800eb50
 800aeac:	7ff00000 	.word	0x7ff00000
 800aeb0:	7ca00000 	.word	0x7ca00000
 800aeb4:	7fefffff 	.word	0x7fefffff
 800aeb8:	f018 0310 	ands.w	r3, r8, #16
 800aebc:	bf18      	it	ne
 800aebe:	236a      	movne	r3, #106	; 0x6a
 800aec0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b278 <_strtod_l+0x978>
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	4650      	mov	r0, sl
 800aec8:	4659      	mov	r1, fp
 800aeca:	2300      	movs	r3, #0
 800aecc:	f018 0f01 	tst.w	r8, #1
 800aed0:	d004      	beq.n	800aedc <_strtod_l+0x5dc>
 800aed2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aed6:	f7f5 fb8f 	bl	80005f8 <__aeabi_dmul>
 800aeda:	2301      	movs	r3, #1
 800aedc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aee0:	f109 0908 	add.w	r9, r9, #8
 800aee4:	d1f2      	bne.n	800aecc <_strtod_l+0x5cc>
 800aee6:	b10b      	cbz	r3, 800aeec <_strtod_l+0x5ec>
 800aee8:	4682      	mov	sl, r0
 800aeea:	468b      	mov	fp, r1
 800aeec:	9b04      	ldr	r3, [sp, #16]
 800aeee:	b1bb      	cbz	r3, 800af20 <_strtod_l+0x620>
 800aef0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aef4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	4659      	mov	r1, fp
 800aefc:	dd10      	ble.n	800af20 <_strtod_l+0x620>
 800aefe:	2b1f      	cmp	r3, #31
 800af00:	f340 8128 	ble.w	800b154 <_strtod_l+0x854>
 800af04:	2b34      	cmp	r3, #52	; 0x34
 800af06:	bfde      	ittt	le
 800af08:	3b20      	suble	r3, #32
 800af0a:	f04f 32ff 	movle.w	r2, #4294967295
 800af0e:	fa02 f303 	lslle.w	r3, r2, r3
 800af12:	f04f 0a00 	mov.w	sl, #0
 800af16:	bfcc      	ite	gt
 800af18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800af1c:	ea03 0b01 	andle.w	fp, r3, r1
 800af20:	2200      	movs	r2, #0
 800af22:	2300      	movs	r3, #0
 800af24:	4650      	mov	r0, sl
 800af26:	4659      	mov	r1, fp
 800af28:	f7f5 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d1a4      	bne.n	800ae7a <_strtod_l+0x57a>
 800af30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af36:	462b      	mov	r3, r5
 800af38:	463a      	mov	r2, r7
 800af3a:	4620      	mov	r0, r4
 800af3c:	f002 f908 	bl	800d150 <__s2b>
 800af40:	9009      	str	r0, [sp, #36]	; 0x24
 800af42:	2800      	cmp	r0, #0
 800af44:	f43f af24 	beq.w	800ad90 <_strtod_l+0x490>
 800af48:	9b07      	ldr	r3, [sp, #28]
 800af4a:	1b9e      	subs	r6, r3, r6
 800af4c:	9b08      	ldr	r3, [sp, #32]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bfb4      	ite	lt
 800af52:	4633      	movlt	r3, r6
 800af54:	2300      	movge	r3, #0
 800af56:	9310      	str	r3, [sp, #64]	; 0x40
 800af58:	9b08      	ldr	r3, [sp, #32]
 800af5a:	2500      	movs	r5, #0
 800af5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af60:	9318      	str	r3, [sp, #96]	; 0x60
 800af62:	462e      	mov	r6, r5
 800af64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af66:	4620      	mov	r0, r4
 800af68:	6859      	ldr	r1, [r3, #4]
 800af6a:	f002 f845 	bl	800cff8 <_Balloc>
 800af6e:	9007      	str	r0, [sp, #28]
 800af70:	2800      	cmp	r0, #0
 800af72:	f43f af11 	beq.w	800ad98 <_strtod_l+0x498>
 800af76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af78:	691a      	ldr	r2, [r3, #16]
 800af7a:	3202      	adds	r2, #2
 800af7c:	f103 010c 	add.w	r1, r3, #12
 800af80:	0092      	lsls	r2, r2, #2
 800af82:	300c      	adds	r0, #12
 800af84:	f7fe fd5a 	bl	8009a3c <memcpy>
 800af88:	ec4b ab10 	vmov	d0, sl, fp
 800af8c:	aa20      	add	r2, sp, #128	; 0x80
 800af8e:	a91f      	add	r1, sp, #124	; 0x7c
 800af90:	4620      	mov	r0, r4
 800af92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800af96:	f002 fc17 	bl	800d7c8 <__d2b>
 800af9a:	901e      	str	r0, [sp, #120]	; 0x78
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f43f aefb 	beq.w	800ad98 <_strtod_l+0x498>
 800afa2:	2101      	movs	r1, #1
 800afa4:	4620      	mov	r0, r4
 800afa6:	f002 f96d 	bl	800d284 <__i2b>
 800afaa:	4606      	mov	r6, r0
 800afac:	2800      	cmp	r0, #0
 800afae:	f43f aef3 	beq.w	800ad98 <_strtod_l+0x498>
 800afb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afb4:	9904      	ldr	r1, [sp, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	bfab      	itete	ge
 800afba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800afbc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800afbe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800afc0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800afc4:	bfac      	ite	ge
 800afc6:	eb03 0902 	addge.w	r9, r3, r2
 800afca:	1ad7      	sublt	r7, r2, r3
 800afcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800afce:	eba3 0801 	sub.w	r8, r3, r1
 800afd2:	4490      	add	r8, r2
 800afd4:	4ba3      	ldr	r3, [pc, #652]	; (800b264 <_strtod_l+0x964>)
 800afd6:	f108 38ff 	add.w	r8, r8, #4294967295
 800afda:	4598      	cmp	r8, r3
 800afdc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800afe0:	f280 80cc 	bge.w	800b17c <_strtod_l+0x87c>
 800afe4:	eba3 0308 	sub.w	r3, r3, r8
 800afe8:	2b1f      	cmp	r3, #31
 800afea:	eba2 0203 	sub.w	r2, r2, r3
 800afee:	f04f 0101 	mov.w	r1, #1
 800aff2:	f300 80b6 	bgt.w	800b162 <_strtod_l+0x862>
 800aff6:	fa01 f303 	lsl.w	r3, r1, r3
 800affa:	9311      	str	r3, [sp, #68]	; 0x44
 800affc:	2300      	movs	r3, #0
 800affe:	930c      	str	r3, [sp, #48]	; 0x30
 800b000:	eb09 0802 	add.w	r8, r9, r2
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	45c1      	cmp	r9, r8
 800b008:	4417      	add	r7, r2
 800b00a:	441f      	add	r7, r3
 800b00c:	464b      	mov	r3, r9
 800b00e:	bfa8      	it	ge
 800b010:	4643      	movge	r3, r8
 800b012:	42bb      	cmp	r3, r7
 800b014:	bfa8      	it	ge
 800b016:	463b      	movge	r3, r7
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bfc2      	ittt	gt
 800b01c:	eba8 0803 	subgt.w	r8, r8, r3
 800b020:	1aff      	subgt	r7, r7, r3
 800b022:	eba9 0903 	subgt.w	r9, r9, r3
 800b026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dd17      	ble.n	800b05c <_strtod_l+0x75c>
 800b02c:	4631      	mov	r1, r6
 800b02e:	461a      	mov	r2, r3
 800b030:	4620      	mov	r0, r4
 800b032:	f002 f9e3 	bl	800d3fc <__pow5mult>
 800b036:	4606      	mov	r6, r0
 800b038:	2800      	cmp	r0, #0
 800b03a:	f43f aead 	beq.w	800ad98 <_strtod_l+0x498>
 800b03e:	4601      	mov	r1, r0
 800b040:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b042:	4620      	mov	r0, r4
 800b044:	f002 f934 	bl	800d2b0 <__multiply>
 800b048:	900f      	str	r0, [sp, #60]	; 0x3c
 800b04a:	2800      	cmp	r0, #0
 800b04c:	f43f aea4 	beq.w	800ad98 <_strtod_l+0x498>
 800b050:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b052:	4620      	mov	r0, r4
 800b054:	f002 f810 	bl	800d078 <_Bfree>
 800b058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b05a:	931e      	str	r3, [sp, #120]	; 0x78
 800b05c:	f1b8 0f00 	cmp.w	r8, #0
 800b060:	f300 8091 	bgt.w	800b186 <_strtod_l+0x886>
 800b064:	9b08      	ldr	r3, [sp, #32]
 800b066:	2b00      	cmp	r3, #0
 800b068:	dd08      	ble.n	800b07c <_strtod_l+0x77c>
 800b06a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b06c:	9907      	ldr	r1, [sp, #28]
 800b06e:	4620      	mov	r0, r4
 800b070:	f002 f9c4 	bl	800d3fc <__pow5mult>
 800b074:	9007      	str	r0, [sp, #28]
 800b076:	2800      	cmp	r0, #0
 800b078:	f43f ae8e 	beq.w	800ad98 <_strtod_l+0x498>
 800b07c:	2f00      	cmp	r7, #0
 800b07e:	dd08      	ble.n	800b092 <_strtod_l+0x792>
 800b080:	9907      	ldr	r1, [sp, #28]
 800b082:	463a      	mov	r2, r7
 800b084:	4620      	mov	r0, r4
 800b086:	f002 fa13 	bl	800d4b0 <__lshift>
 800b08a:	9007      	str	r0, [sp, #28]
 800b08c:	2800      	cmp	r0, #0
 800b08e:	f43f ae83 	beq.w	800ad98 <_strtod_l+0x498>
 800b092:	f1b9 0f00 	cmp.w	r9, #0
 800b096:	dd08      	ble.n	800b0aa <_strtod_l+0x7aa>
 800b098:	4631      	mov	r1, r6
 800b09a:	464a      	mov	r2, r9
 800b09c:	4620      	mov	r0, r4
 800b09e:	f002 fa07 	bl	800d4b0 <__lshift>
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f43f ae77 	beq.w	800ad98 <_strtod_l+0x498>
 800b0aa:	9a07      	ldr	r2, [sp, #28]
 800b0ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f002 fa86 	bl	800d5c0 <__mdiff>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f43f ae6e 	beq.w	800ad98 <_strtod_l+0x498>
 800b0bc:	68c3      	ldr	r3, [r0, #12]
 800b0be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	60c3      	str	r3, [r0, #12]
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	f002 fa5f 	bl	800d588 <__mcmp>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	da65      	bge.n	800b19a <_strtod_l+0x89a>
 800b0ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0d0:	ea53 030a 	orrs.w	r3, r3, sl
 800b0d4:	f040 8087 	bne.w	800b1e6 <_strtod_l+0x8e6>
 800b0d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f040 8082 	bne.w	800b1e6 <_strtod_l+0x8e6>
 800b0e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0e6:	0d1b      	lsrs	r3, r3, #20
 800b0e8:	051b      	lsls	r3, r3, #20
 800b0ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0ee:	d97a      	bls.n	800b1e6 <_strtod_l+0x8e6>
 800b0f0:	696b      	ldr	r3, [r5, #20]
 800b0f2:	b913      	cbnz	r3, 800b0fa <_strtod_l+0x7fa>
 800b0f4:	692b      	ldr	r3, [r5, #16]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	dd75      	ble.n	800b1e6 <_strtod_l+0x8e6>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	4620      	mov	r0, r4
 800b100:	f002 f9d6 	bl	800d4b0 <__lshift>
 800b104:	4631      	mov	r1, r6
 800b106:	4605      	mov	r5, r0
 800b108:	f002 fa3e 	bl	800d588 <__mcmp>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	dd6a      	ble.n	800b1e6 <_strtod_l+0x8e6>
 800b110:	9904      	ldr	r1, [sp, #16]
 800b112:	4a55      	ldr	r2, [pc, #340]	; (800b268 <_strtod_l+0x968>)
 800b114:	465b      	mov	r3, fp
 800b116:	2900      	cmp	r1, #0
 800b118:	f000 8085 	beq.w	800b226 <_strtod_l+0x926>
 800b11c:	ea02 010b 	and.w	r1, r2, fp
 800b120:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b124:	dc7f      	bgt.n	800b226 <_strtod_l+0x926>
 800b126:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b12a:	f77f aeaa 	ble.w	800ae82 <_strtod_l+0x582>
 800b12e:	4a4f      	ldr	r2, [pc, #316]	; (800b26c <_strtod_l+0x96c>)
 800b130:	2300      	movs	r3, #0
 800b132:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b136:	4650      	mov	r0, sl
 800b138:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b13c:	4659      	mov	r1, fp
 800b13e:	f7f5 fa5b 	bl	80005f8 <__aeabi_dmul>
 800b142:	460b      	mov	r3, r1
 800b144:	4303      	orrs	r3, r0
 800b146:	bf08      	it	eq
 800b148:	2322      	moveq	r3, #34	; 0x22
 800b14a:	4682      	mov	sl, r0
 800b14c:	468b      	mov	fp, r1
 800b14e:	bf08      	it	eq
 800b150:	6023      	streq	r3, [r4, #0]
 800b152:	e62b      	b.n	800adac <_strtod_l+0x4ac>
 800b154:	f04f 32ff 	mov.w	r2, #4294967295
 800b158:	fa02 f303 	lsl.w	r3, r2, r3
 800b15c:	ea03 0a0a 	and.w	sl, r3, sl
 800b160:	e6de      	b.n	800af20 <_strtod_l+0x620>
 800b162:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b166:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b16a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b16e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b172:	fa01 f308 	lsl.w	r3, r1, r8
 800b176:	930c      	str	r3, [sp, #48]	; 0x30
 800b178:	9111      	str	r1, [sp, #68]	; 0x44
 800b17a:	e741      	b.n	800b000 <_strtod_l+0x700>
 800b17c:	2300      	movs	r3, #0
 800b17e:	930c      	str	r3, [sp, #48]	; 0x30
 800b180:	2301      	movs	r3, #1
 800b182:	9311      	str	r3, [sp, #68]	; 0x44
 800b184:	e73c      	b.n	800b000 <_strtod_l+0x700>
 800b186:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b188:	4642      	mov	r2, r8
 800b18a:	4620      	mov	r0, r4
 800b18c:	f002 f990 	bl	800d4b0 <__lshift>
 800b190:	901e      	str	r0, [sp, #120]	; 0x78
 800b192:	2800      	cmp	r0, #0
 800b194:	f47f af66 	bne.w	800b064 <_strtod_l+0x764>
 800b198:	e5fe      	b.n	800ad98 <_strtod_l+0x498>
 800b19a:	465f      	mov	r7, fp
 800b19c:	d16e      	bne.n	800b27c <_strtod_l+0x97c>
 800b19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a4:	b342      	cbz	r2, 800b1f8 <_strtod_l+0x8f8>
 800b1a6:	4a32      	ldr	r2, [pc, #200]	; (800b270 <_strtod_l+0x970>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d128      	bne.n	800b1fe <_strtod_l+0x8fe>
 800b1ac:	9b04      	ldr	r3, [sp, #16]
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	b1eb      	cbz	r3, 800b1ee <_strtod_l+0x8ee>
 800b1b2:	4a2d      	ldr	r2, [pc, #180]	; (800b268 <_strtod_l+0x968>)
 800b1b4:	403a      	ands	r2, r7
 800b1b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b1ba:	f04f 31ff 	mov.w	r1, #4294967295
 800b1be:	d819      	bhi.n	800b1f4 <_strtod_l+0x8f4>
 800b1c0:	0d12      	lsrs	r2, r2, #20
 800b1c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ca:	4298      	cmp	r0, r3
 800b1cc:	d117      	bne.n	800b1fe <_strtod_l+0x8fe>
 800b1ce:	4b29      	ldr	r3, [pc, #164]	; (800b274 <_strtod_l+0x974>)
 800b1d0:	429f      	cmp	r7, r3
 800b1d2:	d102      	bne.n	800b1da <_strtod_l+0x8da>
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	f43f addf 	beq.w	800ad98 <_strtod_l+0x498>
 800b1da:	4b23      	ldr	r3, [pc, #140]	; (800b268 <_strtod_l+0x968>)
 800b1dc:	403b      	ands	r3, r7
 800b1de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b1e2:	f04f 0a00 	mov.w	sl, #0
 800b1e6:	9b04      	ldr	r3, [sp, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1a0      	bne.n	800b12e <_strtod_l+0x82e>
 800b1ec:	e5de      	b.n	800adac <_strtod_l+0x4ac>
 800b1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f2:	e7ea      	b.n	800b1ca <_strtod_l+0x8ca>
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	e7e8      	b.n	800b1ca <_strtod_l+0x8ca>
 800b1f8:	ea53 030a 	orrs.w	r3, r3, sl
 800b1fc:	d088      	beq.n	800b110 <_strtod_l+0x810>
 800b1fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b200:	b1db      	cbz	r3, 800b23a <_strtod_l+0x93a>
 800b202:	423b      	tst	r3, r7
 800b204:	d0ef      	beq.n	800b1e6 <_strtod_l+0x8e6>
 800b206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b208:	9a04      	ldr	r2, [sp, #16]
 800b20a:	4650      	mov	r0, sl
 800b20c:	4659      	mov	r1, fp
 800b20e:	b1c3      	cbz	r3, 800b242 <_strtod_l+0x942>
 800b210:	f7ff fb58 	bl	800a8c4 <sulp>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b21c:	f7f5 f836 	bl	800028c <__adddf3>
 800b220:	4682      	mov	sl, r0
 800b222:	468b      	mov	fp, r1
 800b224:	e7df      	b.n	800b1e6 <_strtod_l+0x8e6>
 800b226:	4013      	ands	r3, r2
 800b228:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b22c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b230:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b234:	f04f 3aff 	mov.w	sl, #4294967295
 800b238:	e7d5      	b.n	800b1e6 <_strtod_l+0x8e6>
 800b23a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b23c:	ea13 0f0a 	tst.w	r3, sl
 800b240:	e7e0      	b.n	800b204 <_strtod_l+0x904>
 800b242:	f7ff fb3f 	bl	800a8c4 <sulp>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b24e:	f7f5 f81b 	bl	8000288 <__aeabi_dsub>
 800b252:	2200      	movs	r2, #0
 800b254:	2300      	movs	r3, #0
 800b256:	4682      	mov	sl, r0
 800b258:	468b      	mov	fp, r1
 800b25a:	f7f5 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d0c1      	beq.n	800b1e6 <_strtod_l+0x8e6>
 800b262:	e60e      	b.n	800ae82 <_strtod_l+0x582>
 800b264:	fffffc02 	.word	0xfffffc02
 800b268:	7ff00000 	.word	0x7ff00000
 800b26c:	39500000 	.word	0x39500000
 800b270:	000fffff 	.word	0x000fffff
 800b274:	7fefffff 	.word	0x7fefffff
 800b278:	0800e850 	.word	0x0800e850
 800b27c:	4631      	mov	r1, r6
 800b27e:	4628      	mov	r0, r5
 800b280:	f002 fafe 	bl	800d880 <__ratio>
 800b284:	ec59 8b10 	vmov	r8, r9, d0
 800b288:	ee10 0a10 	vmov	r0, s0
 800b28c:	2200      	movs	r2, #0
 800b28e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b292:	4649      	mov	r1, r9
 800b294:	f7f5 fc2c 	bl	8000af0 <__aeabi_dcmple>
 800b298:	2800      	cmp	r0, #0
 800b29a:	d07c      	beq.n	800b396 <_strtod_l+0xa96>
 800b29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d04c      	beq.n	800b33c <_strtod_l+0xa3c>
 800b2a2:	4b95      	ldr	r3, [pc, #596]	; (800b4f8 <_strtod_l+0xbf8>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b2aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b4f8 <_strtod_l+0xbf8>
 800b2ae:	f04f 0800 	mov.w	r8, #0
 800b2b2:	4b92      	ldr	r3, [pc, #584]	; (800b4fc <_strtod_l+0xbfc>)
 800b2b4:	403b      	ands	r3, r7
 800b2b6:	9311      	str	r3, [sp, #68]	; 0x44
 800b2b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b2ba:	4b91      	ldr	r3, [pc, #580]	; (800b500 <_strtod_l+0xc00>)
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	f040 80b2 	bne.w	800b426 <_strtod_l+0xb26>
 800b2c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b2ce:	ec4b ab10 	vmov	d0, sl, fp
 800b2d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b2d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b2da:	f002 f9f9 	bl	800d6d0 <__ulp>
 800b2de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2e2:	ec53 2b10 	vmov	r2, r3, d0
 800b2e6:	f7f5 f987 	bl	80005f8 <__aeabi_dmul>
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	465b      	mov	r3, fp
 800b2ee:	f7f4 ffcd 	bl	800028c <__adddf3>
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4981      	ldr	r1, [pc, #516]	; (800b4fc <_strtod_l+0xbfc>)
 800b2f6:	4a83      	ldr	r2, [pc, #524]	; (800b504 <_strtod_l+0xc04>)
 800b2f8:	4019      	ands	r1, r3
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	d95e      	bls.n	800b3be <_strtod_l+0xabe>
 800b300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b302:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b306:	4293      	cmp	r3, r2
 800b308:	d103      	bne.n	800b312 <_strtod_l+0xa12>
 800b30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b30c:	3301      	adds	r3, #1
 800b30e:	f43f ad43 	beq.w	800ad98 <_strtod_l+0x498>
 800b312:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b510 <_strtod_l+0xc10>
 800b316:	f04f 3aff 	mov.w	sl, #4294967295
 800b31a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b31c:	4620      	mov	r0, r4
 800b31e:	f001 feab 	bl	800d078 <_Bfree>
 800b322:	9907      	ldr	r1, [sp, #28]
 800b324:	4620      	mov	r0, r4
 800b326:	f001 fea7 	bl	800d078 <_Bfree>
 800b32a:	4631      	mov	r1, r6
 800b32c:	4620      	mov	r0, r4
 800b32e:	f001 fea3 	bl	800d078 <_Bfree>
 800b332:	4629      	mov	r1, r5
 800b334:	4620      	mov	r0, r4
 800b336:	f001 fe9f 	bl	800d078 <_Bfree>
 800b33a:	e613      	b.n	800af64 <_strtod_l+0x664>
 800b33c:	f1ba 0f00 	cmp.w	sl, #0
 800b340:	d11b      	bne.n	800b37a <_strtod_l+0xa7a>
 800b342:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b346:	b9f3      	cbnz	r3, 800b386 <_strtod_l+0xa86>
 800b348:	4b6b      	ldr	r3, [pc, #428]	; (800b4f8 <_strtod_l+0xbf8>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	4640      	mov	r0, r8
 800b34e:	4649      	mov	r1, r9
 800b350:	f7f5 fbc4 	bl	8000adc <__aeabi_dcmplt>
 800b354:	b9d0      	cbnz	r0, 800b38c <_strtod_l+0xa8c>
 800b356:	4640      	mov	r0, r8
 800b358:	4649      	mov	r1, r9
 800b35a:	4b6b      	ldr	r3, [pc, #428]	; (800b508 <_strtod_l+0xc08>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	f7f5 f94b 	bl	80005f8 <__aeabi_dmul>
 800b362:	4680      	mov	r8, r0
 800b364:	4689      	mov	r9, r1
 800b366:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b36a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b36e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b370:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b374:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b378:	e79b      	b.n	800b2b2 <_strtod_l+0x9b2>
 800b37a:	f1ba 0f01 	cmp.w	sl, #1
 800b37e:	d102      	bne.n	800b386 <_strtod_l+0xa86>
 800b380:	2f00      	cmp	r7, #0
 800b382:	f43f ad7e 	beq.w	800ae82 <_strtod_l+0x582>
 800b386:	4b61      	ldr	r3, [pc, #388]	; (800b50c <_strtod_l+0xc0c>)
 800b388:	2200      	movs	r2, #0
 800b38a:	e78c      	b.n	800b2a6 <_strtod_l+0x9a6>
 800b38c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b508 <_strtod_l+0xc08>
 800b390:	f04f 0800 	mov.w	r8, #0
 800b394:	e7e7      	b.n	800b366 <_strtod_l+0xa66>
 800b396:	4b5c      	ldr	r3, [pc, #368]	; (800b508 <_strtod_l+0xc08>)
 800b398:	4640      	mov	r0, r8
 800b39a:	4649      	mov	r1, r9
 800b39c:	2200      	movs	r2, #0
 800b39e:	f7f5 f92b 	bl	80005f8 <__aeabi_dmul>
 800b3a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4689      	mov	r9, r1
 800b3a8:	b933      	cbnz	r3, 800b3b8 <_strtod_l+0xab8>
 800b3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3ae:	9012      	str	r0, [sp, #72]	; 0x48
 800b3b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b3b6:	e7dd      	b.n	800b374 <_strtod_l+0xa74>
 800b3b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b3bc:	e7f9      	b.n	800b3b2 <_strtod_l+0xab2>
 800b3be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1a8      	bne.n	800b31a <_strtod_l+0xa1a>
 800b3c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3ce:	0d1b      	lsrs	r3, r3, #20
 800b3d0:	051b      	lsls	r3, r3, #20
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d1a1      	bne.n	800b31a <_strtod_l+0xa1a>
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	4649      	mov	r1, r9
 800b3da:	f7f5 fc6d 	bl	8000cb8 <__aeabi_d2lz>
 800b3de:	f7f5 f8dd 	bl	800059c <__aeabi_l2d>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	f7f4 ff4d 	bl	8000288 <__aeabi_dsub>
 800b3ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3f4:	ea43 030a 	orr.w	r3, r3, sl
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	4680      	mov	r8, r0
 800b3fc:	4689      	mov	r9, r1
 800b3fe:	d053      	beq.n	800b4a8 <_strtod_l+0xba8>
 800b400:	a335      	add	r3, pc, #212	; (adr r3, 800b4d8 <_strtod_l+0xbd8>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f7f5 fb69 	bl	8000adc <__aeabi_dcmplt>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f47f acce 	bne.w	800adac <_strtod_l+0x4ac>
 800b410:	a333      	add	r3, pc, #204	; (adr r3, 800b4e0 <_strtod_l+0xbe0>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	4640      	mov	r0, r8
 800b418:	4649      	mov	r1, r9
 800b41a:	f7f5 fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 800b41e:	2800      	cmp	r0, #0
 800b420:	f43f af7b 	beq.w	800b31a <_strtod_l+0xa1a>
 800b424:	e4c2      	b.n	800adac <_strtod_l+0x4ac>
 800b426:	9b04      	ldr	r3, [sp, #16]
 800b428:	b333      	cbz	r3, 800b478 <_strtod_l+0xb78>
 800b42a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b42c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b430:	d822      	bhi.n	800b478 <_strtod_l+0xb78>
 800b432:	a32d      	add	r3, pc, #180	; (adr r3, 800b4e8 <_strtod_l+0xbe8>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	4640      	mov	r0, r8
 800b43a:	4649      	mov	r1, r9
 800b43c:	f7f5 fb58 	bl	8000af0 <__aeabi_dcmple>
 800b440:	b1a0      	cbz	r0, 800b46c <_strtod_l+0xb6c>
 800b442:	4649      	mov	r1, r9
 800b444:	4640      	mov	r0, r8
 800b446:	f7f5 fbaf 	bl	8000ba8 <__aeabi_d2uiz>
 800b44a:	2801      	cmp	r0, #1
 800b44c:	bf38      	it	cc
 800b44e:	2001      	movcc	r0, #1
 800b450:	f7f5 f858 	bl	8000504 <__aeabi_ui2d>
 800b454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b456:	4680      	mov	r8, r0
 800b458:	4689      	mov	r9, r1
 800b45a:	bb13      	cbnz	r3, 800b4a2 <_strtod_l+0xba2>
 800b45c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b460:	9014      	str	r0, [sp, #80]	; 0x50
 800b462:	9315      	str	r3, [sp, #84]	; 0x54
 800b464:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b468:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b46e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b470:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b474:	1a9b      	subs	r3, r3, r2
 800b476:	930d      	str	r3, [sp, #52]	; 0x34
 800b478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b47c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b484:	f002 f924 	bl	800d6d0 <__ulp>
 800b488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b48c:	ec53 2b10 	vmov	r2, r3, d0
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b498:	f7f4 fef8 	bl	800028c <__adddf3>
 800b49c:	4682      	mov	sl, r0
 800b49e:	468b      	mov	fp, r1
 800b4a0:	e78f      	b.n	800b3c2 <_strtod_l+0xac2>
 800b4a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b4a6:	e7dd      	b.n	800b464 <_strtod_l+0xb64>
 800b4a8:	a311      	add	r3, pc, #68	; (adr r3, 800b4f0 <_strtod_l+0xbf0>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f7f5 fb15 	bl	8000adc <__aeabi_dcmplt>
 800b4b2:	e7b4      	b.n	800b41e <_strtod_l+0xb1e>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	930e      	str	r3, [sp, #56]	; 0x38
 800b4b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b4ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	f7ff ba65 	b.w	800a98c <_strtod_l+0x8c>
 800b4c2:	2b65      	cmp	r3, #101	; 0x65
 800b4c4:	f43f ab5d 	beq.w	800ab82 <_strtod_l+0x282>
 800b4c8:	2b45      	cmp	r3, #69	; 0x45
 800b4ca:	f43f ab5a 	beq.w	800ab82 <_strtod_l+0x282>
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f7ff bb92 	b.w	800abf8 <_strtod_l+0x2f8>
 800b4d4:	f3af 8000 	nop.w
 800b4d8:	94a03595 	.word	0x94a03595
 800b4dc:	3fdfffff 	.word	0x3fdfffff
 800b4e0:	35afe535 	.word	0x35afe535
 800b4e4:	3fe00000 	.word	0x3fe00000
 800b4e8:	ffc00000 	.word	0xffc00000
 800b4ec:	41dfffff 	.word	0x41dfffff
 800b4f0:	94a03595 	.word	0x94a03595
 800b4f4:	3fcfffff 	.word	0x3fcfffff
 800b4f8:	3ff00000 	.word	0x3ff00000
 800b4fc:	7ff00000 	.word	0x7ff00000
 800b500:	7fe00000 	.word	0x7fe00000
 800b504:	7c9fffff 	.word	0x7c9fffff
 800b508:	3fe00000 	.word	0x3fe00000
 800b50c:	bff00000 	.word	0xbff00000
 800b510:	7fefffff 	.word	0x7fefffff

0800b514 <_strtod_r>:
 800b514:	4b01      	ldr	r3, [pc, #4]	; (800b51c <_strtod_r+0x8>)
 800b516:	f7ff b9f3 	b.w	800a900 <_strtod_l>
 800b51a:	bf00      	nop
 800b51c:	20000074 	.word	0x20000074

0800b520 <_strtol_l.isra.0>:
 800b520:	2b01      	cmp	r3, #1
 800b522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b526:	d001      	beq.n	800b52c <_strtol_l.isra.0+0xc>
 800b528:	2b24      	cmp	r3, #36	; 0x24
 800b52a:	d906      	bls.n	800b53a <_strtol_l.isra.0+0x1a>
 800b52c:	f7fe fa5c 	bl	80099e8 <__errno>
 800b530:	2316      	movs	r3, #22
 800b532:	6003      	str	r3, [r0, #0]
 800b534:	2000      	movs	r0, #0
 800b536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b53a:	4f3a      	ldr	r7, [pc, #232]	; (800b624 <_strtol_l.isra.0+0x104>)
 800b53c:	468e      	mov	lr, r1
 800b53e:	4676      	mov	r6, lr
 800b540:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b544:	5de5      	ldrb	r5, [r4, r7]
 800b546:	f015 0508 	ands.w	r5, r5, #8
 800b54a:	d1f8      	bne.n	800b53e <_strtol_l.isra.0+0x1e>
 800b54c:	2c2d      	cmp	r4, #45	; 0x2d
 800b54e:	d134      	bne.n	800b5ba <_strtol_l.isra.0+0x9a>
 800b550:	f89e 4000 	ldrb.w	r4, [lr]
 800b554:	f04f 0801 	mov.w	r8, #1
 800b558:	f106 0e02 	add.w	lr, r6, #2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d05c      	beq.n	800b61a <_strtol_l.isra.0+0xfa>
 800b560:	2b10      	cmp	r3, #16
 800b562:	d10c      	bne.n	800b57e <_strtol_l.isra.0+0x5e>
 800b564:	2c30      	cmp	r4, #48	; 0x30
 800b566:	d10a      	bne.n	800b57e <_strtol_l.isra.0+0x5e>
 800b568:	f89e 4000 	ldrb.w	r4, [lr]
 800b56c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b570:	2c58      	cmp	r4, #88	; 0x58
 800b572:	d14d      	bne.n	800b610 <_strtol_l.isra.0+0xf0>
 800b574:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b578:	2310      	movs	r3, #16
 800b57a:	f10e 0e02 	add.w	lr, lr, #2
 800b57e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b582:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b586:	2600      	movs	r6, #0
 800b588:	fbbc f9f3 	udiv	r9, ip, r3
 800b58c:	4635      	mov	r5, r6
 800b58e:	fb03 ca19 	mls	sl, r3, r9, ip
 800b592:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b596:	2f09      	cmp	r7, #9
 800b598:	d818      	bhi.n	800b5cc <_strtol_l.isra.0+0xac>
 800b59a:	463c      	mov	r4, r7
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	dd24      	ble.n	800b5ea <_strtol_l.isra.0+0xca>
 800b5a0:	2e00      	cmp	r6, #0
 800b5a2:	db1f      	blt.n	800b5e4 <_strtol_l.isra.0+0xc4>
 800b5a4:	45a9      	cmp	r9, r5
 800b5a6:	d31d      	bcc.n	800b5e4 <_strtol_l.isra.0+0xc4>
 800b5a8:	d101      	bne.n	800b5ae <_strtol_l.isra.0+0x8e>
 800b5aa:	45a2      	cmp	sl, r4
 800b5ac:	db1a      	blt.n	800b5e4 <_strtol_l.isra.0+0xc4>
 800b5ae:	fb05 4503 	mla	r5, r5, r3, r4
 800b5b2:	2601      	movs	r6, #1
 800b5b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b5b8:	e7eb      	b.n	800b592 <_strtol_l.isra.0+0x72>
 800b5ba:	2c2b      	cmp	r4, #43	; 0x2b
 800b5bc:	bf08      	it	eq
 800b5be:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b5c2:	46a8      	mov	r8, r5
 800b5c4:	bf08      	it	eq
 800b5c6:	f106 0e02 	addeq.w	lr, r6, #2
 800b5ca:	e7c7      	b.n	800b55c <_strtol_l.isra.0+0x3c>
 800b5cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b5d0:	2f19      	cmp	r7, #25
 800b5d2:	d801      	bhi.n	800b5d8 <_strtol_l.isra.0+0xb8>
 800b5d4:	3c37      	subs	r4, #55	; 0x37
 800b5d6:	e7e1      	b.n	800b59c <_strtol_l.isra.0+0x7c>
 800b5d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b5dc:	2f19      	cmp	r7, #25
 800b5de:	d804      	bhi.n	800b5ea <_strtol_l.isra.0+0xca>
 800b5e0:	3c57      	subs	r4, #87	; 0x57
 800b5e2:	e7db      	b.n	800b59c <_strtol_l.isra.0+0x7c>
 800b5e4:	f04f 36ff 	mov.w	r6, #4294967295
 800b5e8:	e7e4      	b.n	800b5b4 <_strtol_l.isra.0+0x94>
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	da05      	bge.n	800b5fa <_strtol_l.isra.0+0xda>
 800b5ee:	2322      	movs	r3, #34	; 0x22
 800b5f0:	6003      	str	r3, [r0, #0]
 800b5f2:	4665      	mov	r5, ip
 800b5f4:	b942      	cbnz	r2, 800b608 <_strtol_l.isra.0+0xe8>
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	e79d      	b.n	800b536 <_strtol_l.isra.0+0x16>
 800b5fa:	f1b8 0f00 	cmp.w	r8, #0
 800b5fe:	d000      	beq.n	800b602 <_strtol_l.isra.0+0xe2>
 800b600:	426d      	negs	r5, r5
 800b602:	2a00      	cmp	r2, #0
 800b604:	d0f7      	beq.n	800b5f6 <_strtol_l.isra.0+0xd6>
 800b606:	b10e      	cbz	r6, 800b60c <_strtol_l.isra.0+0xec>
 800b608:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b60c:	6011      	str	r1, [r2, #0]
 800b60e:	e7f2      	b.n	800b5f6 <_strtol_l.isra.0+0xd6>
 800b610:	2430      	movs	r4, #48	; 0x30
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1b3      	bne.n	800b57e <_strtol_l.isra.0+0x5e>
 800b616:	2308      	movs	r3, #8
 800b618:	e7b1      	b.n	800b57e <_strtol_l.isra.0+0x5e>
 800b61a:	2c30      	cmp	r4, #48	; 0x30
 800b61c:	d0a4      	beq.n	800b568 <_strtol_l.isra.0+0x48>
 800b61e:	230a      	movs	r3, #10
 800b620:	e7ad      	b.n	800b57e <_strtol_l.isra.0+0x5e>
 800b622:	bf00      	nop
 800b624:	0800e879 	.word	0x0800e879

0800b628 <_strtol_r>:
 800b628:	f7ff bf7a 	b.w	800b520 <_strtol_l.isra.0>

0800b62c <__swbuf_r>:
 800b62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62e:	460e      	mov	r6, r1
 800b630:	4614      	mov	r4, r2
 800b632:	4605      	mov	r5, r0
 800b634:	b118      	cbz	r0, 800b63e <__swbuf_r+0x12>
 800b636:	6983      	ldr	r3, [r0, #24]
 800b638:	b90b      	cbnz	r3, 800b63e <__swbuf_r+0x12>
 800b63a:	f001 f84b 	bl	800c6d4 <__sinit>
 800b63e:	4b21      	ldr	r3, [pc, #132]	; (800b6c4 <__swbuf_r+0x98>)
 800b640:	429c      	cmp	r4, r3
 800b642:	d12b      	bne.n	800b69c <__swbuf_r+0x70>
 800b644:	686c      	ldr	r4, [r5, #4]
 800b646:	69a3      	ldr	r3, [r4, #24]
 800b648:	60a3      	str	r3, [r4, #8]
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	071a      	lsls	r2, r3, #28
 800b64e:	d52f      	bpl.n	800b6b0 <__swbuf_r+0x84>
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	b36b      	cbz	r3, 800b6b0 <__swbuf_r+0x84>
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	6820      	ldr	r0, [r4, #0]
 800b658:	1ac0      	subs	r0, r0, r3
 800b65a:	6963      	ldr	r3, [r4, #20]
 800b65c:	b2f6      	uxtb	r6, r6
 800b65e:	4283      	cmp	r3, r0
 800b660:	4637      	mov	r7, r6
 800b662:	dc04      	bgt.n	800b66e <__swbuf_r+0x42>
 800b664:	4621      	mov	r1, r4
 800b666:	4628      	mov	r0, r5
 800b668:	f000 ffa0 	bl	800c5ac <_fflush_r>
 800b66c:	bb30      	cbnz	r0, 800b6bc <__swbuf_r+0x90>
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	3b01      	subs	r3, #1
 800b672:	60a3      	str	r3, [r4, #8]
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	6022      	str	r2, [r4, #0]
 800b67a:	701e      	strb	r6, [r3, #0]
 800b67c:	6963      	ldr	r3, [r4, #20]
 800b67e:	3001      	adds	r0, #1
 800b680:	4283      	cmp	r3, r0
 800b682:	d004      	beq.n	800b68e <__swbuf_r+0x62>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	07db      	lsls	r3, r3, #31
 800b688:	d506      	bpl.n	800b698 <__swbuf_r+0x6c>
 800b68a:	2e0a      	cmp	r6, #10
 800b68c:	d104      	bne.n	800b698 <__swbuf_r+0x6c>
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	f000 ff8b 	bl	800c5ac <_fflush_r>
 800b696:	b988      	cbnz	r0, 800b6bc <__swbuf_r+0x90>
 800b698:	4638      	mov	r0, r7
 800b69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <__swbuf_r+0x9c>)
 800b69e:	429c      	cmp	r4, r3
 800b6a0:	d101      	bne.n	800b6a6 <__swbuf_r+0x7a>
 800b6a2:	68ac      	ldr	r4, [r5, #8]
 800b6a4:	e7cf      	b.n	800b646 <__swbuf_r+0x1a>
 800b6a6:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <__swbuf_r+0xa0>)
 800b6a8:	429c      	cmp	r4, r3
 800b6aa:	bf08      	it	eq
 800b6ac:	68ec      	ldreq	r4, [r5, #12]
 800b6ae:	e7ca      	b.n	800b646 <__swbuf_r+0x1a>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 f80c 	bl	800b6d0 <__swsetup_r>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d0cb      	beq.n	800b654 <__swbuf_r+0x28>
 800b6bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b6c0:	e7ea      	b.n	800b698 <__swbuf_r+0x6c>
 800b6c2:	bf00      	nop
 800b6c4:	0800ea30 	.word	0x0800ea30
 800b6c8:	0800ea50 	.word	0x0800ea50
 800b6cc:	0800ea10 	.word	0x0800ea10

0800b6d0 <__swsetup_r>:
 800b6d0:	4b32      	ldr	r3, [pc, #200]	; (800b79c <__swsetup_r+0xcc>)
 800b6d2:	b570      	push	{r4, r5, r6, lr}
 800b6d4:	681d      	ldr	r5, [r3, #0]
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	460c      	mov	r4, r1
 800b6da:	b125      	cbz	r5, 800b6e6 <__swsetup_r+0x16>
 800b6dc:	69ab      	ldr	r3, [r5, #24]
 800b6de:	b913      	cbnz	r3, 800b6e6 <__swsetup_r+0x16>
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f000 fff7 	bl	800c6d4 <__sinit>
 800b6e6:	4b2e      	ldr	r3, [pc, #184]	; (800b7a0 <__swsetup_r+0xd0>)
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	d10f      	bne.n	800b70c <__swsetup_r+0x3c>
 800b6ec:	686c      	ldr	r4, [r5, #4]
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6f4:	0719      	lsls	r1, r3, #28
 800b6f6:	d42c      	bmi.n	800b752 <__swsetup_r+0x82>
 800b6f8:	06dd      	lsls	r5, r3, #27
 800b6fa:	d411      	bmi.n	800b720 <__swsetup_r+0x50>
 800b6fc:	2309      	movs	r3, #9
 800b6fe:	6033      	str	r3, [r6, #0]
 800b700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b704:	81a3      	strh	r3, [r4, #12]
 800b706:	f04f 30ff 	mov.w	r0, #4294967295
 800b70a:	e03e      	b.n	800b78a <__swsetup_r+0xba>
 800b70c:	4b25      	ldr	r3, [pc, #148]	; (800b7a4 <__swsetup_r+0xd4>)
 800b70e:	429c      	cmp	r4, r3
 800b710:	d101      	bne.n	800b716 <__swsetup_r+0x46>
 800b712:	68ac      	ldr	r4, [r5, #8]
 800b714:	e7eb      	b.n	800b6ee <__swsetup_r+0x1e>
 800b716:	4b24      	ldr	r3, [pc, #144]	; (800b7a8 <__swsetup_r+0xd8>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	bf08      	it	eq
 800b71c:	68ec      	ldreq	r4, [r5, #12]
 800b71e:	e7e6      	b.n	800b6ee <__swsetup_r+0x1e>
 800b720:	0758      	lsls	r0, r3, #29
 800b722:	d512      	bpl.n	800b74a <__swsetup_r+0x7a>
 800b724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b726:	b141      	cbz	r1, 800b73a <__swsetup_r+0x6a>
 800b728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b72c:	4299      	cmp	r1, r3
 800b72e:	d002      	beq.n	800b736 <__swsetup_r+0x66>
 800b730:	4630      	mov	r0, r6
 800b732:	f002 f92b 	bl	800d98c <_free_r>
 800b736:	2300      	movs	r3, #0
 800b738:	6363      	str	r3, [r4, #52]	; 0x34
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	2300      	movs	r3, #0
 800b744:	6063      	str	r3, [r4, #4]
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	f043 0308 	orr.w	r3, r3, #8
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	b94b      	cbnz	r3, 800b76a <__swsetup_r+0x9a>
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b75c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b760:	d003      	beq.n	800b76a <__swsetup_r+0x9a>
 800b762:	4621      	mov	r1, r4
 800b764:	4630      	mov	r0, r6
 800b766:	f001 fbed 	bl	800cf44 <__smakebuf_r>
 800b76a:	89a0      	ldrh	r0, [r4, #12]
 800b76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b770:	f010 0301 	ands.w	r3, r0, #1
 800b774:	d00a      	beq.n	800b78c <__swsetup_r+0xbc>
 800b776:	2300      	movs	r3, #0
 800b778:	60a3      	str	r3, [r4, #8]
 800b77a:	6963      	ldr	r3, [r4, #20]
 800b77c:	425b      	negs	r3, r3
 800b77e:	61a3      	str	r3, [r4, #24]
 800b780:	6923      	ldr	r3, [r4, #16]
 800b782:	b943      	cbnz	r3, 800b796 <__swsetup_r+0xc6>
 800b784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b788:	d1ba      	bne.n	800b700 <__swsetup_r+0x30>
 800b78a:	bd70      	pop	{r4, r5, r6, pc}
 800b78c:	0781      	lsls	r1, r0, #30
 800b78e:	bf58      	it	pl
 800b790:	6963      	ldrpl	r3, [r4, #20]
 800b792:	60a3      	str	r3, [r4, #8]
 800b794:	e7f4      	b.n	800b780 <__swsetup_r+0xb0>
 800b796:	2000      	movs	r0, #0
 800b798:	e7f7      	b.n	800b78a <__swsetup_r+0xba>
 800b79a:	bf00      	nop
 800b79c:	2000000c 	.word	0x2000000c
 800b7a0:	0800ea30 	.word	0x0800ea30
 800b7a4:	0800ea50 	.word	0x0800ea50
 800b7a8:	0800ea10 	.word	0x0800ea10

0800b7ac <quorem>:
 800b7ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	6903      	ldr	r3, [r0, #16]
 800b7b2:	690c      	ldr	r4, [r1, #16]
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	f2c0 8081 	blt.w	800b8be <quorem+0x112>
 800b7bc:	3c01      	subs	r4, #1
 800b7be:	f101 0814 	add.w	r8, r1, #20
 800b7c2:	f100 0514 	add.w	r5, r0, #20
 800b7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ca:	9301      	str	r3, [sp, #4]
 800b7cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7e4:	d331      	bcc.n	800b84a <quorem+0x9e>
 800b7e6:	f04f 0e00 	mov.w	lr, #0
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	46ac      	mov	ip, r5
 800b7ee:	46f2      	mov	sl, lr
 800b7f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7f4:	b293      	uxth	r3, r2
 800b7f6:	fb06 e303 	mla	r3, r6, r3, lr
 800b7fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	ebaa 0303 	sub.w	r3, sl, r3
 800b804:	0c12      	lsrs	r2, r2, #16
 800b806:	f8dc a000 	ldr.w	sl, [ip]
 800b80a:	fb06 e202 	mla	r2, r6, r2, lr
 800b80e:	fa13 f38a 	uxtah	r3, r3, sl
 800b812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b816:	fa1f fa82 	uxth.w	sl, r2
 800b81a:	f8dc 2000 	ldr.w	r2, [ip]
 800b81e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b826:	b29b      	uxth	r3, r3
 800b828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b82c:	4581      	cmp	r9, r0
 800b82e:	f84c 3b04 	str.w	r3, [ip], #4
 800b832:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b836:	d2db      	bcs.n	800b7f0 <quorem+0x44>
 800b838:	f855 300b 	ldr.w	r3, [r5, fp]
 800b83c:	b92b      	cbnz	r3, 800b84a <quorem+0x9e>
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	3b04      	subs	r3, #4
 800b842:	429d      	cmp	r5, r3
 800b844:	461a      	mov	r2, r3
 800b846:	d32e      	bcc.n	800b8a6 <quorem+0xfa>
 800b848:	613c      	str	r4, [r7, #16]
 800b84a:	4638      	mov	r0, r7
 800b84c:	f001 fe9c 	bl	800d588 <__mcmp>
 800b850:	2800      	cmp	r0, #0
 800b852:	db24      	blt.n	800b89e <quorem+0xf2>
 800b854:	3601      	adds	r6, #1
 800b856:	4628      	mov	r0, r5
 800b858:	f04f 0c00 	mov.w	ip, #0
 800b85c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b860:	f8d0 e000 	ldr.w	lr, [r0]
 800b864:	b293      	uxth	r3, r2
 800b866:	ebac 0303 	sub.w	r3, ip, r3
 800b86a:	0c12      	lsrs	r2, r2, #16
 800b86c:	fa13 f38e 	uxtah	r3, r3, lr
 800b870:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b878:	b29b      	uxth	r3, r3
 800b87a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b87e:	45c1      	cmp	r9, r8
 800b880:	f840 3b04 	str.w	r3, [r0], #4
 800b884:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b888:	d2e8      	bcs.n	800b85c <quorem+0xb0>
 800b88a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b88e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b892:	b922      	cbnz	r2, 800b89e <quorem+0xf2>
 800b894:	3b04      	subs	r3, #4
 800b896:	429d      	cmp	r5, r3
 800b898:	461a      	mov	r2, r3
 800b89a:	d30a      	bcc.n	800b8b2 <quorem+0x106>
 800b89c:	613c      	str	r4, [r7, #16]
 800b89e:	4630      	mov	r0, r6
 800b8a0:	b003      	add	sp, #12
 800b8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a6:	6812      	ldr	r2, [r2, #0]
 800b8a8:	3b04      	subs	r3, #4
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	d1cc      	bne.n	800b848 <quorem+0x9c>
 800b8ae:	3c01      	subs	r4, #1
 800b8b0:	e7c7      	b.n	800b842 <quorem+0x96>
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	3b04      	subs	r3, #4
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	d1f0      	bne.n	800b89c <quorem+0xf0>
 800b8ba:	3c01      	subs	r4, #1
 800b8bc:	e7eb      	b.n	800b896 <quorem+0xea>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	e7ee      	b.n	800b8a0 <quorem+0xf4>
 800b8c2:	0000      	movs	r0, r0
 800b8c4:	0000      	movs	r0, r0
	...

0800b8c8 <_dtoa_r>:
 800b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8cc:	ed2d 8b02 	vpush	{d8}
 800b8d0:	ec57 6b10 	vmov	r6, r7, d0
 800b8d4:	b095      	sub	sp, #84	; 0x54
 800b8d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b8d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b8dc:	9105      	str	r1, [sp, #20]
 800b8de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b8e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8e8:	b975      	cbnz	r5, 800b908 <_dtoa_r+0x40>
 800b8ea:	2010      	movs	r0, #16
 800b8ec:	f001 fb6a 	bl	800cfc4 <malloc>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	6260      	str	r0, [r4, #36]	; 0x24
 800b8f4:	b920      	cbnz	r0, 800b900 <_dtoa_r+0x38>
 800b8f6:	4bb2      	ldr	r3, [pc, #712]	; (800bbc0 <_dtoa_r+0x2f8>)
 800b8f8:	21ea      	movs	r1, #234	; 0xea
 800b8fa:	48b2      	ldr	r0, [pc, #712]	; (800bbc4 <_dtoa_r+0x2fc>)
 800b8fc:	f002 fc34 	bl	800e168 <__assert_func>
 800b900:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b904:	6005      	str	r5, [r0, #0]
 800b906:	60c5      	str	r5, [r0, #12]
 800b908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b90a:	6819      	ldr	r1, [r3, #0]
 800b90c:	b151      	cbz	r1, 800b924 <_dtoa_r+0x5c>
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	604a      	str	r2, [r1, #4]
 800b912:	2301      	movs	r3, #1
 800b914:	4093      	lsls	r3, r2
 800b916:	608b      	str	r3, [r1, #8]
 800b918:	4620      	mov	r0, r4
 800b91a:	f001 fbad 	bl	800d078 <_Bfree>
 800b91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	1e3b      	subs	r3, r7, #0
 800b926:	bfb9      	ittee	lt
 800b928:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b92c:	9303      	strlt	r3, [sp, #12]
 800b92e:	2300      	movge	r3, #0
 800b930:	f8c8 3000 	strge.w	r3, [r8]
 800b934:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b938:	4ba3      	ldr	r3, [pc, #652]	; (800bbc8 <_dtoa_r+0x300>)
 800b93a:	bfbc      	itt	lt
 800b93c:	2201      	movlt	r2, #1
 800b93e:	f8c8 2000 	strlt.w	r2, [r8]
 800b942:	ea33 0309 	bics.w	r3, r3, r9
 800b946:	d11b      	bne.n	800b980 <_dtoa_r+0xb8>
 800b948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b94a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b954:	4333      	orrs	r3, r6
 800b956:	f000 857a 	beq.w	800c44e <_dtoa_r+0xb86>
 800b95a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b95c:	b963      	cbnz	r3, 800b978 <_dtoa_r+0xb0>
 800b95e:	4b9b      	ldr	r3, [pc, #620]	; (800bbcc <_dtoa_r+0x304>)
 800b960:	e024      	b.n	800b9ac <_dtoa_r+0xe4>
 800b962:	4b9b      	ldr	r3, [pc, #620]	; (800bbd0 <_dtoa_r+0x308>)
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b96a:	6013      	str	r3, [r2, #0]
 800b96c:	9800      	ldr	r0, [sp, #0]
 800b96e:	b015      	add	sp, #84	; 0x54
 800b970:	ecbd 8b02 	vpop	{d8}
 800b974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b978:	4b94      	ldr	r3, [pc, #592]	; (800bbcc <_dtoa_r+0x304>)
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	3303      	adds	r3, #3
 800b97e:	e7f3      	b.n	800b968 <_dtoa_r+0xa0>
 800b980:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b984:	2200      	movs	r2, #0
 800b986:	ec51 0b17 	vmov	r0, r1, d7
 800b98a:	2300      	movs	r3, #0
 800b98c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b990:	f7f5 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b994:	4680      	mov	r8, r0
 800b996:	b158      	cbz	r0, 800b9b0 <_dtoa_r+0xe8>
 800b998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b99a:	2301      	movs	r3, #1
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 8551 	beq.w	800c448 <_dtoa_r+0xb80>
 800b9a6:	488b      	ldr	r0, [pc, #556]	; (800bbd4 <_dtoa_r+0x30c>)
 800b9a8:	6018      	str	r0, [r3, #0]
 800b9aa:	1e43      	subs	r3, r0, #1
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	e7dd      	b.n	800b96c <_dtoa_r+0xa4>
 800b9b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b9b4:	aa12      	add	r2, sp, #72	; 0x48
 800b9b6:	a913      	add	r1, sp, #76	; 0x4c
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f001 ff05 	bl	800d7c8 <__d2b>
 800b9be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9c2:	4683      	mov	fp, r0
 800b9c4:	2d00      	cmp	r5, #0
 800b9c6:	d07c      	beq.n	800bac2 <_dtoa_r+0x1fa>
 800b9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b9ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b9d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b9da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b9de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9e2:	4b7d      	ldr	r3, [pc, #500]	; (800bbd8 <_dtoa_r+0x310>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	f7f4 fc4d 	bl	8000288 <__aeabi_dsub>
 800b9ee:	a36e      	add	r3, pc, #440	; (adr r3, 800bba8 <_dtoa_r+0x2e0>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fe00 	bl	80005f8 <__aeabi_dmul>
 800b9f8:	a36d      	add	r3, pc, #436	; (adr r3, 800bbb0 <_dtoa_r+0x2e8>)
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	f7f4 fc45 	bl	800028c <__adddf3>
 800ba02:	4606      	mov	r6, r0
 800ba04:	4628      	mov	r0, r5
 800ba06:	460f      	mov	r7, r1
 800ba08:	f7f4 fd8c 	bl	8000524 <__aeabi_i2d>
 800ba0c:	a36a      	add	r3, pc, #424	; (adr r3, 800bbb8 <_dtoa_r+0x2f0>)
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	f7f4 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 fc35 	bl	800028c <__adddf3>
 800ba22:	4606      	mov	r6, r0
 800ba24:	460f      	mov	r7, r1
 800ba26:	f7f5 f897 	bl	8000b58 <__aeabi_d2iz>
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4630      	mov	r0, r6
 800ba32:	4639      	mov	r1, r7
 800ba34:	f7f5 f852 	bl	8000adc <__aeabi_dcmplt>
 800ba38:	b148      	cbz	r0, 800ba4e <_dtoa_r+0x186>
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	f7f4 fd72 	bl	8000524 <__aeabi_i2d>
 800ba40:	4632      	mov	r2, r6
 800ba42:	463b      	mov	r3, r7
 800ba44:	f7f5 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba48:	b908      	cbnz	r0, 800ba4e <_dtoa_r+0x186>
 800ba4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba4e:	f1ba 0f16 	cmp.w	sl, #22
 800ba52:	d854      	bhi.n	800bafe <_dtoa_r+0x236>
 800ba54:	4b61      	ldr	r3, [pc, #388]	; (800bbdc <_dtoa_r+0x314>)
 800ba56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba62:	f7f5 f83b 	bl	8000adc <__aeabi_dcmplt>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d04b      	beq.n	800bb02 <_dtoa_r+0x23a>
 800ba6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba6e:	2300      	movs	r3, #0
 800ba70:	930e      	str	r3, [sp, #56]	; 0x38
 800ba72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba74:	1b5d      	subs	r5, r3, r5
 800ba76:	1e6b      	subs	r3, r5, #1
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	bf43      	ittte	mi
 800ba7c:	2300      	movmi	r3, #0
 800ba7e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ba82:	9304      	strmi	r3, [sp, #16]
 800ba84:	f04f 0800 	movpl.w	r8, #0
 800ba88:	f1ba 0f00 	cmp.w	sl, #0
 800ba8c:	db3b      	blt.n	800bb06 <_dtoa_r+0x23e>
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ba94:	4453      	add	r3, sl
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9306      	str	r3, [sp, #24]
 800ba9c:	9b05      	ldr	r3, [sp, #20]
 800ba9e:	2b09      	cmp	r3, #9
 800baa0:	d869      	bhi.n	800bb76 <_dtoa_r+0x2ae>
 800baa2:	2b05      	cmp	r3, #5
 800baa4:	bfc4      	itt	gt
 800baa6:	3b04      	subgt	r3, #4
 800baa8:	9305      	strgt	r3, [sp, #20]
 800baaa:	9b05      	ldr	r3, [sp, #20]
 800baac:	f1a3 0302 	sub.w	r3, r3, #2
 800bab0:	bfcc      	ite	gt
 800bab2:	2500      	movgt	r5, #0
 800bab4:	2501      	movle	r5, #1
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d869      	bhi.n	800bb8e <_dtoa_r+0x2c6>
 800baba:	e8df f003 	tbb	[pc, r3]
 800babe:	4e2c      	.short	0x4e2c
 800bac0:	5a4c      	.short	0x5a4c
 800bac2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bac6:	441d      	add	r5, r3
 800bac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bacc:	2b20      	cmp	r3, #32
 800bace:	bfc1      	itttt	gt
 800bad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bad4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bad8:	fa09 f303 	lslgt.w	r3, r9, r3
 800badc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bae0:	bfda      	itte	le
 800bae2:	f1c3 0320 	rsble	r3, r3, #32
 800bae6:	fa06 f003 	lslle.w	r0, r6, r3
 800baea:	4318      	orrgt	r0, r3
 800baec:	f7f4 fd0a 	bl	8000504 <__aeabi_ui2d>
 800baf0:	2301      	movs	r3, #1
 800baf2:	4606      	mov	r6, r0
 800baf4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800baf8:	3d01      	subs	r5, #1
 800bafa:	9310      	str	r3, [sp, #64]	; 0x40
 800bafc:	e771      	b.n	800b9e2 <_dtoa_r+0x11a>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e7b6      	b.n	800ba70 <_dtoa_r+0x1a8>
 800bb02:	900e      	str	r0, [sp, #56]	; 0x38
 800bb04:	e7b5      	b.n	800ba72 <_dtoa_r+0x1aa>
 800bb06:	f1ca 0300 	rsb	r3, sl, #0
 800bb0a:	9306      	str	r3, [sp, #24]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	eba8 080a 	sub.w	r8, r8, sl
 800bb12:	930d      	str	r3, [sp, #52]	; 0x34
 800bb14:	e7c2      	b.n	800ba9c <_dtoa_r+0x1d4>
 800bb16:	2300      	movs	r3, #0
 800bb18:	9308      	str	r3, [sp, #32]
 800bb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc39      	bgt.n	800bb94 <_dtoa_r+0x2cc>
 800bb20:	f04f 0901 	mov.w	r9, #1
 800bb24:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb28:	464b      	mov	r3, r9
 800bb2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bb2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb30:	2200      	movs	r2, #0
 800bb32:	6042      	str	r2, [r0, #4]
 800bb34:	2204      	movs	r2, #4
 800bb36:	f102 0614 	add.w	r6, r2, #20
 800bb3a:	429e      	cmp	r6, r3
 800bb3c:	6841      	ldr	r1, [r0, #4]
 800bb3e:	d92f      	bls.n	800bba0 <_dtoa_r+0x2d8>
 800bb40:	4620      	mov	r0, r4
 800bb42:	f001 fa59 	bl	800cff8 <_Balloc>
 800bb46:	9000      	str	r0, [sp, #0]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d14b      	bne.n	800bbe4 <_dtoa_r+0x31c>
 800bb4c:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <_dtoa_r+0x318>)
 800bb4e:	4602      	mov	r2, r0
 800bb50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb54:	e6d1      	b.n	800b8fa <_dtoa_r+0x32>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7de      	b.n	800bb18 <_dtoa_r+0x250>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9308      	str	r3, [sp, #32]
 800bb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb60:	eb0a 0903 	add.w	r9, sl, r3
 800bb64:	f109 0301 	add.w	r3, r9, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	bfb8      	it	lt
 800bb6e:	2301      	movlt	r3, #1
 800bb70:	e7dd      	b.n	800bb2e <_dtoa_r+0x266>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e7f2      	b.n	800bb5c <_dtoa_r+0x294>
 800bb76:	2501      	movs	r5, #1
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9305      	str	r3, [sp, #20]
 800bb7c:	9508      	str	r5, [sp, #32]
 800bb7e:	f04f 39ff 	mov.w	r9, #4294967295
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb88:	2312      	movs	r3, #18
 800bb8a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb8c:	e7cf      	b.n	800bb2e <_dtoa_r+0x266>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	9308      	str	r3, [sp, #32]
 800bb92:	e7f4      	b.n	800bb7e <_dtoa_r+0x2b6>
 800bb94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bb98:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb9c:	464b      	mov	r3, r9
 800bb9e:	e7c6      	b.n	800bb2e <_dtoa_r+0x266>
 800bba0:	3101      	adds	r1, #1
 800bba2:	6041      	str	r1, [r0, #4]
 800bba4:	0052      	lsls	r2, r2, #1
 800bba6:	e7c6      	b.n	800bb36 <_dtoa_r+0x26e>
 800bba8:	636f4361 	.word	0x636f4361
 800bbac:	3fd287a7 	.word	0x3fd287a7
 800bbb0:	8b60c8b3 	.word	0x8b60c8b3
 800bbb4:	3fc68a28 	.word	0x3fc68a28
 800bbb8:	509f79fb 	.word	0x509f79fb
 800bbbc:	3fd34413 	.word	0x3fd34413
 800bbc0:	0800e986 	.word	0x0800e986
 800bbc4:	0800e99d 	.word	0x0800e99d
 800bbc8:	7ff00000 	.word	0x7ff00000
 800bbcc:	0800e982 	.word	0x0800e982
 800bbd0:	0800e979 	.word	0x0800e979
 800bbd4:	0800e7f9 	.word	0x0800e7f9
 800bbd8:	3ff80000 	.word	0x3ff80000
 800bbdc:	0800eb78 	.word	0x0800eb78
 800bbe0:	0800e9fc 	.word	0x0800e9fc
 800bbe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbe6:	9a00      	ldr	r2, [sp, #0]
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	9b01      	ldr	r3, [sp, #4]
 800bbec:	2b0e      	cmp	r3, #14
 800bbee:	f200 80ad 	bhi.w	800bd4c <_dtoa_r+0x484>
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	f000 80aa 	beq.w	800bd4c <_dtoa_r+0x484>
 800bbf8:	f1ba 0f00 	cmp.w	sl, #0
 800bbfc:	dd36      	ble.n	800bc6c <_dtoa_r+0x3a4>
 800bbfe:	4ac3      	ldr	r2, [pc, #780]	; (800bf0c <_dtoa_r+0x644>)
 800bc00:	f00a 030f 	and.w	r3, sl, #15
 800bc04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc08:	ed93 7b00 	vldr	d7, [r3]
 800bc0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bc10:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bc14:	eeb0 8a47 	vmov.f32	s16, s14
 800bc18:	eef0 8a67 	vmov.f32	s17, s15
 800bc1c:	d016      	beq.n	800bc4c <_dtoa_r+0x384>
 800bc1e:	4bbc      	ldr	r3, [pc, #752]	; (800bf10 <_dtoa_r+0x648>)
 800bc20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc28:	f7f4 fe10 	bl	800084c <__aeabi_ddiv>
 800bc2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc30:	f007 070f 	and.w	r7, r7, #15
 800bc34:	2503      	movs	r5, #3
 800bc36:	4eb6      	ldr	r6, [pc, #728]	; (800bf10 <_dtoa_r+0x648>)
 800bc38:	b957      	cbnz	r7, 800bc50 <_dtoa_r+0x388>
 800bc3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3e:	ec53 2b18 	vmov	r2, r3, d8
 800bc42:	f7f4 fe03 	bl	800084c <__aeabi_ddiv>
 800bc46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc4a:	e029      	b.n	800bca0 <_dtoa_r+0x3d8>
 800bc4c:	2502      	movs	r5, #2
 800bc4e:	e7f2      	b.n	800bc36 <_dtoa_r+0x36e>
 800bc50:	07f9      	lsls	r1, r7, #31
 800bc52:	d508      	bpl.n	800bc66 <_dtoa_r+0x39e>
 800bc54:	ec51 0b18 	vmov	r0, r1, d8
 800bc58:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc5c:	f7f4 fccc 	bl	80005f8 <__aeabi_dmul>
 800bc60:	ec41 0b18 	vmov	d8, r0, r1
 800bc64:	3501      	adds	r5, #1
 800bc66:	107f      	asrs	r7, r7, #1
 800bc68:	3608      	adds	r6, #8
 800bc6a:	e7e5      	b.n	800bc38 <_dtoa_r+0x370>
 800bc6c:	f000 80a6 	beq.w	800bdbc <_dtoa_r+0x4f4>
 800bc70:	f1ca 0600 	rsb	r6, sl, #0
 800bc74:	4ba5      	ldr	r3, [pc, #660]	; (800bf0c <_dtoa_r+0x644>)
 800bc76:	4fa6      	ldr	r7, [pc, #664]	; (800bf10 <_dtoa_r+0x648>)
 800bc78:	f006 020f 	and.w	r2, r6, #15
 800bc7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc88:	f7f4 fcb6 	bl	80005f8 <__aeabi_dmul>
 800bc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc90:	1136      	asrs	r6, r6, #4
 800bc92:	2300      	movs	r3, #0
 800bc94:	2502      	movs	r5, #2
 800bc96:	2e00      	cmp	r6, #0
 800bc98:	f040 8085 	bne.w	800bda6 <_dtoa_r+0x4de>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1d2      	bne.n	800bc46 <_dtoa_r+0x37e>
 800bca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 808c 	beq.w	800bdc0 <_dtoa_r+0x4f8>
 800bca8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcac:	4b99      	ldr	r3, [pc, #612]	; (800bf14 <_dtoa_r+0x64c>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	f7f4 ff12 	bl	8000adc <__aeabi_dcmplt>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f000 8081 	beq.w	800bdc0 <_dtoa_r+0x4f8>
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d07d      	beq.n	800bdc0 <_dtoa_r+0x4f8>
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	dd3c      	ble.n	800bd44 <_dtoa_r+0x47c>
 800bcca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4b91      	ldr	r3, [pc, #580]	; (800bf18 <_dtoa_r+0x650>)
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fc8e 	bl	80005f8 <__aeabi_dmul>
 800bcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bce0:	3501      	adds	r5, #1
 800bce2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bce6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcea:	4628      	mov	r0, r5
 800bcec:	f7f4 fc1a 	bl	8000524 <__aeabi_i2d>
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	f7f4 fc80 	bl	80005f8 <__aeabi_dmul>
 800bcf8:	4b88      	ldr	r3, [pc, #544]	; (800bf1c <_dtoa_r+0x654>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7f4 fac6 	bl	800028c <__adddf3>
 800bd00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d15c      	bne.n	800bdca <_dtoa_r+0x502>
 800bd10:	4b83      	ldr	r3, [pc, #524]	; (800bf20 <_dtoa_r+0x658>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 fab6 	bl	8000288 <__aeabi_dsub>
 800bd1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd20:	4606      	mov	r6, r0
 800bd22:	460f      	mov	r7, r1
 800bd24:	f7f4 fef8 	bl	8000b18 <__aeabi_dcmpgt>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f040 8296 	bne.w	800c25a <_dtoa_r+0x992>
 800bd2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd32:	4630      	mov	r0, r6
 800bd34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7f4 fecf 	bl	8000adc <__aeabi_dcmplt>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f040 8288 	bne.w	800c254 <_dtoa_r+0x98c>
 800bd44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f2c0 8158 	blt.w	800c004 <_dtoa_r+0x73c>
 800bd54:	f1ba 0f0e 	cmp.w	sl, #14
 800bd58:	f300 8154 	bgt.w	800c004 <_dtoa_r+0x73c>
 800bd5c:	4b6b      	ldr	r3, [pc, #428]	; (800bf0c <_dtoa_r+0x644>)
 800bd5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f280 80e3 	bge.w	800bf34 <_dtoa_r+0x66c>
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f300 80df 	bgt.w	800bf34 <_dtoa_r+0x66c>
 800bd76:	f040 826d 	bne.w	800c254 <_dtoa_r+0x98c>
 800bd7a:	4b69      	ldr	r3, [pc, #420]	; (800bf20 <_dtoa_r+0x658>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4649      	mov	r1, r9
 800bd82:	f7f4 fc39 	bl	80005f8 <__aeabi_dmul>
 800bd86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd8a:	f7f4 febb 	bl	8000b04 <__aeabi_dcmpge>
 800bd8e:	9e01      	ldr	r6, [sp, #4]
 800bd90:	4637      	mov	r7, r6
 800bd92:	2800      	cmp	r0, #0
 800bd94:	f040 8243 	bne.w	800c21e <_dtoa_r+0x956>
 800bd98:	9d00      	ldr	r5, [sp, #0]
 800bd9a:	2331      	movs	r3, #49	; 0x31
 800bd9c:	f805 3b01 	strb.w	r3, [r5], #1
 800bda0:	f10a 0a01 	add.w	sl, sl, #1
 800bda4:	e23f      	b.n	800c226 <_dtoa_r+0x95e>
 800bda6:	07f2      	lsls	r2, r6, #31
 800bda8:	d505      	bpl.n	800bdb6 <_dtoa_r+0x4ee>
 800bdaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdae:	f7f4 fc23 	bl	80005f8 <__aeabi_dmul>
 800bdb2:	3501      	adds	r5, #1
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	1076      	asrs	r6, r6, #1
 800bdb8:	3708      	adds	r7, #8
 800bdba:	e76c      	b.n	800bc96 <_dtoa_r+0x3ce>
 800bdbc:	2502      	movs	r5, #2
 800bdbe:	e76f      	b.n	800bca0 <_dtoa_r+0x3d8>
 800bdc0:	9b01      	ldr	r3, [sp, #4]
 800bdc2:	f8cd a01c 	str.w	sl, [sp, #28]
 800bdc6:	930c      	str	r3, [sp, #48]	; 0x30
 800bdc8:	e78d      	b.n	800bce6 <_dtoa_r+0x41e>
 800bdca:	9900      	ldr	r1, [sp, #0]
 800bdcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bdce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdd0:	4b4e      	ldr	r3, [pc, #312]	; (800bf0c <_dtoa_r+0x644>)
 800bdd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdd6:	4401      	add	r1, r0
 800bdd8:	9102      	str	r1, [sp, #8]
 800bdda:	9908      	ldr	r1, [sp, #32]
 800bddc:	eeb0 8a47 	vmov.f32	s16, s14
 800bde0:	eef0 8a67 	vmov.f32	s17, s15
 800bde4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bde8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdec:	2900      	cmp	r1, #0
 800bdee:	d045      	beq.n	800be7c <_dtoa_r+0x5b4>
 800bdf0:	494c      	ldr	r1, [pc, #304]	; (800bf24 <_dtoa_r+0x65c>)
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f7f4 fd2a 	bl	800084c <__aeabi_ddiv>
 800bdf8:	ec53 2b18 	vmov	r2, r3, d8
 800bdfc:	f7f4 fa44 	bl	8000288 <__aeabi_dsub>
 800be00:	9d00      	ldr	r5, [sp, #0]
 800be02:	ec41 0b18 	vmov	d8, r0, r1
 800be06:	4639      	mov	r1, r7
 800be08:	4630      	mov	r0, r6
 800be0a:	f7f4 fea5 	bl	8000b58 <__aeabi_d2iz>
 800be0e:	900c      	str	r0, [sp, #48]	; 0x30
 800be10:	f7f4 fb88 	bl	8000524 <__aeabi_i2d>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	f7f4 fa34 	bl	8000288 <__aeabi_dsub>
 800be20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be22:	3330      	adds	r3, #48	; 0x30
 800be24:	f805 3b01 	strb.w	r3, [r5], #1
 800be28:	ec53 2b18 	vmov	r2, r3, d8
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	f7f4 fe54 	bl	8000adc <__aeabi_dcmplt>
 800be34:	2800      	cmp	r0, #0
 800be36:	d165      	bne.n	800bf04 <_dtoa_r+0x63c>
 800be38:	4632      	mov	r2, r6
 800be3a:	463b      	mov	r3, r7
 800be3c:	4935      	ldr	r1, [pc, #212]	; (800bf14 <_dtoa_r+0x64c>)
 800be3e:	2000      	movs	r0, #0
 800be40:	f7f4 fa22 	bl	8000288 <__aeabi_dsub>
 800be44:	ec53 2b18 	vmov	r2, r3, d8
 800be48:	f7f4 fe48 	bl	8000adc <__aeabi_dcmplt>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f040 80b9 	bne.w	800bfc4 <_dtoa_r+0x6fc>
 800be52:	9b02      	ldr	r3, [sp, #8]
 800be54:	429d      	cmp	r5, r3
 800be56:	f43f af75 	beq.w	800bd44 <_dtoa_r+0x47c>
 800be5a:	4b2f      	ldr	r3, [pc, #188]	; (800bf18 <_dtoa_r+0x650>)
 800be5c:	ec51 0b18 	vmov	r0, r1, d8
 800be60:	2200      	movs	r2, #0
 800be62:	f7f4 fbc9 	bl	80005f8 <__aeabi_dmul>
 800be66:	4b2c      	ldr	r3, [pc, #176]	; (800bf18 <_dtoa_r+0x650>)
 800be68:	ec41 0b18 	vmov	d8, r0, r1
 800be6c:	2200      	movs	r2, #0
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fbc1 	bl	80005f8 <__aeabi_dmul>
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	e7c4      	b.n	800be06 <_dtoa_r+0x53e>
 800be7c:	ec51 0b17 	vmov	r0, r1, d7
 800be80:	f7f4 fbba 	bl	80005f8 <__aeabi_dmul>
 800be84:	9b02      	ldr	r3, [sp, #8]
 800be86:	9d00      	ldr	r5, [sp, #0]
 800be88:	930c      	str	r3, [sp, #48]	; 0x30
 800be8a:	ec41 0b18 	vmov	d8, r0, r1
 800be8e:	4639      	mov	r1, r7
 800be90:	4630      	mov	r0, r6
 800be92:	f7f4 fe61 	bl	8000b58 <__aeabi_d2iz>
 800be96:	9011      	str	r0, [sp, #68]	; 0x44
 800be98:	f7f4 fb44 	bl	8000524 <__aeabi_i2d>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4630      	mov	r0, r6
 800bea2:	4639      	mov	r1, r7
 800bea4:	f7f4 f9f0 	bl	8000288 <__aeabi_dsub>
 800bea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800beaa:	3330      	adds	r3, #48	; 0x30
 800beac:	f805 3b01 	strb.w	r3, [r5], #1
 800beb0:	9b02      	ldr	r3, [sp, #8]
 800beb2:	429d      	cmp	r5, r3
 800beb4:	4606      	mov	r6, r0
 800beb6:	460f      	mov	r7, r1
 800beb8:	f04f 0200 	mov.w	r2, #0
 800bebc:	d134      	bne.n	800bf28 <_dtoa_r+0x660>
 800bebe:	4b19      	ldr	r3, [pc, #100]	; (800bf24 <_dtoa_r+0x65c>)
 800bec0:	ec51 0b18 	vmov	r0, r1, d8
 800bec4:	f7f4 f9e2 	bl	800028c <__adddf3>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	4630      	mov	r0, r6
 800bece:	4639      	mov	r1, r7
 800bed0:	f7f4 fe22 	bl	8000b18 <__aeabi_dcmpgt>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d175      	bne.n	800bfc4 <_dtoa_r+0x6fc>
 800bed8:	ec53 2b18 	vmov	r2, r3, d8
 800bedc:	4911      	ldr	r1, [pc, #68]	; (800bf24 <_dtoa_r+0x65c>)
 800bede:	2000      	movs	r0, #0
 800bee0:	f7f4 f9d2 	bl	8000288 <__aeabi_dsub>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fdf6 	bl	8000adc <__aeabi_dcmplt>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	f43f af27 	beq.w	800bd44 <_dtoa_r+0x47c>
 800bef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bef8:	1e6b      	subs	r3, r5, #1
 800befa:	930c      	str	r3, [sp, #48]	; 0x30
 800befc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf00:	2b30      	cmp	r3, #48	; 0x30
 800bf02:	d0f8      	beq.n	800bef6 <_dtoa_r+0x62e>
 800bf04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bf08:	e04a      	b.n	800bfa0 <_dtoa_r+0x6d8>
 800bf0a:	bf00      	nop
 800bf0c:	0800eb78 	.word	0x0800eb78
 800bf10:	0800eb50 	.word	0x0800eb50
 800bf14:	3ff00000 	.word	0x3ff00000
 800bf18:	40240000 	.word	0x40240000
 800bf1c:	401c0000 	.word	0x401c0000
 800bf20:	40140000 	.word	0x40140000
 800bf24:	3fe00000 	.word	0x3fe00000
 800bf28:	4baf      	ldr	r3, [pc, #700]	; (800c1e8 <_dtoa_r+0x920>)
 800bf2a:	f7f4 fb65 	bl	80005f8 <__aeabi_dmul>
 800bf2e:	4606      	mov	r6, r0
 800bf30:	460f      	mov	r7, r1
 800bf32:	e7ac      	b.n	800be8e <_dtoa_r+0x5c6>
 800bf34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf38:	9d00      	ldr	r5, [sp, #0]
 800bf3a:	4642      	mov	r2, r8
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7f4 fc83 	bl	800084c <__aeabi_ddiv>
 800bf46:	f7f4 fe07 	bl	8000b58 <__aeabi_d2iz>
 800bf4a:	9002      	str	r0, [sp, #8]
 800bf4c:	f7f4 faea 	bl	8000524 <__aeabi_i2d>
 800bf50:	4642      	mov	r2, r8
 800bf52:	464b      	mov	r3, r9
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 f992 	bl	8000288 <__aeabi_dsub>
 800bf64:	9e02      	ldr	r6, [sp, #8]
 800bf66:	9f01      	ldr	r7, [sp, #4]
 800bf68:	3630      	adds	r6, #48	; 0x30
 800bf6a:	f805 6b01 	strb.w	r6, [r5], #1
 800bf6e:	9e00      	ldr	r6, [sp, #0]
 800bf70:	1bae      	subs	r6, r5, r6
 800bf72:	42b7      	cmp	r7, r6
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	d137      	bne.n	800bfea <_dtoa_r+0x722>
 800bf7a:	f7f4 f987 	bl	800028c <__adddf3>
 800bf7e:	4642      	mov	r2, r8
 800bf80:	464b      	mov	r3, r9
 800bf82:	4606      	mov	r6, r0
 800bf84:	460f      	mov	r7, r1
 800bf86:	f7f4 fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 800bf8a:	b9c8      	cbnz	r0, 800bfc0 <_dtoa_r+0x6f8>
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	464b      	mov	r3, r9
 800bf90:	4630      	mov	r0, r6
 800bf92:	4639      	mov	r1, r7
 800bf94:	f7f4 fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf98:	b110      	cbz	r0, 800bfa0 <_dtoa_r+0x6d8>
 800bf9a:	9b02      	ldr	r3, [sp, #8]
 800bf9c:	07d9      	lsls	r1, r3, #31
 800bf9e:	d40f      	bmi.n	800bfc0 <_dtoa_r+0x6f8>
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	4659      	mov	r1, fp
 800bfa4:	f001 f868 	bl	800d078 <_Bfree>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	702b      	strb	r3, [r5, #0]
 800bfac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfae:	f10a 0001 	add.w	r0, sl, #1
 800bfb2:	6018      	str	r0, [r3, #0]
 800bfb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f43f acd8 	beq.w	800b96c <_dtoa_r+0xa4>
 800bfbc:	601d      	str	r5, [r3, #0]
 800bfbe:	e4d5      	b.n	800b96c <_dtoa_r+0xa4>
 800bfc0:	f8cd a01c 	str.w	sl, [sp, #28]
 800bfc4:	462b      	mov	r3, r5
 800bfc6:	461d      	mov	r5, r3
 800bfc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfcc:	2a39      	cmp	r2, #57	; 0x39
 800bfce:	d108      	bne.n	800bfe2 <_dtoa_r+0x71a>
 800bfd0:	9a00      	ldr	r2, [sp, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d1f7      	bne.n	800bfc6 <_dtoa_r+0x6fe>
 800bfd6:	9a07      	ldr	r2, [sp, #28]
 800bfd8:	9900      	ldr	r1, [sp, #0]
 800bfda:	3201      	adds	r2, #1
 800bfdc:	9207      	str	r2, [sp, #28]
 800bfde:	2230      	movs	r2, #48	; 0x30
 800bfe0:	700a      	strb	r2, [r1, #0]
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	3201      	adds	r2, #1
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e78c      	b.n	800bf04 <_dtoa_r+0x63c>
 800bfea:	4b7f      	ldr	r3, [pc, #508]	; (800c1e8 <_dtoa_r+0x920>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	2200      	movs	r2, #0
 800bff4:	2300      	movs	r3, #0
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	f7f4 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d09b      	beq.n	800bf3a <_dtoa_r+0x672>
 800c002:	e7cd      	b.n	800bfa0 <_dtoa_r+0x6d8>
 800c004:	9a08      	ldr	r2, [sp, #32]
 800c006:	2a00      	cmp	r2, #0
 800c008:	f000 80c4 	beq.w	800c194 <_dtoa_r+0x8cc>
 800c00c:	9a05      	ldr	r2, [sp, #20]
 800c00e:	2a01      	cmp	r2, #1
 800c010:	f300 80a8 	bgt.w	800c164 <_dtoa_r+0x89c>
 800c014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c016:	2a00      	cmp	r2, #0
 800c018:	f000 80a0 	beq.w	800c15c <_dtoa_r+0x894>
 800c01c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c020:	9e06      	ldr	r6, [sp, #24]
 800c022:	4645      	mov	r5, r8
 800c024:	9a04      	ldr	r2, [sp, #16]
 800c026:	2101      	movs	r1, #1
 800c028:	441a      	add	r2, r3
 800c02a:	4620      	mov	r0, r4
 800c02c:	4498      	add	r8, r3
 800c02e:	9204      	str	r2, [sp, #16]
 800c030:	f001 f928 	bl	800d284 <__i2b>
 800c034:	4607      	mov	r7, r0
 800c036:	2d00      	cmp	r5, #0
 800c038:	dd0b      	ble.n	800c052 <_dtoa_r+0x78a>
 800c03a:	9b04      	ldr	r3, [sp, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dd08      	ble.n	800c052 <_dtoa_r+0x78a>
 800c040:	42ab      	cmp	r3, r5
 800c042:	9a04      	ldr	r2, [sp, #16]
 800c044:	bfa8      	it	ge
 800c046:	462b      	movge	r3, r5
 800c048:	eba8 0803 	sub.w	r8, r8, r3
 800c04c:	1aed      	subs	r5, r5, r3
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	9b06      	ldr	r3, [sp, #24]
 800c054:	b1fb      	cbz	r3, 800c096 <_dtoa_r+0x7ce>
 800c056:	9b08      	ldr	r3, [sp, #32]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 809f 	beq.w	800c19c <_dtoa_r+0x8d4>
 800c05e:	2e00      	cmp	r6, #0
 800c060:	dd11      	ble.n	800c086 <_dtoa_r+0x7be>
 800c062:	4639      	mov	r1, r7
 800c064:	4632      	mov	r2, r6
 800c066:	4620      	mov	r0, r4
 800c068:	f001 f9c8 	bl	800d3fc <__pow5mult>
 800c06c:	465a      	mov	r2, fp
 800c06e:	4601      	mov	r1, r0
 800c070:	4607      	mov	r7, r0
 800c072:	4620      	mov	r0, r4
 800c074:	f001 f91c 	bl	800d2b0 <__multiply>
 800c078:	4659      	mov	r1, fp
 800c07a:	9007      	str	r0, [sp, #28]
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fffb 	bl	800d078 <_Bfree>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	469b      	mov	fp, r3
 800c086:	9b06      	ldr	r3, [sp, #24]
 800c088:	1b9a      	subs	r2, r3, r6
 800c08a:	d004      	beq.n	800c096 <_dtoa_r+0x7ce>
 800c08c:	4659      	mov	r1, fp
 800c08e:	4620      	mov	r0, r4
 800c090:	f001 f9b4 	bl	800d3fc <__pow5mult>
 800c094:	4683      	mov	fp, r0
 800c096:	2101      	movs	r1, #1
 800c098:	4620      	mov	r0, r4
 800c09a:	f001 f8f3 	bl	800d284 <__i2b>
 800c09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	dd7c      	ble.n	800c1a0 <_dtoa_r+0x8d8>
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	4601      	mov	r1, r0
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f001 f9a6 	bl	800d3fc <__pow5mult>
 800c0b0:	9b05      	ldr	r3, [sp, #20]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	dd76      	ble.n	800c1a6 <_dtoa_r+0x8de>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9306      	str	r3, [sp, #24]
 800c0bc:	6933      	ldr	r3, [r6, #16]
 800c0be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0c2:	6918      	ldr	r0, [r3, #16]
 800c0c4:	f001 f88e 	bl	800d1e4 <__hi0bits>
 800c0c8:	f1c0 0020 	rsb	r0, r0, #32
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	4418      	add	r0, r3
 800c0d0:	f010 001f 	ands.w	r0, r0, #31
 800c0d4:	f000 8086 	beq.w	800c1e4 <_dtoa_r+0x91c>
 800c0d8:	f1c0 0320 	rsb	r3, r0, #32
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	dd7f      	ble.n	800c1e0 <_dtoa_r+0x918>
 800c0e0:	f1c0 001c 	rsb	r0, r0, #28
 800c0e4:	9b04      	ldr	r3, [sp, #16]
 800c0e6:	4403      	add	r3, r0
 800c0e8:	4480      	add	r8, r0
 800c0ea:	4405      	add	r5, r0
 800c0ec:	9304      	str	r3, [sp, #16]
 800c0ee:	f1b8 0f00 	cmp.w	r8, #0
 800c0f2:	dd05      	ble.n	800c100 <_dtoa_r+0x838>
 800c0f4:	4659      	mov	r1, fp
 800c0f6:	4642      	mov	r2, r8
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f001 f9d9 	bl	800d4b0 <__lshift>
 800c0fe:	4683      	mov	fp, r0
 800c100:	9b04      	ldr	r3, [sp, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dd05      	ble.n	800c112 <_dtoa_r+0x84a>
 800c106:	4631      	mov	r1, r6
 800c108:	461a      	mov	r2, r3
 800c10a:	4620      	mov	r0, r4
 800c10c:	f001 f9d0 	bl	800d4b0 <__lshift>
 800c110:	4606      	mov	r6, r0
 800c112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c114:	2b00      	cmp	r3, #0
 800c116:	d069      	beq.n	800c1ec <_dtoa_r+0x924>
 800c118:	4631      	mov	r1, r6
 800c11a:	4658      	mov	r0, fp
 800c11c:	f001 fa34 	bl	800d588 <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	da63      	bge.n	800c1ec <_dtoa_r+0x924>
 800c124:	2300      	movs	r3, #0
 800c126:	4659      	mov	r1, fp
 800c128:	220a      	movs	r2, #10
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 ffc6 	bl	800d0bc <__multadd>
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c136:	4683      	mov	fp, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 818f 	beq.w	800c45c <_dtoa_r+0xb94>
 800c13e:	4639      	mov	r1, r7
 800c140:	2300      	movs	r3, #0
 800c142:	220a      	movs	r2, #10
 800c144:	4620      	mov	r0, r4
 800c146:	f000 ffb9 	bl	800d0bc <__multadd>
 800c14a:	f1b9 0f00 	cmp.w	r9, #0
 800c14e:	4607      	mov	r7, r0
 800c150:	f300 808e 	bgt.w	800c270 <_dtoa_r+0x9a8>
 800c154:	9b05      	ldr	r3, [sp, #20]
 800c156:	2b02      	cmp	r3, #2
 800c158:	dc50      	bgt.n	800c1fc <_dtoa_r+0x934>
 800c15a:	e089      	b.n	800c270 <_dtoa_r+0x9a8>
 800c15c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c15e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c162:	e75d      	b.n	800c020 <_dtoa_r+0x758>
 800c164:	9b01      	ldr	r3, [sp, #4]
 800c166:	1e5e      	subs	r6, r3, #1
 800c168:	9b06      	ldr	r3, [sp, #24]
 800c16a:	42b3      	cmp	r3, r6
 800c16c:	bfbf      	itttt	lt
 800c16e:	9b06      	ldrlt	r3, [sp, #24]
 800c170:	9606      	strlt	r6, [sp, #24]
 800c172:	1af2      	sublt	r2, r6, r3
 800c174:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c176:	bfb6      	itet	lt
 800c178:	189b      	addlt	r3, r3, r2
 800c17a:	1b9e      	subge	r6, r3, r6
 800c17c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	bfb8      	it	lt
 800c182:	2600      	movlt	r6, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	bfb5      	itete	lt
 800c188:	eba8 0503 	sublt.w	r5, r8, r3
 800c18c:	9b01      	ldrge	r3, [sp, #4]
 800c18e:	2300      	movlt	r3, #0
 800c190:	4645      	movge	r5, r8
 800c192:	e747      	b.n	800c024 <_dtoa_r+0x75c>
 800c194:	9e06      	ldr	r6, [sp, #24]
 800c196:	9f08      	ldr	r7, [sp, #32]
 800c198:	4645      	mov	r5, r8
 800c19a:	e74c      	b.n	800c036 <_dtoa_r+0x76e>
 800c19c:	9a06      	ldr	r2, [sp, #24]
 800c19e:	e775      	b.n	800c08c <_dtoa_r+0x7c4>
 800c1a0:	9b05      	ldr	r3, [sp, #20]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	dc18      	bgt.n	800c1d8 <_dtoa_r+0x910>
 800c1a6:	9b02      	ldr	r3, [sp, #8]
 800c1a8:	b9b3      	cbnz	r3, 800c1d8 <_dtoa_r+0x910>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b0:	b9a3      	cbnz	r3, 800c1dc <_dtoa_r+0x914>
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1b8:	0d1b      	lsrs	r3, r3, #20
 800c1ba:	051b      	lsls	r3, r3, #20
 800c1bc:	b12b      	cbz	r3, 800c1ca <_dtoa_r+0x902>
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	f108 0801 	add.w	r8, r8, #1
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	9306      	str	r3, [sp, #24]
 800c1cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f47f af74 	bne.w	800c0bc <_dtoa_r+0x7f4>
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	e779      	b.n	800c0cc <_dtoa_r+0x804>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	e7f6      	b.n	800c1ca <_dtoa_r+0x902>
 800c1dc:	9b02      	ldr	r3, [sp, #8]
 800c1de:	e7f4      	b.n	800c1ca <_dtoa_r+0x902>
 800c1e0:	d085      	beq.n	800c0ee <_dtoa_r+0x826>
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	301c      	adds	r0, #28
 800c1e6:	e77d      	b.n	800c0e4 <_dtoa_r+0x81c>
 800c1e8:	40240000 	.word	0x40240000
 800c1ec:	9b01      	ldr	r3, [sp, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	dc38      	bgt.n	800c264 <_dtoa_r+0x99c>
 800c1f2:	9b05      	ldr	r3, [sp, #20]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	dd35      	ble.n	800c264 <_dtoa_r+0x99c>
 800c1f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c1fc:	f1b9 0f00 	cmp.w	r9, #0
 800c200:	d10d      	bne.n	800c21e <_dtoa_r+0x956>
 800c202:	4631      	mov	r1, r6
 800c204:	464b      	mov	r3, r9
 800c206:	2205      	movs	r2, #5
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 ff57 	bl	800d0bc <__multadd>
 800c20e:	4601      	mov	r1, r0
 800c210:	4606      	mov	r6, r0
 800c212:	4658      	mov	r0, fp
 800c214:	f001 f9b8 	bl	800d588 <__mcmp>
 800c218:	2800      	cmp	r0, #0
 800c21a:	f73f adbd 	bgt.w	800bd98 <_dtoa_r+0x4d0>
 800c21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c220:	9d00      	ldr	r5, [sp, #0]
 800c222:	ea6f 0a03 	mvn.w	sl, r3
 800c226:	f04f 0800 	mov.w	r8, #0
 800c22a:	4631      	mov	r1, r6
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 ff23 	bl	800d078 <_Bfree>
 800c232:	2f00      	cmp	r7, #0
 800c234:	f43f aeb4 	beq.w	800bfa0 <_dtoa_r+0x6d8>
 800c238:	f1b8 0f00 	cmp.w	r8, #0
 800c23c:	d005      	beq.n	800c24a <_dtoa_r+0x982>
 800c23e:	45b8      	cmp	r8, r7
 800c240:	d003      	beq.n	800c24a <_dtoa_r+0x982>
 800c242:	4641      	mov	r1, r8
 800c244:	4620      	mov	r0, r4
 800c246:	f000 ff17 	bl	800d078 <_Bfree>
 800c24a:	4639      	mov	r1, r7
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 ff13 	bl	800d078 <_Bfree>
 800c252:	e6a5      	b.n	800bfa0 <_dtoa_r+0x6d8>
 800c254:	2600      	movs	r6, #0
 800c256:	4637      	mov	r7, r6
 800c258:	e7e1      	b.n	800c21e <_dtoa_r+0x956>
 800c25a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c25c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c260:	4637      	mov	r7, r6
 800c262:	e599      	b.n	800bd98 <_dtoa_r+0x4d0>
 800c264:	9b08      	ldr	r3, [sp, #32]
 800c266:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f000 80fd 	beq.w	800c46a <_dtoa_r+0xba2>
 800c270:	2d00      	cmp	r5, #0
 800c272:	dd05      	ble.n	800c280 <_dtoa_r+0x9b8>
 800c274:	4639      	mov	r1, r7
 800c276:	462a      	mov	r2, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	f001 f919 	bl	800d4b0 <__lshift>
 800c27e:	4607      	mov	r7, r0
 800c280:	9b06      	ldr	r3, [sp, #24]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d05c      	beq.n	800c340 <_dtoa_r+0xa78>
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	4620      	mov	r0, r4
 800c28a:	f000 feb5 	bl	800cff8 <_Balloc>
 800c28e:	4605      	mov	r5, r0
 800c290:	b928      	cbnz	r0, 800c29e <_dtoa_r+0x9d6>
 800c292:	4b80      	ldr	r3, [pc, #512]	; (800c494 <_dtoa_r+0xbcc>)
 800c294:	4602      	mov	r2, r0
 800c296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c29a:	f7ff bb2e 	b.w	800b8fa <_dtoa_r+0x32>
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	3202      	adds	r2, #2
 800c2a2:	0092      	lsls	r2, r2, #2
 800c2a4:	f107 010c 	add.w	r1, r7, #12
 800c2a8:	300c      	adds	r0, #12
 800c2aa:	f7fd fbc7 	bl	8009a3c <memcpy>
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f001 f8fc 	bl	800d4b0 <__lshift>
 800c2b8:	9b00      	ldr	r3, [sp, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	9301      	str	r3, [sp, #4]
 800c2be:	9b00      	ldr	r3, [sp, #0]
 800c2c0:	444b      	add	r3, r9
 800c2c2:	9307      	str	r3, [sp, #28]
 800c2c4:	9b02      	ldr	r3, [sp, #8]
 800c2c6:	f003 0301 	and.w	r3, r3, #1
 800c2ca:	46b8      	mov	r8, r7
 800c2cc:	9306      	str	r3, [sp, #24]
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	9b01      	ldr	r3, [sp, #4]
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	9302      	str	r3, [sp, #8]
 800c2da:	f7ff fa67 	bl	800b7ac <quorem>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	3330      	adds	r3, #48	; 0x30
 800c2e2:	9004      	str	r0, [sp, #16]
 800c2e4:	4641      	mov	r1, r8
 800c2e6:	4658      	mov	r0, fp
 800c2e8:	9308      	str	r3, [sp, #32]
 800c2ea:	f001 f94d 	bl	800d588 <__mcmp>
 800c2ee:	463a      	mov	r2, r7
 800c2f0:	4681      	mov	r9, r0
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f001 f963 	bl	800d5c0 <__mdiff>
 800c2fa:	68c2      	ldr	r2, [r0, #12]
 800c2fc:	9b08      	ldr	r3, [sp, #32]
 800c2fe:	4605      	mov	r5, r0
 800c300:	bb02      	cbnz	r2, 800c344 <_dtoa_r+0xa7c>
 800c302:	4601      	mov	r1, r0
 800c304:	4658      	mov	r0, fp
 800c306:	f001 f93f 	bl	800d588 <__mcmp>
 800c30a:	9b08      	ldr	r3, [sp, #32]
 800c30c:	4602      	mov	r2, r0
 800c30e:	4629      	mov	r1, r5
 800c310:	4620      	mov	r0, r4
 800c312:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c316:	f000 feaf 	bl	800d078 <_Bfree>
 800c31a:	9b05      	ldr	r3, [sp, #20]
 800c31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c31e:	9d01      	ldr	r5, [sp, #4]
 800c320:	ea43 0102 	orr.w	r1, r3, r2
 800c324:	9b06      	ldr	r3, [sp, #24]
 800c326:	430b      	orrs	r3, r1
 800c328:	9b08      	ldr	r3, [sp, #32]
 800c32a:	d10d      	bne.n	800c348 <_dtoa_r+0xa80>
 800c32c:	2b39      	cmp	r3, #57	; 0x39
 800c32e:	d029      	beq.n	800c384 <_dtoa_r+0xabc>
 800c330:	f1b9 0f00 	cmp.w	r9, #0
 800c334:	dd01      	ble.n	800c33a <_dtoa_r+0xa72>
 800c336:	9b04      	ldr	r3, [sp, #16]
 800c338:	3331      	adds	r3, #49	; 0x31
 800c33a:	9a02      	ldr	r2, [sp, #8]
 800c33c:	7013      	strb	r3, [r2, #0]
 800c33e:	e774      	b.n	800c22a <_dtoa_r+0x962>
 800c340:	4638      	mov	r0, r7
 800c342:	e7b9      	b.n	800c2b8 <_dtoa_r+0x9f0>
 800c344:	2201      	movs	r2, #1
 800c346:	e7e2      	b.n	800c30e <_dtoa_r+0xa46>
 800c348:	f1b9 0f00 	cmp.w	r9, #0
 800c34c:	db06      	blt.n	800c35c <_dtoa_r+0xa94>
 800c34e:	9905      	ldr	r1, [sp, #20]
 800c350:	ea41 0909 	orr.w	r9, r1, r9
 800c354:	9906      	ldr	r1, [sp, #24]
 800c356:	ea59 0101 	orrs.w	r1, r9, r1
 800c35a:	d120      	bne.n	800c39e <_dtoa_r+0xad6>
 800c35c:	2a00      	cmp	r2, #0
 800c35e:	ddec      	ble.n	800c33a <_dtoa_r+0xa72>
 800c360:	4659      	mov	r1, fp
 800c362:	2201      	movs	r2, #1
 800c364:	4620      	mov	r0, r4
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	f001 f8a2 	bl	800d4b0 <__lshift>
 800c36c:	4631      	mov	r1, r6
 800c36e:	4683      	mov	fp, r0
 800c370:	f001 f90a 	bl	800d588 <__mcmp>
 800c374:	2800      	cmp	r0, #0
 800c376:	9b01      	ldr	r3, [sp, #4]
 800c378:	dc02      	bgt.n	800c380 <_dtoa_r+0xab8>
 800c37a:	d1de      	bne.n	800c33a <_dtoa_r+0xa72>
 800c37c:	07da      	lsls	r2, r3, #31
 800c37e:	d5dc      	bpl.n	800c33a <_dtoa_r+0xa72>
 800c380:	2b39      	cmp	r3, #57	; 0x39
 800c382:	d1d8      	bne.n	800c336 <_dtoa_r+0xa6e>
 800c384:	9a02      	ldr	r2, [sp, #8]
 800c386:	2339      	movs	r3, #57	; 0x39
 800c388:	7013      	strb	r3, [r2, #0]
 800c38a:	462b      	mov	r3, r5
 800c38c:	461d      	mov	r5, r3
 800c38e:	3b01      	subs	r3, #1
 800c390:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c394:	2a39      	cmp	r2, #57	; 0x39
 800c396:	d050      	beq.n	800c43a <_dtoa_r+0xb72>
 800c398:	3201      	adds	r2, #1
 800c39a:	701a      	strb	r2, [r3, #0]
 800c39c:	e745      	b.n	800c22a <_dtoa_r+0x962>
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	dd03      	ble.n	800c3aa <_dtoa_r+0xae2>
 800c3a2:	2b39      	cmp	r3, #57	; 0x39
 800c3a4:	d0ee      	beq.n	800c384 <_dtoa_r+0xabc>
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	e7c7      	b.n	800c33a <_dtoa_r+0xa72>
 800c3aa:	9a01      	ldr	r2, [sp, #4]
 800c3ac:	9907      	ldr	r1, [sp, #28]
 800c3ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c3b2:	428a      	cmp	r2, r1
 800c3b4:	d02a      	beq.n	800c40c <_dtoa_r+0xb44>
 800c3b6:	4659      	mov	r1, fp
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	220a      	movs	r2, #10
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 fe7d 	bl	800d0bc <__multadd>
 800c3c2:	45b8      	cmp	r8, r7
 800c3c4:	4683      	mov	fp, r0
 800c3c6:	f04f 0300 	mov.w	r3, #0
 800c3ca:	f04f 020a 	mov.w	r2, #10
 800c3ce:	4641      	mov	r1, r8
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	d107      	bne.n	800c3e4 <_dtoa_r+0xb1c>
 800c3d4:	f000 fe72 	bl	800d0bc <__multadd>
 800c3d8:	4680      	mov	r8, r0
 800c3da:	4607      	mov	r7, r0
 800c3dc:	9b01      	ldr	r3, [sp, #4]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	e775      	b.n	800c2d0 <_dtoa_r+0xa08>
 800c3e4:	f000 fe6a 	bl	800d0bc <__multadd>
 800c3e8:	4639      	mov	r1, r7
 800c3ea:	4680      	mov	r8, r0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	220a      	movs	r2, #10
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 fe63 	bl	800d0bc <__multadd>
 800c3f6:	4607      	mov	r7, r0
 800c3f8:	e7f0      	b.n	800c3dc <_dtoa_r+0xb14>
 800c3fa:	f1b9 0f00 	cmp.w	r9, #0
 800c3fe:	9a00      	ldr	r2, [sp, #0]
 800c400:	bfcc      	ite	gt
 800c402:	464d      	movgt	r5, r9
 800c404:	2501      	movle	r5, #1
 800c406:	4415      	add	r5, r2
 800c408:	f04f 0800 	mov.w	r8, #0
 800c40c:	4659      	mov	r1, fp
 800c40e:	2201      	movs	r2, #1
 800c410:	4620      	mov	r0, r4
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	f001 f84c 	bl	800d4b0 <__lshift>
 800c418:	4631      	mov	r1, r6
 800c41a:	4683      	mov	fp, r0
 800c41c:	f001 f8b4 	bl	800d588 <__mcmp>
 800c420:	2800      	cmp	r0, #0
 800c422:	dcb2      	bgt.n	800c38a <_dtoa_r+0xac2>
 800c424:	d102      	bne.n	800c42c <_dtoa_r+0xb64>
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	07db      	lsls	r3, r3, #31
 800c42a:	d4ae      	bmi.n	800c38a <_dtoa_r+0xac2>
 800c42c:	462b      	mov	r3, r5
 800c42e:	461d      	mov	r5, r3
 800c430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c434:	2a30      	cmp	r2, #48	; 0x30
 800c436:	d0fa      	beq.n	800c42e <_dtoa_r+0xb66>
 800c438:	e6f7      	b.n	800c22a <_dtoa_r+0x962>
 800c43a:	9a00      	ldr	r2, [sp, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d1a5      	bne.n	800c38c <_dtoa_r+0xac4>
 800c440:	f10a 0a01 	add.w	sl, sl, #1
 800c444:	2331      	movs	r3, #49	; 0x31
 800c446:	e779      	b.n	800c33c <_dtoa_r+0xa74>
 800c448:	4b13      	ldr	r3, [pc, #76]	; (800c498 <_dtoa_r+0xbd0>)
 800c44a:	f7ff baaf 	b.w	800b9ac <_dtoa_r+0xe4>
 800c44e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c450:	2b00      	cmp	r3, #0
 800c452:	f47f aa86 	bne.w	800b962 <_dtoa_r+0x9a>
 800c456:	4b11      	ldr	r3, [pc, #68]	; (800c49c <_dtoa_r+0xbd4>)
 800c458:	f7ff baa8 	b.w	800b9ac <_dtoa_r+0xe4>
 800c45c:	f1b9 0f00 	cmp.w	r9, #0
 800c460:	dc03      	bgt.n	800c46a <_dtoa_r+0xba2>
 800c462:	9b05      	ldr	r3, [sp, #20]
 800c464:	2b02      	cmp	r3, #2
 800c466:	f73f aec9 	bgt.w	800c1fc <_dtoa_r+0x934>
 800c46a:	9d00      	ldr	r5, [sp, #0]
 800c46c:	4631      	mov	r1, r6
 800c46e:	4658      	mov	r0, fp
 800c470:	f7ff f99c 	bl	800b7ac <quorem>
 800c474:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c478:	f805 3b01 	strb.w	r3, [r5], #1
 800c47c:	9a00      	ldr	r2, [sp, #0]
 800c47e:	1aaa      	subs	r2, r5, r2
 800c480:	4591      	cmp	r9, r2
 800c482:	ddba      	ble.n	800c3fa <_dtoa_r+0xb32>
 800c484:	4659      	mov	r1, fp
 800c486:	2300      	movs	r3, #0
 800c488:	220a      	movs	r2, #10
 800c48a:	4620      	mov	r0, r4
 800c48c:	f000 fe16 	bl	800d0bc <__multadd>
 800c490:	4683      	mov	fp, r0
 800c492:	e7eb      	b.n	800c46c <_dtoa_r+0xba4>
 800c494:	0800e9fc 	.word	0x0800e9fc
 800c498:	0800e7f8 	.word	0x0800e7f8
 800c49c:	0800e979 	.word	0x0800e979

0800c4a0 <__sflush_r>:
 800c4a0:	898a      	ldrh	r2, [r1, #12]
 800c4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	0710      	lsls	r0, r2, #28
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	d458      	bmi.n	800c560 <__sflush_r+0xc0>
 800c4ae:	684b      	ldr	r3, [r1, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	dc05      	bgt.n	800c4c0 <__sflush_r+0x20>
 800c4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	dc02      	bgt.n	800c4c0 <__sflush_r+0x20>
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4c2:	2e00      	cmp	r6, #0
 800c4c4:	d0f9      	beq.n	800c4ba <__sflush_r+0x1a>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4cc:	682f      	ldr	r7, [r5, #0]
 800c4ce:	602b      	str	r3, [r5, #0]
 800c4d0:	d032      	beq.n	800c538 <__sflush_r+0x98>
 800c4d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	075a      	lsls	r2, r3, #29
 800c4d8:	d505      	bpl.n	800c4e6 <__sflush_r+0x46>
 800c4da:	6863      	ldr	r3, [r4, #4]
 800c4dc:	1ac0      	subs	r0, r0, r3
 800c4de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4e0:	b10b      	cbz	r3, 800c4e6 <__sflush_r+0x46>
 800c4e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4e4:	1ac0      	subs	r0, r0, r3
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4ec:	6a21      	ldr	r1, [r4, #32]
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	47b0      	blx	r6
 800c4f2:	1c43      	adds	r3, r0, #1
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	d106      	bne.n	800c506 <__sflush_r+0x66>
 800c4f8:	6829      	ldr	r1, [r5, #0]
 800c4fa:	291d      	cmp	r1, #29
 800c4fc:	d82c      	bhi.n	800c558 <__sflush_r+0xb8>
 800c4fe:	4a2a      	ldr	r2, [pc, #168]	; (800c5a8 <__sflush_r+0x108>)
 800c500:	40ca      	lsrs	r2, r1
 800c502:	07d6      	lsls	r6, r2, #31
 800c504:	d528      	bpl.n	800c558 <__sflush_r+0xb8>
 800c506:	2200      	movs	r2, #0
 800c508:	6062      	str	r2, [r4, #4]
 800c50a:	04d9      	lsls	r1, r3, #19
 800c50c:	6922      	ldr	r2, [r4, #16]
 800c50e:	6022      	str	r2, [r4, #0]
 800c510:	d504      	bpl.n	800c51c <__sflush_r+0x7c>
 800c512:	1c42      	adds	r2, r0, #1
 800c514:	d101      	bne.n	800c51a <__sflush_r+0x7a>
 800c516:	682b      	ldr	r3, [r5, #0]
 800c518:	b903      	cbnz	r3, 800c51c <__sflush_r+0x7c>
 800c51a:	6560      	str	r0, [r4, #84]	; 0x54
 800c51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c51e:	602f      	str	r7, [r5, #0]
 800c520:	2900      	cmp	r1, #0
 800c522:	d0ca      	beq.n	800c4ba <__sflush_r+0x1a>
 800c524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c528:	4299      	cmp	r1, r3
 800c52a:	d002      	beq.n	800c532 <__sflush_r+0x92>
 800c52c:	4628      	mov	r0, r5
 800c52e:	f001 fa2d 	bl	800d98c <_free_r>
 800c532:	2000      	movs	r0, #0
 800c534:	6360      	str	r0, [r4, #52]	; 0x34
 800c536:	e7c1      	b.n	800c4bc <__sflush_r+0x1c>
 800c538:	6a21      	ldr	r1, [r4, #32]
 800c53a:	2301      	movs	r3, #1
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b0      	blx	r6
 800c540:	1c41      	adds	r1, r0, #1
 800c542:	d1c7      	bne.n	800c4d4 <__sflush_r+0x34>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0c4      	beq.n	800c4d4 <__sflush_r+0x34>
 800c54a:	2b1d      	cmp	r3, #29
 800c54c:	d001      	beq.n	800c552 <__sflush_r+0xb2>
 800c54e:	2b16      	cmp	r3, #22
 800c550:	d101      	bne.n	800c556 <__sflush_r+0xb6>
 800c552:	602f      	str	r7, [r5, #0]
 800c554:	e7b1      	b.n	800c4ba <__sflush_r+0x1a>
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	e7ad      	b.n	800c4bc <__sflush_r+0x1c>
 800c560:	690f      	ldr	r7, [r1, #16]
 800c562:	2f00      	cmp	r7, #0
 800c564:	d0a9      	beq.n	800c4ba <__sflush_r+0x1a>
 800c566:	0793      	lsls	r3, r2, #30
 800c568:	680e      	ldr	r6, [r1, #0]
 800c56a:	bf08      	it	eq
 800c56c:	694b      	ldreq	r3, [r1, #20]
 800c56e:	600f      	str	r7, [r1, #0]
 800c570:	bf18      	it	ne
 800c572:	2300      	movne	r3, #0
 800c574:	eba6 0807 	sub.w	r8, r6, r7
 800c578:	608b      	str	r3, [r1, #8]
 800c57a:	f1b8 0f00 	cmp.w	r8, #0
 800c57e:	dd9c      	ble.n	800c4ba <__sflush_r+0x1a>
 800c580:	6a21      	ldr	r1, [r4, #32]
 800c582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c584:	4643      	mov	r3, r8
 800c586:	463a      	mov	r2, r7
 800c588:	4628      	mov	r0, r5
 800c58a:	47b0      	blx	r6
 800c58c:	2800      	cmp	r0, #0
 800c58e:	dc06      	bgt.n	800c59e <__sflush_r+0xfe>
 800c590:	89a3      	ldrh	r3, [r4, #12]
 800c592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	f04f 30ff 	mov.w	r0, #4294967295
 800c59c:	e78e      	b.n	800c4bc <__sflush_r+0x1c>
 800c59e:	4407      	add	r7, r0
 800c5a0:	eba8 0800 	sub.w	r8, r8, r0
 800c5a4:	e7e9      	b.n	800c57a <__sflush_r+0xda>
 800c5a6:	bf00      	nop
 800c5a8:	20400001 	.word	0x20400001

0800c5ac <_fflush_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	690b      	ldr	r3, [r1, #16]
 800c5b0:	4605      	mov	r5, r0
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	b913      	cbnz	r3, 800c5bc <_fflush_r+0x10>
 800c5b6:	2500      	movs	r5, #0
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	b118      	cbz	r0, 800c5c6 <_fflush_r+0x1a>
 800c5be:	6983      	ldr	r3, [r0, #24]
 800c5c0:	b90b      	cbnz	r3, 800c5c6 <_fflush_r+0x1a>
 800c5c2:	f000 f887 	bl	800c6d4 <__sinit>
 800c5c6:	4b14      	ldr	r3, [pc, #80]	; (800c618 <_fflush_r+0x6c>)
 800c5c8:	429c      	cmp	r4, r3
 800c5ca:	d11b      	bne.n	800c604 <_fflush_r+0x58>
 800c5cc:	686c      	ldr	r4, [r5, #4]
 800c5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0ef      	beq.n	800c5b6 <_fflush_r+0xa>
 800c5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5d8:	07d0      	lsls	r0, r2, #31
 800c5da:	d404      	bmi.n	800c5e6 <_fflush_r+0x3a>
 800c5dc:	0599      	lsls	r1, r3, #22
 800c5de:	d402      	bmi.n	800c5e6 <_fflush_r+0x3a>
 800c5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5e2:	f000 fc88 	bl	800cef6 <__retarget_lock_acquire_recursive>
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	f7ff ff59 	bl	800c4a0 <__sflush_r>
 800c5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5f0:	07da      	lsls	r2, r3, #31
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	d4e0      	bmi.n	800c5b8 <_fflush_r+0xc>
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	059b      	lsls	r3, r3, #22
 800c5fa:	d4dd      	bmi.n	800c5b8 <_fflush_r+0xc>
 800c5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5fe:	f000 fc7b 	bl	800cef8 <__retarget_lock_release_recursive>
 800c602:	e7d9      	b.n	800c5b8 <_fflush_r+0xc>
 800c604:	4b05      	ldr	r3, [pc, #20]	; (800c61c <_fflush_r+0x70>)
 800c606:	429c      	cmp	r4, r3
 800c608:	d101      	bne.n	800c60e <_fflush_r+0x62>
 800c60a:	68ac      	ldr	r4, [r5, #8]
 800c60c:	e7df      	b.n	800c5ce <_fflush_r+0x22>
 800c60e:	4b04      	ldr	r3, [pc, #16]	; (800c620 <_fflush_r+0x74>)
 800c610:	429c      	cmp	r4, r3
 800c612:	bf08      	it	eq
 800c614:	68ec      	ldreq	r4, [r5, #12]
 800c616:	e7da      	b.n	800c5ce <_fflush_r+0x22>
 800c618:	0800ea30 	.word	0x0800ea30
 800c61c:	0800ea50 	.word	0x0800ea50
 800c620:	0800ea10 	.word	0x0800ea10

0800c624 <std>:
 800c624:	2300      	movs	r3, #0
 800c626:	b510      	push	{r4, lr}
 800c628:	4604      	mov	r4, r0
 800c62a:	e9c0 3300 	strd	r3, r3, [r0]
 800c62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c632:	6083      	str	r3, [r0, #8]
 800c634:	8181      	strh	r1, [r0, #12]
 800c636:	6643      	str	r3, [r0, #100]	; 0x64
 800c638:	81c2      	strh	r2, [r0, #14]
 800c63a:	6183      	str	r3, [r0, #24]
 800c63c:	4619      	mov	r1, r3
 800c63e:	2208      	movs	r2, #8
 800c640:	305c      	adds	r0, #92	; 0x5c
 800c642:	f7fd fa09 	bl	8009a58 <memset>
 800c646:	4b05      	ldr	r3, [pc, #20]	; (800c65c <std+0x38>)
 800c648:	6263      	str	r3, [r4, #36]	; 0x24
 800c64a:	4b05      	ldr	r3, [pc, #20]	; (800c660 <std+0x3c>)
 800c64c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c64e:	4b05      	ldr	r3, [pc, #20]	; (800c664 <std+0x40>)
 800c650:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c652:	4b05      	ldr	r3, [pc, #20]	; (800c668 <std+0x44>)
 800c654:	6224      	str	r4, [r4, #32]
 800c656:	6323      	str	r3, [r4, #48]	; 0x30
 800c658:	bd10      	pop	{r4, pc}
 800c65a:	bf00      	nop
 800c65c:	0800e081 	.word	0x0800e081
 800c660:	0800e0a3 	.word	0x0800e0a3
 800c664:	0800e0db 	.word	0x0800e0db
 800c668:	0800e0ff 	.word	0x0800e0ff

0800c66c <_cleanup_r>:
 800c66c:	4901      	ldr	r1, [pc, #4]	; (800c674 <_cleanup_r+0x8>)
 800c66e:	f000 b8af 	b.w	800c7d0 <_fwalk_reent>
 800c672:	bf00      	nop
 800c674:	0800c5ad 	.word	0x0800c5ad

0800c678 <__sfmoreglue>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	1e4a      	subs	r2, r1, #1
 800c67c:	2568      	movs	r5, #104	; 0x68
 800c67e:	4355      	muls	r5, r2
 800c680:	460e      	mov	r6, r1
 800c682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c686:	f001 f9d1 	bl	800da2c <_malloc_r>
 800c68a:	4604      	mov	r4, r0
 800c68c:	b140      	cbz	r0, 800c6a0 <__sfmoreglue+0x28>
 800c68e:	2100      	movs	r1, #0
 800c690:	e9c0 1600 	strd	r1, r6, [r0]
 800c694:	300c      	adds	r0, #12
 800c696:	60a0      	str	r0, [r4, #8]
 800c698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c69c:	f7fd f9dc 	bl	8009a58 <memset>
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}

0800c6a4 <__sfp_lock_acquire>:
 800c6a4:	4801      	ldr	r0, [pc, #4]	; (800c6ac <__sfp_lock_acquire+0x8>)
 800c6a6:	f000 bc26 	b.w	800cef6 <__retarget_lock_acquire_recursive>
 800c6aa:	bf00      	nop
 800c6ac:	2000c49c 	.word	0x2000c49c

0800c6b0 <__sfp_lock_release>:
 800c6b0:	4801      	ldr	r0, [pc, #4]	; (800c6b8 <__sfp_lock_release+0x8>)
 800c6b2:	f000 bc21 	b.w	800cef8 <__retarget_lock_release_recursive>
 800c6b6:	bf00      	nop
 800c6b8:	2000c49c 	.word	0x2000c49c

0800c6bc <__sinit_lock_acquire>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	; (800c6c4 <__sinit_lock_acquire+0x8>)
 800c6be:	f000 bc1a 	b.w	800cef6 <__retarget_lock_acquire_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	2000c497 	.word	0x2000c497

0800c6c8 <__sinit_lock_release>:
 800c6c8:	4801      	ldr	r0, [pc, #4]	; (800c6d0 <__sinit_lock_release+0x8>)
 800c6ca:	f000 bc15 	b.w	800cef8 <__retarget_lock_release_recursive>
 800c6ce:	bf00      	nop
 800c6d0:	2000c497 	.word	0x2000c497

0800c6d4 <__sinit>:
 800c6d4:	b510      	push	{r4, lr}
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	f7ff fff0 	bl	800c6bc <__sinit_lock_acquire>
 800c6dc:	69a3      	ldr	r3, [r4, #24]
 800c6de:	b11b      	cbz	r3, 800c6e8 <__sinit+0x14>
 800c6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6e4:	f7ff bff0 	b.w	800c6c8 <__sinit_lock_release>
 800c6e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c6ec:	6523      	str	r3, [r4, #80]	; 0x50
 800c6ee:	4b13      	ldr	r3, [pc, #76]	; (800c73c <__sinit+0x68>)
 800c6f0:	4a13      	ldr	r2, [pc, #76]	; (800c740 <__sinit+0x6c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6f6:	42a3      	cmp	r3, r4
 800c6f8:	bf04      	itt	eq
 800c6fa:	2301      	moveq	r3, #1
 800c6fc:	61a3      	streq	r3, [r4, #24]
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 f820 	bl	800c744 <__sfp>
 800c704:	6060      	str	r0, [r4, #4]
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f81c 	bl	800c744 <__sfp>
 800c70c:	60a0      	str	r0, [r4, #8]
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 f818 	bl	800c744 <__sfp>
 800c714:	2200      	movs	r2, #0
 800c716:	60e0      	str	r0, [r4, #12]
 800c718:	2104      	movs	r1, #4
 800c71a:	6860      	ldr	r0, [r4, #4]
 800c71c:	f7ff ff82 	bl	800c624 <std>
 800c720:	68a0      	ldr	r0, [r4, #8]
 800c722:	2201      	movs	r2, #1
 800c724:	2109      	movs	r1, #9
 800c726:	f7ff ff7d 	bl	800c624 <std>
 800c72a:	68e0      	ldr	r0, [r4, #12]
 800c72c:	2202      	movs	r2, #2
 800c72e:	2112      	movs	r1, #18
 800c730:	f7ff ff78 	bl	800c624 <std>
 800c734:	2301      	movs	r3, #1
 800c736:	61a3      	str	r3, [r4, #24]
 800c738:	e7d2      	b.n	800c6e0 <__sinit+0xc>
 800c73a:	bf00      	nop
 800c73c:	0800e7e4 	.word	0x0800e7e4
 800c740:	0800c66d 	.word	0x0800c66d

0800c744 <__sfp>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	4607      	mov	r7, r0
 800c748:	f7ff ffac 	bl	800c6a4 <__sfp_lock_acquire>
 800c74c:	4b1e      	ldr	r3, [pc, #120]	; (800c7c8 <__sfp+0x84>)
 800c74e:	681e      	ldr	r6, [r3, #0]
 800c750:	69b3      	ldr	r3, [r6, #24]
 800c752:	b913      	cbnz	r3, 800c75a <__sfp+0x16>
 800c754:	4630      	mov	r0, r6
 800c756:	f7ff ffbd 	bl	800c6d4 <__sinit>
 800c75a:	3648      	adds	r6, #72	; 0x48
 800c75c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c760:	3b01      	subs	r3, #1
 800c762:	d503      	bpl.n	800c76c <__sfp+0x28>
 800c764:	6833      	ldr	r3, [r6, #0]
 800c766:	b30b      	cbz	r3, 800c7ac <__sfp+0x68>
 800c768:	6836      	ldr	r6, [r6, #0]
 800c76a:	e7f7      	b.n	800c75c <__sfp+0x18>
 800c76c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c770:	b9d5      	cbnz	r5, 800c7a8 <__sfp+0x64>
 800c772:	4b16      	ldr	r3, [pc, #88]	; (800c7cc <__sfp+0x88>)
 800c774:	60e3      	str	r3, [r4, #12]
 800c776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c77a:	6665      	str	r5, [r4, #100]	; 0x64
 800c77c:	f000 fbba 	bl	800cef4 <__retarget_lock_init_recursive>
 800c780:	f7ff ff96 	bl	800c6b0 <__sfp_lock_release>
 800c784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c78c:	6025      	str	r5, [r4, #0]
 800c78e:	61a5      	str	r5, [r4, #24]
 800c790:	2208      	movs	r2, #8
 800c792:	4629      	mov	r1, r5
 800c794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c798:	f7fd f95e 	bl	8009a58 <memset>
 800c79c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c7a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a8:	3468      	adds	r4, #104	; 0x68
 800c7aa:	e7d9      	b.n	800c760 <__sfp+0x1c>
 800c7ac:	2104      	movs	r1, #4
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	f7ff ff62 	bl	800c678 <__sfmoreglue>
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	6030      	str	r0, [r6, #0]
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d1d5      	bne.n	800c768 <__sfp+0x24>
 800c7bc:	f7ff ff78 	bl	800c6b0 <__sfp_lock_release>
 800c7c0:	230c      	movs	r3, #12
 800c7c2:	603b      	str	r3, [r7, #0]
 800c7c4:	e7ee      	b.n	800c7a4 <__sfp+0x60>
 800c7c6:	bf00      	nop
 800c7c8:	0800e7e4 	.word	0x0800e7e4
 800c7cc:	ffff0001 	.word	0xffff0001

0800c7d0 <_fwalk_reent>:
 800c7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	4688      	mov	r8, r1
 800c7d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c7dc:	2700      	movs	r7, #0
 800c7de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7e2:	f1b9 0901 	subs.w	r9, r9, #1
 800c7e6:	d505      	bpl.n	800c7f4 <_fwalk_reent+0x24>
 800c7e8:	6824      	ldr	r4, [r4, #0]
 800c7ea:	2c00      	cmp	r4, #0
 800c7ec:	d1f7      	bne.n	800c7de <_fwalk_reent+0xe>
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f4:	89ab      	ldrh	r3, [r5, #12]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d907      	bls.n	800c80a <_fwalk_reent+0x3a>
 800c7fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7fe:	3301      	adds	r3, #1
 800c800:	d003      	beq.n	800c80a <_fwalk_reent+0x3a>
 800c802:	4629      	mov	r1, r5
 800c804:	4630      	mov	r0, r6
 800c806:	47c0      	blx	r8
 800c808:	4307      	orrs	r7, r0
 800c80a:	3568      	adds	r5, #104	; 0x68
 800c80c:	e7e9      	b.n	800c7e2 <_fwalk_reent+0x12>

0800c80e <rshift>:
 800c80e:	6903      	ldr	r3, [r0, #16]
 800c810:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c818:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c81c:	f100 0414 	add.w	r4, r0, #20
 800c820:	dd45      	ble.n	800c8ae <rshift+0xa0>
 800c822:	f011 011f 	ands.w	r1, r1, #31
 800c826:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c82a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c82e:	d10c      	bne.n	800c84a <rshift+0x3c>
 800c830:	f100 0710 	add.w	r7, r0, #16
 800c834:	4629      	mov	r1, r5
 800c836:	42b1      	cmp	r1, r6
 800c838:	d334      	bcc.n	800c8a4 <rshift+0x96>
 800c83a:	1a9b      	subs	r3, r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	1eea      	subs	r2, r5, #3
 800c840:	4296      	cmp	r6, r2
 800c842:	bf38      	it	cc
 800c844:	2300      	movcc	r3, #0
 800c846:	4423      	add	r3, r4
 800c848:	e015      	b.n	800c876 <rshift+0x68>
 800c84a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c84e:	f1c1 0820 	rsb	r8, r1, #32
 800c852:	40cf      	lsrs	r7, r1
 800c854:	f105 0e04 	add.w	lr, r5, #4
 800c858:	46a1      	mov	r9, r4
 800c85a:	4576      	cmp	r6, lr
 800c85c:	46f4      	mov	ip, lr
 800c85e:	d815      	bhi.n	800c88c <rshift+0x7e>
 800c860:	1a9b      	subs	r3, r3, r2
 800c862:	009a      	lsls	r2, r3, #2
 800c864:	3a04      	subs	r2, #4
 800c866:	3501      	adds	r5, #1
 800c868:	42ae      	cmp	r6, r5
 800c86a:	bf38      	it	cc
 800c86c:	2200      	movcc	r2, #0
 800c86e:	18a3      	adds	r3, r4, r2
 800c870:	50a7      	str	r7, [r4, r2]
 800c872:	b107      	cbz	r7, 800c876 <rshift+0x68>
 800c874:	3304      	adds	r3, #4
 800c876:	1b1a      	subs	r2, r3, r4
 800c878:	42a3      	cmp	r3, r4
 800c87a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c87e:	bf08      	it	eq
 800c880:	2300      	moveq	r3, #0
 800c882:	6102      	str	r2, [r0, #16]
 800c884:	bf08      	it	eq
 800c886:	6143      	streq	r3, [r0, #20]
 800c888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c88c:	f8dc c000 	ldr.w	ip, [ip]
 800c890:	fa0c fc08 	lsl.w	ip, ip, r8
 800c894:	ea4c 0707 	orr.w	r7, ip, r7
 800c898:	f849 7b04 	str.w	r7, [r9], #4
 800c89c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8a0:	40cf      	lsrs	r7, r1
 800c8a2:	e7da      	b.n	800c85a <rshift+0x4c>
 800c8a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8ac:	e7c3      	b.n	800c836 <rshift+0x28>
 800c8ae:	4623      	mov	r3, r4
 800c8b0:	e7e1      	b.n	800c876 <rshift+0x68>

0800c8b2 <__hexdig_fun>:
 800c8b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8b6:	2b09      	cmp	r3, #9
 800c8b8:	d802      	bhi.n	800c8c0 <__hexdig_fun+0xe>
 800c8ba:	3820      	subs	r0, #32
 800c8bc:	b2c0      	uxtb	r0, r0
 800c8be:	4770      	bx	lr
 800c8c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8c4:	2b05      	cmp	r3, #5
 800c8c6:	d801      	bhi.n	800c8cc <__hexdig_fun+0x1a>
 800c8c8:	3847      	subs	r0, #71	; 0x47
 800c8ca:	e7f7      	b.n	800c8bc <__hexdig_fun+0xa>
 800c8cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c8d0:	2b05      	cmp	r3, #5
 800c8d2:	d801      	bhi.n	800c8d8 <__hexdig_fun+0x26>
 800c8d4:	3827      	subs	r0, #39	; 0x27
 800c8d6:	e7f1      	b.n	800c8bc <__hexdig_fun+0xa>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	4770      	bx	lr

0800c8dc <__gethex>:
 800c8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e0:	ed2d 8b02 	vpush	{d8}
 800c8e4:	b089      	sub	sp, #36	; 0x24
 800c8e6:	ee08 0a10 	vmov	s16, r0
 800c8ea:	9304      	str	r3, [sp, #16]
 800c8ec:	4bbc      	ldr	r3, [pc, #752]	; (800cbe0 <__gethex+0x304>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	468b      	mov	fp, r1
 800c8f6:	4690      	mov	r8, r2
 800c8f8:	f7f3 fc6a 	bl	80001d0 <strlen>
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	f8db 2000 	ldr.w	r2, [fp]
 800c902:	4403      	add	r3, r0
 800c904:	4682      	mov	sl, r0
 800c906:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	1c93      	adds	r3, r2, #2
 800c90e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c912:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c916:	32fe      	adds	r2, #254	; 0xfe
 800c918:	18d1      	adds	r1, r2, r3
 800c91a:	461f      	mov	r7, r3
 800c91c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c920:	9100      	str	r1, [sp, #0]
 800c922:	2830      	cmp	r0, #48	; 0x30
 800c924:	d0f8      	beq.n	800c918 <__gethex+0x3c>
 800c926:	f7ff ffc4 	bl	800c8b2 <__hexdig_fun>
 800c92a:	4604      	mov	r4, r0
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d13a      	bne.n	800c9a6 <__gethex+0xca>
 800c930:	9901      	ldr	r1, [sp, #4]
 800c932:	4652      	mov	r2, sl
 800c934:	4638      	mov	r0, r7
 800c936:	f001 fbe6 	bl	800e106 <strncmp>
 800c93a:	4605      	mov	r5, r0
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d168      	bne.n	800ca12 <__gethex+0x136>
 800c940:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c944:	eb07 060a 	add.w	r6, r7, sl
 800c948:	f7ff ffb3 	bl	800c8b2 <__hexdig_fun>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d062      	beq.n	800ca16 <__gethex+0x13a>
 800c950:	4633      	mov	r3, r6
 800c952:	7818      	ldrb	r0, [r3, #0]
 800c954:	2830      	cmp	r0, #48	; 0x30
 800c956:	461f      	mov	r7, r3
 800c958:	f103 0301 	add.w	r3, r3, #1
 800c95c:	d0f9      	beq.n	800c952 <__gethex+0x76>
 800c95e:	f7ff ffa8 	bl	800c8b2 <__hexdig_fun>
 800c962:	2301      	movs	r3, #1
 800c964:	fab0 f480 	clz	r4, r0
 800c968:	0964      	lsrs	r4, r4, #5
 800c96a:	4635      	mov	r5, r6
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	463a      	mov	r2, r7
 800c970:	4616      	mov	r6, r2
 800c972:	3201      	adds	r2, #1
 800c974:	7830      	ldrb	r0, [r6, #0]
 800c976:	f7ff ff9c 	bl	800c8b2 <__hexdig_fun>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d1f8      	bne.n	800c970 <__gethex+0x94>
 800c97e:	9901      	ldr	r1, [sp, #4]
 800c980:	4652      	mov	r2, sl
 800c982:	4630      	mov	r0, r6
 800c984:	f001 fbbf 	bl	800e106 <strncmp>
 800c988:	b980      	cbnz	r0, 800c9ac <__gethex+0xd0>
 800c98a:	b94d      	cbnz	r5, 800c9a0 <__gethex+0xc4>
 800c98c:	eb06 050a 	add.w	r5, r6, sl
 800c990:	462a      	mov	r2, r5
 800c992:	4616      	mov	r6, r2
 800c994:	3201      	adds	r2, #1
 800c996:	7830      	ldrb	r0, [r6, #0]
 800c998:	f7ff ff8b 	bl	800c8b2 <__hexdig_fun>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d1f8      	bne.n	800c992 <__gethex+0xb6>
 800c9a0:	1bad      	subs	r5, r5, r6
 800c9a2:	00ad      	lsls	r5, r5, #2
 800c9a4:	e004      	b.n	800c9b0 <__gethex+0xd4>
 800c9a6:	2400      	movs	r4, #0
 800c9a8:	4625      	mov	r5, r4
 800c9aa:	e7e0      	b.n	800c96e <__gethex+0x92>
 800c9ac:	2d00      	cmp	r5, #0
 800c9ae:	d1f7      	bne.n	800c9a0 <__gethex+0xc4>
 800c9b0:	7833      	ldrb	r3, [r6, #0]
 800c9b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9b6:	2b50      	cmp	r3, #80	; 0x50
 800c9b8:	d13b      	bne.n	800ca32 <__gethex+0x156>
 800c9ba:	7873      	ldrb	r3, [r6, #1]
 800c9bc:	2b2b      	cmp	r3, #43	; 0x2b
 800c9be:	d02c      	beq.n	800ca1a <__gethex+0x13e>
 800c9c0:	2b2d      	cmp	r3, #45	; 0x2d
 800c9c2:	d02e      	beq.n	800ca22 <__gethex+0x146>
 800c9c4:	1c71      	adds	r1, r6, #1
 800c9c6:	f04f 0900 	mov.w	r9, #0
 800c9ca:	7808      	ldrb	r0, [r1, #0]
 800c9cc:	f7ff ff71 	bl	800c8b2 <__hexdig_fun>
 800c9d0:	1e43      	subs	r3, r0, #1
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b18      	cmp	r3, #24
 800c9d6:	d82c      	bhi.n	800ca32 <__gethex+0x156>
 800c9d8:	f1a0 0210 	sub.w	r2, r0, #16
 800c9dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9e0:	f7ff ff67 	bl	800c8b2 <__hexdig_fun>
 800c9e4:	1e43      	subs	r3, r0, #1
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b18      	cmp	r3, #24
 800c9ea:	d91d      	bls.n	800ca28 <__gethex+0x14c>
 800c9ec:	f1b9 0f00 	cmp.w	r9, #0
 800c9f0:	d000      	beq.n	800c9f4 <__gethex+0x118>
 800c9f2:	4252      	negs	r2, r2
 800c9f4:	4415      	add	r5, r2
 800c9f6:	f8cb 1000 	str.w	r1, [fp]
 800c9fa:	b1e4      	cbz	r4, 800ca36 <__gethex+0x15a>
 800c9fc:	9b00      	ldr	r3, [sp, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bf14      	ite	ne
 800ca02:	2700      	movne	r7, #0
 800ca04:	2706      	moveq	r7, #6
 800ca06:	4638      	mov	r0, r7
 800ca08:	b009      	add	sp, #36	; 0x24
 800ca0a:	ecbd 8b02 	vpop	{d8}
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca12:	463e      	mov	r6, r7
 800ca14:	4625      	mov	r5, r4
 800ca16:	2401      	movs	r4, #1
 800ca18:	e7ca      	b.n	800c9b0 <__gethex+0xd4>
 800ca1a:	f04f 0900 	mov.w	r9, #0
 800ca1e:	1cb1      	adds	r1, r6, #2
 800ca20:	e7d3      	b.n	800c9ca <__gethex+0xee>
 800ca22:	f04f 0901 	mov.w	r9, #1
 800ca26:	e7fa      	b.n	800ca1e <__gethex+0x142>
 800ca28:	230a      	movs	r3, #10
 800ca2a:	fb03 0202 	mla	r2, r3, r2, r0
 800ca2e:	3a10      	subs	r2, #16
 800ca30:	e7d4      	b.n	800c9dc <__gethex+0x100>
 800ca32:	4631      	mov	r1, r6
 800ca34:	e7df      	b.n	800c9f6 <__gethex+0x11a>
 800ca36:	1bf3      	subs	r3, r6, r7
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	2b07      	cmp	r3, #7
 800ca3e:	dc0b      	bgt.n	800ca58 <__gethex+0x17c>
 800ca40:	ee18 0a10 	vmov	r0, s16
 800ca44:	f000 fad8 	bl	800cff8 <_Balloc>
 800ca48:	4604      	mov	r4, r0
 800ca4a:	b940      	cbnz	r0, 800ca5e <__gethex+0x182>
 800ca4c:	4b65      	ldr	r3, [pc, #404]	; (800cbe4 <__gethex+0x308>)
 800ca4e:	4602      	mov	r2, r0
 800ca50:	21de      	movs	r1, #222	; 0xde
 800ca52:	4865      	ldr	r0, [pc, #404]	; (800cbe8 <__gethex+0x30c>)
 800ca54:	f001 fb88 	bl	800e168 <__assert_func>
 800ca58:	3101      	adds	r1, #1
 800ca5a:	105b      	asrs	r3, r3, #1
 800ca5c:	e7ee      	b.n	800ca3c <__gethex+0x160>
 800ca5e:	f100 0914 	add.w	r9, r0, #20
 800ca62:	f04f 0b00 	mov.w	fp, #0
 800ca66:	f1ca 0301 	rsb	r3, sl, #1
 800ca6a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca6e:	f8cd b000 	str.w	fp, [sp]
 800ca72:	9306      	str	r3, [sp, #24]
 800ca74:	42b7      	cmp	r7, r6
 800ca76:	d340      	bcc.n	800cafa <__gethex+0x21e>
 800ca78:	9802      	ldr	r0, [sp, #8]
 800ca7a:	9b00      	ldr	r3, [sp, #0]
 800ca7c:	f840 3b04 	str.w	r3, [r0], #4
 800ca80:	eba0 0009 	sub.w	r0, r0, r9
 800ca84:	1080      	asrs	r0, r0, #2
 800ca86:	0146      	lsls	r6, r0, #5
 800ca88:	6120      	str	r0, [r4, #16]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 fbaa 	bl	800d1e4 <__hi0bits>
 800ca90:	1a30      	subs	r0, r6, r0
 800ca92:	f8d8 6000 	ldr.w	r6, [r8]
 800ca96:	42b0      	cmp	r0, r6
 800ca98:	dd63      	ble.n	800cb62 <__gethex+0x286>
 800ca9a:	1b87      	subs	r7, r0, r6
 800ca9c:	4639      	mov	r1, r7
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 ff44 	bl	800d92c <__any_on>
 800caa4:	4682      	mov	sl, r0
 800caa6:	b1a8      	cbz	r0, 800cad4 <__gethex+0x1f8>
 800caa8:	1e7b      	subs	r3, r7, #1
 800caaa:	1159      	asrs	r1, r3, #5
 800caac:	f003 021f 	and.w	r2, r3, #31
 800cab0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cab4:	f04f 0a01 	mov.w	sl, #1
 800cab8:	fa0a f202 	lsl.w	r2, sl, r2
 800cabc:	420a      	tst	r2, r1
 800cabe:	d009      	beq.n	800cad4 <__gethex+0x1f8>
 800cac0:	4553      	cmp	r3, sl
 800cac2:	dd05      	ble.n	800cad0 <__gethex+0x1f4>
 800cac4:	1eb9      	subs	r1, r7, #2
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 ff30 	bl	800d92c <__any_on>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d145      	bne.n	800cb5c <__gethex+0x280>
 800cad0:	f04f 0a02 	mov.w	sl, #2
 800cad4:	4639      	mov	r1, r7
 800cad6:	4620      	mov	r0, r4
 800cad8:	f7ff fe99 	bl	800c80e <rshift>
 800cadc:	443d      	add	r5, r7
 800cade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cae2:	42ab      	cmp	r3, r5
 800cae4:	da4c      	bge.n	800cb80 <__gethex+0x2a4>
 800cae6:	ee18 0a10 	vmov	r0, s16
 800caea:	4621      	mov	r1, r4
 800caec:	f000 fac4 	bl	800d078 <_Bfree>
 800caf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800caf2:	2300      	movs	r3, #0
 800caf4:	6013      	str	r3, [r2, #0]
 800caf6:	27a3      	movs	r7, #163	; 0xa3
 800caf8:	e785      	b.n	800ca06 <__gethex+0x12a>
 800cafa:	1e73      	subs	r3, r6, #1
 800cafc:	9a05      	ldr	r2, [sp, #20]
 800cafe:	9303      	str	r3, [sp, #12]
 800cb00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d019      	beq.n	800cb3c <__gethex+0x260>
 800cb08:	f1bb 0f20 	cmp.w	fp, #32
 800cb0c:	d107      	bne.n	800cb1e <__gethex+0x242>
 800cb0e:	9b02      	ldr	r3, [sp, #8]
 800cb10:	9a00      	ldr	r2, [sp, #0]
 800cb12:	f843 2b04 	str.w	r2, [r3], #4
 800cb16:	9302      	str	r3, [sp, #8]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	469b      	mov	fp, r3
 800cb1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb22:	f7ff fec6 	bl	800c8b2 <__hexdig_fun>
 800cb26:	9b00      	ldr	r3, [sp, #0]
 800cb28:	f000 000f 	and.w	r0, r0, #15
 800cb2c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb30:	4303      	orrs	r3, r0
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	f10b 0b04 	add.w	fp, fp, #4
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	e00d      	b.n	800cb58 <__gethex+0x27c>
 800cb3c:	9b03      	ldr	r3, [sp, #12]
 800cb3e:	9a06      	ldr	r2, [sp, #24]
 800cb40:	4413      	add	r3, r2
 800cb42:	42bb      	cmp	r3, r7
 800cb44:	d3e0      	bcc.n	800cb08 <__gethex+0x22c>
 800cb46:	4618      	mov	r0, r3
 800cb48:	9901      	ldr	r1, [sp, #4]
 800cb4a:	9307      	str	r3, [sp, #28]
 800cb4c:	4652      	mov	r2, sl
 800cb4e:	f001 fada 	bl	800e106 <strncmp>
 800cb52:	9b07      	ldr	r3, [sp, #28]
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d1d7      	bne.n	800cb08 <__gethex+0x22c>
 800cb58:	461e      	mov	r6, r3
 800cb5a:	e78b      	b.n	800ca74 <__gethex+0x198>
 800cb5c:	f04f 0a03 	mov.w	sl, #3
 800cb60:	e7b8      	b.n	800cad4 <__gethex+0x1f8>
 800cb62:	da0a      	bge.n	800cb7a <__gethex+0x29e>
 800cb64:	1a37      	subs	r7, r6, r0
 800cb66:	4621      	mov	r1, r4
 800cb68:	ee18 0a10 	vmov	r0, s16
 800cb6c:	463a      	mov	r2, r7
 800cb6e:	f000 fc9f 	bl	800d4b0 <__lshift>
 800cb72:	1bed      	subs	r5, r5, r7
 800cb74:	4604      	mov	r4, r0
 800cb76:	f100 0914 	add.w	r9, r0, #20
 800cb7a:	f04f 0a00 	mov.w	sl, #0
 800cb7e:	e7ae      	b.n	800cade <__gethex+0x202>
 800cb80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb84:	42a8      	cmp	r0, r5
 800cb86:	dd72      	ble.n	800cc6e <__gethex+0x392>
 800cb88:	1b45      	subs	r5, r0, r5
 800cb8a:	42ae      	cmp	r6, r5
 800cb8c:	dc36      	bgt.n	800cbfc <__gethex+0x320>
 800cb8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d02a      	beq.n	800cbec <__gethex+0x310>
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	d02c      	beq.n	800cbf4 <__gethex+0x318>
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d115      	bne.n	800cbca <__gethex+0x2ee>
 800cb9e:	42ae      	cmp	r6, r5
 800cba0:	d113      	bne.n	800cbca <__gethex+0x2ee>
 800cba2:	2e01      	cmp	r6, #1
 800cba4:	d10b      	bne.n	800cbbe <__gethex+0x2e2>
 800cba6:	9a04      	ldr	r2, [sp, #16]
 800cba8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	2301      	movs	r3, #1
 800cbb0:	6123      	str	r3, [r4, #16]
 800cbb2:	f8c9 3000 	str.w	r3, [r9]
 800cbb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbb8:	2762      	movs	r7, #98	; 0x62
 800cbba:	601c      	str	r4, [r3, #0]
 800cbbc:	e723      	b.n	800ca06 <__gethex+0x12a>
 800cbbe:	1e71      	subs	r1, r6, #1
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 feb3 	bl	800d92c <__any_on>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d1ed      	bne.n	800cba6 <__gethex+0x2ca>
 800cbca:	ee18 0a10 	vmov	r0, s16
 800cbce:	4621      	mov	r1, r4
 800cbd0:	f000 fa52 	bl	800d078 <_Bfree>
 800cbd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	2750      	movs	r7, #80	; 0x50
 800cbdc:	e713      	b.n	800ca06 <__gethex+0x12a>
 800cbde:	bf00      	nop
 800cbe0:	0800eadc 	.word	0x0800eadc
 800cbe4:	0800e9fc 	.word	0x0800e9fc
 800cbe8:	0800ea70 	.word	0x0800ea70
 800cbec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1eb      	bne.n	800cbca <__gethex+0x2ee>
 800cbf2:	e7d8      	b.n	800cba6 <__gethex+0x2ca>
 800cbf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1d5      	bne.n	800cba6 <__gethex+0x2ca>
 800cbfa:	e7e6      	b.n	800cbca <__gethex+0x2ee>
 800cbfc:	1e6f      	subs	r7, r5, #1
 800cbfe:	f1ba 0f00 	cmp.w	sl, #0
 800cc02:	d131      	bne.n	800cc68 <__gethex+0x38c>
 800cc04:	b127      	cbz	r7, 800cc10 <__gethex+0x334>
 800cc06:	4639      	mov	r1, r7
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 fe8f 	bl	800d92c <__any_on>
 800cc0e:	4682      	mov	sl, r0
 800cc10:	117b      	asrs	r3, r7, #5
 800cc12:	2101      	movs	r1, #1
 800cc14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cc18:	f007 071f 	and.w	r7, r7, #31
 800cc1c:	fa01 f707 	lsl.w	r7, r1, r7
 800cc20:	421f      	tst	r7, r3
 800cc22:	4629      	mov	r1, r5
 800cc24:	4620      	mov	r0, r4
 800cc26:	bf18      	it	ne
 800cc28:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc2c:	1b76      	subs	r6, r6, r5
 800cc2e:	f7ff fdee 	bl	800c80e <rshift>
 800cc32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc36:	2702      	movs	r7, #2
 800cc38:	f1ba 0f00 	cmp.w	sl, #0
 800cc3c:	d048      	beq.n	800ccd0 <__gethex+0x3f4>
 800cc3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d015      	beq.n	800cc72 <__gethex+0x396>
 800cc46:	2b03      	cmp	r3, #3
 800cc48:	d017      	beq.n	800cc7a <__gethex+0x39e>
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d109      	bne.n	800cc62 <__gethex+0x386>
 800cc4e:	f01a 0f02 	tst.w	sl, #2
 800cc52:	d006      	beq.n	800cc62 <__gethex+0x386>
 800cc54:	f8d9 0000 	ldr.w	r0, [r9]
 800cc58:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc5c:	f01a 0f01 	tst.w	sl, #1
 800cc60:	d10e      	bne.n	800cc80 <__gethex+0x3a4>
 800cc62:	f047 0710 	orr.w	r7, r7, #16
 800cc66:	e033      	b.n	800ccd0 <__gethex+0x3f4>
 800cc68:	f04f 0a01 	mov.w	sl, #1
 800cc6c:	e7d0      	b.n	800cc10 <__gethex+0x334>
 800cc6e:	2701      	movs	r7, #1
 800cc70:	e7e2      	b.n	800cc38 <__gethex+0x35c>
 800cc72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc74:	f1c3 0301 	rsb	r3, r3, #1
 800cc78:	9315      	str	r3, [sp, #84]	; 0x54
 800cc7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d0f0      	beq.n	800cc62 <__gethex+0x386>
 800cc80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc84:	f104 0314 	add.w	r3, r4, #20
 800cc88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc90:	f04f 0c00 	mov.w	ip, #0
 800cc94:	4618      	mov	r0, r3
 800cc96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc9e:	d01c      	beq.n	800ccda <__gethex+0x3fe>
 800cca0:	3201      	adds	r2, #1
 800cca2:	6002      	str	r2, [r0, #0]
 800cca4:	2f02      	cmp	r7, #2
 800cca6:	f104 0314 	add.w	r3, r4, #20
 800ccaa:	d13f      	bne.n	800cd2c <__gethex+0x450>
 800ccac:	f8d8 2000 	ldr.w	r2, [r8]
 800ccb0:	3a01      	subs	r2, #1
 800ccb2:	42b2      	cmp	r2, r6
 800ccb4:	d10a      	bne.n	800cccc <__gethex+0x3f0>
 800ccb6:	1171      	asrs	r1, r6, #5
 800ccb8:	2201      	movs	r2, #1
 800ccba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccbe:	f006 061f 	and.w	r6, r6, #31
 800ccc2:	fa02 f606 	lsl.w	r6, r2, r6
 800ccc6:	421e      	tst	r6, r3
 800ccc8:	bf18      	it	ne
 800ccca:	4617      	movne	r7, r2
 800cccc:	f047 0720 	orr.w	r7, r7, #32
 800ccd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccd2:	601c      	str	r4, [r3, #0]
 800ccd4:	9b04      	ldr	r3, [sp, #16]
 800ccd6:	601d      	str	r5, [r3, #0]
 800ccd8:	e695      	b.n	800ca06 <__gethex+0x12a>
 800ccda:	4299      	cmp	r1, r3
 800ccdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800cce0:	d8d8      	bhi.n	800cc94 <__gethex+0x3b8>
 800cce2:	68a3      	ldr	r3, [r4, #8]
 800cce4:	459b      	cmp	fp, r3
 800cce6:	db19      	blt.n	800cd1c <__gethex+0x440>
 800cce8:	6861      	ldr	r1, [r4, #4]
 800ccea:	ee18 0a10 	vmov	r0, s16
 800ccee:	3101      	adds	r1, #1
 800ccf0:	f000 f982 	bl	800cff8 <_Balloc>
 800ccf4:	4681      	mov	r9, r0
 800ccf6:	b918      	cbnz	r0, 800cd00 <__gethex+0x424>
 800ccf8:	4b1a      	ldr	r3, [pc, #104]	; (800cd64 <__gethex+0x488>)
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	2184      	movs	r1, #132	; 0x84
 800ccfe:	e6a8      	b.n	800ca52 <__gethex+0x176>
 800cd00:	6922      	ldr	r2, [r4, #16]
 800cd02:	3202      	adds	r2, #2
 800cd04:	f104 010c 	add.w	r1, r4, #12
 800cd08:	0092      	lsls	r2, r2, #2
 800cd0a:	300c      	adds	r0, #12
 800cd0c:	f7fc fe96 	bl	8009a3c <memcpy>
 800cd10:	4621      	mov	r1, r4
 800cd12:	ee18 0a10 	vmov	r0, s16
 800cd16:	f000 f9af 	bl	800d078 <_Bfree>
 800cd1a:	464c      	mov	r4, r9
 800cd1c:	6923      	ldr	r3, [r4, #16]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd24:	6122      	str	r2, [r4, #16]
 800cd26:	2201      	movs	r2, #1
 800cd28:	615a      	str	r2, [r3, #20]
 800cd2a:	e7bb      	b.n	800cca4 <__gethex+0x3c8>
 800cd2c:	6922      	ldr	r2, [r4, #16]
 800cd2e:	455a      	cmp	r2, fp
 800cd30:	dd0b      	ble.n	800cd4a <__gethex+0x46e>
 800cd32:	2101      	movs	r1, #1
 800cd34:	4620      	mov	r0, r4
 800cd36:	f7ff fd6a 	bl	800c80e <rshift>
 800cd3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd3e:	3501      	adds	r5, #1
 800cd40:	42ab      	cmp	r3, r5
 800cd42:	f6ff aed0 	blt.w	800cae6 <__gethex+0x20a>
 800cd46:	2701      	movs	r7, #1
 800cd48:	e7c0      	b.n	800cccc <__gethex+0x3f0>
 800cd4a:	f016 061f 	ands.w	r6, r6, #31
 800cd4e:	d0fa      	beq.n	800cd46 <__gethex+0x46a>
 800cd50:	449a      	add	sl, r3
 800cd52:	f1c6 0620 	rsb	r6, r6, #32
 800cd56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cd5a:	f000 fa43 	bl	800d1e4 <__hi0bits>
 800cd5e:	42b0      	cmp	r0, r6
 800cd60:	dbe7      	blt.n	800cd32 <__gethex+0x456>
 800cd62:	e7f0      	b.n	800cd46 <__gethex+0x46a>
 800cd64:	0800e9fc 	.word	0x0800e9fc

0800cd68 <L_shift>:
 800cd68:	f1c2 0208 	rsb	r2, r2, #8
 800cd6c:	0092      	lsls	r2, r2, #2
 800cd6e:	b570      	push	{r4, r5, r6, lr}
 800cd70:	f1c2 0620 	rsb	r6, r2, #32
 800cd74:	6843      	ldr	r3, [r0, #4]
 800cd76:	6804      	ldr	r4, [r0, #0]
 800cd78:	fa03 f506 	lsl.w	r5, r3, r6
 800cd7c:	432c      	orrs	r4, r5
 800cd7e:	40d3      	lsrs	r3, r2
 800cd80:	6004      	str	r4, [r0, #0]
 800cd82:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd86:	4288      	cmp	r0, r1
 800cd88:	d3f4      	bcc.n	800cd74 <L_shift+0xc>
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}

0800cd8c <__match>:
 800cd8c:	b530      	push	{r4, r5, lr}
 800cd8e:	6803      	ldr	r3, [r0, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd96:	b914      	cbnz	r4, 800cd9e <__match+0x12>
 800cd98:	6003      	str	r3, [r0, #0]
 800cd9a:	2001      	movs	r0, #1
 800cd9c:	bd30      	pop	{r4, r5, pc}
 800cd9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cda6:	2d19      	cmp	r5, #25
 800cda8:	bf98      	it	ls
 800cdaa:	3220      	addls	r2, #32
 800cdac:	42a2      	cmp	r2, r4
 800cdae:	d0f0      	beq.n	800cd92 <__match+0x6>
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	e7f3      	b.n	800cd9c <__match+0x10>

0800cdb4 <__hexnan>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	680b      	ldr	r3, [r1, #0]
 800cdba:	6801      	ldr	r1, [r0, #0]
 800cdbc:	115e      	asrs	r6, r3, #5
 800cdbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdc2:	f013 031f 	ands.w	r3, r3, #31
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	bf18      	it	ne
 800cdca:	3604      	addne	r6, #4
 800cdcc:	2500      	movs	r5, #0
 800cdce:	1f37      	subs	r7, r6, #4
 800cdd0:	4682      	mov	sl, r0
 800cdd2:	4690      	mov	r8, r2
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	f846 5c04 	str.w	r5, [r6, #-4]
 800cdda:	46b9      	mov	r9, r7
 800cddc:	463c      	mov	r4, r7
 800cdde:	9502      	str	r5, [sp, #8]
 800cde0:	46ab      	mov	fp, r5
 800cde2:	784a      	ldrb	r2, [r1, #1]
 800cde4:	1c4b      	adds	r3, r1, #1
 800cde6:	9303      	str	r3, [sp, #12]
 800cde8:	b342      	cbz	r2, 800ce3c <__hexnan+0x88>
 800cdea:	4610      	mov	r0, r2
 800cdec:	9105      	str	r1, [sp, #20]
 800cdee:	9204      	str	r2, [sp, #16]
 800cdf0:	f7ff fd5f 	bl	800c8b2 <__hexdig_fun>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d14f      	bne.n	800ce98 <__hexnan+0xe4>
 800cdf8:	9a04      	ldr	r2, [sp, #16]
 800cdfa:	9905      	ldr	r1, [sp, #20]
 800cdfc:	2a20      	cmp	r2, #32
 800cdfe:	d818      	bhi.n	800ce32 <__hexnan+0x7e>
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	459b      	cmp	fp, r3
 800ce04:	dd13      	ble.n	800ce2e <__hexnan+0x7a>
 800ce06:	454c      	cmp	r4, r9
 800ce08:	d206      	bcs.n	800ce18 <__hexnan+0x64>
 800ce0a:	2d07      	cmp	r5, #7
 800ce0c:	dc04      	bgt.n	800ce18 <__hexnan+0x64>
 800ce0e:	462a      	mov	r2, r5
 800ce10:	4649      	mov	r1, r9
 800ce12:	4620      	mov	r0, r4
 800ce14:	f7ff ffa8 	bl	800cd68 <L_shift>
 800ce18:	4544      	cmp	r4, r8
 800ce1a:	d950      	bls.n	800cebe <__hexnan+0x10a>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f1a4 0904 	sub.w	r9, r4, #4
 800ce22:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce26:	f8cd b008 	str.w	fp, [sp, #8]
 800ce2a:	464c      	mov	r4, r9
 800ce2c:	461d      	mov	r5, r3
 800ce2e:	9903      	ldr	r1, [sp, #12]
 800ce30:	e7d7      	b.n	800cde2 <__hexnan+0x2e>
 800ce32:	2a29      	cmp	r2, #41	; 0x29
 800ce34:	d156      	bne.n	800cee4 <__hexnan+0x130>
 800ce36:	3102      	adds	r1, #2
 800ce38:	f8ca 1000 	str.w	r1, [sl]
 800ce3c:	f1bb 0f00 	cmp.w	fp, #0
 800ce40:	d050      	beq.n	800cee4 <__hexnan+0x130>
 800ce42:	454c      	cmp	r4, r9
 800ce44:	d206      	bcs.n	800ce54 <__hexnan+0xa0>
 800ce46:	2d07      	cmp	r5, #7
 800ce48:	dc04      	bgt.n	800ce54 <__hexnan+0xa0>
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f7ff ff8a 	bl	800cd68 <L_shift>
 800ce54:	4544      	cmp	r4, r8
 800ce56:	d934      	bls.n	800cec2 <__hexnan+0x10e>
 800ce58:	f1a8 0204 	sub.w	r2, r8, #4
 800ce5c:	4623      	mov	r3, r4
 800ce5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce62:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce66:	429f      	cmp	r7, r3
 800ce68:	d2f9      	bcs.n	800ce5e <__hexnan+0xaa>
 800ce6a:	1b3b      	subs	r3, r7, r4
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	3304      	adds	r3, #4
 800ce72:	3401      	adds	r4, #1
 800ce74:	3e03      	subs	r6, #3
 800ce76:	42b4      	cmp	r4, r6
 800ce78:	bf88      	it	hi
 800ce7a:	2304      	movhi	r3, #4
 800ce7c:	4443      	add	r3, r8
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f843 2b04 	str.w	r2, [r3], #4
 800ce84:	429f      	cmp	r7, r3
 800ce86:	d2fb      	bcs.n	800ce80 <__hexnan+0xcc>
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	b91b      	cbnz	r3, 800ce94 <__hexnan+0xe0>
 800ce8c:	4547      	cmp	r7, r8
 800ce8e:	d127      	bne.n	800cee0 <__hexnan+0x12c>
 800ce90:	2301      	movs	r3, #1
 800ce92:	603b      	str	r3, [r7, #0]
 800ce94:	2005      	movs	r0, #5
 800ce96:	e026      	b.n	800cee6 <__hexnan+0x132>
 800ce98:	3501      	adds	r5, #1
 800ce9a:	2d08      	cmp	r5, #8
 800ce9c:	f10b 0b01 	add.w	fp, fp, #1
 800cea0:	dd06      	ble.n	800ceb0 <__hexnan+0xfc>
 800cea2:	4544      	cmp	r4, r8
 800cea4:	d9c3      	bls.n	800ce2e <__hexnan+0x7a>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceac:	2501      	movs	r5, #1
 800ceae:	3c04      	subs	r4, #4
 800ceb0:	6822      	ldr	r2, [r4, #0]
 800ceb2:	f000 000f 	and.w	r0, r0, #15
 800ceb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ceba:	6022      	str	r2, [r4, #0]
 800cebc:	e7b7      	b.n	800ce2e <__hexnan+0x7a>
 800cebe:	2508      	movs	r5, #8
 800cec0:	e7b5      	b.n	800ce2e <__hexnan+0x7a>
 800cec2:	9b01      	ldr	r3, [sp, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0df      	beq.n	800ce88 <__hexnan+0xd4>
 800cec8:	f04f 32ff 	mov.w	r2, #4294967295
 800cecc:	f1c3 0320 	rsb	r3, r3, #32
 800ced0:	fa22 f303 	lsr.w	r3, r2, r3
 800ced4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ced8:	401a      	ands	r2, r3
 800ceda:	f846 2c04 	str.w	r2, [r6, #-4]
 800cede:	e7d3      	b.n	800ce88 <__hexnan+0xd4>
 800cee0:	3f04      	subs	r7, #4
 800cee2:	e7d1      	b.n	800ce88 <__hexnan+0xd4>
 800cee4:	2004      	movs	r0, #4
 800cee6:	b007      	add	sp, #28
 800cee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ceec <_localeconv_r>:
 800ceec:	4800      	ldr	r0, [pc, #0]	; (800cef0 <_localeconv_r+0x4>)
 800ceee:	4770      	bx	lr
 800cef0:	20000164 	.word	0x20000164

0800cef4 <__retarget_lock_init_recursive>:
 800cef4:	4770      	bx	lr

0800cef6 <__retarget_lock_acquire_recursive>:
 800cef6:	4770      	bx	lr

0800cef8 <__retarget_lock_release_recursive>:
 800cef8:	4770      	bx	lr

0800cefa <__swhatbuf_r>:
 800cefa:	b570      	push	{r4, r5, r6, lr}
 800cefc:	460e      	mov	r6, r1
 800cefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf02:	2900      	cmp	r1, #0
 800cf04:	b096      	sub	sp, #88	; 0x58
 800cf06:	4614      	mov	r4, r2
 800cf08:	461d      	mov	r5, r3
 800cf0a:	da07      	bge.n	800cf1c <__swhatbuf_r+0x22>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	602b      	str	r3, [r5, #0]
 800cf10:	89b3      	ldrh	r3, [r6, #12]
 800cf12:	061a      	lsls	r2, r3, #24
 800cf14:	d410      	bmi.n	800cf38 <__swhatbuf_r+0x3e>
 800cf16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf1a:	e00e      	b.n	800cf3a <__swhatbuf_r+0x40>
 800cf1c:	466a      	mov	r2, sp
 800cf1e:	f001 f963 	bl	800e1e8 <_fstat_r>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dbf2      	blt.n	800cf0c <__swhatbuf_r+0x12>
 800cf26:	9a01      	ldr	r2, [sp, #4]
 800cf28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf30:	425a      	negs	r2, r3
 800cf32:	415a      	adcs	r2, r3
 800cf34:	602a      	str	r2, [r5, #0]
 800cf36:	e7ee      	b.n	800cf16 <__swhatbuf_r+0x1c>
 800cf38:	2340      	movs	r3, #64	; 0x40
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	b016      	add	sp, #88	; 0x58
 800cf40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf44 <__smakebuf_r>:
 800cf44:	898b      	ldrh	r3, [r1, #12]
 800cf46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf48:	079d      	lsls	r5, r3, #30
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	d507      	bpl.n	800cf60 <__smakebuf_r+0x1c>
 800cf50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	6123      	str	r3, [r4, #16]
 800cf58:	2301      	movs	r3, #1
 800cf5a:	6163      	str	r3, [r4, #20]
 800cf5c:	b002      	add	sp, #8
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	ab01      	add	r3, sp, #4
 800cf62:	466a      	mov	r2, sp
 800cf64:	f7ff ffc9 	bl	800cefa <__swhatbuf_r>
 800cf68:	9900      	ldr	r1, [sp, #0]
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	f000 fd5d 	bl	800da2c <_malloc_r>
 800cf72:	b948      	cbnz	r0, 800cf88 <__smakebuf_r+0x44>
 800cf74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf78:	059a      	lsls	r2, r3, #22
 800cf7a:	d4ef      	bmi.n	800cf5c <__smakebuf_r+0x18>
 800cf7c:	f023 0303 	bic.w	r3, r3, #3
 800cf80:	f043 0302 	orr.w	r3, r3, #2
 800cf84:	81a3      	strh	r3, [r4, #12]
 800cf86:	e7e3      	b.n	800cf50 <__smakebuf_r+0xc>
 800cf88:	4b0d      	ldr	r3, [pc, #52]	; (800cfc0 <__smakebuf_r+0x7c>)
 800cf8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	6020      	str	r0, [r4, #0]
 800cf90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf94:	81a3      	strh	r3, [r4, #12]
 800cf96:	9b00      	ldr	r3, [sp, #0]
 800cf98:	6163      	str	r3, [r4, #20]
 800cf9a:	9b01      	ldr	r3, [sp, #4]
 800cf9c:	6120      	str	r0, [r4, #16]
 800cf9e:	b15b      	cbz	r3, 800cfb8 <__smakebuf_r+0x74>
 800cfa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f001 f931 	bl	800e20c <_isatty_r>
 800cfaa:	b128      	cbz	r0, 800cfb8 <__smakebuf_r+0x74>
 800cfac:	89a3      	ldrh	r3, [r4, #12]
 800cfae:	f023 0303 	bic.w	r3, r3, #3
 800cfb2:	f043 0301 	orr.w	r3, r3, #1
 800cfb6:	81a3      	strh	r3, [r4, #12]
 800cfb8:	89a0      	ldrh	r0, [r4, #12]
 800cfba:	4305      	orrs	r5, r0
 800cfbc:	81a5      	strh	r5, [r4, #12]
 800cfbe:	e7cd      	b.n	800cf5c <__smakebuf_r+0x18>
 800cfc0:	0800c66d 	.word	0x0800c66d

0800cfc4 <malloc>:
 800cfc4:	4b02      	ldr	r3, [pc, #8]	; (800cfd0 <malloc+0xc>)
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	6818      	ldr	r0, [r3, #0]
 800cfca:	f000 bd2f 	b.w	800da2c <_malloc_r>
 800cfce:	bf00      	nop
 800cfd0:	2000000c 	.word	0x2000000c

0800cfd4 <__ascii_mbtowc>:
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	b901      	cbnz	r1, 800cfda <__ascii_mbtowc+0x6>
 800cfd8:	a901      	add	r1, sp, #4
 800cfda:	b142      	cbz	r2, 800cfee <__ascii_mbtowc+0x1a>
 800cfdc:	b14b      	cbz	r3, 800cff2 <__ascii_mbtowc+0x1e>
 800cfde:	7813      	ldrb	r3, [r2, #0]
 800cfe0:	600b      	str	r3, [r1, #0]
 800cfe2:	7812      	ldrb	r2, [r2, #0]
 800cfe4:	1e10      	subs	r0, r2, #0
 800cfe6:	bf18      	it	ne
 800cfe8:	2001      	movne	r0, #1
 800cfea:	b002      	add	sp, #8
 800cfec:	4770      	bx	lr
 800cfee:	4610      	mov	r0, r2
 800cff0:	e7fb      	b.n	800cfea <__ascii_mbtowc+0x16>
 800cff2:	f06f 0001 	mvn.w	r0, #1
 800cff6:	e7f8      	b.n	800cfea <__ascii_mbtowc+0x16>

0800cff8 <_Balloc>:
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cffc:	4604      	mov	r4, r0
 800cffe:	460d      	mov	r5, r1
 800d000:	b976      	cbnz	r6, 800d020 <_Balloc+0x28>
 800d002:	2010      	movs	r0, #16
 800d004:	f7ff ffde 	bl	800cfc4 <malloc>
 800d008:	4602      	mov	r2, r0
 800d00a:	6260      	str	r0, [r4, #36]	; 0x24
 800d00c:	b920      	cbnz	r0, 800d018 <_Balloc+0x20>
 800d00e:	4b18      	ldr	r3, [pc, #96]	; (800d070 <_Balloc+0x78>)
 800d010:	4818      	ldr	r0, [pc, #96]	; (800d074 <_Balloc+0x7c>)
 800d012:	2166      	movs	r1, #102	; 0x66
 800d014:	f001 f8a8 	bl	800e168 <__assert_func>
 800d018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d01c:	6006      	str	r6, [r0, #0]
 800d01e:	60c6      	str	r6, [r0, #12]
 800d020:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d022:	68f3      	ldr	r3, [r6, #12]
 800d024:	b183      	cbz	r3, 800d048 <_Balloc+0x50>
 800d026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d02e:	b9b8      	cbnz	r0, 800d060 <_Balloc+0x68>
 800d030:	2101      	movs	r1, #1
 800d032:	fa01 f605 	lsl.w	r6, r1, r5
 800d036:	1d72      	adds	r2, r6, #5
 800d038:	0092      	lsls	r2, r2, #2
 800d03a:	4620      	mov	r0, r4
 800d03c:	f000 fc97 	bl	800d96e <_calloc_r>
 800d040:	b160      	cbz	r0, 800d05c <_Balloc+0x64>
 800d042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d046:	e00e      	b.n	800d066 <_Balloc+0x6e>
 800d048:	2221      	movs	r2, #33	; 0x21
 800d04a:	2104      	movs	r1, #4
 800d04c:	4620      	mov	r0, r4
 800d04e:	f000 fc8e 	bl	800d96e <_calloc_r>
 800d052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d054:	60f0      	str	r0, [r6, #12]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e4      	bne.n	800d026 <_Balloc+0x2e>
 800d05c:	2000      	movs	r0, #0
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	6802      	ldr	r2, [r0, #0]
 800d062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d066:	2300      	movs	r3, #0
 800d068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d06c:	e7f7      	b.n	800d05e <_Balloc+0x66>
 800d06e:	bf00      	nop
 800d070:	0800e986 	.word	0x0800e986
 800d074:	0800eaf0 	.word	0x0800eaf0

0800d078 <_Bfree>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d07c:	4605      	mov	r5, r0
 800d07e:	460c      	mov	r4, r1
 800d080:	b976      	cbnz	r6, 800d0a0 <_Bfree+0x28>
 800d082:	2010      	movs	r0, #16
 800d084:	f7ff ff9e 	bl	800cfc4 <malloc>
 800d088:	4602      	mov	r2, r0
 800d08a:	6268      	str	r0, [r5, #36]	; 0x24
 800d08c:	b920      	cbnz	r0, 800d098 <_Bfree+0x20>
 800d08e:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <_Bfree+0x3c>)
 800d090:	4809      	ldr	r0, [pc, #36]	; (800d0b8 <_Bfree+0x40>)
 800d092:	218a      	movs	r1, #138	; 0x8a
 800d094:	f001 f868 	bl	800e168 <__assert_func>
 800d098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d09c:	6006      	str	r6, [r0, #0]
 800d09e:	60c6      	str	r6, [r0, #12]
 800d0a0:	b13c      	cbz	r4, 800d0b2 <_Bfree+0x3a>
 800d0a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0a4:	6862      	ldr	r2, [r4, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0ac:	6021      	str	r1, [r4, #0]
 800d0ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}
 800d0b4:	0800e986 	.word	0x0800e986
 800d0b8:	0800eaf0 	.word	0x0800eaf0

0800d0bc <__multadd>:
 800d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c0:	690e      	ldr	r6, [r1, #16]
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	4698      	mov	r8, r3
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	f101 0014 	add.w	r0, r1, #20
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	6805      	ldr	r5, [r0, #0]
 800d0d0:	b2a9      	uxth	r1, r5
 800d0d2:	fb02 8101 	mla	r1, r2, r1, r8
 800d0d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d0da:	0c2d      	lsrs	r5, r5, #16
 800d0dc:	fb02 c505 	mla	r5, r2, r5, ip
 800d0e0:	b289      	uxth	r1, r1
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d0e8:	429e      	cmp	r6, r3
 800d0ea:	f840 1b04 	str.w	r1, [r0], #4
 800d0ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d0f2:	dcec      	bgt.n	800d0ce <__multadd+0x12>
 800d0f4:	f1b8 0f00 	cmp.w	r8, #0
 800d0f8:	d022      	beq.n	800d140 <__multadd+0x84>
 800d0fa:	68a3      	ldr	r3, [r4, #8]
 800d0fc:	42b3      	cmp	r3, r6
 800d0fe:	dc19      	bgt.n	800d134 <__multadd+0x78>
 800d100:	6861      	ldr	r1, [r4, #4]
 800d102:	4638      	mov	r0, r7
 800d104:	3101      	adds	r1, #1
 800d106:	f7ff ff77 	bl	800cff8 <_Balloc>
 800d10a:	4605      	mov	r5, r0
 800d10c:	b928      	cbnz	r0, 800d11a <__multadd+0x5e>
 800d10e:	4602      	mov	r2, r0
 800d110:	4b0d      	ldr	r3, [pc, #52]	; (800d148 <__multadd+0x8c>)
 800d112:	480e      	ldr	r0, [pc, #56]	; (800d14c <__multadd+0x90>)
 800d114:	21b5      	movs	r1, #181	; 0xb5
 800d116:	f001 f827 	bl	800e168 <__assert_func>
 800d11a:	6922      	ldr	r2, [r4, #16]
 800d11c:	3202      	adds	r2, #2
 800d11e:	f104 010c 	add.w	r1, r4, #12
 800d122:	0092      	lsls	r2, r2, #2
 800d124:	300c      	adds	r0, #12
 800d126:	f7fc fc89 	bl	8009a3c <memcpy>
 800d12a:	4621      	mov	r1, r4
 800d12c:	4638      	mov	r0, r7
 800d12e:	f7ff ffa3 	bl	800d078 <_Bfree>
 800d132:	462c      	mov	r4, r5
 800d134:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d138:	3601      	adds	r6, #1
 800d13a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d13e:	6126      	str	r6, [r4, #16]
 800d140:	4620      	mov	r0, r4
 800d142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d146:	bf00      	nop
 800d148:	0800e9fc 	.word	0x0800e9fc
 800d14c:	0800eaf0 	.word	0x0800eaf0

0800d150 <__s2b>:
 800d150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d154:	460c      	mov	r4, r1
 800d156:	4615      	mov	r5, r2
 800d158:	461f      	mov	r7, r3
 800d15a:	2209      	movs	r2, #9
 800d15c:	3308      	adds	r3, #8
 800d15e:	4606      	mov	r6, r0
 800d160:	fb93 f3f2 	sdiv	r3, r3, r2
 800d164:	2100      	movs	r1, #0
 800d166:	2201      	movs	r2, #1
 800d168:	429a      	cmp	r2, r3
 800d16a:	db09      	blt.n	800d180 <__s2b+0x30>
 800d16c:	4630      	mov	r0, r6
 800d16e:	f7ff ff43 	bl	800cff8 <_Balloc>
 800d172:	b940      	cbnz	r0, 800d186 <__s2b+0x36>
 800d174:	4602      	mov	r2, r0
 800d176:	4b19      	ldr	r3, [pc, #100]	; (800d1dc <__s2b+0x8c>)
 800d178:	4819      	ldr	r0, [pc, #100]	; (800d1e0 <__s2b+0x90>)
 800d17a:	21ce      	movs	r1, #206	; 0xce
 800d17c:	f000 fff4 	bl	800e168 <__assert_func>
 800d180:	0052      	lsls	r2, r2, #1
 800d182:	3101      	adds	r1, #1
 800d184:	e7f0      	b.n	800d168 <__s2b+0x18>
 800d186:	9b08      	ldr	r3, [sp, #32]
 800d188:	6143      	str	r3, [r0, #20]
 800d18a:	2d09      	cmp	r5, #9
 800d18c:	f04f 0301 	mov.w	r3, #1
 800d190:	6103      	str	r3, [r0, #16]
 800d192:	dd16      	ble.n	800d1c2 <__s2b+0x72>
 800d194:	f104 0909 	add.w	r9, r4, #9
 800d198:	46c8      	mov	r8, r9
 800d19a:	442c      	add	r4, r5
 800d19c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1a0:	4601      	mov	r1, r0
 800d1a2:	3b30      	subs	r3, #48	; 0x30
 800d1a4:	220a      	movs	r2, #10
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f7ff ff88 	bl	800d0bc <__multadd>
 800d1ac:	45a0      	cmp	r8, r4
 800d1ae:	d1f5      	bne.n	800d19c <__s2b+0x4c>
 800d1b0:	f1a5 0408 	sub.w	r4, r5, #8
 800d1b4:	444c      	add	r4, r9
 800d1b6:	1b2d      	subs	r5, r5, r4
 800d1b8:	1963      	adds	r3, r4, r5
 800d1ba:	42bb      	cmp	r3, r7
 800d1bc:	db04      	blt.n	800d1c8 <__s2b+0x78>
 800d1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c2:	340a      	adds	r4, #10
 800d1c4:	2509      	movs	r5, #9
 800d1c6:	e7f6      	b.n	800d1b6 <__s2b+0x66>
 800d1c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1cc:	4601      	mov	r1, r0
 800d1ce:	3b30      	subs	r3, #48	; 0x30
 800d1d0:	220a      	movs	r2, #10
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7ff ff72 	bl	800d0bc <__multadd>
 800d1d8:	e7ee      	b.n	800d1b8 <__s2b+0x68>
 800d1da:	bf00      	nop
 800d1dc:	0800e9fc 	.word	0x0800e9fc
 800d1e0:	0800eaf0 	.word	0x0800eaf0

0800d1e4 <__hi0bits>:
 800d1e4:	0c03      	lsrs	r3, r0, #16
 800d1e6:	041b      	lsls	r3, r3, #16
 800d1e8:	b9d3      	cbnz	r3, 800d220 <__hi0bits+0x3c>
 800d1ea:	0400      	lsls	r0, r0, #16
 800d1ec:	2310      	movs	r3, #16
 800d1ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1f2:	bf04      	itt	eq
 800d1f4:	0200      	lsleq	r0, r0, #8
 800d1f6:	3308      	addeq	r3, #8
 800d1f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1fc:	bf04      	itt	eq
 800d1fe:	0100      	lsleq	r0, r0, #4
 800d200:	3304      	addeq	r3, #4
 800d202:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d206:	bf04      	itt	eq
 800d208:	0080      	lsleq	r0, r0, #2
 800d20a:	3302      	addeq	r3, #2
 800d20c:	2800      	cmp	r0, #0
 800d20e:	db05      	blt.n	800d21c <__hi0bits+0x38>
 800d210:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d214:	f103 0301 	add.w	r3, r3, #1
 800d218:	bf08      	it	eq
 800d21a:	2320      	moveq	r3, #32
 800d21c:	4618      	mov	r0, r3
 800d21e:	4770      	bx	lr
 800d220:	2300      	movs	r3, #0
 800d222:	e7e4      	b.n	800d1ee <__hi0bits+0xa>

0800d224 <__lo0bits>:
 800d224:	6803      	ldr	r3, [r0, #0]
 800d226:	f013 0207 	ands.w	r2, r3, #7
 800d22a:	4601      	mov	r1, r0
 800d22c:	d00b      	beq.n	800d246 <__lo0bits+0x22>
 800d22e:	07da      	lsls	r2, r3, #31
 800d230:	d424      	bmi.n	800d27c <__lo0bits+0x58>
 800d232:	0798      	lsls	r0, r3, #30
 800d234:	bf49      	itett	mi
 800d236:	085b      	lsrmi	r3, r3, #1
 800d238:	089b      	lsrpl	r3, r3, #2
 800d23a:	2001      	movmi	r0, #1
 800d23c:	600b      	strmi	r3, [r1, #0]
 800d23e:	bf5c      	itt	pl
 800d240:	600b      	strpl	r3, [r1, #0]
 800d242:	2002      	movpl	r0, #2
 800d244:	4770      	bx	lr
 800d246:	b298      	uxth	r0, r3
 800d248:	b9b0      	cbnz	r0, 800d278 <__lo0bits+0x54>
 800d24a:	0c1b      	lsrs	r3, r3, #16
 800d24c:	2010      	movs	r0, #16
 800d24e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d252:	bf04      	itt	eq
 800d254:	0a1b      	lsreq	r3, r3, #8
 800d256:	3008      	addeq	r0, #8
 800d258:	071a      	lsls	r2, r3, #28
 800d25a:	bf04      	itt	eq
 800d25c:	091b      	lsreq	r3, r3, #4
 800d25e:	3004      	addeq	r0, #4
 800d260:	079a      	lsls	r2, r3, #30
 800d262:	bf04      	itt	eq
 800d264:	089b      	lsreq	r3, r3, #2
 800d266:	3002      	addeq	r0, #2
 800d268:	07da      	lsls	r2, r3, #31
 800d26a:	d403      	bmi.n	800d274 <__lo0bits+0x50>
 800d26c:	085b      	lsrs	r3, r3, #1
 800d26e:	f100 0001 	add.w	r0, r0, #1
 800d272:	d005      	beq.n	800d280 <__lo0bits+0x5c>
 800d274:	600b      	str	r3, [r1, #0]
 800d276:	4770      	bx	lr
 800d278:	4610      	mov	r0, r2
 800d27a:	e7e8      	b.n	800d24e <__lo0bits+0x2a>
 800d27c:	2000      	movs	r0, #0
 800d27e:	4770      	bx	lr
 800d280:	2020      	movs	r0, #32
 800d282:	4770      	bx	lr

0800d284 <__i2b>:
 800d284:	b510      	push	{r4, lr}
 800d286:	460c      	mov	r4, r1
 800d288:	2101      	movs	r1, #1
 800d28a:	f7ff feb5 	bl	800cff8 <_Balloc>
 800d28e:	4602      	mov	r2, r0
 800d290:	b928      	cbnz	r0, 800d29e <__i2b+0x1a>
 800d292:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <__i2b+0x24>)
 800d294:	4805      	ldr	r0, [pc, #20]	; (800d2ac <__i2b+0x28>)
 800d296:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d29a:	f000 ff65 	bl	800e168 <__assert_func>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	6144      	str	r4, [r0, #20]
 800d2a2:	6103      	str	r3, [r0, #16]
 800d2a4:	bd10      	pop	{r4, pc}
 800d2a6:	bf00      	nop
 800d2a8:	0800e9fc 	.word	0x0800e9fc
 800d2ac:	0800eaf0 	.word	0x0800eaf0

0800d2b0 <__multiply>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	4614      	mov	r4, r2
 800d2b6:	690a      	ldr	r2, [r1, #16]
 800d2b8:	6923      	ldr	r3, [r4, #16]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	bfb8      	it	lt
 800d2be:	460b      	movlt	r3, r1
 800d2c0:	460d      	mov	r5, r1
 800d2c2:	bfbc      	itt	lt
 800d2c4:	4625      	movlt	r5, r4
 800d2c6:	461c      	movlt	r4, r3
 800d2c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d2cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d2d0:	68ab      	ldr	r3, [r5, #8]
 800d2d2:	6869      	ldr	r1, [r5, #4]
 800d2d4:	eb0a 0709 	add.w	r7, sl, r9
 800d2d8:	42bb      	cmp	r3, r7
 800d2da:	b085      	sub	sp, #20
 800d2dc:	bfb8      	it	lt
 800d2de:	3101      	addlt	r1, #1
 800d2e0:	f7ff fe8a 	bl	800cff8 <_Balloc>
 800d2e4:	b930      	cbnz	r0, 800d2f4 <__multiply+0x44>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	4b42      	ldr	r3, [pc, #264]	; (800d3f4 <__multiply+0x144>)
 800d2ea:	4843      	ldr	r0, [pc, #268]	; (800d3f8 <__multiply+0x148>)
 800d2ec:	f240 115d 	movw	r1, #349	; 0x15d
 800d2f0:	f000 ff3a 	bl	800e168 <__assert_func>
 800d2f4:	f100 0614 	add.w	r6, r0, #20
 800d2f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d2fc:	4633      	mov	r3, r6
 800d2fe:	2200      	movs	r2, #0
 800d300:	4543      	cmp	r3, r8
 800d302:	d31e      	bcc.n	800d342 <__multiply+0x92>
 800d304:	f105 0c14 	add.w	ip, r5, #20
 800d308:	f104 0314 	add.w	r3, r4, #20
 800d30c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d310:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d314:	9202      	str	r2, [sp, #8]
 800d316:	ebac 0205 	sub.w	r2, ip, r5
 800d31a:	3a15      	subs	r2, #21
 800d31c:	f022 0203 	bic.w	r2, r2, #3
 800d320:	3204      	adds	r2, #4
 800d322:	f105 0115 	add.w	r1, r5, #21
 800d326:	458c      	cmp	ip, r1
 800d328:	bf38      	it	cc
 800d32a:	2204      	movcc	r2, #4
 800d32c:	9201      	str	r2, [sp, #4]
 800d32e:	9a02      	ldr	r2, [sp, #8]
 800d330:	9303      	str	r3, [sp, #12]
 800d332:	429a      	cmp	r2, r3
 800d334:	d808      	bhi.n	800d348 <__multiply+0x98>
 800d336:	2f00      	cmp	r7, #0
 800d338:	dc55      	bgt.n	800d3e6 <__multiply+0x136>
 800d33a:	6107      	str	r7, [r0, #16]
 800d33c:	b005      	add	sp, #20
 800d33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d342:	f843 2b04 	str.w	r2, [r3], #4
 800d346:	e7db      	b.n	800d300 <__multiply+0x50>
 800d348:	f8b3 a000 	ldrh.w	sl, [r3]
 800d34c:	f1ba 0f00 	cmp.w	sl, #0
 800d350:	d020      	beq.n	800d394 <__multiply+0xe4>
 800d352:	f105 0e14 	add.w	lr, r5, #20
 800d356:	46b1      	mov	r9, r6
 800d358:	2200      	movs	r2, #0
 800d35a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d35e:	f8d9 b000 	ldr.w	fp, [r9]
 800d362:	b2a1      	uxth	r1, r4
 800d364:	fa1f fb8b 	uxth.w	fp, fp
 800d368:	fb0a b101 	mla	r1, sl, r1, fp
 800d36c:	4411      	add	r1, r2
 800d36e:	f8d9 2000 	ldr.w	r2, [r9]
 800d372:	0c24      	lsrs	r4, r4, #16
 800d374:	0c12      	lsrs	r2, r2, #16
 800d376:	fb0a 2404 	mla	r4, sl, r4, r2
 800d37a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d37e:	b289      	uxth	r1, r1
 800d380:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d384:	45f4      	cmp	ip, lr
 800d386:	f849 1b04 	str.w	r1, [r9], #4
 800d38a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d38e:	d8e4      	bhi.n	800d35a <__multiply+0xaa>
 800d390:	9901      	ldr	r1, [sp, #4]
 800d392:	5072      	str	r2, [r6, r1]
 800d394:	9a03      	ldr	r2, [sp, #12]
 800d396:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d39a:	3304      	adds	r3, #4
 800d39c:	f1b9 0f00 	cmp.w	r9, #0
 800d3a0:	d01f      	beq.n	800d3e2 <__multiply+0x132>
 800d3a2:	6834      	ldr	r4, [r6, #0]
 800d3a4:	f105 0114 	add.w	r1, r5, #20
 800d3a8:	46b6      	mov	lr, r6
 800d3aa:	f04f 0a00 	mov.w	sl, #0
 800d3ae:	880a      	ldrh	r2, [r1, #0]
 800d3b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d3b4:	fb09 b202 	mla	r2, r9, r2, fp
 800d3b8:	4492      	add	sl, r2
 800d3ba:	b2a4      	uxth	r4, r4
 800d3bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d3c0:	f84e 4b04 	str.w	r4, [lr], #4
 800d3c4:	f851 4b04 	ldr.w	r4, [r1], #4
 800d3c8:	f8be 2000 	ldrh.w	r2, [lr]
 800d3cc:	0c24      	lsrs	r4, r4, #16
 800d3ce:	fb09 2404 	mla	r4, r9, r4, r2
 800d3d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d3d6:	458c      	cmp	ip, r1
 800d3d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3dc:	d8e7      	bhi.n	800d3ae <__multiply+0xfe>
 800d3de:	9a01      	ldr	r2, [sp, #4]
 800d3e0:	50b4      	str	r4, [r6, r2]
 800d3e2:	3604      	adds	r6, #4
 800d3e4:	e7a3      	b.n	800d32e <__multiply+0x7e>
 800d3e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1a5      	bne.n	800d33a <__multiply+0x8a>
 800d3ee:	3f01      	subs	r7, #1
 800d3f0:	e7a1      	b.n	800d336 <__multiply+0x86>
 800d3f2:	bf00      	nop
 800d3f4:	0800e9fc 	.word	0x0800e9fc
 800d3f8:	0800eaf0 	.word	0x0800eaf0

0800d3fc <__pow5mult>:
 800d3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d400:	4615      	mov	r5, r2
 800d402:	f012 0203 	ands.w	r2, r2, #3
 800d406:	4606      	mov	r6, r0
 800d408:	460f      	mov	r7, r1
 800d40a:	d007      	beq.n	800d41c <__pow5mult+0x20>
 800d40c:	4c25      	ldr	r4, [pc, #148]	; (800d4a4 <__pow5mult+0xa8>)
 800d40e:	3a01      	subs	r2, #1
 800d410:	2300      	movs	r3, #0
 800d412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d416:	f7ff fe51 	bl	800d0bc <__multadd>
 800d41a:	4607      	mov	r7, r0
 800d41c:	10ad      	asrs	r5, r5, #2
 800d41e:	d03d      	beq.n	800d49c <__pow5mult+0xa0>
 800d420:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d422:	b97c      	cbnz	r4, 800d444 <__pow5mult+0x48>
 800d424:	2010      	movs	r0, #16
 800d426:	f7ff fdcd 	bl	800cfc4 <malloc>
 800d42a:	4602      	mov	r2, r0
 800d42c:	6270      	str	r0, [r6, #36]	; 0x24
 800d42e:	b928      	cbnz	r0, 800d43c <__pow5mult+0x40>
 800d430:	4b1d      	ldr	r3, [pc, #116]	; (800d4a8 <__pow5mult+0xac>)
 800d432:	481e      	ldr	r0, [pc, #120]	; (800d4ac <__pow5mult+0xb0>)
 800d434:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d438:	f000 fe96 	bl	800e168 <__assert_func>
 800d43c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d440:	6004      	str	r4, [r0, #0]
 800d442:	60c4      	str	r4, [r0, #12]
 800d444:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d44c:	b94c      	cbnz	r4, 800d462 <__pow5mult+0x66>
 800d44e:	f240 2171 	movw	r1, #625	; 0x271
 800d452:	4630      	mov	r0, r6
 800d454:	f7ff ff16 	bl	800d284 <__i2b>
 800d458:	2300      	movs	r3, #0
 800d45a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d45e:	4604      	mov	r4, r0
 800d460:	6003      	str	r3, [r0, #0]
 800d462:	f04f 0900 	mov.w	r9, #0
 800d466:	07eb      	lsls	r3, r5, #31
 800d468:	d50a      	bpl.n	800d480 <__pow5mult+0x84>
 800d46a:	4639      	mov	r1, r7
 800d46c:	4622      	mov	r2, r4
 800d46e:	4630      	mov	r0, r6
 800d470:	f7ff ff1e 	bl	800d2b0 <__multiply>
 800d474:	4639      	mov	r1, r7
 800d476:	4680      	mov	r8, r0
 800d478:	4630      	mov	r0, r6
 800d47a:	f7ff fdfd 	bl	800d078 <_Bfree>
 800d47e:	4647      	mov	r7, r8
 800d480:	106d      	asrs	r5, r5, #1
 800d482:	d00b      	beq.n	800d49c <__pow5mult+0xa0>
 800d484:	6820      	ldr	r0, [r4, #0]
 800d486:	b938      	cbnz	r0, 800d498 <__pow5mult+0x9c>
 800d488:	4622      	mov	r2, r4
 800d48a:	4621      	mov	r1, r4
 800d48c:	4630      	mov	r0, r6
 800d48e:	f7ff ff0f 	bl	800d2b0 <__multiply>
 800d492:	6020      	str	r0, [r4, #0]
 800d494:	f8c0 9000 	str.w	r9, [r0]
 800d498:	4604      	mov	r4, r0
 800d49a:	e7e4      	b.n	800d466 <__pow5mult+0x6a>
 800d49c:	4638      	mov	r0, r7
 800d49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4a2:	bf00      	nop
 800d4a4:	0800ec40 	.word	0x0800ec40
 800d4a8:	0800e986 	.word	0x0800e986
 800d4ac:	0800eaf0 	.word	0x0800eaf0

0800d4b0 <__lshift>:
 800d4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b4:	460c      	mov	r4, r1
 800d4b6:	6849      	ldr	r1, [r1, #4]
 800d4b8:	6923      	ldr	r3, [r4, #16]
 800d4ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	4607      	mov	r7, r0
 800d4c2:	4691      	mov	r9, r2
 800d4c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4c8:	f108 0601 	add.w	r6, r8, #1
 800d4cc:	42b3      	cmp	r3, r6
 800d4ce:	db0b      	blt.n	800d4e8 <__lshift+0x38>
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f7ff fd91 	bl	800cff8 <_Balloc>
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	b948      	cbnz	r0, 800d4ee <__lshift+0x3e>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	4b28      	ldr	r3, [pc, #160]	; (800d580 <__lshift+0xd0>)
 800d4de:	4829      	ldr	r0, [pc, #164]	; (800d584 <__lshift+0xd4>)
 800d4e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d4e4:	f000 fe40 	bl	800e168 <__assert_func>
 800d4e8:	3101      	adds	r1, #1
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	e7ee      	b.n	800d4cc <__lshift+0x1c>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	f100 0114 	add.w	r1, r0, #20
 800d4f4:	f100 0210 	add.w	r2, r0, #16
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	4553      	cmp	r3, sl
 800d4fc:	db33      	blt.n	800d566 <__lshift+0xb6>
 800d4fe:	6920      	ldr	r0, [r4, #16]
 800d500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d504:	f104 0314 	add.w	r3, r4, #20
 800d508:	f019 091f 	ands.w	r9, r9, #31
 800d50c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d510:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d514:	d02b      	beq.n	800d56e <__lshift+0xbe>
 800d516:	f1c9 0e20 	rsb	lr, r9, #32
 800d51a:	468a      	mov	sl, r1
 800d51c:	2200      	movs	r2, #0
 800d51e:	6818      	ldr	r0, [r3, #0]
 800d520:	fa00 f009 	lsl.w	r0, r0, r9
 800d524:	4302      	orrs	r2, r0
 800d526:	f84a 2b04 	str.w	r2, [sl], #4
 800d52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52e:	459c      	cmp	ip, r3
 800d530:	fa22 f20e 	lsr.w	r2, r2, lr
 800d534:	d8f3      	bhi.n	800d51e <__lshift+0x6e>
 800d536:	ebac 0304 	sub.w	r3, ip, r4
 800d53a:	3b15      	subs	r3, #21
 800d53c:	f023 0303 	bic.w	r3, r3, #3
 800d540:	3304      	adds	r3, #4
 800d542:	f104 0015 	add.w	r0, r4, #21
 800d546:	4584      	cmp	ip, r0
 800d548:	bf38      	it	cc
 800d54a:	2304      	movcc	r3, #4
 800d54c:	50ca      	str	r2, [r1, r3]
 800d54e:	b10a      	cbz	r2, 800d554 <__lshift+0xa4>
 800d550:	f108 0602 	add.w	r6, r8, #2
 800d554:	3e01      	subs	r6, #1
 800d556:	4638      	mov	r0, r7
 800d558:	612e      	str	r6, [r5, #16]
 800d55a:	4621      	mov	r1, r4
 800d55c:	f7ff fd8c 	bl	800d078 <_Bfree>
 800d560:	4628      	mov	r0, r5
 800d562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d566:	f842 0f04 	str.w	r0, [r2, #4]!
 800d56a:	3301      	adds	r3, #1
 800d56c:	e7c5      	b.n	800d4fa <__lshift+0x4a>
 800d56e:	3904      	subs	r1, #4
 800d570:	f853 2b04 	ldr.w	r2, [r3], #4
 800d574:	f841 2f04 	str.w	r2, [r1, #4]!
 800d578:	459c      	cmp	ip, r3
 800d57a:	d8f9      	bhi.n	800d570 <__lshift+0xc0>
 800d57c:	e7ea      	b.n	800d554 <__lshift+0xa4>
 800d57e:	bf00      	nop
 800d580:	0800e9fc 	.word	0x0800e9fc
 800d584:	0800eaf0 	.word	0x0800eaf0

0800d588 <__mcmp>:
 800d588:	b530      	push	{r4, r5, lr}
 800d58a:	6902      	ldr	r2, [r0, #16]
 800d58c:	690c      	ldr	r4, [r1, #16]
 800d58e:	1b12      	subs	r2, r2, r4
 800d590:	d10e      	bne.n	800d5b0 <__mcmp+0x28>
 800d592:	f100 0314 	add.w	r3, r0, #20
 800d596:	3114      	adds	r1, #20
 800d598:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d59c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5a8:	42a5      	cmp	r5, r4
 800d5aa:	d003      	beq.n	800d5b4 <__mcmp+0x2c>
 800d5ac:	d305      	bcc.n	800d5ba <__mcmp+0x32>
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	bd30      	pop	{r4, r5, pc}
 800d5b4:	4283      	cmp	r3, r0
 800d5b6:	d3f3      	bcc.n	800d5a0 <__mcmp+0x18>
 800d5b8:	e7fa      	b.n	800d5b0 <__mcmp+0x28>
 800d5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d5be:	e7f7      	b.n	800d5b0 <__mcmp+0x28>

0800d5c0 <__mdiff>:
 800d5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	460c      	mov	r4, r1
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	4617      	mov	r7, r2
 800d5ce:	f7ff ffdb 	bl	800d588 <__mcmp>
 800d5d2:	1e05      	subs	r5, r0, #0
 800d5d4:	d110      	bne.n	800d5f8 <__mdiff+0x38>
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7ff fd0d 	bl	800cff8 <_Balloc>
 800d5de:	b930      	cbnz	r0, 800d5ee <__mdiff+0x2e>
 800d5e0:	4b39      	ldr	r3, [pc, #228]	; (800d6c8 <__mdiff+0x108>)
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	f240 2132 	movw	r1, #562	; 0x232
 800d5e8:	4838      	ldr	r0, [pc, #224]	; (800d6cc <__mdiff+0x10c>)
 800d5ea:	f000 fdbd 	bl	800e168 <__assert_func>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f8:	bfa4      	itt	ge
 800d5fa:	463b      	movge	r3, r7
 800d5fc:	4627      	movge	r7, r4
 800d5fe:	4630      	mov	r0, r6
 800d600:	6879      	ldr	r1, [r7, #4]
 800d602:	bfa6      	itte	ge
 800d604:	461c      	movge	r4, r3
 800d606:	2500      	movge	r5, #0
 800d608:	2501      	movlt	r5, #1
 800d60a:	f7ff fcf5 	bl	800cff8 <_Balloc>
 800d60e:	b920      	cbnz	r0, 800d61a <__mdiff+0x5a>
 800d610:	4b2d      	ldr	r3, [pc, #180]	; (800d6c8 <__mdiff+0x108>)
 800d612:	4602      	mov	r2, r0
 800d614:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d618:	e7e6      	b.n	800d5e8 <__mdiff+0x28>
 800d61a:	693e      	ldr	r6, [r7, #16]
 800d61c:	60c5      	str	r5, [r0, #12]
 800d61e:	6925      	ldr	r5, [r4, #16]
 800d620:	f107 0114 	add.w	r1, r7, #20
 800d624:	f104 0914 	add.w	r9, r4, #20
 800d628:	f100 0e14 	add.w	lr, r0, #20
 800d62c:	f107 0210 	add.w	r2, r7, #16
 800d630:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d634:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d638:	46f2      	mov	sl, lr
 800d63a:	2700      	movs	r7, #0
 800d63c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d644:	fa1f f883 	uxth.w	r8, r3
 800d648:	fa17 f78b 	uxtah	r7, r7, fp
 800d64c:	0c1b      	lsrs	r3, r3, #16
 800d64e:	eba7 0808 	sub.w	r8, r7, r8
 800d652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d65a:	fa1f f888 	uxth.w	r8, r8
 800d65e:	141f      	asrs	r7, r3, #16
 800d660:	454d      	cmp	r5, r9
 800d662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d666:	f84a 3b04 	str.w	r3, [sl], #4
 800d66a:	d8e7      	bhi.n	800d63c <__mdiff+0x7c>
 800d66c:	1b2b      	subs	r3, r5, r4
 800d66e:	3b15      	subs	r3, #21
 800d670:	f023 0303 	bic.w	r3, r3, #3
 800d674:	3304      	adds	r3, #4
 800d676:	3415      	adds	r4, #21
 800d678:	42a5      	cmp	r5, r4
 800d67a:	bf38      	it	cc
 800d67c:	2304      	movcc	r3, #4
 800d67e:	4419      	add	r1, r3
 800d680:	4473      	add	r3, lr
 800d682:	469e      	mov	lr, r3
 800d684:	460d      	mov	r5, r1
 800d686:	4565      	cmp	r5, ip
 800d688:	d30e      	bcc.n	800d6a8 <__mdiff+0xe8>
 800d68a:	f10c 0203 	add.w	r2, ip, #3
 800d68e:	1a52      	subs	r2, r2, r1
 800d690:	f022 0203 	bic.w	r2, r2, #3
 800d694:	3903      	subs	r1, #3
 800d696:	458c      	cmp	ip, r1
 800d698:	bf38      	it	cc
 800d69a:	2200      	movcc	r2, #0
 800d69c:	441a      	add	r2, r3
 800d69e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d6a2:	b17b      	cbz	r3, 800d6c4 <__mdiff+0x104>
 800d6a4:	6106      	str	r6, [r0, #16]
 800d6a6:	e7a5      	b.n	800d5f4 <__mdiff+0x34>
 800d6a8:	f855 8b04 	ldr.w	r8, [r5], #4
 800d6ac:	fa17 f488 	uxtah	r4, r7, r8
 800d6b0:	1422      	asrs	r2, r4, #16
 800d6b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d6b6:	b2a4      	uxth	r4, r4
 800d6b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d6bc:	f84e 4b04 	str.w	r4, [lr], #4
 800d6c0:	1417      	asrs	r7, r2, #16
 800d6c2:	e7e0      	b.n	800d686 <__mdiff+0xc6>
 800d6c4:	3e01      	subs	r6, #1
 800d6c6:	e7ea      	b.n	800d69e <__mdiff+0xde>
 800d6c8:	0800e9fc 	.word	0x0800e9fc
 800d6cc:	0800eaf0 	.word	0x0800eaf0

0800d6d0 <__ulp>:
 800d6d0:	b082      	sub	sp, #8
 800d6d2:	ed8d 0b00 	vstr	d0, [sp]
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	4912      	ldr	r1, [pc, #72]	; (800d724 <__ulp+0x54>)
 800d6da:	4019      	ands	r1, r3
 800d6dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d6e0:	2900      	cmp	r1, #0
 800d6e2:	dd05      	ble.n	800d6f0 <__ulp+0x20>
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	ec43 2b10 	vmov	d0, r2, r3
 800d6ec:	b002      	add	sp, #8
 800d6ee:	4770      	bx	lr
 800d6f0:	4249      	negs	r1, r1
 800d6f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d6f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d6fa:	f04f 0200 	mov.w	r2, #0
 800d6fe:	f04f 0300 	mov.w	r3, #0
 800d702:	da04      	bge.n	800d70e <__ulp+0x3e>
 800d704:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d708:	fa41 f300 	asr.w	r3, r1, r0
 800d70c:	e7ec      	b.n	800d6e8 <__ulp+0x18>
 800d70e:	f1a0 0114 	sub.w	r1, r0, #20
 800d712:	291e      	cmp	r1, #30
 800d714:	bfda      	itte	le
 800d716:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d71a:	fa20 f101 	lsrle.w	r1, r0, r1
 800d71e:	2101      	movgt	r1, #1
 800d720:	460a      	mov	r2, r1
 800d722:	e7e1      	b.n	800d6e8 <__ulp+0x18>
 800d724:	7ff00000 	.word	0x7ff00000

0800d728 <__b2d>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	6905      	ldr	r5, [r0, #16]
 800d72c:	f100 0714 	add.w	r7, r0, #20
 800d730:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d734:	1f2e      	subs	r6, r5, #4
 800d736:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d73a:	4620      	mov	r0, r4
 800d73c:	f7ff fd52 	bl	800d1e4 <__hi0bits>
 800d740:	f1c0 0320 	rsb	r3, r0, #32
 800d744:	280a      	cmp	r0, #10
 800d746:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d7c4 <__b2d+0x9c>
 800d74a:	600b      	str	r3, [r1, #0]
 800d74c:	dc14      	bgt.n	800d778 <__b2d+0x50>
 800d74e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d752:	fa24 f10e 	lsr.w	r1, r4, lr
 800d756:	42b7      	cmp	r7, r6
 800d758:	ea41 030c 	orr.w	r3, r1, ip
 800d75c:	bf34      	ite	cc
 800d75e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d762:	2100      	movcs	r1, #0
 800d764:	3015      	adds	r0, #21
 800d766:	fa04 f000 	lsl.w	r0, r4, r0
 800d76a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d76e:	ea40 0201 	orr.w	r2, r0, r1
 800d772:	ec43 2b10 	vmov	d0, r2, r3
 800d776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d778:	42b7      	cmp	r7, r6
 800d77a:	bf3a      	itte	cc
 800d77c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d780:	f1a5 0608 	subcc.w	r6, r5, #8
 800d784:	2100      	movcs	r1, #0
 800d786:	380b      	subs	r0, #11
 800d788:	d017      	beq.n	800d7ba <__b2d+0x92>
 800d78a:	f1c0 0c20 	rsb	ip, r0, #32
 800d78e:	fa04 f500 	lsl.w	r5, r4, r0
 800d792:	42be      	cmp	r6, r7
 800d794:	fa21 f40c 	lsr.w	r4, r1, ip
 800d798:	ea45 0504 	orr.w	r5, r5, r4
 800d79c:	bf8c      	ite	hi
 800d79e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d7a2:	2400      	movls	r4, #0
 800d7a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d7a8:	fa01 f000 	lsl.w	r0, r1, r0
 800d7ac:	fa24 f40c 	lsr.w	r4, r4, ip
 800d7b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d7b4:	ea40 0204 	orr.w	r2, r0, r4
 800d7b8:	e7db      	b.n	800d772 <__b2d+0x4a>
 800d7ba:	ea44 030c 	orr.w	r3, r4, ip
 800d7be:	460a      	mov	r2, r1
 800d7c0:	e7d7      	b.n	800d772 <__b2d+0x4a>
 800d7c2:	bf00      	nop
 800d7c4:	3ff00000 	.word	0x3ff00000

0800d7c8 <__d2b>:
 800d7c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7cc:	4689      	mov	r9, r1
 800d7ce:	2101      	movs	r1, #1
 800d7d0:	ec57 6b10 	vmov	r6, r7, d0
 800d7d4:	4690      	mov	r8, r2
 800d7d6:	f7ff fc0f 	bl	800cff8 <_Balloc>
 800d7da:	4604      	mov	r4, r0
 800d7dc:	b930      	cbnz	r0, 800d7ec <__d2b+0x24>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	4b25      	ldr	r3, [pc, #148]	; (800d878 <__d2b+0xb0>)
 800d7e2:	4826      	ldr	r0, [pc, #152]	; (800d87c <__d2b+0xb4>)
 800d7e4:	f240 310a 	movw	r1, #778	; 0x30a
 800d7e8:	f000 fcbe 	bl	800e168 <__assert_func>
 800d7ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d7f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7f4:	bb35      	cbnz	r5, 800d844 <__d2b+0x7c>
 800d7f6:	2e00      	cmp	r6, #0
 800d7f8:	9301      	str	r3, [sp, #4]
 800d7fa:	d028      	beq.n	800d84e <__d2b+0x86>
 800d7fc:	4668      	mov	r0, sp
 800d7fe:	9600      	str	r6, [sp, #0]
 800d800:	f7ff fd10 	bl	800d224 <__lo0bits>
 800d804:	9900      	ldr	r1, [sp, #0]
 800d806:	b300      	cbz	r0, 800d84a <__d2b+0x82>
 800d808:	9a01      	ldr	r2, [sp, #4]
 800d80a:	f1c0 0320 	rsb	r3, r0, #32
 800d80e:	fa02 f303 	lsl.w	r3, r2, r3
 800d812:	430b      	orrs	r3, r1
 800d814:	40c2      	lsrs	r2, r0
 800d816:	6163      	str	r3, [r4, #20]
 800d818:	9201      	str	r2, [sp, #4]
 800d81a:	9b01      	ldr	r3, [sp, #4]
 800d81c:	61a3      	str	r3, [r4, #24]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bf14      	ite	ne
 800d822:	2202      	movne	r2, #2
 800d824:	2201      	moveq	r2, #1
 800d826:	6122      	str	r2, [r4, #16]
 800d828:	b1d5      	cbz	r5, 800d860 <__d2b+0x98>
 800d82a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d82e:	4405      	add	r5, r0
 800d830:	f8c9 5000 	str.w	r5, [r9]
 800d834:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d838:	f8c8 0000 	str.w	r0, [r8]
 800d83c:	4620      	mov	r0, r4
 800d83e:	b003      	add	sp, #12
 800d840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d848:	e7d5      	b.n	800d7f6 <__d2b+0x2e>
 800d84a:	6161      	str	r1, [r4, #20]
 800d84c:	e7e5      	b.n	800d81a <__d2b+0x52>
 800d84e:	a801      	add	r0, sp, #4
 800d850:	f7ff fce8 	bl	800d224 <__lo0bits>
 800d854:	9b01      	ldr	r3, [sp, #4]
 800d856:	6163      	str	r3, [r4, #20]
 800d858:	2201      	movs	r2, #1
 800d85a:	6122      	str	r2, [r4, #16]
 800d85c:	3020      	adds	r0, #32
 800d85e:	e7e3      	b.n	800d828 <__d2b+0x60>
 800d860:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d864:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d868:	f8c9 0000 	str.w	r0, [r9]
 800d86c:	6918      	ldr	r0, [r3, #16]
 800d86e:	f7ff fcb9 	bl	800d1e4 <__hi0bits>
 800d872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d876:	e7df      	b.n	800d838 <__d2b+0x70>
 800d878:	0800e9fc 	.word	0x0800e9fc
 800d87c:	0800eaf0 	.word	0x0800eaf0

0800d880 <__ratio>:
 800d880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	4688      	mov	r8, r1
 800d886:	4669      	mov	r1, sp
 800d888:	4681      	mov	r9, r0
 800d88a:	f7ff ff4d 	bl	800d728 <__b2d>
 800d88e:	a901      	add	r1, sp, #4
 800d890:	4640      	mov	r0, r8
 800d892:	ec55 4b10 	vmov	r4, r5, d0
 800d896:	f7ff ff47 	bl	800d728 <__b2d>
 800d89a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d89e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d8a2:	eba3 0c02 	sub.w	ip, r3, r2
 800d8a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8aa:	1a9b      	subs	r3, r3, r2
 800d8ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d8b0:	ec51 0b10 	vmov	r0, r1, d0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	bfd6      	itet	le
 800d8b8:	460a      	movle	r2, r1
 800d8ba:	462a      	movgt	r2, r5
 800d8bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8c0:	468b      	mov	fp, r1
 800d8c2:	462f      	mov	r7, r5
 800d8c4:	bfd4      	ite	le
 800d8c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	ee10 2a10 	vmov	r2, s0
 800d8d4:	465b      	mov	r3, fp
 800d8d6:	4639      	mov	r1, r7
 800d8d8:	f7f2 ffb8 	bl	800084c <__aeabi_ddiv>
 800d8dc:	ec41 0b10 	vmov	d0, r0, r1
 800d8e0:	b003      	add	sp, #12
 800d8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8e6 <__copybits>:
 800d8e6:	3901      	subs	r1, #1
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	1149      	asrs	r1, r1, #5
 800d8ec:	6914      	ldr	r4, [r2, #16]
 800d8ee:	3101      	adds	r1, #1
 800d8f0:	f102 0314 	add.w	r3, r2, #20
 800d8f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8fc:	1f05      	subs	r5, r0, #4
 800d8fe:	42a3      	cmp	r3, r4
 800d900:	d30c      	bcc.n	800d91c <__copybits+0x36>
 800d902:	1aa3      	subs	r3, r4, r2
 800d904:	3b11      	subs	r3, #17
 800d906:	f023 0303 	bic.w	r3, r3, #3
 800d90a:	3211      	adds	r2, #17
 800d90c:	42a2      	cmp	r2, r4
 800d90e:	bf88      	it	hi
 800d910:	2300      	movhi	r3, #0
 800d912:	4418      	add	r0, r3
 800d914:	2300      	movs	r3, #0
 800d916:	4288      	cmp	r0, r1
 800d918:	d305      	bcc.n	800d926 <__copybits+0x40>
 800d91a:	bd70      	pop	{r4, r5, r6, pc}
 800d91c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d920:	f845 6f04 	str.w	r6, [r5, #4]!
 800d924:	e7eb      	b.n	800d8fe <__copybits+0x18>
 800d926:	f840 3b04 	str.w	r3, [r0], #4
 800d92a:	e7f4      	b.n	800d916 <__copybits+0x30>

0800d92c <__any_on>:
 800d92c:	f100 0214 	add.w	r2, r0, #20
 800d930:	6900      	ldr	r0, [r0, #16]
 800d932:	114b      	asrs	r3, r1, #5
 800d934:	4298      	cmp	r0, r3
 800d936:	b510      	push	{r4, lr}
 800d938:	db11      	blt.n	800d95e <__any_on+0x32>
 800d93a:	dd0a      	ble.n	800d952 <__any_on+0x26>
 800d93c:	f011 011f 	ands.w	r1, r1, #31
 800d940:	d007      	beq.n	800d952 <__any_on+0x26>
 800d942:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d946:	fa24 f001 	lsr.w	r0, r4, r1
 800d94a:	fa00 f101 	lsl.w	r1, r0, r1
 800d94e:	428c      	cmp	r4, r1
 800d950:	d10b      	bne.n	800d96a <__any_on+0x3e>
 800d952:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d956:	4293      	cmp	r3, r2
 800d958:	d803      	bhi.n	800d962 <__any_on+0x36>
 800d95a:	2000      	movs	r0, #0
 800d95c:	bd10      	pop	{r4, pc}
 800d95e:	4603      	mov	r3, r0
 800d960:	e7f7      	b.n	800d952 <__any_on+0x26>
 800d962:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d966:	2900      	cmp	r1, #0
 800d968:	d0f5      	beq.n	800d956 <__any_on+0x2a>
 800d96a:	2001      	movs	r0, #1
 800d96c:	e7f6      	b.n	800d95c <__any_on+0x30>

0800d96e <_calloc_r>:
 800d96e:	b513      	push	{r0, r1, r4, lr}
 800d970:	434a      	muls	r2, r1
 800d972:	4611      	mov	r1, r2
 800d974:	9201      	str	r2, [sp, #4]
 800d976:	f000 f859 	bl	800da2c <_malloc_r>
 800d97a:	4604      	mov	r4, r0
 800d97c:	b118      	cbz	r0, 800d986 <_calloc_r+0x18>
 800d97e:	9a01      	ldr	r2, [sp, #4]
 800d980:	2100      	movs	r1, #0
 800d982:	f7fc f869 	bl	8009a58 <memset>
 800d986:	4620      	mov	r0, r4
 800d988:	b002      	add	sp, #8
 800d98a:	bd10      	pop	{r4, pc}

0800d98c <_free_r>:
 800d98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d98e:	2900      	cmp	r1, #0
 800d990:	d048      	beq.n	800da24 <_free_r+0x98>
 800d992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d996:	9001      	str	r0, [sp, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f1a1 0404 	sub.w	r4, r1, #4
 800d99e:	bfb8      	it	lt
 800d9a0:	18e4      	addlt	r4, r4, r3
 800d9a2:	f000 fc6f 	bl	800e284 <__malloc_lock>
 800d9a6:	4a20      	ldr	r2, [pc, #128]	; (800da28 <_free_r+0x9c>)
 800d9a8:	9801      	ldr	r0, [sp, #4]
 800d9aa:	6813      	ldr	r3, [r2, #0]
 800d9ac:	4615      	mov	r5, r2
 800d9ae:	b933      	cbnz	r3, 800d9be <_free_r+0x32>
 800d9b0:	6063      	str	r3, [r4, #4]
 800d9b2:	6014      	str	r4, [r2, #0]
 800d9b4:	b003      	add	sp, #12
 800d9b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9ba:	f000 bc69 	b.w	800e290 <__malloc_unlock>
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	d90b      	bls.n	800d9da <_free_r+0x4e>
 800d9c2:	6821      	ldr	r1, [r4, #0]
 800d9c4:	1862      	adds	r2, r4, r1
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	bf04      	itt	eq
 800d9ca:	681a      	ldreq	r2, [r3, #0]
 800d9cc:	685b      	ldreq	r3, [r3, #4]
 800d9ce:	6063      	str	r3, [r4, #4]
 800d9d0:	bf04      	itt	eq
 800d9d2:	1852      	addeq	r2, r2, r1
 800d9d4:	6022      	streq	r2, [r4, #0]
 800d9d6:	602c      	str	r4, [r5, #0]
 800d9d8:	e7ec      	b.n	800d9b4 <_free_r+0x28>
 800d9da:	461a      	mov	r2, r3
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	b10b      	cbz	r3, 800d9e4 <_free_r+0x58>
 800d9e0:	42a3      	cmp	r3, r4
 800d9e2:	d9fa      	bls.n	800d9da <_free_r+0x4e>
 800d9e4:	6811      	ldr	r1, [r2, #0]
 800d9e6:	1855      	adds	r5, r2, r1
 800d9e8:	42a5      	cmp	r5, r4
 800d9ea:	d10b      	bne.n	800da04 <_free_r+0x78>
 800d9ec:	6824      	ldr	r4, [r4, #0]
 800d9ee:	4421      	add	r1, r4
 800d9f0:	1854      	adds	r4, r2, r1
 800d9f2:	42a3      	cmp	r3, r4
 800d9f4:	6011      	str	r1, [r2, #0]
 800d9f6:	d1dd      	bne.n	800d9b4 <_free_r+0x28>
 800d9f8:	681c      	ldr	r4, [r3, #0]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	6053      	str	r3, [r2, #4]
 800d9fe:	4421      	add	r1, r4
 800da00:	6011      	str	r1, [r2, #0]
 800da02:	e7d7      	b.n	800d9b4 <_free_r+0x28>
 800da04:	d902      	bls.n	800da0c <_free_r+0x80>
 800da06:	230c      	movs	r3, #12
 800da08:	6003      	str	r3, [r0, #0]
 800da0a:	e7d3      	b.n	800d9b4 <_free_r+0x28>
 800da0c:	6825      	ldr	r5, [r4, #0]
 800da0e:	1961      	adds	r1, r4, r5
 800da10:	428b      	cmp	r3, r1
 800da12:	bf04      	itt	eq
 800da14:	6819      	ldreq	r1, [r3, #0]
 800da16:	685b      	ldreq	r3, [r3, #4]
 800da18:	6063      	str	r3, [r4, #4]
 800da1a:	bf04      	itt	eq
 800da1c:	1949      	addeq	r1, r1, r5
 800da1e:	6021      	streq	r1, [r4, #0]
 800da20:	6054      	str	r4, [r2, #4]
 800da22:	e7c7      	b.n	800d9b4 <_free_r+0x28>
 800da24:	b003      	add	sp, #12
 800da26:	bd30      	pop	{r4, r5, pc}
 800da28:	20000204 	.word	0x20000204

0800da2c <_malloc_r>:
 800da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2e:	1ccd      	adds	r5, r1, #3
 800da30:	f025 0503 	bic.w	r5, r5, #3
 800da34:	3508      	adds	r5, #8
 800da36:	2d0c      	cmp	r5, #12
 800da38:	bf38      	it	cc
 800da3a:	250c      	movcc	r5, #12
 800da3c:	2d00      	cmp	r5, #0
 800da3e:	4606      	mov	r6, r0
 800da40:	db01      	blt.n	800da46 <_malloc_r+0x1a>
 800da42:	42a9      	cmp	r1, r5
 800da44:	d903      	bls.n	800da4e <_malloc_r+0x22>
 800da46:	230c      	movs	r3, #12
 800da48:	6033      	str	r3, [r6, #0]
 800da4a:	2000      	movs	r0, #0
 800da4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da4e:	f000 fc19 	bl	800e284 <__malloc_lock>
 800da52:	4921      	ldr	r1, [pc, #132]	; (800dad8 <_malloc_r+0xac>)
 800da54:	680a      	ldr	r2, [r1, #0]
 800da56:	4614      	mov	r4, r2
 800da58:	b99c      	cbnz	r4, 800da82 <_malloc_r+0x56>
 800da5a:	4f20      	ldr	r7, [pc, #128]	; (800dadc <_malloc_r+0xb0>)
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	b923      	cbnz	r3, 800da6a <_malloc_r+0x3e>
 800da60:	4621      	mov	r1, r4
 800da62:	4630      	mov	r0, r6
 800da64:	f000 fafc 	bl	800e060 <_sbrk_r>
 800da68:	6038      	str	r0, [r7, #0]
 800da6a:	4629      	mov	r1, r5
 800da6c:	4630      	mov	r0, r6
 800da6e:	f000 faf7 	bl	800e060 <_sbrk_r>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	d123      	bne.n	800dabe <_malloc_r+0x92>
 800da76:	230c      	movs	r3, #12
 800da78:	6033      	str	r3, [r6, #0]
 800da7a:	4630      	mov	r0, r6
 800da7c:	f000 fc08 	bl	800e290 <__malloc_unlock>
 800da80:	e7e3      	b.n	800da4a <_malloc_r+0x1e>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	1b5b      	subs	r3, r3, r5
 800da86:	d417      	bmi.n	800dab8 <_malloc_r+0x8c>
 800da88:	2b0b      	cmp	r3, #11
 800da8a:	d903      	bls.n	800da94 <_malloc_r+0x68>
 800da8c:	6023      	str	r3, [r4, #0]
 800da8e:	441c      	add	r4, r3
 800da90:	6025      	str	r5, [r4, #0]
 800da92:	e004      	b.n	800da9e <_malloc_r+0x72>
 800da94:	6863      	ldr	r3, [r4, #4]
 800da96:	42a2      	cmp	r2, r4
 800da98:	bf0c      	ite	eq
 800da9a:	600b      	streq	r3, [r1, #0]
 800da9c:	6053      	strne	r3, [r2, #4]
 800da9e:	4630      	mov	r0, r6
 800daa0:	f000 fbf6 	bl	800e290 <__malloc_unlock>
 800daa4:	f104 000b 	add.w	r0, r4, #11
 800daa8:	1d23      	adds	r3, r4, #4
 800daaa:	f020 0007 	bic.w	r0, r0, #7
 800daae:	1ac2      	subs	r2, r0, r3
 800dab0:	d0cc      	beq.n	800da4c <_malloc_r+0x20>
 800dab2:	1a1b      	subs	r3, r3, r0
 800dab4:	50a3      	str	r3, [r4, r2]
 800dab6:	e7c9      	b.n	800da4c <_malloc_r+0x20>
 800dab8:	4622      	mov	r2, r4
 800daba:	6864      	ldr	r4, [r4, #4]
 800dabc:	e7cc      	b.n	800da58 <_malloc_r+0x2c>
 800dabe:	1cc4      	adds	r4, r0, #3
 800dac0:	f024 0403 	bic.w	r4, r4, #3
 800dac4:	42a0      	cmp	r0, r4
 800dac6:	d0e3      	beq.n	800da90 <_malloc_r+0x64>
 800dac8:	1a21      	subs	r1, r4, r0
 800daca:	4630      	mov	r0, r6
 800dacc:	f000 fac8 	bl	800e060 <_sbrk_r>
 800dad0:	3001      	adds	r0, #1
 800dad2:	d1dd      	bne.n	800da90 <_malloc_r+0x64>
 800dad4:	e7cf      	b.n	800da76 <_malloc_r+0x4a>
 800dad6:	bf00      	nop
 800dad8:	20000204 	.word	0x20000204
 800dadc:	20000208 	.word	0x20000208

0800dae0 <__ssputs_r>:
 800dae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae4:	688e      	ldr	r6, [r1, #8]
 800dae6:	429e      	cmp	r6, r3
 800dae8:	4682      	mov	sl, r0
 800daea:	460c      	mov	r4, r1
 800daec:	4690      	mov	r8, r2
 800daee:	461f      	mov	r7, r3
 800daf0:	d838      	bhi.n	800db64 <__ssputs_r+0x84>
 800daf2:	898a      	ldrh	r2, [r1, #12]
 800daf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800daf8:	d032      	beq.n	800db60 <__ssputs_r+0x80>
 800dafa:	6825      	ldr	r5, [r4, #0]
 800dafc:	6909      	ldr	r1, [r1, #16]
 800dafe:	eba5 0901 	sub.w	r9, r5, r1
 800db02:	6965      	ldr	r5, [r4, #20]
 800db04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db0c:	3301      	adds	r3, #1
 800db0e:	444b      	add	r3, r9
 800db10:	106d      	asrs	r5, r5, #1
 800db12:	429d      	cmp	r5, r3
 800db14:	bf38      	it	cc
 800db16:	461d      	movcc	r5, r3
 800db18:	0553      	lsls	r3, r2, #21
 800db1a:	d531      	bpl.n	800db80 <__ssputs_r+0xa0>
 800db1c:	4629      	mov	r1, r5
 800db1e:	f7ff ff85 	bl	800da2c <_malloc_r>
 800db22:	4606      	mov	r6, r0
 800db24:	b950      	cbnz	r0, 800db3c <__ssputs_r+0x5c>
 800db26:	230c      	movs	r3, #12
 800db28:	f8ca 3000 	str.w	r3, [sl]
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3c:	6921      	ldr	r1, [r4, #16]
 800db3e:	464a      	mov	r2, r9
 800db40:	f7fb ff7c 	bl	8009a3c <memcpy>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	6126      	str	r6, [r4, #16]
 800db52:	6165      	str	r5, [r4, #20]
 800db54:	444e      	add	r6, r9
 800db56:	eba5 0509 	sub.w	r5, r5, r9
 800db5a:	6026      	str	r6, [r4, #0]
 800db5c:	60a5      	str	r5, [r4, #8]
 800db5e:	463e      	mov	r6, r7
 800db60:	42be      	cmp	r6, r7
 800db62:	d900      	bls.n	800db66 <__ssputs_r+0x86>
 800db64:	463e      	mov	r6, r7
 800db66:	4632      	mov	r2, r6
 800db68:	6820      	ldr	r0, [r4, #0]
 800db6a:	4641      	mov	r1, r8
 800db6c:	f000 fb70 	bl	800e250 <memmove>
 800db70:	68a3      	ldr	r3, [r4, #8]
 800db72:	6822      	ldr	r2, [r4, #0]
 800db74:	1b9b      	subs	r3, r3, r6
 800db76:	4432      	add	r2, r6
 800db78:	60a3      	str	r3, [r4, #8]
 800db7a:	6022      	str	r2, [r4, #0]
 800db7c:	2000      	movs	r0, #0
 800db7e:	e7db      	b.n	800db38 <__ssputs_r+0x58>
 800db80:	462a      	mov	r2, r5
 800db82:	f000 fb8b 	bl	800e29c <_realloc_r>
 800db86:	4606      	mov	r6, r0
 800db88:	2800      	cmp	r0, #0
 800db8a:	d1e1      	bne.n	800db50 <__ssputs_r+0x70>
 800db8c:	6921      	ldr	r1, [r4, #16]
 800db8e:	4650      	mov	r0, sl
 800db90:	f7ff fefc 	bl	800d98c <_free_r>
 800db94:	e7c7      	b.n	800db26 <__ssputs_r+0x46>
	...

0800db98 <_svfiprintf_r>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	4698      	mov	r8, r3
 800db9e:	898b      	ldrh	r3, [r1, #12]
 800dba0:	061b      	lsls	r3, r3, #24
 800dba2:	b09d      	sub	sp, #116	; 0x74
 800dba4:	4607      	mov	r7, r0
 800dba6:	460d      	mov	r5, r1
 800dba8:	4614      	mov	r4, r2
 800dbaa:	d50e      	bpl.n	800dbca <_svfiprintf_r+0x32>
 800dbac:	690b      	ldr	r3, [r1, #16]
 800dbae:	b963      	cbnz	r3, 800dbca <_svfiprintf_r+0x32>
 800dbb0:	2140      	movs	r1, #64	; 0x40
 800dbb2:	f7ff ff3b 	bl	800da2c <_malloc_r>
 800dbb6:	6028      	str	r0, [r5, #0]
 800dbb8:	6128      	str	r0, [r5, #16]
 800dbba:	b920      	cbnz	r0, 800dbc6 <_svfiprintf_r+0x2e>
 800dbbc:	230c      	movs	r3, #12
 800dbbe:	603b      	str	r3, [r7, #0]
 800dbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc4:	e0d1      	b.n	800dd6a <_svfiprintf_r+0x1d2>
 800dbc6:	2340      	movs	r3, #64	; 0x40
 800dbc8:	616b      	str	r3, [r5, #20]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbce:	2320      	movs	r3, #32
 800dbd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbd8:	2330      	movs	r3, #48	; 0x30
 800dbda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd84 <_svfiprintf_r+0x1ec>
 800dbde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbe2:	f04f 0901 	mov.w	r9, #1
 800dbe6:	4623      	mov	r3, r4
 800dbe8:	469a      	mov	sl, r3
 800dbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbee:	b10a      	cbz	r2, 800dbf4 <_svfiprintf_r+0x5c>
 800dbf0:	2a25      	cmp	r2, #37	; 0x25
 800dbf2:	d1f9      	bne.n	800dbe8 <_svfiprintf_r+0x50>
 800dbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf8:	d00b      	beq.n	800dc12 <_svfiprintf_r+0x7a>
 800dbfa:	465b      	mov	r3, fp
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4638      	mov	r0, r7
 800dc02:	f7ff ff6d 	bl	800dae0 <__ssputs_r>
 800dc06:	3001      	adds	r0, #1
 800dc08:	f000 80aa 	beq.w	800dd60 <_svfiprintf_r+0x1c8>
 800dc0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc0e:	445a      	add	r2, fp
 800dc10:	9209      	str	r2, [sp, #36]	; 0x24
 800dc12:	f89a 3000 	ldrb.w	r3, [sl]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 80a2 	beq.w	800dd60 <_svfiprintf_r+0x1c8>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc26:	f10a 0a01 	add.w	sl, sl, #1
 800dc2a:	9304      	str	r3, [sp, #16]
 800dc2c:	9307      	str	r3, [sp, #28]
 800dc2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc32:	931a      	str	r3, [sp, #104]	; 0x68
 800dc34:	4654      	mov	r4, sl
 800dc36:	2205      	movs	r2, #5
 800dc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3c:	4851      	ldr	r0, [pc, #324]	; (800dd84 <_svfiprintf_r+0x1ec>)
 800dc3e:	f7f2 facf 	bl	80001e0 <memchr>
 800dc42:	9a04      	ldr	r2, [sp, #16]
 800dc44:	b9d8      	cbnz	r0, 800dc7e <_svfiprintf_r+0xe6>
 800dc46:	06d0      	lsls	r0, r2, #27
 800dc48:	bf44      	itt	mi
 800dc4a:	2320      	movmi	r3, #32
 800dc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc50:	0711      	lsls	r1, r2, #28
 800dc52:	bf44      	itt	mi
 800dc54:	232b      	movmi	r3, #43	; 0x2b
 800dc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc5e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc60:	d015      	beq.n	800dc8e <_svfiprintf_r+0xf6>
 800dc62:	9a07      	ldr	r2, [sp, #28]
 800dc64:	4654      	mov	r4, sl
 800dc66:	2000      	movs	r0, #0
 800dc68:	f04f 0c0a 	mov.w	ip, #10
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc72:	3b30      	subs	r3, #48	; 0x30
 800dc74:	2b09      	cmp	r3, #9
 800dc76:	d94e      	bls.n	800dd16 <_svfiprintf_r+0x17e>
 800dc78:	b1b0      	cbz	r0, 800dca8 <_svfiprintf_r+0x110>
 800dc7a:	9207      	str	r2, [sp, #28]
 800dc7c:	e014      	b.n	800dca8 <_svfiprintf_r+0x110>
 800dc7e:	eba0 0308 	sub.w	r3, r0, r8
 800dc82:	fa09 f303 	lsl.w	r3, r9, r3
 800dc86:	4313      	orrs	r3, r2
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	46a2      	mov	sl, r4
 800dc8c:	e7d2      	b.n	800dc34 <_svfiprintf_r+0x9c>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	1d19      	adds	r1, r3, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	9103      	str	r1, [sp, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfbb      	ittet	lt
 800dc9a:	425b      	neglt	r3, r3
 800dc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800dca0:	9307      	strge	r3, [sp, #28]
 800dca2:	9307      	strlt	r3, [sp, #28]
 800dca4:	bfb8      	it	lt
 800dca6:	9204      	strlt	r2, [sp, #16]
 800dca8:	7823      	ldrb	r3, [r4, #0]
 800dcaa:	2b2e      	cmp	r3, #46	; 0x2e
 800dcac:	d10c      	bne.n	800dcc8 <_svfiprintf_r+0x130>
 800dcae:	7863      	ldrb	r3, [r4, #1]
 800dcb0:	2b2a      	cmp	r3, #42	; 0x2a
 800dcb2:	d135      	bne.n	800dd20 <_svfiprintf_r+0x188>
 800dcb4:	9b03      	ldr	r3, [sp, #12]
 800dcb6:	1d1a      	adds	r2, r3, #4
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	9203      	str	r2, [sp, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	bfb8      	it	lt
 800dcc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcc4:	3402      	adds	r4, #2
 800dcc6:	9305      	str	r3, [sp, #20]
 800dcc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd94 <_svfiprintf_r+0x1fc>
 800dccc:	7821      	ldrb	r1, [r4, #0]
 800dcce:	2203      	movs	r2, #3
 800dcd0:	4650      	mov	r0, sl
 800dcd2:	f7f2 fa85 	bl	80001e0 <memchr>
 800dcd6:	b140      	cbz	r0, 800dcea <_svfiprintf_r+0x152>
 800dcd8:	2340      	movs	r3, #64	; 0x40
 800dcda:	eba0 000a 	sub.w	r0, r0, sl
 800dcde:	fa03 f000 	lsl.w	r0, r3, r0
 800dce2:	9b04      	ldr	r3, [sp, #16]
 800dce4:	4303      	orrs	r3, r0
 800dce6:	3401      	adds	r4, #1
 800dce8:	9304      	str	r3, [sp, #16]
 800dcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcee:	4826      	ldr	r0, [pc, #152]	; (800dd88 <_svfiprintf_r+0x1f0>)
 800dcf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcf4:	2206      	movs	r2, #6
 800dcf6:	f7f2 fa73 	bl	80001e0 <memchr>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d038      	beq.n	800dd70 <_svfiprintf_r+0x1d8>
 800dcfe:	4b23      	ldr	r3, [pc, #140]	; (800dd8c <_svfiprintf_r+0x1f4>)
 800dd00:	bb1b      	cbnz	r3, 800dd4a <_svfiprintf_r+0x1b2>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	3307      	adds	r3, #7
 800dd06:	f023 0307 	bic.w	r3, r3, #7
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	9303      	str	r3, [sp, #12]
 800dd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd10:	4433      	add	r3, r6
 800dd12:	9309      	str	r3, [sp, #36]	; 0x24
 800dd14:	e767      	b.n	800dbe6 <_svfiprintf_r+0x4e>
 800dd16:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	2001      	movs	r0, #1
 800dd1e:	e7a5      	b.n	800dc6c <_svfiprintf_r+0xd4>
 800dd20:	2300      	movs	r3, #0
 800dd22:	3401      	adds	r4, #1
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	4619      	mov	r1, r3
 800dd28:	f04f 0c0a 	mov.w	ip, #10
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd32:	3a30      	subs	r2, #48	; 0x30
 800dd34:	2a09      	cmp	r2, #9
 800dd36:	d903      	bls.n	800dd40 <_svfiprintf_r+0x1a8>
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0c5      	beq.n	800dcc8 <_svfiprintf_r+0x130>
 800dd3c:	9105      	str	r1, [sp, #20]
 800dd3e:	e7c3      	b.n	800dcc8 <_svfiprintf_r+0x130>
 800dd40:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd44:	4604      	mov	r4, r0
 800dd46:	2301      	movs	r3, #1
 800dd48:	e7f0      	b.n	800dd2c <_svfiprintf_r+0x194>
 800dd4a:	ab03      	add	r3, sp, #12
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	462a      	mov	r2, r5
 800dd50:	4b0f      	ldr	r3, [pc, #60]	; (800dd90 <_svfiprintf_r+0x1f8>)
 800dd52:	a904      	add	r1, sp, #16
 800dd54:	4638      	mov	r0, r7
 800dd56:	f7fb ff27 	bl	8009ba8 <_printf_float>
 800dd5a:	1c42      	adds	r2, r0, #1
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	d1d6      	bne.n	800dd0e <_svfiprintf_r+0x176>
 800dd60:	89ab      	ldrh	r3, [r5, #12]
 800dd62:	065b      	lsls	r3, r3, #25
 800dd64:	f53f af2c 	bmi.w	800dbc0 <_svfiprintf_r+0x28>
 800dd68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd6a:	b01d      	add	sp, #116	; 0x74
 800dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd70:	ab03      	add	r3, sp, #12
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	462a      	mov	r2, r5
 800dd76:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <_svfiprintf_r+0x1f8>)
 800dd78:	a904      	add	r1, sp, #16
 800dd7a:	4638      	mov	r0, r7
 800dd7c:	f7fc f9b8 	bl	800a0f0 <_printf_i>
 800dd80:	e7eb      	b.n	800dd5a <_svfiprintf_r+0x1c2>
 800dd82:	bf00      	nop
 800dd84:	0800ec4c 	.word	0x0800ec4c
 800dd88:	0800ec56 	.word	0x0800ec56
 800dd8c:	08009ba9 	.word	0x08009ba9
 800dd90:	0800dae1 	.word	0x0800dae1
 800dd94:	0800ec52 	.word	0x0800ec52

0800dd98 <__sfputc_r>:
 800dd98:	6893      	ldr	r3, [r2, #8]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	b410      	push	{r4}
 800dda0:	6093      	str	r3, [r2, #8]
 800dda2:	da08      	bge.n	800ddb6 <__sfputc_r+0x1e>
 800dda4:	6994      	ldr	r4, [r2, #24]
 800dda6:	42a3      	cmp	r3, r4
 800dda8:	db01      	blt.n	800ddae <__sfputc_r+0x16>
 800ddaa:	290a      	cmp	r1, #10
 800ddac:	d103      	bne.n	800ddb6 <__sfputc_r+0x1e>
 800ddae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb2:	f7fd bc3b 	b.w	800b62c <__swbuf_r>
 800ddb6:	6813      	ldr	r3, [r2, #0]
 800ddb8:	1c58      	adds	r0, r3, #1
 800ddba:	6010      	str	r0, [r2, #0]
 800ddbc:	7019      	strb	r1, [r3, #0]
 800ddbe:	4608      	mov	r0, r1
 800ddc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <__sfputs_r>:
 800ddc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc8:	4606      	mov	r6, r0
 800ddca:	460f      	mov	r7, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	18d5      	adds	r5, r2, r3
 800ddd0:	42ac      	cmp	r4, r5
 800ddd2:	d101      	bne.n	800ddd8 <__sfputs_r+0x12>
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	e007      	b.n	800dde8 <__sfputs_r+0x22>
 800ddd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dddc:	463a      	mov	r2, r7
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ffda 	bl	800dd98 <__sfputc_r>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d1f3      	bne.n	800ddd0 <__sfputs_r+0xa>
 800dde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddec <_vfiprintf_r>:
 800ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	460d      	mov	r5, r1
 800ddf2:	b09d      	sub	sp, #116	; 0x74
 800ddf4:	4614      	mov	r4, r2
 800ddf6:	4698      	mov	r8, r3
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	b118      	cbz	r0, 800de04 <_vfiprintf_r+0x18>
 800ddfc:	6983      	ldr	r3, [r0, #24]
 800ddfe:	b90b      	cbnz	r3, 800de04 <_vfiprintf_r+0x18>
 800de00:	f7fe fc68 	bl	800c6d4 <__sinit>
 800de04:	4b89      	ldr	r3, [pc, #548]	; (800e02c <_vfiprintf_r+0x240>)
 800de06:	429d      	cmp	r5, r3
 800de08:	d11b      	bne.n	800de42 <_vfiprintf_r+0x56>
 800de0a:	6875      	ldr	r5, [r6, #4]
 800de0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de0e:	07d9      	lsls	r1, r3, #31
 800de10:	d405      	bmi.n	800de1e <_vfiprintf_r+0x32>
 800de12:	89ab      	ldrh	r3, [r5, #12]
 800de14:	059a      	lsls	r2, r3, #22
 800de16:	d402      	bmi.n	800de1e <_vfiprintf_r+0x32>
 800de18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de1a:	f7ff f86c 	bl	800cef6 <__retarget_lock_acquire_recursive>
 800de1e:	89ab      	ldrh	r3, [r5, #12]
 800de20:	071b      	lsls	r3, r3, #28
 800de22:	d501      	bpl.n	800de28 <_vfiprintf_r+0x3c>
 800de24:	692b      	ldr	r3, [r5, #16]
 800de26:	b9eb      	cbnz	r3, 800de64 <_vfiprintf_r+0x78>
 800de28:	4629      	mov	r1, r5
 800de2a:	4630      	mov	r0, r6
 800de2c:	f7fd fc50 	bl	800b6d0 <__swsetup_r>
 800de30:	b1c0      	cbz	r0, 800de64 <_vfiprintf_r+0x78>
 800de32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de34:	07dc      	lsls	r4, r3, #31
 800de36:	d50e      	bpl.n	800de56 <_vfiprintf_r+0x6a>
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	b01d      	add	sp, #116	; 0x74
 800de3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de42:	4b7b      	ldr	r3, [pc, #492]	; (800e030 <_vfiprintf_r+0x244>)
 800de44:	429d      	cmp	r5, r3
 800de46:	d101      	bne.n	800de4c <_vfiprintf_r+0x60>
 800de48:	68b5      	ldr	r5, [r6, #8]
 800de4a:	e7df      	b.n	800de0c <_vfiprintf_r+0x20>
 800de4c:	4b79      	ldr	r3, [pc, #484]	; (800e034 <_vfiprintf_r+0x248>)
 800de4e:	429d      	cmp	r5, r3
 800de50:	bf08      	it	eq
 800de52:	68f5      	ldreq	r5, [r6, #12]
 800de54:	e7da      	b.n	800de0c <_vfiprintf_r+0x20>
 800de56:	89ab      	ldrh	r3, [r5, #12]
 800de58:	0598      	lsls	r0, r3, #22
 800de5a:	d4ed      	bmi.n	800de38 <_vfiprintf_r+0x4c>
 800de5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de5e:	f7ff f84b 	bl	800cef8 <__retarget_lock_release_recursive>
 800de62:	e7e9      	b.n	800de38 <_vfiprintf_r+0x4c>
 800de64:	2300      	movs	r3, #0
 800de66:	9309      	str	r3, [sp, #36]	; 0x24
 800de68:	2320      	movs	r3, #32
 800de6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de72:	2330      	movs	r3, #48	; 0x30
 800de74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e038 <_vfiprintf_r+0x24c>
 800de78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de7c:	f04f 0901 	mov.w	r9, #1
 800de80:	4623      	mov	r3, r4
 800de82:	469a      	mov	sl, r3
 800de84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de88:	b10a      	cbz	r2, 800de8e <_vfiprintf_r+0xa2>
 800de8a:	2a25      	cmp	r2, #37	; 0x25
 800de8c:	d1f9      	bne.n	800de82 <_vfiprintf_r+0x96>
 800de8e:	ebba 0b04 	subs.w	fp, sl, r4
 800de92:	d00b      	beq.n	800deac <_vfiprintf_r+0xc0>
 800de94:	465b      	mov	r3, fp
 800de96:	4622      	mov	r2, r4
 800de98:	4629      	mov	r1, r5
 800de9a:	4630      	mov	r0, r6
 800de9c:	f7ff ff93 	bl	800ddc6 <__sfputs_r>
 800dea0:	3001      	adds	r0, #1
 800dea2:	f000 80aa 	beq.w	800dffa <_vfiprintf_r+0x20e>
 800dea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dea8:	445a      	add	r2, fp
 800deaa:	9209      	str	r2, [sp, #36]	; 0x24
 800deac:	f89a 3000 	ldrb.w	r3, [sl]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 80a2 	beq.w	800dffa <_vfiprintf_r+0x20e>
 800deb6:	2300      	movs	r3, #0
 800deb8:	f04f 32ff 	mov.w	r2, #4294967295
 800debc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dec0:	f10a 0a01 	add.w	sl, sl, #1
 800dec4:	9304      	str	r3, [sp, #16]
 800dec6:	9307      	str	r3, [sp, #28]
 800dec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800decc:	931a      	str	r3, [sp, #104]	; 0x68
 800dece:	4654      	mov	r4, sl
 800ded0:	2205      	movs	r2, #5
 800ded2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded6:	4858      	ldr	r0, [pc, #352]	; (800e038 <_vfiprintf_r+0x24c>)
 800ded8:	f7f2 f982 	bl	80001e0 <memchr>
 800dedc:	9a04      	ldr	r2, [sp, #16]
 800dede:	b9d8      	cbnz	r0, 800df18 <_vfiprintf_r+0x12c>
 800dee0:	06d1      	lsls	r1, r2, #27
 800dee2:	bf44      	itt	mi
 800dee4:	2320      	movmi	r3, #32
 800dee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deea:	0713      	lsls	r3, r2, #28
 800deec:	bf44      	itt	mi
 800deee:	232b      	movmi	r3, #43	; 0x2b
 800def0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800def4:	f89a 3000 	ldrb.w	r3, [sl]
 800def8:	2b2a      	cmp	r3, #42	; 0x2a
 800defa:	d015      	beq.n	800df28 <_vfiprintf_r+0x13c>
 800defc:	9a07      	ldr	r2, [sp, #28]
 800defe:	4654      	mov	r4, sl
 800df00:	2000      	movs	r0, #0
 800df02:	f04f 0c0a 	mov.w	ip, #10
 800df06:	4621      	mov	r1, r4
 800df08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df0c:	3b30      	subs	r3, #48	; 0x30
 800df0e:	2b09      	cmp	r3, #9
 800df10:	d94e      	bls.n	800dfb0 <_vfiprintf_r+0x1c4>
 800df12:	b1b0      	cbz	r0, 800df42 <_vfiprintf_r+0x156>
 800df14:	9207      	str	r2, [sp, #28]
 800df16:	e014      	b.n	800df42 <_vfiprintf_r+0x156>
 800df18:	eba0 0308 	sub.w	r3, r0, r8
 800df1c:	fa09 f303 	lsl.w	r3, r9, r3
 800df20:	4313      	orrs	r3, r2
 800df22:	9304      	str	r3, [sp, #16]
 800df24:	46a2      	mov	sl, r4
 800df26:	e7d2      	b.n	800dece <_vfiprintf_r+0xe2>
 800df28:	9b03      	ldr	r3, [sp, #12]
 800df2a:	1d19      	adds	r1, r3, #4
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	9103      	str	r1, [sp, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	bfbb      	ittet	lt
 800df34:	425b      	neglt	r3, r3
 800df36:	f042 0202 	orrlt.w	r2, r2, #2
 800df3a:	9307      	strge	r3, [sp, #28]
 800df3c:	9307      	strlt	r3, [sp, #28]
 800df3e:	bfb8      	it	lt
 800df40:	9204      	strlt	r2, [sp, #16]
 800df42:	7823      	ldrb	r3, [r4, #0]
 800df44:	2b2e      	cmp	r3, #46	; 0x2e
 800df46:	d10c      	bne.n	800df62 <_vfiprintf_r+0x176>
 800df48:	7863      	ldrb	r3, [r4, #1]
 800df4a:	2b2a      	cmp	r3, #42	; 0x2a
 800df4c:	d135      	bne.n	800dfba <_vfiprintf_r+0x1ce>
 800df4e:	9b03      	ldr	r3, [sp, #12]
 800df50:	1d1a      	adds	r2, r3, #4
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	9203      	str	r2, [sp, #12]
 800df56:	2b00      	cmp	r3, #0
 800df58:	bfb8      	it	lt
 800df5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df5e:	3402      	adds	r4, #2
 800df60:	9305      	str	r3, [sp, #20]
 800df62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e048 <_vfiprintf_r+0x25c>
 800df66:	7821      	ldrb	r1, [r4, #0]
 800df68:	2203      	movs	r2, #3
 800df6a:	4650      	mov	r0, sl
 800df6c:	f7f2 f938 	bl	80001e0 <memchr>
 800df70:	b140      	cbz	r0, 800df84 <_vfiprintf_r+0x198>
 800df72:	2340      	movs	r3, #64	; 0x40
 800df74:	eba0 000a 	sub.w	r0, r0, sl
 800df78:	fa03 f000 	lsl.w	r0, r3, r0
 800df7c:	9b04      	ldr	r3, [sp, #16]
 800df7e:	4303      	orrs	r3, r0
 800df80:	3401      	adds	r4, #1
 800df82:	9304      	str	r3, [sp, #16]
 800df84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df88:	482c      	ldr	r0, [pc, #176]	; (800e03c <_vfiprintf_r+0x250>)
 800df8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df8e:	2206      	movs	r2, #6
 800df90:	f7f2 f926 	bl	80001e0 <memchr>
 800df94:	2800      	cmp	r0, #0
 800df96:	d03f      	beq.n	800e018 <_vfiprintf_r+0x22c>
 800df98:	4b29      	ldr	r3, [pc, #164]	; (800e040 <_vfiprintf_r+0x254>)
 800df9a:	bb1b      	cbnz	r3, 800dfe4 <_vfiprintf_r+0x1f8>
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	3307      	adds	r3, #7
 800dfa0:	f023 0307 	bic.w	r3, r3, #7
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	9303      	str	r3, [sp, #12]
 800dfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfaa:	443b      	add	r3, r7
 800dfac:	9309      	str	r3, [sp, #36]	; 0x24
 800dfae:	e767      	b.n	800de80 <_vfiprintf_r+0x94>
 800dfb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	e7a5      	b.n	800df06 <_vfiprintf_r+0x11a>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	3401      	adds	r4, #1
 800dfbe:	9305      	str	r3, [sp, #20]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	f04f 0c0a 	mov.w	ip, #10
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfcc:	3a30      	subs	r2, #48	; 0x30
 800dfce:	2a09      	cmp	r2, #9
 800dfd0:	d903      	bls.n	800dfda <_vfiprintf_r+0x1ee>
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d0c5      	beq.n	800df62 <_vfiprintf_r+0x176>
 800dfd6:	9105      	str	r1, [sp, #20]
 800dfd8:	e7c3      	b.n	800df62 <_vfiprintf_r+0x176>
 800dfda:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfde:	4604      	mov	r4, r0
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e7f0      	b.n	800dfc6 <_vfiprintf_r+0x1da>
 800dfe4:	ab03      	add	r3, sp, #12
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	462a      	mov	r2, r5
 800dfea:	4b16      	ldr	r3, [pc, #88]	; (800e044 <_vfiprintf_r+0x258>)
 800dfec:	a904      	add	r1, sp, #16
 800dfee:	4630      	mov	r0, r6
 800dff0:	f7fb fdda 	bl	8009ba8 <_printf_float>
 800dff4:	4607      	mov	r7, r0
 800dff6:	1c78      	adds	r0, r7, #1
 800dff8:	d1d6      	bne.n	800dfa8 <_vfiprintf_r+0x1bc>
 800dffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dffc:	07d9      	lsls	r1, r3, #31
 800dffe:	d405      	bmi.n	800e00c <_vfiprintf_r+0x220>
 800e000:	89ab      	ldrh	r3, [r5, #12]
 800e002:	059a      	lsls	r2, r3, #22
 800e004:	d402      	bmi.n	800e00c <_vfiprintf_r+0x220>
 800e006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e008:	f7fe ff76 	bl	800cef8 <__retarget_lock_release_recursive>
 800e00c:	89ab      	ldrh	r3, [r5, #12]
 800e00e:	065b      	lsls	r3, r3, #25
 800e010:	f53f af12 	bmi.w	800de38 <_vfiprintf_r+0x4c>
 800e014:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e016:	e711      	b.n	800de3c <_vfiprintf_r+0x50>
 800e018:	ab03      	add	r3, sp, #12
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	462a      	mov	r2, r5
 800e01e:	4b09      	ldr	r3, [pc, #36]	; (800e044 <_vfiprintf_r+0x258>)
 800e020:	a904      	add	r1, sp, #16
 800e022:	4630      	mov	r0, r6
 800e024:	f7fc f864 	bl	800a0f0 <_printf_i>
 800e028:	e7e4      	b.n	800dff4 <_vfiprintf_r+0x208>
 800e02a:	bf00      	nop
 800e02c:	0800ea30 	.word	0x0800ea30
 800e030:	0800ea50 	.word	0x0800ea50
 800e034:	0800ea10 	.word	0x0800ea10
 800e038:	0800ec4c 	.word	0x0800ec4c
 800e03c:	0800ec56 	.word	0x0800ec56
 800e040:	08009ba9 	.word	0x08009ba9
 800e044:	0800ddc7 	.word	0x0800ddc7
 800e048:	0800ec52 	.word	0x0800ec52
 800e04c:	00000000 	.word	0x00000000

0800e050 <nan>:
 800e050:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e058 <nan+0x8>
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	00000000 	.word	0x00000000
 800e05c:	7ff80000 	.word	0x7ff80000

0800e060 <_sbrk_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	4d06      	ldr	r5, [pc, #24]	; (800e07c <_sbrk_r+0x1c>)
 800e064:	2300      	movs	r3, #0
 800e066:	4604      	mov	r4, r0
 800e068:	4608      	mov	r0, r1
 800e06a:	602b      	str	r3, [r5, #0]
 800e06c:	f7f6 f878 	bl	8004160 <_sbrk>
 800e070:	1c43      	adds	r3, r0, #1
 800e072:	d102      	bne.n	800e07a <_sbrk_r+0x1a>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b103      	cbz	r3, 800e07a <_sbrk_r+0x1a>
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
 800e07c:	2000c4a0 	.word	0x2000c4a0

0800e080 <__sread>:
 800e080:	b510      	push	{r4, lr}
 800e082:	460c      	mov	r4, r1
 800e084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e088:	f000 f92e 	bl	800e2e8 <_read_r>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	bfab      	itete	ge
 800e090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e092:	89a3      	ldrhlt	r3, [r4, #12]
 800e094:	181b      	addge	r3, r3, r0
 800e096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e09a:	bfac      	ite	ge
 800e09c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e09e:	81a3      	strhlt	r3, [r4, #12]
 800e0a0:	bd10      	pop	{r4, pc}

0800e0a2 <__swrite>:
 800e0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a6:	461f      	mov	r7, r3
 800e0a8:	898b      	ldrh	r3, [r1, #12]
 800e0aa:	05db      	lsls	r3, r3, #23
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	4616      	mov	r6, r2
 800e0b2:	d505      	bpl.n	800e0c0 <__swrite+0x1e>
 800e0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f000 f8b6 	bl	800e22c <_lseek_r>
 800e0c0:	89a3      	ldrh	r3, [r4, #12]
 800e0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ca:	81a3      	strh	r3, [r4, #12]
 800e0cc:	4632      	mov	r2, r6
 800e0ce:	463b      	mov	r3, r7
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d6:	f000 b835 	b.w	800e144 <_write_r>

0800e0da <__sseek>:
 800e0da:	b510      	push	{r4, lr}
 800e0dc:	460c      	mov	r4, r1
 800e0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e2:	f000 f8a3 	bl	800e22c <_lseek_r>
 800e0e6:	1c43      	adds	r3, r0, #1
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	bf15      	itete	ne
 800e0ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0f6:	81a3      	strheq	r3, [r4, #12]
 800e0f8:	bf18      	it	ne
 800e0fa:	81a3      	strhne	r3, [r4, #12]
 800e0fc:	bd10      	pop	{r4, pc}

0800e0fe <__sclose>:
 800e0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e102:	f000 b84f 	b.w	800e1a4 <_close_r>

0800e106 <strncmp>:
 800e106:	b510      	push	{r4, lr}
 800e108:	b16a      	cbz	r2, 800e126 <strncmp+0x20>
 800e10a:	3901      	subs	r1, #1
 800e10c:	1884      	adds	r4, r0, r2
 800e10e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e112:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e116:	4293      	cmp	r3, r2
 800e118:	d103      	bne.n	800e122 <strncmp+0x1c>
 800e11a:	42a0      	cmp	r0, r4
 800e11c:	d001      	beq.n	800e122 <strncmp+0x1c>
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1f5      	bne.n	800e10e <strncmp+0x8>
 800e122:	1a98      	subs	r0, r3, r2
 800e124:	bd10      	pop	{r4, pc}
 800e126:	4610      	mov	r0, r2
 800e128:	e7fc      	b.n	800e124 <strncmp+0x1e>

0800e12a <__ascii_wctomb>:
 800e12a:	b149      	cbz	r1, 800e140 <__ascii_wctomb+0x16>
 800e12c:	2aff      	cmp	r2, #255	; 0xff
 800e12e:	bf85      	ittet	hi
 800e130:	238a      	movhi	r3, #138	; 0x8a
 800e132:	6003      	strhi	r3, [r0, #0]
 800e134:	700a      	strbls	r2, [r1, #0]
 800e136:	f04f 30ff 	movhi.w	r0, #4294967295
 800e13a:	bf98      	it	ls
 800e13c:	2001      	movls	r0, #1
 800e13e:	4770      	bx	lr
 800e140:	4608      	mov	r0, r1
 800e142:	4770      	bx	lr

0800e144 <_write_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d07      	ldr	r5, [pc, #28]	; (800e164 <_write_r+0x20>)
 800e148:	4604      	mov	r4, r0
 800e14a:	4608      	mov	r0, r1
 800e14c:	4611      	mov	r1, r2
 800e14e:	2200      	movs	r2, #0
 800e150:	602a      	str	r2, [r5, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	f7f5 ffb3 	bl	80040be <_write>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_write_r+0x1e>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_write_r+0x1e>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	2000c4a0 	.word	0x2000c4a0

0800e168 <__assert_func>:
 800e168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e16a:	4614      	mov	r4, r2
 800e16c:	461a      	mov	r2, r3
 800e16e:	4b09      	ldr	r3, [pc, #36]	; (800e194 <__assert_func+0x2c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4605      	mov	r5, r0
 800e174:	68d8      	ldr	r0, [r3, #12]
 800e176:	b14c      	cbz	r4, 800e18c <__assert_func+0x24>
 800e178:	4b07      	ldr	r3, [pc, #28]	; (800e198 <__assert_func+0x30>)
 800e17a:	9100      	str	r1, [sp, #0]
 800e17c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e180:	4906      	ldr	r1, [pc, #24]	; (800e19c <__assert_func+0x34>)
 800e182:	462b      	mov	r3, r5
 800e184:	f000 f81e 	bl	800e1c4 <fiprintf>
 800e188:	f000 f8c0 	bl	800e30c <abort>
 800e18c:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <__assert_func+0x38>)
 800e18e:	461c      	mov	r4, r3
 800e190:	e7f3      	b.n	800e17a <__assert_func+0x12>
 800e192:	bf00      	nop
 800e194:	2000000c 	.word	0x2000000c
 800e198:	0800ec5d 	.word	0x0800ec5d
 800e19c:	0800ec6a 	.word	0x0800ec6a
 800e1a0:	0800ec98 	.word	0x0800ec98

0800e1a4 <_close_r>:
 800e1a4:	b538      	push	{r3, r4, r5, lr}
 800e1a6:	4d06      	ldr	r5, [pc, #24]	; (800e1c0 <_close_r+0x1c>)
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	4608      	mov	r0, r1
 800e1ae:	602b      	str	r3, [r5, #0]
 800e1b0:	f7f5 ffa1 	bl	80040f6 <_close>
 800e1b4:	1c43      	adds	r3, r0, #1
 800e1b6:	d102      	bne.n	800e1be <_close_r+0x1a>
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	b103      	cbz	r3, 800e1be <_close_r+0x1a>
 800e1bc:	6023      	str	r3, [r4, #0]
 800e1be:	bd38      	pop	{r3, r4, r5, pc}
 800e1c0:	2000c4a0 	.word	0x2000c4a0

0800e1c4 <fiprintf>:
 800e1c4:	b40e      	push	{r1, r2, r3}
 800e1c6:	b503      	push	{r0, r1, lr}
 800e1c8:	4601      	mov	r1, r0
 800e1ca:	ab03      	add	r3, sp, #12
 800e1cc:	4805      	ldr	r0, [pc, #20]	; (800e1e4 <fiprintf+0x20>)
 800e1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1d2:	6800      	ldr	r0, [r0, #0]
 800e1d4:	9301      	str	r3, [sp, #4]
 800e1d6:	f7ff fe09 	bl	800ddec <_vfiprintf_r>
 800e1da:	b002      	add	sp, #8
 800e1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1e0:	b003      	add	sp, #12
 800e1e2:	4770      	bx	lr
 800e1e4:	2000000c 	.word	0x2000000c

0800e1e8 <_fstat_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	4d07      	ldr	r5, [pc, #28]	; (800e208 <_fstat_r+0x20>)
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	602b      	str	r3, [r5, #0]
 800e1f6:	f7f5 ff8a 	bl	800410e <_fstat>
 800e1fa:	1c43      	adds	r3, r0, #1
 800e1fc:	d102      	bne.n	800e204 <_fstat_r+0x1c>
 800e1fe:	682b      	ldr	r3, [r5, #0]
 800e200:	b103      	cbz	r3, 800e204 <_fstat_r+0x1c>
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	bd38      	pop	{r3, r4, r5, pc}
 800e206:	bf00      	nop
 800e208:	2000c4a0 	.word	0x2000c4a0

0800e20c <_isatty_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d06      	ldr	r5, [pc, #24]	; (800e228 <_isatty_r+0x1c>)
 800e210:	2300      	movs	r3, #0
 800e212:	4604      	mov	r4, r0
 800e214:	4608      	mov	r0, r1
 800e216:	602b      	str	r3, [r5, #0]
 800e218:	f7f5 ff89 	bl	800412e <_isatty>
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	d102      	bne.n	800e226 <_isatty_r+0x1a>
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	b103      	cbz	r3, 800e226 <_isatty_r+0x1a>
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	2000c4a0 	.word	0x2000c4a0

0800e22c <_lseek_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4d07      	ldr	r5, [pc, #28]	; (800e24c <_lseek_r+0x20>)
 800e230:	4604      	mov	r4, r0
 800e232:	4608      	mov	r0, r1
 800e234:	4611      	mov	r1, r2
 800e236:	2200      	movs	r2, #0
 800e238:	602a      	str	r2, [r5, #0]
 800e23a:	461a      	mov	r2, r3
 800e23c:	f7f5 ff82 	bl	8004144 <_lseek>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_lseek_r+0x1e>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	b103      	cbz	r3, 800e24a <_lseek_r+0x1e>
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	2000c4a0 	.word	0x2000c4a0

0800e250 <memmove>:
 800e250:	4288      	cmp	r0, r1
 800e252:	b510      	push	{r4, lr}
 800e254:	eb01 0402 	add.w	r4, r1, r2
 800e258:	d902      	bls.n	800e260 <memmove+0x10>
 800e25a:	4284      	cmp	r4, r0
 800e25c:	4623      	mov	r3, r4
 800e25e:	d807      	bhi.n	800e270 <memmove+0x20>
 800e260:	1e43      	subs	r3, r0, #1
 800e262:	42a1      	cmp	r1, r4
 800e264:	d008      	beq.n	800e278 <memmove+0x28>
 800e266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e26a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e26e:	e7f8      	b.n	800e262 <memmove+0x12>
 800e270:	4402      	add	r2, r0
 800e272:	4601      	mov	r1, r0
 800e274:	428a      	cmp	r2, r1
 800e276:	d100      	bne.n	800e27a <memmove+0x2a>
 800e278:	bd10      	pop	{r4, pc}
 800e27a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e27e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e282:	e7f7      	b.n	800e274 <memmove+0x24>

0800e284 <__malloc_lock>:
 800e284:	4801      	ldr	r0, [pc, #4]	; (800e28c <__malloc_lock+0x8>)
 800e286:	f7fe be36 	b.w	800cef6 <__retarget_lock_acquire_recursive>
 800e28a:	bf00      	nop
 800e28c:	2000c498 	.word	0x2000c498

0800e290 <__malloc_unlock>:
 800e290:	4801      	ldr	r0, [pc, #4]	; (800e298 <__malloc_unlock+0x8>)
 800e292:	f7fe be31 	b.w	800cef8 <__retarget_lock_release_recursive>
 800e296:	bf00      	nop
 800e298:	2000c498 	.word	0x2000c498

0800e29c <_realloc_r>:
 800e29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29e:	4607      	mov	r7, r0
 800e2a0:	4614      	mov	r4, r2
 800e2a2:	460e      	mov	r6, r1
 800e2a4:	b921      	cbnz	r1, 800e2b0 <_realloc_r+0x14>
 800e2a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	f7ff bbbe 	b.w	800da2c <_malloc_r>
 800e2b0:	b922      	cbnz	r2, 800e2bc <_realloc_r+0x20>
 800e2b2:	f7ff fb6b 	bl	800d98c <_free_r>
 800e2b6:	4625      	mov	r5, r4
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2bc:	f000 f82d 	bl	800e31a <_malloc_usable_size_r>
 800e2c0:	42a0      	cmp	r0, r4
 800e2c2:	d20f      	bcs.n	800e2e4 <_realloc_r+0x48>
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4638      	mov	r0, r7
 800e2c8:	f7ff fbb0 	bl	800da2c <_malloc_r>
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d0f2      	beq.n	800e2b8 <_realloc_r+0x1c>
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	4622      	mov	r2, r4
 800e2d6:	f7fb fbb1 	bl	8009a3c <memcpy>
 800e2da:	4631      	mov	r1, r6
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f7ff fb55 	bl	800d98c <_free_r>
 800e2e2:	e7e9      	b.n	800e2b8 <_realloc_r+0x1c>
 800e2e4:	4635      	mov	r5, r6
 800e2e6:	e7e7      	b.n	800e2b8 <_realloc_r+0x1c>

0800e2e8 <_read_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4d07      	ldr	r5, [pc, #28]	; (800e308 <_read_r+0x20>)
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	4608      	mov	r0, r1
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	602a      	str	r2, [r5, #0]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	f7f5 fec4 	bl	8004084 <_read>
 800e2fc:	1c43      	adds	r3, r0, #1
 800e2fe:	d102      	bne.n	800e306 <_read_r+0x1e>
 800e300:	682b      	ldr	r3, [r5, #0]
 800e302:	b103      	cbz	r3, 800e306 <_read_r+0x1e>
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	bd38      	pop	{r3, r4, r5, pc}
 800e308:	2000c4a0 	.word	0x2000c4a0

0800e30c <abort>:
 800e30c:	b508      	push	{r3, lr}
 800e30e:	2006      	movs	r0, #6
 800e310:	f000 f834 	bl	800e37c <raise>
 800e314:	2001      	movs	r0, #1
 800e316:	f7f5 feab 	bl	8004070 <_exit>

0800e31a <_malloc_usable_size_r>:
 800e31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e31e:	1f18      	subs	r0, r3, #4
 800e320:	2b00      	cmp	r3, #0
 800e322:	bfbc      	itt	lt
 800e324:	580b      	ldrlt	r3, [r1, r0]
 800e326:	18c0      	addlt	r0, r0, r3
 800e328:	4770      	bx	lr

0800e32a <_raise_r>:
 800e32a:	291f      	cmp	r1, #31
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4604      	mov	r4, r0
 800e330:	460d      	mov	r5, r1
 800e332:	d904      	bls.n	800e33e <_raise_r+0x14>
 800e334:	2316      	movs	r3, #22
 800e336:	6003      	str	r3, [r0, #0]
 800e338:	f04f 30ff 	mov.w	r0, #4294967295
 800e33c:	bd38      	pop	{r3, r4, r5, pc}
 800e33e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e340:	b112      	cbz	r2, 800e348 <_raise_r+0x1e>
 800e342:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e346:	b94b      	cbnz	r3, 800e35c <_raise_r+0x32>
 800e348:	4620      	mov	r0, r4
 800e34a:	f000 f831 	bl	800e3b0 <_getpid_r>
 800e34e:	462a      	mov	r2, r5
 800e350:	4601      	mov	r1, r0
 800e352:	4620      	mov	r0, r4
 800e354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e358:	f000 b818 	b.w	800e38c <_kill_r>
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d00a      	beq.n	800e376 <_raise_r+0x4c>
 800e360:	1c59      	adds	r1, r3, #1
 800e362:	d103      	bne.n	800e36c <_raise_r+0x42>
 800e364:	2316      	movs	r3, #22
 800e366:	6003      	str	r3, [r0, #0]
 800e368:	2001      	movs	r0, #1
 800e36a:	e7e7      	b.n	800e33c <_raise_r+0x12>
 800e36c:	2400      	movs	r4, #0
 800e36e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e372:	4628      	mov	r0, r5
 800e374:	4798      	blx	r3
 800e376:	2000      	movs	r0, #0
 800e378:	e7e0      	b.n	800e33c <_raise_r+0x12>
	...

0800e37c <raise>:
 800e37c:	4b02      	ldr	r3, [pc, #8]	; (800e388 <raise+0xc>)
 800e37e:	4601      	mov	r1, r0
 800e380:	6818      	ldr	r0, [r3, #0]
 800e382:	f7ff bfd2 	b.w	800e32a <_raise_r>
 800e386:	bf00      	nop
 800e388:	2000000c 	.word	0x2000000c

0800e38c <_kill_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4d07      	ldr	r5, [pc, #28]	; (800e3ac <_kill_r+0x20>)
 800e390:	2300      	movs	r3, #0
 800e392:	4604      	mov	r4, r0
 800e394:	4608      	mov	r0, r1
 800e396:	4611      	mov	r1, r2
 800e398:	602b      	str	r3, [r5, #0]
 800e39a:	f7f5 fe59 	bl	8004050 <_kill>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d102      	bne.n	800e3a8 <_kill_r+0x1c>
 800e3a2:	682b      	ldr	r3, [r5, #0]
 800e3a4:	b103      	cbz	r3, 800e3a8 <_kill_r+0x1c>
 800e3a6:	6023      	str	r3, [r4, #0]
 800e3a8:	bd38      	pop	{r3, r4, r5, pc}
 800e3aa:	bf00      	nop
 800e3ac:	2000c4a0 	.word	0x2000c4a0

0800e3b0 <_getpid_r>:
 800e3b0:	f7f5 be46 	b.w	8004040 <_getpid>

0800e3b4 <_init>:
 800e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b6:	bf00      	nop
 800e3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ba:	bc08      	pop	{r3}
 800e3bc:	469e      	mov	lr, r3
 800e3be:	4770      	bx	lr

0800e3c0 <_fini>:
 800e3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c2:	bf00      	nop
 800e3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3c6:	bc08      	pop	{r3}
 800e3c8:	469e      	mov	lr, r3
 800e3ca:	4770      	bx	lr
