
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001062c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  080107c0  080107c0  000207c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110e0  080110e0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080110e0  080110e0  000210e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110e8  080110e8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110e8  080110e8  000210e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110ec  080110ec  000210ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080110f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000120ac  200001e0  080112d0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001228c  080112d0  0003228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec86  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005773  00000000  00000000  0004ee96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00054610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c80  00000000  00000000  00056528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000aa22  00000000  00000000  000581a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000292a2  00000000  00000000  00062bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5f0a  00000000  00000000  0008be6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161d76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009494  00000000  00000000  00161dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107a4 	.word	0x080107a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080107a4 	.word	0x080107a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <imu_read_byte>:

uint8_t initialized = 0;
Inertial inertial;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <imu_read_byte+0x54>)
 8001014:	f006 feb8 	bl	8007d88 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 8001018:	f107 010f 	add.w	r1, r7, #15
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	2201      	movs	r2, #1
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <imu_read_byte+0x58>)
 8001022:	f007 fd2e 	bl	8008a82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 8001026:	f107 010e 	add.w	r1, r7, #14
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	2201      	movs	r2, #1
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <imu_read_byte+0x58>)
 8001030:	f007 fe63 	bl	8008cfa <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <imu_read_byte+0x54>)
 800103c:	f006 fea4 	bl	8007d88 <HAL_GPIO_WritePin>
#endif
	return val;
 8001040:	7bbb      	ldrb	r3, [r7, #14]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020400 	.word	0x40020400
 8001050:	20000500 	.word	0x20000500

08001054 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800106a:	b2db      	uxtb	r3, r3
 800106c:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <imu_write_byte+0x54>)
 8001076:	f006 fe87 	bl	8007d88 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800107a:	f107 010f 	add.w	r1, r7, #15
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <imu_write_byte+0x58>)
 8001084:	f007 fcfd 	bl	8008a82 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 8001088:	1db9      	adds	r1, r7, #6
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	2201      	movs	r2, #1
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <imu_write_byte+0x58>)
 8001090:	f007 fcf7 	bl	8008a82 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <imu_write_byte+0x54>)
 800109c:	f006 fe74 	bl	8007d88 <HAL_GPIO_WritePin>
#endif
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020400 	.word	0x40020400
 80010ac:	20000500 	.word	0x20000500

080010b0 <imu_init>:
 * @fn imu_init()
 * @brief 
 * 
 */
void imu_init()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	if(initialized == 0)
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <imu_init+0x54>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11d      	bne.n	80010fa <imu_init+0x4a>
	{
		printf("Starting SPI2 (IMU)\r\n");
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <imu_init+0x58>)
 80010c0:	f00a fe3a 	bl	800bd38 <puts>
		uint8_t wai, ret;
		ret = imu_initialize(&wai);
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f826 	bl	8001118 <imu_initialize>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
		printf("who_am_i = %d\r\n", wai);
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	4619      	mov	r1, r3
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <imu_init+0x5c>)
 80010d6:	f00a fda9 	bl	800bc2c <iprintf>
		if(ret == 1)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d103      	bne.n	80010e8 <imu_init+0x38>
		{
			printf("SPI INIT COLLECT!\r\n");
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <imu_init+0x60>)
 80010e2:	f00a fe29 	bl	800bd38 <puts>
 80010e6:	e002      	b.n	80010ee <imu_init+0x3e>
		}
		else
		{
			printf("SPI INIT FAILURE x_x \r\n");
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <imu_init+0x64>)
 80010ea:	f00a fe25 	bl	800bd38 <puts>
		}
		initialized = initialized + 1;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <imu_init+0x54>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <imu_init+0x54>)
 80010f8:	701a      	strb	r2, [r3, #0]
	}
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001fc 	.word	0x200001fc
 8001108:	080107c0 	.word	0x080107c0
 800110c:	080107d8 	.word	0x080107d8
 8001110:	080107e8 	.word	0x080107e8
 8001114:	080107fc 	.word	0x080107fc

08001118 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	4833      	ldr	r0, [pc, #204]	; (80011f4 <imu_initialize+0xdc>)
 8001128:	f006 fe2e 	bl	8007d88 <HAL_GPIO_WritePin>
	uint8_t who_am_i, ret;
	ret = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

#if	INIT_ZERO
	inertial.linear = vector3_creation(0, 0, 0);
 8001130:	4c31      	ldr	r4, [pc, #196]	; (80011f8 <imu_initialize+0xe0>)
 8001132:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80011fc <imu_initialize+0xe4>
 8001136:	eddf 0a31 	vldr	s1, [pc, #196]	; 80011fc <imu_initialize+0xe4>
 800113a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80011fc <imu_initialize+0xe4>
 800113e:	f001 fea1 	bl	8002e84 <vector3_creation>
 8001142:	eef0 6a40 	vmov.f32	s13, s0
 8001146:	eeb0 7a60 	vmov.f32	s14, s1
 800114a:	eef0 7a41 	vmov.f32	s15, s2
 800114e:	edc4 6a00 	vstr	s13, [r4]
 8001152:	ed84 7a01 	vstr	s14, [r4, #4]
 8001156:	edc4 7a02 	vstr	s15, [r4, #8]
	inertial.angular = vector3_creation(0, 0, 0);
 800115a:	4c27      	ldr	r4, [pc, #156]	; (80011f8 <imu_initialize+0xe0>)
 800115c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80011fc <imu_initialize+0xe4>
 8001160:	eddf 0a26 	vldr	s1, [pc, #152]	; 80011fc <imu_initialize+0xe4>
 8001164:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80011fc <imu_initialize+0xe4>
 8001168:	f001 fe8c 	bl	8002e84 <vector3_creation>
 800116c:	eef0 6a40 	vmov.f32	s13, s0
 8001170:	eeb0 7a60 	vmov.f32	s14, s1
 8001174:	eef0 7a41 	vmov.f32	s15, s2
 8001178:	edc4 6a03 	vstr	s13, [r4, #12]
 800117c:	ed84 7a04 	vstr	s14, [r4, #16]
 8001180:	edc4 7a05 	vstr	s15, [r4, #20]
#endif

	//! User Bank 0 を選択
	imu_write_byte(REG_BANK_SEL, 0x00);
 8001184:	2100      	movs	r1, #0
 8001186:	207f      	movs	r0, #127	; 0x7f
 8001188:	f7ff ff64 	bl	8001054 <imu_write_byte>
	who_am_i = imu_read_byte(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ff33 	bl	8000ff8 <imu_read_byte>
 8001192:	4603      	mov	r3, r0
 8001194:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7bba      	ldrb	r2, [r7, #14]
 800119a:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	2be0      	cmp	r3, #224	; 0xe0
 80011a0:	d11c      	bne.n	80011dc <imu_initialize+0xc4>
	{	// ICM-20648 is 0xE0
		ret = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
		//! PWR_MGMT_1 推奨値 1
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 80011a6:	2101      	movs	r1, #1
 80011a8:	2006      	movs	r0, #6
 80011aa:	f7ff ff53 	bl	8001054 <imu_write_byte>
		//! PWR_MGMt_2 推奨値 0
		// imu_write_byte(PWR_MGMT_2, 0x00);
		HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f004 ffe6 	bl	8006180 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 80011b4:	2110      	movs	r1, #16
 80011b6:	2003      	movs	r0, #3
 80011b8:	f7ff ff4c 	bl	8001054 <imu_write_byte>
		 * 	10 : User Bank 2 : 加速度と角速度の値の設定ができる
		 * 	11 : User Bank 3 : I2C の設定が行える
		 * 
		 */
		//! User Bank 2 を選択
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 80011bc:	2120      	movs	r1, #32
 80011be:	207f      	movs	r0, #127	; 0x7f
 80011c0:	f7ff ff48 	bl	8001054 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 9     [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2000 [dps] & bypass ) -> 0b 0000 0110 -> 0x06
		imu_write_byte(0x01, 0x06);
 80011c4:	2106      	movs	r1, #6
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff44 	bl	8001054 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 4.5   [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2 [dps] & bypass ) -> 0b 0000 0000 -> 0x06
		imu_write_byte(0x14, 0x00);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2014      	movs	r0, #20
 80011d0:	f7ff ff40 	bl	8001054 <imu_write_byte>

		//! User Bank 0 に戻す
		imu_write_byte(REG_BANK_SEL, 0x00);
 80011d4:	2100      	movs	r1, #0
 80011d6:	207f      	movs	r0, #127	; 0x7f
 80011d8:	f7ff ff3c 	bl	8001054 <imu_write_byte>
	}
#if USE_NCS
	CS_SET;
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <imu_initialize+0xdc>)
 80011e4:	f006 fdd0 	bl	8007d88 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020400 	.word	0x40020400
 80011f8:	20000200 	.word	0x20000200
 80011fc:	00000000 	.word	0x00000000

08001200 <imu_start>:

void imu_start()
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	/* imu_start */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <imu_stop>:

void imu_stop()
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
#if !USE_NCS
	CS_SET;
#endif
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	0000      	movs	r0, r0
	...

08001220 <imu_update_gyro>:
 * --- --- --- --- --- --- --- --- --- ---
 * @attention 値を代入したら外部参照変数を呼び出して値を取得することになる
 *
*/
void imu_update_gyro()
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
	float k_gyro;
	int16_t byte_data;
	float tmp;

	k_gyro = (GYRO_RANGE / (float) MAXDATA_RANGE);
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <imu_update_gyro+0x160>)
 8001228:	60fb      	str	r3, [r7, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800122a:	2033      	movs	r0, #51	; 0x33
 800122c:	f7ff fee4 	bl	8000ff8 <imu_read_byte>
 8001230:	4603      	mov	r3, r0
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21c      	sxth	r4, r3
 8001236:	2034      	movs	r0, #52	; 0x34
 8001238:	f7ff fede 	bl	8000ff8 <imu_read_byte>
 800123c:	4603      	mov	r3, r0
 800123e:	b21b      	sxth	r3, r3
 8001240:	4323      	orrs	r3, r4
 8001242:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001250:	ed97 7a03 	vldr	s14, [r7, #12]
 8001254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001258:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.x = low_pass_filter(tmp, inertial.angular.x, LPF_RATE);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <imu_update_gyro+0x164>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001378 <imu_update_gyro+0x158>
 8001278:	ec43 2b11 	vmov	d1, r2, r3
 800127c:	ec45 4b10 	vmov	d0, r4, r5
 8001280:	f001 fdca 	bl	8002e18 <low_pass_filter>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcac 	bl	8000be8 <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <imu_update_gyro+0x164>)
 8001294:	60d3      	str	r3, [r2, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 8001296:	2035      	movs	r0, #53	; 0x35
 8001298:	f7ff feae 	bl	8000ff8 <imu_read_byte>
 800129c:	4603      	mov	r3, r0
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21c      	sxth	r4, r3
 80012a2:	2036      	movs	r0, #54	; 0x36
 80012a4:	f7ff fea8 	bl	8000ff8 <imu_read_byte>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4323      	orrs	r3, r4
 80012ae:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80012b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.y = low_pass_filter(tmp, inertial.angular.y, LPF_RATE);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff f93d 	bl	8000548 <__aeabi_f2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <imu_update_gyro+0x164>)
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f936 	bl	8000548 <__aeabi_f2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001378 <imu_update_gyro+0x158>
 80012e4:	ec43 2b11 	vmov	d1, r2, r3
 80012e8:	ec45 4b10 	vmov	d0, r4, r5
 80012ec:	f001 fd94 	bl	8002e18 <low_pass_filter>
 80012f0:	ec53 2b10 	vmov	r2, r3, d0
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc76 	bl	8000be8 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <imu_update_gyro+0x164>)
 8001300:	6113      	str	r3, [r2, #16]

	byte_data = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 8001302:	2037      	movs	r0, #55	; 0x37
 8001304:	f7ff fe78 	bl	8000ff8 <imu_read_byte>
 8001308:	4603      	mov	r3, r0
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21c      	sxth	r4, r3
 800130e:	2038      	movs	r0, #56	; 0x38
 8001310:	f7ff fe72 	bl	8000ff8 <imu_read_byte>
 8001314:	4603      	mov	r3, r0
 8001316:	b21b      	sxth	r3, r3
 8001318:	4323      	orrs	r3, r4
 800131a:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 800131c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001328:	ed97 7a03 	vldr	s14, [r7, #12]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.z = low_pass_filter(tmp, inertial.angular.z, LPF_RATE);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4604      	mov	r4, r0
 800133c:	460d      	mov	r5, r1
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <imu_update_gyro+0x164>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f900 	bl	8000548 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001378 <imu_update_gyro+0x158>
 8001350:	ec43 2b11 	vmov	d1, r2, r3
 8001354:	ec45 4b10 	vmov	d0, r4, r5
 8001358:	f001 fd5e 	bl	8002e18 <low_pass_filter>
 800135c:	ec53 2b10 	vmov	r2, r3, d0
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4603      	mov	r3, r0
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <imu_update_gyro+0x164>)
 800136c:	6153      	str	r3, [r2, #20]
	 * 		float y;
	 * 		float z;
	 * } Vector3;
	 * 
	 */
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bdb0      	pop	{r4, r5, r7, pc}
 8001376:	bf00      	nop
 8001378:	40000000 	.word	0x40000000
 800137c:	3fd33333 	.word	0x3fd33333
 8001380:	3d7a0000 	.word	0x3d7a0000
 8001384:	20000200 	.word	0x20000200

08001388 <imu_read_yaw>:
 * @return float 
 * @attention [ degree ]
 * 
 */
float imu_read_yaw()
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	//! バイアス補正を加味した返り値（ inertial.angular.z はすでに LPF を通されている ）
	return inertial.angular.z - (BIAS_AVERAGE - TRUE_VALUE);
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <imu_read_yaw+0x20>)
 800138e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001392:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013ac <imu_read_yaw+0x24>
 8001396:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000200 	.word	0x20000200
 80013ac:	3e0a704c 	.word	0x3e0a704c

080013b0 <led_init>:

uint8_t current_value;
uint8_t current_rgb_value;

void led_init()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    current_value = 0b11;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <led_init+0x24>)
 80013b6:	2203      	movs	r2, #3
 80013b8:	701a      	strb	r2, [r3, #0]
    current_rgb_value = 0b111;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <led_init+0x28>)
 80013bc:	2207      	movs	r2, #7
 80013be:	701a      	strb	r2, [r3, #0]
    led_write_led(0b11, 0b11);
 80013c0:	2103      	movs	r1, #3
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f8ae 	bl	8001524 <led_write_led>
    led_write_rgb(0b111);
 80013c8:	2007      	movs	r0, #7
 80013ca:	f000 f86b 	bl	80014a4 <led_write_rgb>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000218 	.word	0x20000218
 80013d8:	20000219 	.word	0x20000219

080013dc <led_start>:

void led_start()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 80013e0:	2100      	movs	r1, #0
 80013e2:	2003      	movs	r0, #3
 80013e4:	f000 f89e 	bl	8001524 <led_write_led>
    led_write_rgb(0b000);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f85b 	bl	80014a4 <led_write_rgb>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <led_stop>:

void led_stop()
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f893 	bl	8001524 <led_write_led>
    led_write_rgb(0b100);
 80013fe:	2004      	movs	r0, #4
 8001400:	f000 f850 	bl	80014a4 <led_write_rgb>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <led_write_led1>:
{
    return current_rgb_value;
}

void led_write_led1(uint8_t value_)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = value_ << 1;
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
    led2_value = current_value & 0b01;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <led_write_led1+0x48>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <led_write_led1+0x4c>)
 8001436:	f006 fca7 	bl	8007d88 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	4313      	orrs	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <led_write_led1+0x48>)
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000218 	.word	0x20000218
 8001454:	40020800 	.word	0x40020800

08001458 <led_write_led2>:

void led_write_led2(uint8_t value_)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = current_value & 0b10;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <led_write_led2+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	73fb      	strb	r3, [r7, #15]
    led2_value = value_ << 0;
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <led_write_led2+0x48>)
 8001484:	f006 fc80 	bl	8007d88 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	4313      	orrs	r3, r2
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <led_write_led2+0x44>)
 8001492:	701a      	strb	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000218 	.word	0x20000218
 80014a0:	40020400 	.word	0x40020400

080014a4 <led_write_rgb>:

void led_write_rgb(uint8_t rgb_)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (rgb_ & 0b100) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c4:	4814      	ldr	r0, [pc, #80]	; (8001518 <led_write_rgb+0x74>)
 80014c6:	f006 fc5f 	bl	8007d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (rgb_ & 0b010) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <led_write_rgb+0x74>)
 80014e2:	f006 fc51 	bl	8007d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (rgb_ & 0b001) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <led_write_rgb+0x78>)
 80014fe:	f006 fc43 	bl	8007d88 <HAL_GPIO_WritePin>
    current_rgb_value = rgb_ & 0b0111;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <led_write_rgb+0x7c>)
 800150c:	701a      	strb	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40020000 	.word	0x40020000
 800151c:	40020800 	.word	0x40020800
 8001520:	20000219 	.word	0x20000219

08001524 <led_write_led>:

void led_write_led(uint8_t mask_, uint8_t value_)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	460a      	mov	r2, r1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	4613      	mov	r3, r2
 8001532:	71bb      	strb	r3, [r7, #6]
    if(mask_ & 0b10)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <led_write_led+0x2c>
    {
        led_write_led1((0b10 & value_) >> 1);
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff5c 	bl	8001408 <led_write_led1>
    }
    if(mask_ & 0b01)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <led_write_led+0x44>
    {
        led_write_led2((0b01 & value_) >> 0);
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff78 	bl	8001458 <led_write_led2>
    }
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001574:	f000 f804 	bl	8001580 <rotary_set_playmode>
    rotary_set_value();
 8001578:	f000 f81a 	bl	80015b0 <rotary_set_value>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001584:	f000 f82c 	bl	80015e0 <rotary_read>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b01      	ldr	r3, [pc, #4]	; (8001594 <rotary_set_playmode+0x14>)
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000021a 	.word	0x2000021a

08001598 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    return playmode;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <rotary_read_playmode+0x14>)
 800159e:	781b      	ldrb	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000021a 	.word	0x2000021a

080015b0 <rotary_set_value>:

void rotary_set_value()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    value = rotary_read();
 80015b4:	f000 f814 	bl	80015e0 <rotary_read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <rotary_set_value+0x14>)
 80015be:	701a      	strb	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000021b 	.word	0x2000021b

080015c8 <rotary_read_value>:

uint8_t rotary_read_value()
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
    return value;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <rotary_read_value+0x14>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000021b 	.word	0x2000021b

080015e0 <rotary_read>:

uint8_t rotary_read()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 80015ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ee:	481f      	ldr	r0, [pc, #124]	; (800166c <rotary_read+0x8c>)
 80015f0:	f006 fbb2 	bl	8007d58 <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bf0c      	ite	eq
 80015fa:	2301      	moveq	r3, #1
 80015fc:	2300      	movne	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	b2da      	uxtb	r2, r3
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4413      	add	r3, r2
 8001606:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160c:	4817      	ldr	r0, [pc, #92]	; (800166c <rotary_read+0x8c>)
 800160e:	f006 fba3 	bl	8007d58 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <rotary_read+0x3c>
 8001618:	2302      	movs	r3, #2
 800161a:	e000      	b.n	800161e <rotary_read+0x3e>
 800161c:	2300      	movs	r3, #0
 800161e:	b2da      	uxtb	r2, r3
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4413      	add	r3, r2
 8001624:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <rotary_read+0x90>)
 800162c:	f006 fb94 	bl	8007d58 <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <rotary_read+0x5a>
 8001636:	2304      	movs	r3, #4
 8001638:	e000      	b.n	800163c <rotary_read+0x5c>
 800163a:	2300      	movs	r3, #0
 800163c:	b2da      	uxtb	r2, r3
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4413      	add	r3, r2
 8001642:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 8001644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <rotary_read+0x8c>)
 800164a:	f006 fb85 	bl	8007d58 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <rotary_read+0x78>
 8001654:	2308      	movs	r3, #8
 8001656:	e000      	b.n	800165a <rotary_read+0x7a>
 8001658:	2300      	movs	r3, #0
 800165a:	b2da      	uxtb	r2, r3
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4413      	add	r3, r2
 8001660:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 8001662:	79fb      	ldrb	r3, [r7, #7]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020800 	.word	0x40020800
 8001670:	40020000 	.word	0x40020000

08001674 <rotary_print_playmode>:

void rotary_print_playmode()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	printf("playmode = ");
 8001678:	482e      	ldr	r0, [pc, #184]	; (8001734 <rotary_print_playmode+0xc0>)
 800167a:	f00a fad7 	bl	800bc2c <iprintf>
	switch(rotary_read_playmode())
 800167e:	f7ff ff8b 	bl	8001598 <rotary_read_playmode>
 8001682:	4603      	mov	r3, r0
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d84b      	bhi.n	8001720 <rotary_print_playmode+0xac>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <rotary_print_playmode+0x1c>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016d1 	.word	0x080016d1
 8001694:	080016d9 	.word	0x080016d9
 8001698:	080016e1 	.word	0x080016e1
 800169c:	080016e9 	.word	0x080016e9
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	080016f9 	.word	0x080016f9
 80016a8:	08001701 	.word	0x08001701
 80016ac:	08001709 	.word	0x08001709
 80016b0:	08001711 	.word	0x08001711
 80016b4:	08001721 	.word	0x08001721
 80016b8:	08001721 	.word	0x08001721
 80016bc:	08001721 	.word	0x08001721
 80016c0:	08001721 	.word	0x08001721
 80016c4:	08001721 	.word	0x08001721
 80016c8:	08001721 	.word	0x08001721
 80016cc:	08001719 	.word	0x08001719
	{
		case calibration:
			printf("calibration");
 80016d0:	4819      	ldr	r0, [pc, #100]	; (8001738 <rotary_print_playmode+0xc4>)
 80016d2:	f00a faab 	bl	800bc2c <iprintf>
			break;
 80016d6:	e027      	b.n	8001728 <rotary_print_playmode+0xb4>
		case search:
			printf("search");
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <rotary_print_playmode+0xc8>)
 80016da:	f00a faa7 	bl	800bc2c <iprintf>
			break;
 80016de:	e023      	b.n	8001728 <rotary_print_playmode+0xb4>
		case accel:
			printf("accel");
 80016e0:	4817      	ldr	r0, [pc, #92]	; (8001740 <rotary_print_playmode+0xcc>)
 80016e2:	f00a faa3 	bl	800bc2c <iprintf>
			break;
 80016e6:	e01f      	b.n	8001728 <rotary_print_playmode+0xb4>
		case max_enable:
			printf("max_enable");
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <rotary_print_playmode+0xd0>)
 80016ea:	f00a fa9f 	bl	800bc2c <iprintf>
			break;
 80016ee:	e01b      	b.n	8001728 <rotary_print_playmode+0xb4>
        case motor_free:
            printf("motor_free");
 80016f0:	4815      	ldr	r0, [pc, #84]	; (8001748 <rotary_print_playmode+0xd4>)
 80016f2:	f00a fa9b 	bl	800bc2c <iprintf>
            break;
 80016f6:	e017      	b.n	8001728 <rotary_print_playmode+0xb4>
		case tracer_tuning:
			printf("tracer_tuning");
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <rotary_print_playmode+0xd8>)
 80016fa:	f00a fa97 	bl	800bc2c <iprintf>
			break;
 80016fe:	e013      	b.n	8001728 <rotary_print_playmode+0xb4>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <rotary_print_playmode+0xdc>)
 8001702:	f00a fa93 	bl	800bc2c <iprintf>
			break;
 8001706:	e00f      	b.n	8001728 <rotary_print_playmode+0xb4>
        case velotrace_tuning_2:
            printf("velotrace_tuning_2");
 8001708:	4812      	ldr	r0, [pc, #72]	; (8001754 <rotary_print_playmode+0xe0>)
 800170a:	f00a fa8f 	bl	800bc2c <iprintf>
            break;
 800170e:	e00b      	b.n	8001728 <rotary_print_playmode+0xb4>
		case banquet:
			printf("banquet");
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <rotary_print_playmode+0xe4>)
 8001712:	f00a fa8b 	bl	800bc2c <iprintf>
			break;
 8001716:	e007      	b.n	8001728 <rotary_print_playmode+0xb4>
		case flash_print:
			printf("flash_print");
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <rotary_print_playmode+0xe8>)
 800171a:	f00a fa87 	bl	800bc2c <iprintf>
			break;
 800171e:	e003      	b.n	8001728 <rotary_print_playmode+0xb4>
		default:
			printf("unknown playmode...");
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <rotary_print_playmode+0xec>)
 8001722:	f00a fa83 	bl	800bc2c <iprintf>
			break;
 8001726:	bf00      	nop
	}
	printf("\r\n");
 8001728:	480e      	ldr	r0, [pc, #56]	; (8001764 <rotary_print_playmode+0xf0>)
 800172a:	f00a fb05 	bl	800bd38 <puts>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	08010814 	.word	0x08010814
 8001738:	08010820 	.word	0x08010820
 800173c:	0801082c 	.word	0x0801082c
 8001740:	08010834 	.word	0x08010834
 8001744:	0801083c 	.word	0x0801083c
 8001748:	08010848 	.word	0x08010848
 800174c:	08010854 	.word	0x08010854
 8001750:	08010864 	.word	0x08010864
 8001754:	08010878 	.word	0x08010878
 8001758:	0801088c 	.word	0x0801088c
 800175c:	08010894 	.word	0x08010894
 8001760:	080108a0 	.word	0x080108a0
 8001764:	080108b4 	.word	0x080108b4

08001768 <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
    enter = 1;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <switch_set_enter+0x14>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	2000021c 	.word	0x2000021c

08001780 <switch_reset_enter>:

void switch_reset_enter()
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
    enter = 0;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <switch_reset_enter+0x14>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	2000021c 	.word	0x2000021c

08001798 <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    switch_reset_enter();
 800179c:	f7ff fff0 	bl	8001780 <switch_reset_enter>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
    return enter;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <switch_read_enter+0x14>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000021c 	.word	0x2000021c

080017bc <switch1_read>:

uint8_t switch1_read()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 80017c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <switch1_read+0x20>)
 80017c6:	f006 fac7 	bl	8007d58 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020800 	.word	0x40020800

080017e0 <switch2_read>:

uint8_t switch2_read()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 80017e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <switch2_read+0x20>)
 80017ea:	f006 fab5 	bl	8007d58 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40020800 	.word	0x40020800

08001804 <switch_read>:

uint8_t switch_read()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 800180e:	f7ff ffd5 	bl	80017bc <switch1_read>
 8001812:	4603      	mov	r3, r0
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4413      	add	r3, r2
 800181c:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 800181e:	f7ff ffdf 	bl	80017e0 <switch2_read>
 8001822:	4603      	mov	r3, r0
 8001824:	b2da      	uxtb	r2, r3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4413      	add	r3, r2
 800182a:	71fb      	strb	r3, [r7, #7]

    return value_;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <switch_enter>:

void switch_enter()
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800183a:	f7ff ffe3 	bl	8001804 <switch_read>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d102      	bne.n	800184a <switch_enter+0x14>
    {
        switch_reset_enter();
 8001844:	f7ff ff9c 	bl	8001780 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 8001848:	e006      	b.n	8001858 <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800184a:	f7ff ffdb 	bl	8001804 <switch_read>
 800184e:	4603      	mov	r3, r0
 8001850:	2b02      	cmp	r3, #2
 8001852:	d101      	bne.n	8001858 <switch_enter+0x22>
        switch_set_enter();
 8001854:	f7ff ff88 	bl	8001768 <switch_set_enter>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 800185c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001860:	b08e      	sub	sp, #56	; 0x38
 8001862:	af0a      	add	r7, sp, #40	; 0x28
 8001864:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 8001866:	482d      	ldr	r0, [pc, #180]	; (800191c <analog_array_print+0xc0>)
 8001868:	f00a f9e0 	bl	800bc2c <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3318      	adds	r3, #24
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	331c      	adds	r3, #28
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	331e      	adds	r3, #30
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	331a      	adds	r3, #26
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4603      	mov	r3, r0
 800188e:	4824      	ldr	r0, [pc, #144]	; (8001920 <analog_array_print+0xc4>)
 8001890:	f00a f9cc 	bl	800bc2c <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	469c      	mov	ip, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3304      	adds	r3, #4
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	469e      	mov	lr, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3308      	adds	r3, #8
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	4698      	mov	r8, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3310      	adds	r3, #16
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3314      	adds	r3, #20
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3316      	adds	r3, #22
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	461c      	mov	r4, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3312      	adds	r3, #18
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	461d      	mov	r5, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	330e      	adds	r3, #14
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461e      	mov	r6, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	330a      	adds	r3, #10
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3306      	adds	r3, #6
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3302      	adds	r3, #2
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	9308      	str	r3, [sp, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	9307      	str	r3, [sp, #28]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	9306      	str	r3, [sp, #24]
 80018fa:	9605      	str	r6, [sp, #20]
 80018fc:	9504      	str	r5, [sp, #16]
 80018fe:	9403      	str	r4, [sp, #12]
 8001900:	9002      	str	r0, [sp, #8]
 8001902:	9101      	str	r1, [sp, #4]
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	4643      	mov	r3, r8
 8001908:	4672      	mov	r2, lr
 800190a:	4661      	mov	r1, ip
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <analog_array_print+0xc8>)
 800190e:	f00a f98d 	bl	800bc2c <iprintf>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800191c:	080108b8 	.word	0x080108b8
 8001920:	080108c0 	.word	0x080108c0
 8001924:	080108d8 	.word	0x080108d8

08001928 <analog_rate_array_print>:

void analog_rate_array_print()
{
 8001928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800192c:	b092      	sub	sp, #72	; 0x48
 800192e:	af0a      	add	r7, sp, #40	; 0x28
	printf("\r\n");
 8001930:	4850      	ldr	r0, [pc, #320]	; (8001a74 <analog_rate_array_print+0x14c>)
 8001932:	f00a fa01 	bl	800bd38 <puts>
	printf("\x1b[24C");	// Cursor move right *24
 8001936:	4850      	ldr	r0, [pc, #320]	; (8001a78 <analog_rate_array_print+0x150>)
 8001938:	f00a f978 	bl	800bc2c <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog_sensor_get(12), analog_sensor_get(14), analog_sensor_get(15), analog_sensor_get(13));
 800193c:	200c      	movs	r0, #12
 800193e:	f000 fa57 	bl	8001df0 <analog_sensor_get>
 8001942:	4603      	mov	r3, r0
 8001944:	461c      	mov	r4, r3
 8001946:	200e      	movs	r0, #14
 8001948:	f000 fa52 	bl	8001df0 <analog_sensor_get>
 800194c:	4603      	mov	r3, r0
 800194e:	461d      	mov	r5, r3
 8001950:	200f      	movs	r0, #15
 8001952:	f000 fa4d 	bl	8001df0 <analog_sensor_get>
 8001956:	4603      	mov	r3, r0
 8001958:	461e      	mov	r6, r3
 800195a:	200d      	movs	r0, #13
 800195c:	f000 fa48 	bl	8001df0 <analog_sensor_get>
 8001960:	4603      	mov	r3, r0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4633      	mov	r3, r6
 8001966:	462a      	mov	r2, r5
 8001968:	4621      	mov	r1, r4
 800196a:	4844      	ldr	r0, [pc, #272]	; (8001a7c <analog_rate_array_print+0x154>)
 800196c:	f00a f95e 	bl	800bc2c <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10), analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3), analog_sensor_get(1));
 8001970:	2000      	movs	r0, #0
 8001972:	f000 fa3d 	bl	8001df0 <analog_sensor_get>
 8001976:	4603      	mov	r3, r0
 8001978:	4698      	mov	r8, r3
 800197a:	2002      	movs	r0, #2
 800197c:	f000 fa38 	bl	8001df0 <analog_sensor_get>
 8001980:	4603      	mov	r3, r0
 8001982:	4699      	mov	r9, r3
 8001984:	2004      	movs	r0, #4
 8001986:	f000 fa33 	bl	8001df0 <analog_sensor_get>
 800198a:	4603      	mov	r3, r0
 800198c:	469a      	mov	sl, r3
 800198e:	2006      	movs	r0, #6
 8001990:	f000 fa2e 	bl	8001df0 <analog_sensor_get>
 8001994:	4603      	mov	r3, r0
 8001996:	461c      	mov	r4, r3
 8001998:	2008      	movs	r0, #8
 800199a:	f000 fa29 	bl	8001df0 <analog_sensor_get>
 800199e:	4603      	mov	r3, r0
 80019a0:	461d      	mov	r5, r3
 80019a2:	200a      	movs	r0, #10
 80019a4:	f000 fa24 	bl	8001df0 <analog_sensor_get>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461e      	mov	r6, r3
 80019ac:	200b      	movs	r0, #11
 80019ae:	f000 fa1f 	bl	8001df0 <analog_sensor_get>
 80019b2:	4603      	mov	r3, r0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	2009      	movs	r0, #9
 80019b8:	f000 fa1a 	bl	8001df0 <analog_sensor_get>
 80019bc:	4603      	mov	r3, r0
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	2007      	movs	r0, #7
 80019c2:	f000 fa15 	bl	8001df0 <analog_sensor_get>
 80019c6:	4603      	mov	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	2005      	movs	r0, #5
 80019cc:	f000 fa10 	bl	8001df0 <analog_sensor_get>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	2003      	movs	r0, #3
 80019d6:	f000 fa0b 	bl	8001df0 <analog_sensor_get>
 80019da:	4603      	mov	r3, r0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fa06 	bl	8001df0 <analog_sensor_get>
 80019e4:	4603      	mov	r3, r0
 80019e6:	9308      	str	r3, [sp, #32]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	9207      	str	r2, [sp, #28]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	9206      	str	r2, [sp, #24]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	9205      	str	r2, [sp, #20]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	9204      	str	r2, [sp, #16]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	9303      	str	r3, [sp, #12]
 80019fc:	9602      	str	r6, [sp, #8]
 80019fe:	9501      	str	r5, [sp, #4]
 8001a00:	9400      	str	r4, [sp, #0]
 8001a02:	4653      	mov	r3, sl
 8001a04:	464a      	mov	r2, r9
 8001a06:	4641      	mov	r1, r8
 8001a08:	481d      	ldr	r0, [pc, #116]	; (8001a80 <analog_rate_array_print+0x158>)
 8001a0a:	f00a f90f 	bl	800bc2c <iprintf>
	printf("\r\n");
 8001a0e:	4819      	ldr	r0, [pc, #100]	; (8001a74 <analog_rate_array_print+0x14c>)
 8001a10:	f00a f992 	bl	800bd38 <puts>

	uint16_t sum_, size_;

	sum_ = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	83fb      	strh	r3, [r7, #30]
	size_ = 16;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	837b      	strh	r3, [r7, #26]

	for(unsigned char i; i < size_; i++)
 8001a1c:	e00b      	b.n	8001a36 <analog_rate_array_print+0x10e>
	{
		sum_ += analog_sensor_get(i);
 8001a1e:	7f7b      	ldrb	r3, [r7, #29]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 f9e5 	bl	8001df0 <analog_sensor_get>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	8bfb      	ldrh	r3, [r7, #30]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	83fb      	strh	r3, [r7, #30]
	for(unsigned char i; i < size_; i++)
 8001a30:	7f7b      	ldrb	r3, [r7, #29]
 8001a32:	3301      	adds	r3, #1
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	7f7b      	ldrb	r3, [r7, #29]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	8b7a      	ldrh	r2, [r7, #26]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8ee      	bhi.n	8001a1e <analog_rate_array_print+0xf6>
	}

	printf("average = %4.2f\r\n\r\n", sum_ / (float) size_);
 8001a40:	8bfb      	ldrh	r3, [r7, #30]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4a:	8b7b      	ldrh	r3, [r7, #26]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a58:	ee16 0a90 	vmov	r0, s13
 8001a5c:	f7fe fd74 	bl	8000548 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <analog_rate_array_print+0x15c>)
 8001a66:	f00a f8e1 	bl	800bc2c <iprintf>
}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a74:	08010918 	.word	0x08010918
 8001a78:	080108b8 	.word	0x080108b8
 8001a7c:	080108c0 	.word	0x080108c0
 8001a80:	080108d8 	.word	0x080108d8
 8001a84:	0801091c 	.word	0x0801091c

08001a88 <analog_d_print>:

void analog_d_print()
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
#if D_ANALOG
	//analog_print_analogmode();
	analog_rate_array_print();
 8001a8c:	f7ff ff4c 	bl	8001928 <analog_rate_array_print>
	analog_array_print(analog);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <analog_d_print+0x14>)
 8001a92:	f7ff fee3 	bl	800185c <analog_array_print>
#endif
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000248 	.word	0x20000248

08001aa0 <analog_print_max>:
	#endif
	analog_array_print(analog);
}

void analog_print_max()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <analog_print_max+0x20>)
 8001aa6:	f00a f8c1 	bl	800bc2c <iprintf>
	printf("analog_print_max\r\n");
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <analog_print_max+0x24>)
 8001aac:	f00a f944 	bl	800bd38 <puts>
	analog_array_print(analogmax);
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <analog_print_max+0x28>)
 8001ab2:	f7ff fed3 	bl	800185c <analog_array_print>
	printf(ESC_DEF);
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <analog_print_max+0x2c>)
 8001ab8:	f00a f8b8 	bl	800bc2c <iprintf>
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	080109ac 	.word	0x080109ac
 8001ac4:	080109b4 	.word	0x080109b4
 8001ac8:	20000268 	.word	0x20000268
 8001acc:	080109c8 	.word	0x080109c8

08001ad0 <analog_print_min>:

void analog_print_min()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <analog_print_min+0x20>)
 8001ad6:	f00a f8a9 	bl	800bc2c <iprintf>
	printf("analog_print_min\r\n");
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <analog_print_min+0x24>)
 8001adc:	f00a f92c 	bl	800bd38 <puts>
	analog_array_print(analogmin);
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <analog_print_min+0x28>)
 8001ae2:	f7ff febb 	bl	800185c <analog_array_print>
	printf(ESC_DEF);
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <analog_print_min+0x2c>)
 8001ae8:	f00a f8a0 	bl	800bc2c <iprintf>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	080109d0 	.word	0x080109d0
 8001af4:	080109d8 	.word	0x080109d8
 8001af8:	20000288 	.word	0x20000288
 8001afc:	080109c8 	.word	0x080109c8

08001b00 <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_to_flash()\r\n");
 8001b0a:	482a      	ldr	r0, [pc, #168]	; (8001bb4 <analog_set_on_flash+0xb4>)
 8001b0c:	f00a f914 	bl	800bd38 <puts>
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e046      	b.n	8001ba4 <analog_set_on_flash+0xa4>
	{
		#if D_ANALOG
		printf(ESC_MAG);
 8001b16:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <analog_set_on_flash+0xb8>)
 8001b18:	f00a f888 	bl	800bc2c <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001b1c:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <analog_set_on_flash+0xbc>)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	885b      	ldrh	r3, [r3, #2]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <analog_set_on_flash+0xbc>)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3310      	adds	r3, #16
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	885b      	ldrh	r3, [r3, #2]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	460a      	mov	r2, r1
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <analog_set_on_flash+0xc0>)
 8001b3e:	f00a f875 	bl	800bc2c <iprintf>
		printf(ESC_DEF);
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <analog_set_on_flash+0xc4>)
 8001b44:	f00a f872 	bl	800bc2c <iprintf>
		#endif
		*(analogmin_ + i) = analogmin[i];
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	491d      	ldr	r1, [pc, #116]	; (8001bc8 <analog_set_on_flash+0xc8>)
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b58:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	4413      	add	r3, r2
 8001b62:	491a      	ldr	r1, [pc, #104]	; (8001bcc <analog_set_on_flash+0xcc>)
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b6a:	801a      	strh	r2, [r3, #0]
		#if D_ANALOG
		printf(ESC_GRE);
 8001b6c:	4818      	ldr	r0, [pc, #96]	; (8001bd0 <analog_set_on_flash+0xd0>)
 8001b6e:	f00a f85d 	bl	800bc2c <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <analog_set_on_flash+0xbc>)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	885b      	ldrh	r3, [r3, #2]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <analog_set_on_flash+0xbc>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3310      	adds	r3, #16
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	885b      	ldrh	r3, [r3, #2]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	460a      	mov	r2, r1
 8001b90:	68f9      	ldr	r1, [r7, #12]
 8001b92:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <analog_set_on_flash+0xc0>)
 8001b94:	f00a f84a 	bl	800bc2c <iprintf>
		printf(ESC_DEF);
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <analog_set_on_flash+0xc4>)
 8001b9a:	f00a f847 	bl	800bc2c <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	d9b5      	bls.n	8001b16 <analog_set_on_flash+0x16>
		#endif
	}
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	080109ec 	.word	0x080109ec
 8001bb8:	08010a04 	.word	0x08010a04
 8001bbc:	200007e8 	.word	0x200007e8
 8001bc0:	08010a0c 	.word	0x08010a0c
 8001bc4:	080109c8 	.word	0x080109c8
 8001bc8:	20000288 	.word	0x20000288
 8001bcc:	20000268 	.word	0x20000268
 8001bd0:	08010a48 	.word	0x08010a48

08001bd4 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_from_flash()\r\n");
 8001bde:	4824      	ldr	r0, [pc, #144]	; (8001c70 <analog_set_from_flash+0x9c>)
 8001be0:	f00a f8aa 	bl	800bd38 <puts>
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e03a      	b.n	8001c60 <analog_set_from_flash+0x8c>
	{
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <analog_set_from_flash+0xa0>)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	885b      	ldrh	r3, [r3, #2]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <analog_set_from_flash+0xa0>)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	885b      	ldrh	r3, [r3, #2]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	460a      	mov	r2, r1
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	481b      	ldr	r0, [pc, #108]	; (8001c78 <analog_set_from_flash+0xa4>)
 8001c0c:	f00a f80e 	bl	800bc2c <iprintf>
		#endif
		analogmin[i] = *(analogmin_ + i);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	8819      	ldrh	r1, [r3, #0]
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <analog_set_from_flash+0xa8>)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	8819      	ldrh	r1, [r3, #0]
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <analog_set_from_flash+0xac>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <analog_set_from_flash+0xa0>)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	885b      	ldrh	r3, [r3, #2]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <analog_set_from_flash+0xa0>)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3310      	adds	r3, #16
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	885b      	ldrh	r3, [r3, #2]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	460a      	mov	r2, r1
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <analog_set_from_flash+0xa4>)
 8001c56:	f009 ffe9 	bl	800bc2c <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	d9c1      	bls.n	8001bea <analog_set_from_flash+0x16>
		#endif
	}
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	08010a50 	.word	0x08010a50
 8001c74:	200007e8 	.word	0x200007e8
 8001c78:	08010a0c 	.word	0x08010a0c
 8001c7c:	20000288 	.word	0x20000288
 8001c80:	20000268 	.word	0x20000268

08001c84 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <analog_set_calibrationsize+0x1c>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	7013      	strb	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	20000224 	.word	0x20000224

08001ca4 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <analog_set_analogmode+0x1c>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	7013      	strb	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200003e8 	.word	0x200003e8

08001cc4 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	return analogmode;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <analog_read_analogmode+0x14>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200003e8 	.word	0x200003e8

08001cdc <analog_calibration_start>:

void analog_calibration_start()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001ce2:	2010      	movs	r0, #16
 8001ce4:	f7ff ffde 	bl	8001ca4 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	e00d      	b.n	8001d0a <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <analog_calibration_start+0x48>)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <analog_calibration_start+0x4c>)
 8001cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	3301      	adds	r3, #1
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d9ee      	bls.n	8001cee <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001d10:	f7ff fec6 	bl	8001aa0 <analog_print_max>
	analog_print_min();
 8001d14:	f7ff fedc 	bl	8001ad0 <analog_print_min>
	analog_sensor_start();
 8001d18:	f000 f844 	bl	8001da4 <analog_sensor_start>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000268 	.word	0x20000268
 8001d28:	20000288 	.word	0x20000288

08001d2c <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001d30:	2010      	movs	r0, #16
 8001d32:	f7ff ffb7 	bl	8001ca4 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001d36:	f000 f82f 	bl	8001d98 <analog_stop>
	analog_print_max();
 8001d3a:	f7ff feb1 	bl	8001aa0 <analog_print_max>
	analog_print_min();
 8001d3e:	f7ff fec7 	bl	8001ad0 <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001d42:	4904      	ldr	r1, [pc, #16]	; (8001d54 <analog_calibration_stop+0x28>)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <analog_calibration_stop+0x2c>)
 8001d46:	f7ff fedb 	bl	8001b00 <analog_set_on_flash>
	flash_write();
 8001d4a:	f001 f83f 	bl	8002dcc <flash_write>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000080a 	.word	0x2000080a
 8001d58:	200007ea 	.word	0x200007ea

08001d5c <analog_init>:

void analog_init()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001d60:	2010      	movs	r0, #16
 8001d62:	f7ff ff8f 	bl	8001c84 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <analog_init+0x20>)
 8001d68:	f004 fa2e 	bl	80061c8 <HAL_ADC_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <analog_init+0x1a>
    {
        Error_Handler();
 8001d72:	f002 f91b 	bl	8003fac <Error_Handler>
    }
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000404 	.word	0x20000404

08001d80 <analog_start>:

void analog_start()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("analog_sensor_start()\r\n");
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <analog_start+0x14>)
 8001d86:	f009 ffd7 	bl	800bd38 <puts>
	#endif
	analog_sensor_start();
 8001d8a:	f000 f80b 	bl	8001da4 <analog_sensor_start>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	08010a6c 	.word	0x08010a6c

08001d98 <analog_stop>:

void analog_stop()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001d9c:	f000 f81e 	bl	8001ddc <analog_sensor_stop>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <analog_sensor_start>:

void analog_sensor_start()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <analog_sensor_start+0x28>)
 8001daa:	f009 ffc5 	bl	800bd38 <puts>
	#endif
    sensgettime = 0;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <analog_sensor_start+0x2c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001db4:	2210      	movs	r2, #16
 8001db6:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <analog_sensor_start+0x30>)
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <analog_sensor_start+0x34>)
 8001dba:	f004 fa49 	bl	8006250 <HAL_ADC_Start_DMA>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <analog_sensor_start+0x24>
    {
        Error_Handler();
 8001dc4:	f002 f8f2 	bl	8003fac <Error_Handler>
    }
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08010a84 	.word	0x08010a84
 8001dd0:	20000220 	.word	0x20000220
 8001dd4:	20000228 	.word	0x20000228
 8001dd8:	20000404 	.word	0x20000404

08001ddc <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <analog_sensor_stop+0x10>)
 8001de2:	f004 fb45 	bl	8006470 <HAL_ADC_Stop_DMA>
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000404 	.word	0x20000404

08001df0 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	uint16_t analog_before;
	//! 前の値を保存しておく
	analog_before = analograte[i];
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <analog_sensor_get+0xc8>)
 8001dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e02:	81fb      	strh	r3, [r7, #14]
	//! 割合を取得する
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (float) (analogmax[i] - analogmin[i]);
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <analog_sensor_get+0xcc>)
 8001e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <analog_sensor_get+0xd0>)
 8001e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e16:	1acb      	subs	r3, r1, r3
 8001e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <analog_sensor_get+0xd4>)
 8001e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e30:	4619      	mov	r1, r3
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <analog_sensor_get+0xd0>)
 8001e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e3a:	1acb      	subs	r3, r1, r3
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4e:	ee17 2a90 	vmov	r2, s15
 8001e52:	b291      	uxth	r1, r2
 8001e54:	4a18      	ldr	r2, [pc, #96]	; (8001eb8 <analog_sensor_get+0xc8>)
 8001e56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(float)800, 500);
#endif
	//! ローパスフィルタに通す
	analograte[i] = low_pass_filter(analograte[i], analog_before, ANALOG_LPF_GAMMA);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <analog_sensor_get+0xc8>)
 8001e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb4e 	bl	8000504 <__aeabi_ui2d>
 8001e68:	4604      	mov	r4, r0
 8001e6a:	460d      	mov	r5, r1
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb48 	bl	8000504 <__aeabi_ui2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001eb0 <analog_sensor_get+0xc0>
 8001e7c:	ec43 2b11 	vmov	d1, r2, r3
 8001e80:	ec45 4b10 	vmov	d0, r4, r5
 8001e84:	f000 ffc8 	bl	8002e18 <low_pass_filter>
 8001e88:	ec53 2b10 	vmov	r2, r3, d0
 8001e8c:	79fc      	ldrb	r4, [r7, #7]
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fe89 	bl	8000ba8 <__aeabi_d2uiz>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <analog_sensor_get+0xc8>)
 8001e9c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	return analograte[i];
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <analog_sensor_get+0xc8>)
 8001ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001eb8:	200002a8 	.word	0x200002a8
 8001ebc:	20000248 	.word	0x20000248
 8001ec0:	20000288 	.word	0x20000288
 8001ec4:	20000268 	.word	0x20000268

08001ec8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001ed0:	f000 f804 	bl	8001edc <analog_get_and_sort>
#endif
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001edc:	b490      	push	{r4, r7}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <analog_get_and_sort+0x120>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d968      	bls.n	8001fbc <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001eea:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <analog_get_and_sort+0x120>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	e05f      	b.n	8001fb6 <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	71bb      	strb	r3, [r7, #6]
 8001efa:	e02d      	b.n	8001f58 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001efc:	2300      	movs	r3, #0
 8001efe:	717b      	strb	r3, [r7, #5]
 8001f00:	e023      	b.n	8001f4a <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001f02:	797b      	ldrb	r3, [r7, #5]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	493d      	ldr	r1, [pc, #244]	; (8002000 <analog_get_and_sort+0x124>)
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f12:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001f14:	7978      	ldrb	r0, [r7, #5]
 8001f16:	79f9      	ldrb	r1, [r7, #7]
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	1e5a      	subs	r2, r3, #1
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	4c38      	ldr	r4, [pc, #224]	; (8002000 <analog_get_and_sort+0x124>)
 8001f20:	0100      	lsls	r0, r0, #4
 8001f22:	4401      	add	r1, r0
 8001f24:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001f28:	4935      	ldr	r1, [pc, #212]	; (8002000 <analog_get_and_sort+0x124>)
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001f34:	797a      	ldrb	r2, [r7, #5]
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4931      	ldr	r1, [pc, #196]	; (8002000 <analog_get_and_sort+0x124>)
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	717b      	strb	r3, [r7, #5]
 8001f4a:	797a      	ldrb	r2, [r7, #5]
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d8d7      	bhi.n	8001f02 <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	3301      	adds	r3, #1
 8001f56:	71bb      	strb	r3, [r7, #6]
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d9ce      	bls.n	8001efc <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001f5e:	79fa      	ldrb	r2, [r7, #7]
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <analog_get_and_sort+0x124>)
 8001f64:	3240      	adds	r2, #64	; 0x40
 8001f66:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <analog_get_and_sort+0x128>)
 8001f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4a25      	ldr	r2, [pc, #148]	; (8002008 <analog_get_and_sort+0x12c>)
 8001f74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <analog_get_and_sort+0x128>)
 8001f7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	428a      	cmp	r2, r1
 8001f84:	bf38      	it	cc
 8001f86:	460a      	movcc	r2, r1
 8001f88:	b291      	uxth	r1, r2
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <analog_get_and_sort+0x12c>)
 8001f8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	4a1e      	ldr	r2, [pc, #120]	; (800200c <analog_get_and_sort+0x130>)
 8001f94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <analog_get_and_sort+0x128>)
 8001f9c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	428a      	cmp	r2, r1
 8001fa4:	bf28      	it	cs
 8001fa6:	460a      	movcs	r2, r1
 8001fa8:	b291      	uxth	r1, r2
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <analog_get_and_sort+0x130>)
 8001fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	71fb      	strb	r3, [r7, #7]
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d99c      	bls.n	8001ef6 <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	713b      	strb	r3, [r7, #4]
 8001fc0:	e00f      	b.n	8001fe2 <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001fc2:	7939      	ldrb	r1, [r7, #4]
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <analog_get_and_sort+0x120>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	793b      	ldrb	r3, [r7, #4]
 8001fca:	4811      	ldr	r0, [pc, #68]	; (8002010 <analog_get_and_sort+0x134>)
 8001fcc:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001fd0:	490b      	ldr	r1, [pc, #44]	; (8002000 <analog_get_and_sort+0x124>)
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001fdc:	793b      	ldrb	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	713b      	strb	r3, [r7, #4]
 8001fe2:	793b      	ldrb	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d9ec      	bls.n	8001fc2 <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <analog_get_and_sort+0x120>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <analog_get_and_sort+0x120>)
 8001ff0:	6013      	str	r3, [r2, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc90      	pop	{r4, r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000220 	.word	0x20000220
 8002000:	200002c8 	.word	0x200002c8
 8002004:	20000248 	.word	0x20000248
 8002008:	20000268 	.word	0x20000268
 800200c:	20000288 	.word	0x20000288
 8002010:	20000228 	.word	0x20000228

08002014 <course_init>:
float course_update_section_sampling_time_s;
float course_accel_max;
float __course_debug_target_speed__;

void course_init(unsigned short int samplingtime_ms)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
	imu_init();
 800201e:	f7ff f847 	bl	80010b0 <imu_init>
	course_state_count = 0;
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <course_init+0x24>)
 8002024:	2200      	movs	r2, #0
 8002026:	801a      	strh	r2, [r3, #0]
	course_set_update_section_freq_ms(samplingtime_ms);
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f88a 	bl	8002144 <course_set_update_section_freq_ms>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200003ea 	.word	0x200003ea

0800203c <course_start>:

void course_start()
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	/* course_start */
	course_state_count = 0;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <course_start+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]
	course_accel_max = accel_max_calc(rotary_read_value());
 8002046:	f7ff fabf 	bl	80015c8 <rotary_read_value>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fd5b 	bl	8002b08 <accel_max_calc>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <course_start+0x50>)
 8002058:	edc3 7a00 	vstr	s15, [r3]
	course_reset_section_degree();
 800205c:	f000 f89c 	bl	8002198 <course_reset_section_degree>
	if(rotary_read_playmode() == search)
 8002060:	f7ff fa9a 	bl	8001598 <rotary_read_playmode>
 8002064:	4603      	mov	r3, r0
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <course_start+0x32>
	{
		course_reset_flash();
 800206a:	f000 fd1d 	bl	8002aa8 <course_reset_flash>
	}
	if(rotary_read_playmode() == accel)
 800206e:	f7ff fa93 	bl	8001598 <rotary_read_playmode>
 8002072:	4603      	mov	r3, r0
 8002074:	2b02      	cmp	r3, #2
 8002076:	d103      	bne.n	8002080 <course_start+0x44>
	{
		//! 走る前に速度を計算して書き込んでからスタートする
		course_fixing_radius2speed();
 8002078:	f000 f9ea 	bl	8002450 <course_fixing_radius2speed>
		flash_write();
 800207c:	f000 fea6 	bl	8002dcc <flash_write>
	}
	imu_start();
 8002080:	f7ff f8be 	bl	8001200 <imu_start>
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200003ea 	.word	0x200003ea
 800208c:	200003fc 	.word	0x200003fc

08002090 <course_stop>:

void course_stop()
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == accel)
 8002094:	f7ff fa80 	bl	8001598 <rotary_read_playmode>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d004      	beq.n	80020a8 <course_stop+0x18>
 800209e:	f7ff fa7b 	bl	8001598 <rotary_read_playmode>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d101      	bne.n	80020ac <course_stop+0x1c>
	{
		flash_write();
 80020a8:	f000 fe90 	bl	8002dcc <flash_write>
	}
	imu_stop();
 80020ac:	f7ff f8af 	bl	800120e <imu_stop>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	0000      	movs	r0, r0
	...

080020b8 <course_update_section_degree>:
 * 好きな時に course_section_degree をリセットする
 * course_update_section_degree() は course_update_section_sampling_time_s の周期で常に実行され続ける
 * 
 */
void course_update_section_degree()
{
 80020b8:	b5b0      	push	{r4, r5, r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
	float tmp;
	imu_update_gyro();
 80020be:	f7ff f8af 	bl	8001220 <imu_update_gyro>
	#if D_COURSE_WHILE
	printf("imu_read_yaw() = %7.2lf, course_section_degree = %7.2lf\r\n", imu_read_yaw(), course_section_degree);
	#endif
	course_sampling_count = course_sampling_count + 1;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <course_update_section_degree+0x80>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <course_update_section_degree+0x80>)
 80020cc:	801a      	strh	r2, [r3, #0]
	tmp = course_section_degree + imu_read_yaw() * course_update_section_sampling_time_s;
 80020ce:	f7ff f95b 	bl	8001388 <imu_read_yaw>
 80020d2:	eeb0 7a40 	vmov.f32	s14, s0
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <course_update_section_degree+0x84>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <course_update_section_degree+0x88>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ea:	edc7 7a01 	vstr	s15, [r7, #4]
	course_section_degree = low_pass_filter(tmp, course_section_degree, 0);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fa2a 	bl	8000548 <__aeabi_f2d>
 80020f4:	4604      	mov	r4, r0
 80020f6:	460d      	mov	r5, r1
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <course_update_section_degree+0x88>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa23 	bl	8000548 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8002130 <course_update_section_degree+0x78>
 800210a:	ec43 2b11 	vmov	d1, r2, r3
 800210e:	ec45 4b10 	vmov	d0, r4, r5
 8002112:	f000 fe81 	bl	8002e18 <low_pass_filter>
 8002116:	ec53 2b10 	vmov	r2, r3, d0
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f7fe fd63 	bl	8000be8 <__aeabi_d2f>
 8002122:	4603      	mov	r3, r0
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <course_update_section_degree+0x88>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8002138:	200003ec 	.word	0x200003ec
 800213c:	200003f8 	.word	0x200003f8
 8002140:	200003f0 	.word	0x200003f0

08002144 <course_set_update_section_freq_ms>:

void course_set_update_section_freq_ms(unsigned short int samplingtime_ms)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
	course_update_section_sampling_time_s = samplingtime_ms / (float) 1000;
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002158:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002174 <course_set_update_section_freq_ms+0x30>
 800215c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <course_set_update_section_freq_ms+0x34>)
 8002162:	edc3 7a00 	vstr	s15, [r3]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	447a0000 	.word	0x447a0000
 8002178:	200003f8 	.word	0x200003f8

0800217c <course_read_section_degree>:

float course_read_section_degree()
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
	return course_section_degree;
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <course_read_section_degree+0x18>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	ee07 3a90 	vmov	s15, r3
}
 8002188:	eeb0 0a67 	vmov.f32	s0, s15
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	200003f0 	.word	0x200003f0

08002198 <course_reset_section_degree>:

void course_reset_section_degree()
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	course_sampling_count = 0;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <course_reset_section_degree+0x1c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	801a      	strh	r2, [r3, #0]
	course_section_degree = 0;
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <course_reset_section_degree+0x20>)
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	200003ec 	.word	0x200003ec
 80021b8:	200003f0 	.word	0x200003f0

080021bc <course_reset>:

void course_reset()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	course_reset_section_degree();
 80021c0:	f7ff ffea 	bl	8002198 <course_reset_section_degree>
	section_length_reset();
 80021c4:	f002 f844 	bl	8004250 <section_length_reset>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <course_read_curvature_radius>:

float course_read_curvature_radius()
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
	return course_section_radius;
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <course_read_curvature_radius+0x18>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	ee07 3a90 	vmov	s15, r3
}
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	200003f4 	.word	0x200003f4

080021e8 <course_read_state_count>:

uint16_t course_read_state_count()
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
    return course_state_count;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <course_read_state_count+0x14>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200003ea 	.word	0x200003ea

08002200 <course_increment_state_count>:
{
	return course_sampling_count;
}

void course_increment_state_count()
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    course_state_count++;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <course_increment_state_count+0x1c>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <course_increment_state_count+0x1c>)
 800220e:	801a      	strh	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200003ea 	.word	0x200003ea

08002220 <course_calclate_radius>:
 * course_reset()					// 角度と長さ情報をリセットする
 * の順に呼び出す必要がある
 * 
 */
void course_calclate_radius()
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
    float curvature_radius;
	float section_degree, section_length;
	float section_radian;

    //! 現在の区間長を取得する */
	section_length = section_length_read();
 8002226:	f002 f83b 	bl	80042a0 <section_length_read>
 800222a:	ed87 0a03 	vstr	s0, [r7, #12]
	//! 現在点を次の区間開始点に設定する
	section_length_set_buffer();
 800222e:	f002 f86d 	bl	800430c <section_length_set_buffer>
	//! 角度を取得する
	section_degree = course_read_section_degree();
 8002232:	f7ff ffa3 	bl	800217c <course_read_section_degree>
 8002236:	ed87 0a02 	vstr	s0, [r7, #8]

#if MODE_IMU_CALCLATE
	course_section_length = // course_section_length_from_imu
#endif

	section_radian = section_degree * M_PI / (float) 180;
 800223a:	68b8      	ldr	r0, [r7, #8]
 800223c:	f7fe f984 	bl	8000548 <__aeabi_f2d>
 8002240:	a315      	add	r3, pc, #84	; (adr r3, 8002298 <course_calclate_radius+0x78>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe f9d7 	bl	80005f8 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <course_calclate_radius+0x70>)
 8002258:	f7fe faf8 	bl	800084c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f7fe fcc0 	bl	8000be8 <__aeabi_d2f>
 8002268:	4603      	mov	r3, r0
 800226a:	607b      	str	r3, [r7, #4]
	curvature_radius = section_length / (float) section_radian;
 800226c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002270:	ed97 7a01 	vldr	s14, [r7, #4]
 8002274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002278:	edc7 7a00 	vstr	s15, [r7]
	course_section_radius = curvature_radius;
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <course_calclate_radius+0x74>)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6013      	str	r3, [r2, #0]
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	f3af 8000 	nop.w
 8002290:	40668000 	.word	0x40668000
 8002294:	200003f4 	.word	0x200003f4
 8002298:	54442d18 	.word	0x54442d18
 800229c:	400921fb 	.word	0x400921fb

080022a0 <course_state_function>:
 * 左センサを読んだら、あるいは、一定区間進んだら course_state_function() を実行するようにプログラムする
 * 探索か二次走行かは course_state_function() 関数内で判断する必要がある
 * 
 */
void course_state_function()
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
	PlayMode pm;
	pm = rotary_read_playmode();
 80022a6:	f7ff f977 	bl	8001598 <rotary_read_playmode>
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
	if(pm == search || pm == motor_free )
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d002      	beq.n	80022ba <course_state_function+0x1a>
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d128      	bne.n	800230c <course_state_function+0x6c>
	{
		flashbuffer.course_state_count_max = course_read_state_count();
 80022ba:	f7ff ff95 	bl	80021e8 <course_read_state_count>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <course_state_function+0xa4>)
 80022c4:	801a      	strh	r2, [r3, #0]
		course_calclate_radius();
 80022c6:	f7ff ffab 	bl	8002220 <course_calclate_radius>
		flashbuffer.radius[course_state_count] = course_read_curvature_radius();
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <course_state_function+0xa8>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	461c      	mov	r4, r3
 80022d0:	f7ff ff7c 	bl	80021cc <course_read_curvature_radius>
 80022d4:	eef0 7a40 	vmov.f32	s15, s0
 80022d8:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <course_state_function+0xa4>)
 80022da:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	edc3 7a00 	vstr	s15, [r3]
		//! 区間長と区間角度と区間半径をリセット
		course_reset();
 80022e8:	f7ff ff68 	bl	80021bc <course_reset>
		//! マーカを読んだ場所の記録
		flashbuffer.marker[course_state_count] = length_read();
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <course_state_function+0xa8>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	461c      	mov	r4, r3
 80022f2:	f000 fe53 	bl	8002f9c <length_read>
 80022f6:	eef0 7a40 	vmov.f32	s15, s0
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <course_state_function+0xa4>)
 80022fc:	f504 533b 	add.w	r3, r4, #11968	; 0x2ec0
 8002300:	3330      	adds	r3, #48	; 0x30
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	3304      	adds	r3, #4
 8002308:	edc3 7a00 	vstr	s15, [r3]
	}
	if(pm == accel)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d111      	bne.n	8002336 <course_state_function+0x96>
	{
		float fixed_velocity_target;
		// course_calclate_radius() を呼び出していないのでリセットする必要がある
		section_length_set_buffer();
 8002312:	f001 fffb 	bl	800430c <section_length_set_buffer>
		fixed_velocity_target = flashbuffer.speed[course_state_count];
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <course_state_function+0xa8>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <course_state_function+0xa4>)
 800231c:	3310      	adds	r3, #16
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	603b      	str	r3, [r7, #0]
		__course_debug_target_speed__ = fixed_velocity_target;
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <course_state_function+0xac>)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6013      	str	r3, [r2, #0]
		velotrace_set_target_direct(fixed_velocity_target);
 800232e:	ed97 0a00 	vldr	s0, [r7]
 8002332:	f003 fc9b 	bl	8005c6c <velotrace_set_target_direct>
	}
	course_increment_state_count();
 8002336:	f7ff ff63 	bl	8002200 <course_increment_state_count>
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
 8002342:	bf00      	nop
 8002344:	200007e8 	.word	0x200007e8
 8002348:	200003ea 	.word	0x200003ea
 800234c:	20000400 	.word	0x20000400

08002350 <course_d_print>:

void course_d_print()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
#if D_COURSE
	printf("__course_debug_target_speed__ = %2.5f\r\n", __course_debug_target_speed__);
#endif
	encoder_d_print();
 8002354:	f000 fc2c 	bl	8002bb0 <encoder_d_print>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <course_radius2speed>:

float course_radius2speed(float radius)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed;
	radius = fabs(radius);
 8002366:	edd7 7a01 	vldr	s15, [r7, #4]
 800236a:	eef0 7ae7 	vabs.f32	s15, s15
 800236e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(radius < 0.075f) speed = 1.000f;
 8002372:	edd7 7a01 	vldr	s15, [r7, #4]
 8002376:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002438 <course_radius2speed+0xdc>
 800237a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	d503      	bpl.n	800238c <course_radius2speed+0x30>
 8002384:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e04b      	b.n	8002424 <course_radius2speed+0xc8>
    else if(radius < 0.125f) speed = 1.200f;
 800238c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002390:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	d502      	bpl.n	80023a4 <course_radius2speed+0x48>
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <course_radius2speed+0xe0>)
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e03f      	b.n	8002424 <course_radius2speed+0xc8>
    else if(radius < 0.175f) speed = 1.500f;
 80023a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002440 <course_radius2speed+0xe4>
 80023ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	d503      	bpl.n	80023be <course_radius2speed+0x62>
 80023b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e032      	b.n	8002424 <course_radius2speed+0xc8>
    else if(radius < 0.45f) speed = 2.00f;
 80023be:	edd7 7a01 	vldr	s15, [r7, #4]
 80023c2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002444 <course_radius2speed+0xe8>
 80023c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	d503      	bpl.n	80023d8 <course_radius2speed+0x7c>
 80023d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e025      	b.n	8002424 <course_radius2speed+0xc8>
    else if(radius < 0.8f) speed = 2.500f;
 80023d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80023dc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002448 <course_radius2speed+0xec>
 80023e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d502      	bpl.n	80023f0 <course_radius2speed+0x94>
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <course_radius2speed+0xf0>)
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e019      	b.n	8002424 <course_radius2speed+0xc8>
    else if(radius < 1.5f) speed = 2.500f;
 80023f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80023f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	d502      	bpl.n	8002408 <course_radius2speed+0xac>
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <course_radius2speed+0xf0>)
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e00d      	b.n	8002424 <course_radius2speed+0xc8>
    else if(radius < 2.5f) speed = 2.500f;
 8002408:	edd7 7a01 	vldr	s15, [r7, #4]
 800240c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	d502      	bpl.n	8002420 <course_radius2speed+0xc4>
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <course_radius2speed+0xf0>)
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	e001      	b.n	8002424 <course_radius2speed+0xc8>
    else speed = 2.50f;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <course_radius2speed+0xf0>)
 8002422:	60fb      	str	r3, [r7, #12]
	// speed = - (4238566523291511 * pow(radius, 5)) / (double) 633825300114114700748351602688 + (8582934509267735 * pow(radius, 4)) / (double) 77371252455336267181195264 - (1459060547913519 * pow(radius, 3)) / (double) 2361183241434822606848 + (2682365349594497 * pow(radius, 2)) / (double) 2305843009213693952 + (1737420468106149 * radius) / (double) 4503599627370496 + 7057670738269725 / (double) 8796093022208;
	return speed;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	ee07 3a90 	vmov	s15, r3
}
 800242a:	eeb0 0a67 	vmov.f32	s0, s15
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	3d99999a 	.word	0x3d99999a
 800243c:	3f99999a 	.word	0x3f99999a
 8002440:	3e333333 	.word	0x3e333333
 8002444:	3ee66666 	.word	0x3ee66666
 8002448:	3f4ccccd 	.word	0x3f4ccccd
 800244c:	40200000 	.word	0x40200000

08002450 <course_fixing_radius2speed>:

void course_fixing_radius2speed()
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	f5ad 4d3b 	sub.w	sp, sp, #47872	; 0xbb00
 8002456:	b0ae      	sub	sp, #184	; 0xb8
 8002458:	af00      	add	r7, sp, #0
	float accel_length;
	uint16_t imax;
	imax = flashbuffer.course_state_count_max;
 800245a:	4bb3      	ldr	r3, [pc, #716]	; (8002728 <course_fixing_radius2speed+0x2d8>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002462:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8002466:	8013      	strh	r3, [r2, #0]
	/* まず矩形グラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002468:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800246c:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002476:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 800247a:	8013      	strh	r3, [r2, #0]
 800247c:	e03a      	b.n	80024f4 <course_fixing_radius2speed+0xa4>
	{
		uint16_t index;
		index = imax - course_state_size;
 800247e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002482:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800248c:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002498:	f102 0286 	add.w	r2, r2, #134	; 0x86
 800249c:	8013      	strh	r3, [r2, #0]
		flashbuffer.speed[index] = course_radius2speed(flashbuffer.radius[index]);
 800249e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024a2:	f103 0386 	add.w	r3, r3, #134	; 0x86
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	4a9f      	ldr	r2, [pc, #636]	; (8002728 <course_fixing_radius2speed+0x2d8>)
 80024aa:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3304      	adds	r3, #4
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024bc:	f103 0386 	add.w	r3, r3, #134	; 0x86
 80024c0:	881c      	ldrh	r4, [r3, #0]
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	f7ff ff49 	bl	800235c <course_radius2speed>
 80024ca:	eef0 7a40 	vmov.f32	s15, s0
 80024ce:	4a96      	ldr	r2, [pc, #600]	; (8002728 <course_fixing_radius2speed+0x2d8>)
 80024d0:	f104 0310 	add.w	r3, r4, #16
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80024de:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024e2:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024ee:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 80024f2:	8013      	strh	r3, [r2, #0]
 80024f4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024f8:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1bd      	bne.n	800247e <course_fixing_radius2speed+0x2e>
	}

	float accel_glaph[COURSE_STATE_SIZE];
	float decel_glaph[COURSE_STATE_SIZE];

	accel_glaph[0] = 1;
 8002502:	f507 43d7 	add.w	r3, r7, #27520	; 0x6b80
 8002506:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800250a:	f6a3 53f4 	subw	r3, r3, #3572	; 0xdf4
 800250e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002512:	601a      	str	r2, [r3, #0]
	decel_glaph[imax] = 20;
 8002514:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002518:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8002522:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	4a80      	ldr	r2, [pc, #512]	; (800272c <course_fixing_radius2speed+0x2dc>)
 800252c:	601a      	str	r2, [r3, #0]

	accel_length = (float) COURSE_SAMPLING_LENGTH * course_accel_max;
 800252e:	4b80      	ldr	r3, [pc, #512]	; (8002730 <course_fixing_radius2speed+0x2e0>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002734 <course_fixing_radius2speed+0x2e4>
 8002538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002540:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002544:	edc3 7a00 	vstr	s15, [r3]

	/* 加速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002548:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800254c:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002556:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 800255a:	8013      	strh	r3, [r2, #0]
 800255c:	e0cd      	b.n	80026fa <course_fixing_radius2speed+0x2aa>
	{
		uint16_t index;
		float v1, v2, vref;
		index = imax - course_state_size;
 800255e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002562:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800256c:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002578:	f102 0292 	add.w	r2, r2, #146	; 0x92
 800257c:	8013      	strh	r3, [r2, #0]
		v1 = accel_glaph[index];
 800257e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002582:	f103 0392 	add.w	r3, r3, #146	; 0x92
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 800258c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002590:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800259e:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 80025a2:	6013      	str	r3, [r2, #0]
		v2 = flashbuffer.speed[index + 1];
 80025a4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025a8:	f103 0392 	add.w	r3, r3, #146	; 0x92
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <course_fixing_radius2speed+0x2d8>)
 80025b2:	3310      	adds	r3, #16
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80025c0:	f102 0288 	add.w	r2, r2, #136	; 0x88
 80025c4:	6013      	str	r3, [r2, #0]
		if(v2 > v1)
 80025c6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025ca:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80025ce:	ed93 7a00 	vldr	s14, [r3]
 80025d2:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025d6:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	dd5f      	ble.n	80026a8 <course_fixing_radius2speed+0x258>
		{
			if(accel_length >= pow(v2 - v1, 2))
 80025e8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025ec:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	f7fd ffa9 	bl	8000548 <__aeabi_f2d>
 80025f6:	4604      	mov	r4, r0
 80025f8:	460d      	mov	r5, r1
 80025fa:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025fe:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002602:	ed93 7a00 	vldr	s14, [r3]
 8002606:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800260a:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002616:	ee17 0a90 	vmov	r0, s15
 800261a:	f7fd ff95 	bl	8000548 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002720 <course_fixing_radius2speed+0x2d0>
 8002626:	ec43 2b10 	vmov	d0, r2, r3
 800262a:	f00d f973 	bl	800f914 <pow>
 800262e:	ec53 2b10 	vmov	r2, r3, d0
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fe fa65 	bl	8000b04 <__aeabi_dcmpge>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <course_fixing_radius2speed+0x206>
			{
				vref = v2;
 8002640:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002644:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800264e:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e032      	b.n	80026bc <course_fixing_radius2speed+0x26c>
			}
			else
			{
				vref = sqrt(accel_length) + v1;
 8002656:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800265a:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	f7fd ff72 	bl	8000548 <__aeabi_f2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	ec43 2b10 	vmov	d0, r2, r3
 800266c:	f00d f9c2 	bl	800f9f4 <sqrt>
 8002670:	ec55 4b10 	vmov	r4, r5, d0
 8002674:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002678:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	f7fd ff63 	bl	8000548 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f7fd fdff 	bl	800028c <__adddf3>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe faa7 	bl	8000be8 <__aeabi_d2f>
 800269a:	4603      	mov	r3, r0
 800269c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026a0:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e009      	b.n	80026bc <course_fixing_radius2speed+0x26c>
			}
		}
		else
		{
			vref = v2;
 80026a8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026ac:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026b6:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80026ba:	6013      	str	r3, [r2, #0]
		}
		accel_glaph[index + 1] = vref;
 80026bc:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026c0:	f103 0392 	add.w	r3, r3, #146	; 0x92
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 80026cc:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80026d0:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026dc:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80026e4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026e8:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026f4:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80026f8:	8013      	strh	r3, [r2, #0]
 80026fa:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026fe:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f af2a 	bne.w	800255e <course_fixing_radius2speed+0x10e>
		printf("course_fixing_radius2speed() > accel 加速グラフ\r\n");
		#endif
	}

	/* 減速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800270a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800270e:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002718:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 800271c:	8013      	strh	r3, [r2, #0]
 800271e:	e0cf      	b.n	80028c0 <course_fixing_radius2speed+0x470>
 8002720:	00000000 	.word	0x00000000
 8002724:	40000000 	.word	0x40000000
 8002728:	200007e8 	.word	0x200007e8
 800272c:	41a00000 	.word	0x41a00000
 8002730:	200003fc 	.word	0x200003fc
 8002734:	3c23d70a 	.word	0x3c23d70a
	{
		uint16_t index;
		float v2, v3, vref;
		index = course_state_size;
 8002738:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800273c:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002746:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 800274a:	8013      	strh	r3, [r2, #0]
		v3 = decel_glaph[index];
 800274c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002750:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 800275a:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002768:	f102 0298 	add.w	r2, r2, #152	; 0x98
 800276c:	6013      	str	r3, [r2, #0]
		v2 = flashbuffer.speed[index - 1];
 800276e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002772:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	3b01      	subs	r3, #1
 800277a:	4a95      	ldr	r2, [pc, #596]	; (80029d0 <course_fixing_radius2speed+0x580>)
 800277c:	3310      	adds	r3, #16
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800278a:	f102 0294 	add.w	r2, r2, #148	; 0x94
 800278e:	6013      	str	r3, [r2, #0]
		if(v2 > v3)
 8002790:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002794:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002798:	ed93 7a00 	vldr	s14, [r3]
 800279c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80027a0:	f103 0398 	add.w	r3, r3, #152	; 0x98
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	dd5f      	ble.n	8002872 <course_fixing_radius2speed+0x422>
		{
			if(accel_length >= pow(v3 - v2, 2))
 80027b2:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80027b6:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	f7fd fec4 	bl	8000548 <__aeabi_f2d>
 80027c0:	4604      	mov	r4, r0
 80027c2:	460d      	mov	r5, r1
 80027c4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80027c8:	f103 0398 	add.w	r3, r3, #152	; 0x98
 80027cc:	ed93 7a00 	vldr	s14, [r3]
 80027d0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80027d4:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e0:	ee17 0a90 	vmov	r0, s15
 80027e4:	f7fd feb0 	bl	8000548 <__aeabi_f2d>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	ed9f 1b76 	vldr	d1, [pc, #472]	; 80029c8 <course_fixing_radius2speed+0x578>
 80027f0:	ec43 2b10 	vmov	d0, r2, r3
 80027f4:	f00d f88e 	bl	800f914 <pow>
 80027f8:	ec53 2b10 	vmov	r2, r3, d0
 80027fc:	4620      	mov	r0, r4
 80027fe:	4629      	mov	r1, r5
 8002800:	f7fe f980 	bl	8000b04 <__aeabi_dcmpge>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <course_fixing_radius2speed+0x3d0>
			{
				vref = v2;
 800280a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800280e:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002818:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e032      	b.n	8002886 <course_fixing_radius2speed+0x436>
			}
			else
			{
				vref = sqrt(accel_length) + v3;
 8002820:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002824:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	f7fd fe8d 	bl	8000548 <__aeabi_f2d>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	ec43 2b10 	vmov	d0, r2, r3
 8002836:	f00d f8dd 	bl	800f9f4 <sqrt>
 800283a:	ec55 4b10 	vmov	r4, r5, d0
 800283e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002842:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f7fd fe7e 	bl	8000548 <__aeabi_f2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fd1a 	bl	800028c <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f9c2 	bl	8000be8 <__aeabi_d2f>
 8002864:	4603      	mov	r3, r0
 8002866:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800286a:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e009      	b.n	8002886 <course_fixing_radius2speed+0x436>
			}
		}
		else
		{
			vref = v2;
 8002872:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002876:	f103 0394 	add.w	r3, r3, #148	; 0x94
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002880:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8002884:	6013      	str	r3, [r2, #0]
		}
		decel_glaph[index - 1] = vref;
 8002886:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800288a:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8002896:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80028a2:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80028aa:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80028ae:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80028ba:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 80028be:	8013      	strh	r3, [r2, #0]
 80028c0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80028c4:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f47f af34 	bne.w	8002738 <course_fixing_radius2speed+0x2e8>
		printf("course_fixing_radius2speed() > decel 減速グラフ\r\n");
		#endif
	}

	/* 加速方向と減速方向で遅い方の速度を速度値として記憶させる */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80028d0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80028d4:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80028de:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 80028e2:	8013      	strh	r3, [r2, #0]
 80028e4:	e061      	b.n	80029aa <course_fixing_radius2speed+0x55a>
	{
		uint16_t index;
		index = imax - course_state_size;
 80028e6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80028ea:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80028ee:	881a      	ldrh	r2, [r3, #0]
 80028f0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80028f4:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002900:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 8002904:	8013      	strh	r3, [r2, #0]
		flashbuffer.speed[index] = (accel_glaph[index] > decel_glaph[index]) ? decel_glaph[index] : accel_glaph[index];
 8002906:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800290a:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 8002914:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002918:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	ed93 7a00 	vldr	s14, [r3]
 8002924:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002928:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8002932:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	dd0c      	ble.n	8002962 <course_fixing_radius2speed+0x512>
 8002948:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800294c:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8002956:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	e00d      	b.n	800297e <course_fixing_radius2speed+0x52e>
 8002962:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002966:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 8002970:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002974:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002982:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 8002986:	8812      	ldrh	r2, [r2, #0]
 8002988:	4911      	ldr	r1, [pc, #68]	; (80029d0 <course_fixing_radius2speed+0x580>)
 800298a:	3210      	adds	r2, #16
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	440a      	add	r2, r1
 8002990:	3204      	adds	r2, #4
 8002992:	6013      	str	r3, [r2, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002994:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002998:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80029a4:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 80029a8:	8013      	strh	r3, [r2, #0]
 80029aa:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80029ae:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d196      	bne.n	80028e6 <course_fixing_radius2speed+0x496>
		#if D_COURSE
		printf("course_fixing_radius2speed() > speed 速度グラフ\r\n");
		printf("%4d, %7.3f, %7.3f\r\n", index, accel_glaph[index], decel_glaph[index]);
		#endif
	}
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	f507 473b 	add.w	r7, r7, #47872	; 0xbb00
 80029c0:	37b8      	adds	r7, #184	; 0xb8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40000000 	.word	0x40000000
 80029d0:	200007e8 	.word	0x200007e8

080029d4 <course_print_flash>:

void course_print_flash()
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
	uint16_t course_state_size;
	course_state_size = COURSE_STATE_SIZE;
 80029da:	f241 7370 	movw	r3, #6000	; 0x1770
 80029de:	81fb      	strh	r3, [r7, #14]
	//! print flash contents
	while(switch_read_enter())
 80029e0:	e054      	b.n	8002a8c <course_print_flash+0xb8>
	{
		if(course_state_size > 0)
 80029e2:	89fb      	ldrh	r3, [r7, #14]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d04d      	beq.n	8002a84 <course_print_flash+0xb0>
		{
			uint16_t index;
			float print_data;
			index = COURSE_STATE_SIZE - course_state_size;
 80029e8:	89fb      	ldrh	r3, [r7, #14]
 80029ea:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 80029ee:	3310      	adds	r3, #16
 80029f0:	80fb      	strh	r3, [r7, #6]
			switch(rotary_read_value())
 80029f2:	f7fe fde9 	bl	80015c8 <rotary_read_value>
 80029f6:	4603      	mov	r3, r0
 80029f8:	3b0c      	subs	r3, #12
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d830      	bhi.n	8002a60 <course_print_flash+0x8c>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <course_print_flash+0x30>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a51 	.word	0x08002a51
 8002a08:	08002a3b 	.word	0x08002a3b
 8002a0c:	08002a27 	.word	0x08002a27
 8002a10:	08002a15 	.word	0x08002a15
			{
				case 15:
					print_data = flashbuffer.speed[index];
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <course_print_flash+0xcc>)
 8002a18:	3310      	adds	r3, #16
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60bb      	str	r3, [r7, #8]
					break;
 8002a24:	e01d      	b.n	8002a62 <course_print_flash+0x8e>
				case 14:
					print_data = flashbuffer.radius[index];
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <course_print_flash+0xcc>)
 8002a2a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
					break;
 8002a38:	e013      	b.n	8002a62 <course_print_flash+0x8e>
				case 13:
					print_data = flashbuffer.marker[index];
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <course_print_flash+0xcc>)
 8002a3e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002a42:	3330      	adds	r3, #48	; 0x30
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3304      	adds	r3, #4
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60bb      	str	r3, [r7, #8]
					break;
 8002a4e:	e008      	b.n	8002a62 <course_print_flash+0x8e>
				case 12:
					print_data = flashbuffer.course_state_count_max;
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <course_print_flash+0xcc>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5c:	edc7 7a02 	vstr	s15, [r7, #8]
				default :
					break;
 8002a60:	bf00      	nop
			}
			printf("%6d, %8lf\r\n", index, print_data);
 8002a62:	88fc      	ldrh	r4, [r7, #6]
 8002a64:	68b8      	ldr	r0, [r7, #8]
 8002a66:	f7fd fd6f 	bl	8000548 <__aeabi_f2d>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4621      	mov	r1, r4
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <course_print_flash+0xd0>)
 8002a72:	f009 f8db 	bl	800bc2c <iprintf>
			course_state_size = course_state_size - 1;
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	81fb      	strh	r3, [r7, #14]
			HAL_Delay(100);
 8002a7c:	2064      	movs	r0, #100	; 0x64
 8002a7e:	f003 fb7f 	bl	8006180 <HAL_Delay>
 8002a82:	e003      	b.n	8002a8c <course_print_flash+0xb8>
		}
		else
		{
			HAL_Delay(1000);
 8002a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a88:	f003 fb7a 	bl	8006180 <HAL_Delay>
	while(switch_read_enter())
 8002a8c:	f7fe fe8a 	bl	80017a4 <switch_read_enter>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1a5      	bne.n	80029e2 <course_print_flash+0xe>
		}
	}
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	200007e8 	.word	0x200007e8
 8002aa4:	08010aac 	.word	0x08010aac

08002aa8 <course_reset_flash>:

void course_reset_flash()
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 8002aae:	f241 7370 	movw	r3, #6000	; 0x1770
 8002ab2:	80fb      	strh	r3, [r7, #6]
 8002ab4:	e018      	b.n	8002ae8 <course_reset_flash+0x40>
	{
		uint16_t index;
		index = COURSE_STATE_SIZE - course_state_size;
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 8002abc:	3310      	adds	r3, #16
 8002abe:	80bb      	strh	r3, [r7, #4]
		flashbuffer.speed[index] = COURSE_SPEED_DEFAULT;
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <course_reset_flash+0x54>)
 8002ac4:	3310      	adds	r3, #16
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <course_reset_flash+0x58>)
 8002ace:	601a      	str	r2, [r3, #0]
		flashbuffer.radius[index] = COURSE_RADIUS_DEFAULT;
 8002ad0:	88bb      	ldrh	r3, [r7, #4]
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <course_reset_flash+0x54>)
 8002ad4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3304      	adds	r3, #4
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <course_reset_flash+0x5c>)
 8002ae0:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	80fb      	strh	r3, [r7, #6]
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e3      	bne.n	8002ab6 <course_reset_flash+0xe>
	}
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	200007e8 	.word	0x200007e8
 8002b00:	3f7fbe77 	.word	0x3f7fbe77
 8002b04:	411fd70a 	.word	0x411fd70a

08002b08 <accel_max_calc>:

float accel_max_calc(uint8_t i)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
	return ACCEL_MAX_MAX - ((ACCEL_STEP_SIZE - 1) - i) * (float) (ACCEL_MAX_MAX - ACCEL_MAX_MIN) / (float) (ACCEL_STEP_SIZE - 1);
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f1c3 030f 	rsb	r3, r3, #15
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b20:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002b48 <accel_max_calc+0x40>
 8002b24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b28:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8002b2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b30:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002b4c <accel_max_calc+0x44>
 8002b34:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002b38:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	3e428f5c 	.word	0x3e428f5c
 8002b4c:	3e4ccccd 	.word	0x3e4ccccd

08002b50 <encoder_length_left>:
    //! 単位は [ um ]
    return (float) encoder * (float) LENGTHPERPULSE;
}

float encoder_length_left()
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_left * (float) LENGTHPERPULSE;
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <encoder_length_left+0x28>)
 8002b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b62:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002b7c <encoder_length_left+0x2c>
 8002b66:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	200007dc 	.word	0x200007dc
 8002b7c:	41076bf7 	.word	0x41076bf7

08002b80 <encoder_length_right>:

float encoder_length_right()
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_right * (float) LENGTHPERPULSE;
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <encoder_length_right+0x28>)
 8002b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b92:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002bac <encoder_length_right+0x2c>
 8002b96:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200007de 	.word	0x200007de
 8002bac:	41076bf7 	.word	0x41076bf7

08002bb0 <encoder_d_print>:

void encoder_d_print()
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %f\r\n", encoder_left, encoder_right, encoder);
    #endif
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <encoder_set>:

/* only read tim10_update_values */
void encoder_set()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <encoder_set+0x58>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <encoder_set+0x5c>)
 8002bd4:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <encoder_set+0x60>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <encoder_set+0x64>)
 8002be6:	801a      	strh	r2, [r3, #0]
    //! 単位 [ cnt / sampling_time_s ]
    encoder = (encoder_left + encoder_right) / (float) 2;
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <encoder_set+0x5c>)
 8002bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <encoder_set+0x64>)
 8002bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <encoder_set+0x68>)
 8002c0a:	edc3 7a00 	vstr	s15, [r3]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 8002c0e:	f000 f84d 	bl	8002cac <encoder_set_middle>
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	200007dc 	.word	0x200007dc
 8002c20:	40000400 	.word	0x40000400
 8002c24:	200007de 	.word	0x200007de
 8002c28:	200007e0 	.word	0x200007e0

08002c2c <encoder_init>:

void encoder_init()
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <encoder_start+0x38>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <encoder_start+0x3c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <encoder_start+0x40>)
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

    encoder_set_middle();
 8002c54:	f000 f82a 	bl	8002cac <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002c58:	213c      	movs	r1, #60	; 0x3c
 8002c5a:	4809      	ldr	r0, [pc, #36]	; (8002c80 <encoder_start+0x44>)
 8002c5c:	f006 ff4c 	bl	8009af8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002c60:	213c      	movs	r1, #60	; 0x3c
 8002c62:	4808      	ldr	r0, [pc, #32]	; (8002c84 <encoder_start+0x48>)
 8002c64:	f006 ff48 	bl	8009af8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8002c68:	4807      	ldr	r0, [pc, #28]	; (8002c88 <encoder_start+0x4c>)
 8002c6a:	f006 fc79 	bl	8009560 <HAL_TIM_Base_Start_IT>
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200007dc 	.word	0x200007dc
 8002c78:	200007de 	.word	0x200007de
 8002c7c:	200007e0 	.word	0x200007e0
 8002c80:	20000558 	.word	0x20000558
 8002c84:	200005a0 	.word	0x200005a0
 8002c88:	200006c0 	.word	0x200006c0

08002c8c <encoder_stop>:

void encoder_stop()
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8002c90:	213c      	movs	r1, #60	; 0x3c
 8002c92:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <encoder_stop+0x18>)
 8002c94:	f006 ffbe 	bl	8009c14 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8002c98:	213c      	movs	r1, #60	; 0x3c
 8002c9a:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <encoder_stop+0x1c>)
 8002c9c:	f006 ffba 	bl	8009c14 <HAL_TIM_Encoder_Stop>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000558 	.word	0x20000558
 8002ca8:	200005a0 	.word	0x200005a0

08002cac <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <encoder_set_middle+0x20>)
 8002cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <encoder_set_middle+0x24>)
 8002cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40000400 	.word	0x40000400

08002cd4 <fixed_section_start>:
#include "fixed_section.h"

float fixed_section_speed_now;

void fixed_section_start()
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
    fixed_section_speed_now = flashbuffer.speed[0];
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <fixed_section_start+0x18>)
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <fixed_section_start+0x1c>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	200007e8 	.word	0x200007e8
 8002cf0:	200007e4 	.word	0x200007e4

08002cf4 <fixed_section_main>:
 * @brief 一定距離ごとに course_state_function() を呼び出す関数
 * @attention
 * 
 */
void fixed_section_main()
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
    float fixed_length;
    //! 現在点の区間長を取得
    fixed_length = section_length_read();
 8002cfa:	f001 fad1 	bl	80042a0 <section_length_read>
 8002cfe:	ed87 0a01 	vstr	s0, [r7, #4]
    if(fixed_length >= COURSE_SAMPLING_LENGTH)
 8002d02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d06:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002d24 <fixed_section_main+0x30>
 8002d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	da00      	bge.n	8002d16 <fixed_section_main+0x22>
    {
        //! 現在点の区間長が閾値を超えた時
        course_state_function();
    }
}
 8002d14:	e001      	b.n	8002d1a <fixed_section_main+0x26>
        course_state_function();
 8002d16:	f7ff fac3 	bl	80022a0 <course_state_function>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	3c23d70a 	.word	0x3c23d70a

08002d28 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8002d32:	230b      	movs	r3, #11
 8002d34:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8002d42:	463a      	mov	r2, r7
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 fd47 	bl	80077dc <HAL_FLASHEx_Erase>
}
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8002d56:	b5b0      	push	{r4, r5, r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8002d62:	f004 fbd9 	bl	8007518 <HAL_FLASH_Unlock>
	flash_erase();
 8002d66:	f7ff ffdf 	bl	8002d28 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e011      	b.n	8002d94 <flash_writting+0x3e>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2200      	movs	r2, #0
 8002d78:	461c      	mov	r4, r3
 8002d7a:	4615      	mov	r5, r2
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	462b      	mov	r3, r5
 8002d80:	6979      	ldr	r1, [r7, #20]
 8002d82:	2000      	movs	r0, #0
 8002d84:	f004 fb74 	bl	8007470 <HAL_FLASH_Program>
		data++;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d3e7      	bcc.n	8002d70 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 8002da0:	f004 fbdc 	bl	800755c <HAL_FLASH_Lock>
#endif
}
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bdb0      	pop	{r4, r5, r7, pc}

08002dac <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	68b8      	ldr	r0, [r7, #8]
 8002dc0:	f008 f8a4 	bl	800af0c <memcpy>
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <flash_write>:

void flash_write()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <flash_write+0x14>)
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <flash_write+0x18>)
 8002dd4:	4904      	ldr	r1, [pc, #16]	; (8002de8 <flash_write+0x1c>)
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ffbd 	bl	8002d56 <flash_writting>
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	080e0000 	.word	0x080e0000
 8002de4:	00011984 	.word	0x00011984
 8002de8:	200007e8 	.word	0x200007e8

08002dec <flash_read>:

void flash_read()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <flash_read+0x14>)
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <flash_read+0x18>)
 8002df4:	4904      	ldr	r1, [pc, #16]	; (8002e08 <flash_read+0x1c>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ffd8 	bl	8002dac <flash_reading>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	080e0000 	.word	0x080e0000
 8002e04:	00011984 	.word	0x00011984
 8002e08:	200007e8 	.word	0x200007e8

08002e0c <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	flash_read();
 8002e10:	f7ff ffec 	bl	8002dec <flash_read>
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <low_pass_filter>:
#include "function.h"

double low_pass_filter(double val, double pre_val, double gamma)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e22:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e26:	ed87 2b00 	vstr	d2, [r7]
	return (double) (gamma * (double) pre_val
 8002e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e32:	f7fd fbe1 	bl	80005f8 <__aeabi_dmul>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4614      	mov	r4, r2
 8002e3c:	461d      	mov	r5, r3
			+ (double) (1 - gamma) * (double) val);
 8002e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e42:	f04f 0000 	mov.w	r0, #0
 8002e46:	490e      	ldr	r1, [pc, #56]	; (8002e80 <low_pass_filter+0x68>)
 8002e48:	f7fd fa1e 	bl	8000288 <__aeabi_dsub>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e58:	f7fd fbce 	bl	80005f8 <__aeabi_dmul>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
	return (double) (gamma * (double) pre_val
 8002e60:	4620      	mov	r0, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7fd fa12 	bl	800028c <__adddf3>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e70:	eeb0 0a47 	vmov.f32	s0, s14
 8002e74:	eef0 0a67 	vmov.f32	s1, s15
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	3ff00000 	.word	0x3ff00000

08002e84 <vector3_creation>:

    return vector_sum;
}

Vector3 vector3_creation(float x, float y, float z)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b08f      	sub	sp, #60	; 0x3c
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	ed87 0a07 	vstr	s0, [r7, #28]
 8002e8e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002e92:	ed87 1a05 	vstr	s2, [r7, #20]
    Vector3 new;
    new.x = x;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	623b      	str	r3, [r7, #32]
    new.y = y;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    new.z = z;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    return new;
 8002ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea6:	f107 0220 	add.w	r2, r7, #32
 8002eaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	ee06 1a90 	vmov	s13, r1
 8002eba:	ee07 2a10 	vmov	s14, r2
 8002ebe:	ee07 3a90 	vmov	s15, r3
}
 8002ec2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ec6:	eef0 0a47 	vmov.f32	s1, s14
 8002eca:	eeb0 1a67 	vmov.f32	s2, s15
 8002ece:	373c      	adds	r7, #60	; 0x3c
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <length_set_sampling_time_ms>:
float velocity_left, velocity_right;
float length_update_sampling_time_s;
uint8_t length_started;

void length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
    length_update_sampling_time_s = samplingtime_ms / (float) 1000;
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eec:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002f08 <length_set_sampling_time_ms+0x30>
 8002ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <length_set_sampling_time_ms+0x34>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	447a0000 	.word	0x447a0000
 8002f0c:	2001217c 	.word	0x2001217c

08002f10 <length_init>:

void length_init(unsigned short int samplingtime_ms)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
    length_started = 0;
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <length_init+0x24>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
    length_set_sampling_time_ms(samplingtime_ms);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffd8 	bl	8002ed8 <length_set_sampling_time_ms>
    encoder_init();
 8002f28:	f7ff fe80 	bl	8002c2c <encoder_init>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20012180 	.word	0x20012180

08002f38 <length_start>:

void length_start()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
    if(0 >= length_started)
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <length_start+0x20>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <length_start+0x14>
    {
        length_reset();
 8002f44:	f000 f816 	bl	8002f74 <length_reset>
        encoder_start();
 8002f48:	f7ff fe78 	bl	8002c3c <encoder_start>
    }
    length_started = 1;
 8002f4c:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <length_start+0x20>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20012180 	.word	0x20012180

08002f5c <length_stop>:

void length_stop()
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
    encoder_stop();
 8002f60:	f7ff fe94 	bl	8002c8c <encoder_stop>
    length_started = 0;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <length_stop+0x14>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20012180 	.word	0x20012180

08002f74 <length_reset>:
{
    encoder_fin();
}

void length_reset()
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
    length_left = 0;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <length_reset+0x20>)
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <length_reset+0x24>)
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	2001216c 	.word	0x2001216c
 8002f98:	20012170 	.word	0x20012170

08002f9c <length_read>:

float length_read()
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	ed2d 8b02 	vpush	{d8}
 8002fa2:	af00      	add	r7, sp, #0
    return (length_read_left() + length_read_right()) / 2;
 8002fa4:	f000 f814 	bl	8002fd0 <length_read_left>
 8002fa8:	eeb0 8a40 	vmov.f32	s16, s0
 8002fac:	f000 f81e 	bl	8002fec <length_read_right>
 8002fb0:	eef0 7a40 	vmov.f32	s15, s0
 8002fb4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002fb8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002fbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fc0:	eef0 7a66 	vmov.f32	s15, s13
}
 8002fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	ecbd 8b02 	vpop	{d8}
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <length_read_left>:

float length_read_left()
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
    return length_left;
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <length_read_left+0x18>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	ee07 3a90 	vmov	s15, r3
}
 8002fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	2001216c 	.word	0x2001216c

08002fec <length_read_right>:

float length_read_right()
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
    return length_right;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <length_read_right+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	ee07 3a90 	vmov	s15, r3
}
 8002ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	20012170 	.word	0x20012170

08003008 <velocity_read>:

float velocity_read()
{
 8003008:	b580      	push	{r7, lr}
 800300a:	ed2d 8b02 	vpush	{d8}
 800300e:	af00      	add	r7, sp, #0
    return (velocity_read_left() + velocity_read_right()) / 2;
 8003010:	f000 f814 	bl	800303c <velocity_read_left>
 8003014:	eeb0 8a40 	vmov.f32	s16, s0
 8003018:	f000 f81e 	bl	8003058 <velocity_read_right>
 800301c:	eef0 7a40 	vmov.f32	s15, s0
 8003020:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003024:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003028:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800302c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	46bd      	mov	sp, r7
 8003036:	ecbd 8b02 	vpop	{d8}
 800303a:	bd80      	pop	{r7, pc}

0800303c <velocity_read_left>:

float velocity_read_left()
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
    return velocity_left;
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <velocity_read_left+0x18>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	ee07 3a90 	vmov	s15, r3
}
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	20012174 	.word	0x20012174

08003058 <velocity_read_right>:

float velocity_read_right()
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
    return velocity_right;
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <velocity_read_right+0x18>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	ee07 3a90 	vmov	s15, r3
}
 8003064:	eeb0 0a67 	vmov.f32	s0, s15
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	20012178 	.word	0x20012178

08003074 <length_update>:

//! エンコーダの値を読み、速度と距離を計算する
void length_update()
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
    float encoder_left, encoder_right;
    float sampling_time_s;
    sampling_time_s = length_update_sampling_time_s;
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <length_update+0x88>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]
    //! エンコーダの値を読み、中央値に戻す
    encoder_set();
 8003080:	f7ff fd9e 	bl	8002bc0 <encoder_set>
    encoder_left = encoder_length_left();
 8003084:	f7ff fd64 	bl	8002b50 <encoder_length_left>
 8003088:	ed87 0a02 	vstr	s0, [r7, #8]
    encoder_right = encoder_length_right();
 800308c:	f7ff fd78 	bl	8002b80 <encoder_length_right>
 8003090:	ed87 0a01 	vstr	s0, [r7, #4]
    velocity_left = encoder_left * sampling_time_s;
 8003094:	ed97 7a02 	vldr	s14, [r7, #8]
 8003098:	edd7 7a03 	vldr	s15, [r7, #12]
 800309c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <length_update+0x8c>)
 80030a2:	edc3 7a00 	vstr	s15, [r3]
    velocity_right = encoder_right * sampling_time_s;
 80030a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80030aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80030ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <length_update+0x90>)
 80030b4:	edc3 7a00 	vstr	s15, [r3]
    length_left += velocity_left * sampling_time_s;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <length_update+0x8c>)
 80030ba:	ed93 7a00 	vldr	s14, [r3]
 80030be:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <length_update+0x94>)
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <length_update+0x94>)
 80030d2:	edc3 7a00 	vstr	s15, [r3]
    length_right += velocity_right * sampling_time_s;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <length_update+0x90>)
 80030d8:	ed93 7a00 	vldr	s14, [r3]
 80030dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80030e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <length_update+0x98>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <length_update+0x98>)
 80030f0:	edc3 7a00 	vstr	s15, [r3]
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	2001217c 	.word	0x2001217c
 8003100:	20012174 	.word	0x20012174
 8003104:	20012178 	.word	0x20012178
 8003108:	2001216c 	.word	0x2001216c
 800310c:	20012170 	.word	0x20012170

08003110 <length_d_print>:

void length_d_print()
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
    #if D_LENGTH
    printf("length = %10.2f, sampling_time_s = %8.6f\r\n", length_read(), length_update_sampling_time_s);
    //! printf("velocity = %10.2f\r\n", velocity_read());
    #endif
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8003132:	f002 f87b 	bl	800522c <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 8003140:	f002 f978 	bl	8005434 <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a08      	ldr	r2, [pc, #32]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 800314e:	f001 ffa7 	bl	80050a0 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a06      	ldr	r2, [pc, #24]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 800315c:	f002 f818 	bl	8005190 <tim11_main>
	}
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40001000 	.word	0x40001000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003178:	f002 ff90 	bl	800609c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800317c:	f000 f964 	bl	8003448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003180:	f000 fd86 	bl	8003c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8003184:	f000 fd64 	bl	8003c50 <MX_DMA_Init>
  MX_ADC1_Init();
 8003188:	f000 f9c8 	bl	800351c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 800318c:	f000 fd36 	bl	8003bfc <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8003190:	f000 fc5c 	bl	8003a4c <MX_TIM6_Init>
  MX_TIM4_Init();
 8003194:	f000 fbf6 	bl	8003984 <MX_TIM4_Init>
  MX_TIM1_Init();
 8003198:	f000 fb48 	bl	800382c <MX_TIM1_Init>
  MX_TIM3_Init();
 800319c:	f000 fb9e 	bl	80038dc <MX_TIM3_Init>
  MX_TIM10_Init();
 80031a0:	f000 fcc0 	bl	8003b24 <MX_TIM10_Init>
  MX_TIM11_Init();
 80031a4:	f000 fce2 	bl	8003b6c <MX_TIM11_Init>
  MX_SPI2_Init();
 80031a8:	f000 fb0a 	bl	80037c0 <MX_SPI2_Init>
  MX_I2C1_Init();
 80031ac:	f000 fada 	bl	8003764 <MX_I2C1_Init>
  MX_TIM14_Init();
 80031b0:	f000 fd00 	bl	8003bb4 <MX_TIM14_Init>
  MX_TIM7_Init();
 80031b4:	f000 fc80 	bl	8003ab8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 80031b8:	48a1      	ldr	r0, [pc, #644]	; (8003440 <main+0x2cc>)
 80031ba:	f008 fd37 	bl	800bc2c <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 80031be:	48a1      	ldr	r0, [pc, #644]	; (8003444 <main+0x2d0>)
 80031c0:	f008 fdba 	bl	800bd38 <puts>

  main_init();
 80031c4:	f000 fe4e 	bl	8003e64 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 80031c8:	f000 feae 	bl	8003f28 <main_print_while>

		if(switch_read_enter())
 80031cc:	f7fe faea 	bl	80017a4 <switch_read_enter>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 812c 	beq.w	8003430 <main+0x2bc>
		{
			switch(rotary_read())
 80031d8:	f7fe fa02 	bl	80015e0 <rotary_read>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	f200 8128 	bhi.w	8003434 <main+0x2c0>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <main+0x78>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	0800322d 	.word	0x0800322d
 80031f0:	0800326b 	.word	0x0800326b
 80031f4:	08003285 	.word	0x08003285
 80031f8:	0800329f 	.word	0x0800329f
 80031fc:	080032b9 	.word	0x080032b9
 8003200:	080032d3 	.word	0x080032d3
 8003204:	080032ed 	.word	0x080032ed
 8003208:	08003307 	.word	0x08003307
 800320c:	08003321 	.word	0x08003321
 8003210:	0800333b 	.word	0x0800333b
 8003214:	08003355 	.word	0x08003355
 8003218:	0800336f 	.word	0x0800336f
 800321c:	08003389 	.word	0x08003389
 8003220:	080033b3 	.word	0x080033b3
 8003224:	080033dd 	.word	0x080033dd
 8003228:	08003407 	.word	0x08003407
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 800322c:	f7fe f9b4 	bl	8001598 <rotary_read_playmode>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8003236:	f7fe fd51 	bl	8001cdc <analog_calibration_start>

            while(switch_read_enter())
 800323a:	e001      	b.n	8003240 <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 800323c:	f000 fea4 	bl	8003f88 <main_main>
            while(switch_read_enter())
 8003240:	f7fe fab0 	bl	80017a4 <switch_read_enter>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f8      	bne.n	800323c <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 800324a:	f7fe fd6f 	bl	8001d2c <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 800324e:	e0f2      	b.n	8003436 <main+0x2c2>
            running_start();
 8003250:	f000 fe1f 	bl	8003e92 <running_start>
            while(switch_read_enter())
 8003254:	e001      	b.n	800325a <main+0xe6>
              main_main();
 8003256:	f000 fe97 	bl	8003f88 <main_main>
            while(switch_read_enter())
 800325a:	f7fe faa3 	bl	80017a4 <switch_read_enter>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f8      	bne.n	8003256 <main+0xe2>
            running_stop();
 8003264:	f000 fe4a 	bl	8003efc <running_stop>
          break;	// case 0x00:
 8003268:	e0e5      	b.n	8003436 <main+0x2c2>
        case 0x01:	// 1
          running_start();
 800326a:	f000 fe12 	bl	8003e92 <running_start>

          while (switch_read_enter())
 800326e:	e001      	b.n	8003274 <main+0x100>
          {
            main_main();
 8003270:	f000 fe8a 	bl	8003f88 <main_main>
          while (switch_read_enter())
 8003274:	f7fe fa96 	bl	80017a4 <switch_read_enter>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f8      	bne.n	8003270 <main+0xfc>
          }

          running_stop();
 800327e:	f000 fe3d 	bl	8003efc <running_stop>
          break;
 8003282:	e0d8      	b.n	8003436 <main+0x2c2>
        case 0x02:	// 2
          running_start();
 8003284:	f000 fe05 	bl	8003e92 <running_start>

          while(switch_read_enter())
 8003288:	e001      	b.n	800328e <main+0x11a>
          {
            main_main();
 800328a:	f000 fe7d 	bl	8003f88 <main_main>
          while(switch_read_enter())
 800328e:	f7fe fa89 	bl	80017a4 <switch_read_enter>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f8      	bne.n	800328a <main+0x116>
          }

          running_stop();
 8003298:	f000 fe30 	bl	8003efc <running_stop>
          break;
 800329c:	e0cb      	b.n	8003436 <main+0x2c2>
        case 0x03:	// 3
          running_start();
 800329e:	f000 fdf8 	bl	8003e92 <running_start>

          while(switch_read_enter())
 80032a2:	e001      	b.n	80032a8 <main+0x134>
          {
            main_main();
 80032a4:	f000 fe70 	bl	8003f88 <main_main>
          while(switch_read_enter())
 80032a8:	f7fe fa7c 	bl	80017a4 <switch_read_enter>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f8      	bne.n	80032a4 <main+0x130>
          }

          running_stop();
 80032b2:	f000 fe23 	bl	8003efc <running_stop>
          break;
 80032b6:	e0be      	b.n	8003436 <main+0x2c2>
        case 0x04:	// 4
          running_start();
 80032b8:	f000 fdeb 	bl	8003e92 <running_start>

          while(switch_read_enter())
 80032bc:	e001      	b.n	80032c2 <main+0x14e>
          {
            main_main();
 80032be:	f000 fe63 	bl	8003f88 <main_main>
          while(switch_read_enter())
 80032c2:	f7fe fa6f 	bl	80017a4 <switch_read_enter>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f8      	bne.n	80032be <main+0x14a>
          }

          running_stop();
 80032cc:	f000 fe16 	bl	8003efc <running_stop>
          break;
 80032d0:	e0b1      	b.n	8003436 <main+0x2c2>
        case 0x05:	// 5
          running_start();
 80032d2:	f000 fdde 	bl	8003e92 <running_start>

          while(switch_read_enter())
 80032d6:	e001      	b.n	80032dc <main+0x168>
          {
            main_main();
 80032d8:	f000 fe56 	bl	8003f88 <main_main>
          while(switch_read_enter())
 80032dc:	f7fe fa62 	bl	80017a4 <switch_read_enter>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f8      	bne.n	80032d8 <main+0x164>
          }

          running_stop();
 80032e6:	f000 fe09 	bl	8003efc <running_stop>
          break;
 80032ea:	e0a4      	b.n	8003436 <main+0x2c2>
        case 0x06:	// 6
          running_start();
 80032ec:	f000 fdd1 	bl	8003e92 <running_start>

          while(switch_read_enter())
 80032f0:	e001      	b.n	80032f6 <main+0x182>
          {
            main_main();
 80032f2:	f000 fe49 	bl	8003f88 <main_main>
          while(switch_read_enter())
 80032f6:	f7fe fa55 	bl	80017a4 <switch_read_enter>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f8      	bne.n	80032f2 <main+0x17e>
          }

          running_stop();
 8003300:	f000 fdfc 	bl	8003efc <running_stop>
          break;
 8003304:	e097      	b.n	8003436 <main+0x2c2>
        case 0x07:	// 7
          running_start();
 8003306:	f000 fdc4 	bl	8003e92 <running_start>

          while(switch_read_enter())
 800330a:	e001      	b.n	8003310 <main+0x19c>
          {
            main_main();
 800330c:	f000 fe3c 	bl	8003f88 <main_main>
          while(switch_read_enter())
 8003310:	f7fe fa48 	bl	80017a4 <switch_read_enter>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f8      	bne.n	800330c <main+0x198>
          }

          running_stop();
 800331a:	f000 fdef 	bl	8003efc <running_stop>
          break;
 800331e:	e08a      	b.n	8003436 <main+0x2c2>
        case 0x08:	// 8
          running_start();
 8003320:	f000 fdb7 	bl	8003e92 <running_start>

          while(switch_read_enter())
 8003324:	e001      	b.n	800332a <main+0x1b6>
          {
            main_main();
 8003326:	f000 fe2f 	bl	8003f88 <main_main>
          while(switch_read_enter())
 800332a:	f7fe fa3b 	bl	80017a4 <switch_read_enter>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f8      	bne.n	8003326 <main+0x1b2>
          }

          running_stop();
 8003334:	f000 fde2 	bl	8003efc <running_stop>
          break;
 8003338:	e07d      	b.n	8003436 <main+0x2c2>
        case 0x09:	// 9
          running_start();
 800333a:	f000 fdaa 	bl	8003e92 <running_start>

          while(switch_read_enter())
 800333e:	e001      	b.n	8003344 <main+0x1d0>
          {
            main_main();
 8003340:	f000 fe22 	bl	8003f88 <main_main>
          while(switch_read_enter())
 8003344:	f7fe fa2e 	bl	80017a4 <switch_read_enter>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f8      	bne.n	8003340 <main+0x1cc>
          }

          running_stop();
 800334e:	f000 fdd5 	bl	8003efc <running_stop>
          break;
 8003352:	e070      	b.n	8003436 <main+0x2c2>
        case 0x0A:	// A
          running_start();
 8003354:	f000 fd9d 	bl	8003e92 <running_start>

          while(switch_read_enter())
 8003358:	e001      	b.n	800335e <main+0x1ea>
          {
            main_main();
 800335a:	f000 fe15 	bl	8003f88 <main_main>
          while(switch_read_enter())
 800335e:	f7fe fa21 	bl	80017a4 <switch_read_enter>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f8      	bne.n	800335a <main+0x1e6>
          }

          running_stop();
 8003368:	f000 fdc8 	bl	8003efc <running_stop>
          break;
 800336c:	e063      	b.n	8003436 <main+0x2c2>
        case 0x0B:	// B
          running_start();
 800336e:	f000 fd90 	bl	8003e92 <running_start>

          while(switch_read_enter())
 8003372:	e001      	b.n	8003378 <main+0x204>
          {
            main_main();
 8003374:	f000 fe08 	bl	8003f88 <main_main>
          while(switch_read_enter())
 8003378:	f7fe fa14 	bl	80017a4 <switch_read_enter>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f8      	bne.n	8003374 <main+0x200>
          }

          running_stop();
 8003382:	f000 fdbb 	bl	8003efc <running_stop>
          break;
 8003386:	e056      	b.n	8003436 <main+0x2c2>
        case 0x0C:	// C
          if(rotary_read_playmode() == flash_print)
 8003388:	f7fe f906 	bl	8001598 <rotary_read_playmode>
 800338c:	4603      	mov	r3, r0
 800338e:	2b0f      	cmp	r3, #15
 8003390:	d102      	bne.n	8003398 <main+0x224>
          {
            course_print_flash();
 8003392:	f7ff fb1f 	bl	80029d4 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003396:	e04e      	b.n	8003436 <main+0x2c2>
            running_start();
 8003398:	f000 fd7b 	bl	8003e92 <running_start>
            while(switch_read_enter())
 800339c:	e001      	b.n	80033a2 <main+0x22e>
              main_main();
 800339e:	f000 fdf3 	bl	8003f88 <main_main>
            while(switch_read_enter())
 80033a2:	f7fe f9ff 	bl	80017a4 <switch_read_enter>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f8      	bne.n	800339e <main+0x22a>
            running_stop();
 80033ac:	f000 fda6 	bl	8003efc <running_stop>
          break;
 80033b0:	e041      	b.n	8003436 <main+0x2c2>
        case 0x0D:	// D
          if(rotary_read_playmode() == flash_print)
 80033b2:	f7fe f8f1 	bl	8001598 <rotary_read_playmode>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d102      	bne.n	80033c2 <main+0x24e>
          {
            course_print_flash();
 80033bc:	f7ff fb0a 	bl	80029d4 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80033c0:	e039      	b.n	8003436 <main+0x2c2>
            running_start();
 80033c2:	f000 fd66 	bl	8003e92 <running_start>
            while(switch_read_enter())
 80033c6:	e001      	b.n	80033cc <main+0x258>
              main_main();
 80033c8:	f000 fdde 	bl	8003f88 <main_main>
            while(switch_read_enter())
 80033cc:	f7fe f9ea 	bl	80017a4 <switch_read_enter>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f8      	bne.n	80033c8 <main+0x254>
            running_stop();
 80033d6:	f000 fd91 	bl	8003efc <running_stop>
          break;
 80033da:	e02c      	b.n	8003436 <main+0x2c2>
        case 0x0E:	// E
          if(rotary_read_playmode() == flash_print)
 80033dc:	f7fe f8dc 	bl	8001598 <rotary_read_playmode>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	d102      	bne.n	80033ec <main+0x278>
          {
            course_print_flash();
 80033e6:	f7ff faf5 	bl	80029d4 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80033ea:	e024      	b.n	8003436 <main+0x2c2>
            running_start();
 80033ec:	f000 fd51 	bl	8003e92 <running_start>
            while(switch_read_enter())
 80033f0:	e001      	b.n	80033f6 <main+0x282>
              main_main();
 80033f2:	f000 fdc9 	bl	8003f88 <main_main>
            while(switch_read_enter())
 80033f6:	f7fe f9d5 	bl	80017a4 <switch_read_enter>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f8      	bne.n	80033f2 <main+0x27e>
            running_stop();
 8003400:	f000 fd7c 	bl	8003efc <running_stop>
          break;
 8003404:	e017      	b.n	8003436 <main+0x2c2>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 8003406:	f7fe f8c7 	bl	8001598 <rotary_read_playmode>
 800340a:	4603      	mov	r3, r0
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d102      	bne.n	8003416 <main+0x2a2>
          {
            course_print_flash();
 8003410:	f7ff fae0 	bl	80029d4 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003414:	e00f      	b.n	8003436 <main+0x2c2>
            running_start();
 8003416:	f000 fd3c 	bl	8003e92 <running_start>
            while(switch_read_enter())
 800341a:	e001      	b.n	8003420 <main+0x2ac>
              main_main();
 800341c:	f000 fdb4 	bl	8003f88 <main_main>
            while(switch_read_enter())
 8003420:	f7fe f9c0 	bl	80017a4 <switch_read_enter>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f8      	bne.n	800341c <main+0x2a8>
            running_stop();
 800342a:	f000 fd67 	bl	8003efc <running_stop>
          break;
 800342e:	e002      	b.n	8003436 <main+0x2c2>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <main+0x2c2>
          break;
 8003434:	bf00      	nop
    HAL_Delay(500);
 8003436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800343a:	f002 fea1 	bl	8006180 <HAL_Delay>
    main_print_while();
 800343e:	e6c3      	b.n	80031c8 <main+0x54>
 8003440:	08010ab8 	.word	0x08010ab8
 8003444:	08010ac0 	.word	0x08010ac0

08003448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b094      	sub	sp, #80	; 0x50
 800344c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800344e:	f107 0320 	add.w	r3, r7, #32
 8003452:	2230      	movs	r2, #48	; 0x30
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f007 fd66 	bl	800af28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <SystemClock_Config+0xcc>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <SystemClock_Config+0xcc>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347a:	6413      	str	r3, [r2, #64]	; 0x40
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <SystemClock_Config+0xcc>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003488:	2300      	movs	r3, #0
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <SystemClock_Config+0xd0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a21      	ldr	r2, [pc, #132]	; (8003518 <SystemClock_Config+0xd0>)
 8003492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <SystemClock_Config+0xd0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80034a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ae:	2302      	movs	r3, #2
 80034b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034b8:	2308      	movs	r3, #8
 80034ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80034bc:	23a8      	movs	r3, #168	; 0xa8
 80034be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034c0:	2302      	movs	r3, #2
 80034c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034c4:	2304      	movs	r3, #4
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c8:	f107 0320 	add.w	r3, r7, #32
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fdb9 	bl	8008044 <HAL_RCC_OscConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034d8:	f000 fd68 	bl	8003fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034dc:	230f      	movs	r3, #15
 80034de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034e0:	2302      	movs	r3, #2
 80034e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	2105      	movs	r1, #5
 80034fa:	4618      	mov	r0, r3
 80034fc:	f005 f81a 	bl	8008534 <HAL_RCC_ClockConfig>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003506:	f000 fd51 	bl	8003fac <Error_Handler>
  }
}
 800350a:	bf00      	nop
 800350c:	3750      	adds	r7, #80	; 0x50
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000

0800351c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003522:	463b      	mov	r3, r7
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800352e:	4b8a      	ldr	r3, [pc, #552]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003530:	4a8a      	ldr	r2, [pc, #552]	; (800375c <MX_ADC1_Init+0x240>)
 8003532:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003534:	4b88      	ldr	r3, [pc, #544]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800353a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800353c:	4b86      	ldr	r3, [pc, #536]	; (8003758 <MX_ADC1_Init+0x23c>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003544:	2201      	movs	r2, #1
 8003546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003548:	4b83      	ldr	r3, [pc, #524]	; (8003758 <MX_ADC1_Init+0x23c>)
 800354a:	2201      	movs	r2, #1
 800354c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800354e:	4b82      	ldr	r3, [pc, #520]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003556:	4b80      	ldr	r3, [pc, #512]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003558:	2200      	movs	r2, #0
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800355c:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <MX_ADC1_Init+0x23c>)
 800355e:	4a80      	ldr	r2, [pc, #512]	; (8003760 <MX_ADC1_Init+0x244>)
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003562:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8003568:	4b7b      	ldr	r3, [pc, #492]	; (8003758 <MX_ADC1_Init+0x23c>)
 800356a:	2210      	movs	r2, #16
 800356c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800356e:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003576:	4b78      	ldr	r3, [pc, #480]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003578:	2201      	movs	r2, #1
 800357a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800357c:	4876      	ldr	r0, [pc, #472]	; (8003758 <MX_ADC1_Init+0x23c>)
 800357e:	f002 fe23 	bl	80061c8 <HAL_ADC_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003588:	f000 fd10 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800358c:	2309      	movs	r3, #9
 800358e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003590:	2301      	movs	r3, #1
 8003592:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003594:	2303      	movs	r3, #3
 8003596:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003598:	463b      	mov	r3, r7
 800359a:	4619      	mov	r1, r3
 800359c:	486e      	ldr	r0, [pc, #440]	; (8003758 <MX_ADC1_Init+0x23c>)
 800359e:	f002 ffd5 	bl	800654c <HAL_ADC_ConfigChannel>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80035a8:	f000 fd00 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80035ac:	230a      	movs	r3, #10
 80035ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80035b0:	2302      	movs	r3, #2
 80035b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035b4:	463b      	mov	r3, r7
 80035b6:	4619      	mov	r1, r3
 80035b8:	4867      	ldr	r0, [pc, #412]	; (8003758 <MX_ADC1_Init+0x23c>)
 80035ba:	f002 ffc7 	bl	800654c <HAL_ADC_ConfigChannel>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80035c4:	f000 fcf2 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80035c8:	2308      	movs	r3, #8
 80035ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80035cc:	2303      	movs	r3, #3
 80035ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035d0:	463b      	mov	r3, r7
 80035d2:	4619      	mov	r1, r3
 80035d4:	4860      	ldr	r0, [pc, #384]	; (8003758 <MX_ADC1_Init+0x23c>)
 80035d6:	f002 ffb9 	bl	800654c <HAL_ADC_ConfigChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80035e0:	f000 fce4 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80035e4:	230b      	movs	r3, #11
 80035e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80035e8:	2304      	movs	r3, #4
 80035ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035ec:	463b      	mov	r3, r7
 80035ee:	4619      	mov	r1, r3
 80035f0:	4859      	ldr	r0, [pc, #356]	; (8003758 <MX_ADC1_Init+0x23c>)
 80035f2:	f002 ffab 	bl	800654c <HAL_ADC_ConfigChannel>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80035fc:	f000 fcd6 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003600:	230f      	movs	r3, #15
 8003602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003604:	2305      	movs	r3, #5
 8003606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003608:	463b      	mov	r3, r7
 800360a:	4619      	mov	r1, r3
 800360c:	4852      	ldr	r0, [pc, #328]	; (8003758 <MX_ADC1_Init+0x23c>)
 800360e:	f002 ff9d 	bl	800654c <HAL_ADC_ConfigChannel>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003618:	f000 fcc8 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800361c:	230c      	movs	r3, #12
 800361e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003620:	2306      	movs	r3, #6
 8003622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003624:	463b      	mov	r3, r7
 8003626:	4619      	mov	r1, r3
 8003628:	484b      	ldr	r0, [pc, #300]	; (8003758 <MX_ADC1_Init+0x23c>)
 800362a:	f002 ff8f 	bl	800654c <HAL_ADC_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003634:	f000 fcba 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003638:	230e      	movs	r3, #14
 800363a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800363c:	2307      	movs	r3, #7
 800363e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003640:	463b      	mov	r3, r7
 8003642:	4619      	mov	r1, r3
 8003644:	4844      	ldr	r0, [pc, #272]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003646:	f002 ff81 	bl	800654c <HAL_ADC_ConfigChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003650:	f000 fcac 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003654:	230d      	movs	r3, #13
 8003656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003658:	2308      	movs	r3, #8
 800365a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800365c:	463b      	mov	r3, r7
 800365e:	4619      	mov	r1, r3
 8003660:	483d      	ldr	r0, [pc, #244]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003662:	f002 ff73 	bl	800654c <HAL_ADC_ConfigChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800366c:	f000 fc9e 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003670:	2307      	movs	r3, #7
 8003672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003674:	2309      	movs	r3, #9
 8003676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003678:	463b      	mov	r3, r7
 800367a:	4619      	mov	r1, r3
 800367c:	4836      	ldr	r0, [pc, #216]	; (8003758 <MX_ADC1_Init+0x23c>)
 800367e:	f002 ff65 	bl	800654c <HAL_ADC_ConfigChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003688:	f000 fc90 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800368c:	2300      	movs	r3, #0
 800368e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003690:	230a      	movs	r3, #10
 8003692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003694:	463b      	mov	r3, r7
 8003696:	4619      	mov	r1, r3
 8003698:	482f      	ldr	r0, [pc, #188]	; (8003758 <MX_ADC1_Init+0x23c>)
 800369a:	f002 ff57 	bl	800654c <HAL_ADC_ConfigChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80036a4:	f000 fc82 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80036a8:	2306      	movs	r3, #6
 80036aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80036ac:	230b      	movs	r3, #11
 80036ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	4619      	mov	r1, r3
 80036b4:	4828      	ldr	r0, [pc, #160]	; (8003758 <MX_ADC1_Init+0x23c>)
 80036b6:	f002 ff49 	bl	800654c <HAL_ADC_ConfigChannel>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80036c0:	f000 fc74 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80036c4:	2301      	movs	r3, #1
 80036c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80036c8:	230c      	movs	r3, #12
 80036ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036cc:	463b      	mov	r3, r7
 80036ce:	4619      	mov	r1, r3
 80036d0:	4821      	ldr	r0, [pc, #132]	; (8003758 <MX_ADC1_Init+0x23c>)
 80036d2:	f002 ff3b 	bl	800654c <HAL_ADC_ConfigChannel>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80036dc:	f000 fc66 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80036e0:	2305      	movs	r3, #5
 80036e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80036e4:	230d      	movs	r3, #13
 80036e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036e8:	463b      	mov	r3, r7
 80036ea:	4619      	mov	r1, r3
 80036ec:	481a      	ldr	r0, [pc, #104]	; (8003758 <MX_ADC1_Init+0x23c>)
 80036ee:	f002 ff2d 	bl	800654c <HAL_ADC_ConfigChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80036f8:	f000 fc58 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80036fc:	2302      	movs	r3, #2
 80036fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003700:	230e      	movs	r3, #14
 8003702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003704:	463b      	mov	r3, r7
 8003706:	4619      	mov	r1, r3
 8003708:	4813      	ldr	r0, [pc, #76]	; (8003758 <MX_ADC1_Init+0x23c>)
 800370a:	f002 ff1f 	bl	800654c <HAL_ADC_ConfigChannel>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8003714:	f000 fc4a 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003718:	2304      	movs	r3, #4
 800371a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 800371c:	230f      	movs	r3, #15
 800371e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003720:	463b      	mov	r3, r7
 8003722:	4619      	mov	r1, r3
 8003724:	480c      	ldr	r0, [pc, #48]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003726:	f002 ff11 	bl	800654c <HAL_ADC_ConfigChannel>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8003730:	f000 fc3c 	bl	8003fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003734:	2303      	movs	r3, #3
 8003736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8003738:	2310      	movs	r3, #16
 800373a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800373c:	463b      	mov	r3, r7
 800373e:	4619      	mov	r1, r3
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <MX_ADC1_Init+0x23c>)
 8003742:	f002 ff03 	bl	800654c <HAL_ADC_ConfigChannel>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 800374c:	f000 fc2e 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000404 	.word	0x20000404
 800375c:	40012000 	.word	0x40012000
 8003760:	0f000001 	.word	0x0f000001

08003764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <MX_I2C1_Init+0x50>)
 800376a:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <MX_I2C1_Init+0x54>)
 800376c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <MX_I2C1_Init+0x50>)
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <MX_I2C1_Init+0x58>)
 8003772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <MX_I2C1_Init+0x50>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <MX_I2C1_Init+0x50>)
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <MX_I2C1_Init+0x50>)
 8003782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <MX_I2C1_Init+0x50>)
 800378a:	2200      	movs	r2, #0
 800378c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <MX_I2C1_Init+0x50>)
 8003790:	2200      	movs	r2, #0
 8003792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <MX_I2C1_Init+0x50>)
 8003796:	2200      	movs	r2, #0
 8003798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <MX_I2C1_Init+0x50>)
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037a0:	4804      	ldr	r0, [pc, #16]	; (80037b4 <MX_I2C1_Init+0x50>)
 80037a2:	f004 fb0b 	bl	8007dbc <HAL_I2C_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80037ac:	f000 fbfe 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200004ac 	.word	0x200004ac
 80037b8:	40005400 	.word	0x40005400
 80037bc:	000186a0 	.word	0x000186a0

080037c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80037c4:	4b17      	ldr	r3, [pc, #92]	; (8003824 <MX_SPI2_Init+0x64>)
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <MX_SPI2_Init+0x68>)
 80037c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <MX_SPI2_Init+0x64>)
 80037cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <MX_SPI2_Init+0x64>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <MX_SPI2_Init+0x64>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MX_SPI2_Init+0x64>)
 80037e0:	2202      	movs	r2, #2
 80037e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <MX_SPI2_Init+0x64>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_SPI2_Init+0x64>)
 80037ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <MX_SPI2_Init+0x64>)
 80037f4:	2228      	movs	r2, #40	; 0x28
 80037f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <MX_SPI2_Init+0x64>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <MX_SPI2_Init+0x64>)
 8003800:	2200      	movs	r2, #0
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003804:	4b07      	ldr	r3, [pc, #28]	; (8003824 <MX_SPI2_Init+0x64>)
 8003806:	2200      	movs	r2, #0
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <MX_SPI2_Init+0x64>)
 800380c:	220a      	movs	r2, #10
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003810:	4804      	ldr	r0, [pc, #16]	; (8003824 <MX_SPI2_Init+0x64>)
 8003812:	f005 f8ad 	bl	8008970 <HAL_SPI_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800381c:	f000 fbc6 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000500 	.word	0x20000500
 8003828:	40003800 	.word	0x40003800

0800382c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08c      	sub	sp, #48	; 0x30
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003832:	f107 030c 	add.w	r3, r7, #12
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f007 fb74 	bl	800af28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <MX_TIM1_Init+0xa8>)
 800384a:	4a23      	ldr	r2, [pc, #140]	; (80038d8 <MX_TIM1_Init+0xac>)
 800384c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800384e:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <MX_TIM1_Init+0xa8>)
 8003850:	2200      	movs	r2, #0
 8003852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <MX_TIM1_Init+0xa8>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <MX_TIM1_Init+0xa8>)
 800385c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <MX_TIM1_Init+0xa8>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <MX_TIM1_Init+0xa8>)
 800386a:	2200      	movs	r2, #0
 800386c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <MX_TIM1_Init+0xa8>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003874:	2303      	movs	r3, #3
 8003876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800387c:	2301      	movs	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003888:	2300      	movs	r3, #0
 800388a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800388c:	2301      	movs	r3, #1
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003890:	2300      	movs	r3, #0
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003898:	f107 030c 	add.w	r3, r7, #12
 800389c:	4619      	mov	r1, r3
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <MX_TIM1_Init+0xa8>)
 80038a0:	f006 f884 	bl	80099ac <HAL_TIM_Encoder_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80038aa:	f000 fb7f 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	4619      	mov	r1, r3
 80038ba:	4806      	ldr	r0, [pc, #24]	; (80038d4 <MX_TIM1_Init+0xa8>)
 80038bc:	f006 feaa 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80038c6:	f000 fb71 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80038ca:	bf00      	nop
 80038cc:	3730      	adds	r7, #48	; 0x30
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000558 	.word	0x20000558
 80038d8:	40010000 	.word	0x40010000

080038dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f007 fb1c 	bl	800af28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <MX_TIM3_Init+0xa0>)
 80038fa:	4a21      	ldr	r2, [pc, #132]	; (8003980 <MX_TIM3_Init+0xa4>)
 80038fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	; (800397c <MX_TIM3_Init+0xa0>)
 8003900:	2200      	movs	r2, #0
 8003902:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <MX_TIM3_Init+0xa0>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 800390a:	4b1c      	ldr	r3, [pc, #112]	; (800397c <MX_TIM3_Init+0xa0>)
 800390c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003910:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <MX_TIM3_Init+0xa0>)
 8003914:	2200      	movs	r2, #0
 8003916:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <MX_TIM3_Init+0xa0>)
 800391a:	2200      	movs	r2, #0
 800391c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800391e:	2303      	movs	r3, #3
 8003920:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003926:	2301      	movs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003936:	2301      	movs	r3, #1
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800393a:	2300      	movs	r3, #0
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	4619      	mov	r1, r3
 8003948:	480c      	ldr	r0, [pc, #48]	; (800397c <MX_TIM3_Init+0xa0>)
 800394a:	f006 f82f 	bl	80099ac <HAL_TIM_Encoder_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003954:	f000 fb2a 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_TIM3_Init+0xa0>)
 8003966:	f006 fe55 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003970:	f000 fb1c 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003974:	bf00      	nop
 8003976:	3730      	adds	r7, #48	; 0x30
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200005a0 	.word	0x200005a0
 8003980:	40000400 	.word	0x40000400

08003984 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800398a:	f107 0320 	add.w	r3, r7, #32
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	611a      	str	r2, [r3, #16]
 80039a2:	615a      	str	r2, [r3, #20]
 80039a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039a6:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <MX_TIM4_Init+0xc4>)
 80039aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039ae:	2202      	movs	r2, #2
 80039b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80039cc:	481d      	ldr	r0, [pc, #116]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039ce:	f005 fe66 	bl	800969e <HAL_TIM_PWM_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80039d8:	f000 fae8 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039dc:	2300      	movs	r3, #0
 80039de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039e4:	f107 0320 	add.w	r3, r7, #32
 80039e8:	4619      	mov	r1, r3
 80039ea:	4816      	ldr	r0, [pc, #88]	; (8003a44 <MX_TIM4_Init+0xc0>)
 80039ec:	f006 fe12 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80039f6:	f000 fad9 	bl	8003fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039fa:	2360      	movs	r3, #96	; 0x60
 80039fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4619      	mov	r1, r3
 8003a10:	480c      	ldr	r0, [pc, #48]	; (8003a44 <MX_TIM4_Init+0xc0>)
 8003a12:	f006 fa9f 	bl	8009f54 <HAL_TIM_PWM_ConfigChannel>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003a1c:	f000 fac6 	bl	8003fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	2204      	movs	r2, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4807      	ldr	r0, [pc, #28]	; (8003a44 <MX_TIM4_Init+0xc0>)
 8003a28:	f006 fa94 	bl	8009f54 <HAL_TIM_PWM_ConfigChannel>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003a32:	f000 fabb 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a36:	4803      	ldr	r0, [pc, #12]	; (8003a44 <MX_TIM4_Init+0xc0>)
 8003a38:	f001 f8f2 	bl	8004c20 <HAL_TIM_MspPostInit>

}
 8003a3c:	bf00      	nop
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200005e8 	.word	0x200005e8
 8003a48:	40000800 	.word	0x40000800

08003a4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a52:	463b      	mov	r3, r7
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <MX_TIM6_Init+0x64>)
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <MX_TIM6_Init+0x68>)
 8003a5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <MX_TIM6_Init+0x64>)
 8003a62:	2204      	movs	r2, #4
 8003a64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <MX_TIM6_Init+0x64>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <MX_TIM6_Init+0x64>)
 8003a6e:	f248 323f 	movw	r2, #33599	; 0x833f
 8003a72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <MX_TIM6_Init+0x64>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a7a:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <MX_TIM6_Init+0x64>)
 8003a7c:	f005 fd20 	bl	80094c0 <HAL_TIM_Base_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003a86:	f000 fa91 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a92:	463b      	mov	r3, r7
 8003a94:	4619      	mov	r1, r3
 8003a96:	4806      	ldr	r0, [pc, #24]	; (8003ab0 <MX_TIM6_Init+0x64>)
 8003a98:	f006 fdbc 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003aa2:	f000 fa83 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000630 	.word	0x20000630
 8003ab4:	40001000 	.word	0x40001000

08003ab8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003abe:	463b      	mov	r3, r7
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <MX_TIM7_Init+0x64>)
 8003ac8:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <MX_TIM7_Init+0x68>)
 8003aca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <MX_TIM7_Init+0x64>)
 8003ace:	2204      	movs	r2, #4
 8003ad0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <MX_TIM7_Init+0x64>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <MX_TIM7_Init+0x64>)
 8003ada:	f248 323f 	movw	r2, #33599	; 0x833f
 8003ade:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <MX_TIM7_Init+0x64>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003ae6:	480d      	ldr	r0, [pc, #52]	; (8003b1c <MX_TIM7_Init+0x64>)
 8003ae8:	f005 fcea 	bl	80094c0 <HAL_TIM_Base_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003af2:	f000 fa5b 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003afe:	463b      	mov	r3, r7
 8003b00:	4619      	mov	r1, r3
 8003b02:	4806      	ldr	r0, [pc, #24]	; (8003b1c <MX_TIM7_Init+0x64>)
 8003b04:	f006 fd86 	bl	800a614 <HAL_TIMEx_MasterConfigSynchronization>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003b0e:	f000 fa4d 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000678 	.word	0x20000678
 8003b20:	40001400 	.word	0x40001400

08003b24 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <MX_TIM10_Init+0x40>)
 8003b2a:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <MX_TIM10_Init+0x44>)
 8003b2c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <MX_TIM10_Init+0x40>)
 8003b30:	2204      	movs	r2, #4
 8003b32:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <MX_TIM10_Init+0x40>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <MX_TIM10_Init+0x40>)
 8003b3c:	f248 323f 	movw	r2, #33599	; 0x833f
 8003b40:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <MX_TIM10_Init+0x40>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <MX_TIM10_Init+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003b4e:	4805      	ldr	r0, [pc, #20]	; (8003b64 <MX_TIM10_Init+0x40>)
 8003b50:	f005 fcb6 	bl	80094c0 <HAL_TIM_Base_Init>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003b5a:	f000 fa27 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200006c0 	.word	0x200006c0
 8003b68:	40014400 	.word	0x40014400

08003b6c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <MX_TIM11_Init+0x40>)
 8003b72:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <MX_TIM11_Init+0x44>)
 8003b74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <MX_TIM11_Init+0x40>)
 8003b78:	2204      	movs	r2, #4
 8003b7a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <MX_TIM11_Init+0x40>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <MX_TIM11_Init+0x40>)
 8003b84:	f248 323f 	movw	r2, #33599	; 0x833f
 8003b88:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <MX_TIM11_Init+0x40>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <MX_TIM11_Init+0x40>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003b96:	4805      	ldr	r0, [pc, #20]	; (8003bac <MX_TIM11_Init+0x40>)
 8003b98:	f005 fc92 	bl	80094c0 <HAL_TIM_Base_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003ba2:	f000 fa03 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000708 	.word	0x20000708
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <MX_TIM14_Init+0x40>)
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <MX_TIM14_Init+0x44>)
 8003bbc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <MX_TIM14_Init+0x40>)
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <MX_TIM14_Init+0x40>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <MX_TIM14_Init+0x40>)
 8003bcc:	f248 323f 	movw	r2, #33599	; 0x833f
 8003bd0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <MX_TIM14_Init+0x40>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <MX_TIM14_Init+0x40>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003bde:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <MX_TIM14_Init+0x40>)
 8003be0:	f005 fc6e 	bl	80094c0 <HAL_TIM_Base_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003bea:	f000 f9df 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000750 	.word	0x20000750
 8003bf8:	40002000 	.word	0x40002000

08003bfc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <MX_USART6_UART_Init+0x50>)
 8003c04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c22:	220c      	movs	r2, #12
 8003c24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <MX_USART6_UART_Init+0x4c>)
 8003c34:	f006 fd7e 	bl	800a734 <HAL_UART_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003c3e:	f000 f9b5 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000798 	.word	0x20000798
 8003c4c:	40011400 	.word	0x40011400

08003c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <MX_DMA_Init+0x3c>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <MX_DMA_Init+0x3c>)
 8003c60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <MX_DMA_Init+0x3c>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	2038      	movs	r0, #56	; 0x38
 8003c78:	f002 ffe3 	bl	8006c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c7c:	2038      	movs	r0, #56	; 0x38
 8003c7e:	f002 fffc 	bl	8006c7a <HAL_NVIC_EnableIRQ>

}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800

08003c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	609a      	str	r2, [r3, #8]
 8003ca2:	60da      	str	r2, [r3, #12]
 8003ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	4b69      	ldr	r3, [pc, #420]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a68      	ldr	r2, [pc, #416]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b62      	ldr	r3, [pc, #392]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a61      	ldr	r2, [pc, #388]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b5f      	ldr	r3, [pc, #380]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a5a      	ldr	r2, [pc, #360]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	4b54      	ldr	r3, [pc, #336]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a53      	ldr	r2, [pc, #332]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003d20:	f043 0308 	orr.w	r3, r3, #8
 8003d24:	6313      	str	r3, [r2, #48]	; 0x30
 8003d26:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <MX_GPIO_Init+0x1c0>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003d32:	2200      	movs	r2, #0
 8003d34:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8003d38:	4846      	ldr	r0, [pc, #280]	; (8003e54 <MX_GPIO_Init+0x1c4>)
 8003d3a:	f004 f825 	bl	8007d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003d44:	4844      	ldr	r0, [pc, #272]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003d46:	f004 f81f 	bl	8007d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003d50:	4842      	ldr	r0, [pc, #264]	; (8003e5c <MX_GPIO_Init+0x1cc>)
 8003d52:	f004 f819 	bl	8007d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2104      	movs	r1, #4
 8003d5a:	4841      	ldr	r0, [pc, #260]	; (8003e60 <MX_GPIO_Init+0x1d0>)
 8003d5c:	f004 f814 	bl	8007d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8003d60:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	4619      	mov	r1, r3
 8003d78:	4836      	ldr	r0, [pc, #216]	; (8003e54 <MX_GPIO_Init+0x1c4>)
 8003d7a:	f003 fe51 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8003d7e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003d82:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	4619      	mov	r1, r3
 8003d92:	4830      	ldr	r0, [pc, #192]	; (8003e54 <MX_GPIO_Init+0x1c4>)
 8003d94:	f003 fe44 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8003d98:	f640 0304 	movw	r3, #2052	; 0x804
 8003d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	4619      	mov	r1, r3
 8003dac:	482a      	ldr	r0, [pc, #168]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003dae:	f003 fe37 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8003db2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db8:	2301      	movs	r3, #1
 8003dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4823      	ldr	r0, [pc, #140]	; (8003e58 <MX_GPIO_Init+0x1c8>)
 8003dcc:	f003 fe28 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8003dd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de2:	f107 0314 	add.w	r3, r7, #20
 8003de6:	4619      	mov	r1, r3
 8003de8:	481c      	ldr	r0, [pc, #112]	; (8003e5c <MX_GPIO_Init+0x1cc>)
 8003dea:	f003 fe19 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8003dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4619      	mov	r1, r3
 8003e02:	4816      	ldr	r0, [pc, #88]	; (8003e5c <MX_GPIO_Init+0x1cc>)
 8003e04:	f003 fe0c 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e16:	2300      	movs	r3, #0
 8003e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1e:	f107 0314 	add.w	r3, r7, #20
 8003e22:	4619      	mov	r1, r3
 8003e24:	480d      	ldr	r0, [pc, #52]	; (8003e5c <MX_GPIO_Init+0x1cc>)
 8003e26:	f003 fdfb 	bl	8007a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	2300      	movs	r3, #0
 8003e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 0314 	add.w	r3, r7, #20
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <MX_GPIO_Init+0x1d0>)
 8003e42:	f003 fded 	bl	8007a20 <HAL_GPIO_Init>

}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020c00 	.word	0x40020c00

08003e64 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  #if USE_LED
  led_init();
 8003e68:	f7fd faa2 	bl	80013b0 <led_init>
  #endif
  flash_init();
 8003e6c:	f7fe ffce 	bl	8002e0c <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8003e70:	f001 f980 	bl	8005174 <tim11_init>
  /* encoder_init */
  tim10_init();
 8003e74:	f001 f8aa 	bl	8004fcc <tim10_init>
  /* tim7 */
  tim7_init();
 8003e78:	f001 fa96 	bl	80053a8 <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8003e7c:	f001 f994 	bl	80051a8 <tim6_init>
  /* imu のバイアス補正のための初期�? */
  if(rotary_read_playmode() == motor_free)
 8003e80:	f7fd fb8a 	bl	8001598 <rotary_read_playmode>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d101      	bne.n	8003e8e <main_init+0x2a>
    imu_revision_init();
 8003e8a:	f000 f981 	bl	8004190 <imu_revision_init>
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <running_start>:

void running_start()
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	af00      	add	r7, sp, #0
  #if USE_LED
  led_start();
 8003e96:	f7fd faa1 	bl	80013dc <led_start>
  #endif
  HAL_Delay(1000);
 8003e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e9e:	f002 f96f 	bl	8006180 <HAL_Delay>
  led_write_rgb(0b100);
 8003ea2:	2004      	movs	r0, #4
 8003ea4:	f7fd fafe 	bl	80014a4 <led_write_rgb>
  HAL_Delay(1000);
 8003ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eac:	f002 f968 	bl	8006180 <HAL_Delay>
  led_write_led(0b01, 0b01);
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7fd fb36 	bl	8001524 <led_write_led>
  HAL_Delay(1000);
 8003eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ebc:	f002 f960 	bl	8006180 <HAL_Delay>
  led_write_led(0b10, 0b10);
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f7fd fb2e 	bl	8001524 <led_write_led>
  HAL_Delay(1000);
 8003ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ecc:	f002 f958 	bl	8006180 <HAL_Delay>
  led_write_led(0b11, 0b00);
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2003      	movs	r0, #3
 8003ed4:	f7fd fb26 	bl	8001524 <led_write_led>
  led_write_rgb(0b010);
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f7fd fae3 	bl	80014a4 <led_write_rgb>
  #if D_TIM7
  printf("main.c > running_start() > ");
  #endif
  tim7_start();
 8003ede:	f001 fa73 	bl	80053c8 <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8003ee2:	f001 f89d 	bl	8005020 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8003ee6:	f001 f971 	bl	80051cc <tim6_start>
  /* imu のバイアス補正のための準備 */
  if(rotary_read_playmode() == motor_free)
 8003eea:	f7fd fb55 	bl	8001598 <rotary_read_playmode>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d101      	bne.n	8003ef8 <running_start+0x66>
    imu_revision_start();
 8003ef4:	f000 f954 	bl	80041a0 <imu_revision_start>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}

08003efc <running_stop>:

void running_stop()
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  #if USE_LED
  led_stop();
 8003f00:	f7fd fa77 	bl	80013f2 <led_stop>
  #endif
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8003f04:	f001 f97a 	bl	80051fc <tim6_stop>
  /* tim7 */
  tim7_stop();
 8003f08:	f001 fa86 	bl	8005418 <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8003f0c:	f001 f8b6 	bl	800507c <tim10_stop>
  /* imu バイアス補正のための終�? */
  if(rotary_read_playmode() == motor_free)
 8003f10:	f7fd fb42 	bl	8001598 <rotary_read_playmode>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d101      	bne.n	8003f1e <running_stop+0x22>
    imu_revision_stop();
 8003f1a:	f000 f951 	bl	80041c0 <imu_revision_stop>
  led_write_rgb(0b001);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7fd fac0 	bl	80014a4 <led_write_rgb>
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <main_print_while>:

void main_print_while()
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	printf("////////////////////////////// WHILE //////////////////////////////\n\r");
 8003f2c:	4815      	ldr	r0, [pc, #84]	; (8003f84 <main_print_while+0x5c>)
 8003f2e:	f007 fe7d 	bl	800bc2c <iprintf>
  rotary_print_playmode();
 8003f32:	f7fd fb9f 	bl	8001674 <rotary_print_playmode>
	print_rotary_value();
 8003f36:	f000 f91d 	bl	8004174 <print_rotary_value>
  if(rotary_read() < 4)
 8003f3a:	f7fd fb51 	bl	80015e0 <rotary_read>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d804      	bhi.n	8003f4e <main_print_while+0x26>
  {
    led_write_led(0b11, 0b10);
 8003f44:	2102      	movs	r1, #2
 8003f46:	2003      	movs	r0, #3
 8003f48:	f7fd faec 	bl	8001524 <led_write_led>
  }
  else
  {
    led_write_led(0b11, 0b00);
  }
}
 8003f4c:	e017      	b.n	8003f7e <main_print_while+0x56>
  else if(rotary_read() < 8)
 8003f4e:	f7fd fb47 	bl	80015e0 <rotary_read>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b07      	cmp	r3, #7
 8003f56:	d804      	bhi.n	8003f62 <main_print_while+0x3a>
    led_write_led(0b11, 0b01);
 8003f58:	2101      	movs	r1, #1
 8003f5a:	2003      	movs	r0, #3
 8003f5c:	f7fd fae2 	bl	8001524 <led_write_led>
}
 8003f60:	e00d      	b.n	8003f7e <main_print_while+0x56>
  else if(rotary_read() == 15)
 8003f62:	f7fd fb3d 	bl	80015e0 <rotary_read>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d104      	bne.n	8003f76 <main_print_while+0x4e>
    led_write_led(0b11, 0b11);
 8003f6c:	2103      	movs	r1, #3
 8003f6e:	2003      	movs	r0, #3
 8003f70:	f7fd fad8 	bl	8001524 <led_write_led>
}
 8003f74:	e003      	b.n	8003f7e <main_print_while+0x56>
    led_write_led(0b11, 0b00);
 8003f76:	2100      	movs	r1, #0
 8003f78:	2003      	movs	r0, #3
 8003f7a:	f7fd fad3 	bl	8001524 <led_write_led>
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	08010ae0 	.word	0x08010ae0

08003f88 <main_main>:

void main_main()
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  main_d_print();
 8003f8c:	f000 f802 	bl	8003f94 <main_d_print>
	tim7_main();
	#endif
	#if D_TIM6_WHILE
	tim6_main();
	#endif
}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <main_d_print>:

void main_d_print()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  revision_print();
 8003f98:	f000 f918 	bl	80041cc <revision_print>
  tim10_d_print();
 8003f9c:	f001 f8dc 	bl	8005158 <tim10_d_print>
  tim7_d_print();
 8003fa0:	f001 fb38 	bl	8005614 <tim7_d_print>
  tim6_d_print();
 8003fa4:	f001 f9fa 	bl	800539c <tim6_d_print>
}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}

08003fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb0:	b672      	cpsid	i
}
 8003fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003fb4:	e7fe      	b.n	8003fb4 <Error_Handler+0x8>

08003fb6 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f000 f826 	bl	800400c <motor_enable>
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <motor_start>:

void motor_start()
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4806      	ldr	r0, [pc, #24]	; (8003fe4 <motor_start+0x20>)
 8003fcc:	f005 fbb6 	bl	800973c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003fd0:	2104      	movs	r1, #4
 8003fd2:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <motor_start+0x20>)
 8003fd4:	f005 fbb2 	bl	800973c <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f000 f817 	bl	800400c <motor_enable>
#endif
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200005e8 	.word	0x200005e8

08003fe8 <motor_stop>:

void motor_stop()
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f000 f80d 	bl	800400c <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8003ff2:	2104      	movs	r1, #4
 8003ff4:	4804      	ldr	r0, [pc, #16]	; (8004008 <motor_stop+0x20>)
 8003ff6:	f005 fc69 	bl	80098cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <motor_stop+0x20>)
 8003ffe:	f005 fc65 	bl	80098cc <HAL_TIM_PWM_Stop>
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200005e8 	.word	0x200005e8

0800400c <motor_enable>:

void motor_enable(uint8_t enable_)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <motor_enable+0x28>)
 8004026:	701a      	strb	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	20012181 	.word	0x20012181

08004038 <motor_read_enable>:

char motor_read_enable()
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
    return enable;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <motor_read_enable+0x14>)
 800403e:	781b      	ldrb	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20012181 	.word	0x20012181

08004050 <motor_set>:

void motor_set(float motor_left_, float motor_right_)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	ed87 0a01 	vstr	s0, [r7, #4]
 800405a:	edc7 0a00 	vstr	s1, [r7]
    if(motor_left_ < 0)
 800405e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	d50b      	bpl.n	8004084 <motor_set+0x34>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800406c:	2200      	movs	r2, #0
 800406e:	2104      	movs	r1, #4
 8004070:	4831      	ldr	r0, [pc, #196]	; (8004138 <motor_set+0xe8>)
 8004072:	f003 fe89 	bl	8007d88 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8004076:	edd7 7a01 	vldr	s15, [r7, #4]
 800407a:	eef1 7a67 	vneg.f32	s15, s15
 800407e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004082:	e004      	b.n	800408e <motor_set+0x3e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8004084:	2201      	movs	r2, #1
 8004086:	2104      	movs	r1, #4
 8004088:	482b      	ldr	r0, [pc, #172]	; (8004138 <motor_set+0xe8>)
 800408a:	f003 fe7d 	bl	8007d88 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 800408e:	edd7 7a00 	vldr	s15, [r7]
 8004092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	d50c      	bpl.n	80040b6 <motor_set+0x66>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800409c:	2201      	movs	r2, #1
 800409e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040a2:	4826      	ldr	r0, [pc, #152]	; (800413c <motor_set+0xec>)
 80040a4:	f003 fe70 	bl	8007d88 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 80040a8:	edd7 7a00 	vldr	s15, [r7]
 80040ac:	eef1 7a67 	vneg.f32	s15, s15
 80040b0:	edc7 7a00 	vstr	s15, [r7]
 80040b4:	e005      	b.n	80040c2 <motor_set+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80040b6:	2200      	movs	r2, #0
 80040b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040bc:	481f      	ldr	r0, [pc, #124]	; (800413c <motor_set+0xec>)
 80040be:	f003 fe63 	bl	8007d88 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 80040c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004140 <motor_set+0xf0>
 80040ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d2:	dd01      	ble.n	80040d8 <motor_set+0x88>
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <motor_set+0xf4>)
 80040d6:	e000      	b.n	80040da <motor_set+0x8a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	607b      	str	r3, [r7, #4]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 80040dc:	edd7 7a00 	vldr	s15, [r7]
 80040e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004140 <motor_set+0xf0>
 80040e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ec:	dd01      	ble.n	80040f2 <motor_set+0xa2>
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <motor_set+0xf4>)
 80040f0:	e000      	b.n	80040f4 <motor_set+0xa4>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	603b      	str	r3, [r7, #0]

    if(!enable)
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <motor_set+0xf8>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <motor_set+0xba>
    {
        motor_left_ = 0;
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
        motor_right_ = 0;
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	603b      	str	r3, [r7, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <motor_set+0xfc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004116:	ee17 2a90 	vmov	r2, s15
 800411a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <motor_set+0xfc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	edd7 7a00 	vldr	s15, [r7]
 8004124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004128:	ee17 2a90 	vmov	r2, s15
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40020c00 	.word	0x40020c00
 800413c:	40020800 	.word	0x40020800
 8004140:	447a0000 	.word	0x447a0000
 8004144:	447a0000 	.word	0x447a0000
 8004148:	20012181 	.word	0x20012181
 800414c:	200005e8 	.word	0x200005e8

08004150 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8004158:	1d39      	adds	r1, r7, #4
 800415a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800415e:	2201      	movs	r2, #1
 8004160:	4803      	ldr	r0, [pc, #12]	; (8004170 <__io_putchar+0x20>)
 8004162:	f006 fb34 	bl	800a7ce <HAL_UART_Transmit>
	return ch;
 8004166:	687b      	ldr	r3, [r7, #4]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000798 	.word	0x20000798

08004174 <print_rotary_value>:

void print_rotary_value()
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8004178:	f7fd fa26 	bl	80015c8 <rotary_read_value>
 800417c:	4603      	mov	r3, r0
 800417e:	4619      	mov	r1, r3
 8004180:	4802      	ldr	r0, [pc, #8]	; (800418c <print_rotary_value+0x18>)
 8004182:	f007 fd53 	bl	800bc2c <iprintf>
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	08010b28 	.word	0x08010b28

08004190 <imu_revision_init>:
unsigned int imu_revision_count;
float imu_revision_sum;
float imu_revision_average;

void imu_revision_init()
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
    //! course_init() されていることが前提で空関数
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <imu_revision_start>:

void imu_revision_start()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
    imu_revision_count = 1;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <imu_revision_start+0x1c>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
    course_start();
 80041aa:	f7fd ff47 	bl	800203c <course_start>
    HAL_Delay(5000);
 80041ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80041b2:	f001 ffe5 	bl	8006180 <HAL_Delay>
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20012184 	.word	0x20012184

080041c0 <imu_revision_stop>:

void imu_revision_stop()
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
    course_stop();
 80041c4:	f7fd ff64 	bl	8002090 <course_stop>
}
 80041c8:	bf00      	nop
 80041ca:	bd80      	pop	{r7, pc}

080041cc <revision_print>:
        imu_revision_count = imu_revision_count + 1;
	}
}

void revision_print()
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
    #if IMU_REVISION
    imu_revision_print();
    #endif
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <section_length_set_sampling_time_ms>:
//! update 周期
float samplingtime_s;

//! update 周期を設定する
void section_length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
    samplingtime_s = samplingtime_ms / (float) 1000;
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f0:	eddf 6a06 	vldr	s13, [pc, #24]	; 800420c <section_length_set_sampling_time_ms+0x30>
 80041f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <section_length_set_sampling_time_ms+0x34>)
 80041fa:	edc3 7a00 	vstr	s15, [r3]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	447a0000 	.word	0x447a0000
 8004210:	20012198 	.word	0x20012198

08004214 <section_length_init>:

void section_length_init(unsigned short int samplingtime_ms)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	80fb      	strh	r3, [r7, #6]
    section_length_set_sampling_time_ms(samplingtime_ms);
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ffdb 	bl	80041dc <section_length_set_sampling_time_ms>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <section_length_start>:

void section_length_start()
{
 800422e:	b580      	push	{r7, lr}
 8004230:	af00      	add	r7, sp, #0
    section_length_reset();
 8004232:	f000 f80d 	bl	8004250 <section_length_reset>
    section_length_buffer_reset();
 8004236:	f000 f81f 	bl	8004278 <section_length_buffer_reset>
    length_start();
 800423a:	f7fe fe7d 	bl	8002f38 <length_start>
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}

08004242 <section_length_stop>:

void section_length_stop()
{
 8004242:	b580      	push	{r7, lr}
 8004244:	af00      	add	r7, sp, #0
    length_stop();
 8004246:	f7fe fe89 	bl	8002f5c <length_stop>
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <section_length_reset>:
{
    length_fin();
}

void section_length_reset()
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
    section_length_right = 0;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <section_length_reset+0x20>)
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
    section_length_left = 0;
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <section_length_reset+0x24>)
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	2001218c 	.word	0x2001218c
 8004274:	20012188 	.word	0x20012188

08004278 <section_length_buffer_reset>:

void section_length_buffer_reset()
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = 0;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <section_length_buffer_reset+0x20>)
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
    section_length_buffer_global_right = 0;
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <section_length_buffer_reset+0x24>)
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20012190 	.word	0x20012190
 800429c:	20012194 	.word	0x20012194

080042a0 <section_length_read>:

//! 現在点区間長を返す
float section_length_read()
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	ed2d 8b02 	vpush	{d8}
 80042a6:	af00      	add	r7, sp, #0
    return (section_length_read_left() + section_length_read_right()) / 2;
 80042a8:	f000 f814 	bl	80042d4 <section_length_read_left>
 80042ac:	eeb0 8a40 	vmov.f32	s16, s0
 80042b0:	f000 f81e 	bl	80042f0 <section_length_read_right>
 80042b4:	eef0 7a40 	vmov.f32	s15, s0
 80042b8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80042bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80042c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80042c8:	eeb0 0a67 	vmov.f32	s0, s15
 80042cc:	46bd      	mov	sp, r7
 80042ce:	ecbd 8b02 	vpop	{d8}
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <section_length_read_left>:

float section_length_read_left()
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
    return section_length_left;
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <section_length_read_left+0x18>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	ee07 3a90 	vmov	s15, r3
}
 80042e0:	eeb0 0a67 	vmov.f32	s0, s15
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20012188 	.word	0x20012188

080042f0 <section_length_read_right>:

float section_length_read_right()
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
    return section_length_right;
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <section_length_read_right+0x18>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	ee07 3a90 	vmov	s15, r3
}
 80042fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	2001218c 	.word	0x2001218c

0800430c <section_length_set_buffer>:
 * }
 * 
 */
//! 区間開始点を現在点の世界長にする
void section_length_set_buffer()
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = length_read_left();
 8004310:	f7fe fe5e 	bl	8002fd0 <length_read_left>
 8004314:	eef0 7a40 	vmov.f32	s15, s0
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <section_length_set_buffer+0x34>)
 800431a:	edc3 7a00 	vstr	s15, [r3]
    section_length_buffer_global_right = length_read_right();
 800431e:	f7fe fe65 	bl	8002fec <length_read_right>
 8004322:	eef0 7a40 	vmov.f32	s15, s0
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <section_length_set_buffer+0x38>)
 8004328:	edc3 7a00 	vstr	s15, [r3]
    section_length_left = 0;
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <section_length_set_buffer+0x3c>)
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
    section_length_right = 0;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <section_length_set_buffer+0x40>)
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20012190 	.word	0x20012190
 8004344:	20012194 	.word	0x20012194
 8004348:	20012188 	.word	0x20012188
 800434c:	2001218c 	.word	0x2001218c

08004350 <section_length_update>:

void section_length_update()
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
    //! 区間開始点から現在点の区間長を計算
    section_length_left = length_read_left() - section_length_buffer_global_left;
 8004354:	f7fe fe3c 	bl	8002fd0 <length_read_left>
 8004358:	eeb0 7a40 	vmov.f32	s14, s0
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <section_length_update+0x38>)
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <section_length_update+0x3c>)
 8004368:	edc3 7a00 	vstr	s15, [r3]
    section_length_right = length_read_right() - section_length_buffer_global_right;
 800436c:	f7fe fe3e 	bl	8002fec <length_read_right>
 8004370:	eeb0 7a40 	vmov.f32	s14, s0
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <section_length_update+0x40>)
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <section_length_update+0x44>)
 8004380:	edc3 7a00 	vstr	s15, [r3]
}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20012190 	.word	0x20012190
 800438c:	20012188 	.word	0x20012188
 8004390:	20012194 	.word	0x20012194
 8004394:	2001218c 	.word	0x2001218c

08004398 <section_length_d_print>:

void section_length_d_print()
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
    #if D_SECTION_LENGTH
    printf("section_length = %10.2f\r\n", section_length_read());
    #endif
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate, markerstate_volatile;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 80043b2:	2104      	movs	r1, #4
 80043b4:	4810      	ldr	r0, [pc, #64]	; (80043f8 <sidesensor_read+0x50>)
 80043b6:	f003 fccf 	bl	8007d58 <HAL_GPIO_ReadPin>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	4413      	add	r3, r2
 80043cc:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 80043ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043d2:	4809      	ldr	r0, [pc, #36]	; (80043f8 <sidesensor_read+0x50>)
 80043d4:	f003 fcc0 	bl	8007d58 <HAL_GPIO_ReadPin>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <sidesensor_read+0x3a>
 80043de:	2302      	movs	r3, #2
 80043e0:	e000      	b.n	80043e4 <sidesensor_read+0x3c>
 80043e2:	2300      	movs	r3, #0
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	4413      	add	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]

    return subsens;
 80043ec:	79fb      	ldrb	r3, [r7, #7]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40020400 	.word	0x40020400

080043fc <sidesensor_init>:

void sidesensor_init()
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	/* sidesensor_init */
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <sidesensor_start>:

void sidesensor_start()
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
    marker = 0;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <sidesensor_start+0x34>)
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <sidesensor_start+0x38>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <sidesensor_start+0x3c>)
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <sidesensor_start+0x40>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
	markerstate = none;
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <sidesensor_start+0x44>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = none;
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <sidesensor_start+0x48>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2001219d 	.word	0x2001219d
 8004444:	2001219c 	.word	0x2001219c
 8004448:	2001219e 	.word	0x2001219e
 800444c:	2001219f 	.word	0x2001219f
 8004450:	200121a0 	.word	0x200121a0
 8004454:	200121a1 	.word	0x200121a1

08004458 <sidesensor_stop>:

void sidesensor_stop()
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
	return markerstate;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <sidesensor_read_markerstate+0x14>)
 800446e:	781b      	ldrb	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	200121a0 	.word	0x200121a0

08004480 <sidesensor_read_markerstate_volatile>:

SideSensorState sidesensor_read_markerstate_volatile()
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
	return markerstate_volatile;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <sidesensor_read_markerstate_volatile+0x14>)
 8004486:	781b      	ldrb	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	200121a1 	.word	0x200121a1

08004498 <sidesensor_right>:

void sidesensor_right()
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <sidesensor_right+0x44>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <sidesensor_right+0x1a>
    {
        // start
		markerstate_volatile = straight;
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <sidesensor_right+0x48>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
		markerstate = straight;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <sidesensor_right+0x4c>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e009      	b.n	80044c6 <sidesensor_right+0x2e>
    }
    else if(rightmarkercount == 2 - 1)
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <sidesensor_right+0x44>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <sidesensor_right+0x2e>
    {
        // stop
		markerstate_volatile = stop;
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <sidesensor_right+0x48>)
 80044bc:	2203      	movs	r2, #3
 80044be:	701a      	strb	r2, [r3, #0]
		markerstate = stop;
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <sidesensor_right+0x4c>)
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <sidesensor_right+0x44>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b03      	ldr	r3, [pc, #12]	; (80044dc <sidesensor_right+0x44>)
 80044d0:	701a      	strb	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	2001219f 	.word	0x2001219f
 80044e0:	200121a1 	.word	0x200121a1
 80044e4:	200121a0 	.word	0x200121a0

080044e8 <sidesensor_left>:

void sidesensor_left()
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <sidesensor_left+0x1c>)
 80044ee:	2204      	movs	r2, #4
 80044f0:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = curve;
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <sidesensor_left+0x20>)
 80044f4:	2204      	movs	r2, #4
 80044f6:	701a      	strb	r2, [r3, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	200121a0 	.word	0x200121a0
 8004508:	200121a1 	.word	0x200121a1

0800450c <sidesensor_cross>:

void sidesensor_cross()
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <sidesensor_cross+0x1c>)
 8004512:	2205      	movs	r2, #5
 8004514:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = cross;
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <sidesensor_cross+0x20>)
 8004518:	2205      	movs	r2, #5
 800451a:	701a      	strb	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	200121a0 	.word	0x200121a0
 800452c:	200121a1 	.word	0x200121a1

08004530 <sidesensor_main>:
	markerstate = straight;
	markerstate_volatile = straight;
}

void sidesensor_main()
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8004536:	f7ff ff37 	bl	80043a8 <sidesensor_read>
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
	markerstate_volatile = none;
 800453e:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <sidesensor_main+0xb0>)
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]

	if(subsens != subsensbuf)
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <sidesensor_main+0xb4>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	79fa      	ldrb	r2, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d044      	beq.n	80045d8 <sidesensor_main+0xa8>
	{
		subsensbuf = subsens;
 800454e:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <sidesensor_main+0xb4>)
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8004554:	79fa      	ldrb	r2, [r7, #7]
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <sidesensor_main+0xb8>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <sidesensor_main+0xbc>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	4413      	add	r3, r2
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <sidesensor_main+0xbc>)
 800456c:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d12b      	bne.n	80045cc <sidesensor_main+0x9c>
 8004574:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <sidesensor_main+0xb8>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d027      	beq.n	80045cc <sidesensor_main+0x9c>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <sidesensor_main+0xbc>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <sidesensor_main+0xbc>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	109b      	asrs	r3, r3, #2
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8004594:	797b      	ldrb	r3, [r7, #5]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10e      	bne.n	80045b8 <sidesensor_main+0x88>
			{
				if (first == 0b01)
 800459a:	79bb      	ldrb	r3, [r7, #6]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d102      	bne.n	80045a6 <sidesensor_main+0x76>
				{
					// right -> start / stop
                    sidesensor_right();
 80045a0:	f7ff ff7a 	bl	8004498 <sidesensor_right>
 80045a4:	e00a      	b.n	80045bc <sidesensor_main+0x8c>
				}
				else if (first == 0b10)
 80045a6:	79bb      	ldrb	r3, [r7, #6]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d102      	bne.n	80045b2 <sidesensor_main+0x82>
				{
					// left -> curve
                    sidesensor_left();
 80045ac:	f7ff ff9c 	bl	80044e8 <sidesensor_left>
 80045b0:	e004      	b.n	80045bc <sidesensor_main+0x8c>
				}
				else
				{
					// cross
                    sidesensor_cross();
 80045b2:	f7ff ffab 	bl	800450c <sidesensor_cross>
 80045b6:	e001      	b.n	80045bc <sidesensor_main+0x8c>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 80045b8:	f7ff ffa8 	bl	800450c <sidesensor_cross>
			}
			sidedeltacount = 0;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <sidesensor_main+0xb8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
			marker = 0;
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <sidesensor_main+0xbc>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]
		{
 80045c8:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 80045ca:	e005      	b.n	80045d8 <sidesensor_main+0xa8>
			sidedeltacount++;
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <sidesensor_main+0xb8>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <sidesensor_main+0xb8>)
 80045d6:	701a      	strb	r2, [r3, #0]
}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	200121a1 	.word	0x200121a1
 80045e4:	2001219c 	.word	0x2001219c
 80045e8:	2001219e 	.word	0x2001219e
 80045ec:	2001219d 	.word	0x2001219d

080045f0 <slow_start>:
    /* slow_init */
    slow_started = 0;
}

void slow_start()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
    /* slow_start */

    /* 初期設定されている値を一旦保存する */
    PID *slow_default_pid_pointer;
    slow_default_pid_pointer = velotrace_read_values();
 80045f6:	f001 fc37 	bl	8005e68 <velotrace_read_values>
 80045fa:	6078      	str	r0, [r7, #4]
    slow_default_pid.target = slow_default_pid_pointer -> target;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <slow_start+0x80>)
 8004602:	6013      	str	r3, [r2, #0]
    slow_default_pid_pointer = tracer_read_values();
 8004604:	f001 f9e6 	bl	80059d4 <tracer_read_values>
 8004608:	6078      	str	r0, [r7, #4]
    slow_default_pid.kp = slow_default_pid_pointer->kp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <slow_start+0x80>)
 8004610:	6053      	str	r3, [r2, #4]
    slow_default_pid.ki = slow_default_pid_pointer->ki;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	4a16      	ldr	r2, [pc, #88]	; (8004670 <slow_start+0x80>)
 8004618:	6093      	str	r3, [r2, #8]
    slow_default_pid.kd = slow_default_pid_pointer->kd;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4a14      	ldr	r2, [pc, #80]	; (8004670 <slow_start+0x80>)
 8004620:	60d3      	str	r3, [r2, #12]

    /* slow 実行時の PID パラメータ */
    slow_pid.target = SLOW_VELOTRACE_TARGET;
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <slow_start+0x84>)
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <slow_start+0x88>)
 8004626:	601a      	str	r2, [r3, #0]
    slow_pid.kp = SLOW_TRACE_KP;
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <slow_start+0x84>)
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <slow_start+0x8c>)
 800462c:	605a      	str	r2, [r3, #4]
    slow_pid.ki = SLOW_TRACE_KI;
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <slow_start+0x84>)
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
    slow_pid.kd = SLOW_TRACE_KD;
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <slow_start+0x84>)
 8004638:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800463c:	60da      	str	r2, [r3, #12]

    /* 初期化 */
    length_start();
 800463e:	f7fe fc7b 	bl	8002f38 <length_start>
    tracer_start();
 8004642:	f001 f86f 	bl	8005724 <tracer_start>
    velotrace_start();
 8004646:	f001 fa65 	bl	8005b14 <velotrace_start>
    slowinglength = 0;
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <slow_start+0x90>)
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
    slow_enable = 1;
 8004652:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <slow_start+0x94>)
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
    //! スロースタートを始めたタイミングでの世界長を取り出す
    slow_start_point_global_length = length_read();
 8004658:	f7fe fca0 	bl	8002f9c <length_read>
 800465c:	eef0 7a40 	vmov.f32	s15, s0
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <slow_start+0x98>)
 8004662:	edc3 7a00 	vstr	s15, [r3]
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	200121b4 	.word	0x200121b4
 8004674:	200121a4 	.word	0x200121a4
 8004678:	3e99999a 	.word	0x3e99999a
 800467c:	40400000 	.word	0x40400000
 8004680:	200121c4 	.word	0x200121c4
 8004684:	200121c8 	.word	0x200121c8
 8004688:	200121cc 	.word	0x200121cc

0800468c <slow_print_default_pid>:
{
    return sigmoid(x, SLOW_SIGMOID_A, SLOW_LENGTH / 2);
}

void slow_print_default_pid()
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
#if D_SLOW
    // printf("slow > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", slow_default_pid.kp, slow_default_pid.ki, slow_default_pid.kd);
    printf("slow > target = %7.2f\r\n", slow_default_pid.target);
#endif
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_MspInit+0x54>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <HAL_MspInit+0x54>)
 80046ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046b0:	6453      	str	r3, [r2, #68]	; 0x44
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_MspInit+0x54>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_MspInit+0x54>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <HAL_MspInit+0x54>)
 80046c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6413      	str	r3, [r2, #64]	; 0x40
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_MspInit+0x54>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 80046da:	2200      	movs	r2, #0
 80046dc:	210f      	movs	r1, #15
 80046de:	f06f 0003 	mvn.w	r0, #3
 80046e2:	f002 faae 	bl	8006c42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800

080046f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	; 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 031c 	add.w	r3, r7, #28
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a49      	ldr	r2, [pc, #292]	; (8004838 <HAL_ADC_MspInit+0x144>)
 8004712:	4293      	cmp	r3, r2
 8004714:	f040 808c 	bne.w	8004830 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_ADC_MspInit+0x148>)
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	4a46      	ldr	r2, [pc, #280]	; (800483c <HAL_ADC_MspInit+0x148>)
 8004722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004726:	6453      	str	r3, [r2, #68]	; 0x44
 8004728:	4b44      	ldr	r3, [pc, #272]	; (800483c <HAL_ADC_MspInit+0x148>)
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_ADC_MspInit+0x148>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4a3f      	ldr	r2, [pc, #252]	; (800483c <HAL_ADC_MspInit+0x148>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	6313      	str	r3, [r2, #48]	; 0x30
 8004744:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_ADC_MspInit+0x148>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	4b39      	ldr	r3, [pc, #228]	; (800483c <HAL_ADC_MspInit+0x148>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	4a38      	ldr	r2, [pc, #224]	; (800483c <HAL_ADC_MspInit+0x148>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6313      	str	r3, [r2, #48]	; 0x30
 8004760:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_ADC_MspInit+0x148>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_ADC_MspInit+0x148>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	4a31      	ldr	r2, [pc, #196]	; (800483c <HAL_ADC_MspInit+0x148>)
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	6313      	str	r3, [r2, #48]	; 0x30
 800477c:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_ADC_MspInit+0x148>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004788:	233f      	movs	r3, #63	; 0x3f
 800478a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800478c:	2303      	movs	r3, #3
 800478e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	4619      	mov	r1, r3
 800479a:	4829      	ldr	r0, [pc, #164]	; (8004840 <HAL_ADC_MspInit+0x14c>)
 800479c:	f003 f940 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80047a0:	23ff      	movs	r3, #255	; 0xff
 80047a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a4:	2303      	movs	r3, #3
 80047a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ac:	f107 031c 	add.w	r3, r7, #28
 80047b0:	4619      	mov	r1, r3
 80047b2:	4824      	ldr	r0, [pc, #144]	; (8004844 <HAL_ADC_MspInit+0x150>)
 80047b4:	f003 f934 	bl	8007a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047b8:	2303      	movs	r3, #3
 80047ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047bc:	2303      	movs	r3, #3
 80047be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c4:	f107 031c 	add.w	r3, r7, #28
 80047c8:	4619      	mov	r1, r3
 80047ca:	481f      	ldr	r0, [pc, #124]	; (8004848 <HAL_ADC_MspInit+0x154>)
 80047cc:	f003 f928 	bl	8007a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_ADC_MspInit+0x158>)
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <HAL_ADC_MspInit+0x15c>)
 80047d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80047d6:	4b1d      	ldr	r3, [pc, #116]	; (800484c <HAL_ADC_MspInit+0x158>)
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_ADC_MspInit+0x158>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_ADC_MspInit+0x158>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_ADC_MspInit+0x158>)
 80047ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <HAL_ADC_MspInit+0x158>)
 80047f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_ADC_MspInit+0x158>)
 80047fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004800:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_ADC_MspInit+0x158>)
 8004802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004806:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <HAL_ADC_MspInit+0x158>)
 800480a:	2200      	movs	r2, #0
 800480c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_ADC_MspInit+0x158>)
 8004810:	2200      	movs	r2, #0
 8004812:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004814:	480d      	ldr	r0, [pc, #52]	; (800484c <HAL_ADC_MspInit+0x158>)
 8004816:	f002 fa4b 	bl	8006cb0 <HAL_DMA_Init>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8004820:	f7ff fbc4 	bl	8003fac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_ADC_MspInit+0x158>)
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <HAL_ADC_MspInit+0x158>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004830:	bf00      	nop
 8004832:	3730      	adds	r7, #48	; 0x30
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40012000 	.word	0x40012000
 800483c:	40023800 	.word	0x40023800
 8004840:	40020800 	.word	0x40020800
 8004844:	40020000 	.word	0x40020000
 8004848:	40020400 	.word	0x40020400
 800484c:	2000044c 	.word	0x2000044c
 8004850:	40026410 	.word	0x40026410

08004854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_I2C_MspInit+0x84>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d12c      	bne.n	80048d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <HAL_I2C_MspInit+0x88>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	4a17      	ldr	r2, [pc, #92]	; (80048dc <HAL_I2C_MspInit+0x88>)
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	6313      	str	r3, [r2, #48]	; 0x30
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_I2C_MspInit+0x88>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004892:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004898:	2312      	movs	r3, #18
 800489a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800489c:	2301      	movs	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a0:	2303      	movs	r3, #3
 80048a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048a4:	2304      	movs	r3, #4
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	4619      	mov	r1, r3
 80048ae:	480c      	ldr	r0, [pc, #48]	; (80048e0 <HAL_I2C_MspInit+0x8c>)
 80048b0:	f003 f8b6 	bl	8007a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_I2C_MspInit+0x88>)
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	4a07      	ldr	r2, [pc, #28]	; (80048dc <HAL_I2C_MspInit+0x88>)
 80048be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048c2:	6413      	str	r3, [r2, #64]	; 0x40
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_I2C_MspInit+0x88>)
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80048d0:	bf00      	nop
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40005400 	.word	0x40005400
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40020400 	.word	0x40020400

080048e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_SPI_MspInit+0x84>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d12c      	bne.n	8004960 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <HAL_SPI_MspInit+0x88>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4a17      	ldr	r2, [pc, #92]	; (800496c <HAL_SPI_MspInit+0x88>)
 8004910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004914:	6413      	str	r3, [r2, #64]	; 0x40
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <HAL_SPI_MspInit+0x88>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <HAL_SPI_MspInit+0x88>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_SPI_MspInit+0x88>)
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b0e      	ldr	r3, [pc, #56]	; (800496c <HAL_SPI_MspInit+0x88>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800493e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004944:	2302      	movs	r3, #2
 8004946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494c:	2303      	movs	r3, #3
 800494e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004950:	2305      	movs	r3, #5
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	4619      	mov	r1, r3
 800495a:	4805      	ldr	r0, [pc, #20]	; (8004970 <HAL_SPI_MspInit+0x8c>)
 800495c:	f003 f860 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004960:	bf00      	nop
 8004962:	3728      	adds	r7, #40	; 0x28
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40003800 	.word	0x40003800
 800496c:	40023800 	.word	0x40023800
 8004970:	40020400 	.word	0x40020400

08004974 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	; 0x30
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497c:	f107 031c 	add.w	r3, r7, #28
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3e      	ldr	r2, [pc, #248]	; (8004a8c <HAL_TIM_Encoder_MspInit+0x118>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d13d      	bne.n	8004a12 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	4a3c      	ldr	r2, [pc, #240]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6453      	str	r3, [r2, #68]	; 0x44
 80049a6:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a35      	ldr	r2, [pc, #212]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b33      	ldr	r3, [pc, #204]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 80049ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d4:	2302      	movs	r3, #2
 80049d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049e0:	2301      	movs	r3, #1
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e4:	f107 031c 	add.w	r3, r7, #28
 80049e8:	4619      	mov	r1, r3
 80049ea:	482a      	ldr	r0, [pc, #168]	; (8004a94 <HAL_TIM_Encoder_MspInit+0x120>)
 80049ec:	f003 f818 	bl	8007a20 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80049f0:	2200      	movs	r2, #0
 80049f2:	2101      	movs	r1, #1
 80049f4:	2019      	movs	r0, #25
 80049f6:	f002 f924 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049fa:	2019      	movs	r0, #25
 80049fc:	f002 f93d 	bl	8006c7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8004a00:	2200      	movs	r2, #0
 8004a02:	2101      	movs	r1, #1
 8004a04:	201a      	movs	r0, #26
 8004a06:	f002 f91c 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004a0a:	201a      	movs	r0, #26
 8004a0c:	f002 f935 	bl	8006c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004a10:	e038      	b.n	8004a84 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM3)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d133      	bne.n	8004a84 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004a26:	f043 0302 	orr.w	r3, r3, #2
 8004a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2c:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	6313      	str	r3, [r2, #48]	; 0x30
 8004a48:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8004a54:	2330      	movs	r3, #48	; 0x30
 8004a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a64:	2302      	movs	r3, #2
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a68:	f107 031c 	add.w	r3, r7, #28
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	480b      	ldr	r0, [pc, #44]	; (8004a9c <HAL_TIM_Encoder_MspInit+0x128>)
 8004a70:	f002 ffd6 	bl	8007a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004a74:	2200      	movs	r2, #0
 8004a76:	2101      	movs	r1, #1
 8004a78:	201d      	movs	r0, #29
 8004a7a:	f002 f8e2 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a7e:	201d      	movs	r0, #29
 8004a80:	f002 f8fb 	bl	8006c7a <HAL_NVIC_EnableIRQ>
}
 8004a84:	bf00      	nop
 8004a86:	3730      	adds	r7, #48	; 0x30
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40020400 	.word	0x40020400

08004aa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <HAL_TIM_PWM_MspInit+0x48>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d115      	bne.n	8004ade <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <HAL_TIM_PWM_MspInit+0x4c>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <HAL_TIM_PWM_MspInit+0x4c>)
 8004abc:	f043 0304 	orr.w	r3, r3, #4
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <HAL_TIM_PWM_MspInit+0x4c>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	201e      	movs	r0, #30
 8004ad4:	f002 f8b5 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ad8:	201e      	movs	r0, #30
 8004ada:	f002 f8ce 	bl	8006c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40023800 	.word	0x40023800

08004af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a42      	ldr	r2, [pc, #264]	; (8004c08 <HAL_TIM_Base_MspInit+0x118>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d116      	bne.n	8004b30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a40      	ldr	r2, [pc, #256]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b0c:	f043 0310 	orr.w	r3, r3, #16
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2101      	movs	r1, #1
 8004b22:	2036      	movs	r0, #54	; 0x36
 8004b24:	f002 f88d 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b28:	2036      	movs	r0, #54	; 0x36
 8004b2a:	f002 f8a6 	bl	8006c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004b2e:	e066      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a36      	ldr	r2, [pc, #216]	; (8004c10 <HAL_TIM_Base_MspInit+0x120>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d116      	bne.n	8004b68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	4a32      	ldr	r2, [pc, #200]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b44:	f043 0320 	orr.w	r3, r3, #32
 8004b48:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004b56:	2200      	movs	r2, #0
 8004b58:	2101      	movs	r1, #1
 8004b5a:	2037      	movs	r0, #55	; 0x37
 8004b5c:	f002 f871 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004b60:	2037      	movs	r0, #55	; 0x37
 8004b62:	f002 f88a 	bl	8006c7a <HAL_NVIC_EnableIRQ>
}
 8004b66:	e04a      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a29      	ldr	r2, [pc, #164]	; (8004c14 <HAL_TIM_Base_MspInit+0x124>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d116      	bne.n	8004ba0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b80:	6453      	str	r3, [r2, #68]	; 0x44
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2101      	movs	r1, #1
 8004b92:	2019      	movs	r0, #25
 8004b94:	f002 f855 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b98:	2019      	movs	r0, #25
 8004b9a:	f002 f86e 	bl	8006c7a <HAL_NVIC_EnableIRQ>
}
 8004b9e:	e02e      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_TIM_Base_MspInit+0x128>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d116      	bne.n	8004bd8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	4a16      	ldr	r2, [pc, #88]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2101      	movs	r1, #1
 8004bca:	201a      	movs	r0, #26
 8004bcc:	f002 f839 	bl	8006c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004bd0:	201a      	movs	r0, #26
 8004bd2:	f002 f852 	bl	8006c7a <HAL_NVIC_EnableIRQ>
}
 8004bd6:	e012      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0f      	ldr	r2, [pc, #60]	; (8004c1c <HAL_TIM_Base_MspInit+0x12c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10d      	bne.n	8004bfe <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_TIM_Base_MspInit+0x11c>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	bf00      	nop
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40001000 	.word	0x40001000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40001400 	.word	0x40001400
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800
 8004c1c:	40002000 	.word	0x40002000

08004c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <HAL_TIM_MspPostInit+0x68>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d11d      	bne.n	8004c7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_TIM_MspPostInit+0x6c>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <HAL_TIM_MspPostInit+0x6c>)
 8004c4c:	f043 0302 	orr.w	r3, r3, #2
 8004c50:	6313      	str	r3, [r2, #48]	; 0x30
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_TIM_MspPostInit+0x6c>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8004c5e:	23c0      	movs	r3, #192	; 0xc0
 8004c60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c72:	f107 030c 	add.w	r3, r7, #12
 8004c76:	4619      	mov	r1, r3
 8004c78:	4805      	ldr	r0, [pc, #20]	; (8004c90 <HAL_TIM_MspPostInit+0x70>)
 8004c7a:	f002 fed1 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004c7e:	bf00      	nop
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40020400 	.word	0x40020400

08004c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_UART_MspInit+0x84>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d12b      	bne.n	8004d0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <HAL_UART_MspInit+0x88>)
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <HAL_UART_MspInit+0x88>)
 8004cc0:	f043 0320 	orr.w	r3, r3, #32
 8004cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cc6:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_UART_MspInit+0x88>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <HAL_UART_MspInit+0x88>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <HAL_UART_MspInit+0x88>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <HAL_UART_MspInit+0x88>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cee:	23c0      	movs	r3, #192	; 0xc0
 8004cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004cfe:	2308      	movs	r3, #8
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d02:	f107 0314 	add.w	r3, r7, #20
 8004d06:	4619      	mov	r1, r3
 8004d08:	4805      	ldr	r0, [pc, #20]	; (8004d20 <HAL_UART_MspInit+0x8c>)
 8004d0a:	f002 fe89 	bl	8007a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004d0e:	bf00      	nop
 8004d10:	3728      	adds	r7, #40	; 0x28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40011400 	.word	0x40011400
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40020800 	.word	0x40020800

08004d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d28:	e7fe      	b.n	8004d28 <NMI_Handler+0x4>

08004d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d2e:	e7fe      	b.n	8004d2e <HardFault_Handler+0x4>

08004d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d34:	e7fe      	b.n	8004d34 <MemManage_Handler+0x4>

08004d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d36:	b480      	push	{r7}
 8004d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d3a:	e7fe      	b.n	8004d3a <BusFault_Handler+0x4>

08004d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d40:	e7fe      	b.n	8004d40 <UsageFault_Handler+0x4>

08004d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d42:	b480      	push	{r7}
 8004d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d70:	f001 f9e6 	bl	8006140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d7c:	4803      	ldr	r0, [pc, #12]	; (8004d8c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004d7e:	f004 ffe0 	bl	8009d42 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004d82:	4803      	ldr	r0, [pc, #12]	; (8004d90 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004d84:	f004 ffdd 	bl	8009d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000558 	.word	0x20000558
 8004d90:	200006c0 	.word	0x200006c0

08004d94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d98:	4803      	ldr	r0, [pc, #12]	; (8004da8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004d9a:	f004 ffd2 	bl	8009d42 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004d9e:	4803      	ldr	r0, [pc, #12]	; (8004dac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004da0:	f004 ffcf 	bl	8009d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000558 	.word	0x20000558
 8004dac:	20000708 	.word	0x20000708

08004db0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004db4:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <TIM3_IRQHandler+0x10>)
 8004db6:	f004 ffc4 	bl	8009d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200005a0 	.word	0x200005a0

08004dc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004dc8:	4802      	ldr	r0, [pc, #8]	; (8004dd4 <TIM4_IRQHandler+0x10>)
 8004dca:	f004 ffba 	bl	8009d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200005e8 	.word	0x200005e8

08004dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ddc:	4802      	ldr	r0, [pc, #8]	; (8004de8 <TIM6_DAC_IRQHandler+0x10>)
 8004dde:	f004 ffb0 	bl	8009d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000630 	.word	0x20000630

08004dec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <TIM7_IRQHandler+0x10>)
 8004df2:	f004 ffa6 	bl	8009d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000678 	.word	0x20000678

08004e00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <DMA2_Stream0_IRQHandler+0x10>)
 8004e06:	f002 f8c9 	bl	8006f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000044c 	.word	0x2000044c

08004e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
	return 1;
 8004e18:	2301      	movs	r3, #1
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <_kill>:

int _kill(int pid, int sig)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e2e:	f006 f843 	bl	800aeb8 <__errno>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2216      	movs	r2, #22
 8004e36:	601a      	str	r2, [r3, #0]
	return -1;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_exit>:

void _exit (int status)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff ffe7 	bl	8004e24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e56:	e7fe      	b.n	8004e56 <_exit+0x12>

08004e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e00a      	b.n	8004e80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e6a:	f3af 8000 	nop.w
 8004e6e:	4601      	mov	r1, r0
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	60ba      	str	r2, [r7, #8]
 8004e76:	b2ca      	uxtb	r2, r1
 8004e78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	dbf0      	blt.n	8004e6a <_read+0x12>
	}

return len;
 8004e88:	687b      	ldr	r3, [r7, #4]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e009      	b.n	8004eb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	60ba      	str	r2, [r7, #8]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff f94f 	bl	8004150 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	dbf1      	blt.n	8004ea4 <_write+0x12>
	}
	return len;
 8004ec0:	687b      	ldr	r3, [r7, #4]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_close>:

int _close(int file)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8004ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <_isatty>:

int _isatty(int file)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
	return 1;
 8004f0a:	2301      	movs	r3, #1
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
	return 0;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <_sbrk+0x5c>)
 8004f3e:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <_sbrk+0x60>)
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f48:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <_sbrk+0x64>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f50:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <_sbrk+0x64>)
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <_sbrk+0x68>)
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <_sbrk+0x64>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d207      	bcs.n	8004f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f64:	f005 ffa8 	bl	800aeb8 <__errno>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	220c      	movs	r2, #12
 8004f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f72:	e009      	b.n	8004f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f74:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <_sbrk+0x64>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <_sbrk+0x64>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <_sbrk+0x64>)
 8004f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20020000 	.word	0x20020000
 8004f94:	00000400 	.word	0x00000400
 8004f98:	200121d0 	.word	0x200121d0
 8004f9c:	20012290 	.word	0x20012290

08004fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <SystemInit+0x28>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	4a07      	ldr	r2, [pc, #28]	; (8004fc8 <SystemInit+0x28>)
 8004fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <SystemInit+0x28>)
 8004fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fba:	609a      	str	r2, [r3, #8]
#endif
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <tim10_init>:
float tim10_samplingtime_s;
uint32_t __debug_tim10_count__, __debug_tim10_count_2__;

/* only use in main.c */
void tim10_init()
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
	tim10_samplingtime_s = TIM10_TIME_MS / (float) 1000;
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <tim10_init+0x44>)
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <tim10_init+0x48>)
 8004fd4:	601a      	str	r2, [r3, #0]
	samplingtime_ms = TIM10_TIME_MS;
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <tim10_init+0x4c>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
	length_init(samplingtime_ms);
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <tim10_init+0x4c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd ff94 	bl	8002f10 <length_init>
	section_length_init(samplingtime_ms);
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <tim10_init+0x4c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff f910 	bl	8004214 <section_length_init>
	course_init(samplingtime_ms);
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <tim10_init+0x4c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd f80a 	bl	8002014 <course_init>
	velotrace_init(1);
 8005000:	2001      	movs	r0, #1
 8005002:	f000 fd71 	bl	8005ae8 <velotrace_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8005006:	4805      	ldr	r0, [pc, #20]	; (800501c <tim10_init+0x50>)
 8005008:	f004 fb1a 	bl	8009640 <HAL_TIM_Base_Stop_IT>
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
 8005010:	200121e0 	.word	0x200121e0
 8005014:	3a83126f 	.word	0x3a83126f
 8005018:	200121dc 	.word	0x200121dc
 800501c:	200006c0 	.word	0x200006c0

08005020 <tim10_start>:

void tim10_start()
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
	tim10_left = 0;
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <tim10_start+0x48>)
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
	tim10_right = 0;
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <tim10_start+0x4c>)
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
	__debug_tim10_count__ = 0;
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <tim10_start+0x50>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
	__debug_tim10_count_2__ = 0;
 800503a:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <tim10_start+0x54>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
	course_start();
 8005040:	f7fc fffc 	bl	800203c <course_start>
	length_start();
 8005044:	f7fd ff78 	bl	8002f38 <length_start>
	section_length_start();
 8005048:	f7ff f8f1 	bl	800422e <section_length_start>
	velotrace_start();
 800504c:	f000 fd62 	bl	8005b14 <velotrace_start>
	slow_start(velotrace_read_values());
 8005050:	f000 ff0a 	bl	8005e68 <velotrace_read_values>
 8005054:	4603      	mov	r3, r0
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff faca 	bl	80045f0 <slow_start>
	HAL_TIM_Base_Start_IT(&htim10);
 800505c:	4806      	ldr	r0, [pc, #24]	; (8005078 <tim10_start+0x58>)
 800505e:	f004 fa7f 	bl	8009560 <HAL_TIM_Base_Start_IT>
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	200121d4 	.word	0x200121d4
 800506c:	200121d8 	.word	0x200121d8
 8005070:	200121e4 	.word	0x200121e4
 8005074:	200121e8 	.word	0x200121e8
 8005078:	200006c0 	.word	0x200006c0

0800507c <tim10_stop>:

void tim10_stop()
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8005080:	4806      	ldr	r0, [pc, #24]	; (800509c <tim10_stop+0x20>)
 8005082:	f004 fadd 	bl	8009640 <HAL_TIM_Base_Stop_IT>
	velotrace_stop();
 8005086:	f000 fde3 	bl	8005c50 <velotrace_stop>
	section_length_stop();
 800508a:	f7ff f8da 	bl	8004242 <section_length_stop>
	length_stop();
 800508e:	f7fd ff65 	bl	8002f5c <length_stop>
	course_stop();
 8005092:	f7fc fffd 	bl	8002090 <course_stop>
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	200006c0 	.word	0x200006c0

080050a0 <tim10_main>:
	section_length_fin();
	HAL_TIM_Base_Stop_IT(&htim10);
}

void tim10_main()
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
	PlayMode rrpm;
	//! 角度をアップデートし続ける
	course_update_section_degree();
 80050a6:	f7fd f807 	bl	80020b8 <course_update_section_degree>
	//! 長さをアップデートし続ける
	length_update();
 80050aa:	f7fd ffe3 	bl	8003074 <length_update>
	//! 区間長をアップデートし続ける
	section_length_update();
 80050ae:	f7ff f94f 	bl	8004350 <section_length_update>
	//! 速度制御の指令値をアップデートし続ける
	tim10_update_values();
 80050b2:	f000 f81b 	bl	80050ec <tim10_update_values>
	rrpm = rotary_read_playmode();
 80050b6:	f7fc fa6f 	bl	8001598 <rotary_read_playmode>
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
	__debug_tim10_count_2__ = __debug_tim10_count_2__ + 1;
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <tim10_main+0x48>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <tim10_main+0x48>)
 80050c6:	6013      	str	r3, [r2, #0]
			course_state_function();
			__debug_tim10_count__ = __debug_tim10_count__ + 1;
		}
	}
#endif
	if(rotary_read_playmode() == velotrace_tuning_2)
 80050c8:	f7fc fa66 	bl	8001598 <rotary_read_playmode>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	d106      	bne.n	80050e0 <tim10_main+0x40>
	{
		if(virtual_marker_read_markerstate() == straight)
 80050d2:	f000 ff99 	bl	8006008 <virtual_marker_read_markerstate>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <tim10_main+0x40>
		{
			velotrace_gain_tuning();
 80050dc:	f000 ff44 	bl	8005f68 <velotrace_gain_tuning>
		}
	}
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200121e8 	.word	0x200121e8

080050ec <tim10_update_values>:

//! tim10_main でのみ呼び出されるべき関数
//! 速度制御の指令値を更新する
void tim10_update_values()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
	{
		slow_main();
	}
#endif

	tim10_left  = velotrace_solve(velocity_read());
 80050f0:	f7fd ff8a 	bl	8003008 <velocity_read>
 80050f4:	eef0 7a40 	vmov.f32	s15, s0
 80050f8:	eeb0 0a67 	vmov.f32	s0, s15
 80050fc:	f000 febe 	bl	8005e7c <velotrace_solve>
 8005100:	eef0 7a40 	vmov.f32	s15, s0
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <tim10_update_values+0x2c>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
	tim10_right = tim10_left;
 800510a:	4b03      	ldr	r3, [pc, #12]	; (8005118 <tim10_update_values+0x2c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a03      	ldr	r2, [pc, #12]	; (800511c <tim10_update_values+0x30>)
 8005110:	6013      	str	r3, [r2, #0]
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	200121d4 	.word	0x200121d4
 800511c:	200121d8 	.word	0x200121d8

08005120 <tim10_read_left>:

float tim10_read_left()
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
	return tim10_left;
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <tim10_read_left+0x18>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	ee07 3a90 	vmov	s15, r3
}
 800512c:	eeb0 0a67 	vmov.f32	s0, s15
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	200121d4 	.word	0x200121d4

0800513c <tim10_read_right>:

float tim10_read_right()
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
	return tim10_right;
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <tim10_read_right+0x18>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	ee07 3a90 	vmov	s15, r3
}
 8005148:	eeb0 0a67 	vmov.f32	s0, s15
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	200121d8 	.word	0x200121d8

08005158 <tim10_d_print>:

void tim10_d_print()
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
#if D_TIM10
	// printf("tim10_left = %f, tim10_right = %f\r\n", tim10_left, tim10_right);
	printf("__debug_tim10_count  __ = %16ld\r\n__debug_tim10_count_2__ = %16ld\r\n", __debug_tim10_count__, __debug_tim10_count_2__);
#endif
	length_d_print();
 800515c:	f7fd ffd8 	bl	8003110 <length_d_print>
	course_d_print();
 8005160:	f7fd f8f6 	bl	8002350 <course_d_print>
	velotrace_print_values();
 8005164:	f000 fef8 	bl	8005f58 <velotrace_print_values>
	section_length_d_print();
 8005168:	f7ff f916 	bl	8004398 <section_length_d_print>
	slow_print_default_pid();
 800516c:	f7ff fa8e 	bl	800468c <slow_print_default_pid>
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}

08005174 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
    switch_init();
 8005178:	f7fc fb0e 	bl	8001798 <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 800517c:	4803      	ldr	r0, [pc, #12]	; (800518c <tim11_init+0x18>)
 800517e:	f004 f9ef 	bl	8009560 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8005182:	f7fc f9f5 	bl	8001570 <rotary_init>
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000708 	.word	0x20000708

08005190 <tim11_main>:

void tim11_main()
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
    //! 1ms
    time_update_ms(1);
 8005194:	2001      	movs	r0, #1
 8005196:	f000 fa65 	bl	8005664 <time_update_ms>
    switch_enter();
 800519a:	f7fc fb4c 	bl	8001836 <switch_enter>
    rotary_set_value();
 800519e:	f7fc fa07 	bl	80015b0 <rotary_set_value>
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <tim6_init>:

SideSensorState tim6_markerstate_before;
uint8_t debug_num;

void tim6_init()
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
    motor_init();
 80051ac:	f7fe ff03 	bl	8003fb6 <motor_init>
    virtual_marker_init();
 80051b0:	f000 fefa 	bl	8005fa8 <virtual_marker_init>
    HAL_TIM_Base_Stop_IT(&htim6);
 80051b4:	4803      	ldr	r0, [pc, #12]	; (80051c4 <tim6_init+0x1c>)
 80051b6:	f004 fa43 	bl	8009640 <HAL_TIM_Base_Stop_IT>
    debug_num = 0;
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <tim6_init+0x20>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
}
 80051c0:	bf00      	nop
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000630 	.word	0x20000630
 80051c8:	200121ed 	.word	0x200121ed

080051cc <tim6_start>:

void tim6_start()
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
#if D_TIM6
    leftmotor = 0;
    rightmotor = 0;
#endif
    virtual_marker_start();
 80051d0:	f000 fef0 	bl	8005fb4 <virtual_marker_start>
    fixed_section_start();
 80051d4:	f7fd fd7e 	bl	8002cd4 <fixed_section_start>
    motor_start();
 80051d8:	f7fe fef4 	bl	8003fc4 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 80051dc:	4805      	ldr	r0, [pc, #20]	; (80051f4 <tim6_start+0x28>)
 80051de:	f004 f9bf 	bl	8009560 <HAL_TIM_Base_Start_IT>
    debug_num += 0b1;
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <tim6_start+0x2c>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <tim6_start+0x2c>)
 80051ec:	701a      	strb	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000630 	.word	0x20000630
 80051f8:	200121ed 	.word	0x200121ed

080051fc <tim6_stop>:

void tim6_stop()
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
    motor_stop();
 8005200:	f7fe fef2 	bl	8003fe8 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8005204:	4807      	ldr	r0, [pc, #28]	; (8005224 <tim6_stop+0x28>)
 8005206:	f004 fa1b 	bl	8009640 <HAL_TIM_Base_Stop_IT>
    course_stop();
 800520a:	f7fc ff41 	bl	8002090 <course_stop>
    virtual_marker_stop();
 800520e:	f000 fee1 	bl	8005fd4 <virtual_marker_stop>
    debug_num += 0b10;
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <tim6_stop+0x2c>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3302      	adds	r3, #2
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4b03      	ldr	r3, [pc, #12]	; (8005228 <tim6_stop+0x2c>)
 800521c:	701a      	strb	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000630 	.word	0x20000630
 8005228:	200121ed 	.word	0x200121ed

0800522c <tim6_main>:

void tim6_main()
{
 800522c:	b580      	push	{r7, lr}
 800522e:	ed2d 8b02 	vpush	{d8}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
    #endif
    SideSensorState markerstate;
    SideSensorState markerstate_volatile;
    PlayMode playmode;

    playmode = rotary_read_playmode();
 8005236:	f7fc f9af 	bl	8001598 <rotary_read_playmode>
 800523a:	4603      	mov	r3, r0
 800523c:	71fb      	strb	r3, [r7, #7]

    //! コース状態の把握
    //! ここ以降 virtual_marker_read_markerstate() / virtual_marker_read_markerstate_volatile() で読みだせる
    virtual_marker_main();
 800523e:	f000 fec1 	bl	8005fc4 <virtual_marker_main>
    //! 格納されるのは直前のマーカの状態であり、区間中はリセットされないことに注意すべし！
    markerstate = virtual_marker_read_markerstate();
 8005242:	f000 fee1 	bl	8006008 <virtual_marker_read_markerstate>
 8005246:	4603      	mov	r3, r0
 8005248:	71bb      	strb	r3, [r7, #6]
    //! 格納されるのは現在マーカを読んだか読んでないか、次に virtual_marker_main() が来た時に変化することに注意
    markerstate_volatile = virtual_marker_read_markerstate_volatile();
 800524a:	f000 fee9 	bl	8006020 <virtual_marker_read_markerstate_volatile>
 800524e:	4603      	mov	r3, r0
 8005250:	717b      	strb	r3, [r7, #5]

    debug_num = 0;
 8005252:	4b4f      	ldr	r3, [pc, #316]	; (8005390 <tim6_main+0x164>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
    debug_num += 0b100;
 8005258:	4b4d      	ldr	r3, [pc, #308]	; (8005390 <tim6_main+0x164>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	3304      	adds	r3, #4
 800525e:	b2da      	uxtb	r2, r3
 8005260:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <tim6_main+0x164>)
 8005262:	701a      	strb	r2, [r3, #0]
    if(motor_read_enable() && playmode != motor_free)
 8005264:	f7fe fee8 	bl	8004038 <motor_read_enable>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d05e      	beq.n	800532c <tim6_main+0x100>
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d05b      	beq.n	800532c <tim6_main+0x100>
    {
        #if !(TRACER_TUNING || VELOTRACE_TUNING)
        switch(playmode)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d002      	beq.n	8005280 <tim6_main+0x54>
 800527a:	2b06      	cmp	r3, #6
 800527c:	d01b      	beq.n	80052b6 <tim6_main+0x8a>
 800527e:	e035      	b.n	80052ec <tim6_main+0xc0>
        {
            case tracer_tuning:
                leftmotor   = 0 + tim7_read_left();
 8005280:	f000 f9ac 	bl	80055dc <tim7_read_left>
 8005284:	eef0 7a40 	vmov.f32	s15, s0
 8005288:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005394 <tim6_main+0x168>
 800528c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005290:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = 0 + tim7_read_right();
 8005294:	f000 f9b0 	bl	80055f8 <tim7_read_right>
 8005298:	eef0 7a40 	vmov.f32	s15, s0
 800529c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005394 <tim6_main+0x168>
 80052a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052a4:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b1000;
 80052a8:	4b39      	ldr	r3, [pc, #228]	; (8005390 <tim6_main+0x164>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	4b37      	ldr	r3, [pc, #220]	; (8005390 <tim6_main+0x164>)
 80052b2:	701a      	strb	r2, [r3, #0]
                break;
 80052b4:	e039      	b.n	800532a <tim6_main+0xfe>
            case velotrace_tuning:
                leftmotor   = tim10_read_left() + 0;
 80052b6:	f7ff ff33 	bl	8005120 <tim10_read_left>
 80052ba:	eef0 7a40 	vmov.f32	s15, s0
 80052be:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005394 <tim6_main+0x168>
 80052c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c6:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + 0;
 80052ca:	f7ff ff37 	bl	800513c <tim10_read_right>
 80052ce:	eef0 7a40 	vmov.f32	s15, s0
 80052d2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005394 <tim6_main+0x168>
 80052d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052da:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b10000;
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <tim6_main+0x164>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	3310      	adds	r3, #16
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <tim6_main+0x164>)
 80052e8:	701a      	strb	r2, [r3, #0]
                break;
 80052ea:	e01e      	b.n	800532a <tim6_main+0xfe>
            default:
                leftmotor   = tim10_read_left() + tim7_read_left();
 80052ec:	f7ff ff18 	bl	8005120 <tim10_read_left>
 80052f0:	eeb0 8a40 	vmov.f32	s16, s0
 80052f4:	f000 f972 	bl	80055dc <tim7_read_left>
 80052f8:	eef0 7a40 	vmov.f32	s15, s0
 80052fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005300:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + tim7_read_right();
 8005304:	f7ff ff1a 	bl	800513c <tim10_read_right>
 8005308:	eeb0 8a40 	vmov.f32	s16, s0
 800530c:	f000 f974 	bl	80055f8 <tim7_read_right>
 8005310:	eef0 7a40 	vmov.f32	s15, s0
 8005314:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005318:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b100000;
 800531c:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <tim6_main+0x164>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	3320      	adds	r3, #32
 8005322:	b2da      	uxtb	r2, r3
 8005324:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <tim6_main+0x164>)
 8005326:	701a      	strb	r2, [r3, #0]
                break;
 8005328:	bf00      	nop
        switch(playmode)
 800532a:	e00b      	b.n	8005344 <tim6_main+0x118>
        #endif
		#endif	/* !(TRACER_TUNING || VELOTRACE_TUNING) */
    }
    else
    {
        leftmotor = 0;
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
        rightmotor = 0;
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	60bb      	str	r3, [r7, #8]
        debug_num += 0b1000000;
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <tim6_main+0x164>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	3340      	adds	r3, #64	; 0x40
 800533e:	b2da      	uxtb	r2, r3
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <tim6_main+0x164>)
 8005342:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#else
    //! 距離が COURSE_SAMPLING_LENGTH になっていたら course_state_function() を実行する関数
    fixed_section_main();
 8005344:	f7fd fcd6 	bl	8002cf4 <fixed_section_main>
#endif

    switch(markerstate)
 8005348:	79bb      	ldrb	r3, [r7, #6]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d10a      	bne.n	8005364 <tim6_main+0x138>
    {
        case stop:
            switch_reset_enter();
 800534e:	f7fc fa17 	bl	8001780 <switch_reset_enter>
            tim6_stop();
 8005352:	f7ff ff53 	bl	80051fc <tim6_stop>
            motor_set(0, 0);
 8005356:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005394 <tim6_main+0x168>
 800535a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005394 <tim6_main+0x168>
 800535e:	f7fe fe77 	bl	8004050 <motor_set>
            break;
 8005362:	e00c      	b.n	800537e <tim6_main+0x152>
        default:
            debug_num += 0b10000000;
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <tim6_main+0x164>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	3b80      	subs	r3, #128	; 0x80
 800536a:	b2da      	uxtb	r2, r3
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <tim6_main+0x164>)
 800536e:	701a      	strb	r2, [r3, #0]
            motor_set(leftmotor, rightmotor);
 8005370:	edd7 0a02 	vldr	s1, [r7, #8]
 8005374:	ed97 0a03 	vldr	s0, [r7, #12]
 8005378:	f7fe fe6a 	bl	8004050 <motor_set>
            break;
 800537c:	bf00      	nop
    }

    tim6_markerstate_before = markerstate;
 800537e:	4a06      	ldr	r2, [pc, #24]	; (8005398 <tim6_main+0x16c>)
 8005380:	79bb      	ldrb	r3, [r7, #6]
 8005382:	7013      	strb	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	ecbd 8b02 	vpop	{d8}
 800538e:	bd80      	pop	{r7, pc}
 8005390:	200121ed 	.word	0x200121ed
 8005394:	00000000 	.word	0x00000000
 8005398:	200121ec 	.word	0x200121ec

0800539c <tim6_d_print>:

void tim6_d_print()
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
    printf("tim6.c > debug_num = ");
    print_bin(debug_num);
    printf("\r\n");
    printf("tim6.c > tim6_d_print() > motor_enable = %1d, leftmotor = %5.3f, rightmotor = %5.3f\r\n", motor_read_enable(), leftmotor, rightmotor); 
    #endif
    virtual_marker_d_print();
 80053a0:	f000 fe4a 	bl	8006038 <virtual_marker_d_print>
}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
    #endif
    analog_init();
 80053ac:	f7fc fcd6 	bl	8001d5c <analog_init>
    tracer_init(TIM7_TIME_MS);
 80053b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053b4:	f000 f99a 	bl	80056ec <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 80053b8:	4802      	ldr	r0, [pc, #8]	; (80053c4 <tim7_init+0x1c>)
 80053ba:	f004 f941 	bl	8009640 <HAL_TIM_Base_Stop_IT>
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000678 	.word	0x20000678

080053c8 <tim7_start>:

void tim7_start()
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
    #endif
    tim7_set_emergency(0);
 80053cc:	2000      	movs	r0, #0
 80053ce:	f000 f8f5 	bl	80055bc <tim7_set_emergency>
    tim7_left = 0;
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <tim7_start+0x3c>)
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
    tim7_right = 0;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <tim7_start+0x40>)
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 80053e2:	490a      	ldr	r1, [pc, #40]	; (800540c <tim7_start+0x44>)
 80053e4:	480a      	ldr	r0, [pc, #40]	; (8005410 <tim7_start+0x48>)
 80053e6:	f7fc fbf5 	bl	8001bd4 <analog_set_from_flash>
    analog_set_analogmode(analogmode_short);
 80053ea:	200c      	movs	r0, #12
 80053ec:	f7fc fc5a 	bl	8001ca4 <analog_set_analogmode>

    analog_start();
 80053f0:	f7fc fcc6 	bl	8001d80 <analog_start>
    tracer_start();
 80053f4:	f000 f996 	bl	8005724 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 80053f8:	4806      	ldr	r0, [pc, #24]	; (8005414 <tim7_start+0x4c>)
 80053fa:	f004 f8b1 	bl	8009560 <HAL_TIM_Base_Start_IT>
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200121f0 	.word	0x200121f0
 8005408:	200121f4 	.word	0x200121f4
 800540c:	2000080a 	.word	0x2000080a
 8005410:	200007ea 	.word	0x200007ea
 8005414:	20000678 	.word	0x20000678

08005418 <tim7_stop>:

void tim7_stop()
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 800541c:	4804      	ldr	r0, [pc, #16]	; (8005430 <tim7_stop+0x18>)
 800541e:	f004 f90f 	bl	8009640 <HAL_TIM_Base_Stop_IT>
    tracer_stop();
 8005422:	f000 f9c7 	bl	80057b4 <tracer_stop>
    analog_stop();
 8005426:	f7fc fcb7 	bl	8001d98 <analog_stop>
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000678 	.word	0x20000678

08005434 <tim7_main>:

void tim7_main()
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 800543a:	f000 f819 	bl	8005470 <tim7_read_direction>
 800543e:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("direction = %5d\r\n", direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fad1 	bl	80059e8 <tracer_solve>
 8005446:	eef0 7a40 	vmov.f32	s15, s0
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <tim7_main+0x34>)
 800544c:	edc3 7a00 	vstr	s15, [r3]
    tim7_right  = - tim7_left;
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <tim7_main+0x34>)
 8005452:	edd3 7a00 	vldr	s15, [r3]
 8005456:	eef1 7a67 	vneg.f32	s15, s15
 800545a:	4b04      	ldr	r3, [pc, #16]	; (800546c <tim7_main+0x38>)
 800545c:	edc3 7a00 	vstr	s15, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	200121f0 	.word	0x200121f0
 800546c:	200121f4 	.word	0x200121f4

08005470 <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
    uint16_t short_middle;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	81fb      	strh	r3, [r7, #14]
    analogr = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	81bb      	strh	r3, [r7, #12]

    switch(analog_read_analogmode())
 800547e:	f7fc fc21 	bl	8001cc4 <analog_read_analogmode>
 8005482:	4603      	mov	r3, r0
 8005484:	2b10      	cmp	r3, #16
 8005486:	d834      	bhi.n	80054f2 <tim7_read_direction+0x82>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <tim7_read_direction+0x20>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054f3 	.word	0x080054f3
 8005494:	080054f3 	.word	0x080054f3
 8005498:	080054f3 	.word	0x080054f3
 800549c:	080054f3 	.word	0x080054f3
 80054a0:	080054df 	.word	0x080054df
 80054a4:	080054f3 	.word	0x080054f3
 80054a8:	080054f3 	.word	0x080054f3
 80054ac:	080054f3 	.word	0x080054f3
 80054b0:	080054f3 	.word	0x080054f3
 80054b4:	080054f3 	.word	0x080054f3
 80054b8:	080054f3 	.word	0x080054f3
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	080054d5 	.word	0x080054d5
 80054c4:	080054f3 	.word	0x080054f3
 80054c8:	080054f3 	.word	0x080054f3
 80054cc:	080054f3 	.word	0x080054f3
 80054d0:	080054e9 	.word	0x080054e9
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 80054d4:	230c      	movs	r3, #12
 80054d6:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	723b      	strb	r3, [r7, #8]
            break;
 80054dc:	e00a      	b.n	80054f4 <tim7_read_direction+0x84>
        case analogmode_long:
            i_count = 4;
 80054de:	2304      	movs	r3, #4
 80054e0:	727b      	strb	r3, [r7, #9]
            i_start = 12;
 80054e2:	230c      	movs	r3, #12
 80054e4:	723b      	strb	r3, [r7, #8]
            break;
 80054e6:	e005      	b.n	80054f4 <tim7_read_direction+0x84>
        case analogmode_all:
            i_count = 16;
 80054e8:	2310      	movs	r3, #16
 80054ea:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	723b      	strb	r3, [r7, #8]
            break;
 80054f0:	e000      	b.n	80054f4 <tim7_read_direction+0x84>
        default:
            /* unknown analogmode ... x_x */
            break;
 80054f2:	bf00      	nop
    }

    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 80054f4:	7a3b      	ldrb	r3, [r7, #8]
 80054f6:	71fb      	strb	r3, [r7, #7]
 80054f8:	e022      	b.n	8005540 <tim7_read_direction+0xd0>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <tim7_read_direction+0xaa>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	4618      	mov	r0, r3
 800550a:	f7fc fc71 	bl	8001df0 <analog_sensor_get>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	89fb      	ldrh	r3, [r7, #14]
 8005514:	4413      	add	r3, r2
 8005516:	81fb      	strh	r3, [r7, #14]
 8005518:	e008      	b.n	800552c <tim7_read_direction+0xbc>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fc fc67 	bl	8001df0 <analog_sensor_get>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	89bb      	ldrh	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	81bb      	strh	r3, [r7, #12]
        }
        if(i < SHORT_MIDDLE_SENSOR)
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	2b05      	cmp	r3, #5
 8005530:	d803      	bhi.n	800553a <tim7_read_direction+0xca>
        {
            short_middle = analogl + analogr;
 8005532:	89fa      	ldrh	r2, [r7, #14]
 8005534:	89bb      	ldrh	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	817b      	strh	r3, [r7, #10]
    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	3301      	adds	r3, #1
 800553e:	71fb      	strb	r3, [r7, #7]
 8005540:	79fa      	ldrb	r2, [r7, #7]
 8005542:	7a79      	ldrb	r1, [r7, #9]
 8005544:	7a3b      	ldrb	r3, [r7, #8]
 8005546:	440b      	add	r3, r1
 8005548:	429a      	cmp	r2, r3
 800554a:	dbd6      	blt.n	80054fa <tim7_read_direction+0x8a>
    {
    	// tim7_main_emergency();
    }

    //if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR && virtual_marker_read_markerstate() == cross)
    if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR)
 800554c:	897b      	ldrh	r3, [r7, #10]
 800554e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005552:	4293      	cmp	r3, r2
 8005554:	d824      	bhi.n	80055a0 <tim7_read_direction+0x130>
    {
        /* 交差判定 */
        analogl = 3 * (analog_sensor_get(12) + analog_sensor_get(14));
 8005556:	200c      	movs	r0, #12
 8005558:	f7fc fc4a 	bl	8001df0 <analog_sensor_get>
 800555c:	4603      	mov	r3, r0
 800555e:	461c      	mov	r4, r3
 8005560:	200e      	movs	r0, #14
 8005562:	f7fc fc45 	bl	8001df0 <analog_sensor_get>
 8005566:	4603      	mov	r3, r0
 8005568:	4423      	add	r3, r4
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	0052      	lsls	r2, r2, #1
 8005570:	4413      	add	r3, r2
 8005572:	81fb      	strh	r3, [r7, #14]
        analogr = 3 * (analog_sensor_get(13) + analog_sensor_get(15));
 8005574:	200d      	movs	r0, #13
 8005576:	f7fc fc3b 	bl	8001df0 <analog_sensor_get>
 800557a:	4603      	mov	r3, r0
 800557c:	461c      	mov	r4, r3
 800557e:	200f      	movs	r0, #15
 8005580:	f7fc fc36 	bl	8001df0 <analog_sensor_get>
 8005584:	4603      	mov	r3, r0
 8005586:	4423      	add	r3, r4
 8005588:	b29b      	uxth	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	0052      	lsls	r2, r2, #1
 800558e:	4413      	add	r3, r2
 8005590:	81bb      	strh	r3, [r7, #12]
        /* 長い方のゲイン値にする */
        tim7_tracer_set_gain_long();
 8005592:	f000 f84d 	bl	8005630 <tim7_tracer_set_gain_long>
        led_write_led(0b11, 0b10);
 8005596:	2102      	movs	r1, #2
 8005598:	2003      	movs	r0, #3
 800559a:	f7fb ffc3 	bl	8001524 <led_write_led>
 800559e:	e005      	b.n	80055ac <tim7_read_direction+0x13c>
    }
    else
    {
        /* その他判定 */
        /* 短い方のゲイン値にする（戻すって言った方が正しいかも） */
        tim7_tracer_set_gain_short();
 80055a0:	f000 f840 	bl	8005624 <tim7_tracer_set_gain_short>
        led_write_led(0b11, 0b01);
 80055a4:	2101      	movs	r1, #1
 80055a6:	2003      	movs	r0, #3
 80055a8:	f7fb ffbc 	bl	8001524 <led_write_led>
#if D_TIM7_WHILE
	printf("tim7.c > tim7_main() > ");
	printf("analogl = %5d, analogr = %5d\r\n", analogl, analogr);
#endif

    return analogl - analogr;
 80055ac:	89fa      	ldrh	r2, [r7, #14]
 80055ae:	89bb      	ldrh	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd90      	pop	{r4, r7, pc}
 80055ba:	bf00      	nop

080055bc <tim7_set_emergency>:
{
	switch_reset_enter();
}

void tim7_set_emergency(char emergency_)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 80055c6:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <tim7_set_emergency+0x1c>)
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	7013      	strb	r3, [r2, #0]
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	200121f8 	.word	0x200121f8

080055dc <tim7_read_left>:
{
    return tim7_emergency;
}

float tim7_read_left()
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 80055e0:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <tim7_read_left+0x18>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	ee07 3a90 	vmov	s15, r3
}
 80055e8:	eeb0 0a67 	vmov.f32	s0, s15
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	200121f0 	.word	0x200121f0

080055f8 <tim7_read_right>:

float tim7_read_right()
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <tim7_read_right+0x18>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	ee07 3a90 	vmov	s15, r3
}
 8005604:	eeb0 0a67 	vmov.f32	s0, s15
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	200121f4 	.word	0x200121f4

08005614 <tim7_d_print>:

void tim7_d_print()
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
#if D_TIM7
    printf("tim7_left = %f, tim7_right = %f\r\n", tim7_left, tim7_right);
#endif
    analog_d_print();
 8005618:	f7fc fa36 	bl	8001a88 <analog_d_print>
    tracer_print_values();
 800561c:	f000 fa5c 	bl	8005ad8 <tracer_print_values>
}
 8005620:	bf00      	nop
 8005622:	bd80      	pop	{r7, pc}

08005624 <tim7_tracer_set_gain_short>:

void tim7_tracer_set_gain_short()
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
    tracer_set_gain_default();
 8005628:	f000 f9a6 	bl	8005978 <tracer_set_gain_default>
}
 800562c:	bf00      	nop
 800562e:	bd80      	pop	{r7, pc}

08005630 <tim7_tracer_set_gain_long>:

void tim7_tracer_set_gain_long()
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
    float kp, ki, kd;
    kp = TIM7_LONG_KP;
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <tim7_tracer_set_gain_long+0x2c>)
 8005638:	60fb      	str	r3, [r7, #12]
    ki = TIM7_LONG_KI;
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	60bb      	str	r3, [r7, #8]
    kd = TIM7_LONG_KD;
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <tim7_tracer_set_gain_long+0x30>)
 8005642:	607b      	str	r3, [r7, #4]
    tracer_set_gain_direct(kp, ki, kd);
 8005644:	ed97 1a01 	vldr	s2, [r7, #4]
 8005648:	edd7 0a02 	vldr	s1, [r7, #8]
 800564c:	ed97 0a03 	vldr	s0, [r7, #12]
 8005650:	f000 f8ec 	bl	800582c <tracer_set_gain_direct>
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	3e4ccccd 	.word	0x3e4ccccd
 8005660:	3b9374bc 	.word	0x3b9374bc

08005664 <time_update_ms>:
 * @fn time_update_ms()
 * @brief 1 ms 周期で呼び出される割り込み内で実行する必要がある
 * 
 */
void time_update_ms(unsigned short int step)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	80fb      	strh	r3, [r7, #6]
    /**
     * @brief time_ms が 1 時間（ 3600,000 ミリ秒 ）を超えた時にゼロに戻す
     * 
     */
    time_countup(&time_ms, step, 6300000);
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	4a08      	ldr	r2, [pc, #32]	; (8005694 <time_update_ms+0x30>)
 8005672:	4619      	mov	r1, r3
 8005674:	4808      	ldr	r0, [pc, #32]	; (8005698 <time_update_ms+0x34>)
 8005676:	f000 f813 	bl	80056a0 <time_countup>
    time_origin = time_ms * 1000;
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <time_update_ms+0x34>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	4a05      	ldr	r2, [pc, #20]	; (800569c <time_update_ms+0x38>)
 8005688:	6013      	str	r3, [r2, #0]
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	00602160 	.word	0x00602160
 8005698:	200121fc 	.word	0x200121fc
 800569c:	20012200 	.word	0x20012200

080056a0 <time_countup>:
    time_ms = 0;
    time_origin = 0;
}

void time_countup(unsigned int *_time, unsigned short int step, unsigned int _time_max)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	460b      	mov	r3, r1
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	817b      	strh	r3, [r7, #10]
    if(*_time + step >= _time_max)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	897b      	ldrh	r3, [r7, #10]
 80056b4:	4413      	add	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d809      	bhi.n	80056d0 <time_countup+0x30>
    {
        *_time = 0;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
        time_reset_count = time_reset_count + 1;
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <time_countup+0x48>)
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	3301      	adds	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <time_countup+0x48>)
 80056cc:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        *_time = *_time + step;
    }
}
 80056ce:	e005      	b.n	80056dc <time_countup+0x3c>
        *_time = *_time + step;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	897b      	ldrh	r3, [r7, #10]
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20012204 	.word	0x20012204

080056ec <tracer_init>:
PID tracer_pid;
PID tracer_default;
uint8_t tracer_started;

void tracer_init(float samplingtime_ms)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_started = 0;
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <tracer_init+0x30>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
    tracer_sampling_time_ms = samplingtime_ms;
 80056fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005704:	ee17 3a90 	vmov	r3, s15
 8005708:	b29a      	uxth	r2, r3
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <tracer_init+0x34>)
 800570c:	801a      	strh	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20012234 	.word	0x20012234
 8005720:	20012210 	.word	0x20012210

08005724 <tracer_start>:

void tracer_start()
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
    if(tracer_started <= 0)
 800572a:	4b1f      	ldr	r3, [pc, #124]	; (80057a8 <tracer_start+0x84>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d133      	bne.n	800579a <tracer_start+0x76>
    {
        float kp, ki, kd;
        tracer_s_error = 0;
 8005732:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <tracer_start+0x88>)
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
        tracer_before_error = 0;
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <tracer_start+0x8c>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
        kp = tracer_calc_gain_kp(rotary_read_value());
 8005740:	f7fb ff42 	bl	80015c8 <rotary_read_value>
 8005744:	4603      	mov	r3, r0
 8005746:	b29b      	uxth	r3, r3
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f8ad 	bl	80058a8 <tracer_calc_gain_kp>
 800574e:	ed87 0a03 	vstr	s0, [r7, #12]
        ki = tracer_calc_gain_ki(rotary_read_value());
 8005752:	f7fb ff39 	bl	80015c8 <rotary_read_value>
 8005756:	4603      	mov	r3, r0
 8005758:	b29b      	uxth	r3, r3
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f8c6 	bl	80058ec <tracer_calc_gain_ki>
 8005760:	ed87 0a02 	vstr	s0, [r7, #8]
        kd = tracer_calc_gain_kd(rotary_read_value());
 8005764:	f7fb ff30 	bl	80015c8 <rotary_read_value>
 8005768:	4603      	mov	r3, r0
 800576a:	b29b      	uxth	r3, r3
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f8df 	bl	8005930 <tracer_calc_gain_kd>
 8005772:	ed87 0a01 	vstr	s0, [r7, #4]
        tracer_set_default_now_gain(kp, ki, kd);
 8005776:	ed97 1a01 	vldr	s2, [r7, #4]
 800577a:	edd7 0a02 	vldr	s1, [r7, #8]
 800577e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005782:	f000 f909 	bl	8005998 <tracer_set_default_now_gain>
        tracer_set_target_zero();
 8005786:	f000 f86b 	bl	8005860 <tracer_set_target_zero>
        tracer_set_gain_direct(kp, ki, kd);
 800578a:	ed97 1a01 	vldr	s2, [r7, #4]
 800578e:	edd7 0a02 	vldr	s1, [r7, #8]
 8005792:	ed97 0a03 	vldr	s0, [r7, #12]
 8005796:	f000 f849 	bl	800582c <tracer_set_gain_direct>
    #if D_TRACER
        printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", kp, ki, kd);
        print_pid(&tracer_pid);
    #endif
    }
    tracer_started = 1;
 800579a:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <tracer_start+0x84>)
 800579c:	2201      	movs	r2, #1
 800579e:	701a      	strb	r2, [r3, #0]
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20012234 	.word	0x20012234
 80057ac:	20012208 	.word	0x20012208
 80057b0:	2001220c 	.word	0x2001220c

080057b4 <tracer_stop>:

void tracer_stop()
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
    tracer_set_gain_zero();
 80057b8:	f000 f860 	bl	800587c <tracer_set_gain_zero>
    tracer_started = 0;
 80057bc:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <tracer_stop+0x14>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
}
 80057c2:	bf00      	nop
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20012234 	.word	0x20012234

080057cc <tracer_set_gain_kp_direct>:
{
    tracer_set_gain_kd_direct(tracer_calc_gain_kd(i));
}

void tracer_set_gain_kp_direct(float kp)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kp = kp;
 80057d6:	4a04      	ldr	r2, [pc, #16]	; (80057e8 <tracer_set_gain_kp_direct+0x1c>)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6053      	str	r3, [r2, #4]
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20012214 	.word	0x20012214

080057ec <tracer_set_gain_ki_direct>:

void tracer_set_gain_ki_direct(float ki)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.ki = ki;
 80057f6:	4a04      	ldr	r2, [pc, #16]	; (8005808 <tracer_set_gain_ki_direct+0x1c>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6093      	str	r3, [r2, #8]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20012214 	.word	0x20012214

0800580c <tracer_set_gain_kd_direct>:

void tracer_set_gain_kd_direct(float kd)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kd = kd;
 8005816:	4a04      	ldr	r2, [pc, #16]	; (8005828 <tracer_set_gain_kd_direct+0x1c>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60d3      	str	r3, [r2, #12]
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	20012214 	.word	0x20012214

0800582c <tracer_set_gain_direct>:

void tracer_set_gain_direct(float kp, float ki, float kd)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	ed87 0a03 	vstr	s0, [r7, #12]
 8005836:	edc7 0a02 	vstr	s1, [r7, #8]
 800583a:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_set_gain_kp_direct(kp);
 800583e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005842:	f7ff ffc3 	bl	80057cc <tracer_set_gain_kp_direct>
    tracer_set_gain_ki_direct(ki);
 8005846:	ed97 0a02 	vldr	s0, [r7, #8]
 800584a:	f7ff ffcf 	bl	80057ec <tracer_set_gain_ki_direct>
    tracer_set_gain_kd_direct(kd);
 800584e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005852:	f7ff ffdb 	bl	800580c <tracer_set_gain_kd_direct>
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <tracer_set_target_zero>:

/* kp ki kd set zero */
void tracer_set_target_zero()
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <tracer_set_target_zero+0x18>)
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20012214 	.word	0x20012214

0800587c <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 8005880:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <tracer_set_gain_zero+0x28>)
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	605a      	str	r2, [r3, #4]
    tracer_pid.ki = 0;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <tracer_set_gain_zero+0x28>)
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	609a      	str	r2, [r3, #8]
    tracer_pid.kd = 0;
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <tracer_set_gain_zero+0x28>)
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	60da      	str	r2, [r3, #12]
}
 8005898:	bf00      	nop
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20012214 	.word	0x20012214

080058a8 <tracer_calc_gain_kp>:

/* calclate pid values from rotary value */
float tracer_calc_gain_kp(unsigned short int i)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KP_MAX - TRACER_KP_MIN) / (float) (TRACER_STEP_SIZE - 1);
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	f1c3 030f 	rsb	r3, r3, #15
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058c0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80058e8 <tracer_calc_gain_kp+0x40>
 80058c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058c8:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80058cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80058d8:	eeb0 0a67 	vmov.f32	s0, s15
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	00000000 	.word	0x00000000

080058ec <tracer_calc_gain_ki>:

float tracer_calc_gain_ki(unsigned short int i)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KI_MAX - TRACER_KI_MIN) / (float) (TRACER_STEP_SIZE - 1);
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	f1c3 030f 	rsb	r3, r3, #15
 80058fc:	ee07 3a90 	vmov	s15, r3
 8005900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005904:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800592c <tracer_calc_gain_ki+0x40>
 8005908:	ee27 7a87 	vmul.f32	s14, s15, s14
 800590c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005914:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800592c <tracer_calc_gain_ki+0x40>
 8005918:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800591c:	eeb0 0a67 	vmov.f32	s0, s15
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	00000000 	.word	0x00000000

08005930 <tracer_calc_gain_kd>:

float tracer_calc_gain_kd(unsigned short int i)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KD_MAX - TRACER_KD_MIN) / (float) (TRACER_STEP_SIZE - 1);
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	f1c3 030f 	rsb	r3, r3, #15
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005948:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005970 <tracer_calc_gain_kd+0x40>
 800594c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005950:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005958:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005974 <tracer_calc_gain_kd+0x44>
 800595c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005960:	eeb0 0a67 	vmov.f32	s0, s15
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	00000000 	.word	0x00000000
 8005974:	3c656042 	.word	0x3c656042

08005978 <tracer_set_gain_default>:

/* set default */
void tracer_set_gain_default()
{
 8005978:	b490      	push	{r4, r7}
 800597a:	af00      	add	r7, sp, #0
    tracer_pid = tracer_default;
 800597c:	4a04      	ldr	r2, [pc, #16]	; (8005990 <tracer_set_gain_default+0x18>)
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <tracer_set_gain_default+0x1c>)
 8005980:	4614      	mov	r4, r2
 8005982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	bc90      	pop	{r4, r7}
 800598e:	4770      	bx	lr
 8005990:	20012214 	.word	0x20012214
 8005994:	20012224 	.word	0x20012224

08005998 <tracer_set_default_now_gain>:

void tracer_set_default_now_gain(float kp, float ki, float kd)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	ed87 0a03 	vstr	s0, [r7, #12]
 80059a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80059a6:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_default.target = 0;
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <tracer_set_default_now_gain+0x38>)
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
    tracer_default.kp = kp;
 80059b2:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <tracer_set_default_now_gain+0x38>)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6053      	str	r3, [r2, #4]
    tracer_default.ki = ki;
 80059b8:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <tracer_set_default_now_gain+0x38>)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6093      	str	r3, [r2, #8]
    tracer_default.kd = kd;
 80059be:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <tracer_set_default_now_gain+0x38>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60d3      	str	r3, [r2, #12]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20012224 	.word	0x20012224

080059d4 <tracer_read_values>:
    tracer_pid.ki = _pid->ki;
    tracer_pid.kd = _pid->kd;
}

PID* tracer_read_values()
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
    return &tracer_pid;
 80059d8:	4b02      	ldr	r3, [pc, #8]	; (80059e4 <tracer_read_values+0x10>)
}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20012214 	.word	0x20012214

080059e8 <tracer_solve>:

float tracer_solve(int reference_)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_ - tracer_pid.target;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059fa:	4b32      	ldr	r3, [pc, #200]	; (8005ac4 <tracer_solve+0xdc>)
 80059fc:	edd3 7a00 	vldr	s15, [r3]
 8005a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a08:	ee17 3a90 	vmov	r3, s15
 8005a0c:	617b      	str	r3, [r7, #20]

    d_error = (error - tracer_before_error) / (float) (tracer_sampling_time_ms / (float) 1000);
 8005a0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ac8 <tracer_solve+0xe0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a1e:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <tracer_solve+0xe4>)
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2a:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8005ad0 <tracer_solve+0xe8>
 8005a2e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a36:	edc7 7a04 	vstr	s15, [r7, #16]
    tracer_s_error += error * (float) (tracer_sampling_time_ms / (float) 1000);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <tracer_solve+0xe4>)
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a50:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8005ad0 <tracer_solve+0xe8>
 8005a54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <tracer_solve+0xec>)
 8005a5e:	edd3 7a00 	vldr	s15, [r3]
 8005a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <tracer_solve+0xec>)
 8005a68:	edc3 7a00 	vstr	s15, [r3]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 8005a6c:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <tracer_solve+0xdc>)
 8005a6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a80:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <tracer_solve+0xdc>)
 8005a82:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <tracer_solve+0xec>)
 8005a88:	edd3 7a00 	vldr	s15, [r3]
 8005a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <tracer_solve+0xdc>)
 8005a96:	edd3 6a03 	vldr	s13, [r3, #12]
 8005a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa6:	edc7 7a03 	vstr	s15, [r7, #12]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 8005aaa:	4a07      	ldr	r2, [pc, #28]	; (8005ac8 <tracer_solve+0xe0>)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6013      	str	r3, [r2, #0]

    return result;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	ee07 3a90 	vmov	s15, r3
}
 8005ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20012214 	.word	0x20012214
 8005ac8:	2001220c 	.word	0x2001220c
 8005acc:	20012210 	.word	0x20012210
 8005ad0:	447a0000 	.word	0x447a0000
 8005ad4:	20012208 	.word	0x20012208

08005ad8 <tracer_print_values>:

void tracer_print_values()
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
#if D_TRACER
    printf("trac > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
#endif
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <velotrace_init>:
PID velotrace_pid;
uint8_t velotrace_started;

/* pre setting */
void velotrace_init(uint16_t samplingtime_ms)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	80fb      	strh	r3, [r7, #6]
    velotrace_started = 0;
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <velotrace_init+0x24>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
    velotrace_sampling_time_ms = samplingtime_ms;
 8005af8:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <velotrace_init+0x28>)
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	8013      	strh	r3, [r2, #0]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20012254 	.word	0x20012254
 8005b10:	20012240 	.word	0x20012240

08005b14 <velotrace_start>:

void velotrace_start()
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
    if(velotrace_started <= 0)
 8005b1a:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <velotrace_start+0x124>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 8082 	bne.w	8005c28 <velotrace_start+0x114>
    {
        float target, kp, ki, kd;
        #if D_VELOTRACE
        printf("velotrace_sampling_time_ms = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
        #endif
        velotrace_s_error = 0;
 8005b24:	4b45      	ldr	r3, [pc, #276]	; (8005c3c <velotrace_start+0x128>)
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
        velotrace_before_error = 0;
 8005b2c:	4b44      	ldr	r3, [pc, #272]	; (8005c40 <velotrace_start+0x12c>)
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
        velotrace_gain_tuning_time_ms = 0;
 8005b34:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <velotrace_start+0x130>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	801a      	strh	r2, [r3, #0]
        switch(rotary_read_playmode())
 8005b3a:	f7fb fd2d 	bl	8001598 <rotary_read_playmode>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b07      	cmp	r3, #7
 8005b42:	d033      	beq.n	8005bac <velotrace_start+0x98>
 8005b44:	2b07      	cmp	r3, #7
 8005b46:	dc56      	bgt.n	8005bf6 <velotrace_start+0xe2>
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	dc02      	bgt.n	8005b52 <velotrace_start+0x3e>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dc03      	bgt.n	8005b58 <velotrace_start+0x44>
 8005b50:	e051      	b.n	8005bf6 <velotrace_start+0xe2>
 8005b52:	2b06      	cmp	r3, #6
 8005b54:	d00b      	beq.n	8005b6e <velotrace_start+0x5a>
 8005b56:	e04e      	b.n	8005bf6 <velotrace_start+0xe2>
                target = velotrace_calc_target(rotary_read_value());
                kp = velotrace_calc_gain_kp(rotary_read_value());
                ki = velotrace_calc_gain_ki(rotary_read_value());
                kd = velotrace_calc_gain_kd(rotary_read_value());
                */
                target = 1;
 8005b58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005b5c:	60fb      	str	r3, [r7, #12]
                kp = 1000;
 8005b5e:	4b3a      	ldr	r3, [pc, #232]	; (8005c48 <velotrace_start+0x134>)
 8005b60:	60bb      	str	r3, [r7, #8]
                ki = 100;
 8005b62:	4b3a      	ldr	r3, [pc, #232]	; (8005c4c <velotrace_start+0x138>)
 8005b64:	607b      	str	r3, [r7, #4]
                kd = 0;
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	603b      	str	r3, [r7, #0]
                break;
 8005b6c:	e050      	b.n	8005c10 <velotrace_start+0xfc>
            case velotrace_tuning:
                target = 0;
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 8005b74:	f7fb fd28 	bl	80015c8 <rotary_read_value>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f909 	bl	8005d94 <velotrace_calc_gain_kp>
 8005b82:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 8005b86:	f7fb fd1f 	bl	80015c8 <rotary_read_value>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f924 	bl	8005ddc <velotrace_calc_gain_ki>
 8005b94:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 8005b98:	f7fb fd16 	bl	80015c8 <rotary_read_value>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f93f 	bl	8005e24 <velotrace_calc_gain_kd>
 8005ba6:	ed87 0a00 	vstr	s0, [r7]
                break;
 8005baa:	e031      	b.n	8005c10 <velotrace_start+0xfc>
            case velotrace_tuning_2:
                target = velotrace_calc_target(rotary_read_value());
 8005bac:	f7fb fd0c 	bl	80015c8 <rotary_read_value>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f8cf 	bl	8005d58 <velotrace_calc_target>
 8005bba:	ed87 0a03 	vstr	s0, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 8005bbe:	f7fb fd03 	bl	80015c8 <rotary_read_value>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f8e4 	bl	8005d94 <velotrace_calc_gain_kp>
 8005bcc:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 8005bd0:	f7fb fcfa 	bl	80015c8 <rotary_read_value>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f8ff 	bl	8005ddc <velotrace_calc_gain_ki>
 8005bde:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 8005be2:	f7fb fcf1 	bl	80015c8 <rotary_read_value>
 8005be6:	4603      	mov	r3, r0
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f91a 	bl	8005e24 <velotrace_calc_gain_kd>
 8005bf0:	ed87 0a00 	vstr	s0, [r7]
                break;
 8005bf4:	e00c      	b.n	8005c10 <velotrace_start+0xfc>
            case tracer_tuning:
            default:
                target = 0;
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]
                kp = 0;
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	60bb      	str	r3, [r7, #8]
                ki = 0;
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	607b      	str	r3, [r7, #4]
                kd = 0;
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	603b      	str	r3, [r7, #0]
                break;
 8005c0e:	bf00      	nop
        }
        velotrace_set_target_direct(target);
 8005c10:	ed97 0a03 	vldr	s0, [r7, #12]
 8005c14:	f000 f82a 	bl	8005c6c <velotrace_set_target_direct>
        velotrace_set_gain_direct(kp, ki, kd);
 8005c18:	ed97 1a00 	vldr	s2, [r7]
 8005c1c:	edd7 0a01 	vldr	s1, [r7, #4]
 8005c20:	ed97 0a02 	vldr	s0, [r7, #8]
 8005c24:	f000 f862 	bl	8005cec <velotrace_set_gain_direct>
    }
    velotrace_started = 1;
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <velotrace_start+0x124>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20012254 	.word	0x20012254
 8005c3c:	20012238 	.word	0x20012238
 8005c40:	2001223c 	.word	0x2001223c
 8005c44:	20012242 	.word	0x20012242
 8005c48:	447a0000 	.word	0x447a0000
 8005c4c:	42c80000 	.word	0x42c80000

08005c50 <velotrace_stop>:

void velotrace_stop()
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 8005c54:	f000 f864 	bl	8005d20 <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 8005c58:	f000 f86c 	bl	8005d34 <velotrace_set_gain_zero>
    velotrace_started = 0;
 8005c5c:	4b02      	ldr	r3, [pc, #8]	; (8005c68 <velotrace_stop+0x18>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
}
 8005c62:	bf00      	nop
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20012254 	.word	0x20012254

08005c6c <velotrace_set_target_direct>:
{
    velotrace_pid.target = velotrace_calc_target(i);
}

void velotrace_set_target_direct(float target)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.target = target;
 8005c76:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <velotrace_set_target_direct+0x1c>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6013      	str	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20012244 	.word	0x20012244

08005c8c <velotrace_set_gain_kp_direct>:
{
    velotrace_set_gain_kd_direct(velotrace_calc_gain_kd(i));
}

void velotrace_set_gain_kp_direct(float kp)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kp = kp;
 8005c96:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <velotrace_set_gain_kp_direct+0x1c>)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6053      	str	r3, [r2, #4]
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20012244 	.word	0x20012244

08005cac <velotrace_set_gain_ki_direct>:

void velotrace_set_gain_ki_direct(float ki)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.ki = ki;
 8005cb6:	4a04      	ldr	r2, [pc, #16]	; (8005cc8 <velotrace_set_gain_ki_direct+0x1c>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6093      	str	r3, [r2, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	20012244 	.word	0x20012244

08005ccc <velotrace_set_gain_kd_direct>:

void velotrace_set_gain_kd_direct(float kd)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kd = kd;
 8005cd6:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <velotrace_set_gain_kd_direct+0x1c>)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60d3      	str	r3, [r2, #12]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20012244 	.word	0x20012244

08005cec <velotrace_set_gain_direct>:

void velotrace_set_gain_direct(float kp, float ki, float kd)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	ed87 0a03 	vstr	s0, [r7, #12]
 8005cf6:	edc7 0a02 	vstr	s1, [r7, #8]
 8005cfa:	ed87 1a01 	vstr	s2, [r7, #4]
    velotrace_set_gain_kp_direct(kp);
 8005cfe:	ed97 0a03 	vldr	s0, [r7, #12]
 8005d02:	f7ff ffc3 	bl	8005c8c <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(ki);
 8005d06:	ed97 0a02 	vldr	s0, [r7, #8]
 8005d0a:	f7ff ffcf 	bl	8005cac <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(kd);
 8005d0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d12:	f7ff ffdb 	bl	8005ccc <velotrace_set_gain_kd_direct>
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <velotrace_set_target_zero>:

/* target kp ki kd set zero */
void velotrace_set_target_zero()
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
    velotrace_set_target_direct(0);
 8005d24:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005d30 <velotrace_set_target_zero+0x10>
 8005d28:	f7ff ffa0 	bl	8005c6c <velotrace_set_target_direct>
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	00000000 	.word	0x00000000

08005d34 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
    velotrace_set_gain_kp_direct(0);
 8005d38:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005d54 <velotrace_set_gain_zero+0x20>
 8005d3c:	f7ff ffa6 	bl	8005c8c <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(0);
 8005d40:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8005d54 <velotrace_set_gain_zero+0x20>
 8005d44:	f7ff ffb2 	bl	8005cac <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(0);
 8005d48:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005d54 <velotrace_set_gain_zero+0x20>
 8005d4c:	f7ff ffbe 	bl	8005ccc <velotrace_set_gain_kd_direct>
}
 8005d50:	bf00      	nop
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	00000000 	.word	0x00000000

08005d58 <velotrace_calc_target>:

/* calclate pid values from rotary value */
float velotrace_calc_target(unsigned short int i)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	f1c3 030f 	rsb	r3, r3, #15
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005d74:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d7c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005d80:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005d84:	eeb0 0a67 	vmov.f32	s0, s15
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
	...

08005d94 <velotrace_calc_gain_kp>:

float velotrace_calc_gain_kp(unsigned short int i)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	f1c3 030f 	rsb	r3, r3, #15
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dac:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005dd4 <velotrace_calc_gain_kp+0x40>
 8005db0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005db4:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dbc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005dd8 <velotrace_calc_gain_kp+0x44>
 8005dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	00000000 	.word	0x00000000
 8005dd8:	447a0000 	.word	0x447a0000

08005ddc <velotrace_calc_gain_ki>:

float velotrace_calc_gain_ki(unsigned short int i)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	f1c3 030f 	rsb	r3, r3, #15
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005e1c <velotrace_calc_gain_ki+0x40>
 8005df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005dfc:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e04:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005e20 <velotrace_calc_gain_ki+0x44>
 8005e08:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	00000000 	.word	0x00000000
 8005e20:	42c80000 	.word	0x42c80000

08005e24 <velotrace_calc_gain_kd>:

float velotrace_calc_gain_kd(unsigned short int i)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	f1c3 030f 	rsb	r3, r3, #15
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e3c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005e64 <velotrace_calc_gain_kd+0x40>
 8005e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e44:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e4c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005e64 <velotrace_calc_gain_kd+0x40>
 8005e50:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005e54:	eeb0 0a67 	vmov.f32	s0, s15
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	00000000 	.word	0x00000000

08005e68 <velotrace_read_values>:
    velotrace_pid.ki = _pid->ki;
    velotrace_pid.kd = _pid->kd;
}

PID* velotrace_read_values()
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
    return &velotrace_pid;
 8005e6c:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <velotrace_read_values+0x10>)
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20012244 	.word	0x20012244

08005e7c <velotrace_solve>:

float velotrace_solve(float reference_)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	ed87 0a01 	vstr	s0, [r7, #4]
    float error;
    float d_error;
    float result;

    error = reference_ - velotrace_pid.target;
 8005e86:	4b2f      	ldr	r3, [pc, #188]	; (8005f44 <velotrace_solve+0xc8>)
 8005e88:	edd3 7a00 	vldr	s15, [r3]
 8005e8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e94:	edc7 7a05 	vstr	s15, [r7, #20]

    d_error = (error - velotrace_before_error) / (float) (velotrace_sampling_time_ms / (float) 1000);
 8005e98:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <velotrace_solve+0xcc>)
 8005e9a:	edd3 7a00 	vldr	s15, [r3]
 8005e9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ea2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005ea6:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <velotrace_solve+0xd0>)
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eb2:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8005f50 <velotrace_solve+0xd4>
 8005eb6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ebe:	edc7 7a04 	vstr	s15, [r7, #16]
    velotrace_s_error += error * (float) (velotrace_sampling_time_ms / (float) 1000);
 8005ec2:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <velotrace_solve+0xd0>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ece:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005f50 <velotrace_solve+0xd4>
 8005ed2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <velotrace_solve+0xd8>)
 8005ee0:	edd3 7a00 	vldr	s15, [r3]
 8005ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee8:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <velotrace_solve+0xd8>)
 8005eea:	edc3 7a00 	vstr	s15, [r3]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 8005eee:	4b15      	ldr	r3, [pc, #84]	; (8005f44 <velotrace_solve+0xc8>)
 8005ef0:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005efc:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <velotrace_solve+0xc8>)
 8005efe:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <velotrace_solve+0xd8>)
 8005f04:	edd3 7a00 	vldr	s15, [r3]
 8005f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <velotrace_solve+0xc8>)
 8005f12:	edd3 6a03 	vldr	s13, [r3, #12]
 8005f16:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f22:	eef1 7a67 	vneg.f32	s15, s15
 8005f26:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8005f2a:	4a07      	ldr	r2, [pc, #28]	; (8005f48 <velotrace_solve+0xcc>)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	6013      	str	r3, [r2, #0]

    return result;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	ee07 3a90 	vmov	s15, r3
}
 8005f36:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	20012244 	.word	0x20012244
 8005f48:	2001223c 	.word	0x2001223c
 8005f4c:	20012240 	.word	0x20012240
 8005f50:	447a0000 	.word	0x447a0000
 8005f54:	20012238 	.word	0x20012238

08005f58 <velotrace_print_values>:

void velotrace_print_values()
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
#if D_VELOTRACE
	printf("velo > target = %5.3f\r\n", velotrace_read_target());
	//! printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_calc_gain_kp(rotary_read_value()), velotrace_calc_gain_ki(rotary_read_value()), velotrace_calc_gain_kd(rotary_read_value()));
#endif
}
 8005f5c:	bf00      	nop
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <velotrace_gain_tuning>:

void velotrace_gain_tuning()
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
    //! 右センサを読んでからの時間を格納する
    velotrace_gain_tuning_time_ms += velotrace_sampling_time_ms;
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <velotrace_gain_tuning+0x34>)
 8005f6e:	881a      	ldrh	r2, [r3, #0]
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <velotrace_gain_tuning+0x38>)
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <velotrace_gain_tuning+0x34>)
 8005f7a:	801a      	strh	r2, [r3, #0]
    //! 停止時間になったら
    if(velotrace_gain_tuning_time_ms >= VELOTRACE_GAIN_TUNING_STOP_TIME_MS)
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <velotrace_gain_tuning+0x34>)
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d903      	bls.n	8005f90 <velotrace_gain_tuning+0x28>
    {
        //! 速度の目標値をゼロにする
        velotrace_pid.target = 0;
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <velotrace_gain_tuning+0x3c>)
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
    }
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20012242 	.word	0x20012242
 8005fa0:	20012240 	.word	0x20012240
 8005fa4:	20012244 	.word	0x20012244

08005fa8 <virtual_marker_init>:
#include "virtual_marker.h"

SideSensorState virtual_marker_state, virtual_marker_state_volatile;

void virtual_marker_init()
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
    sidesensor_init();
 8005fac:	f7fe fa26 	bl	80043fc <sidesensor_init>
}
 8005fb0:	bf00      	nop
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <virtual_marker_start>:

void virtual_marker_start()
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
    sidesensor_start();
 8005fb8:	f7fe fa28 	bl	800440c <sidesensor_start>
    virtual_marker_set();
 8005fbc:	f000 f810 	bl	8005fe0 <virtual_marker_set>
}
 8005fc0:	bf00      	nop
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <virtual_marker_main>:

void virtual_marker_main()
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
    /* virtual_main */
    sidesensor_main();
 8005fc8:	f7fe fab2 	bl	8004530 <sidesensor_main>
    virtual_marker_set();
 8005fcc:	f000 f808 	bl	8005fe0 <virtual_marker_set>
}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <virtual_marker_stop>:

void virtual_marker_stop()
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
    sidesensor_stop();
 8005fd8:	f7fe fa3e 	bl	8004458 <sidesensor_stop>
}
 8005fdc:	bf00      	nop
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <virtual_marker_set>:

void virtual_marker_set()
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
    virtual_marker_state = sidesensor_read_markerstate();
 8005fe4:	f7fe fa40 	bl	8004468 <sidesensor_read_markerstate>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b04      	ldr	r3, [pc, #16]	; (8006000 <virtual_marker_set+0x20>)
 8005fee:	701a      	strb	r2, [r3, #0]
    virtual_marker_state_volatile = sidesensor_read_markerstate_volatile();
 8005ff0:	f7fe fa46 	bl	8004480 <sidesensor_read_markerstate_volatile>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <virtual_marker_set+0x24>)
 8005ffa:	701a      	strb	r2, [r3, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20012255 	.word	0x20012255
 8006004:	20012256 	.word	0x20012256

08006008 <virtual_marker_read_markerstate>:

SideSensorState virtual_marker_read_markerstate()
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
    return virtual_marker_state;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <virtual_marker_read_markerstate+0x14>)
 800600e:	781b      	ldrb	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20012255 	.word	0x20012255

08006020 <virtual_marker_read_markerstate_volatile>:

SideSensorState virtual_marker_read_markerstate_volatile()
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
    if(course_read_section_degree() / course_read_sampling_count() >= THRESHOLD_YAW_CURVE_OR_STRAIGHT)
    {
        virtual_marker_state_volatile = curve;
    }
    */
    return virtual_marker_state_volatile;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <virtual_marker_read_markerstate_volatile+0x14>)
 8006026:	781b      	ldrb	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20012256 	.word	0x20012256

08006038 <virtual_marker_d_print>:

void virtual_marker_d_print()
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0

}
 800603c:	bf00      	nop
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800604c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800604e:	e003      	b.n	8006058 <LoopCopyDataInit>

08006050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006056:	3104      	adds	r1, #4

08006058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006058:	480b      	ldr	r0, [pc, #44]	; (8006088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800605c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800605e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006060:	d3f6      	bcc.n	8006050 <CopyDataInit>
  ldr  r2, =_sbss
 8006062:	4a0b      	ldr	r2, [pc, #44]	; (8006090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006064:	e002      	b.n	800606c <LoopFillZerobss>

08006066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006068:	f842 3b04 	str.w	r3, [r2], #4

0800606c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800606e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006070:	d3f9      	bcc.n	8006066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006072:	f7fe ff95 	bl	8004fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006076:	f004 ff25 	bl	800aec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800607a:	f7fd f87b 	bl	8003174 <main>
  bx  lr    
 800607e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006084:	080110f0 	.word	0x080110f0
  ldr  r0, =_sdata
 8006088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800608c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8006090:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006094:	2001228c 	.word	0x2001228c

08006098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006098:	e7fe      	b.n	8006098 <ADC_IRQHandler>
	...

0800609c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060a0:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <HAL_Init+0x40>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <HAL_Init+0x40>)
 80060a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <HAL_Init+0x40>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <HAL_Init+0x40>)
 80060b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <HAL_Init+0x40>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a07      	ldr	r2, [pc, #28]	; (80060dc <HAL_Init+0x40>)
 80060be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060c4:	2003      	movs	r0, #3
 80060c6:	f000 fdb1 	bl	8006c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060ca:	2000      	movs	r0, #0
 80060cc:	f000 f808 	bl	80060e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060d0:	f7fe fae4 	bl	800469c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40023c00 	.word	0x40023c00

080060e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <HAL_InitTick+0x54>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <HAL_InitTick+0x58>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fdc9 	bl	8006c96 <HAL_SYSTICK_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e00e      	b.n	800612c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b0f      	cmp	r3, #15
 8006112:	d80a      	bhi.n	800612a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006114:	2200      	movs	r2, #0
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	f000 fd91 	bl	8006c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006120:	4a06      	ldr	r2, [pc, #24]	; (800613c <HAL_InitTick+0x5c>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e000      	b.n	800612c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000000 	.word	0x20000000
 8006138:	20000008 	.word	0x20000008
 800613c:	20000004 	.word	0x20000004

08006140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <HAL_IncTick+0x20>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_IncTick+0x24>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4413      	add	r3, r2
 8006150:	4a04      	ldr	r2, [pc, #16]	; (8006164 <HAL_IncTick+0x24>)
 8006152:	6013      	str	r3, [r2, #0]
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000008 	.word	0x20000008
 8006164:	20012258 	.word	0x20012258

08006168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return uwTick;
 800616c:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_GetTick+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20012258 	.word	0x20012258

08006180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006188:	f7ff ffee 	bl	8006168 <HAL_GetTick>
 800618c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d005      	beq.n	80061a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <HAL_Delay+0x44>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80061a6:	bf00      	nop
 80061a8:	f7ff ffde 	bl	8006168 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d8f7      	bhi.n	80061a8 <HAL_Delay+0x28>
  {
  }
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000008 	.word	0x20000008

080061c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e033      	b.n	8006246 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fe fa84 	bl	80046f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d118      	bne.n	8006238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800620e:	f023 0302 	bic.w	r3, r3, #2
 8006212:	f043 0202 	orr.w	r2, r3, #2
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fab8 	bl	8006790 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	f043 0201 	orr.w	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
 8006236:	e001      	b.n	800623c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_ADC_Start_DMA+0x1e>
 800626a:	2302      	movs	r3, #2
 800626c:	e0e9      	b.n	8006442 <HAL_ADC_Start_DMA+0x1f2>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b01      	cmp	r3, #1
 8006282:	d018      	beq.n	80062b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006294:	4b6d      	ldr	r3, [pc, #436]	; (800644c <HAL_ADC_Start_DMA+0x1fc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a6d      	ldr	r2, [pc, #436]	; (8006450 <HAL_ADC_Start_DMA+0x200>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0c9a      	lsrs	r2, r3, #18
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80062a8:	e002      	b.n	80062b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f9      	bne.n	80062aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c4:	d107      	bne.n	80062d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f040 80a1 	bne.w	8006428 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006310:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d106      	bne.n	8006334 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	f023 0206 	bic.w	r2, r3, #6
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
 8006332:	e002      	b.n	800633a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006342:	4b44      	ldr	r3, [pc, #272]	; (8006454 <HAL_ADC_Start_DMA+0x204>)
 8006344:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	4a43      	ldr	r2, [pc, #268]	; (8006458 <HAL_ADC_Start_DMA+0x208>)
 800634c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	4a42      	ldr	r2, [pc, #264]	; (800645c <HAL_ADC_Start_DMA+0x20c>)
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	4a41      	ldr	r2, [pc, #260]	; (8006460 <HAL_ADC_Start_DMA+0x210>)
 800635c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006366:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006376:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006386:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	334c      	adds	r3, #76	; 0x4c
 8006392:	4619      	mov	r1, r3
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f000 fd38 	bl	8006e0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d12a      	bne.n	80063fe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2d      	ldr	r2, [pc, #180]	; (8006464 <HAL_ADC_Start_DMA+0x214>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d015      	beq.n	80063de <HAL_ADC_Start_DMA+0x18e>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <HAL_ADC_Start_DMA+0x218>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d105      	bne.n	80063c8 <HAL_ADC_Start_DMA+0x178>
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <HAL_ADC_Start_DMA+0x204>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a27      	ldr	r2, [pc, #156]	; (800646c <HAL_ADC_Start_DMA+0x21c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d136      	bne.n	8006440 <HAL_ADC_Start_DMA+0x1f0>
 80063d2:	4b20      	ldr	r3, [pc, #128]	; (8006454 <HAL_ADC_Start_DMA+0x204>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d130      	bne.n	8006440 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d129      	bne.n	8006440 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	e020      	b.n	8006440 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a18      	ldr	r2, [pc, #96]	; (8006464 <HAL_ADC_Start_DMA+0x214>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d11b      	bne.n	8006440 <HAL_ADC_Start_DMA+0x1f0>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d114      	bne.n	8006440 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006424:	609a      	str	r2, [r3, #8]
 8006426:	e00b      	b.n	8006440 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	f043 0210 	orr.w	r2, r3, #16
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000000 	.word	0x20000000
 8006450:	431bde83 	.word	0x431bde83
 8006454:	40012300 	.word	0x40012300
 8006458:	08006989 	.word	0x08006989
 800645c:	08006a43 	.word	0x08006a43
 8006460:	08006a5f 	.word	0x08006a5f
 8006464:	40012000 	.word	0x40012000
 8006468:	40012100 	.word	0x40012100
 800646c:	40012200 	.word	0x40012200

08006470 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_ADC_Stop_DMA+0x1a>
 8006486:	2302      	movs	r3, #2
 8006488:	e048      	b.n	800651c <HAL_ADC_Stop_DMA+0xac>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d130      	bne.n	8006512 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064be:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d10f      	bne.n	80064ee <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fcf2 	bl	8006ebc <HAL_DMA_Abort>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80064fc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	f043 0201 	orr.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x1c>
 8006564:	2302      	movs	r3, #2
 8006566:	e105      	b.n	8006774 <HAL_ADC_ConfigChannel+0x228>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b09      	cmp	r3, #9
 8006576:	d925      	bls.n	80065c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	4613      	mov	r3, r2
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	4413      	add	r3, r2
 800658c:	3b1e      	subs	r3, #30
 800658e:	2207      	movs	r2, #7
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43da      	mvns	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	400a      	ands	r2, r1
 800659c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68d9      	ldr	r1, [r3, #12]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	4618      	mov	r0, r3
 80065b0:	4603      	mov	r3, r0
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	4403      	add	r3, r0
 80065b6:	3b1e      	subs	r3, #30
 80065b8:	409a      	lsls	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	e022      	b.n	800660a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6919      	ldr	r1, [r3, #16]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	4613      	mov	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	4413      	add	r3, r2
 80065d8:	2207      	movs	r2, #7
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43da      	mvns	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	400a      	ands	r2, r1
 80065e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6919      	ldr	r1, [r3, #16]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	4618      	mov	r0, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	4403      	add	r3, r0
 8006600:	409a      	lsls	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b06      	cmp	r3, #6
 8006610:	d824      	bhi.n	800665c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	3b05      	subs	r3, #5
 8006624:	221f      	movs	r2, #31
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43da      	mvns	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	400a      	ands	r2, r1
 8006632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	4618      	mov	r0, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	3b05      	subs	r3, #5
 800664e:	fa00 f203 	lsl.w	r2, r0, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	635a      	str	r2, [r3, #52]	; 0x34
 800665a:	e04c      	b.n	80066f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b0c      	cmp	r3, #12
 8006662:	d824      	bhi.n	80066ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	3b23      	subs	r3, #35	; 0x23
 8006676:	221f      	movs	r2, #31
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	43da      	mvns	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	400a      	ands	r2, r1
 8006684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	4618      	mov	r0, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	3b23      	subs	r3, #35	; 0x23
 80066a0:	fa00 f203 	lsl.w	r2, r0, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
 80066ac:	e023      	b.n	80066f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	3b41      	subs	r3, #65	; 0x41
 80066c0:	221f      	movs	r2, #31
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43da      	mvns	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	400a      	ands	r2, r1
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	4618      	mov	r0, r3
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	3b41      	subs	r3, #65	; 0x41
 80066ea:	fa00 f203 	lsl.w	r2, r0, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066f6:	4b22      	ldr	r3, [pc, #136]	; (8006780 <HAL_ADC_ConfigChannel+0x234>)
 80066f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a21      	ldr	r2, [pc, #132]	; (8006784 <HAL_ADC_ConfigChannel+0x238>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d109      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x1cc>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b12      	cmp	r3, #18
 800670a:	d105      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a19      	ldr	r2, [pc, #100]	; (8006784 <HAL_ADC_ConfigChannel+0x238>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d123      	bne.n	800676a <HAL_ADC_ConfigChannel+0x21e>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b10      	cmp	r3, #16
 8006728:	d003      	beq.n	8006732 <HAL_ADC_ConfigChannel+0x1e6>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b11      	cmp	r3, #17
 8006730:	d11b      	bne.n	800676a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b10      	cmp	r3, #16
 8006744:	d111      	bne.n	800676a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006746:	4b10      	ldr	r3, [pc, #64]	; (8006788 <HAL_ADC_ConfigChannel+0x23c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a10      	ldr	r2, [pc, #64]	; (800678c <HAL_ADC_ConfigChannel+0x240>)
 800674c:	fba2 2303 	umull	r2, r3, r2, r3
 8006750:	0c9a      	lsrs	r2, r3, #18
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800675c:	e002      	b.n	8006764 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	3b01      	subs	r3, #1
 8006762:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f9      	bne.n	800675e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40012300 	.word	0x40012300
 8006784:	40012000 	.word	0x40012000
 8006788:	20000000 	.word	0x20000000
 800678c:	431bde83 	.word	0x431bde83

08006790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006798:	4b79      	ldr	r3, [pc, #484]	; (8006980 <ADC_Init+0x1f0>)
 800679a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6859      	ldr	r1, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80067e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800680a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6899      	ldr	r1, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	4a58      	ldr	r2, [pc, #352]	; (8006984 <ADC_Init+0x1f4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6899      	ldr	r1, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6899      	ldr	r1, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	e00f      	b.n	800688e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800687c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800688c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0202 	bic.w	r2, r2, #2
 800689c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6899      	ldr	r1, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	7e1b      	ldrb	r3, [r3, #24]
 80068a8:	005a      	lsls	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01b      	beq.n	80068f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80068da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6859      	ldr	r1, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	3b01      	subs	r3, #1
 80068e8:	035a      	lsls	r2, r3, #13
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	e007      	b.n	8006904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006902:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	3b01      	subs	r3, #1
 8006920:	051a      	lsls	r2, r3, #20
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6899      	ldr	r1, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006946:	025a      	lsls	r2, r3, #9
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6899      	ldr	r1, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	029a      	lsls	r2, r3, #10
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	40012300 	.word	0x40012300
 8006984:	0f000001 	.word	0x0f000001

08006988 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d13c      	bne.n	8006a1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d12b      	bne.n	8006a14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d127      	bne.n	8006a14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d119      	bne.n	8006a14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0220 	bic.w	r2, r2, #32
 80069ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d105      	bne.n	8006a14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7fb fa57 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a1a:	e00e      	b.n	8006a3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f7ff fd85 	bl	8006538 <HAL_ADC_ErrorCallback>
}
 8006a2e:	e004      	b.n	8006a3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff fd67 	bl	8006524 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2240      	movs	r2, #64	; 0x40
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	f043 0204 	orr.w	r2, r3, #4
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fd5a 	bl	8006538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006abe:	4a04      	ldr	r2, [pc, #16]	; (8006ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	60d3      	str	r3, [r2, #12]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	e000ed00 	.word	0xe000ed00

08006ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <__NVIC_GetPriorityGrouping+0x18>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	f003 0307 	and.w	r3, r3, #7
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	db0b      	blt.n	8006b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	f003 021f 	and.w	r2, r3, #31
 8006b08:	4907      	ldr	r1, [pc, #28]	; (8006b28 <__NVIC_EnableIRQ+0x38>)
 8006b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	2001      	movs	r0, #1
 8006b12:	fa00 f202 	lsl.w	r2, r0, r2
 8006b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	e000e100 	.word	0xe000e100

08006b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	db0a      	blt.n	8006b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <__NVIC_SetPriority+0x4c>)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	440b      	add	r3, r1
 8006b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b54:	e00a      	b.n	8006b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	4908      	ldr	r1, [pc, #32]	; (8006b7c <__NVIC_SetPriority+0x50>)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	3b04      	subs	r3, #4
 8006b64:	0112      	lsls	r2, r2, #4
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	440b      	add	r3, r1
 8006b6a:	761a      	strb	r2, [r3, #24]
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	e000e100 	.word	0xe000e100
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b089      	sub	sp, #36	; 0x24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f1c3 0307 	rsb	r3, r3, #7
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	bf28      	it	cs
 8006b9e:	2304      	movcs	r3, #4
 8006ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d902      	bls.n	8006bb0 <NVIC_EncodePriority+0x30>
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3b03      	subs	r3, #3
 8006bae:	e000      	b.n	8006bb2 <NVIC_EncodePriority+0x32>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43da      	mvns	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd2:	43d9      	mvns	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd8:	4313      	orrs	r3, r2
         );
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3724      	adds	r7, #36	; 0x24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bf8:	d301      	bcc.n	8006bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e00f      	b.n	8006c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <SysTick_Config+0x40>)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c06:	210f      	movs	r1, #15
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	f7ff ff8e 	bl	8006b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <SysTick_Config+0x40>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c16:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <SysTick_Config+0x40>)
 8006c18:	2207      	movs	r2, #7
 8006c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	e000e010 	.word	0xe000e010

08006c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ff29 	bl	8006a8c <__NVIC_SetPriorityGrouping>
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	4603      	mov	r3, r0
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c54:	f7ff ff3e 	bl	8006ad4 <__NVIC_GetPriorityGrouping>
 8006c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	6978      	ldr	r0, [r7, #20]
 8006c60:	f7ff ff8e 	bl	8006b80 <NVIC_EncodePriority>
 8006c64:	4602      	mov	r2, r0
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff ff5d 	bl	8006b2c <__NVIC_SetPriority>
}
 8006c72:	bf00      	nop
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	4603      	mov	r3, r0
 8006c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff ff31 	bl	8006af0 <__NVIC_EnableIRQ>
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ffa2 	bl	8006be8 <SysTick_Config>
 8006ca4:	4603      	mov	r3, r0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006cbc:	f7ff fa54 	bl	8006168 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e099      	b.n	8006e00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cec:	e00f      	b.n	8006d0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cee:	f7ff fa3b 	bl	8006168 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b05      	cmp	r3, #5
 8006cfa:	d908      	bls.n	8006d0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2203      	movs	r2, #3
 8006d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e078      	b.n	8006e00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e8      	bne.n	8006cee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4b38      	ldr	r3, [pc, #224]	; (8006e08 <HAL_DMA_Init+0x158>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d107      	bne.n	8006d78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	4313      	orrs	r3, r2
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f023 0307 	bic.w	r3, r3, #7
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d117      	bne.n	8006dd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00e      	beq.n	8006dd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fadf 	bl	8007378 <DMA_CheckFifoParam>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d008      	beq.n	8006dd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2240      	movs	r2, #64	; 0x40
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e016      	b.n	8006e00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa96 	bl	800730c <DMA_CalcBaseAndBitshift>
 8006de0:	4603      	mov	r3, r0
 8006de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	223f      	movs	r2, #63	; 0x3f
 8006dea:	409a      	lsls	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	f010803f 	.word	0xf010803f

08006e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_DMA_Start_IT+0x26>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e040      	b.n	8006eb4 <HAL_DMA_Start_IT+0xa8>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d12f      	bne.n	8006ea6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fa28 	bl	80072b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e64:	223f      	movs	r2, #63	; 0x3f
 8006e66:	409a      	lsls	r2, r3
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0216 	orr.w	r2, r2, #22
 8006e7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0208 	orr.w	r2, r2, #8
 8006e92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e005      	b.n	8006eb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006eca:	f7ff f94d 	bl	8006168 <HAL_GetTick>
 8006ece:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d008      	beq.n	8006eee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2280      	movs	r2, #128	; 0x80
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e052      	b.n	8006f94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0216 	bic.w	r2, r2, #22
 8006efc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <HAL_DMA_Abort+0x62>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0208 	bic.w	r2, r2, #8
 8006f2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0201 	bic.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f3e:	e013      	b.n	8006f68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f40:	f7ff f912 	bl	8006168 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d90c      	bls.n	8006f68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2203      	movs	r2, #3
 8006f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e015      	b.n	8006f94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e4      	bne.n	8006f40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7a:	223f      	movs	r2, #63	; 0x3f
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fa8:	4b8e      	ldr	r3, [pc, #568]	; (80071e4 <HAL_DMA_IRQHandler+0x248>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a8e      	ldr	r2, [pc, #568]	; (80071e8 <HAL_DMA_IRQHandler+0x24c>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	0a9b      	lsrs	r3, r3, #10
 8006fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	409a      	lsls	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01a      	beq.n	8007008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d013      	beq.n	8007008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0204 	bic.w	r2, r2, #4
 8006fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	f043 0201 	orr.w	r2, r3, #1
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700c:	2201      	movs	r2, #1
 800700e:	409a      	lsls	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d012      	beq.n	800703e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00b      	beq.n	800703e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702a:	2201      	movs	r2, #1
 800702c:	409a      	lsls	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f043 0202 	orr.w	r2, r3, #2
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	2204      	movs	r2, #4
 8007044:	409a      	lsls	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d012      	beq.n	8007074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	2204      	movs	r2, #4
 8007062:	409a      	lsls	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	f043 0204 	orr.w	r2, r3, #4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	2210      	movs	r2, #16
 800707a:	409a      	lsls	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4013      	ands	r3, r2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d043      	beq.n	800710c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d03c      	beq.n	800710c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007096:	2210      	movs	r2, #16
 8007098:	409a      	lsls	r2, r3
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d018      	beq.n	80070de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d108      	bne.n	80070cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d024      	beq.n	800710c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
 80070ca:	e01f      	b.n	800710c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01b      	beq.n	800710c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
 80070dc:	e016      	b.n	800710c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d107      	bne.n	80070fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0208 	bic.w	r2, r2, #8
 80070fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007110:	2220      	movs	r2, #32
 8007112:	409a      	lsls	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 808f 	beq.w	800723c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0310 	and.w	r3, r3, #16
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 8087 	beq.w	800723c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007132:	2220      	movs	r2, #32
 8007134:	409a      	lsls	r2, r3
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b05      	cmp	r3, #5
 8007144:	d136      	bne.n	80071b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0216 	bic.w	r2, r2, #22
 8007154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <HAL_DMA_IRQHandler+0x1da>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0208 	bic.w	r2, r2, #8
 8007184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718a:	223f      	movs	r2, #63	; 0x3f
 800718c:	409a      	lsls	r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d07e      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
        }
        return;
 80071b2:	e079      	b.n	80072a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01d      	beq.n	80071fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10d      	bne.n	80071ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d031      	beq.n	800723c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
 80071e0:	e02c      	b.n	800723c <HAL_DMA_IRQHandler+0x2a0>
 80071e2:	bf00      	nop
 80071e4:	20000000 	.word	0x20000000
 80071e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d023      	beq.n	800723c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
 80071fc:	e01e      	b.n	800723c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10f      	bne.n	800722c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0210 	bic.w	r2, r2, #16
 800721a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	2b00      	cmp	r3, #0
 8007242:	d032      	beq.n	80072aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d022      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2205      	movs	r2, #5
 8007254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	3301      	adds	r3, #1
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	429a      	cmp	r2, r3
 8007272:	d307      	bcc.n	8007284 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f2      	bne.n	8007268 <HAL_DMA_IRQHandler+0x2cc>
 8007282:	e000      	b.n	8007286 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007284:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
 80072a6:	e000      	b.n	80072aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80072a8:	bf00      	nop
    }
  }
}
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d108      	bne.n	80072f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072ee:	e007      	b.n	8007300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	60da      	str	r2, [r3, #12]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	3b10      	subs	r3, #16
 800731c:	4a14      	ldr	r2, [pc, #80]	; (8007370 <DMA_CalcBaseAndBitshift+0x64>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	091b      	lsrs	r3, r3, #4
 8007324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007326:	4a13      	ldr	r2, [pc, #76]	; (8007374 <DMA_CalcBaseAndBitshift+0x68>)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b03      	cmp	r3, #3
 8007338:	d909      	bls.n	800734e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	1d1a      	adds	r2, r3, #4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	659a      	str	r2, [r3, #88]	; 0x58
 800734c:	e007      	b.n	800735e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	aaaaaaab 	.word	0xaaaaaaab
 8007374:	08010bf4 	.word	0x08010bf4

08007378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d11f      	bne.n	80073d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b03      	cmp	r3, #3
 8007396:	d856      	bhi.n	8007446 <DMA_CheckFifoParam+0xce>
 8007398:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <DMA_CheckFifoParam+0x28>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073c3 	.word	0x080073c3
 80073a8:	080073b1 	.word	0x080073b1
 80073ac:	08007447 	.word	0x08007447
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d046      	beq.n	800744a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073c0:	e043      	b.n	800744a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073ca:	d140      	bne.n	800744e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d0:	e03d      	b.n	800744e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073da:	d121      	bne.n	8007420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d837      	bhi.n	8007452 <DMA_CheckFifoParam+0xda>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <DMA_CheckFifoParam+0x70>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	080073ff 	.word	0x080073ff
 80073f0:	080073f9 	.word	0x080073f9
 80073f4:	08007411 	.word	0x08007411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
      break;
 80073fc:	e030      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d025      	beq.n	8007456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800740e:	e022      	b.n	8007456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007418:	d11f      	bne.n	800745a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800741e:	e01c      	b.n	800745a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d903      	bls.n	800742e <DMA_CheckFifoParam+0xb6>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d003      	beq.n	8007434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800742c:	e018      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	73fb      	strb	r3, [r7, #15]
      break;
 8007432:	e015      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	73fb      	strb	r3, [r7, #15]
      break;
 8007444:	e00b      	b.n	800745e <DMA_CheckFifoParam+0xe6>
      break;
 8007446:	bf00      	nop
 8007448:	e00a      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      break;
 800744a:	bf00      	nop
 800744c:	e008      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      break;
 800744e:	bf00      	nop
 8007450:	e006      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      break;
 8007452:	bf00      	nop
 8007454:	e004      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      break;
 8007456:	bf00      	nop
 8007458:	e002      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      break;   
 800745a:	bf00      	nop
 800745c:	e000      	b.n	8007460 <DMA_CheckFifoParam+0xe8>
      break;
 800745e:	bf00      	nop
    }
  } 
  
  return status; 
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop

08007470 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007482:	4b23      	ldr	r3, [pc, #140]	; (8007510 <HAL_FLASH_Program+0xa0>)
 8007484:	7e1b      	ldrb	r3, [r3, #24]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_FLASH_Program+0x1e>
 800748a:	2302      	movs	r3, #2
 800748c:	e03b      	b.n	8007506 <HAL_FLASH_Program+0x96>
 800748e:	4b20      	ldr	r3, [pc, #128]	; (8007510 <HAL_FLASH_Program+0xa0>)
 8007490:	2201      	movs	r2, #1
 8007492:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007494:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007498:	f000 f870 	bl	800757c <FLASH_WaitForLastOperation>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d12b      	bne.n	80074fe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d105      	bne.n	80074b8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80074ac:	783b      	ldrb	r3, [r7, #0]
 80074ae:	4619      	mov	r1, r3
 80074b0:	68b8      	ldr	r0, [r7, #8]
 80074b2:	f000 f91b 	bl	80076ec <FLASH_Program_Byte>
 80074b6:	e016      	b.n	80074e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d105      	bne.n	80074ca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80074be:	883b      	ldrh	r3, [r7, #0]
 80074c0:	4619      	mov	r1, r3
 80074c2:	68b8      	ldr	r0, [r7, #8]
 80074c4:	f000 f8ee 	bl	80076a4 <FLASH_Program_HalfWord>
 80074c8:	e00d      	b.n	80074e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d105      	bne.n	80074dc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	68b8      	ldr	r0, [r7, #8]
 80074d6:	f000 f8c3 	bl	8007660 <FLASH_Program_Word>
 80074da:	e004      	b.n	80074e6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80074dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f000 f88b 	bl	80075fc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80074e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80074ea:	f000 f847 	bl	800757c <FLASH_WaitForLastOperation>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80074f2:	4b08      	ldr	r3, [pc, #32]	; (8007514 <HAL_FLASH_Program+0xa4>)
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	4a07      	ldr	r2, [pc, #28]	; (8007514 <HAL_FLASH_Program+0xa4>)
 80074f8:	f023 0301 	bic.w	r3, r3, #1
 80074fc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80074fe:	4b04      	ldr	r3, [pc, #16]	; (8007510 <HAL_FLASH_Program+0xa0>)
 8007500:	2200      	movs	r2, #0
 8007502:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	2001225c 	.word	0x2001225c
 8007514:	40023c00 	.word	0x40023c00

08007518 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <HAL_FLASH_Unlock+0x38>)
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	da0b      	bge.n	8007542 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <HAL_FLASH_Unlock+0x38>)
 800752c:	4a09      	ldr	r2, [pc, #36]	; (8007554 <HAL_FLASH_Unlock+0x3c>)
 800752e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <HAL_FLASH_Unlock+0x38>)
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <HAL_FLASH_Unlock+0x40>)
 8007534:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_FLASH_Unlock+0x38>)
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	da01      	bge.n	8007542 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007542:	79fb      	ldrb	r3, [r7, #7]
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	40023c00 	.word	0x40023c00
 8007554:	45670123 	.word	0x45670123
 8007558:	cdef89ab 	.word	0xcdef89ab

0800755c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <HAL_FLASH_Lock+0x1c>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	4a04      	ldr	r2, [pc, #16]	; (8007578 <HAL_FLASH_Lock+0x1c>)
 8007566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800756a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	40023c00 	.word	0x40023c00

0800757c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <FLASH_WaitForLastOperation+0x78>)
 800758a:	2200      	movs	r2, #0
 800758c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800758e:	f7fe fdeb 	bl	8006168 <HAL_GetTick>
 8007592:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007594:	e010      	b.n	80075b8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d00c      	beq.n	80075b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <FLASH_WaitForLastOperation+0x38>
 80075a4:	f7fe fde0 	bl	8006168 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d201      	bcs.n	80075b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e019      	b.n	80075ec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <FLASH_WaitForLastOperation+0x7c>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e8      	bne.n	8007596 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <FLASH_WaitForLastOperation+0x7c>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <FLASH_WaitForLastOperation+0x7c>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80075d6:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <FLASH_WaitForLastOperation+0x7c>)
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80075e2:	f000 f8a5 	bl	8007730 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
  
}  
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	2001225c 	.word	0x2001225c
 80075f8:	40023c00 	.word	0x40023c00

080075fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <FLASH_Program_DoubleWord+0x60>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	4a13      	ldr	r2, [pc, #76]	; (800765c <FLASH_Program_DoubleWord+0x60>)
 800760e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007614:	4b11      	ldr	r3, [pc, #68]	; (800765c <FLASH_Program_DoubleWord+0x60>)
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	4a10      	ldr	r2, [pc, #64]	; (800765c <FLASH_Program_DoubleWord+0x60>)
 800761a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800761e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007620:	4b0e      	ldr	r3, [pc, #56]	; (800765c <FLASH_Program_DoubleWord+0x60>)
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	4a0d      	ldr	r2, [pc, #52]	; (800765c <FLASH_Program_DoubleWord+0x60>)
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8007632:	f3bf 8f6f 	isb	sy
}
 8007636:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	000a      	movs	r2, r1
 8007646:	2300      	movs	r3, #0
 8007648:	68f9      	ldr	r1, [r7, #12]
 800764a:	3104      	adds	r1, #4
 800764c:	4613      	mov	r3, r2
 800764e:	600b      	str	r3, [r1, #0]
}
 8007650:	bf00      	nop
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	40023c00 	.word	0x40023c00

08007660 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <FLASH_Program_Word+0x40>)
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	4a0c      	ldr	r2, [pc, #48]	; (80076a0 <FLASH_Program_Word+0x40>)
 8007670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007676:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <FLASH_Program_Word+0x40>)
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <FLASH_Program_Word+0x40>)
 800767c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007680:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007682:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <FLASH_Program_Word+0x40>)
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <FLASH_Program_Word+0x40>)
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	601a      	str	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	40023c00 	.word	0x40023c00

080076a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80076b0:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <FLASH_Program_HalfWord+0x44>)
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <FLASH_Program_HalfWord+0x44>)
 80076b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <FLASH_Program_HalfWord+0x44>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	4a09      	ldr	r2, [pc, #36]	; (80076e8 <FLASH_Program_HalfWord+0x44>)
 80076c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <FLASH_Program_HalfWord+0x44>)
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	4a06      	ldr	r2, [pc, #24]	; (80076e8 <FLASH_Program_HalfWord+0x44>)
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	887a      	ldrh	r2, [r7, #2]
 80076d8:	801a      	strh	r2, [r3, #0]
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40023c00 	.word	0x40023c00

080076ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <FLASH_Program_Byte+0x40>)
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	4a0b      	ldr	r2, [pc, #44]	; (800772c <FLASH_Program_Byte+0x40>)
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007704:	4b09      	ldr	r3, [pc, #36]	; (800772c <FLASH_Program_Byte+0x40>)
 8007706:	4a09      	ldr	r2, [pc, #36]	; (800772c <FLASH_Program_Byte+0x40>)
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <FLASH_Program_Byte+0x40>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	4a06      	ldr	r2, [pc, #24]	; (800772c <FLASH_Program_Byte+0x40>)
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	701a      	strb	r2, [r3, #0]
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40023c00 	.word	0x40023c00

08007730 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007740:	4b25      	ldr	r3, [pc, #148]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	f043 0310 	orr.w	r3, r3, #16
 8007748:	4a23      	ldr	r2, [pc, #140]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 800774a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800774c:	4b21      	ldr	r3, [pc, #132]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 800774e:	2210      	movs	r2, #16
 8007750:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007752:	4b20      	ldr	r3, [pc, #128]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800775e:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f043 0308 	orr.w	r3, r3, #8
 8007766:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 8007768:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800776a:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 800776c:	2220      	movs	r2, #32
 800776e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d008      	beq.n	800778e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800777c:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f043 0304 	orr.w	r3, r3, #4
 8007784:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 8007786:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007788:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 800778a:	2240      	movs	r2, #64	; 0x40
 800778c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800778e:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f043 0302 	orr.w	r3, r3, #2
 80077a2:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 80077a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 80077a8:	2280      	movs	r2, #128	; 0x80
 80077aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d008      	beq.n	80077ca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80077b8:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	4a05      	ldr	r2, [pc, #20]	; (80077d8 <FLASH_SetErrorCode+0xa8>)
 80077c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80077c4:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <FLASH_SetErrorCode+0xa4>)
 80077c6:	2202      	movs	r2, #2
 80077c8:	60da      	str	r2, [r3, #12]
  }
}
 80077ca:	bf00      	nop
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	40023c00 	.word	0x40023c00
 80077d8:	2001225c 	.word	0x2001225c

080077dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80077ee:	4b31      	ldr	r3, [pc, #196]	; (80078b4 <HAL_FLASHEx_Erase+0xd8>)
 80077f0:	7e1b      	ldrb	r3, [r3, #24]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_FLASHEx_Erase+0x1e>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e058      	b.n	80078ac <HAL_FLASHEx_Erase+0xd0>
 80077fa:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <HAL_FLASHEx_Erase+0xd8>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007800:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007804:	f7ff feba 	bl	800757c <FLASH_WaitForLastOperation>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d148      	bne.n	80078a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f04f 32ff 	mov.w	r2, #4294967295
 8007818:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d115      	bne.n	800784e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f000 f844 	bl	80078bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007834:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007838:	f7ff fea0 	bl	800757c <FLASH_WaitForLastOperation>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007840:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <HAL_FLASHEx_Erase+0xdc>)
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <HAL_FLASHEx_Erase+0xdc>)
 8007846:	f023 0304 	bic.w	r3, r3, #4
 800784a:	6113      	str	r3, [r2, #16]
 800784c:	e028      	b.n	80078a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	60bb      	str	r3, [r7, #8]
 8007854:	e01c      	b.n	8007890 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	68b8      	ldr	r0, [r7, #8]
 8007860:	f000 f850 	bl	8007904 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007864:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007868:	f7ff fe88 	bl	800757c <FLASH_WaitForLastOperation>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007870:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <HAL_FLASHEx_Erase+0xdc>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	4a10      	ldr	r2, [pc, #64]	; (80078b8 <HAL_FLASHEx_Erase+0xdc>)
 8007876:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800787a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	601a      	str	r2, [r3, #0]
          break;
 8007888:	e00a      	b.n	80078a0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	3301      	adds	r3, #1
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	4413      	add	r3, r2
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	d3da      	bcc.n	8007856 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80078a0:	f000 f878 	bl	8007994 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80078a4:	4b03      	ldr	r3, [pc, #12]	; (80078b4 <HAL_FLASHEx_Erase+0xd8>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	761a      	strb	r2, [r3, #24]

  return status;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	2001225c 	.word	0x2001225c
 80078b8:	40023c00 	.word	0x40023c00

080078bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80078c8:	4b0d      	ldr	r3, [pc, #52]	; (8007900 <FLASH_MassErase+0x44>)
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	4a0c      	ldr	r2, [pc, #48]	; (8007900 <FLASH_MassErase+0x44>)
 80078ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <FLASH_MassErase+0x44>)
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <FLASH_MassErase+0x44>)
 80078da:	f043 0304 	orr.w	r3, r3, #4
 80078de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <FLASH_MassErase+0x44>)
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	4313      	orrs	r3, r2
 80078ea:	4a05      	ldr	r2, [pc, #20]	; (8007900 <FLASH_MassErase+0x44>)
 80078ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078f0:	6113      	str	r3, [r2, #16]
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40023c00 	.word	0x40023c00

08007904 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e010      	b.n	8007942 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d103      	bne.n	800792e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	e009      	b.n	8007942 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d103      	bne.n	800793c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e002      	b.n	8007942 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800793c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007940:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007942:	4b13      	ldr	r3, [pc, #76]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	4a12      	ldr	r2, [pc, #72]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 8007948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	490f      	ldr	r1, [pc, #60]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 8007960:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007964:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007966:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 8007968:	691a      	ldr	r2, [r3, #16]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4313      	orrs	r3, r2
 8007970:	4a07      	ldr	r2, [pc, #28]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 8007972:	f043 0302 	orr.w	r3, r3, #2
 8007976:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	4a04      	ldr	r2, [pc, #16]	; (8007990 <FLASH_Erase_Sector+0x8c>)
 800797e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007982:	6113      	str	r3, [r2, #16]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	40023c00 	.word	0x40023c00

08007994 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007998:	4b20      	ldr	r3, [pc, #128]	; (8007a1c <FLASH_FlushCaches+0x88>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d017      	beq.n	80079d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80079a4:	4b1d      	ldr	r3, [pc, #116]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	4b17      	ldr	r3, [pc, #92]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a16      	ldr	r2, [pc, #88]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80079c8:	4b14      	ldr	r3, [pc, #80]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80079d4:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d017      	beq.n	8007a10 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80079e0:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a0d      	ldr	r2, [pc, #52]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80079ec:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <FLASH_FlushCaches+0x88>)
 80079fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a02:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <FLASH_FlushCaches+0x88>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <FLASH_FlushCaches+0x88>)
 8007a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a0e:	6013      	str	r3, [r2, #0]
  }
}
 8007a10:	bf00      	nop
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40023c00 	.word	0x40023c00

08007a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b089      	sub	sp, #36	; 0x24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a36:	2300      	movs	r3, #0
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	e16b      	b.n	8007d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	f040 815a 	bne.w	8007d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d005      	beq.n	8007a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d130      	bne.n	8007ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	43db      	mvns	r3, r3
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	4013      	ands	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	091b      	lsrs	r3, r3, #4
 8007abe:	f003 0201 	and.w	r2, r3, #1
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d017      	beq.n	8007b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	2203      	movs	r2, #3
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4013      	ands	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d123      	bne.n	8007b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	08da      	lsrs	r2, r3, #3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3208      	adds	r2, #8
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f003 0307 	and.w	r3, r3, #7
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	220f      	movs	r2, #15
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	08da      	lsrs	r2, r3, #3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3208      	adds	r2, #8
 8007b5e:	69b9      	ldr	r1, [r7, #24]
 8007b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	2203      	movs	r2, #3
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	43db      	mvns	r3, r3
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f003 0203 	and.w	r2, r3, #3
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80b4 	beq.w	8007d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	4b60      	ldr	r3, [pc, #384]	; (8007d2c <HAL_GPIO_Init+0x30c>)
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	4a5f      	ldr	r2, [pc, #380]	; (8007d2c <HAL_GPIO_Init+0x30c>)
 8007bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8007bb6:	4b5d      	ldr	r3, [pc, #372]	; (8007d2c <HAL_GPIO_Init+0x30c>)
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bc2:	4a5b      	ldr	r2, [pc, #364]	; (8007d30 <HAL_GPIO_Init+0x310>)
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	089b      	lsrs	r3, r3, #2
 8007bc8:	3302      	adds	r3, #2
 8007bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	220f      	movs	r2, #15
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43db      	mvns	r3, r3
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	4013      	ands	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a52      	ldr	r2, [pc, #328]	; (8007d34 <HAL_GPIO_Init+0x314>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d02b      	beq.n	8007c46 <HAL_GPIO_Init+0x226>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a51      	ldr	r2, [pc, #324]	; (8007d38 <HAL_GPIO_Init+0x318>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d025      	beq.n	8007c42 <HAL_GPIO_Init+0x222>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a50      	ldr	r2, [pc, #320]	; (8007d3c <HAL_GPIO_Init+0x31c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01f      	beq.n	8007c3e <HAL_GPIO_Init+0x21e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a4f      	ldr	r2, [pc, #316]	; (8007d40 <HAL_GPIO_Init+0x320>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d019      	beq.n	8007c3a <HAL_GPIO_Init+0x21a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a4e      	ldr	r2, [pc, #312]	; (8007d44 <HAL_GPIO_Init+0x324>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <HAL_GPIO_Init+0x216>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a4d      	ldr	r2, [pc, #308]	; (8007d48 <HAL_GPIO_Init+0x328>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00d      	beq.n	8007c32 <HAL_GPIO_Init+0x212>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a4c      	ldr	r2, [pc, #304]	; (8007d4c <HAL_GPIO_Init+0x32c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <HAL_GPIO_Init+0x20e>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a4b      	ldr	r2, [pc, #300]	; (8007d50 <HAL_GPIO_Init+0x330>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d101      	bne.n	8007c2a <HAL_GPIO_Init+0x20a>
 8007c26:	2307      	movs	r3, #7
 8007c28:	e00e      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	e00c      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c2e:	2306      	movs	r3, #6
 8007c30:	e00a      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c32:	2305      	movs	r3, #5
 8007c34:	e008      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c36:	2304      	movs	r3, #4
 8007c38:	e006      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e004      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e002      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <HAL_GPIO_Init+0x228>
 8007c46:	2300      	movs	r3, #0
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	f002 0203 	and.w	r2, r2, #3
 8007c4e:	0092      	lsls	r2, r2, #2
 8007c50:	4093      	lsls	r3, r2
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c58:	4935      	ldr	r1, [pc, #212]	; (8007d30 <HAL_GPIO_Init+0x310>)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	089b      	lsrs	r3, r3, #2
 8007c5e:	3302      	adds	r3, #2
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c66:	4b3b      	ldr	r3, [pc, #236]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	43db      	mvns	r3, r3
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	4013      	ands	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c8a:	4a32      	ldr	r2, [pc, #200]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007c90:	4b30      	ldr	r3, [pc, #192]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cb4:	4a27      	ldr	r2, [pc, #156]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cba:	4b26      	ldr	r3, [pc, #152]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	43db      	mvns	r3, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cde:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ce4:	4b1b      	ldr	r3, [pc, #108]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	43db      	mvns	r3, r3
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d08:	4a12      	ldr	r2, [pc, #72]	; (8007d54 <HAL_GPIO_Init+0x334>)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	3301      	adds	r3, #1
 8007d12:	61fb      	str	r3, [r7, #28]
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	f67f ae90 	bls.w	8007a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3724      	adds	r7, #36	; 0x24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40023800 	.word	0x40023800
 8007d30:	40013800 	.word	0x40013800
 8007d34:	40020000 	.word	0x40020000
 8007d38:	40020400 	.word	0x40020400
 8007d3c:	40020800 	.word	0x40020800
 8007d40:	40020c00 	.word	0x40020c00
 8007d44:	40021000 	.word	0x40021000
 8007d48:	40021400 	.word	0x40021400
 8007d4c:	40021800 	.word	0x40021800
 8007d50:	40021c00 	.word	0x40021c00
 8007d54:	40013c00 	.word	0x40013c00

08007d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	887b      	ldrh	r3, [r7, #2]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
 8007d74:	e001      	b.n	8007d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	807b      	strh	r3, [r7, #2]
 8007d94:	4613      	mov	r3, r2
 8007d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d98:	787b      	ldrb	r3, [r7, #1]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d9e:	887a      	ldrh	r2, [r7, #2]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007da4:	e003      	b.n	8007dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007da6:	887b      	ldrh	r3, [r7, #2]
 8007da8:	041a      	lsls	r2, r3, #16
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	619a      	str	r2, [r3, #24]
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e12b      	b.n	8008026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7fc fd36 	bl	8004854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2224      	movs	r2, #36	; 0x24
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e20:	f000 fd7e 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 8007e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	4a81      	ldr	r2, [pc, #516]	; (8008030 <HAL_I2C_Init+0x274>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d807      	bhi.n	8007e40 <HAL_I2C_Init+0x84>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a80      	ldr	r2, [pc, #512]	; (8008034 <HAL_I2C_Init+0x278>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	bf94      	ite	ls
 8007e38:	2301      	movls	r3, #1
 8007e3a:	2300      	movhi	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	e006      	b.n	8007e4e <HAL_I2C_Init+0x92>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a7d      	ldr	r2, [pc, #500]	; (8008038 <HAL_I2C_Init+0x27c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	bf94      	ite	ls
 8007e48:	2301      	movls	r3, #1
 8007e4a:	2300      	movhi	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e0e7      	b.n	8008026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4a78      	ldr	r2, [pc, #480]	; (800803c <HAL_I2C_Init+0x280>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	0c9b      	lsrs	r3, r3, #18
 8007e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4a6a      	ldr	r2, [pc, #424]	; (8008030 <HAL_I2C_Init+0x274>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d802      	bhi.n	8007e90 <HAL_I2C_Init+0xd4>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	e009      	b.n	8007ea4 <HAL_I2C_Init+0xe8>
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	4a69      	ldr	r2, [pc, #420]	; (8008040 <HAL_I2C_Init+0x284>)
 8007e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea0:	099b      	lsrs	r3, r3, #6
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	495c      	ldr	r1, [pc, #368]	; (8008030 <HAL_I2C_Init+0x274>)
 8007ec0:	428b      	cmp	r3, r1
 8007ec2:	d819      	bhi.n	8007ef8 <HAL_I2C_Init+0x13c>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	1e59      	subs	r1, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ed2:	1c59      	adds	r1, r3, #1
 8007ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ed8:	400b      	ands	r3, r1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <HAL_I2C_Init+0x138>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	1e59      	subs	r1, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007eec:	3301      	adds	r3, #1
 8007eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef2:	e051      	b.n	8007f98 <HAL_I2C_Init+0x1dc>
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	e04f      	b.n	8007f98 <HAL_I2C_Init+0x1dc>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d111      	bne.n	8007f24 <HAL_I2C_Init+0x168>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	1e58      	subs	r0, r3, #1
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6859      	ldr	r1, [r3, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	440b      	add	r3, r1
 8007f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f12:	3301      	adds	r3, #1
 8007f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	e012      	b.n	8007f4a <HAL_I2C_Init+0x18e>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	1e58      	subs	r0, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6859      	ldr	r1, [r3, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	0099      	lsls	r1, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf0c      	ite	eq
 8007f44:	2301      	moveq	r3, #1
 8007f46:	2300      	movne	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <HAL_I2C_Init+0x196>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e022      	b.n	8007f98 <HAL_I2C_Init+0x1dc>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10e      	bne.n	8007f78 <HAL_I2C_Init+0x1bc>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	1e58      	subs	r0, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	440b      	add	r3, r1
 8007f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f76:	e00f      	b.n	8007f98 <HAL_I2C_Init+0x1dc>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	1e58      	subs	r0, r3, #1
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6859      	ldr	r1, [r3, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	0099      	lsls	r1, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	6809      	ldr	r1, [r1, #0]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69da      	ldr	r2, [r3, #28]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6911      	ldr	r1, [r2, #16]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	68d2      	ldr	r2, [r2, #12]
 8007fd2:	4311      	orrs	r1, r2
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695a      	ldr	r2, [r3, #20]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	000186a0 	.word	0x000186a0
 8008034:	001e847f 	.word	0x001e847f
 8008038:	003d08ff 	.word	0x003d08ff
 800803c:	431bde83 	.word	0x431bde83
 8008040:	10624dd3 	.word	0x10624dd3

08008044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e267      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d075      	beq.n	800814e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008062:	4b88      	ldr	r3, [pc, #544]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 030c 	and.w	r3, r3, #12
 800806a:	2b04      	cmp	r3, #4
 800806c:	d00c      	beq.n	8008088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800806e:	4b85      	ldr	r3, [pc, #532]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008076:	2b08      	cmp	r3, #8
 8008078:	d112      	bne.n	80080a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800807a:	4b82      	ldr	r3, [pc, #520]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008086:	d10b      	bne.n	80080a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008088:	4b7e      	ldr	r3, [pc, #504]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d05b      	beq.n	800814c <HAL_RCC_OscConfig+0x108>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d157      	bne.n	800814c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e242      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a8:	d106      	bne.n	80080b8 <HAL_RCC_OscConfig+0x74>
 80080aa:	4b76      	ldr	r3, [pc, #472]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a75      	ldr	r2, [pc, #468]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	e01d      	b.n	80080f4 <HAL_RCC_OscConfig+0xb0>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080c0:	d10c      	bne.n	80080dc <HAL_RCC_OscConfig+0x98>
 80080c2:	4b70      	ldr	r3, [pc, #448]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a6f      	ldr	r2, [pc, #444]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	4b6d      	ldr	r3, [pc, #436]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a6c      	ldr	r2, [pc, #432]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	e00b      	b.n	80080f4 <HAL_RCC_OscConfig+0xb0>
 80080dc:	4b69      	ldr	r3, [pc, #420]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a68      	ldr	r2, [pc, #416]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	4b66      	ldr	r3, [pc, #408]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a65      	ldr	r2, [pc, #404]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80080ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d013      	beq.n	8008124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fc:	f7fe f834 	bl	8006168 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008104:	f7fe f830 	bl	8006168 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b64      	cmp	r3, #100	; 0x64
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e207      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008116:	4b5b      	ldr	r3, [pc, #364]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f0      	beq.n	8008104 <HAL_RCC_OscConfig+0xc0>
 8008122:	e014      	b.n	800814e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008124:	f7fe f820 	bl	8006168 <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800812c:	f7fe f81c 	bl	8006168 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b64      	cmp	r3, #100	; 0x64
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e1f3      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800813e:	4b51      	ldr	r3, [pc, #324]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f0      	bne.n	800812c <HAL_RCC_OscConfig+0xe8>
 800814a:	e000      	b.n	800814e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800814c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d063      	beq.n	8008222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800815a:	4b4a      	ldr	r3, [pc, #296]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008166:	4b47      	ldr	r3, [pc, #284]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800816e:	2b08      	cmp	r3, #8
 8008170:	d11c      	bne.n	80081ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008172:	4b44      	ldr	r3, [pc, #272]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d116      	bne.n	80081ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800817e:	4b41      	ldr	r3, [pc, #260]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_RCC_OscConfig+0x152>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d001      	beq.n	8008196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e1c7      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008196:	4b3b      	ldr	r3, [pc, #236]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	4937      	ldr	r1, [pc, #220]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081aa:	e03a      	b.n	8008222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d020      	beq.n	80081f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081b4:	4b34      	ldr	r3, [pc, #208]	; (8008288 <HAL_RCC_OscConfig+0x244>)
 80081b6:	2201      	movs	r2, #1
 80081b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ba:	f7fd ffd5 	bl	8006168 <HAL_GetTick>
 80081be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c0:	e008      	b.n	80081d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081c2:	f7fd ffd1 	bl	8006168 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e1a8      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081d4:	4b2b      	ldr	r3, [pc, #172]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0f0      	beq.n	80081c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e0:	4b28      	ldr	r3, [pc, #160]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	4925      	ldr	r1, [pc, #148]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	600b      	str	r3, [r1, #0]
 80081f4:	e015      	b.n	8008222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <HAL_RCC_OscConfig+0x244>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fd ffb4 	bl	8006168 <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008204:	f7fd ffb0 	bl	8006168 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e187      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008216:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f0      	bne.n	8008204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0308 	and.w	r3, r3, #8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d036      	beq.n	800829c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d016      	beq.n	8008264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008236:	4b15      	ldr	r3, [pc, #84]	; (800828c <HAL_RCC_OscConfig+0x248>)
 8008238:	2201      	movs	r2, #1
 800823a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823c:	f7fd ff94 	bl	8006168 <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008244:	f7fd ff90 	bl	8006168 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e167      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008256:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <HAL_RCC_OscConfig+0x240>)
 8008258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0f0      	beq.n	8008244 <HAL_RCC_OscConfig+0x200>
 8008262:	e01b      	b.n	800829c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <HAL_RCC_OscConfig+0x248>)
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800826a:	f7fd ff7d 	bl	8006168 <HAL_GetTick>
 800826e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008270:	e00e      	b.n	8008290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008272:	f7fd ff79 	bl	8006168 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d907      	bls.n	8008290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e150      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
 8008284:	40023800 	.word	0x40023800
 8008288:	42470000 	.word	0x42470000
 800828c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008290:	4b88      	ldr	r3, [pc, #544]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1ea      	bne.n	8008272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8097 	beq.w	80083d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ae:	4b81      	ldr	r3, [pc, #516]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10f      	bne.n	80082da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ba:	2300      	movs	r3, #0
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	4b7d      	ldr	r3, [pc, #500]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	4a7c      	ldr	r2, [pc, #496]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80082c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c8:	6413      	str	r3, [r2, #64]	; 0x40
 80082ca:	4b7a      	ldr	r3, [pc, #488]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d2:	60bb      	str	r3, [r7, #8]
 80082d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082d6:	2301      	movs	r3, #1
 80082d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082da:	4b77      	ldr	r3, [pc, #476]	; (80084b8 <HAL_RCC_OscConfig+0x474>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d118      	bne.n	8008318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082e6:	4b74      	ldr	r3, [pc, #464]	; (80084b8 <HAL_RCC_OscConfig+0x474>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a73      	ldr	r2, [pc, #460]	; (80084b8 <HAL_RCC_OscConfig+0x474>)
 80082ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082f2:	f7fd ff39 	bl	8006168 <HAL_GetTick>
 80082f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082f8:	e008      	b.n	800830c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082fa:	f7fd ff35 	bl	8006168 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e10c      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830c:	4b6a      	ldr	r3, [pc, #424]	; (80084b8 <HAL_RCC_OscConfig+0x474>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0f0      	beq.n	80082fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d106      	bne.n	800832e <HAL_RCC_OscConfig+0x2ea>
 8008320:	4b64      	ldr	r3, [pc, #400]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008324:	4a63      	ldr	r2, [pc, #396]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008326:	f043 0301 	orr.w	r3, r3, #1
 800832a:	6713      	str	r3, [r2, #112]	; 0x70
 800832c:	e01c      	b.n	8008368 <HAL_RCC_OscConfig+0x324>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2b05      	cmp	r3, #5
 8008334:	d10c      	bne.n	8008350 <HAL_RCC_OscConfig+0x30c>
 8008336:	4b5f      	ldr	r3, [pc, #380]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833a:	4a5e      	ldr	r2, [pc, #376]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 800833c:	f043 0304 	orr.w	r3, r3, #4
 8008340:	6713      	str	r3, [r2, #112]	; 0x70
 8008342:	4b5c      	ldr	r3, [pc, #368]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	4a5b      	ldr	r2, [pc, #364]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6713      	str	r3, [r2, #112]	; 0x70
 800834e:	e00b      	b.n	8008368 <HAL_RCC_OscConfig+0x324>
 8008350:	4b58      	ldr	r3, [pc, #352]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008354:	4a57      	ldr	r2, [pc, #348]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	6713      	str	r3, [r2, #112]	; 0x70
 800835c:	4b55      	ldr	r3, [pc, #340]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 800835e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008360:	4a54      	ldr	r2, [pc, #336]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008362:	f023 0304 	bic.w	r3, r3, #4
 8008366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d015      	beq.n	800839c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008370:	f7fd fefa 	bl	8006168 <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008376:	e00a      	b.n	800838e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008378:	f7fd fef6 	bl	8006168 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	f241 3288 	movw	r2, #5000	; 0x1388
 8008386:	4293      	cmp	r3, r2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e0cb      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800838e:	4b49      	ldr	r3, [pc, #292]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0ee      	beq.n	8008378 <HAL_RCC_OscConfig+0x334>
 800839a:	e014      	b.n	80083c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800839c:	f7fd fee4 	bl	8006168 <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083a2:	e00a      	b.n	80083ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083a4:	f7fd fee0 	bl	8006168 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e0b5      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083ba:	4b3e      	ldr	r3, [pc, #248]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1ee      	bne.n	80083a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d105      	bne.n	80083d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083cc:	4b39      	ldr	r3, [pc, #228]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	4a38      	ldr	r2, [pc, #224]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80083d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80a1 	beq.w	8008524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083e2:	4b34      	ldr	r3, [pc, #208]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 030c 	and.w	r3, r3, #12
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	d05c      	beq.n	80084a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d141      	bne.n	800847a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f6:	4b31      	ldr	r3, [pc, #196]	; (80084bc <HAL_RCC_OscConfig+0x478>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fc:	f7fd feb4 	bl	8006168 <HAL_GetTick>
 8008400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008404:	f7fd feb0 	bl	8006168 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e087      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008416:	4b27      	ldr	r3, [pc, #156]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f0      	bne.n	8008404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69da      	ldr	r2, [r3, #28]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	019b      	lsls	r3, r3, #6
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	085b      	lsrs	r3, r3, #1
 800843a:	3b01      	subs	r3, #1
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	061b      	lsls	r3, r3, #24
 8008446:	491b      	ldr	r1, [pc, #108]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 8008448:	4313      	orrs	r3, r2
 800844a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800844c:	4b1b      	ldr	r3, [pc, #108]	; (80084bc <HAL_RCC_OscConfig+0x478>)
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008452:	f7fd fe89 	bl	8006168 <HAL_GetTick>
 8008456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800845a:	f7fd fe85 	bl	8006168 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e05c      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800846c:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <HAL_RCC_OscConfig+0x416>
 8008478:	e054      	b.n	8008524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <HAL_RCC_OscConfig+0x478>)
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008480:	f7fd fe72 	bl	8006168 <HAL_GetTick>
 8008484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008486:	e008      	b.n	800849a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008488:	f7fd fe6e 	bl	8006168 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b02      	cmp	r3, #2
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e045      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800849a:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <HAL_RCC_OscConfig+0x470>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f0      	bne.n	8008488 <HAL_RCC_OscConfig+0x444>
 80084a6:	e03d      	b.n	8008524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d107      	bne.n	80084c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e038      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
 80084b4:	40023800 	.word	0x40023800
 80084b8:	40007000 	.word	0x40007000
 80084bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <HAL_RCC_OscConfig+0x4ec>)
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d028      	beq.n	8008520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084d8:	429a      	cmp	r2, r3
 80084da:	d121      	bne.n	8008520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d11a      	bne.n	8008520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084f0:	4013      	ands	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d111      	bne.n	8008520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	085b      	lsrs	r3, r3, #1
 8008508:	3b01      	subs	r3, #1
 800850a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800850c:	429a      	cmp	r2, r3
 800850e:	d107      	bne.n	8008520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800851c:	429a      	cmp	r2, r3
 800851e:	d001      	beq.n	8008524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40023800 	.word	0x40023800

08008534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e0cc      	b.n	80086e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008548:	4b68      	ldr	r3, [pc, #416]	; (80086ec <HAL_RCC_ClockConfig+0x1b8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d90c      	bls.n	8008570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008556:	4b65      	ldr	r3, [pc, #404]	; (80086ec <HAL_RCC_ClockConfig+0x1b8>)
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800855e:	4b63      	ldr	r3, [pc, #396]	; (80086ec <HAL_RCC_ClockConfig+0x1b8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d001      	beq.n	8008570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e0b8      	b.n	80086e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d020      	beq.n	80085be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008588:	4b59      	ldr	r3, [pc, #356]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	4a58      	ldr	r2, [pc, #352]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 800858e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085a0:	4b53      	ldr	r3, [pc, #332]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	4a52      	ldr	r2, [pc, #328]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085ac:	4b50      	ldr	r3, [pc, #320]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	494d      	ldr	r1, [pc, #308]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d044      	beq.n	8008654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d107      	bne.n	80085e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085d2:	4b47      	ldr	r3, [pc, #284]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d119      	bne.n	8008612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e07f      	b.n	80086e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d003      	beq.n	80085f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d107      	bne.n	8008602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f2:	4b3f      	ldr	r3, [pc, #252]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e06f      	b.n	80086e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008602:	4b3b      	ldr	r3, [pc, #236]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e067      	b.n	80086e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008612:	4b37      	ldr	r3, [pc, #220]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f023 0203 	bic.w	r2, r3, #3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	4934      	ldr	r1, [pc, #208]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008620:	4313      	orrs	r3, r2
 8008622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008624:	f7fd fda0 	bl	8006168 <HAL_GetTick>
 8008628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862a:	e00a      	b.n	8008642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800862c:	f7fd fd9c 	bl	8006168 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f241 3288 	movw	r2, #5000	; 0x1388
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e04f      	b.n	80086e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008642:	4b2b      	ldr	r3, [pc, #172]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 020c 	and.w	r2, r3, #12
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	429a      	cmp	r2, r3
 8008652:	d1eb      	bne.n	800862c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008654:	4b25      	ldr	r3, [pc, #148]	; (80086ec <HAL_RCC_ClockConfig+0x1b8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d20c      	bcs.n	800867c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008662:	4b22      	ldr	r3, [pc, #136]	; (80086ec <HAL_RCC_ClockConfig+0x1b8>)
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800866a:	4b20      	ldr	r3, [pc, #128]	; (80086ec <HAL_RCC_ClockConfig+0x1b8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d001      	beq.n	800867c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e032      	b.n	80086e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008688:	4b19      	ldr	r3, [pc, #100]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4916      	ldr	r1, [pc, #88]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008696:	4313      	orrs	r3, r2
 8008698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d009      	beq.n	80086ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086a6:	4b12      	ldr	r3, [pc, #72]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	490e      	ldr	r1, [pc, #56]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086ba:	f000 f821 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	091b      	lsrs	r3, r3, #4
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	490a      	ldr	r1, [pc, #40]	; (80086f4 <HAL_RCC_ClockConfig+0x1c0>)
 80086cc:	5ccb      	ldrb	r3, [r1, r3]
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <HAL_RCC_ClockConfig+0x1c4>)
 80086d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086d6:	4b09      	ldr	r3, [pc, #36]	; (80086fc <HAL_RCC_ClockConfig+0x1c8>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fd fd00 	bl	80060e0 <HAL_InitTick>

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	40023c00 	.word	0x40023c00
 80086f0:	40023800 	.word	0x40023800
 80086f4:	08010bdc 	.word	0x08010bdc
 80086f8:	20000000 	.word	0x20000000
 80086fc:	20000004 	.word	0x20000004

08008700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008704:	b094      	sub	sp, #80	; 0x50
 8008706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	647b      	str	r3, [r7, #68]	; 0x44
 800870c:	2300      	movs	r3, #0
 800870e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008710:	2300      	movs	r3, #0
 8008712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008718:	4b79      	ldr	r3, [pc, #484]	; (8008900 <HAL_RCC_GetSysClockFreq+0x200>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 030c 	and.w	r3, r3, #12
 8008720:	2b08      	cmp	r3, #8
 8008722:	d00d      	beq.n	8008740 <HAL_RCC_GetSysClockFreq+0x40>
 8008724:	2b08      	cmp	r3, #8
 8008726:	f200 80e1 	bhi.w	80088ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <HAL_RCC_GetSysClockFreq+0x34>
 800872e:	2b04      	cmp	r3, #4
 8008730:	d003      	beq.n	800873a <HAL_RCC_GetSysClockFreq+0x3a>
 8008732:	e0db      	b.n	80088ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008734:	4b73      	ldr	r3, [pc, #460]	; (8008904 <HAL_RCC_GetSysClockFreq+0x204>)
 8008736:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008738:	e0db      	b.n	80088f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800873a:	4b72      	ldr	r3, [pc, #456]	; (8008904 <HAL_RCC_GetSysClockFreq+0x204>)
 800873c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800873e:	e0d8      	b.n	80088f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008740:	4b6f      	ldr	r3, [pc, #444]	; (8008900 <HAL_RCC_GetSysClockFreq+0x200>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008748:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800874a:	4b6d      	ldr	r3, [pc, #436]	; (8008900 <HAL_RCC_GetSysClockFreq+0x200>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d063      	beq.n	800881e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008756:	4b6a      	ldr	r3, [pc, #424]	; (8008900 <HAL_RCC_GetSysClockFreq+0x200>)
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	099b      	lsrs	r3, r3, #6
 800875c:	2200      	movs	r2, #0
 800875e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008768:	633b      	str	r3, [r7, #48]	; 0x30
 800876a:	2300      	movs	r3, #0
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
 800876e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	f04f 0000 	mov.w	r0, #0
 800877a:	f04f 0100 	mov.w	r1, #0
 800877e:	0159      	lsls	r1, r3, #5
 8008780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008784:	0150      	lsls	r0, r2, #5
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4621      	mov	r1, r4
 800878c:	1a51      	subs	r1, r2, r1
 800878e:	6139      	str	r1, [r7, #16]
 8008790:	4629      	mov	r1, r5
 8008792:	eb63 0301 	sbc.w	r3, r3, r1
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	f04f 0200 	mov.w	r2, #0
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087a4:	4659      	mov	r1, fp
 80087a6:	018b      	lsls	r3, r1, #6
 80087a8:	4651      	mov	r1, sl
 80087aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087ae:	4651      	mov	r1, sl
 80087b0:	018a      	lsls	r2, r1, #6
 80087b2:	4651      	mov	r1, sl
 80087b4:	ebb2 0801 	subs.w	r8, r2, r1
 80087b8:	4659      	mov	r1, fp
 80087ba:	eb63 0901 	sbc.w	r9, r3, r1
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087d2:	4690      	mov	r8, r2
 80087d4:	4699      	mov	r9, r3
 80087d6:	4623      	mov	r3, r4
 80087d8:	eb18 0303 	adds.w	r3, r8, r3
 80087dc:	60bb      	str	r3, [r7, #8]
 80087de:	462b      	mov	r3, r5
 80087e0:	eb49 0303 	adc.w	r3, r9, r3
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	f04f 0300 	mov.w	r3, #0
 80087ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80087f2:	4629      	mov	r1, r5
 80087f4:	028b      	lsls	r3, r1, #10
 80087f6:	4621      	mov	r1, r4
 80087f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087fc:	4621      	mov	r1, r4
 80087fe:	028a      	lsls	r2, r1, #10
 8008800:	4610      	mov	r0, r2
 8008802:	4619      	mov	r1, r3
 8008804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008806:	2200      	movs	r2, #0
 8008808:	62bb      	str	r3, [r7, #40]	; 0x28
 800880a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800880c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008810:	f7f8 fa3a 	bl	8000c88 <__aeabi_uldivmod>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4613      	mov	r3, r2
 800881a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800881c:	e058      	b.n	80088d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800881e:	4b38      	ldr	r3, [pc, #224]	; (8008900 <HAL_RCC_GetSysClockFreq+0x200>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	099b      	lsrs	r3, r3, #6
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	4611      	mov	r1, r2
 800882a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800882e:	623b      	str	r3, [r7, #32]
 8008830:	2300      	movs	r3, #0
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
 8008834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008838:	4642      	mov	r2, r8
 800883a:	464b      	mov	r3, r9
 800883c:	f04f 0000 	mov.w	r0, #0
 8008840:	f04f 0100 	mov.w	r1, #0
 8008844:	0159      	lsls	r1, r3, #5
 8008846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800884a:	0150      	lsls	r0, r2, #5
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4641      	mov	r1, r8
 8008852:	ebb2 0a01 	subs.w	sl, r2, r1
 8008856:	4649      	mov	r1, r9
 8008858:	eb63 0b01 	sbc.w	fp, r3, r1
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800886c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008870:	ebb2 040a 	subs.w	r4, r2, sl
 8008874:	eb63 050b 	sbc.w	r5, r3, fp
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	00eb      	lsls	r3, r5, #3
 8008882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008886:	00e2      	lsls	r2, r4, #3
 8008888:	4614      	mov	r4, r2
 800888a:	461d      	mov	r5, r3
 800888c:	4643      	mov	r3, r8
 800888e:	18e3      	adds	r3, r4, r3
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	464b      	mov	r3, r9
 8008894:	eb45 0303 	adc.w	r3, r5, r3
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	f04f 0300 	mov.w	r3, #0
 80088a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088a6:	4629      	mov	r1, r5
 80088a8:	028b      	lsls	r3, r1, #10
 80088aa:	4621      	mov	r1, r4
 80088ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088b0:	4621      	mov	r1, r4
 80088b2:	028a      	lsls	r2, r1, #10
 80088b4:	4610      	mov	r0, r2
 80088b6:	4619      	mov	r1, r3
 80088b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ba:	2200      	movs	r2, #0
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	61fa      	str	r2, [r7, #28]
 80088c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088c4:	f7f8 f9e0 	bl	8000c88 <__aeabi_uldivmod>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4613      	mov	r3, r2
 80088ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <HAL_RCC_GetSysClockFreq+0x200>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	3301      	adds	r3, #1
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80088e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088ea:	e002      	b.n	80088f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088ec:	4b05      	ldr	r3, [pc, #20]	; (8008904 <HAL_RCC_GetSysClockFreq+0x204>)
 80088ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3750      	adds	r7, #80	; 0x50
 80088f8:	46bd      	mov	sp, r7
 80088fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fe:	bf00      	nop
 8008900:	40023800 	.word	0x40023800
 8008904:	00f42400 	.word	0x00f42400

08008908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800890c:	4b03      	ldr	r3, [pc, #12]	; (800891c <HAL_RCC_GetHCLKFreq+0x14>)
 800890e:	681b      	ldr	r3, [r3, #0]
}
 8008910:	4618      	mov	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20000000 	.word	0x20000000

08008920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008924:	f7ff fff0 	bl	8008908 <HAL_RCC_GetHCLKFreq>
 8008928:	4602      	mov	r2, r0
 800892a:	4b05      	ldr	r3, [pc, #20]	; (8008940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	0a9b      	lsrs	r3, r3, #10
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	4903      	ldr	r1, [pc, #12]	; (8008944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008936:	5ccb      	ldrb	r3, [r1, r3]
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800893c:	4618      	mov	r0, r3
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40023800 	.word	0x40023800
 8008944:	08010bec 	.word	0x08010bec

08008948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800894c:	f7ff ffdc 	bl	8008908 <HAL_RCC_GetHCLKFreq>
 8008950:	4602      	mov	r2, r0
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	0b5b      	lsrs	r3, r3, #13
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	4903      	ldr	r1, [pc, #12]	; (800896c <HAL_RCC_GetPCLK2Freq+0x24>)
 800895e:	5ccb      	ldrb	r3, [r1, r3]
 8008960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40023800 	.word	0x40023800
 800896c:	08010bec 	.word	0x08010bec

08008970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e07b      	b.n	8008a7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d108      	bne.n	800899c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008992:	d009      	beq.n	80089a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
 800899a:	e005      	b.n	80089a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fb ff8e 	bl	80048e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2c:	ea42 0103 	orr.w	r1, r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	f003 0104 	and.w	r1, r3, #4
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	f003 0210 	and.w	r2, r3, #16
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b088      	sub	sp, #32
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_SPI_Transmit+0x22>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e126      	b.n	8008cf2 <HAL_SPI_Transmit+0x270>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aac:	f7fd fb5c 	bl	8006168 <HAL_GetTick>
 8008ab0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d002      	beq.n	8008ac8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ac6:	e10b      	b.n	8008ce0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <HAL_SPI_Transmit+0x52>
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ad8:	e102      	b.n	8008ce0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2203      	movs	r2, #3
 8008ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	88fa      	ldrh	r2, [r7, #6]
 8008af2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	88fa      	ldrh	r2, [r7, #6]
 8008af8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b20:	d10f      	bne.n	8008b42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4c:	2b40      	cmp	r3, #64	; 0x40
 8008b4e:	d007      	beq.n	8008b60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b68:	d14b      	bne.n	8008c02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_SPI_Transmit+0xf6>
 8008b72:	8afb      	ldrh	r3, [r7, #22]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d13e      	bne.n	8008bf6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	881a      	ldrh	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	1c9a      	adds	r2, r3, #2
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b9c:	e02b      	b.n	8008bf6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d112      	bne.n	8008bd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	881a      	ldrh	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	1c9a      	adds	r2, r3, #2
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bd0:	e011      	b.n	8008bf6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bd2:	f7fd fac9 	bl	8006168 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d803      	bhi.n	8008bea <HAL_SPI_Transmit+0x168>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d102      	bne.n	8008bf0 <HAL_SPI_Transmit+0x16e>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bf4:	e074      	b.n	8008ce0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1ce      	bne.n	8008b9e <HAL_SPI_Transmit+0x11c>
 8008c00:	e04c      	b.n	8008c9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <HAL_SPI_Transmit+0x18e>
 8008c0a:	8afb      	ldrh	r3, [r7, #22]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d140      	bne.n	8008c92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	330c      	adds	r3, #12
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c36:	e02c      	b.n	8008c92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d113      	bne.n	8008c6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c6c:	e011      	b.n	8008c92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c6e:	f7fd fa7b 	bl	8006168 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d803      	bhi.n	8008c86 <HAL_SPI_Transmit+0x204>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c84:	d102      	bne.n	8008c8c <HAL_SPI_Transmit+0x20a>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c90:	e026      	b.n	8008ce0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1cd      	bne.n	8008c38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fbcb 	bl	800943c <SPI_EndRxTxTransaction>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10a      	bne.n	8008cd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cba:	2300      	movs	r3, #0
 8008cbc:	613b      	str	r3, [r7, #16]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	77fb      	strb	r3, [r7, #31]
 8008cdc:	e000      	b.n	8008ce0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b088      	sub	sp, #32
 8008cfe:	af02      	add	r7, sp, #8
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d16:	d112      	bne.n	8008d3e <HAL_SPI_Receive+0x44>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10e      	bne.n	8008d3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2204      	movs	r2, #4
 8008d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d28:	88fa      	ldrh	r2, [r7, #6]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f8f1 	bl	8008f1c <HAL_SPI_TransmitReceive>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	e0ea      	b.n	8008f14 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_SPI_Receive+0x52>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e0e3      	b.n	8008f14 <HAL_SPI_Receive+0x21a>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d54:	f7fd fa08 	bl	8006168 <HAL_GetTick>
 8008d58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d002      	beq.n	8008d6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008d66:	2302      	movs	r3, #2
 8008d68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d6a:	e0ca      	b.n	8008f02 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <HAL_SPI_Receive+0x7e>
 8008d72:	88fb      	ldrh	r3, [r7, #6]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d7c:	e0c1      	b.n	8008f02 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2204      	movs	r2, #4
 8008d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	88fa      	ldrh	r2, [r7, #6]
 8008d96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	88fa      	ldrh	r2, [r7, #6]
 8008d9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc4:	d10f      	bne.n	8008de6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008de4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df0:	2b40      	cmp	r3, #64	; 0x40
 8008df2:	d007      	beq.n	8008e04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d162      	bne.n	8008ed2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e0c:	e02e      	b.n	8008e6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d115      	bne.n	8008e48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f103 020c 	add.w	r2, r3, #12
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e28:	7812      	ldrb	r2, [r2, #0]
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e46:	e011      	b.n	8008e6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e48:	f7fd f98e 	bl	8006168 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d803      	bhi.n	8008e60 <HAL_SPI_Receive+0x166>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5e:	d102      	bne.n	8008e66 <HAL_SPI_Receive+0x16c>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d102      	bne.n	8008e6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e6a:	e04a      	b.n	8008f02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1cb      	bne.n	8008e0e <HAL_SPI_Receive+0x114>
 8008e76:	e031      	b.n	8008edc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d113      	bne.n	8008eae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	b292      	uxth	r2, r2
 8008e92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e98:	1c9a      	adds	r2, r3, #2
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008eac:	e011      	b.n	8008ed2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eae:	f7fd f95b 	bl	8006168 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d803      	bhi.n	8008ec6 <HAL_SPI_Receive+0x1cc>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d102      	bne.n	8008ecc <HAL_SPI_Receive+0x1d2>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d102      	bne.n	8008ed2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ed0:	e017      	b.n	8008f02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1cd      	bne.n	8008e78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fa45 	bl	8009370 <SPI_EndRxTransaction>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]
 8008efe:	e000      	b.n	8008f02 <HAL_SPI_Receive+0x208>
  }

error :
 8008f00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08c      	sub	sp, #48	; 0x30
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d101      	bne.n	8008f42 <HAL_SPI_TransmitReceive+0x26>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e18a      	b.n	8009258 <HAL_SPI_TransmitReceive+0x33c>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f4a:	f7fd f90d 	bl	8006168 <HAL_GetTick>
 8008f4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008f60:	887b      	ldrh	r3, [r7, #2]
 8008f62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d00f      	beq.n	8008f8c <HAL_SPI_TransmitReceive+0x70>
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f72:	d107      	bne.n	8008f84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <HAL_SPI_TransmitReceive+0x68>
 8008f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d003      	beq.n	8008f8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008f84:	2302      	movs	r3, #2
 8008f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f8a:	e15b      	b.n	8009244 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <HAL_SPI_TransmitReceive+0x82>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <HAL_SPI_TransmitReceive+0x82>
 8008f98:	887b      	ldrh	r3, [r7, #2]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d103      	bne.n	8008fa6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008fa4:	e14e      	b.n	8009244 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d003      	beq.n	8008fba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2205      	movs	r2, #5
 8008fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	887a      	ldrh	r2, [r7, #2]
 8008fca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	887a      	ldrh	r2, [r7, #2]
 8008fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	887a      	ldrh	r2, [r7, #2]
 8008fdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	887a      	ldrh	r2, [r7, #2]
 8008fe2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d007      	beq.n	800900e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800900c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009016:	d178      	bne.n	800910a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <HAL_SPI_TransmitReceive+0x10a>
 8009020:	8b7b      	ldrh	r3, [r7, #26]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d166      	bne.n	80090f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	881a      	ldrh	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	1c9a      	adds	r2, r3, #2
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009040:	b29b      	uxth	r3, r3
 8009042:	3b01      	subs	r3, #1
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800904a:	e053      	b.n	80090f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b02      	cmp	r3, #2
 8009058:	d11b      	bne.n	8009092 <HAL_SPI_TransmitReceive+0x176>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800905e:	b29b      	uxth	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d016      	beq.n	8009092 <HAL_SPI_TransmitReceive+0x176>
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d113      	bne.n	8009092 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	881a      	ldrh	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	1c9a      	adds	r2, r3, #2
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b01      	cmp	r3, #1
 800909e:	d119      	bne.n	80090d4 <HAL_SPI_TransmitReceive+0x1b8>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d014      	beq.n	80090d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b4:	b292      	uxth	r2, r2
 80090b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090bc:	1c9a      	adds	r2, r3, #2
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090d0:	2301      	movs	r3, #1
 80090d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80090d4:	f7fd f848 	bl	8006168 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d807      	bhi.n	80090f4 <HAL_SPI_TransmitReceive+0x1d8>
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ea:	d003      	beq.n	80090f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80090f2:	e0a7      	b.n	8009244 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1a6      	bne.n	800904c <HAL_SPI_TransmitReceive+0x130>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009102:	b29b      	uxth	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1a1      	bne.n	800904c <HAL_SPI_TransmitReceive+0x130>
 8009108:	e07c      	b.n	8009204 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <HAL_SPI_TransmitReceive+0x1fc>
 8009112:	8b7b      	ldrh	r3, [r7, #26]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d16b      	bne.n	80091f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	7812      	ldrb	r2, [r2, #0]
 8009124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009134:	b29b      	uxth	r3, r3
 8009136:	3b01      	subs	r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800913e:	e057      	b.n	80091f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b02      	cmp	r3, #2
 800914c:	d11c      	bne.n	8009188 <HAL_SPI_TransmitReceive+0x26c>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009152:	b29b      	uxth	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d017      	beq.n	8009188 <HAL_SPI_TransmitReceive+0x26c>
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	2b01      	cmp	r3, #1
 800915c:	d114      	bne.n	8009188 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	330c      	adds	r3, #12
 8009168:	7812      	ldrb	r2, [r2, #0]
 800916a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800917a:	b29b      	uxth	r3, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b01      	cmp	r3, #1
 8009194:	d119      	bne.n	80091ca <HAL_SPI_TransmitReceive+0x2ae>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800919a:	b29b      	uxth	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d014      	beq.n	80091ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091c6:	2301      	movs	r3, #1
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091ca:	f7fc ffcd 	bl	8006168 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d803      	bhi.n	80091e2 <HAL_SPI_TransmitReceive+0x2c6>
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d102      	bne.n	80091e8 <HAL_SPI_TransmitReceive+0x2cc>
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091ee:	e029      	b.n	8009244 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1a2      	bne.n	8009140 <HAL_SPI_TransmitReceive+0x224>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d19d      	bne.n	8009140 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f917 	bl	800943c <SPI_EndRxTxTransaction>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d006      	beq.n	8009222 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2220      	movs	r2, #32
 800921e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009220:	e010      	b.n	8009244 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10b      	bne.n	8009242 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	617b      	str	r3, [r7, #20]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	e000      	b.n	8009244 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009242:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009254:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009258:	4618      	mov	r0, r3
 800925a:	3730      	adds	r7, #48	; 0x30
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b088      	sub	sp, #32
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009270:	f7fc ff7a 	bl	8006168 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	1a9b      	subs	r3, r3, r2
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4413      	add	r3, r2
 800927e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009280:	f7fc ff72 	bl	8006168 <HAL_GetTick>
 8009284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009286:	4b39      	ldr	r3, [pc, #228]	; (800936c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	015b      	lsls	r3, r3, #5
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	69fa      	ldr	r2, [r7, #28]
 8009290:	fb02 f303 	mul.w	r3, r2, r3
 8009294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009296:	e054      	b.n	8009342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929e:	d050      	beq.n	8009342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092a0:	f7fc ff62 	bl	8006168 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d902      	bls.n	80092b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d13d      	bne.n	8009332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ce:	d111      	bne.n	80092f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092d8:	d004      	beq.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092e2:	d107      	bne.n	80092f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092fc:	d10f      	bne.n	800931e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800931c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e017      	b.n	8009362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	3b01      	subs	r3, #1
 8009340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4013      	ands	r3, r2
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	429a      	cmp	r2, r3
 8009350:	bf0c      	ite	eq
 8009352:	2301      	moveq	r3, #1
 8009354:	2300      	movne	r3, #0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	461a      	mov	r2, r3
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	429a      	cmp	r2, r3
 800935e:	d19b      	bne.n	8009298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000000 	.word	0x20000000

08009370 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af02      	add	r7, sp, #8
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009384:	d111      	bne.n	80093aa <SPI_EndRxTransaction+0x3a>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800938e:	d004      	beq.n	800939a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009398:	d107      	bne.n	80093aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093b2:	d12a      	bne.n	800940a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093bc:	d012      	beq.n	80093e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2200      	movs	r2, #0
 80093c6:	2180      	movs	r1, #128	; 0x80
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7ff ff49 	bl	8009260 <SPI_WaitFlagStateUntilTimeout>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d02d      	beq.n	8009430 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	f043 0220 	orr.w	r2, r3, #32
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e026      	b.n	8009432 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2200      	movs	r2, #0
 80093ec:	2101      	movs	r1, #1
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff ff36 	bl	8009260 <SPI_WaitFlagStateUntilTimeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01a      	beq.n	8009430 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fe:	f043 0220 	orr.w	r2, r3, #32
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e013      	b.n	8009432 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2200      	movs	r2, #0
 8009412:	2101      	movs	r1, #1
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff ff23 	bl	8009260 <SPI_WaitFlagStateUntilTimeout>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d007      	beq.n	8009430 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009424:	f043 0220 	orr.w	r2, r3, #32
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e000      	b.n	8009432 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af02      	add	r7, sp, #8
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009448:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <SPI_EndRxTxTransaction+0x7c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1b      	ldr	r2, [pc, #108]	; (80094bc <SPI_EndRxTxTransaction+0x80>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	0d5b      	lsrs	r3, r3, #21
 8009454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009458:	fb02 f303 	mul.w	r3, r2, r3
 800945c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009466:	d112      	bne.n	800948e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2200      	movs	r2, #0
 8009470:	2180      	movs	r1, #128	; 0x80
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f7ff fef4 	bl	8009260 <SPI_WaitFlagStateUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d016      	beq.n	80094ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009482:	f043 0220 	orr.w	r2, r3, #32
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e00f      	b.n	80094ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	3b01      	subs	r3, #1
 8009498:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a4:	2b80      	cmp	r3, #128	; 0x80
 80094a6:	d0f2      	beq.n	800948e <SPI_EndRxTxTransaction+0x52>
 80094a8:	e000      	b.n	80094ac <SPI_EndRxTxTransaction+0x70>
        break;
 80094aa:	bf00      	nop
  }

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000000 	.word	0x20000000
 80094bc:	165e9f81 	.word	0x165e9f81

080094c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e041      	b.n	8009556 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fb fb02 	bl	8004af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f000 fe12 	bl	800a128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b01      	cmp	r3, #1
 8009572:	d001      	beq.n	8009578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e04e      	b.n	8009616 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68da      	ldr	r2, [r3, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0201 	orr.w	r2, r2, #1
 800958e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a23      	ldr	r2, [pc, #140]	; (8009624 <HAL_TIM_Base_Start_IT+0xc4>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d022      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a2:	d01d      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a1f      	ldr	r2, [pc, #124]	; (8009628 <HAL_TIM_Base_Start_IT+0xc8>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d018      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a1e      	ldr	r2, [pc, #120]	; (800962c <HAL_TIM_Base_Start_IT+0xcc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d013      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a1c      	ldr	r2, [pc, #112]	; (8009630 <HAL_TIM_Base_Start_IT+0xd0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00e      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a1b      	ldr	r2, [pc, #108]	; (8009634 <HAL_TIM_Base_Start_IT+0xd4>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d009      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a19      	ldr	r2, [pc, #100]	; (8009638 <HAL_TIM_Base_Start_IT+0xd8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d004      	beq.n	80095e0 <HAL_TIM_Base_Start_IT+0x80>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a18      	ldr	r2, [pc, #96]	; (800963c <HAL_TIM_Base_Start_IT+0xdc>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d111      	bne.n	8009604 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b06      	cmp	r3, #6
 80095f0:	d010      	beq.n	8009614 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0201 	orr.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009602:	e007      	b.n	8009614 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	40010000 	.word	0x40010000
 8009628:	40000400 	.word	0x40000400
 800962c:	40000800 	.word	0x40000800
 8009630:	40000c00 	.word	0x40000c00
 8009634:	40010400 	.word	0x40010400
 8009638:	40014000 	.word	0x40014000
 800963c:	40001800 	.word	0x40001800

08009640 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 0201 	bic.w	r2, r2, #1
 8009656:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6a1a      	ldr	r2, [r3, #32]
 800965e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009662:	4013      	ands	r3, r2
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10f      	bne.n	8009688 <HAL_TIM_Base_Stop_IT+0x48>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6a1a      	ldr	r2, [r3, #32]
 800966e:	f240 4344 	movw	r3, #1092	; 0x444
 8009672:	4013      	ands	r3, r2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d107      	bne.n	8009688 <HAL_TIM_Base_Stop_IT+0x48>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f022 0201 	bic.w	r2, r2, #1
 8009686:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e041      	b.n	8009734 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7fb f9eb 	bl	8004aa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3304      	adds	r3, #4
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f000 fd23 	bl	800a128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d109      	bne.n	8009760 <HAL_TIM_PWM_Start+0x24>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b01      	cmp	r3, #1
 8009756:	bf14      	ite	ne
 8009758:	2301      	movne	r3, #1
 800975a:	2300      	moveq	r3, #0
 800975c:	b2db      	uxtb	r3, r3
 800975e:	e022      	b.n	80097a6 <HAL_TIM_PWM_Start+0x6a>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b04      	cmp	r3, #4
 8009764:	d109      	bne.n	800977a <HAL_TIM_PWM_Start+0x3e>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b01      	cmp	r3, #1
 8009770:	bf14      	ite	ne
 8009772:	2301      	movne	r3, #1
 8009774:	2300      	moveq	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	e015      	b.n	80097a6 <HAL_TIM_PWM_Start+0x6a>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b08      	cmp	r3, #8
 800977e:	d109      	bne.n	8009794 <HAL_TIM_PWM_Start+0x58>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b01      	cmp	r3, #1
 800978a:	bf14      	ite	ne
 800978c:	2301      	movne	r3, #1
 800978e:	2300      	moveq	r3, #0
 8009790:	b2db      	uxtb	r3, r3
 8009792:	e008      	b.n	80097a6 <HAL_TIM_PWM_Start+0x6a>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b01      	cmp	r3, #1
 800979e:	bf14      	ite	ne
 80097a0:	2301      	movne	r3, #1
 80097a2:	2300      	moveq	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e07c      	b.n	80098a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <HAL_TIM_PWM_Start+0x82>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097bc:	e013      	b.n	80097e6 <HAL_TIM_PWM_Start+0xaa>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d104      	bne.n	80097ce <HAL_TIM_PWM_Start+0x92>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097cc:	e00b      	b.n	80097e6 <HAL_TIM_PWM_Start+0xaa>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d104      	bne.n	80097de <HAL_TIM_PWM_Start+0xa2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2202      	movs	r2, #2
 80097d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097dc:	e003      	b.n	80097e6 <HAL_TIM_PWM_Start+0xaa>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2202      	movs	r2, #2
 80097e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2201      	movs	r2, #1
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 feea 	bl	800a5c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a2d      	ldr	r2, [pc, #180]	; (80098b0 <HAL_TIM_PWM_Start+0x174>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d004      	beq.n	8009808 <HAL_TIM_PWM_Start+0xcc>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a2c      	ldr	r2, [pc, #176]	; (80098b4 <HAL_TIM_PWM_Start+0x178>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d101      	bne.n	800980c <HAL_TIM_PWM_Start+0xd0>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <HAL_TIM_PWM_Start+0xd2>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d007      	beq.n	8009822 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a22      	ldr	r2, [pc, #136]	; (80098b0 <HAL_TIM_PWM_Start+0x174>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d022      	beq.n	8009872 <HAL_TIM_PWM_Start+0x136>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009834:	d01d      	beq.n	8009872 <HAL_TIM_PWM_Start+0x136>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1f      	ldr	r2, [pc, #124]	; (80098b8 <HAL_TIM_PWM_Start+0x17c>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d018      	beq.n	8009872 <HAL_TIM_PWM_Start+0x136>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <HAL_TIM_PWM_Start+0x180>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d013      	beq.n	8009872 <HAL_TIM_PWM_Start+0x136>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1c      	ldr	r2, [pc, #112]	; (80098c0 <HAL_TIM_PWM_Start+0x184>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00e      	beq.n	8009872 <HAL_TIM_PWM_Start+0x136>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a16      	ldr	r2, [pc, #88]	; (80098b4 <HAL_TIM_PWM_Start+0x178>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d009      	beq.n	8009872 <HAL_TIM_PWM_Start+0x136>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a18      	ldr	r2, [pc, #96]	; (80098c4 <HAL_TIM_PWM_Start+0x188>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d004      	beq.n	8009872 <HAL_TIM_PWM_Start+0x136>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a16      	ldr	r2, [pc, #88]	; (80098c8 <HAL_TIM_PWM_Start+0x18c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d111      	bne.n	8009896 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b06      	cmp	r3, #6
 8009882:	d010      	beq.n	80098a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009894:	e007      	b.n	80098a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0201 	orr.w	r2, r2, #1
 80098a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40010000 	.word	0x40010000
 80098b4:	40010400 	.word	0x40010400
 80098b8:	40000400 	.word	0x40000400
 80098bc:	40000800 	.word	0x40000800
 80098c0:	40000c00 	.word	0x40000c00
 80098c4:	40014000 	.word	0x40014000
 80098c8:	40001800 	.word	0x40001800

080098cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fe72 	bl	800a5c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a2e      	ldr	r2, [pc, #184]	; (80099a4 <HAL_TIM_PWM_Stop+0xd8>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d004      	beq.n	80098f8 <HAL_TIM_PWM_Stop+0x2c>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a2d      	ldr	r2, [pc, #180]	; (80099a8 <HAL_TIM_PWM_Stop+0xdc>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d101      	bne.n	80098fc <HAL_TIM_PWM_Stop+0x30>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <HAL_TIM_PWM_Stop+0x32>
 80098fc:	2300      	movs	r3, #0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d017      	beq.n	8009932 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6a1a      	ldr	r2, [r3, #32]
 8009908:	f241 1311 	movw	r3, #4369	; 0x1111
 800990c:	4013      	ands	r3, r2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10f      	bne.n	8009932 <HAL_TIM_PWM_Stop+0x66>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6a1a      	ldr	r2, [r3, #32]
 8009918:	f240 4344 	movw	r3, #1092	; 0x444
 800991c:	4013      	ands	r3, r2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d107      	bne.n	8009932 <HAL_TIM_PWM_Stop+0x66>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6a1a      	ldr	r2, [r3, #32]
 8009938:	f241 1311 	movw	r3, #4369	; 0x1111
 800993c:	4013      	ands	r3, r2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10f      	bne.n	8009962 <HAL_TIM_PWM_Stop+0x96>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6a1a      	ldr	r2, [r3, #32]
 8009948:	f240 4344 	movw	r3, #1092	; 0x444
 800994c:	4013      	ands	r3, r2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d107      	bne.n	8009962 <HAL_TIM_PWM_Stop+0x96>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0201 	bic.w	r2, r2, #1
 8009960:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <HAL_TIM_PWM_Stop+0xa6>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009970:	e013      	b.n	800999a <HAL_TIM_PWM_Stop+0xce>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b04      	cmp	r3, #4
 8009976:	d104      	bne.n	8009982 <HAL_TIM_PWM_Stop+0xb6>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009980:	e00b      	b.n	800999a <HAL_TIM_PWM_Stop+0xce>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b08      	cmp	r3, #8
 8009986:	d104      	bne.n	8009992 <HAL_TIM_PWM_Stop+0xc6>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009990:	e003      	b.n	800999a <HAL_TIM_PWM_Stop+0xce>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40010400 	.word	0x40010400

080099ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e097      	b.n	8009af0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d106      	bne.n	80099da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7fa ffcd 	bl	8004974 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2202      	movs	r2, #2
 80099de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099f0:	f023 0307 	bic.w	r3, r3, #7
 80099f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3304      	adds	r3, #4
 80099fe:	4619      	mov	r1, r3
 8009a00:	4610      	mov	r0, r2
 8009a02:	f000 fb91 	bl	800a128 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a2e:	f023 0303 	bic.w	r3, r3, #3
 8009a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	689a      	ldr	r2, [r3, #8]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	021b      	lsls	r3, r3, #8
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009a4c:	f023 030c 	bic.w	r3, r3, #12
 8009a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	021b      	lsls	r3, r3, #8
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	011a      	lsls	r2, r3, #4
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	031b      	lsls	r3, r3, #12
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009a92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	011b      	lsls	r3, r3, #4
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d110      	bne.n	8009b4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d102      	bne.n	8009b34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b2e:	7b7b      	ldrb	r3, [r7, #13]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d001      	beq.n	8009b38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e069      	b.n	8009c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b48:	e031      	b.n	8009bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d110      	bne.n	8009b72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d102      	bne.n	8009b5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b56:	7b3b      	ldrb	r3, [r7, #12]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d001      	beq.n	8009b60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e055      	b.n	8009c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b70:	e01d      	b.n	8009bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d108      	bne.n	8009b8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d105      	bne.n	8009b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b7e:	7b7b      	ldrb	r3, [r7, #13]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d102      	bne.n	8009b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b84:	7b3b      	ldrb	r3, [r7, #12]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d001      	beq.n	8009b8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e03e      	b.n	8009c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2202      	movs	r2, #2
 8009b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <HAL_TIM_Encoder_Start+0xc4>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d008      	beq.n	8009bcc <HAL_TIM_Encoder_Start+0xd4>
 8009bba:	e00f      	b.n	8009bdc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fcff 	bl	800a5c8 <TIM_CCxChannelCmd>
      break;
 8009bca:	e016      	b.n	8009bfa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 fcf7 	bl	800a5c8 <TIM_CCxChannelCmd>
      break;
 8009bda:	e00e      	b.n	8009bfa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2201      	movs	r2, #1
 8009be2:	2100      	movs	r1, #0
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fcef 	bl	800a5c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	2104      	movs	r1, #4
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fce8 	bl	800a5c8 <TIM_CCxChannelCmd>
      break;
 8009bf8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0201 	orr.w	r2, r2, #1
 8009c08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <HAL_TIM_Encoder_Stop+0x18>
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d008      	beq.n	8009c3c <HAL_TIM_Encoder_Stop+0x28>
 8009c2a:	e00f      	b.n	8009c4c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fcc7 	bl	800a5c8 <TIM_CCxChannelCmd>
      break;
 8009c3a:	e016      	b.n	8009c6a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2200      	movs	r2, #0
 8009c42:	2104      	movs	r1, #4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 fcbf 	bl	800a5c8 <TIM_CCxChannelCmd>
      break;
 8009c4a:	e00e      	b.n	8009c6a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2200      	movs	r2, #0
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fcb7 	bl	800a5c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2104      	movs	r1, #4
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fcb0 	bl	800a5c8 <TIM_CCxChannelCmd>
      break;
 8009c68:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6a1a      	ldr	r2, [r3, #32]
 8009c70:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c74:	4013      	ands	r3, r2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10f      	bne.n	8009c9a <HAL_TIM_Encoder_Stop+0x86>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6a1a      	ldr	r2, [r3, #32]
 8009c80:	f240 4344 	movw	r3, #1092	; 0x444
 8009c84:	4013      	ands	r3, r2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d107      	bne.n	8009c9a <HAL_TIM_Encoder_Stop+0x86>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0201 	bic.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <HAL_TIM_Encoder_Stop+0x92>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d138      	bne.n	8009d18 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <HAL_TIM_Encoder_Stop+0xa2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cb4:	e013      	b.n	8009cde <HAL_TIM_Encoder_Stop+0xca>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	d104      	bne.n	8009cc6 <HAL_TIM_Encoder_Stop+0xb2>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc4:	e00b      	b.n	8009cde <HAL_TIM_Encoder_Stop+0xca>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d104      	bne.n	8009cd6 <HAL_TIM_Encoder_Stop+0xc2>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd4:	e003      	b.n	8009cde <HAL_TIM_Encoder_Stop+0xca>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d104      	bne.n	8009cee <HAL_TIM_Encoder_Stop+0xda>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cec:	e024      	b.n	8009d38 <HAL_TIM_Encoder_Stop+0x124>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d104      	bne.n	8009cfe <HAL_TIM_Encoder_Stop+0xea>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cfc:	e01c      	b.n	8009d38 <HAL_TIM_Encoder_Stop+0x124>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d104      	bne.n	8009d0e <HAL_TIM_Encoder_Stop+0xfa>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d0c:	e014      	b.n	8009d38 <HAL_TIM_Encoder_Stop+0x124>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d16:	e00f      	b.n	8009d38 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d122      	bne.n	8009d9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f003 0302 	and.w	r3, r3, #2
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d11b      	bne.n	8009d9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f06f 0202 	mvn.w	r2, #2
 8009d6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	f003 0303 	and.w	r3, r3, #3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f9b1 	bl	800a0ec <HAL_TIM_IC_CaptureCallback>
 8009d8a:	e005      	b.n	8009d98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f9a3 	bl	800a0d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f9b4 	bl	800a100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d122      	bne.n	8009df2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f003 0304 	and.w	r3, r3, #4
 8009db6:	2b04      	cmp	r3, #4
 8009db8:	d11b      	bne.n	8009df2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f06f 0204 	mvn.w	r2, #4
 8009dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f987 	bl	800a0ec <HAL_TIM_IC_CaptureCallback>
 8009dde:	e005      	b.n	8009dec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f979 	bl	800a0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f98a 	bl	800a100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f003 0308 	and.w	r3, r3, #8
 8009dfc:	2b08      	cmp	r3, #8
 8009dfe:	d122      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b08      	cmp	r3, #8
 8009e0c:	d11b      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f06f 0208 	mvn.w	r2, #8
 8009e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2204      	movs	r2, #4
 8009e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f95d 	bl	800a0ec <HAL_TIM_IC_CaptureCallback>
 8009e32:	e005      	b.n	8009e40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f94f 	bl	800a0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f960 	bl	800a100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f003 0310 	and.w	r3, r3, #16
 8009e50:	2b10      	cmp	r3, #16
 8009e52:	d122      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b10      	cmp	r3, #16
 8009e60:	d11b      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f06f 0210 	mvn.w	r2, #16
 8009e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2208      	movs	r2, #8
 8009e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f933 	bl	800a0ec <HAL_TIM_IC_CaptureCallback>
 8009e86:	e005      	b.n	8009e94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f925 	bl	800a0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f936 	bl	800a100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d10e      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d107      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f06f 0201 	mvn.w	r2, #1
 8009ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7f9 f92d 	bl	8003120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed0:	2b80      	cmp	r3, #128	; 0x80
 8009ed2:	d10e      	bne.n	8009ef2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ede:	2b80      	cmp	r3, #128	; 0x80
 8009ee0:	d107      	bne.n	8009ef2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fc17 	bl	800a720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efc:	2b40      	cmp	r3, #64	; 0x40
 8009efe:	d10e      	bne.n	8009f1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0a:	2b40      	cmp	r3, #64	; 0x40
 8009f0c:	d107      	bne.n	8009f1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f8fb 	bl	800a114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f003 0320 	and.w	r3, r3, #32
 8009f28:	2b20      	cmp	r3, #32
 8009f2a:	d10e      	bne.n	8009f4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d107      	bne.n	8009f4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f06f 0220 	mvn.w	r2, #32
 8009f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fbe1 	bl	800a70c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e0ae      	b.n	800a0d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b0c      	cmp	r3, #12
 8009f7e:	f200 809f 	bhi.w	800a0c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f82:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fbd 	.word	0x08009fbd
 8009f8c:	0800a0c1 	.word	0x0800a0c1
 8009f90:	0800a0c1 	.word	0x0800a0c1
 8009f94:	0800a0c1 	.word	0x0800a0c1
 8009f98:	08009ffd 	.word	0x08009ffd
 8009f9c:	0800a0c1 	.word	0x0800a0c1
 8009fa0:	0800a0c1 	.word	0x0800a0c1
 8009fa4:	0800a0c1 	.word	0x0800a0c1
 8009fa8:	0800a03f 	.word	0x0800a03f
 8009fac:	0800a0c1 	.word	0x0800a0c1
 8009fb0:	0800a0c1 	.word	0x0800a0c1
 8009fb4:	0800a0c1 	.word	0x0800a0c1
 8009fb8:	0800a07f 	.word	0x0800a07f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68b9      	ldr	r1, [r7, #8]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f950 	bl	800a268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f042 0208 	orr.w	r2, r2, #8
 8009fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699a      	ldr	r2, [r3, #24]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f022 0204 	bic.w	r2, r2, #4
 8009fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6999      	ldr	r1, [r3, #24]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	619a      	str	r2, [r3, #24]
      break;
 8009ffa:	e064      	b.n	800a0c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68b9      	ldr	r1, [r7, #8]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f9a0 	bl	800a348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	699a      	ldr	r2, [r3, #24]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	699a      	ldr	r2, [r3, #24]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6999      	ldr	r1, [r3, #24]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	021a      	lsls	r2, r3, #8
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	619a      	str	r2, [r3, #24]
      break;
 800a03c:	e043      	b.n	800a0c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f9f5 	bl	800a434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69da      	ldr	r2, [r3, #28]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f042 0208 	orr.w	r2, r2, #8
 800a058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	69da      	ldr	r2, [r3, #28]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 0204 	bic.w	r2, r2, #4
 800a068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	69d9      	ldr	r1, [r3, #28]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	691a      	ldr	r2, [r3, #16]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	61da      	str	r2, [r3, #28]
      break;
 800a07c:	e023      	b.n	800a0c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	4618      	mov	r0, r3
 800a086:	f000 fa49 	bl	800a51c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	69da      	ldr	r2, [r3, #28]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	69da      	ldr	r2, [r3, #28]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69d9      	ldr	r1, [r3, #28]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	021a      	lsls	r2, r3, #8
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	61da      	str	r2, [r3, #28]
      break;
 800a0be:	e002      	b.n	800a0c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a40      	ldr	r2, [pc, #256]	; (800a23c <TIM_Base_SetConfig+0x114>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d013      	beq.n	800a168 <TIM_Base_SetConfig+0x40>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a146:	d00f      	beq.n	800a168 <TIM_Base_SetConfig+0x40>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a3d      	ldr	r2, [pc, #244]	; (800a240 <TIM_Base_SetConfig+0x118>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d00b      	beq.n	800a168 <TIM_Base_SetConfig+0x40>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a3c      	ldr	r2, [pc, #240]	; (800a244 <TIM_Base_SetConfig+0x11c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d007      	beq.n	800a168 <TIM_Base_SetConfig+0x40>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a3b      	ldr	r2, [pc, #236]	; (800a248 <TIM_Base_SetConfig+0x120>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d003      	beq.n	800a168 <TIM_Base_SetConfig+0x40>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a3a      	ldr	r2, [pc, #232]	; (800a24c <TIM_Base_SetConfig+0x124>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d108      	bne.n	800a17a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a2f      	ldr	r2, [pc, #188]	; (800a23c <TIM_Base_SetConfig+0x114>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d02b      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a188:	d027      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a2c      	ldr	r2, [pc, #176]	; (800a240 <TIM_Base_SetConfig+0x118>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d023      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a2b      	ldr	r2, [pc, #172]	; (800a244 <TIM_Base_SetConfig+0x11c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d01f      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a2a      	ldr	r2, [pc, #168]	; (800a248 <TIM_Base_SetConfig+0x120>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d01b      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a29      	ldr	r2, [pc, #164]	; (800a24c <TIM_Base_SetConfig+0x124>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d017      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a28      	ldr	r2, [pc, #160]	; (800a250 <TIM_Base_SetConfig+0x128>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d013      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a27      	ldr	r2, [pc, #156]	; (800a254 <TIM_Base_SetConfig+0x12c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00f      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a26      	ldr	r2, [pc, #152]	; (800a258 <TIM_Base_SetConfig+0x130>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00b      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a25      	ldr	r2, [pc, #148]	; (800a25c <TIM_Base_SetConfig+0x134>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d007      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a24      	ldr	r2, [pc, #144]	; (800a260 <TIM_Base_SetConfig+0x138>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d003      	beq.n	800a1da <TIM_Base_SetConfig+0xb2>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a23      	ldr	r2, [pc, #140]	; (800a264 <TIM_Base_SetConfig+0x13c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d108      	bne.n	800a1ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0a      	ldr	r2, [pc, #40]	; (800a23c <TIM_Base_SetConfig+0x114>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d003      	beq.n	800a220 <TIM_Base_SetConfig+0xf8>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a0c      	ldr	r2, [pc, #48]	; (800a24c <TIM_Base_SetConfig+0x124>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d103      	bne.n	800a228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	691a      	ldr	r2, [r3, #16]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	615a      	str	r2, [r3, #20]
}
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	40010000 	.word	0x40010000
 800a240:	40000400 	.word	0x40000400
 800a244:	40000800 	.word	0x40000800
 800a248:	40000c00 	.word	0x40000c00
 800a24c:	40010400 	.word	0x40010400
 800a250:	40014000 	.word	0x40014000
 800a254:	40014400 	.word	0x40014400
 800a258:	40014800 	.word	0x40014800
 800a25c:	40001800 	.word	0x40001800
 800a260:	40001c00 	.word	0x40001c00
 800a264:	40002000 	.word	0x40002000

0800a268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f023 0201 	bic.w	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f023 0303 	bic.w	r3, r3, #3
 800a29e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f023 0302 	bic.w	r3, r3, #2
 800a2b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a20      	ldr	r2, [pc, #128]	; (800a340 <TIM_OC1_SetConfig+0xd8>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d003      	beq.n	800a2cc <TIM_OC1_SetConfig+0x64>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a1f      	ldr	r2, [pc, #124]	; (800a344 <TIM_OC1_SetConfig+0xdc>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d10c      	bne.n	800a2e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f023 0308 	bic.w	r3, r3, #8
 800a2d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f023 0304 	bic.w	r3, r3, #4
 800a2e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a15      	ldr	r2, [pc, #84]	; (800a340 <TIM_OC1_SetConfig+0xd8>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d003      	beq.n	800a2f6 <TIM_OC1_SetConfig+0x8e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a14      	ldr	r2, [pc, #80]	; (800a344 <TIM_OC1_SetConfig+0xdc>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d111      	bne.n	800a31a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4313      	orrs	r3, r2
 800a318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	621a      	str	r2, [r3, #32]
}
 800a334:	bf00      	nop
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	40010000 	.word	0x40010000
 800a344:	40010400 	.word	0x40010400

0800a348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f023 0210 	bic.w	r2, r3, #16
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f023 0320 	bic.w	r3, r3, #32
 800a392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a22      	ldr	r2, [pc, #136]	; (800a42c <TIM_OC2_SetConfig+0xe4>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d003      	beq.n	800a3b0 <TIM_OC2_SetConfig+0x68>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a21      	ldr	r2, [pc, #132]	; (800a430 <TIM_OC2_SetConfig+0xe8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d10d      	bne.n	800a3cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	011b      	lsls	r3, r3, #4
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a17      	ldr	r2, [pc, #92]	; (800a42c <TIM_OC2_SetConfig+0xe4>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d003      	beq.n	800a3dc <TIM_OC2_SetConfig+0x94>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a16      	ldr	r2, [pc, #88]	; (800a430 <TIM_OC2_SetConfig+0xe8>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d113      	bne.n	800a404 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	621a      	str	r2, [r3, #32]
}
 800a41e:	bf00      	nop
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	40010000 	.word	0x40010000
 800a430:	40010400 	.word	0x40010400

0800a434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f023 0303 	bic.w	r3, r3, #3
 800a46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	4313      	orrs	r3, r2
 800a474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a47c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a21      	ldr	r2, [pc, #132]	; (800a514 <TIM_OC3_SetConfig+0xe0>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d003      	beq.n	800a49a <TIM_OC3_SetConfig+0x66>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a20      	ldr	r2, [pc, #128]	; (800a518 <TIM_OC3_SetConfig+0xe4>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d10d      	bne.n	800a4b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a16      	ldr	r2, [pc, #88]	; (800a514 <TIM_OC3_SetConfig+0xe0>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d003      	beq.n	800a4c6 <TIM_OC3_SetConfig+0x92>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a15      	ldr	r2, [pc, #84]	; (800a518 <TIM_OC3_SetConfig+0xe4>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d113      	bne.n	800a4ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	621a      	str	r2, [r3, #32]
}
 800a508:	bf00      	nop
 800a50a:	371c      	adds	r7, #28
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	40010000 	.word	0x40010000
 800a518:	40010400 	.word	0x40010400

0800a51c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	031b      	lsls	r3, r3, #12
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a12      	ldr	r2, [pc, #72]	; (800a5c0 <TIM_OC4_SetConfig+0xa4>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d003      	beq.n	800a584 <TIM_OC4_SetConfig+0x68>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a11      	ldr	r2, [pc, #68]	; (800a5c4 <TIM_OC4_SetConfig+0xa8>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d109      	bne.n	800a598 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a58a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	019b      	lsls	r3, r3, #6
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	4313      	orrs	r3, r2
 800a596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	621a      	str	r2, [r3, #32]
}
 800a5b2:	bf00      	nop
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	40010000 	.word	0x40010000
 800a5c4:	40010400 	.word	0x40010400

0800a5c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f003 031f 	and.w	r3, r3, #31
 800a5da:	2201      	movs	r2, #1
 800a5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a1a      	ldr	r2, [r3, #32]
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	43db      	mvns	r3, r3
 800a5ea:	401a      	ands	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a1a      	ldr	r2, [r3, #32]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f003 031f 	and.w	r3, r3, #31
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a600:	431a      	orrs	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	621a      	str	r2, [r3, #32]
}
 800a606:	bf00      	nop
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a628:	2302      	movs	r3, #2
 800a62a:	e05a      	b.n	800a6e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a21      	ldr	r2, [pc, #132]	; (800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d022      	beq.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a678:	d01d      	beq.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a1d      	ldr	r2, [pc, #116]	; (800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d018      	beq.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a1b      	ldr	r2, [pc, #108]	; (800a6f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d013      	beq.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a1a      	ldr	r2, [pc, #104]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d00e      	beq.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a18      	ldr	r2, [pc, #96]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d009      	beq.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a17      	ldr	r2, [pc, #92]	; (800a704 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d004      	beq.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a15      	ldr	r2, [pc, #84]	; (800a708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d10c      	bne.n	800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	40010000 	.word	0x40010000
 800a6f4:	40000400 	.word	0x40000400
 800a6f8:	40000800 	.word	0x40000800
 800a6fc:	40000c00 	.word	0x40000c00
 800a700:	40010400 	.word	0x40010400
 800a704:	40014000 	.word	0x40014000
 800a708:	40001800 	.word	0x40001800

0800a70c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e03f      	b.n	800a7c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fa fa9a 	bl	8004c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2224      	movs	r2, #36	; 0x24
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f929 	bl	800a9d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	691a      	ldr	r2, [r3, #16]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a78c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695a      	ldr	r2, [r3, #20]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a79c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68da      	ldr	r2, [r3, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b08a      	sub	sp, #40	; 0x28
 800a7d2:	af02      	add	r7, sp, #8
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	603b      	str	r3, [r7, #0]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	d17c      	bne.n	800a8e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <HAL_UART_Transmit+0x2c>
 800a7f4:	88fb      	ldrh	r3, [r7, #6]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e075      	b.n	800a8ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_UART_Transmit+0x3e>
 800a808:	2302      	movs	r3, #2
 800a80a:	e06e      	b.n	800a8ea <HAL_UART_Transmit+0x11c>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2221      	movs	r2, #33	; 0x21
 800a81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a822:	f7fb fca1 	bl	8006168 <HAL_GetTick>
 800a826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	88fa      	ldrh	r2, [r7, #6]
 800a82c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	88fa      	ldrh	r2, [r7, #6]
 800a832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a83c:	d108      	bne.n	800a850 <HAL_UART_Transmit+0x82>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d104      	bne.n	800a850 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a846:	2300      	movs	r3, #0
 800a848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	e003      	b.n	800a858 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a854:	2300      	movs	r3, #0
 800a856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a860:	e02a      	b.n	800a8b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2200      	movs	r2, #0
 800a86a:	2180      	movs	r1, #128	; 0x80
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f000 f840 	bl	800a8f2 <UART_WaitOnFlagUntilTimeout>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e036      	b.n	800a8ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10b      	bne.n	800a89a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	3302      	adds	r3, #2
 800a896:	61bb      	str	r3, [r7, #24]
 800a898:	e007      	b.n	800a8aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	781a      	ldrb	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1cf      	bne.n	800a862 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2140      	movs	r1, #64	; 0x40
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 f810 	bl	800a8f2 <UART_WaitOnFlagUntilTimeout>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e006      	b.n	800a8ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e000      	b.n	800a8ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a8e8:	2302      	movs	r3, #2
  }
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3720      	adds	r7, #32
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b090      	sub	sp, #64	; 0x40
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4613      	mov	r3, r2
 800a900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a902:	e050      	b.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90a:	d04c      	beq.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d007      	beq.n	800a922 <UART_WaitOnFlagUntilTimeout+0x30>
 800a912:	f7fb fc29 	bl	8006168 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a91e:	429a      	cmp	r2, r3
 800a920:	d241      	bcs.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	330c      	adds	r3, #12
 800a928:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	330c      	adds	r3, #12
 800a940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a942:	637a      	str	r2, [r7, #52]	; 0x34
 800a944:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a94a:	e841 2300 	strex	r3, r2, [r1]
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1e5      	bne.n	800a922 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3314      	adds	r3, #20
 800a95c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	613b      	str	r3, [r7, #16]
   return(result);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f023 0301 	bic.w	r3, r3, #1
 800a96c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3314      	adds	r3, #20
 800a974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a976:	623a      	str	r2, [r7, #32]
 800a978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	69f9      	ldr	r1, [r7, #28]
 800a97c:	6a3a      	ldr	r2, [r7, #32]
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	61bb      	str	r3, [r7, #24]
   return(result);
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e5      	bne.n	800a956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2220      	movs	r2, #32
 800a98e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2220      	movs	r2, #32
 800a996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e00f      	b.n	800a9c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	bf0c      	ite	eq
 800a9b6:	2301      	moveq	r3, #1
 800a9b8:	2300      	movne	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	461a      	mov	r2, r3
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d09f      	beq.n	800a904 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3740      	adds	r7, #64	; 0x40
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9d4:	b0c0      	sub	sp, #256	; 0x100
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ec:	68d9      	ldr	r1, [r3, #12]
 800a9ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	ea40 0301 	orr.w	r3, r0, r1
 800a9f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	431a      	orrs	r2, r3
 800aa08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aa28:	f021 010c 	bic.w	r1, r1, #12
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa36:	430b      	orrs	r3, r1
 800aa38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aa46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa4a:	6999      	ldr	r1, [r3, #24]
 800aa4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	ea40 0301 	orr.w	r3, r0, r1
 800aa56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	4b8f      	ldr	r3, [pc, #572]	; (800ac9c <UART_SetConfig+0x2cc>)
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d005      	beq.n	800aa70 <UART_SetConfig+0xa0>
 800aa64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	4b8d      	ldr	r3, [pc, #564]	; (800aca0 <UART_SetConfig+0x2d0>)
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d104      	bne.n	800aa7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa70:	f7fd ff6a 	bl	8008948 <HAL_RCC_GetPCLK2Freq>
 800aa74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aa78:	e003      	b.n	800aa82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa7a:	f7fd ff51 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 800aa7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8c:	f040 810c 	bne.w	800aca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa94:	2200      	movs	r2, #0
 800aa96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	1891      	adds	r1, r2, r2
 800aaa8:	65b9      	str	r1, [r7, #88]	; 0x58
 800aaaa:	415b      	adcs	r3, r3
 800aaac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aaae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aab2:	4621      	mov	r1, r4
 800aab4:	eb12 0801 	adds.w	r8, r2, r1
 800aab8:	4629      	mov	r1, r5
 800aaba:	eb43 0901 	adc.w	r9, r3, r1
 800aabe:	f04f 0200 	mov.w	r2, #0
 800aac2:	f04f 0300 	mov.w	r3, #0
 800aac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aaca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aad2:	4690      	mov	r8, r2
 800aad4:	4699      	mov	r9, r3
 800aad6:	4623      	mov	r3, r4
 800aad8:	eb18 0303 	adds.w	r3, r8, r3
 800aadc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aae0:	462b      	mov	r3, r5
 800aae2:	eb49 0303 	adc.w	r3, r9, r3
 800aae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aaea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aaf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aafa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aafe:	460b      	mov	r3, r1
 800ab00:	18db      	adds	r3, r3, r3
 800ab02:	653b      	str	r3, [r7, #80]	; 0x50
 800ab04:	4613      	mov	r3, r2
 800ab06:	eb42 0303 	adc.w	r3, r2, r3
 800ab0a:	657b      	str	r3, [r7, #84]	; 0x54
 800ab0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ab10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ab14:	f7f6 f8b8 	bl	8000c88 <__aeabi_uldivmod>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4b61      	ldr	r3, [pc, #388]	; (800aca4 <UART_SetConfig+0x2d4>)
 800ab1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab22:	095b      	lsrs	r3, r3, #5
 800ab24:	011c      	lsls	r4, r3, #4
 800ab26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ab34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ab38:	4642      	mov	r2, r8
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	1891      	adds	r1, r2, r2
 800ab3e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ab40:	415b      	adcs	r3, r3
 800ab42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ab48:	4641      	mov	r1, r8
 800ab4a:	eb12 0a01 	adds.w	sl, r2, r1
 800ab4e:	4649      	mov	r1, r9
 800ab50:	eb43 0b01 	adc.w	fp, r3, r1
 800ab54:	f04f 0200 	mov.w	r2, #0
 800ab58:	f04f 0300 	mov.w	r3, #0
 800ab5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab68:	4692      	mov	sl, r2
 800ab6a:	469b      	mov	fp, r3
 800ab6c:	4643      	mov	r3, r8
 800ab6e:	eb1a 0303 	adds.w	r3, sl, r3
 800ab72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab76:	464b      	mov	r3, r9
 800ab78:	eb4b 0303 	adc.w	r3, fp, r3
 800ab7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab94:	460b      	mov	r3, r1
 800ab96:	18db      	adds	r3, r3, r3
 800ab98:	643b      	str	r3, [r7, #64]	; 0x40
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	eb42 0303 	adc.w	r3, r2, r3
 800aba0:	647b      	str	r3, [r7, #68]	; 0x44
 800aba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800abaa:	f7f6 f86d 	bl	8000c88 <__aeabi_uldivmod>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4611      	mov	r1, r2
 800abb4:	4b3b      	ldr	r3, [pc, #236]	; (800aca4 <UART_SetConfig+0x2d4>)
 800abb6:	fba3 2301 	umull	r2, r3, r3, r1
 800abba:	095b      	lsrs	r3, r3, #5
 800abbc:	2264      	movs	r2, #100	; 0x64
 800abbe:	fb02 f303 	mul.w	r3, r2, r3
 800abc2:	1acb      	subs	r3, r1, r3
 800abc4:	00db      	lsls	r3, r3, #3
 800abc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800abca:	4b36      	ldr	r3, [pc, #216]	; (800aca4 <UART_SetConfig+0x2d4>)
 800abcc:	fba3 2302 	umull	r2, r3, r3, r2
 800abd0:	095b      	lsrs	r3, r3, #5
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800abd8:	441c      	add	r4, r3
 800abda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800abe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800abec:	4642      	mov	r2, r8
 800abee:	464b      	mov	r3, r9
 800abf0:	1891      	adds	r1, r2, r2
 800abf2:	63b9      	str	r1, [r7, #56]	; 0x38
 800abf4:	415b      	adcs	r3, r3
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800abfc:	4641      	mov	r1, r8
 800abfe:	1851      	adds	r1, r2, r1
 800ac00:	6339      	str	r1, [r7, #48]	; 0x30
 800ac02:	4649      	mov	r1, r9
 800ac04:	414b      	adcs	r3, r1
 800ac06:	637b      	str	r3, [r7, #52]	; 0x34
 800ac08:	f04f 0200 	mov.w	r2, #0
 800ac0c:	f04f 0300 	mov.w	r3, #0
 800ac10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ac14:	4659      	mov	r1, fp
 800ac16:	00cb      	lsls	r3, r1, #3
 800ac18:	4651      	mov	r1, sl
 800ac1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac1e:	4651      	mov	r1, sl
 800ac20:	00ca      	lsls	r2, r1, #3
 800ac22:	4610      	mov	r0, r2
 800ac24:	4619      	mov	r1, r3
 800ac26:	4603      	mov	r3, r0
 800ac28:	4642      	mov	r2, r8
 800ac2a:	189b      	adds	r3, r3, r2
 800ac2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac30:	464b      	mov	r3, r9
 800ac32:	460a      	mov	r2, r1
 800ac34:	eb42 0303 	adc.w	r3, r2, r3
 800ac38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ac48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ac4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ac50:	460b      	mov	r3, r1
 800ac52:	18db      	adds	r3, r3, r3
 800ac54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac56:	4613      	mov	r3, r2
 800ac58:	eb42 0303 	adc.w	r3, r2, r3
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ac62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ac66:	f7f6 f80f 	bl	8000c88 <__aeabi_uldivmod>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <UART_SetConfig+0x2d4>)
 800ac70:	fba3 1302 	umull	r1, r3, r3, r2
 800ac74:	095b      	lsrs	r3, r3, #5
 800ac76:	2164      	movs	r1, #100	; 0x64
 800ac78:	fb01 f303 	mul.w	r3, r1, r3
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	3332      	adds	r3, #50	; 0x32
 800ac82:	4a08      	ldr	r2, [pc, #32]	; (800aca4 <UART_SetConfig+0x2d4>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	f003 0207 	and.w	r2, r3, #7
 800ac8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4422      	add	r2, r4
 800ac96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac98:	e105      	b.n	800aea6 <UART_SetConfig+0x4d6>
 800ac9a:	bf00      	nop
 800ac9c:	40011000 	.word	0x40011000
 800aca0:	40011400 	.word	0x40011400
 800aca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acac:	2200      	movs	r2, #0
 800acae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800acb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800acb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800acba:	4642      	mov	r2, r8
 800acbc:	464b      	mov	r3, r9
 800acbe:	1891      	adds	r1, r2, r2
 800acc0:	6239      	str	r1, [r7, #32]
 800acc2:	415b      	adcs	r3, r3
 800acc4:	627b      	str	r3, [r7, #36]	; 0x24
 800acc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acca:	4641      	mov	r1, r8
 800accc:	1854      	adds	r4, r2, r1
 800acce:	4649      	mov	r1, r9
 800acd0:	eb43 0501 	adc.w	r5, r3, r1
 800acd4:	f04f 0200 	mov.w	r2, #0
 800acd8:	f04f 0300 	mov.w	r3, #0
 800acdc:	00eb      	lsls	r3, r5, #3
 800acde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ace2:	00e2      	lsls	r2, r4, #3
 800ace4:	4614      	mov	r4, r2
 800ace6:	461d      	mov	r5, r3
 800ace8:	4643      	mov	r3, r8
 800acea:	18e3      	adds	r3, r4, r3
 800acec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800acf0:	464b      	mov	r3, r9
 800acf2:	eb45 0303 	adc.w	r3, r5, r3
 800acf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800acfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad0a:	f04f 0200 	mov.w	r2, #0
 800ad0e:	f04f 0300 	mov.w	r3, #0
 800ad12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ad16:	4629      	mov	r1, r5
 800ad18:	008b      	lsls	r3, r1, #2
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad20:	4621      	mov	r1, r4
 800ad22:	008a      	lsls	r2, r1, #2
 800ad24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ad28:	f7f5 ffae 	bl	8000c88 <__aeabi_uldivmod>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4b60      	ldr	r3, [pc, #384]	; (800aeb4 <UART_SetConfig+0x4e4>)
 800ad32:	fba3 2302 	umull	r2, r3, r3, r2
 800ad36:	095b      	lsrs	r3, r3, #5
 800ad38:	011c      	lsls	r4, r3, #4
 800ad3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ad44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ad4c:	4642      	mov	r2, r8
 800ad4e:	464b      	mov	r3, r9
 800ad50:	1891      	adds	r1, r2, r2
 800ad52:	61b9      	str	r1, [r7, #24]
 800ad54:	415b      	adcs	r3, r3
 800ad56:	61fb      	str	r3, [r7, #28]
 800ad58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad5c:	4641      	mov	r1, r8
 800ad5e:	1851      	adds	r1, r2, r1
 800ad60:	6139      	str	r1, [r7, #16]
 800ad62:	4649      	mov	r1, r9
 800ad64:	414b      	adcs	r3, r1
 800ad66:	617b      	str	r3, [r7, #20]
 800ad68:	f04f 0200 	mov.w	r2, #0
 800ad6c:	f04f 0300 	mov.w	r3, #0
 800ad70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad74:	4659      	mov	r1, fp
 800ad76:	00cb      	lsls	r3, r1, #3
 800ad78:	4651      	mov	r1, sl
 800ad7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad7e:	4651      	mov	r1, sl
 800ad80:	00ca      	lsls	r2, r1, #3
 800ad82:	4610      	mov	r0, r2
 800ad84:	4619      	mov	r1, r3
 800ad86:	4603      	mov	r3, r0
 800ad88:	4642      	mov	r2, r8
 800ad8a:	189b      	adds	r3, r3, r2
 800ad8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad90:	464b      	mov	r3, r9
 800ad92:	460a      	mov	r2, r1
 800ad94:	eb42 0303 	adc.w	r3, r2, r3
 800ad98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	67bb      	str	r3, [r7, #120]	; 0x78
 800ada6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ada8:	f04f 0200 	mov.w	r2, #0
 800adac:	f04f 0300 	mov.w	r3, #0
 800adb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800adb4:	4649      	mov	r1, r9
 800adb6:	008b      	lsls	r3, r1, #2
 800adb8:	4641      	mov	r1, r8
 800adba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adbe:	4641      	mov	r1, r8
 800adc0:	008a      	lsls	r2, r1, #2
 800adc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800adc6:	f7f5 ff5f 	bl	8000c88 <__aeabi_uldivmod>
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4b39      	ldr	r3, [pc, #228]	; (800aeb4 <UART_SetConfig+0x4e4>)
 800add0:	fba3 1302 	umull	r1, r3, r3, r2
 800add4:	095b      	lsrs	r3, r3, #5
 800add6:	2164      	movs	r1, #100	; 0x64
 800add8:	fb01 f303 	mul.w	r3, r1, r3
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	3332      	adds	r3, #50	; 0x32
 800ade2:	4a34      	ldr	r2, [pc, #208]	; (800aeb4 <UART_SetConfig+0x4e4>)
 800ade4:	fba2 2303 	umull	r2, r3, r2, r3
 800ade8:	095b      	lsrs	r3, r3, #5
 800adea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adee:	441c      	add	r4, r3
 800adf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adf4:	2200      	movs	r2, #0
 800adf6:	673b      	str	r3, [r7, #112]	; 0x70
 800adf8:	677a      	str	r2, [r7, #116]	; 0x74
 800adfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800adfe:	4642      	mov	r2, r8
 800ae00:	464b      	mov	r3, r9
 800ae02:	1891      	adds	r1, r2, r2
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	415b      	adcs	r3, r3
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae0e:	4641      	mov	r1, r8
 800ae10:	1851      	adds	r1, r2, r1
 800ae12:	6039      	str	r1, [r7, #0]
 800ae14:	4649      	mov	r1, r9
 800ae16:	414b      	adcs	r3, r1
 800ae18:	607b      	str	r3, [r7, #4]
 800ae1a:	f04f 0200 	mov.w	r2, #0
 800ae1e:	f04f 0300 	mov.w	r3, #0
 800ae22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae26:	4659      	mov	r1, fp
 800ae28:	00cb      	lsls	r3, r1, #3
 800ae2a:	4651      	mov	r1, sl
 800ae2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae30:	4651      	mov	r1, sl
 800ae32:	00ca      	lsls	r2, r1, #3
 800ae34:	4610      	mov	r0, r2
 800ae36:	4619      	mov	r1, r3
 800ae38:	4603      	mov	r3, r0
 800ae3a:	4642      	mov	r2, r8
 800ae3c:	189b      	adds	r3, r3, r2
 800ae3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae40:	464b      	mov	r3, r9
 800ae42:	460a      	mov	r2, r1
 800ae44:	eb42 0303 	adc.w	r3, r2, r3
 800ae48:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	663b      	str	r3, [r7, #96]	; 0x60
 800ae54:	667a      	str	r2, [r7, #100]	; 0x64
 800ae56:	f04f 0200 	mov.w	r2, #0
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ae62:	4649      	mov	r1, r9
 800ae64:	008b      	lsls	r3, r1, #2
 800ae66:	4641      	mov	r1, r8
 800ae68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae6c:	4641      	mov	r1, r8
 800ae6e:	008a      	lsls	r2, r1, #2
 800ae70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ae74:	f7f5 ff08 	bl	8000c88 <__aeabi_uldivmod>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <UART_SetConfig+0x4e4>)
 800ae7e:	fba3 1302 	umull	r1, r3, r3, r2
 800ae82:	095b      	lsrs	r3, r3, #5
 800ae84:	2164      	movs	r1, #100	; 0x64
 800ae86:	fb01 f303 	mul.w	r3, r1, r3
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	3332      	adds	r3, #50	; 0x32
 800ae90:	4a08      	ldr	r2, [pc, #32]	; (800aeb4 <UART_SetConfig+0x4e4>)
 800ae92:	fba2 2303 	umull	r2, r3, r2, r3
 800ae96:	095b      	lsrs	r3, r3, #5
 800ae98:	f003 020f 	and.w	r2, r3, #15
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4422      	add	r2, r4
 800aea4:	609a      	str	r2, [r3, #8]
}
 800aea6:	bf00      	nop
 800aea8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aeac:	46bd      	mov	sp, r7
 800aeae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aeb2:	bf00      	nop
 800aeb4:	51eb851f 	.word	0x51eb851f

0800aeb8 <__errno>:
 800aeb8:	4b01      	ldr	r3, [pc, #4]	; (800aec0 <__errno+0x8>)
 800aeba:	6818      	ldr	r0, [r3, #0]
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	2000000c 	.word	0x2000000c

0800aec4 <__libc_init_array>:
 800aec4:	b570      	push	{r4, r5, r6, lr}
 800aec6:	4d0d      	ldr	r5, [pc, #52]	; (800aefc <__libc_init_array+0x38>)
 800aec8:	4c0d      	ldr	r4, [pc, #52]	; (800af00 <__libc_init_array+0x3c>)
 800aeca:	1b64      	subs	r4, r4, r5
 800aecc:	10a4      	asrs	r4, r4, #2
 800aece:	2600      	movs	r6, #0
 800aed0:	42a6      	cmp	r6, r4
 800aed2:	d109      	bne.n	800aee8 <__libc_init_array+0x24>
 800aed4:	4d0b      	ldr	r5, [pc, #44]	; (800af04 <__libc_init_array+0x40>)
 800aed6:	4c0c      	ldr	r4, [pc, #48]	; (800af08 <__libc_init_array+0x44>)
 800aed8:	f005 fc64 	bl	80107a4 <_init>
 800aedc:	1b64      	subs	r4, r4, r5
 800aede:	10a4      	asrs	r4, r4, #2
 800aee0:	2600      	movs	r6, #0
 800aee2:	42a6      	cmp	r6, r4
 800aee4:	d105      	bne.n	800aef2 <__libc_init_array+0x2e>
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeec:	4798      	blx	r3
 800aeee:	3601      	adds	r6, #1
 800aef0:	e7ee      	b.n	800aed0 <__libc_init_array+0xc>
 800aef2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef6:	4798      	blx	r3
 800aef8:	3601      	adds	r6, #1
 800aefa:	e7f2      	b.n	800aee2 <__libc_init_array+0x1e>
 800aefc:	080110e8 	.word	0x080110e8
 800af00:	080110e8 	.word	0x080110e8
 800af04:	080110e8 	.word	0x080110e8
 800af08:	080110ec 	.word	0x080110ec

0800af0c <memcpy>:
 800af0c:	440a      	add	r2, r1
 800af0e:	4291      	cmp	r1, r2
 800af10:	f100 33ff 	add.w	r3, r0, #4294967295
 800af14:	d100      	bne.n	800af18 <memcpy+0xc>
 800af16:	4770      	bx	lr
 800af18:	b510      	push	{r4, lr}
 800af1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af22:	4291      	cmp	r1, r2
 800af24:	d1f9      	bne.n	800af1a <memcpy+0xe>
 800af26:	bd10      	pop	{r4, pc}

0800af28 <memset>:
 800af28:	4402      	add	r2, r0
 800af2a:	4603      	mov	r3, r0
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d100      	bne.n	800af32 <memset+0xa>
 800af30:	4770      	bx	lr
 800af32:	f803 1b01 	strb.w	r1, [r3], #1
 800af36:	e7f9      	b.n	800af2c <memset+0x4>

0800af38 <__cvt>:
 800af38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	ec55 4b10 	vmov	r4, r5, d0
 800af40:	2d00      	cmp	r5, #0
 800af42:	460e      	mov	r6, r1
 800af44:	4619      	mov	r1, r3
 800af46:	462b      	mov	r3, r5
 800af48:	bfbb      	ittet	lt
 800af4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af4e:	461d      	movlt	r5, r3
 800af50:	2300      	movge	r3, #0
 800af52:	232d      	movlt	r3, #45	; 0x2d
 800af54:	700b      	strb	r3, [r1, #0]
 800af56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af5c:	4691      	mov	r9, r2
 800af5e:	f023 0820 	bic.w	r8, r3, #32
 800af62:	bfbc      	itt	lt
 800af64:	4622      	movlt	r2, r4
 800af66:	4614      	movlt	r4, r2
 800af68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af6c:	d005      	beq.n	800af7a <__cvt+0x42>
 800af6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af72:	d100      	bne.n	800af76 <__cvt+0x3e>
 800af74:	3601      	adds	r6, #1
 800af76:	2102      	movs	r1, #2
 800af78:	e000      	b.n	800af7c <__cvt+0x44>
 800af7a:	2103      	movs	r1, #3
 800af7c:	ab03      	add	r3, sp, #12
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	ab02      	add	r3, sp, #8
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	ec45 4b10 	vmov	d0, r4, r5
 800af88:	4653      	mov	r3, sl
 800af8a:	4632      	mov	r2, r6
 800af8c:	f001 fefc 	bl	800cd88 <_dtoa_r>
 800af90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af94:	4607      	mov	r7, r0
 800af96:	d102      	bne.n	800af9e <__cvt+0x66>
 800af98:	f019 0f01 	tst.w	r9, #1
 800af9c:	d022      	beq.n	800afe4 <__cvt+0xac>
 800af9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afa2:	eb07 0906 	add.w	r9, r7, r6
 800afa6:	d110      	bne.n	800afca <__cvt+0x92>
 800afa8:	783b      	ldrb	r3, [r7, #0]
 800afaa:	2b30      	cmp	r3, #48	; 0x30
 800afac:	d10a      	bne.n	800afc4 <__cvt+0x8c>
 800afae:	2200      	movs	r2, #0
 800afb0:	2300      	movs	r3, #0
 800afb2:	4620      	mov	r0, r4
 800afb4:	4629      	mov	r1, r5
 800afb6:	f7f5 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 800afba:	b918      	cbnz	r0, 800afc4 <__cvt+0x8c>
 800afbc:	f1c6 0601 	rsb	r6, r6, #1
 800afc0:	f8ca 6000 	str.w	r6, [sl]
 800afc4:	f8da 3000 	ldr.w	r3, [sl]
 800afc8:	4499      	add	r9, r3
 800afca:	2200      	movs	r2, #0
 800afcc:	2300      	movs	r3, #0
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 800afd6:	b108      	cbz	r0, 800afdc <__cvt+0xa4>
 800afd8:	f8cd 900c 	str.w	r9, [sp, #12]
 800afdc:	2230      	movs	r2, #48	; 0x30
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	454b      	cmp	r3, r9
 800afe2:	d307      	bcc.n	800aff4 <__cvt+0xbc>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afe8:	1bdb      	subs	r3, r3, r7
 800afea:	4638      	mov	r0, r7
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	b004      	add	sp, #16
 800aff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff4:	1c59      	adds	r1, r3, #1
 800aff6:	9103      	str	r1, [sp, #12]
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	e7f0      	b.n	800afde <__cvt+0xa6>

0800affc <__exponent>:
 800affc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800affe:	4603      	mov	r3, r0
 800b000:	2900      	cmp	r1, #0
 800b002:	bfb8      	it	lt
 800b004:	4249      	neglt	r1, r1
 800b006:	f803 2b02 	strb.w	r2, [r3], #2
 800b00a:	bfb4      	ite	lt
 800b00c:	222d      	movlt	r2, #45	; 0x2d
 800b00e:	222b      	movge	r2, #43	; 0x2b
 800b010:	2909      	cmp	r1, #9
 800b012:	7042      	strb	r2, [r0, #1]
 800b014:	dd2a      	ble.n	800b06c <__exponent+0x70>
 800b016:	f10d 0407 	add.w	r4, sp, #7
 800b01a:	46a4      	mov	ip, r4
 800b01c:	270a      	movs	r7, #10
 800b01e:	46a6      	mov	lr, r4
 800b020:	460a      	mov	r2, r1
 800b022:	fb91 f6f7 	sdiv	r6, r1, r7
 800b026:	fb07 1516 	mls	r5, r7, r6, r1
 800b02a:	3530      	adds	r5, #48	; 0x30
 800b02c:	2a63      	cmp	r2, #99	; 0x63
 800b02e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b032:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b036:	4631      	mov	r1, r6
 800b038:	dcf1      	bgt.n	800b01e <__exponent+0x22>
 800b03a:	3130      	adds	r1, #48	; 0x30
 800b03c:	f1ae 0502 	sub.w	r5, lr, #2
 800b040:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b044:	1c44      	adds	r4, r0, #1
 800b046:	4629      	mov	r1, r5
 800b048:	4561      	cmp	r1, ip
 800b04a:	d30a      	bcc.n	800b062 <__exponent+0x66>
 800b04c:	f10d 0209 	add.w	r2, sp, #9
 800b050:	eba2 020e 	sub.w	r2, r2, lr
 800b054:	4565      	cmp	r5, ip
 800b056:	bf88      	it	hi
 800b058:	2200      	movhi	r2, #0
 800b05a:	4413      	add	r3, r2
 800b05c:	1a18      	subs	r0, r3, r0
 800b05e:	b003      	add	sp, #12
 800b060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b066:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b06a:	e7ed      	b.n	800b048 <__exponent+0x4c>
 800b06c:	2330      	movs	r3, #48	; 0x30
 800b06e:	3130      	adds	r1, #48	; 0x30
 800b070:	7083      	strb	r3, [r0, #2]
 800b072:	70c1      	strb	r1, [r0, #3]
 800b074:	1d03      	adds	r3, r0, #4
 800b076:	e7f1      	b.n	800b05c <__exponent+0x60>

0800b078 <_printf_float>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	ed2d 8b02 	vpush	{d8}
 800b080:	b08d      	sub	sp, #52	; 0x34
 800b082:	460c      	mov	r4, r1
 800b084:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b088:	4616      	mov	r6, r2
 800b08a:	461f      	mov	r7, r3
 800b08c:	4605      	mov	r5, r0
 800b08e:	f003 f98f 	bl	800e3b0 <_localeconv_r>
 800b092:	f8d0 a000 	ldr.w	sl, [r0]
 800b096:	4650      	mov	r0, sl
 800b098:	f7f5 f89a 	bl	80001d0 <strlen>
 800b09c:	2300      	movs	r3, #0
 800b09e:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b0ac:	3307      	adds	r3, #7
 800b0ae:	f023 0307 	bic.w	r3, r3, #7
 800b0b2:	f103 0208 	add.w	r2, r3, #8
 800b0b6:	f8c8 2000 	str.w	r2, [r8]
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b0c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b0c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0ca:	9307      	str	r3, [sp, #28]
 800b0cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b0d0:	ee08 0a10 	vmov	s16, r0
 800b0d4:	4b9f      	ldr	r3, [pc, #636]	; (800b354 <_printf_float+0x2dc>)
 800b0d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	f7f5 fd25 	bl	8000b2c <__aeabi_dcmpun>
 800b0e2:	bb88      	cbnz	r0, 800b148 <_printf_float+0xd0>
 800b0e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0e8:	4b9a      	ldr	r3, [pc, #616]	; (800b354 <_printf_float+0x2dc>)
 800b0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ee:	f7f5 fcff 	bl	8000af0 <__aeabi_dcmple>
 800b0f2:	bb48      	cbnz	r0, 800b148 <_printf_float+0xd0>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	f7f5 fcee 	bl	8000adc <__aeabi_dcmplt>
 800b100:	b110      	cbz	r0, 800b108 <_printf_float+0x90>
 800b102:	232d      	movs	r3, #45	; 0x2d
 800b104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b108:	4b93      	ldr	r3, [pc, #588]	; (800b358 <_printf_float+0x2e0>)
 800b10a:	4894      	ldr	r0, [pc, #592]	; (800b35c <_printf_float+0x2e4>)
 800b10c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b110:	bf94      	ite	ls
 800b112:	4698      	movls	r8, r3
 800b114:	4680      	movhi	r8, r0
 800b116:	2303      	movs	r3, #3
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	9b05      	ldr	r3, [sp, #20]
 800b11c:	f023 0204 	bic.w	r2, r3, #4
 800b120:	6022      	str	r2, [r4, #0]
 800b122:	f04f 0900 	mov.w	r9, #0
 800b126:	9700      	str	r7, [sp, #0]
 800b128:	4633      	mov	r3, r6
 800b12a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b12c:	4621      	mov	r1, r4
 800b12e:	4628      	mov	r0, r5
 800b130:	f000 f9d8 	bl	800b4e4 <_printf_common>
 800b134:	3001      	adds	r0, #1
 800b136:	f040 8090 	bne.w	800b25a <_printf_float+0x1e2>
 800b13a:	f04f 30ff 	mov.w	r0, #4294967295
 800b13e:	b00d      	add	sp, #52	; 0x34
 800b140:	ecbd 8b02 	vpop	{d8}
 800b144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b148:	4642      	mov	r2, r8
 800b14a:	464b      	mov	r3, r9
 800b14c:	4640      	mov	r0, r8
 800b14e:	4649      	mov	r1, r9
 800b150:	f7f5 fcec 	bl	8000b2c <__aeabi_dcmpun>
 800b154:	b140      	cbz	r0, 800b168 <_printf_float+0xf0>
 800b156:	464b      	mov	r3, r9
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bfbc      	itt	lt
 800b15c:	232d      	movlt	r3, #45	; 0x2d
 800b15e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b162:	487f      	ldr	r0, [pc, #508]	; (800b360 <_printf_float+0x2e8>)
 800b164:	4b7f      	ldr	r3, [pc, #508]	; (800b364 <_printf_float+0x2ec>)
 800b166:	e7d1      	b.n	800b10c <_printf_float+0x94>
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b16e:	9206      	str	r2, [sp, #24]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	d13f      	bne.n	800b1f4 <_printf_float+0x17c>
 800b174:	2306      	movs	r3, #6
 800b176:	6063      	str	r3, [r4, #4]
 800b178:	9b05      	ldr	r3, [sp, #20]
 800b17a:	6861      	ldr	r1, [r4, #4]
 800b17c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b180:	2300      	movs	r3, #0
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	ab0a      	add	r3, sp, #40	; 0x28
 800b186:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b18a:	ab09      	add	r3, sp, #36	; 0x24
 800b18c:	ec49 8b10 	vmov	d0, r8, r9
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	6022      	str	r2, [r4, #0]
 800b194:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b198:	4628      	mov	r0, r5
 800b19a:	f7ff fecd 	bl	800af38 <__cvt>
 800b19e:	9b06      	ldr	r3, [sp, #24]
 800b1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1a2:	2b47      	cmp	r3, #71	; 0x47
 800b1a4:	4680      	mov	r8, r0
 800b1a6:	d108      	bne.n	800b1ba <_printf_float+0x142>
 800b1a8:	1cc8      	adds	r0, r1, #3
 800b1aa:	db02      	blt.n	800b1b2 <_printf_float+0x13a>
 800b1ac:	6863      	ldr	r3, [r4, #4]
 800b1ae:	4299      	cmp	r1, r3
 800b1b0:	dd41      	ble.n	800b236 <_printf_float+0x1be>
 800b1b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b1b6:	fa5f fb8b 	uxtb.w	fp, fp
 800b1ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1be:	d820      	bhi.n	800b202 <_printf_float+0x18a>
 800b1c0:	3901      	subs	r1, #1
 800b1c2:	465a      	mov	r2, fp
 800b1c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b1c8:	9109      	str	r1, [sp, #36]	; 0x24
 800b1ca:	f7ff ff17 	bl	800affc <__exponent>
 800b1ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1d0:	1813      	adds	r3, r2, r0
 800b1d2:	2a01      	cmp	r2, #1
 800b1d4:	4681      	mov	r9, r0
 800b1d6:	6123      	str	r3, [r4, #16]
 800b1d8:	dc02      	bgt.n	800b1e0 <_printf_float+0x168>
 800b1da:	6822      	ldr	r2, [r4, #0]
 800b1dc:	07d2      	lsls	r2, r2, #31
 800b1de:	d501      	bpl.n	800b1e4 <_printf_float+0x16c>
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	6123      	str	r3, [r4, #16]
 800b1e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d09c      	beq.n	800b126 <_printf_float+0xae>
 800b1ec:	232d      	movs	r3, #45	; 0x2d
 800b1ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1f2:	e798      	b.n	800b126 <_printf_float+0xae>
 800b1f4:	9a06      	ldr	r2, [sp, #24]
 800b1f6:	2a47      	cmp	r2, #71	; 0x47
 800b1f8:	d1be      	bne.n	800b178 <_printf_float+0x100>
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1bc      	bne.n	800b178 <_printf_float+0x100>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e7b9      	b.n	800b176 <_printf_float+0xfe>
 800b202:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b206:	d118      	bne.n	800b23a <_printf_float+0x1c2>
 800b208:	2900      	cmp	r1, #0
 800b20a:	6863      	ldr	r3, [r4, #4]
 800b20c:	dd0b      	ble.n	800b226 <_printf_float+0x1ae>
 800b20e:	6121      	str	r1, [r4, #16]
 800b210:	b913      	cbnz	r3, 800b218 <_printf_float+0x1a0>
 800b212:	6822      	ldr	r2, [r4, #0]
 800b214:	07d0      	lsls	r0, r2, #31
 800b216:	d502      	bpl.n	800b21e <_printf_float+0x1a6>
 800b218:	3301      	adds	r3, #1
 800b21a:	440b      	add	r3, r1
 800b21c:	6123      	str	r3, [r4, #16]
 800b21e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b220:	f04f 0900 	mov.w	r9, #0
 800b224:	e7de      	b.n	800b1e4 <_printf_float+0x16c>
 800b226:	b913      	cbnz	r3, 800b22e <_printf_float+0x1b6>
 800b228:	6822      	ldr	r2, [r4, #0]
 800b22a:	07d2      	lsls	r2, r2, #31
 800b22c:	d501      	bpl.n	800b232 <_printf_float+0x1ba>
 800b22e:	3302      	adds	r3, #2
 800b230:	e7f4      	b.n	800b21c <_printf_float+0x1a4>
 800b232:	2301      	movs	r3, #1
 800b234:	e7f2      	b.n	800b21c <_printf_float+0x1a4>
 800b236:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23c:	4299      	cmp	r1, r3
 800b23e:	db05      	blt.n	800b24c <_printf_float+0x1d4>
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	6121      	str	r1, [r4, #16]
 800b244:	07d8      	lsls	r0, r3, #31
 800b246:	d5ea      	bpl.n	800b21e <_printf_float+0x1a6>
 800b248:	1c4b      	adds	r3, r1, #1
 800b24a:	e7e7      	b.n	800b21c <_printf_float+0x1a4>
 800b24c:	2900      	cmp	r1, #0
 800b24e:	bfd4      	ite	le
 800b250:	f1c1 0202 	rsble	r2, r1, #2
 800b254:	2201      	movgt	r2, #1
 800b256:	4413      	add	r3, r2
 800b258:	e7e0      	b.n	800b21c <_printf_float+0x1a4>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	055a      	lsls	r2, r3, #21
 800b25e:	d407      	bmi.n	800b270 <_printf_float+0x1f8>
 800b260:	6923      	ldr	r3, [r4, #16]
 800b262:	4642      	mov	r2, r8
 800b264:	4631      	mov	r1, r6
 800b266:	4628      	mov	r0, r5
 800b268:	47b8      	blx	r7
 800b26a:	3001      	adds	r0, #1
 800b26c:	d12c      	bne.n	800b2c8 <_printf_float+0x250>
 800b26e:	e764      	b.n	800b13a <_printf_float+0xc2>
 800b270:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b274:	f240 80e0 	bls.w	800b438 <_printf_float+0x3c0>
 800b278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b27c:	2200      	movs	r2, #0
 800b27e:	2300      	movs	r3, #0
 800b280:	f7f5 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800b284:	2800      	cmp	r0, #0
 800b286:	d034      	beq.n	800b2f2 <_printf_float+0x27a>
 800b288:	4a37      	ldr	r2, [pc, #220]	; (800b368 <_printf_float+0x2f0>)
 800b28a:	2301      	movs	r3, #1
 800b28c:	4631      	mov	r1, r6
 800b28e:	4628      	mov	r0, r5
 800b290:	47b8      	blx	r7
 800b292:	3001      	adds	r0, #1
 800b294:	f43f af51 	beq.w	800b13a <_printf_float+0xc2>
 800b298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b29c:	429a      	cmp	r2, r3
 800b29e:	db02      	blt.n	800b2a6 <_printf_float+0x22e>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	07d8      	lsls	r0, r3, #31
 800b2a4:	d510      	bpl.n	800b2c8 <_printf_float+0x250>
 800b2a6:	ee18 3a10 	vmov	r3, s16
 800b2aa:	4652      	mov	r2, sl
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	47b8      	blx	r7
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	f43f af41 	beq.w	800b13a <_printf_float+0xc2>
 800b2b8:	f04f 0800 	mov.w	r8, #0
 800b2bc:	f104 091a 	add.w	r9, r4, #26
 800b2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	4543      	cmp	r3, r8
 800b2c6:	dc09      	bgt.n	800b2dc <_printf_float+0x264>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	079b      	lsls	r3, r3, #30
 800b2cc:	f100 8105 	bmi.w	800b4da <_printf_float+0x462>
 800b2d0:	68e0      	ldr	r0, [r4, #12]
 800b2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2d4:	4298      	cmp	r0, r3
 800b2d6:	bfb8      	it	lt
 800b2d8:	4618      	movlt	r0, r3
 800b2da:	e730      	b.n	800b13e <_printf_float+0xc6>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	464a      	mov	r2, r9
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f af27 	beq.w	800b13a <_printf_float+0xc2>
 800b2ec:	f108 0801 	add.w	r8, r8, #1
 800b2f0:	e7e6      	b.n	800b2c0 <_printf_float+0x248>
 800b2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	dc39      	bgt.n	800b36c <_printf_float+0x2f4>
 800b2f8:	4a1b      	ldr	r2, [pc, #108]	; (800b368 <_printf_float+0x2f0>)
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b8      	blx	r7
 800b302:	3001      	adds	r0, #1
 800b304:	f43f af19 	beq.w	800b13a <_printf_float+0xc2>
 800b308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b30c:	4313      	orrs	r3, r2
 800b30e:	d102      	bne.n	800b316 <_printf_float+0x29e>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	07d9      	lsls	r1, r3, #31
 800b314:	d5d8      	bpl.n	800b2c8 <_printf_float+0x250>
 800b316:	ee18 3a10 	vmov	r3, s16
 800b31a:	4652      	mov	r2, sl
 800b31c:	4631      	mov	r1, r6
 800b31e:	4628      	mov	r0, r5
 800b320:	47b8      	blx	r7
 800b322:	3001      	adds	r0, #1
 800b324:	f43f af09 	beq.w	800b13a <_printf_float+0xc2>
 800b328:	f04f 0900 	mov.w	r9, #0
 800b32c:	f104 0a1a 	add.w	sl, r4, #26
 800b330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b332:	425b      	negs	r3, r3
 800b334:	454b      	cmp	r3, r9
 800b336:	dc01      	bgt.n	800b33c <_printf_float+0x2c4>
 800b338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33a:	e792      	b.n	800b262 <_printf_float+0x1ea>
 800b33c:	2301      	movs	r3, #1
 800b33e:	4652      	mov	r2, sl
 800b340:	4631      	mov	r1, r6
 800b342:	4628      	mov	r0, r5
 800b344:	47b8      	blx	r7
 800b346:	3001      	adds	r0, #1
 800b348:	f43f aef7 	beq.w	800b13a <_printf_float+0xc2>
 800b34c:	f109 0901 	add.w	r9, r9, #1
 800b350:	e7ee      	b.n	800b330 <_printf_float+0x2b8>
 800b352:	bf00      	nop
 800b354:	7fefffff 	.word	0x7fefffff
 800b358:	08010c00 	.word	0x08010c00
 800b35c:	08010c04 	.word	0x08010c04
 800b360:	08010c0c 	.word	0x08010c0c
 800b364:	08010c08 	.word	0x08010c08
 800b368:	08010c10 	.word	0x08010c10
 800b36c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b36e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b370:	429a      	cmp	r2, r3
 800b372:	bfa8      	it	ge
 800b374:	461a      	movge	r2, r3
 800b376:	2a00      	cmp	r2, #0
 800b378:	4691      	mov	r9, r2
 800b37a:	dc37      	bgt.n	800b3ec <_printf_float+0x374>
 800b37c:	f04f 0b00 	mov.w	fp, #0
 800b380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b384:	f104 021a 	add.w	r2, r4, #26
 800b388:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b38a:	9305      	str	r3, [sp, #20]
 800b38c:	eba3 0309 	sub.w	r3, r3, r9
 800b390:	455b      	cmp	r3, fp
 800b392:	dc33      	bgt.n	800b3fc <_printf_float+0x384>
 800b394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b398:	429a      	cmp	r2, r3
 800b39a:	db3b      	blt.n	800b414 <_printf_float+0x39c>
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	07da      	lsls	r2, r3, #31
 800b3a0:	d438      	bmi.n	800b414 <_printf_float+0x39c>
 800b3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a4:	9a05      	ldr	r2, [sp, #20]
 800b3a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3a8:	1a9a      	subs	r2, r3, r2
 800b3aa:	eba3 0901 	sub.w	r9, r3, r1
 800b3ae:	4591      	cmp	r9, r2
 800b3b0:	bfa8      	it	ge
 800b3b2:	4691      	movge	r9, r2
 800b3b4:	f1b9 0f00 	cmp.w	r9, #0
 800b3b8:	dc35      	bgt.n	800b426 <_printf_float+0x3ae>
 800b3ba:	f04f 0800 	mov.w	r8, #0
 800b3be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3c2:	f104 0a1a 	add.w	sl, r4, #26
 800b3c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	eba3 0309 	sub.w	r3, r3, r9
 800b3d0:	4543      	cmp	r3, r8
 800b3d2:	f77f af79 	ble.w	800b2c8 <_printf_float+0x250>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	4652      	mov	r2, sl
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	f43f aeaa 	beq.w	800b13a <_printf_float+0xc2>
 800b3e6:	f108 0801 	add.w	r8, r8, #1
 800b3ea:	e7ec      	b.n	800b3c6 <_printf_float+0x34e>
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	47b8      	blx	r7
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d1c0      	bne.n	800b37c <_printf_float+0x304>
 800b3fa:	e69e      	b.n	800b13a <_printf_float+0xc2>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	4631      	mov	r1, r6
 800b400:	4628      	mov	r0, r5
 800b402:	9205      	str	r2, [sp, #20]
 800b404:	47b8      	blx	r7
 800b406:	3001      	adds	r0, #1
 800b408:	f43f ae97 	beq.w	800b13a <_printf_float+0xc2>
 800b40c:	9a05      	ldr	r2, [sp, #20]
 800b40e:	f10b 0b01 	add.w	fp, fp, #1
 800b412:	e7b9      	b.n	800b388 <_printf_float+0x310>
 800b414:	ee18 3a10 	vmov	r3, s16
 800b418:	4652      	mov	r2, sl
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	d1be      	bne.n	800b3a2 <_printf_float+0x32a>
 800b424:	e689      	b.n	800b13a <_printf_float+0xc2>
 800b426:	9a05      	ldr	r2, [sp, #20]
 800b428:	464b      	mov	r3, r9
 800b42a:	4442      	add	r2, r8
 800b42c:	4631      	mov	r1, r6
 800b42e:	4628      	mov	r0, r5
 800b430:	47b8      	blx	r7
 800b432:	3001      	adds	r0, #1
 800b434:	d1c1      	bne.n	800b3ba <_printf_float+0x342>
 800b436:	e680      	b.n	800b13a <_printf_float+0xc2>
 800b438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b43a:	2a01      	cmp	r2, #1
 800b43c:	dc01      	bgt.n	800b442 <_printf_float+0x3ca>
 800b43e:	07db      	lsls	r3, r3, #31
 800b440:	d538      	bpl.n	800b4b4 <_printf_float+0x43c>
 800b442:	2301      	movs	r3, #1
 800b444:	4642      	mov	r2, r8
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	f43f ae74 	beq.w	800b13a <_printf_float+0xc2>
 800b452:	ee18 3a10 	vmov	r3, s16
 800b456:	4652      	mov	r2, sl
 800b458:	4631      	mov	r1, r6
 800b45a:	4628      	mov	r0, r5
 800b45c:	47b8      	blx	r7
 800b45e:	3001      	adds	r0, #1
 800b460:	f43f ae6b 	beq.w	800b13a <_printf_float+0xc2>
 800b464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b468:	2200      	movs	r2, #0
 800b46a:	2300      	movs	r3, #0
 800b46c:	f7f5 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b470:	b9d8      	cbnz	r0, 800b4aa <_printf_float+0x432>
 800b472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b474:	f108 0201 	add.w	r2, r8, #1
 800b478:	3b01      	subs	r3, #1
 800b47a:	4631      	mov	r1, r6
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b8      	blx	r7
 800b480:	3001      	adds	r0, #1
 800b482:	d10e      	bne.n	800b4a2 <_printf_float+0x42a>
 800b484:	e659      	b.n	800b13a <_printf_float+0xc2>
 800b486:	2301      	movs	r3, #1
 800b488:	4652      	mov	r2, sl
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	f43f ae52 	beq.w	800b13a <_printf_float+0xc2>
 800b496:	f108 0801 	add.w	r8, r8, #1
 800b49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b49c:	3b01      	subs	r3, #1
 800b49e:	4543      	cmp	r3, r8
 800b4a0:	dcf1      	bgt.n	800b486 <_printf_float+0x40e>
 800b4a2:	464b      	mov	r3, r9
 800b4a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b4a8:	e6dc      	b.n	800b264 <_printf_float+0x1ec>
 800b4aa:	f04f 0800 	mov.w	r8, #0
 800b4ae:	f104 0a1a 	add.w	sl, r4, #26
 800b4b2:	e7f2      	b.n	800b49a <_printf_float+0x422>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	4642      	mov	r2, r8
 800b4b8:	e7df      	b.n	800b47a <_printf_float+0x402>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	464a      	mov	r2, r9
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	47b8      	blx	r7
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	f43f ae38 	beq.w	800b13a <_printf_float+0xc2>
 800b4ca:	f108 0801 	add.w	r8, r8, #1
 800b4ce:	68e3      	ldr	r3, [r4, #12]
 800b4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4d2:	1a5b      	subs	r3, r3, r1
 800b4d4:	4543      	cmp	r3, r8
 800b4d6:	dcf0      	bgt.n	800b4ba <_printf_float+0x442>
 800b4d8:	e6fa      	b.n	800b2d0 <_printf_float+0x258>
 800b4da:	f04f 0800 	mov.w	r8, #0
 800b4de:	f104 0919 	add.w	r9, r4, #25
 800b4e2:	e7f4      	b.n	800b4ce <_printf_float+0x456>

0800b4e4 <_printf_common>:
 800b4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	4616      	mov	r6, r2
 800b4ea:	4699      	mov	r9, r3
 800b4ec:	688a      	ldr	r2, [r1, #8]
 800b4ee:	690b      	ldr	r3, [r1, #16]
 800b4f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	bfb8      	it	lt
 800b4f8:	4613      	movlt	r3, r2
 800b4fa:	6033      	str	r3, [r6, #0]
 800b4fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b500:	4607      	mov	r7, r0
 800b502:	460c      	mov	r4, r1
 800b504:	b10a      	cbz	r2, 800b50a <_printf_common+0x26>
 800b506:	3301      	adds	r3, #1
 800b508:	6033      	str	r3, [r6, #0]
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	0699      	lsls	r1, r3, #26
 800b50e:	bf42      	ittt	mi
 800b510:	6833      	ldrmi	r3, [r6, #0]
 800b512:	3302      	addmi	r3, #2
 800b514:	6033      	strmi	r3, [r6, #0]
 800b516:	6825      	ldr	r5, [r4, #0]
 800b518:	f015 0506 	ands.w	r5, r5, #6
 800b51c:	d106      	bne.n	800b52c <_printf_common+0x48>
 800b51e:	f104 0a19 	add.w	sl, r4, #25
 800b522:	68e3      	ldr	r3, [r4, #12]
 800b524:	6832      	ldr	r2, [r6, #0]
 800b526:	1a9b      	subs	r3, r3, r2
 800b528:	42ab      	cmp	r3, r5
 800b52a:	dc26      	bgt.n	800b57a <_printf_common+0x96>
 800b52c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b530:	1e13      	subs	r3, r2, #0
 800b532:	6822      	ldr	r2, [r4, #0]
 800b534:	bf18      	it	ne
 800b536:	2301      	movne	r3, #1
 800b538:	0692      	lsls	r2, r2, #26
 800b53a:	d42b      	bmi.n	800b594 <_printf_common+0xb0>
 800b53c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b540:	4649      	mov	r1, r9
 800b542:	4638      	mov	r0, r7
 800b544:	47c0      	blx	r8
 800b546:	3001      	adds	r0, #1
 800b548:	d01e      	beq.n	800b588 <_printf_common+0xa4>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	68e5      	ldr	r5, [r4, #12]
 800b54e:	6832      	ldr	r2, [r6, #0]
 800b550:	f003 0306 	and.w	r3, r3, #6
 800b554:	2b04      	cmp	r3, #4
 800b556:	bf08      	it	eq
 800b558:	1aad      	subeq	r5, r5, r2
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	6922      	ldr	r2, [r4, #16]
 800b55e:	bf0c      	ite	eq
 800b560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b564:	2500      	movne	r5, #0
 800b566:	4293      	cmp	r3, r2
 800b568:	bfc4      	itt	gt
 800b56a:	1a9b      	subgt	r3, r3, r2
 800b56c:	18ed      	addgt	r5, r5, r3
 800b56e:	2600      	movs	r6, #0
 800b570:	341a      	adds	r4, #26
 800b572:	42b5      	cmp	r5, r6
 800b574:	d11a      	bne.n	800b5ac <_printf_common+0xc8>
 800b576:	2000      	movs	r0, #0
 800b578:	e008      	b.n	800b58c <_printf_common+0xa8>
 800b57a:	2301      	movs	r3, #1
 800b57c:	4652      	mov	r2, sl
 800b57e:	4649      	mov	r1, r9
 800b580:	4638      	mov	r0, r7
 800b582:	47c0      	blx	r8
 800b584:	3001      	adds	r0, #1
 800b586:	d103      	bne.n	800b590 <_printf_common+0xac>
 800b588:	f04f 30ff 	mov.w	r0, #4294967295
 800b58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b590:	3501      	adds	r5, #1
 800b592:	e7c6      	b.n	800b522 <_printf_common+0x3e>
 800b594:	18e1      	adds	r1, r4, r3
 800b596:	1c5a      	adds	r2, r3, #1
 800b598:	2030      	movs	r0, #48	; 0x30
 800b59a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b59e:	4422      	add	r2, r4
 800b5a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	e7c7      	b.n	800b53c <_printf_common+0x58>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	47c0      	blx	r8
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d0e6      	beq.n	800b588 <_printf_common+0xa4>
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	e7d9      	b.n	800b572 <_printf_common+0x8e>
	...

0800b5c0 <_printf_i>:
 800b5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	7e0f      	ldrb	r7, [r1, #24]
 800b5c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5c8:	2f78      	cmp	r7, #120	; 0x78
 800b5ca:	4691      	mov	r9, r2
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	469a      	mov	sl, r3
 800b5d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5d6:	d807      	bhi.n	800b5e8 <_printf_i+0x28>
 800b5d8:	2f62      	cmp	r7, #98	; 0x62
 800b5da:	d80a      	bhi.n	800b5f2 <_printf_i+0x32>
 800b5dc:	2f00      	cmp	r7, #0
 800b5de:	f000 80d8 	beq.w	800b792 <_printf_i+0x1d2>
 800b5e2:	2f58      	cmp	r7, #88	; 0x58
 800b5e4:	f000 80a3 	beq.w	800b72e <_printf_i+0x16e>
 800b5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5f0:	e03a      	b.n	800b668 <_printf_i+0xa8>
 800b5f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5f6:	2b15      	cmp	r3, #21
 800b5f8:	d8f6      	bhi.n	800b5e8 <_printf_i+0x28>
 800b5fa:	a101      	add	r1, pc, #4	; (adr r1, 800b600 <_printf_i+0x40>)
 800b5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b600:	0800b659 	.word	0x0800b659
 800b604:	0800b66d 	.word	0x0800b66d
 800b608:	0800b5e9 	.word	0x0800b5e9
 800b60c:	0800b5e9 	.word	0x0800b5e9
 800b610:	0800b5e9 	.word	0x0800b5e9
 800b614:	0800b5e9 	.word	0x0800b5e9
 800b618:	0800b66d 	.word	0x0800b66d
 800b61c:	0800b5e9 	.word	0x0800b5e9
 800b620:	0800b5e9 	.word	0x0800b5e9
 800b624:	0800b5e9 	.word	0x0800b5e9
 800b628:	0800b5e9 	.word	0x0800b5e9
 800b62c:	0800b779 	.word	0x0800b779
 800b630:	0800b69d 	.word	0x0800b69d
 800b634:	0800b75b 	.word	0x0800b75b
 800b638:	0800b5e9 	.word	0x0800b5e9
 800b63c:	0800b5e9 	.word	0x0800b5e9
 800b640:	0800b79b 	.word	0x0800b79b
 800b644:	0800b5e9 	.word	0x0800b5e9
 800b648:	0800b69d 	.word	0x0800b69d
 800b64c:	0800b5e9 	.word	0x0800b5e9
 800b650:	0800b5e9 	.word	0x0800b5e9
 800b654:	0800b763 	.word	0x0800b763
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	1d1a      	adds	r2, r3, #4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	602a      	str	r2, [r5, #0]
 800b660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b668:	2301      	movs	r3, #1
 800b66a:	e0a3      	b.n	800b7b4 <_printf_i+0x1f4>
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	6829      	ldr	r1, [r5, #0]
 800b670:	0606      	lsls	r6, r0, #24
 800b672:	f101 0304 	add.w	r3, r1, #4
 800b676:	d50a      	bpl.n	800b68e <_printf_i+0xce>
 800b678:	680e      	ldr	r6, [r1, #0]
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	2e00      	cmp	r6, #0
 800b67e:	da03      	bge.n	800b688 <_printf_i+0xc8>
 800b680:	232d      	movs	r3, #45	; 0x2d
 800b682:	4276      	negs	r6, r6
 800b684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b688:	485e      	ldr	r0, [pc, #376]	; (800b804 <_printf_i+0x244>)
 800b68a:	230a      	movs	r3, #10
 800b68c:	e019      	b.n	800b6c2 <_printf_i+0x102>
 800b68e:	680e      	ldr	r6, [r1, #0]
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b696:	bf18      	it	ne
 800b698:	b236      	sxthne	r6, r6
 800b69a:	e7ef      	b.n	800b67c <_printf_i+0xbc>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	1d19      	adds	r1, r3, #4
 800b6a2:	6029      	str	r1, [r5, #0]
 800b6a4:	0601      	lsls	r1, r0, #24
 800b6a6:	d501      	bpl.n	800b6ac <_printf_i+0xec>
 800b6a8:	681e      	ldr	r6, [r3, #0]
 800b6aa:	e002      	b.n	800b6b2 <_printf_i+0xf2>
 800b6ac:	0646      	lsls	r6, r0, #25
 800b6ae:	d5fb      	bpl.n	800b6a8 <_printf_i+0xe8>
 800b6b0:	881e      	ldrh	r6, [r3, #0]
 800b6b2:	4854      	ldr	r0, [pc, #336]	; (800b804 <_printf_i+0x244>)
 800b6b4:	2f6f      	cmp	r7, #111	; 0x6f
 800b6b6:	bf0c      	ite	eq
 800b6b8:	2308      	moveq	r3, #8
 800b6ba:	230a      	movne	r3, #10
 800b6bc:	2100      	movs	r1, #0
 800b6be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6c2:	6865      	ldr	r5, [r4, #4]
 800b6c4:	60a5      	str	r5, [r4, #8]
 800b6c6:	2d00      	cmp	r5, #0
 800b6c8:	bfa2      	ittt	ge
 800b6ca:	6821      	ldrge	r1, [r4, #0]
 800b6cc:	f021 0104 	bicge.w	r1, r1, #4
 800b6d0:	6021      	strge	r1, [r4, #0]
 800b6d2:	b90e      	cbnz	r6, 800b6d8 <_printf_i+0x118>
 800b6d4:	2d00      	cmp	r5, #0
 800b6d6:	d04d      	beq.n	800b774 <_printf_i+0x1b4>
 800b6d8:	4615      	mov	r5, r2
 800b6da:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6de:	fb03 6711 	mls	r7, r3, r1, r6
 800b6e2:	5dc7      	ldrb	r7, [r0, r7]
 800b6e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6e8:	4637      	mov	r7, r6
 800b6ea:	42bb      	cmp	r3, r7
 800b6ec:	460e      	mov	r6, r1
 800b6ee:	d9f4      	bls.n	800b6da <_printf_i+0x11a>
 800b6f0:	2b08      	cmp	r3, #8
 800b6f2:	d10b      	bne.n	800b70c <_printf_i+0x14c>
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	07de      	lsls	r6, r3, #31
 800b6f8:	d508      	bpl.n	800b70c <_printf_i+0x14c>
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	6861      	ldr	r1, [r4, #4]
 800b6fe:	4299      	cmp	r1, r3
 800b700:	bfde      	ittt	le
 800b702:	2330      	movle	r3, #48	; 0x30
 800b704:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b70c:	1b52      	subs	r2, r2, r5
 800b70e:	6122      	str	r2, [r4, #16]
 800b710:	f8cd a000 	str.w	sl, [sp]
 800b714:	464b      	mov	r3, r9
 800b716:	aa03      	add	r2, sp, #12
 800b718:	4621      	mov	r1, r4
 800b71a:	4640      	mov	r0, r8
 800b71c:	f7ff fee2 	bl	800b4e4 <_printf_common>
 800b720:	3001      	adds	r0, #1
 800b722:	d14c      	bne.n	800b7be <_printf_i+0x1fe>
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	b004      	add	sp, #16
 800b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72e:	4835      	ldr	r0, [pc, #212]	; (800b804 <_printf_i+0x244>)
 800b730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b734:	6829      	ldr	r1, [r5, #0]
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	f851 6b04 	ldr.w	r6, [r1], #4
 800b73c:	6029      	str	r1, [r5, #0]
 800b73e:	061d      	lsls	r5, r3, #24
 800b740:	d514      	bpl.n	800b76c <_printf_i+0x1ac>
 800b742:	07df      	lsls	r7, r3, #31
 800b744:	bf44      	itt	mi
 800b746:	f043 0320 	orrmi.w	r3, r3, #32
 800b74a:	6023      	strmi	r3, [r4, #0]
 800b74c:	b91e      	cbnz	r6, 800b756 <_printf_i+0x196>
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	f023 0320 	bic.w	r3, r3, #32
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	2310      	movs	r3, #16
 800b758:	e7b0      	b.n	800b6bc <_printf_i+0xfc>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	f043 0320 	orr.w	r3, r3, #32
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	2378      	movs	r3, #120	; 0x78
 800b764:	4828      	ldr	r0, [pc, #160]	; (800b808 <_printf_i+0x248>)
 800b766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b76a:	e7e3      	b.n	800b734 <_printf_i+0x174>
 800b76c:	0659      	lsls	r1, r3, #25
 800b76e:	bf48      	it	mi
 800b770:	b2b6      	uxthmi	r6, r6
 800b772:	e7e6      	b.n	800b742 <_printf_i+0x182>
 800b774:	4615      	mov	r5, r2
 800b776:	e7bb      	b.n	800b6f0 <_printf_i+0x130>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	6826      	ldr	r6, [r4, #0]
 800b77c:	6961      	ldr	r1, [r4, #20]
 800b77e:	1d18      	adds	r0, r3, #4
 800b780:	6028      	str	r0, [r5, #0]
 800b782:	0635      	lsls	r5, r6, #24
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	d501      	bpl.n	800b78c <_printf_i+0x1cc>
 800b788:	6019      	str	r1, [r3, #0]
 800b78a:	e002      	b.n	800b792 <_printf_i+0x1d2>
 800b78c:	0670      	lsls	r0, r6, #25
 800b78e:	d5fb      	bpl.n	800b788 <_printf_i+0x1c8>
 800b790:	8019      	strh	r1, [r3, #0]
 800b792:	2300      	movs	r3, #0
 800b794:	6123      	str	r3, [r4, #16]
 800b796:	4615      	mov	r5, r2
 800b798:	e7ba      	b.n	800b710 <_printf_i+0x150>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	1d1a      	adds	r2, r3, #4
 800b79e:	602a      	str	r2, [r5, #0]
 800b7a0:	681d      	ldr	r5, [r3, #0]
 800b7a2:	6862      	ldr	r2, [r4, #4]
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f7f4 fd1a 	bl	80001e0 <memchr>
 800b7ac:	b108      	cbz	r0, 800b7b2 <_printf_i+0x1f2>
 800b7ae:	1b40      	subs	r0, r0, r5
 800b7b0:	6060      	str	r0, [r4, #4]
 800b7b2:	6863      	ldr	r3, [r4, #4]
 800b7b4:	6123      	str	r3, [r4, #16]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7bc:	e7a8      	b.n	800b710 <_printf_i+0x150>
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	47d0      	blx	sl
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	d0ab      	beq.n	800b724 <_printf_i+0x164>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	079b      	lsls	r3, r3, #30
 800b7d0:	d413      	bmi.n	800b7fa <_printf_i+0x23a>
 800b7d2:	68e0      	ldr	r0, [r4, #12]
 800b7d4:	9b03      	ldr	r3, [sp, #12]
 800b7d6:	4298      	cmp	r0, r3
 800b7d8:	bfb8      	it	lt
 800b7da:	4618      	movlt	r0, r3
 800b7dc:	e7a4      	b.n	800b728 <_printf_i+0x168>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	4632      	mov	r2, r6
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	4640      	mov	r0, r8
 800b7e6:	47d0      	blx	sl
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	d09b      	beq.n	800b724 <_printf_i+0x164>
 800b7ec:	3501      	adds	r5, #1
 800b7ee:	68e3      	ldr	r3, [r4, #12]
 800b7f0:	9903      	ldr	r1, [sp, #12]
 800b7f2:	1a5b      	subs	r3, r3, r1
 800b7f4:	42ab      	cmp	r3, r5
 800b7f6:	dcf2      	bgt.n	800b7de <_printf_i+0x21e>
 800b7f8:	e7eb      	b.n	800b7d2 <_printf_i+0x212>
 800b7fa:	2500      	movs	r5, #0
 800b7fc:	f104 0619 	add.w	r6, r4, #25
 800b800:	e7f5      	b.n	800b7ee <_printf_i+0x22e>
 800b802:	bf00      	nop
 800b804:	08010c12 	.word	0x08010c12
 800b808:	08010c23 	.word	0x08010c23

0800b80c <_scanf_float>:
 800b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	b087      	sub	sp, #28
 800b812:	4617      	mov	r7, r2
 800b814:	9303      	str	r3, [sp, #12]
 800b816:	688b      	ldr	r3, [r1, #8]
 800b818:	1e5a      	subs	r2, r3, #1
 800b81a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b81e:	bf83      	ittte	hi
 800b820:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b824:	195b      	addhi	r3, r3, r5
 800b826:	9302      	strhi	r3, [sp, #8]
 800b828:	2300      	movls	r3, #0
 800b82a:	bf86      	itte	hi
 800b82c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b830:	608b      	strhi	r3, [r1, #8]
 800b832:	9302      	strls	r3, [sp, #8]
 800b834:	680b      	ldr	r3, [r1, #0]
 800b836:	468b      	mov	fp, r1
 800b838:	2500      	movs	r5, #0
 800b83a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b83e:	f84b 3b1c 	str.w	r3, [fp], #28
 800b842:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b846:	4680      	mov	r8, r0
 800b848:	460c      	mov	r4, r1
 800b84a:	465e      	mov	r6, fp
 800b84c:	46aa      	mov	sl, r5
 800b84e:	46a9      	mov	r9, r5
 800b850:	9501      	str	r5, [sp, #4]
 800b852:	68a2      	ldr	r2, [r4, #8]
 800b854:	b152      	cbz	r2, 800b86c <_scanf_float+0x60>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b4e      	cmp	r3, #78	; 0x4e
 800b85c:	d864      	bhi.n	800b928 <_scanf_float+0x11c>
 800b85e:	2b40      	cmp	r3, #64	; 0x40
 800b860:	d83c      	bhi.n	800b8dc <_scanf_float+0xd0>
 800b862:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b866:	b2c8      	uxtb	r0, r1
 800b868:	280e      	cmp	r0, #14
 800b86a:	d93a      	bls.n	800b8e2 <_scanf_float+0xd6>
 800b86c:	f1b9 0f00 	cmp.w	r9, #0
 800b870:	d003      	beq.n	800b87a <_scanf_float+0x6e>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b87e:	f1ba 0f01 	cmp.w	sl, #1
 800b882:	f200 8113 	bhi.w	800baac <_scanf_float+0x2a0>
 800b886:	455e      	cmp	r6, fp
 800b888:	f200 8105 	bhi.w	800ba96 <_scanf_float+0x28a>
 800b88c:	2501      	movs	r5, #1
 800b88e:	4628      	mov	r0, r5
 800b890:	b007      	add	sp, #28
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b896:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b89a:	2a0d      	cmp	r2, #13
 800b89c:	d8e6      	bhi.n	800b86c <_scanf_float+0x60>
 800b89e:	a101      	add	r1, pc, #4	; (adr r1, 800b8a4 <_scanf_float+0x98>)
 800b8a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b8a4:	0800b9e3 	.word	0x0800b9e3
 800b8a8:	0800b86d 	.word	0x0800b86d
 800b8ac:	0800b86d 	.word	0x0800b86d
 800b8b0:	0800b86d 	.word	0x0800b86d
 800b8b4:	0800ba43 	.word	0x0800ba43
 800b8b8:	0800ba1b 	.word	0x0800ba1b
 800b8bc:	0800b86d 	.word	0x0800b86d
 800b8c0:	0800b86d 	.word	0x0800b86d
 800b8c4:	0800b9f1 	.word	0x0800b9f1
 800b8c8:	0800b86d 	.word	0x0800b86d
 800b8cc:	0800b86d 	.word	0x0800b86d
 800b8d0:	0800b86d 	.word	0x0800b86d
 800b8d4:	0800b86d 	.word	0x0800b86d
 800b8d8:	0800b9a9 	.word	0x0800b9a9
 800b8dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b8e0:	e7db      	b.n	800b89a <_scanf_float+0x8e>
 800b8e2:	290e      	cmp	r1, #14
 800b8e4:	d8c2      	bhi.n	800b86c <_scanf_float+0x60>
 800b8e6:	a001      	add	r0, pc, #4	; (adr r0, 800b8ec <_scanf_float+0xe0>)
 800b8e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b8ec:	0800b99b 	.word	0x0800b99b
 800b8f0:	0800b86d 	.word	0x0800b86d
 800b8f4:	0800b99b 	.word	0x0800b99b
 800b8f8:	0800ba2f 	.word	0x0800ba2f
 800b8fc:	0800b86d 	.word	0x0800b86d
 800b900:	0800b949 	.word	0x0800b949
 800b904:	0800b985 	.word	0x0800b985
 800b908:	0800b985 	.word	0x0800b985
 800b90c:	0800b985 	.word	0x0800b985
 800b910:	0800b985 	.word	0x0800b985
 800b914:	0800b985 	.word	0x0800b985
 800b918:	0800b985 	.word	0x0800b985
 800b91c:	0800b985 	.word	0x0800b985
 800b920:	0800b985 	.word	0x0800b985
 800b924:	0800b985 	.word	0x0800b985
 800b928:	2b6e      	cmp	r3, #110	; 0x6e
 800b92a:	d809      	bhi.n	800b940 <_scanf_float+0x134>
 800b92c:	2b60      	cmp	r3, #96	; 0x60
 800b92e:	d8b2      	bhi.n	800b896 <_scanf_float+0x8a>
 800b930:	2b54      	cmp	r3, #84	; 0x54
 800b932:	d077      	beq.n	800ba24 <_scanf_float+0x218>
 800b934:	2b59      	cmp	r3, #89	; 0x59
 800b936:	d199      	bne.n	800b86c <_scanf_float+0x60>
 800b938:	2d07      	cmp	r5, #7
 800b93a:	d197      	bne.n	800b86c <_scanf_float+0x60>
 800b93c:	2508      	movs	r5, #8
 800b93e:	e029      	b.n	800b994 <_scanf_float+0x188>
 800b940:	2b74      	cmp	r3, #116	; 0x74
 800b942:	d06f      	beq.n	800ba24 <_scanf_float+0x218>
 800b944:	2b79      	cmp	r3, #121	; 0x79
 800b946:	e7f6      	b.n	800b936 <_scanf_float+0x12a>
 800b948:	6821      	ldr	r1, [r4, #0]
 800b94a:	05c8      	lsls	r0, r1, #23
 800b94c:	d51a      	bpl.n	800b984 <_scanf_float+0x178>
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b954:	6021      	str	r1, [r4, #0]
 800b956:	f109 0901 	add.w	r9, r9, #1
 800b95a:	b11b      	cbz	r3, 800b964 <_scanf_float+0x158>
 800b95c:	3b01      	subs	r3, #1
 800b95e:	3201      	adds	r2, #1
 800b960:	9302      	str	r3, [sp, #8]
 800b962:	60a2      	str	r2, [r4, #8]
 800b964:	68a3      	ldr	r3, [r4, #8]
 800b966:	3b01      	subs	r3, #1
 800b968:	60a3      	str	r3, [r4, #8]
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	3301      	adds	r3, #1
 800b96e:	6123      	str	r3, [r4, #16]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3b01      	subs	r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	607b      	str	r3, [r7, #4]
 800b978:	f340 8084 	ble.w	800ba84 <_scanf_float+0x278>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	3301      	adds	r3, #1
 800b980:	603b      	str	r3, [r7, #0]
 800b982:	e766      	b.n	800b852 <_scanf_float+0x46>
 800b984:	eb1a 0f05 	cmn.w	sl, r5
 800b988:	f47f af70 	bne.w	800b86c <_scanf_float+0x60>
 800b98c:	6822      	ldr	r2, [r4, #0]
 800b98e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b992:	6022      	str	r2, [r4, #0]
 800b994:	f806 3b01 	strb.w	r3, [r6], #1
 800b998:	e7e4      	b.n	800b964 <_scanf_float+0x158>
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	0610      	lsls	r0, r2, #24
 800b99e:	f57f af65 	bpl.w	800b86c <_scanf_float+0x60>
 800b9a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9a6:	e7f4      	b.n	800b992 <_scanf_float+0x186>
 800b9a8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ac:	d10e      	bne.n	800b9cc <_scanf_float+0x1c0>
 800b9ae:	f1b9 0f00 	cmp.w	r9, #0
 800b9b2:	d10e      	bne.n	800b9d2 <_scanf_float+0x1c6>
 800b9b4:	6822      	ldr	r2, [r4, #0]
 800b9b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b9ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b9be:	d108      	bne.n	800b9d2 <_scanf_float+0x1c6>
 800b9c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b9c4:	6022      	str	r2, [r4, #0]
 800b9c6:	f04f 0a01 	mov.w	sl, #1
 800b9ca:	e7e3      	b.n	800b994 <_scanf_float+0x188>
 800b9cc:	f1ba 0f02 	cmp.w	sl, #2
 800b9d0:	d055      	beq.n	800ba7e <_scanf_float+0x272>
 800b9d2:	2d01      	cmp	r5, #1
 800b9d4:	d002      	beq.n	800b9dc <_scanf_float+0x1d0>
 800b9d6:	2d04      	cmp	r5, #4
 800b9d8:	f47f af48 	bne.w	800b86c <_scanf_float+0x60>
 800b9dc:	3501      	adds	r5, #1
 800b9de:	b2ed      	uxtb	r5, r5
 800b9e0:	e7d8      	b.n	800b994 <_scanf_float+0x188>
 800b9e2:	f1ba 0f01 	cmp.w	sl, #1
 800b9e6:	f47f af41 	bne.w	800b86c <_scanf_float+0x60>
 800b9ea:	f04f 0a02 	mov.w	sl, #2
 800b9ee:	e7d1      	b.n	800b994 <_scanf_float+0x188>
 800b9f0:	b97d      	cbnz	r5, 800ba12 <_scanf_float+0x206>
 800b9f2:	f1b9 0f00 	cmp.w	r9, #0
 800b9f6:	f47f af3c 	bne.w	800b872 <_scanf_float+0x66>
 800b9fa:	6822      	ldr	r2, [r4, #0]
 800b9fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba04:	f47f af39 	bne.w	800b87a <_scanf_float+0x6e>
 800ba08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba0c:	6022      	str	r2, [r4, #0]
 800ba0e:	2501      	movs	r5, #1
 800ba10:	e7c0      	b.n	800b994 <_scanf_float+0x188>
 800ba12:	2d03      	cmp	r5, #3
 800ba14:	d0e2      	beq.n	800b9dc <_scanf_float+0x1d0>
 800ba16:	2d05      	cmp	r5, #5
 800ba18:	e7de      	b.n	800b9d8 <_scanf_float+0x1cc>
 800ba1a:	2d02      	cmp	r5, #2
 800ba1c:	f47f af26 	bne.w	800b86c <_scanf_float+0x60>
 800ba20:	2503      	movs	r5, #3
 800ba22:	e7b7      	b.n	800b994 <_scanf_float+0x188>
 800ba24:	2d06      	cmp	r5, #6
 800ba26:	f47f af21 	bne.w	800b86c <_scanf_float+0x60>
 800ba2a:	2507      	movs	r5, #7
 800ba2c:	e7b2      	b.n	800b994 <_scanf_float+0x188>
 800ba2e:	6822      	ldr	r2, [r4, #0]
 800ba30:	0591      	lsls	r1, r2, #22
 800ba32:	f57f af1b 	bpl.w	800b86c <_scanf_float+0x60>
 800ba36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ba3a:	6022      	str	r2, [r4, #0]
 800ba3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ba40:	e7a8      	b.n	800b994 <_scanf_float+0x188>
 800ba42:	6822      	ldr	r2, [r4, #0]
 800ba44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ba48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ba4c:	d006      	beq.n	800ba5c <_scanf_float+0x250>
 800ba4e:	0550      	lsls	r0, r2, #21
 800ba50:	f57f af0c 	bpl.w	800b86c <_scanf_float+0x60>
 800ba54:	f1b9 0f00 	cmp.w	r9, #0
 800ba58:	f43f af0f 	beq.w	800b87a <_scanf_float+0x6e>
 800ba5c:	0591      	lsls	r1, r2, #22
 800ba5e:	bf58      	it	pl
 800ba60:	9901      	ldrpl	r1, [sp, #4]
 800ba62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba66:	bf58      	it	pl
 800ba68:	eba9 0101 	subpl.w	r1, r9, r1
 800ba6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ba70:	bf58      	it	pl
 800ba72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ba76:	6022      	str	r2, [r4, #0]
 800ba78:	f04f 0900 	mov.w	r9, #0
 800ba7c:	e78a      	b.n	800b994 <_scanf_float+0x188>
 800ba7e:	f04f 0a03 	mov.w	sl, #3
 800ba82:	e787      	b.n	800b994 <_scanf_float+0x188>
 800ba84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba88:	4639      	mov	r1, r7
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	4798      	blx	r3
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	f43f aedf 	beq.w	800b852 <_scanf_float+0x46>
 800ba94:	e6ea      	b.n	800b86c <_scanf_float+0x60>
 800ba96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba9e:	463a      	mov	r2, r7
 800baa0:	4640      	mov	r0, r8
 800baa2:	4798      	blx	r3
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	6123      	str	r3, [r4, #16]
 800baaa:	e6ec      	b.n	800b886 <_scanf_float+0x7a>
 800baac:	1e6b      	subs	r3, r5, #1
 800baae:	2b06      	cmp	r3, #6
 800bab0:	d825      	bhi.n	800bafe <_scanf_float+0x2f2>
 800bab2:	2d02      	cmp	r5, #2
 800bab4:	d836      	bhi.n	800bb24 <_scanf_float+0x318>
 800bab6:	455e      	cmp	r6, fp
 800bab8:	f67f aee8 	bls.w	800b88c <_scanf_float+0x80>
 800babc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bac0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bac4:	463a      	mov	r2, r7
 800bac6:	4640      	mov	r0, r8
 800bac8:	4798      	blx	r3
 800baca:	6923      	ldr	r3, [r4, #16]
 800bacc:	3b01      	subs	r3, #1
 800bace:	6123      	str	r3, [r4, #16]
 800bad0:	e7f1      	b.n	800bab6 <_scanf_float+0x2aa>
 800bad2:	9802      	ldr	r0, [sp, #8]
 800bad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bad8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800badc:	9002      	str	r0, [sp, #8]
 800bade:	463a      	mov	r2, r7
 800bae0:	4640      	mov	r0, r8
 800bae2:	4798      	blx	r3
 800bae4:	6923      	ldr	r3, [r4, #16]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	6123      	str	r3, [r4, #16]
 800baea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baee:	fa5f fa8a 	uxtb.w	sl, sl
 800baf2:	f1ba 0f02 	cmp.w	sl, #2
 800baf6:	d1ec      	bne.n	800bad2 <_scanf_float+0x2c6>
 800baf8:	3d03      	subs	r5, #3
 800bafa:	b2ed      	uxtb	r5, r5
 800bafc:	1b76      	subs	r6, r6, r5
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	05da      	lsls	r2, r3, #23
 800bb02:	d52f      	bpl.n	800bb64 <_scanf_float+0x358>
 800bb04:	055b      	lsls	r3, r3, #21
 800bb06:	d510      	bpl.n	800bb2a <_scanf_float+0x31e>
 800bb08:	455e      	cmp	r6, fp
 800bb0a:	f67f aebf 	bls.w	800b88c <_scanf_float+0x80>
 800bb0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb16:	463a      	mov	r2, r7
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4798      	blx	r3
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	6123      	str	r3, [r4, #16]
 800bb22:	e7f1      	b.n	800bb08 <_scanf_float+0x2fc>
 800bb24:	46aa      	mov	sl, r5
 800bb26:	9602      	str	r6, [sp, #8]
 800bb28:	e7df      	b.n	800baea <_scanf_float+0x2de>
 800bb2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	2965      	cmp	r1, #101	; 0x65
 800bb32:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb36:	f106 35ff 	add.w	r5, r6, #4294967295
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	d00c      	beq.n	800bb58 <_scanf_float+0x34c>
 800bb3e:	2945      	cmp	r1, #69	; 0x45
 800bb40:	d00a      	beq.n	800bb58 <_scanf_float+0x34c>
 800bb42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb46:	463a      	mov	r2, r7
 800bb48:	4640      	mov	r0, r8
 800bb4a:	4798      	blx	r3
 800bb4c:	6923      	ldr	r3, [r4, #16]
 800bb4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	1eb5      	subs	r5, r6, #2
 800bb56:	6123      	str	r3, [r4, #16]
 800bb58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb5c:	463a      	mov	r2, r7
 800bb5e:	4640      	mov	r0, r8
 800bb60:	4798      	blx	r3
 800bb62:	462e      	mov	r6, r5
 800bb64:	6825      	ldr	r5, [r4, #0]
 800bb66:	f015 0510 	ands.w	r5, r5, #16
 800bb6a:	d159      	bne.n	800bc20 <_scanf_float+0x414>
 800bb6c:	7035      	strb	r5, [r6, #0]
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bb74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb78:	d11b      	bne.n	800bbb2 <_scanf_float+0x3a6>
 800bb7a:	9b01      	ldr	r3, [sp, #4]
 800bb7c:	454b      	cmp	r3, r9
 800bb7e:	eba3 0209 	sub.w	r2, r3, r9
 800bb82:	d123      	bne.n	800bbcc <_scanf_float+0x3c0>
 800bb84:	2200      	movs	r2, #0
 800bb86:	4659      	mov	r1, fp
 800bb88:	4640      	mov	r0, r8
 800bb8a:	f000 ff27 	bl	800c9dc <_strtod_r>
 800bb8e:	6822      	ldr	r2, [r4, #0]
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	f012 0f02 	tst.w	r2, #2
 800bb96:	ec57 6b10 	vmov	r6, r7, d0
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	d021      	beq.n	800bbe2 <_scanf_float+0x3d6>
 800bb9e:	9903      	ldr	r1, [sp, #12]
 800bba0:	1d1a      	adds	r2, r3, #4
 800bba2:	600a      	str	r2, [r1, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	e9c3 6700 	strd	r6, r7, [r3]
 800bbaa:	68e3      	ldr	r3, [r4, #12]
 800bbac:	3301      	adds	r3, #1
 800bbae:	60e3      	str	r3, [r4, #12]
 800bbb0:	e66d      	b.n	800b88e <_scanf_float+0x82>
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d0e5      	beq.n	800bb84 <_scanf_float+0x378>
 800bbb8:	9905      	ldr	r1, [sp, #20]
 800bbba:	230a      	movs	r3, #10
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	3101      	adds	r1, #1
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	f000 ff93 	bl	800caec <_strtol_r>
 800bbc6:	9b04      	ldr	r3, [sp, #16]
 800bbc8:	9e05      	ldr	r6, [sp, #20]
 800bbca:	1ac2      	subs	r2, r0, r3
 800bbcc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bbd0:	429e      	cmp	r6, r3
 800bbd2:	bf28      	it	cs
 800bbd4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bbd8:	4912      	ldr	r1, [pc, #72]	; (800bc24 <_scanf_float+0x418>)
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f000 f8ba 	bl	800bd54 <siprintf>
 800bbe0:	e7d0      	b.n	800bb84 <_scanf_float+0x378>
 800bbe2:	9903      	ldr	r1, [sp, #12]
 800bbe4:	f012 0f04 	tst.w	r2, #4
 800bbe8:	f103 0204 	add.w	r2, r3, #4
 800bbec:	600a      	str	r2, [r1, #0]
 800bbee:	d1d9      	bne.n	800bba4 <_scanf_float+0x398>
 800bbf0:	f8d3 8000 	ldr.w	r8, [r3]
 800bbf4:	ee10 2a10 	vmov	r2, s0
 800bbf8:	ee10 0a10 	vmov	r0, s0
 800bbfc:	463b      	mov	r3, r7
 800bbfe:	4639      	mov	r1, r7
 800bc00:	f7f4 ff94 	bl	8000b2c <__aeabi_dcmpun>
 800bc04:	b128      	cbz	r0, 800bc12 <_scanf_float+0x406>
 800bc06:	4808      	ldr	r0, [pc, #32]	; (800bc28 <_scanf_float+0x41c>)
 800bc08:	f000 f89e 	bl	800bd48 <nanf>
 800bc0c:	ed88 0a00 	vstr	s0, [r8]
 800bc10:	e7cb      	b.n	800bbaa <_scanf_float+0x39e>
 800bc12:	4630      	mov	r0, r6
 800bc14:	4639      	mov	r1, r7
 800bc16:	f7f4 ffe7 	bl	8000be8 <__aeabi_d2f>
 800bc1a:	f8c8 0000 	str.w	r0, [r8]
 800bc1e:	e7c4      	b.n	800bbaa <_scanf_float+0x39e>
 800bc20:	2500      	movs	r5, #0
 800bc22:	e634      	b.n	800b88e <_scanf_float+0x82>
 800bc24:	08010c34 	.word	0x08010c34
 800bc28:	080110a8 	.word	0x080110a8

0800bc2c <iprintf>:
 800bc2c:	b40f      	push	{r0, r1, r2, r3}
 800bc2e:	4b0a      	ldr	r3, [pc, #40]	; (800bc58 <iprintf+0x2c>)
 800bc30:	b513      	push	{r0, r1, r4, lr}
 800bc32:	681c      	ldr	r4, [r3, #0]
 800bc34:	b124      	cbz	r4, 800bc40 <iprintf+0x14>
 800bc36:	69a3      	ldr	r3, [r4, #24]
 800bc38:	b913      	cbnz	r3, 800bc40 <iprintf+0x14>
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f001 ffac 	bl	800db98 <__sinit>
 800bc40:	ab05      	add	r3, sp, #20
 800bc42:	9a04      	ldr	r2, [sp, #16]
 800bc44:	68a1      	ldr	r1, [r4, #8]
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f003 fb75 	bl	800f338 <_vfiprintf_r>
 800bc4e:	b002      	add	sp, #8
 800bc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc54:	b004      	add	sp, #16
 800bc56:	4770      	bx	lr
 800bc58:	2000000c 	.word	0x2000000c

0800bc5c <_puts_r>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	460e      	mov	r6, r1
 800bc60:	4605      	mov	r5, r0
 800bc62:	b118      	cbz	r0, 800bc6c <_puts_r+0x10>
 800bc64:	6983      	ldr	r3, [r0, #24]
 800bc66:	b90b      	cbnz	r3, 800bc6c <_puts_r+0x10>
 800bc68:	f001 ff96 	bl	800db98 <__sinit>
 800bc6c:	69ab      	ldr	r3, [r5, #24]
 800bc6e:	68ac      	ldr	r4, [r5, #8]
 800bc70:	b913      	cbnz	r3, 800bc78 <_puts_r+0x1c>
 800bc72:	4628      	mov	r0, r5
 800bc74:	f001 ff90 	bl	800db98 <__sinit>
 800bc78:	4b2c      	ldr	r3, [pc, #176]	; (800bd2c <_puts_r+0xd0>)
 800bc7a:	429c      	cmp	r4, r3
 800bc7c:	d120      	bne.n	800bcc0 <_puts_r+0x64>
 800bc7e:	686c      	ldr	r4, [r5, #4]
 800bc80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc82:	07db      	lsls	r3, r3, #31
 800bc84:	d405      	bmi.n	800bc92 <_puts_r+0x36>
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	0598      	lsls	r0, r3, #22
 800bc8a:	d402      	bmi.n	800bc92 <_puts_r+0x36>
 800bc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc8e:	f002 fb94 	bl	800e3ba <__retarget_lock_acquire_recursive>
 800bc92:	89a3      	ldrh	r3, [r4, #12]
 800bc94:	0719      	lsls	r1, r3, #28
 800bc96:	d51d      	bpl.n	800bcd4 <_puts_r+0x78>
 800bc98:	6923      	ldr	r3, [r4, #16]
 800bc9a:	b1db      	cbz	r3, 800bcd4 <_puts_r+0x78>
 800bc9c:	3e01      	subs	r6, #1
 800bc9e:	68a3      	ldr	r3, [r4, #8]
 800bca0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bca4:	3b01      	subs	r3, #1
 800bca6:	60a3      	str	r3, [r4, #8]
 800bca8:	bb39      	cbnz	r1, 800bcfa <_puts_r+0x9e>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	da38      	bge.n	800bd20 <_puts_r+0xc4>
 800bcae:	4622      	mov	r2, r4
 800bcb0:	210a      	movs	r1, #10
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 ff1c 	bl	800caf0 <__swbuf_r>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d011      	beq.n	800bce0 <_puts_r+0x84>
 800bcbc:	250a      	movs	r5, #10
 800bcbe:	e011      	b.n	800bce4 <_puts_r+0x88>
 800bcc0:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <_puts_r+0xd4>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d101      	bne.n	800bcca <_puts_r+0x6e>
 800bcc6:	68ac      	ldr	r4, [r5, #8]
 800bcc8:	e7da      	b.n	800bc80 <_puts_r+0x24>
 800bcca:	4b1a      	ldr	r3, [pc, #104]	; (800bd34 <_puts_r+0xd8>)
 800bccc:	429c      	cmp	r4, r3
 800bcce:	bf08      	it	eq
 800bcd0:	68ec      	ldreq	r4, [r5, #12]
 800bcd2:	e7d5      	b.n	800bc80 <_puts_r+0x24>
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f000 ff5c 	bl	800cb94 <__swsetup_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d0dd      	beq.n	800bc9c <_puts_r+0x40>
 800bce0:	f04f 35ff 	mov.w	r5, #4294967295
 800bce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bce6:	07da      	lsls	r2, r3, #31
 800bce8:	d405      	bmi.n	800bcf6 <_puts_r+0x9a>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	059b      	lsls	r3, r3, #22
 800bcee:	d402      	bmi.n	800bcf6 <_puts_r+0x9a>
 800bcf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcf2:	f002 fb63 	bl	800e3bc <__retarget_lock_release_recursive>
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	da04      	bge.n	800bd08 <_puts_r+0xac>
 800bcfe:	69a2      	ldr	r2, [r4, #24]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	dc06      	bgt.n	800bd12 <_puts_r+0xb6>
 800bd04:	290a      	cmp	r1, #10
 800bd06:	d004      	beq.n	800bd12 <_puts_r+0xb6>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	6022      	str	r2, [r4, #0]
 800bd0e:	7019      	strb	r1, [r3, #0]
 800bd10:	e7c5      	b.n	800bc9e <_puts_r+0x42>
 800bd12:	4622      	mov	r2, r4
 800bd14:	4628      	mov	r0, r5
 800bd16:	f000 feeb 	bl	800caf0 <__swbuf_r>
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d1bf      	bne.n	800bc9e <_puts_r+0x42>
 800bd1e:	e7df      	b.n	800bce0 <_puts_r+0x84>
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	250a      	movs	r5, #10
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	6022      	str	r2, [r4, #0]
 800bd28:	701d      	strb	r5, [r3, #0]
 800bd2a:	e7db      	b.n	800bce4 <_puts_r+0x88>
 800bd2c:	08010e44 	.word	0x08010e44
 800bd30:	08010e64 	.word	0x08010e64
 800bd34:	08010e24 	.word	0x08010e24

0800bd38 <puts>:
 800bd38:	4b02      	ldr	r3, [pc, #8]	; (800bd44 <puts+0xc>)
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	6818      	ldr	r0, [r3, #0]
 800bd3e:	f7ff bf8d 	b.w	800bc5c <_puts_r>
 800bd42:	bf00      	nop
 800bd44:	2000000c 	.word	0x2000000c

0800bd48 <nanf>:
 800bd48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd50 <nanf+0x8>
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	7fc00000 	.word	0x7fc00000

0800bd54 <siprintf>:
 800bd54:	b40e      	push	{r1, r2, r3}
 800bd56:	b500      	push	{lr}
 800bd58:	b09c      	sub	sp, #112	; 0x70
 800bd5a:	ab1d      	add	r3, sp, #116	; 0x74
 800bd5c:	9002      	str	r0, [sp, #8]
 800bd5e:	9006      	str	r0, [sp, #24]
 800bd60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd64:	4809      	ldr	r0, [pc, #36]	; (800bd8c <siprintf+0x38>)
 800bd66:	9107      	str	r1, [sp, #28]
 800bd68:	9104      	str	r1, [sp, #16]
 800bd6a:	4909      	ldr	r1, [pc, #36]	; (800bd90 <siprintf+0x3c>)
 800bd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd70:	9105      	str	r1, [sp, #20]
 800bd72:	6800      	ldr	r0, [r0, #0]
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	a902      	add	r1, sp, #8
 800bd78:	f003 f9b4 	bl	800f0e4 <_svfiprintf_r>
 800bd7c:	9b02      	ldr	r3, [sp, #8]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	b01c      	add	sp, #112	; 0x70
 800bd84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd88:	b003      	add	sp, #12
 800bd8a:	4770      	bx	lr
 800bd8c:	2000000c 	.word	0x2000000c
 800bd90:	ffff0208 	.word	0xffff0208

0800bd94 <sulp>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	4604      	mov	r4, r0
 800bd98:	460d      	mov	r5, r1
 800bd9a:	ec45 4b10 	vmov	d0, r4, r5
 800bd9e:	4616      	mov	r6, r2
 800bda0:	f002 fefe 	bl	800eba0 <__ulp>
 800bda4:	ec51 0b10 	vmov	r0, r1, d0
 800bda8:	b17e      	cbz	r6, 800bdca <sulp+0x36>
 800bdaa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bdae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	dd09      	ble.n	800bdca <sulp+0x36>
 800bdb6:	051b      	lsls	r3, r3, #20
 800bdb8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bdbc:	2400      	movs	r4, #0
 800bdbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	462b      	mov	r3, r5
 800bdc6:	f7f4 fc17 	bl	80005f8 <__aeabi_dmul>
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
 800bdcc:	0000      	movs	r0, r0
	...

0800bdd0 <_strtod_l>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	ed2d 8b02 	vpush	{d8}
 800bdd8:	b09d      	sub	sp, #116	; 0x74
 800bdda:	461f      	mov	r7, r3
 800bddc:	2300      	movs	r3, #0
 800bdde:	9318      	str	r3, [sp, #96]	; 0x60
 800bde0:	4ba2      	ldr	r3, [pc, #648]	; (800c06c <_strtod_l+0x29c>)
 800bde2:	9213      	str	r2, [sp, #76]	; 0x4c
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	9305      	str	r3, [sp, #20]
 800bde8:	4604      	mov	r4, r0
 800bdea:	4618      	mov	r0, r3
 800bdec:	4688      	mov	r8, r1
 800bdee:	f7f4 f9ef 	bl	80001d0 <strlen>
 800bdf2:	f04f 0a00 	mov.w	sl, #0
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	f04f 0b00 	mov.w	fp, #0
 800bdfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be02:	781a      	ldrb	r2, [r3, #0]
 800be04:	2a2b      	cmp	r2, #43	; 0x2b
 800be06:	d04e      	beq.n	800bea6 <_strtod_l+0xd6>
 800be08:	d83b      	bhi.n	800be82 <_strtod_l+0xb2>
 800be0a:	2a0d      	cmp	r2, #13
 800be0c:	d834      	bhi.n	800be78 <_strtod_l+0xa8>
 800be0e:	2a08      	cmp	r2, #8
 800be10:	d834      	bhi.n	800be7c <_strtod_l+0xac>
 800be12:	2a00      	cmp	r2, #0
 800be14:	d03e      	beq.n	800be94 <_strtod_l+0xc4>
 800be16:	2300      	movs	r3, #0
 800be18:	930a      	str	r3, [sp, #40]	; 0x28
 800be1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800be1c:	7833      	ldrb	r3, [r6, #0]
 800be1e:	2b30      	cmp	r3, #48	; 0x30
 800be20:	f040 80b0 	bne.w	800bf84 <_strtod_l+0x1b4>
 800be24:	7873      	ldrb	r3, [r6, #1]
 800be26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be2a:	2b58      	cmp	r3, #88	; 0x58
 800be2c:	d168      	bne.n	800bf00 <_strtod_l+0x130>
 800be2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	ab18      	add	r3, sp, #96	; 0x60
 800be34:	9702      	str	r7, [sp, #8]
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	4a8d      	ldr	r2, [pc, #564]	; (800c070 <_strtod_l+0x2a0>)
 800be3a:	ab19      	add	r3, sp, #100	; 0x64
 800be3c:	a917      	add	r1, sp, #92	; 0x5c
 800be3e:	4620      	mov	r0, r4
 800be40:	f001 ffae 	bl	800dda0 <__gethex>
 800be44:	f010 0707 	ands.w	r7, r0, #7
 800be48:	4605      	mov	r5, r0
 800be4a:	d005      	beq.n	800be58 <_strtod_l+0x88>
 800be4c:	2f06      	cmp	r7, #6
 800be4e:	d12c      	bne.n	800beaa <_strtod_l+0xda>
 800be50:	3601      	adds	r6, #1
 800be52:	2300      	movs	r3, #0
 800be54:	9617      	str	r6, [sp, #92]	; 0x5c
 800be56:	930a      	str	r3, [sp, #40]	; 0x28
 800be58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f040 8590 	bne.w	800c980 <_strtod_l+0xbb0>
 800be60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be62:	b1eb      	cbz	r3, 800bea0 <_strtod_l+0xd0>
 800be64:	4652      	mov	r2, sl
 800be66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800be6a:	ec43 2b10 	vmov	d0, r2, r3
 800be6e:	b01d      	add	sp, #116	; 0x74
 800be70:	ecbd 8b02 	vpop	{d8}
 800be74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be78:	2a20      	cmp	r2, #32
 800be7a:	d1cc      	bne.n	800be16 <_strtod_l+0x46>
 800be7c:	3301      	adds	r3, #1
 800be7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800be80:	e7be      	b.n	800be00 <_strtod_l+0x30>
 800be82:	2a2d      	cmp	r2, #45	; 0x2d
 800be84:	d1c7      	bne.n	800be16 <_strtod_l+0x46>
 800be86:	2201      	movs	r2, #1
 800be88:	920a      	str	r2, [sp, #40]	; 0x28
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	9217      	str	r2, [sp, #92]	; 0x5c
 800be8e:	785b      	ldrb	r3, [r3, #1]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1c2      	bne.n	800be1a <_strtod_l+0x4a>
 800be94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f040 856e 	bne.w	800c97c <_strtod_l+0xbac>
 800bea0:	4652      	mov	r2, sl
 800bea2:	465b      	mov	r3, fp
 800bea4:	e7e1      	b.n	800be6a <_strtod_l+0x9a>
 800bea6:	2200      	movs	r2, #0
 800bea8:	e7ee      	b.n	800be88 <_strtod_l+0xb8>
 800beaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800beac:	b13a      	cbz	r2, 800bebe <_strtod_l+0xee>
 800beae:	2135      	movs	r1, #53	; 0x35
 800beb0:	a81a      	add	r0, sp, #104	; 0x68
 800beb2:	f002 ff80 	bl	800edb6 <__copybits>
 800beb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800beb8:	4620      	mov	r0, r4
 800beba:	f002 fb3f 	bl	800e53c <_Bfree>
 800bebe:	3f01      	subs	r7, #1
 800bec0:	2f04      	cmp	r7, #4
 800bec2:	d806      	bhi.n	800bed2 <_strtod_l+0x102>
 800bec4:	e8df f007 	tbb	[pc, r7]
 800bec8:	1714030a 	.word	0x1714030a
 800becc:	0a          	.byte	0x0a
 800becd:	00          	.byte	0x00
 800bece:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bed2:	0728      	lsls	r0, r5, #28
 800bed4:	d5c0      	bpl.n	800be58 <_strtod_l+0x88>
 800bed6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800beda:	e7bd      	b.n	800be58 <_strtod_l+0x88>
 800bedc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bee2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bee6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800beea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800beee:	e7f0      	b.n	800bed2 <_strtod_l+0x102>
 800bef0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c074 <_strtod_l+0x2a4>
 800bef4:	e7ed      	b.n	800bed2 <_strtod_l+0x102>
 800bef6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800befa:	f04f 3aff 	mov.w	sl, #4294967295
 800befe:	e7e8      	b.n	800bed2 <_strtod_l+0x102>
 800bf00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	2b30      	cmp	r3, #48	; 0x30
 800bf0a:	d0f9      	beq.n	800bf00 <_strtod_l+0x130>
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d0a3      	beq.n	800be58 <_strtod_l+0x88>
 800bf10:	2301      	movs	r3, #1
 800bf12:	f04f 0900 	mov.w	r9, #0
 800bf16:	9304      	str	r3, [sp, #16]
 800bf18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf1a:	9308      	str	r3, [sp, #32]
 800bf1c:	f8cd 901c 	str.w	r9, [sp, #28]
 800bf20:	464f      	mov	r7, r9
 800bf22:	220a      	movs	r2, #10
 800bf24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bf26:	7806      	ldrb	r6, [r0, #0]
 800bf28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bf2c:	b2d9      	uxtb	r1, r3
 800bf2e:	2909      	cmp	r1, #9
 800bf30:	d92a      	bls.n	800bf88 <_strtod_l+0x1b8>
 800bf32:	9905      	ldr	r1, [sp, #20]
 800bf34:	462a      	mov	r2, r5
 800bf36:	f003 fb8a 	bl	800f64e <strncmp>
 800bf3a:	b398      	cbz	r0, 800bfa4 <_strtod_l+0x1d4>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	4632      	mov	r2, r6
 800bf40:	463d      	mov	r5, r7
 800bf42:	9005      	str	r0, [sp, #20]
 800bf44:	4603      	mov	r3, r0
 800bf46:	2a65      	cmp	r2, #101	; 0x65
 800bf48:	d001      	beq.n	800bf4e <_strtod_l+0x17e>
 800bf4a:	2a45      	cmp	r2, #69	; 0x45
 800bf4c:	d118      	bne.n	800bf80 <_strtod_l+0x1b0>
 800bf4e:	b91d      	cbnz	r5, 800bf58 <_strtod_l+0x188>
 800bf50:	9a04      	ldr	r2, [sp, #16]
 800bf52:	4302      	orrs	r2, r0
 800bf54:	d09e      	beq.n	800be94 <_strtod_l+0xc4>
 800bf56:	2500      	movs	r5, #0
 800bf58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bf5c:	f108 0201 	add.w	r2, r8, #1
 800bf60:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf62:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bf66:	2a2b      	cmp	r2, #43	; 0x2b
 800bf68:	d075      	beq.n	800c056 <_strtod_l+0x286>
 800bf6a:	2a2d      	cmp	r2, #45	; 0x2d
 800bf6c:	d07b      	beq.n	800c066 <_strtod_l+0x296>
 800bf6e:	f04f 0c00 	mov.w	ip, #0
 800bf72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bf76:	2909      	cmp	r1, #9
 800bf78:	f240 8082 	bls.w	800c080 <_strtod_l+0x2b0>
 800bf7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf80:	2600      	movs	r6, #0
 800bf82:	e09d      	b.n	800c0c0 <_strtod_l+0x2f0>
 800bf84:	2300      	movs	r3, #0
 800bf86:	e7c4      	b.n	800bf12 <_strtod_l+0x142>
 800bf88:	2f08      	cmp	r7, #8
 800bf8a:	bfd8      	it	le
 800bf8c:	9907      	ldrle	r1, [sp, #28]
 800bf8e:	f100 0001 	add.w	r0, r0, #1
 800bf92:	bfda      	itte	le
 800bf94:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf98:	9307      	strle	r3, [sp, #28]
 800bf9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bf9e:	3701      	adds	r7, #1
 800bfa0:	9017      	str	r0, [sp, #92]	; 0x5c
 800bfa2:	e7bf      	b.n	800bf24 <_strtod_l+0x154>
 800bfa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfa6:	195a      	adds	r2, r3, r5
 800bfa8:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfaa:	5d5a      	ldrb	r2, [r3, r5]
 800bfac:	2f00      	cmp	r7, #0
 800bfae:	d037      	beq.n	800c020 <_strtod_l+0x250>
 800bfb0:	9005      	str	r0, [sp, #20]
 800bfb2:	463d      	mov	r5, r7
 800bfb4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bfb8:	2b09      	cmp	r3, #9
 800bfba:	d912      	bls.n	800bfe2 <_strtod_l+0x212>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e7c2      	b.n	800bf46 <_strtod_l+0x176>
 800bfc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfc6:	785a      	ldrb	r2, [r3, #1]
 800bfc8:	3001      	adds	r0, #1
 800bfca:	2a30      	cmp	r2, #48	; 0x30
 800bfcc:	d0f8      	beq.n	800bfc0 <_strtod_l+0x1f0>
 800bfce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bfd2:	2b08      	cmp	r3, #8
 800bfd4:	f200 84d9 	bhi.w	800c98a <_strtod_l+0xbba>
 800bfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfda:	9005      	str	r0, [sp, #20]
 800bfdc:	2000      	movs	r0, #0
 800bfde:	9308      	str	r3, [sp, #32]
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	3a30      	subs	r2, #48	; 0x30
 800bfe4:	f100 0301 	add.w	r3, r0, #1
 800bfe8:	d014      	beq.n	800c014 <_strtod_l+0x244>
 800bfea:	9905      	ldr	r1, [sp, #20]
 800bfec:	4419      	add	r1, r3
 800bfee:	9105      	str	r1, [sp, #20]
 800bff0:	462b      	mov	r3, r5
 800bff2:	eb00 0e05 	add.w	lr, r0, r5
 800bff6:	210a      	movs	r1, #10
 800bff8:	4573      	cmp	r3, lr
 800bffa:	d113      	bne.n	800c024 <_strtod_l+0x254>
 800bffc:	182b      	adds	r3, r5, r0
 800bffe:	2b08      	cmp	r3, #8
 800c000:	f105 0501 	add.w	r5, r5, #1
 800c004:	4405      	add	r5, r0
 800c006:	dc1c      	bgt.n	800c042 <_strtod_l+0x272>
 800c008:	9907      	ldr	r1, [sp, #28]
 800c00a:	230a      	movs	r3, #10
 800c00c:	fb03 2301 	mla	r3, r3, r1, r2
 800c010:	9307      	str	r3, [sp, #28]
 800c012:	2300      	movs	r3, #0
 800c014:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c016:	1c51      	adds	r1, r2, #1
 800c018:	9117      	str	r1, [sp, #92]	; 0x5c
 800c01a:	7852      	ldrb	r2, [r2, #1]
 800c01c:	4618      	mov	r0, r3
 800c01e:	e7c9      	b.n	800bfb4 <_strtod_l+0x1e4>
 800c020:	4638      	mov	r0, r7
 800c022:	e7d2      	b.n	800bfca <_strtod_l+0x1fa>
 800c024:	2b08      	cmp	r3, #8
 800c026:	dc04      	bgt.n	800c032 <_strtod_l+0x262>
 800c028:	9e07      	ldr	r6, [sp, #28]
 800c02a:	434e      	muls	r6, r1
 800c02c:	9607      	str	r6, [sp, #28]
 800c02e:	3301      	adds	r3, #1
 800c030:	e7e2      	b.n	800bff8 <_strtod_l+0x228>
 800c032:	f103 0c01 	add.w	ip, r3, #1
 800c036:	f1bc 0f10 	cmp.w	ip, #16
 800c03a:	bfd8      	it	le
 800c03c:	fb01 f909 	mulle.w	r9, r1, r9
 800c040:	e7f5      	b.n	800c02e <_strtod_l+0x25e>
 800c042:	2d10      	cmp	r5, #16
 800c044:	bfdc      	itt	le
 800c046:	230a      	movle	r3, #10
 800c048:	fb03 2909 	mlale	r9, r3, r9, r2
 800c04c:	e7e1      	b.n	800c012 <_strtod_l+0x242>
 800c04e:	2300      	movs	r3, #0
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	2301      	movs	r3, #1
 800c054:	e77c      	b.n	800bf50 <_strtod_l+0x180>
 800c056:	f04f 0c00 	mov.w	ip, #0
 800c05a:	f108 0202 	add.w	r2, r8, #2
 800c05e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c060:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c064:	e785      	b.n	800bf72 <_strtod_l+0x1a2>
 800c066:	f04f 0c01 	mov.w	ip, #1
 800c06a:	e7f6      	b.n	800c05a <_strtod_l+0x28a>
 800c06c:	08010eec 	.word	0x08010eec
 800c070:	08010c3c 	.word	0x08010c3c
 800c074:	7ff00000 	.word	0x7ff00000
 800c078:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c07a:	1c51      	adds	r1, r2, #1
 800c07c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c07e:	7852      	ldrb	r2, [r2, #1]
 800c080:	2a30      	cmp	r2, #48	; 0x30
 800c082:	d0f9      	beq.n	800c078 <_strtod_l+0x2a8>
 800c084:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c088:	2908      	cmp	r1, #8
 800c08a:	f63f af79 	bhi.w	800bf80 <_strtod_l+0x1b0>
 800c08e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c092:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c094:	9206      	str	r2, [sp, #24]
 800c096:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c098:	1c51      	adds	r1, r2, #1
 800c09a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c09c:	7852      	ldrb	r2, [r2, #1]
 800c09e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c0a2:	2e09      	cmp	r6, #9
 800c0a4:	d937      	bls.n	800c116 <_strtod_l+0x346>
 800c0a6:	9e06      	ldr	r6, [sp, #24]
 800c0a8:	1b89      	subs	r1, r1, r6
 800c0aa:	2908      	cmp	r1, #8
 800c0ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c0b0:	dc02      	bgt.n	800c0b8 <_strtod_l+0x2e8>
 800c0b2:	4576      	cmp	r6, lr
 800c0b4:	bfa8      	it	ge
 800c0b6:	4676      	movge	r6, lr
 800c0b8:	f1bc 0f00 	cmp.w	ip, #0
 800c0bc:	d000      	beq.n	800c0c0 <_strtod_l+0x2f0>
 800c0be:	4276      	negs	r6, r6
 800c0c0:	2d00      	cmp	r5, #0
 800c0c2:	d14d      	bne.n	800c160 <_strtod_l+0x390>
 800c0c4:	9904      	ldr	r1, [sp, #16]
 800c0c6:	4301      	orrs	r1, r0
 800c0c8:	f47f aec6 	bne.w	800be58 <_strtod_l+0x88>
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f47f aee1 	bne.w	800be94 <_strtod_l+0xc4>
 800c0d2:	2a69      	cmp	r2, #105	; 0x69
 800c0d4:	d027      	beq.n	800c126 <_strtod_l+0x356>
 800c0d6:	dc24      	bgt.n	800c122 <_strtod_l+0x352>
 800c0d8:	2a49      	cmp	r2, #73	; 0x49
 800c0da:	d024      	beq.n	800c126 <_strtod_l+0x356>
 800c0dc:	2a4e      	cmp	r2, #78	; 0x4e
 800c0de:	f47f aed9 	bne.w	800be94 <_strtod_l+0xc4>
 800c0e2:	499f      	ldr	r1, [pc, #636]	; (800c360 <_strtod_l+0x590>)
 800c0e4:	a817      	add	r0, sp, #92	; 0x5c
 800c0e6:	f002 f8b3 	bl	800e250 <__match>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	f43f aed2 	beq.w	800be94 <_strtod_l+0xc4>
 800c0f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b28      	cmp	r3, #40	; 0x28
 800c0f6:	d12d      	bne.n	800c154 <_strtod_l+0x384>
 800c0f8:	499a      	ldr	r1, [pc, #616]	; (800c364 <_strtod_l+0x594>)
 800c0fa:	aa1a      	add	r2, sp, #104	; 0x68
 800c0fc:	a817      	add	r0, sp, #92	; 0x5c
 800c0fe:	f002 f8bb 	bl	800e278 <__hexnan>
 800c102:	2805      	cmp	r0, #5
 800c104:	d126      	bne.n	800c154 <_strtod_l+0x384>
 800c106:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c108:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c10c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c110:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c114:	e6a0      	b.n	800be58 <_strtod_l+0x88>
 800c116:	210a      	movs	r1, #10
 800c118:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c11c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c120:	e7b9      	b.n	800c096 <_strtod_l+0x2c6>
 800c122:	2a6e      	cmp	r2, #110	; 0x6e
 800c124:	e7db      	b.n	800c0de <_strtod_l+0x30e>
 800c126:	4990      	ldr	r1, [pc, #576]	; (800c368 <_strtod_l+0x598>)
 800c128:	a817      	add	r0, sp, #92	; 0x5c
 800c12a:	f002 f891 	bl	800e250 <__match>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f43f aeb0 	beq.w	800be94 <_strtod_l+0xc4>
 800c134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c136:	498d      	ldr	r1, [pc, #564]	; (800c36c <_strtod_l+0x59c>)
 800c138:	3b01      	subs	r3, #1
 800c13a:	a817      	add	r0, sp, #92	; 0x5c
 800c13c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c13e:	f002 f887 	bl	800e250 <__match>
 800c142:	b910      	cbnz	r0, 800c14a <_strtod_l+0x37a>
 800c144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c146:	3301      	adds	r3, #1
 800c148:	9317      	str	r3, [sp, #92]	; 0x5c
 800c14a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c37c <_strtod_l+0x5ac>
 800c14e:	f04f 0a00 	mov.w	sl, #0
 800c152:	e681      	b.n	800be58 <_strtod_l+0x88>
 800c154:	4886      	ldr	r0, [pc, #536]	; (800c370 <_strtod_l+0x5a0>)
 800c156:	f003 fa1f 	bl	800f598 <nan>
 800c15a:	ec5b ab10 	vmov	sl, fp, d0
 800c15e:	e67b      	b.n	800be58 <_strtod_l+0x88>
 800c160:	9b05      	ldr	r3, [sp, #20]
 800c162:	9807      	ldr	r0, [sp, #28]
 800c164:	1af3      	subs	r3, r6, r3
 800c166:	2f00      	cmp	r7, #0
 800c168:	bf08      	it	eq
 800c16a:	462f      	moveq	r7, r5
 800c16c:	2d10      	cmp	r5, #16
 800c16e:	9306      	str	r3, [sp, #24]
 800c170:	46a8      	mov	r8, r5
 800c172:	bfa8      	it	ge
 800c174:	f04f 0810 	movge.w	r8, #16
 800c178:	f7f4 f9c4 	bl	8000504 <__aeabi_ui2d>
 800c17c:	2d09      	cmp	r5, #9
 800c17e:	4682      	mov	sl, r0
 800c180:	468b      	mov	fp, r1
 800c182:	dd13      	ble.n	800c1ac <_strtod_l+0x3dc>
 800c184:	4b7b      	ldr	r3, [pc, #492]	; (800c374 <_strtod_l+0x5a4>)
 800c186:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c18a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c18e:	f7f4 fa33 	bl	80005f8 <__aeabi_dmul>
 800c192:	4682      	mov	sl, r0
 800c194:	4648      	mov	r0, r9
 800c196:	468b      	mov	fp, r1
 800c198:	f7f4 f9b4 	bl	8000504 <__aeabi_ui2d>
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4650      	mov	r0, sl
 800c1a2:	4659      	mov	r1, fp
 800c1a4:	f7f4 f872 	bl	800028c <__adddf3>
 800c1a8:	4682      	mov	sl, r0
 800c1aa:	468b      	mov	fp, r1
 800c1ac:	2d0f      	cmp	r5, #15
 800c1ae:	dc38      	bgt.n	800c222 <_strtod_l+0x452>
 800c1b0:	9b06      	ldr	r3, [sp, #24]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f43f ae50 	beq.w	800be58 <_strtod_l+0x88>
 800c1b8:	dd24      	ble.n	800c204 <_strtod_l+0x434>
 800c1ba:	2b16      	cmp	r3, #22
 800c1bc:	dc0b      	bgt.n	800c1d6 <_strtod_l+0x406>
 800c1be:	496d      	ldr	r1, [pc, #436]	; (800c374 <_strtod_l+0x5a4>)
 800c1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1c8:	4652      	mov	r2, sl
 800c1ca:	465b      	mov	r3, fp
 800c1cc:	f7f4 fa14 	bl	80005f8 <__aeabi_dmul>
 800c1d0:	4682      	mov	sl, r0
 800c1d2:	468b      	mov	fp, r1
 800c1d4:	e640      	b.n	800be58 <_strtod_l+0x88>
 800c1d6:	9a06      	ldr	r2, [sp, #24]
 800c1d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	db20      	blt.n	800c222 <_strtod_l+0x452>
 800c1e0:	4c64      	ldr	r4, [pc, #400]	; (800c374 <_strtod_l+0x5a4>)
 800c1e2:	f1c5 050f 	rsb	r5, r5, #15
 800c1e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c1ea:	4652      	mov	r2, sl
 800c1ec:	465b      	mov	r3, fp
 800c1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1f2:	f7f4 fa01 	bl	80005f8 <__aeabi_dmul>
 800c1f6:	9b06      	ldr	r3, [sp, #24]
 800c1f8:	1b5d      	subs	r5, r3, r5
 800c1fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c1fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c202:	e7e3      	b.n	800c1cc <_strtod_l+0x3fc>
 800c204:	9b06      	ldr	r3, [sp, #24]
 800c206:	3316      	adds	r3, #22
 800c208:	db0b      	blt.n	800c222 <_strtod_l+0x452>
 800c20a:	9b05      	ldr	r3, [sp, #20]
 800c20c:	1b9e      	subs	r6, r3, r6
 800c20e:	4b59      	ldr	r3, [pc, #356]	; (800c374 <_strtod_l+0x5a4>)
 800c210:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c214:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c218:	4650      	mov	r0, sl
 800c21a:	4659      	mov	r1, fp
 800c21c:	f7f4 fb16 	bl	800084c <__aeabi_ddiv>
 800c220:	e7d6      	b.n	800c1d0 <_strtod_l+0x400>
 800c222:	9b06      	ldr	r3, [sp, #24]
 800c224:	eba5 0808 	sub.w	r8, r5, r8
 800c228:	4498      	add	r8, r3
 800c22a:	f1b8 0f00 	cmp.w	r8, #0
 800c22e:	dd74      	ble.n	800c31a <_strtod_l+0x54a>
 800c230:	f018 030f 	ands.w	r3, r8, #15
 800c234:	d00a      	beq.n	800c24c <_strtod_l+0x47c>
 800c236:	494f      	ldr	r1, [pc, #316]	; (800c374 <_strtod_l+0x5a4>)
 800c238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c23c:	4652      	mov	r2, sl
 800c23e:	465b      	mov	r3, fp
 800c240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c244:	f7f4 f9d8 	bl	80005f8 <__aeabi_dmul>
 800c248:	4682      	mov	sl, r0
 800c24a:	468b      	mov	fp, r1
 800c24c:	f038 080f 	bics.w	r8, r8, #15
 800c250:	d04f      	beq.n	800c2f2 <_strtod_l+0x522>
 800c252:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c256:	dd22      	ble.n	800c29e <_strtod_l+0x4ce>
 800c258:	2500      	movs	r5, #0
 800c25a:	462e      	mov	r6, r5
 800c25c:	9507      	str	r5, [sp, #28]
 800c25e:	9505      	str	r5, [sp, #20]
 800c260:	2322      	movs	r3, #34	; 0x22
 800c262:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c37c <_strtod_l+0x5ac>
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	f04f 0a00 	mov.w	sl, #0
 800c26c:	9b07      	ldr	r3, [sp, #28]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f43f adf2 	beq.w	800be58 <_strtod_l+0x88>
 800c274:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c276:	4620      	mov	r0, r4
 800c278:	f002 f960 	bl	800e53c <_Bfree>
 800c27c:	9905      	ldr	r1, [sp, #20]
 800c27e:	4620      	mov	r0, r4
 800c280:	f002 f95c 	bl	800e53c <_Bfree>
 800c284:	4631      	mov	r1, r6
 800c286:	4620      	mov	r0, r4
 800c288:	f002 f958 	bl	800e53c <_Bfree>
 800c28c:	9907      	ldr	r1, [sp, #28]
 800c28e:	4620      	mov	r0, r4
 800c290:	f002 f954 	bl	800e53c <_Bfree>
 800c294:	4629      	mov	r1, r5
 800c296:	4620      	mov	r0, r4
 800c298:	f002 f950 	bl	800e53c <_Bfree>
 800c29c:	e5dc      	b.n	800be58 <_strtod_l+0x88>
 800c29e:	4b36      	ldr	r3, [pc, #216]	; (800c378 <_strtod_l+0x5a8>)
 800c2a0:	9304      	str	r3, [sp, #16]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c2a8:	4650      	mov	r0, sl
 800c2aa:	4659      	mov	r1, fp
 800c2ac:	4699      	mov	r9, r3
 800c2ae:	f1b8 0f01 	cmp.w	r8, #1
 800c2b2:	dc21      	bgt.n	800c2f8 <_strtod_l+0x528>
 800c2b4:	b10b      	cbz	r3, 800c2ba <_strtod_l+0x4ea>
 800c2b6:	4682      	mov	sl, r0
 800c2b8:	468b      	mov	fp, r1
 800c2ba:	4b2f      	ldr	r3, [pc, #188]	; (800c378 <_strtod_l+0x5a8>)
 800c2bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c2c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c2c4:	4652      	mov	r2, sl
 800c2c6:	465b      	mov	r3, fp
 800c2c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c2cc:	f7f4 f994 	bl	80005f8 <__aeabi_dmul>
 800c2d0:	4b2a      	ldr	r3, [pc, #168]	; (800c37c <_strtod_l+0x5ac>)
 800c2d2:	460a      	mov	r2, r1
 800c2d4:	400b      	ands	r3, r1
 800c2d6:	492a      	ldr	r1, [pc, #168]	; (800c380 <_strtod_l+0x5b0>)
 800c2d8:	428b      	cmp	r3, r1
 800c2da:	4682      	mov	sl, r0
 800c2dc:	d8bc      	bhi.n	800c258 <_strtod_l+0x488>
 800c2de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c2e2:	428b      	cmp	r3, r1
 800c2e4:	bf86      	itte	hi
 800c2e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c384 <_strtod_l+0x5b4>
 800c2ea:	f04f 3aff 	movhi.w	sl, #4294967295
 800c2ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	e084      	b.n	800c402 <_strtod_l+0x632>
 800c2f8:	f018 0f01 	tst.w	r8, #1
 800c2fc:	d005      	beq.n	800c30a <_strtod_l+0x53a>
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f7f4 f978 	bl	80005f8 <__aeabi_dmul>
 800c308:	2301      	movs	r3, #1
 800c30a:	9a04      	ldr	r2, [sp, #16]
 800c30c:	3208      	adds	r2, #8
 800c30e:	f109 0901 	add.w	r9, r9, #1
 800c312:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c316:	9204      	str	r2, [sp, #16]
 800c318:	e7c9      	b.n	800c2ae <_strtod_l+0x4de>
 800c31a:	d0ea      	beq.n	800c2f2 <_strtod_l+0x522>
 800c31c:	f1c8 0800 	rsb	r8, r8, #0
 800c320:	f018 020f 	ands.w	r2, r8, #15
 800c324:	d00a      	beq.n	800c33c <_strtod_l+0x56c>
 800c326:	4b13      	ldr	r3, [pc, #76]	; (800c374 <_strtod_l+0x5a4>)
 800c328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c32c:	4650      	mov	r0, sl
 800c32e:	4659      	mov	r1, fp
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f7f4 fa8a 	bl	800084c <__aeabi_ddiv>
 800c338:	4682      	mov	sl, r0
 800c33a:	468b      	mov	fp, r1
 800c33c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c340:	d0d7      	beq.n	800c2f2 <_strtod_l+0x522>
 800c342:	f1b8 0f1f 	cmp.w	r8, #31
 800c346:	dd1f      	ble.n	800c388 <_strtod_l+0x5b8>
 800c348:	2500      	movs	r5, #0
 800c34a:	462e      	mov	r6, r5
 800c34c:	9507      	str	r5, [sp, #28]
 800c34e:	9505      	str	r5, [sp, #20]
 800c350:	2322      	movs	r3, #34	; 0x22
 800c352:	f04f 0a00 	mov.w	sl, #0
 800c356:	f04f 0b00 	mov.w	fp, #0
 800c35a:	6023      	str	r3, [r4, #0]
 800c35c:	e786      	b.n	800c26c <_strtod_l+0x49c>
 800c35e:	bf00      	nop
 800c360:	08010c0d 	.word	0x08010c0d
 800c364:	08010c50 	.word	0x08010c50
 800c368:	08010c05 	.word	0x08010c05
 800c36c:	08010d94 	.word	0x08010d94
 800c370:	080110a8 	.word	0x080110a8
 800c374:	08010f88 	.word	0x08010f88
 800c378:	08010f60 	.word	0x08010f60
 800c37c:	7ff00000 	.word	0x7ff00000
 800c380:	7ca00000 	.word	0x7ca00000
 800c384:	7fefffff 	.word	0x7fefffff
 800c388:	f018 0310 	ands.w	r3, r8, #16
 800c38c:	bf18      	it	ne
 800c38e:	236a      	movne	r3, #106	; 0x6a
 800c390:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c740 <_strtod_l+0x970>
 800c394:	9304      	str	r3, [sp, #16]
 800c396:	4650      	mov	r0, sl
 800c398:	4659      	mov	r1, fp
 800c39a:	2300      	movs	r3, #0
 800c39c:	f018 0f01 	tst.w	r8, #1
 800c3a0:	d004      	beq.n	800c3ac <_strtod_l+0x5dc>
 800c3a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c3a6:	f7f4 f927 	bl	80005f8 <__aeabi_dmul>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c3b0:	f109 0908 	add.w	r9, r9, #8
 800c3b4:	d1f2      	bne.n	800c39c <_strtod_l+0x5cc>
 800c3b6:	b10b      	cbz	r3, 800c3bc <_strtod_l+0x5ec>
 800c3b8:	4682      	mov	sl, r0
 800c3ba:	468b      	mov	fp, r1
 800c3bc:	9b04      	ldr	r3, [sp, #16]
 800c3be:	b1c3      	cbz	r3, 800c3f2 <_strtod_l+0x622>
 800c3c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c3c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	4659      	mov	r1, fp
 800c3cc:	dd11      	ble.n	800c3f2 <_strtod_l+0x622>
 800c3ce:	2b1f      	cmp	r3, #31
 800c3d0:	f340 8124 	ble.w	800c61c <_strtod_l+0x84c>
 800c3d4:	2b34      	cmp	r3, #52	; 0x34
 800c3d6:	bfde      	ittt	le
 800c3d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c3dc:	f04f 33ff 	movle.w	r3, #4294967295
 800c3e0:	fa03 f202 	lslle.w	r2, r3, r2
 800c3e4:	f04f 0a00 	mov.w	sl, #0
 800c3e8:	bfcc      	ite	gt
 800c3ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c3ee:	ea02 0b01 	andle.w	fp, r2, r1
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4650      	mov	r0, sl
 800c3f8:	4659      	mov	r1, fp
 800c3fa:	f7f4 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d1a2      	bne.n	800c348 <_strtod_l+0x578>
 800c402:	9b07      	ldr	r3, [sp, #28]
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	9908      	ldr	r1, [sp, #32]
 800c408:	462b      	mov	r3, r5
 800c40a:	463a      	mov	r2, r7
 800c40c:	4620      	mov	r0, r4
 800c40e:	f002 f8fd 	bl	800e60c <__s2b>
 800c412:	9007      	str	r0, [sp, #28]
 800c414:	2800      	cmp	r0, #0
 800c416:	f43f af1f 	beq.w	800c258 <_strtod_l+0x488>
 800c41a:	9b05      	ldr	r3, [sp, #20]
 800c41c:	1b9e      	subs	r6, r3, r6
 800c41e:	9b06      	ldr	r3, [sp, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	bfb4      	ite	lt
 800c424:	4633      	movlt	r3, r6
 800c426:	2300      	movge	r3, #0
 800c428:	930c      	str	r3, [sp, #48]	; 0x30
 800c42a:	9b06      	ldr	r3, [sp, #24]
 800c42c:	2500      	movs	r5, #0
 800c42e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c432:	9312      	str	r3, [sp, #72]	; 0x48
 800c434:	462e      	mov	r6, r5
 800c436:	9b07      	ldr	r3, [sp, #28]
 800c438:	4620      	mov	r0, r4
 800c43a:	6859      	ldr	r1, [r3, #4]
 800c43c:	f002 f83e 	bl	800e4bc <_Balloc>
 800c440:	9005      	str	r0, [sp, #20]
 800c442:	2800      	cmp	r0, #0
 800c444:	f43f af0c 	beq.w	800c260 <_strtod_l+0x490>
 800c448:	9b07      	ldr	r3, [sp, #28]
 800c44a:	691a      	ldr	r2, [r3, #16]
 800c44c:	3202      	adds	r2, #2
 800c44e:	f103 010c 	add.w	r1, r3, #12
 800c452:	0092      	lsls	r2, r2, #2
 800c454:	300c      	adds	r0, #12
 800c456:	f7fe fd59 	bl	800af0c <memcpy>
 800c45a:	ec4b ab10 	vmov	d0, sl, fp
 800c45e:	aa1a      	add	r2, sp, #104	; 0x68
 800c460:	a919      	add	r1, sp, #100	; 0x64
 800c462:	4620      	mov	r0, r4
 800c464:	f002 fc18 	bl	800ec98 <__d2b>
 800c468:	ec4b ab18 	vmov	d8, sl, fp
 800c46c:	9018      	str	r0, [sp, #96]	; 0x60
 800c46e:	2800      	cmp	r0, #0
 800c470:	f43f aef6 	beq.w	800c260 <_strtod_l+0x490>
 800c474:	2101      	movs	r1, #1
 800c476:	4620      	mov	r0, r4
 800c478:	f002 f962 	bl	800e740 <__i2b>
 800c47c:	4606      	mov	r6, r0
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f aeee 	beq.w	800c260 <_strtod_l+0x490>
 800c484:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c486:	9904      	ldr	r1, [sp, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	bfab      	itete	ge
 800c48c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c48e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c490:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c492:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c496:	bfac      	ite	ge
 800c498:	eb03 0902 	addge.w	r9, r3, r2
 800c49c:	1ad7      	sublt	r7, r2, r3
 800c49e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c4a0:	eba3 0801 	sub.w	r8, r3, r1
 800c4a4:	4490      	add	r8, r2
 800c4a6:	4ba1      	ldr	r3, [pc, #644]	; (800c72c <_strtod_l+0x95c>)
 800c4a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4ac:	4598      	cmp	r8, r3
 800c4ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c4b2:	f280 80c7 	bge.w	800c644 <_strtod_l+0x874>
 800c4b6:	eba3 0308 	sub.w	r3, r3, r8
 800c4ba:	2b1f      	cmp	r3, #31
 800c4bc:	eba2 0203 	sub.w	r2, r2, r3
 800c4c0:	f04f 0101 	mov.w	r1, #1
 800c4c4:	f300 80b1 	bgt.w	800c62a <_strtod_l+0x85a>
 800c4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c4cc:	930d      	str	r3, [sp, #52]	; 0x34
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	9308      	str	r3, [sp, #32]
 800c4d2:	eb09 0802 	add.w	r8, r9, r2
 800c4d6:	9b04      	ldr	r3, [sp, #16]
 800c4d8:	45c1      	cmp	r9, r8
 800c4da:	4417      	add	r7, r2
 800c4dc:	441f      	add	r7, r3
 800c4de:	464b      	mov	r3, r9
 800c4e0:	bfa8      	it	ge
 800c4e2:	4643      	movge	r3, r8
 800c4e4:	42bb      	cmp	r3, r7
 800c4e6:	bfa8      	it	ge
 800c4e8:	463b      	movge	r3, r7
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	bfc2      	ittt	gt
 800c4ee:	eba8 0803 	subgt.w	r8, r8, r3
 800c4f2:	1aff      	subgt	r7, r7, r3
 800c4f4:	eba9 0903 	subgt.w	r9, r9, r3
 800c4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	dd17      	ble.n	800c52e <_strtod_l+0x75e>
 800c4fe:	4631      	mov	r1, r6
 800c500:	461a      	mov	r2, r3
 800c502:	4620      	mov	r0, r4
 800c504:	f002 f9dc 	bl	800e8c0 <__pow5mult>
 800c508:	4606      	mov	r6, r0
 800c50a:	2800      	cmp	r0, #0
 800c50c:	f43f aea8 	beq.w	800c260 <_strtod_l+0x490>
 800c510:	4601      	mov	r1, r0
 800c512:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c514:	4620      	mov	r0, r4
 800c516:	f002 f929 	bl	800e76c <__multiply>
 800c51a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f43f ae9f 	beq.w	800c260 <_strtod_l+0x490>
 800c522:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c524:	4620      	mov	r0, r4
 800c526:	f002 f809 	bl	800e53c <_Bfree>
 800c52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c52c:	9318      	str	r3, [sp, #96]	; 0x60
 800c52e:	f1b8 0f00 	cmp.w	r8, #0
 800c532:	f300 808c 	bgt.w	800c64e <_strtod_l+0x87e>
 800c536:	9b06      	ldr	r3, [sp, #24]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dd08      	ble.n	800c54e <_strtod_l+0x77e>
 800c53c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c53e:	9905      	ldr	r1, [sp, #20]
 800c540:	4620      	mov	r0, r4
 800c542:	f002 f9bd 	bl	800e8c0 <__pow5mult>
 800c546:	9005      	str	r0, [sp, #20]
 800c548:	2800      	cmp	r0, #0
 800c54a:	f43f ae89 	beq.w	800c260 <_strtod_l+0x490>
 800c54e:	2f00      	cmp	r7, #0
 800c550:	dd08      	ble.n	800c564 <_strtod_l+0x794>
 800c552:	9905      	ldr	r1, [sp, #20]
 800c554:	463a      	mov	r2, r7
 800c556:	4620      	mov	r0, r4
 800c558:	f002 fa0c 	bl	800e974 <__lshift>
 800c55c:	9005      	str	r0, [sp, #20]
 800c55e:	2800      	cmp	r0, #0
 800c560:	f43f ae7e 	beq.w	800c260 <_strtod_l+0x490>
 800c564:	f1b9 0f00 	cmp.w	r9, #0
 800c568:	dd08      	ble.n	800c57c <_strtod_l+0x7ac>
 800c56a:	4631      	mov	r1, r6
 800c56c:	464a      	mov	r2, r9
 800c56e:	4620      	mov	r0, r4
 800c570:	f002 fa00 	bl	800e974 <__lshift>
 800c574:	4606      	mov	r6, r0
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f ae72 	beq.w	800c260 <_strtod_l+0x490>
 800c57c:	9a05      	ldr	r2, [sp, #20]
 800c57e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c580:	4620      	mov	r0, r4
 800c582:	f002 fa83 	bl	800ea8c <__mdiff>
 800c586:	4605      	mov	r5, r0
 800c588:	2800      	cmp	r0, #0
 800c58a:	f43f ae69 	beq.w	800c260 <_strtod_l+0x490>
 800c58e:	68c3      	ldr	r3, [r0, #12]
 800c590:	930b      	str	r3, [sp, #44]	; 0x2c
 800c592:	2300      	movs	r3, #0
 800c594:	60c3      	str	r3, [r0, #12]
 800c596:	4631      	mov	r1, r6
 800c598:	f002 fa5c 	bl	800ea54 <__mcmp>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	da60      	bge.n	800c662 <_strtod_l+0x892>
 800c5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5a2:	ea53 030a 	orrs.w	r3, r3, sl
 800c5a6:	f040 8082 	bne.w	800c6ae <_strtod_l+0x8de>
 800c5aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d17d      	bne.n	800c6ae <_strtod_l+0x8de>
 800c5b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5b6:	0d1b      	lsrs	r3, r3, #20
 800c5b8:	051b      	lsls	r3, r3, #20
 800c5ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c5be:	d976      	bls.n	800c6ae <_strtod_l+0x8de>
 800c5c0:	696b      	ldr	r3, [r5, #20]
 800c5c2:	b913      	cbnz	r3, 800c5ca <_strtod_l+0x7fa>
 800c5c4:	692b      	ldr	r3, [r5, #16]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	dd71      	ble.n	800c6ae <_strtod_l+0x8de>
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f002 f9d0 	bl	800e974 <__lshift>
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	f002 fa3c 	bl	800ea54 <__mcmp>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	dd66      	ble.n	800c6ae <_strtod_l+0x8de>
 800c5e0:	9904      	ldr	r1, [sp, #16]
 800c5e2:	4a53      	ldr	r2, [pc, #332]	; (800c730 <_strtod_l+0x960>)
 800c5e4:	465b      	mov	r3, fp
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	f000 8081 	beq.w	800c6ee <_strtod_l+0x91e>
 800c5ec:	ea02 010b 	and.w	r1, r2, fp
 800c5f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c5f4:	dc7b      	bgt.n	800c6ee <_strtod_l+0x91e>
 800c5f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c5fa:	f77f aea9 	ble.w	800c350 <_strtod_l+0x580>
 800c5fe:	4b4d      	ldr	r3, [pc, #308]	; (800c734 <_strtod_l+0x964>)
 800c600:	4650      	mov	r0, sl
 800c602:	4659      	mov	r1, fp
 800c604:	2200      	movs	r2, #0
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	460b      	mov	r3, r1
 800c60c:	4303      	orrs	r3, r0
 800c60e:	bf08      	it	eq
 800c610:	2322      	moveq	r3, #34	; 0x22
 800c612:	4682      	mov	sl, r0
 800c614:	468b      	mov	fp, r1
 800c616:	bf08      	it	eq
 800c618:	6023      	streq	r3, [r4, #0]
 800c61a:	e62b      	b.n	800c274 <_strtod_l+0x4a4>
 800c61c:	f04f 32ff 	mov.w	r2, #4294967295
 800c620:	fa02 f303 	lsl.w	r3, r2, r3
 800c624:	ea03 0a0a 	and.w	sl, r3, sl
 800c628:	e6e3      	b.n	800c3f2 <_strtod_l+0x622>
 800c62a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c62e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c632:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c636:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c63a:	fa01 f308 	lsl.w	r3, r1, r8
 800c63e:	9308      	str	r3, [sp, #32]
 800c640:	910d      	str	r1, [sp, #52]	; 0x34
 800c642:	e746      	b.n	800c4d2 <_strtod_l+0x702>
 800c644:	2300      	movs	r3, #0
 800c646:	9308      	str	r3, [sp, #32]
 800c648:	2301      	movs	r3, #1
 800c64a:	930d      	str	r3, [sp, #52]	; 0x34
 800c64c:	e741      	b.n	800c4d2 <_strtod_l+0x702>
 800c64e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c650:	4642      	mov	r2, r8
 800c652:	4620      	mov	r0, r4
 800c654:	f002 f98e 	bl	800e974 <__lshift>
 800c658:	9018      	str	r0, [sp, #96]	; 0x60
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f47f af6b 	bne.w	800c536 <_strtod_l+0x766>
 800c660:	e5fe      	b.n	800c260 <_strtod_l+0x490>
 800c662:	465f      	mov	r7, fp
 800c664:	d16e      	bne.n	800c744 <_strtod_l+0x974>
 800c666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c668:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c66c:	b342      	cbz	r2, 800c6c0 <_strtod_l+0x8f0>
 800c66e:	4a32      	ldr	r2, [pc, #200]	; (800c738 <_strtod_l+0x968>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d128      	bne.n	800c6c6 <_strtod_l+0x8f6>
 800c674:	9b04      	ldr	r3, [sp, #16]
 800c676:	4651      	mov	r1, sl
 800c678:	b1eb      	cbz	r3, 800c6b6 <_strtod_l+0x8e6>
 800c67a:	4b2d      	ldr	r3, [pc, #180]	; (800c730 <_strtod_l+0x960>)
 800c67c:	403b      	ands	r3, r7
 800c67e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c682:	f04f 32ff 	mov.w	r2, #4294967295
 800c686:	d819      	bhi.n	800c6bc <_strtod_l+0x8ec>
 800c688:	0d1b      	lsrs	r3, r3, #20
 800c68a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c68e:	fa02 f303 	lsl.w	r3, r2, r3
 800c692:	4299      	cmp	r1, r3
 800c694:	d117      	bne.n	800c6c6 <_strtod_l+0x8f6>
 800c696:	4b29      	ldr	r3, [pc, #164]	; (800c73c <_strtod_l+0x96c>)
 800c698:	429f      	cmp	r7, r3
 800c69a:	d102      	bne.n	800c6a2 <_strtod_l+0x8d2>
 800c69c:	3101      	adds	r1, #1
 800c69e:	f43f addf 	beq.w	800c260 <_strtod_l+0x490>
 800c6a2:	4b23      	ldr	r3, [pc, #140]	; (800c730 <_strtod_l+0x960>)
 800c6a4:	403b      	ands	r3, r7
 800c6a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c6aa:	f04f 0a00 	mov.w	sl, #0
 800c6ae:	9b04      	ldr	r3, [sp, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1a4      	bne.n	800c5fe <_strtod_l+0x82e>
 800c6b4:	e5de      	b.n	800c274 <_strtod_l+0x4a4>
 800c6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ba:	e7ea      	b.n	800c692 <_strtod_l+0x8c2>
 800c6bc:	4613      	mov	r3, r2
 800c6be:	e7e8      	b.n	800c692 <_strtod_l+0x8c2>
 800c6c0:	ea53 030a 	orrs.w	r3, r3, sl
 800c6c4:	d08c      	beq.n	800c5e0 <_strtod_l+0x810>
 800c6c6:	9b08      	ldr	r3, [sp, #32]
 800c6c8:	b1db      	cbz	r3, 800c702 <_strtod_l+0x932>
 800c6ca:	423b      	tst	r3, r7
 800c6cc:	d0ef      	beq.n	800c6ae <_strtod_l+0x8de>
 800c6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6d0:	9a04      	ldr	r2, [sp, #16]
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	4659      	mov	r1, fp
 800c6d6:	b1c3      	cbz	r3, 800c70a <_strtod_l+0x93a>
 800c6d8:	f7ff fb5c 	bl	800bd94 <sulp>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	ec51 0b18 	vmov	r0, r1, d8
 800c6e4:	f7f3 fdd2 	bl	800028c <__adddf3>
 800c6e8:	4682      	mov	sl, r0
 800c6ea:	468b      	mov	fp, r1
 800c6ec:	e7df      	b.n	800c6ae <_strtod_l+0x8de>
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c6f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c6f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800c700:	e7d5      	b.n	800c6ae <_strtod_l+0x8de>
 800c702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c704:	ea13 0f0a 	tst.w	r3, sl
 800c708:	e7e0      	b.n	800c6cc <_strtod_l+0x8fc>
 800c70a:	f7ff fb43 	bl	800bd94 <sulp>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	ec51 0b18 	vmov	r0, r1, d8
 800c716:	f7f3 fdb7 	bl	8000288 <__aeabi_dsub>
 800c71a:	2200      	movs	r2, #0
 800c71c:	2300      	movs	r3, #0
 800c71e:	4682      	mov	sl, r0
 800c720:	468b      	mov	fp, r1
 800c722:	f7f4 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c726:	2800      	cmp	r0, #0
 800c728:	d0c1      	beq.n	800c6ae <_strtod_l+0x8de>
 800c72a:	e611      	b.n	800c350 <_strtod_l+0x580>
 800c72c:	fffffc02 	.word	0xfffffc02
 800c730:	7ff00000 	.word	0x7ff00000
 800c734:	39500000 	.word	0x39500000
 800c738:	000fffff 	.word	0x000fffff
 800c73c:	7fefffff 	.word	0x7fefffff
 800c740:	08010c68 	.word	0x08010c68
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	f002 fb02 	bl	800ed50 <__ratio>
 800c74c:	ec59 8b10 	vmov	r8, r9, d0
 800c750:	ee10 0a10 	vmov	r0, s0
 800c754:	2200      	movs	r2, #0
 800c756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c75a:	4649      	mov	r1, r9
 800c75c:	f7f4 f9c8 	bl	8000af0 <__aeabi_dcmple>
 800c760:	2800      	cmp	r0, #0
 800c762:	d07a      	beq.n	800c85a <_strtod_l+0xa8a>
 800c764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d04a      	beq.n	800c800 <_strtod_l+0xa30>
 800c76a:	4b95      	ldr	r3, [pc, #596]	; (800c9c0 <_strtod_l+0xbf0>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c772:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c9c0 <_strtod_l+0xbf0>
 800c776:	f04f 0800 	mov.w	r8, #0
 800c77a:	4b92      	ldr	r3, [pc, #584]	; (800c9c4 <_strtod_l+0xbf4>)
 800c77c:	403b      	ands	r3, r7
 800c77e:	930d      	str	r3, [sp, #52]	; 0x34
 800c780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c782:	4b91      	ldr	r3, [pc, #580]	; (800c9c8 <_strtod_l+0xbf8>)
 800c784:	429a      	cmp	r2, r3
 800c786:	f040 80b0 	bne.w	800c8ea <_strtod_l+0xb1a>
 800c78a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c78e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c792:	ec4b ab10 	vmov	d0, sl, fp
 800c796:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c79a:	f002 fa01 	bl	800eba0 <__ulp>
 800c79e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7a2:	ec53 2b10 	vmov	r2, r3, d0
 800c7a6:	f7f3 ff27 	bl	80005f8 <__aeabi_dmul>
 800c7aa:	4652      	mov	r2, sl
 800c7ac:	465b      	mov	r3, fp
 800c7ae:	f7f3 fd6d 	bl	800028c <__adddf3>
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	4983      	ldr	r1, [pc, #524]	; (800c9c4 <_strtod_l+0xbf4>)
 800c7b6:	4a85      	ldr	r2, [pc, #532]	; (800c9cc <_strtod_l+0xbfc>)
 800c7b8:	4019      	ands	r1, r3
 800c7ba:	4291      	cmp	r1, r2
 800c7bc:	4682      	mov	sl, r0
 800c7be:	d960      	bls.n	800c882 <_strtod_l+0xab2>
 800c7c0:	ee18 3a90 	vmov	r3, s17
 800c7c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d104      	bne.n	800c7d6 <_strtod_l+0xa06>
 800c7cc:	ee18 3a10 	vmov	r3, s16
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	f43f ad45 	beq.w	800c260 <_strtod_l+0x490>
 800c7d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c9d8 <_strtod_l+0xc08>
 800c7da:	f04f 3aff 	mov.w	sl, #4294967295
 800c7de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f001 feab 	bl	800e53c <_Bfree>
 800c7e6:	9905      	ldr	r1, [sp, #20]
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f001 fea7 	bl	800e53c <_Bfree>
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f001 fea3 	bl	800e53c <_Bfree>
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f001 fe9f 	bl	800e53c <_Bfree>
 800c7fe:	e61a      	b.n	800c436 <_strtod_l+0x666>
 800c800:	f1ba 0f00 	cmp.w	sl, #0
 800c804:	d11b      	bne.n	800c83e <_strtod_l+0xa6e>
 800c806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c80a:	b9f3      	cbnz	r3, 800c84a <_strtod_l+0xa7a>
 800c80c:	4b6c      	ldr	r3, [pc, #432]	; (800c9c0 <_strtod_l+0xbf0>)
 800c80e:	2200      	movs	r2, #0
 800c810:	4640      	mov	r0, r8
 800c812:	4649      	mov	r1, r9
 800c814:	f7f4 f962 	bl	8000adc <__aeabi_dcmplt>
 800c818:	b9d0      	cbnz	r0, 800c850 <_strtod_l+0xa80>
 800c81a:	4640      	mov	r0, r8
 800c81c:	4649      	mov	r1, r9
 800c81e:	4b6c      	ldr	r3, [pc, #432]	; (800c9d0 <_strtod_l+0xc00>)
 800c820:	2200      	movs	r2, #0
 800c822:	f7f3 fee9 	bl	80005f8 <__aeabi_dmul>
 800c826:	4680      	mov	r8, r0
 800c828:	4689      	mov	r9, r1
 800c82a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c82e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c832:	9315      	str	r3, [sp, #84]	; 0x54
 800c834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c838:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c83c:	e79d      	b.n	800c77a <_strtod_l+0x9aa>
 800c83e:	f1ba 0f01 	cmp.w	sl, #1
 800c842:	d102      	bne.n	800c84a <_strtod_l+0xa7a>
 800c844:	2f00      	cmp	r7, #0
 800c846:	f43f ad83 	beq.w	800c350 <_strtod_l+0x580>
 800c84a:	4b62      	ldr	r3, [pc, #392]	; (800c9d4 <_strtod_l+0xc04>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	e78e      	b.n	800c76e <_strtod_l+0x99e>
 800c850:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c9d0 <_strtod_l+0xc00>
 800c854:	f04f 0800 	mov.w	r8, #0
 800c858:	e7e7      	b.n	800c82a <_strtod_l+0xa5a>
 800c85a:	4b5d      	ldr	r3, [pc, #372]	; (800c9d0 <_strtod_l+0xc00>)
 800c85c:	4640      	mov	r0, r8
 800c85e:	4649      	mov	r1, r9
 800c860:	2200      	movs	r2, #0
 800c862:	f7f3 fec9 	bl	80005f8 <__aeabi_dmul>
 800c866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c868:	4680      	mov	r8, r0
 800c86a:	4689      	mov	r9, r1
 800c86c:	b933      	cbnz	r3, 800c87c <_strtod_l+0xaac>
 800c86e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c872:	900e      	str	r0, [sp, #56]	; 0x38
 800c874:	930f      	str	r3, [sp, #60]	; 0x3c
 800c876:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c87a:	e7dd      	b.n	800c838 <_strtod_l+0xa68>
 800c87c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c880:	e7f9      	b.n	800c876 <_strtod_l+0xaa6>
 800c882:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c886:	9b04      	ldr	r3, [sp, #16]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1a8      	bne.n	800c7de <_strtod_l+0xa0e>
 800c88c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c892:	0d1b      	lsrs	r3, r3, #20
 800c894:	051b      	lsls	r3, r3, #20
 800c896:	429a      	cmp	r2, r3
 800c898:	d1a1      	bne.n	800c7de <_strtod_l+0xa0e>
 800c89a:	4640      	mov	r0, r8
 800c89c:	4649      	mov	r1, r9
 800c89e:	f7f4 fa0b 	bl	8000cb8 <__aeabi_d2lz>
 800c8a2:	f7f3 fe7b 	bl	800059c <__aeabi_l2d>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f7f3 fceb 	bl	8000288 <__aeabi_dsub>
 800c8b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8b8:	ea43 030a 	orr.w	r3, r3, sl
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	4680      	mov	r8, r0
 800c8c0:	4689      	mov	r9, r1
 800c8c2:	d055      	beq.n	800c970 <_strtod_l+0xba0>
 800c8c4:	a336      	add	r3, pc, #216	; (adr r3, 800c9a0 <_strtod_l+0xbd0>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	f7f4 f907 	bl	8000adc <__aeabi_dcmplt>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f47f acd0 	bne.w	800c274 <_strtod_l+0x4a4>
 800c8d4:	a334      	add	r3, pc, #208	; (adr r3, 800c9a8 <_strtod_l+0xbd8>)
 800c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f7f4 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	f43f af7b 	beq.w	800c7de <_strtod_l+0xa0e>
 800c8e8:	e4c4      	b.n	800c274 <_strtod_l+0x4a4>
 800c8ea:	9b04      	ldr	r3, [sp, #16]
 800c8ec:	b333      	cbz	r3, 800c93c <_strtod_l+0xb6c>
 800c8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c8f4:	d822      	bhi.n	800c93c <_strtod_l+0xb6c>
 800c8f6:	a32e      	add	r3, pc, #184	; (adr r3, 800c9b0 <_strtod_l+0xbe0>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	4649      	mov	r1, r9
 800c900:	f7f4 f8f6 	bl	8000af0 <__aeabi_dcmple>
 800c904:	b1a0      	cbz	r0, 800c930 <_strtod_l+0xb60>
 800c906:	4649      	mov	r1, r9
 800c908:	4640      	mov	r0, r8
 800c90a:	f7f4 f94d 	bl	8000ba8 <__aeabi_d2uiz>
 800c90e:	2801      	cmp	r0, #1
 800c910:	bf38      	it	cc
 800c912:	2001      	movcc	r0, #1
 800c914:	f7f3 fdf6 	bl	8000504 <__aeabi_ui2d>
 800c918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c91a:	4680      	mov	r8, r0
 800c91c:	4689      	mov	r9, r1
 800c91e:	bb23      	cbnz	r3, 800c96a <_strtod_l+0xb9a>
 800c920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c924:	9010      	str	r0, [sp, #64]	; 0x40
 800c926:	9311      	str	r3, [sp, #68]	; 0x44
 800c928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c92c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c934:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c938:	1a9b      	subs	r3, r3, r2
 800c93a:	9309      	str	r3, [sp, #36]	; 0x24
 800c93c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c940:	eeb0 0a48 	vmov.f32	s0, s16
 800c944:	eef0 0a68 	vmov.f32	s1, s17
 800c948:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c94c:	f002 f928 	bl	800eba0 <__ulp>
 800c950:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c954:	ec53 2b10 	vmov	r2, r3, d0
 800c958:	f7f3 fe4e 	bl	80005f8 <__aeabi_dmul>
 800c95c:	ec53 2b18 	vmov	r2, r3, d8
 800c960:	f7f3 fc94 	bl	800028c <__adddf3>
 800c964:	4682      	mov	sl, r0
 800c966:	468b      	mov	fp, r1
 800c968:	e78d      	b.n	800c886 <_strtod_l+0xab6>
 800c96a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c96e:	e7db      	b.n	800c928 <_strtod_l+0xb58>
 800c970:	a311      	add	r3, pc, #68	; (adr r3, 800c9b8 <_strtod_l+0xbe8>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	f7f4 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800c97a:	e7b2      	b.n	800c8e2 <_strtod_l+0xb12>
 800c97c:	2300      	movs	r3, #0
 800c97e:	930a      	str	r3, [sp, #40]	; 0x28
 800c980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	f7ff ba6b 	b.w	800be60 <_strtod_l+0x90>
 800c98a:	2a65      	cmp	r2, #101	; 0x65
 800c98c:	f43f ab5f 	beq.w	800c04e <_strtod_l+0x27e>
 800c990:	2a45      	cmp	r2, #69	; 0x45
 800c992:	f43f ab5c 	beq.w	800c04e <_strtod_l+0x27e>
 800c996:	2301      	movs	r3, #1
 800c998:	f7ff bb94 	b.w	800c0c4 <_strtod_l+0x2f4>
 800c99c:	f3af 8000 	nop.w
 800c9a0:	94a03595 	.word	0x94a03595
 800c9a4:	3fdfffff 	.word	0x3fdfffff
 800c9a8:	35afe535 	.word	0x35afe535
 800c9ac:	3fe00000 	.word	0x3fe00000
 800c9b0:	ffc00000 	.word	0xffc00000
 800c9b4:	41dfffff 	.word	0x41dfffff
 800c9b8:	94a03595 	.word	0x94a03595
 800c9bc:	3fcfffff 	.word	0x3fcfffff
 800c9c0:	3ff00000 	.word	0x3ff00000
 800c9c4:	7ff00000 	.word	0x7ff00000
 800c9c8:	7fe00000 	.word	0x7fe00000
 800c9cc:	7c9fffff 	.word	0x7c9fffff
 800c9d0:	3fe00000 	.word	0x3fe00000
 800c9d4:	bff00000 	.word	0xbff00000
 800c9d8:	7fefffff 	.word	0x7fefffff

0800c9dc <_strtod_r>:
 800c9dc:	4b01      	ldr	r3, [pc, #4]	; (800c9e4 <_strtod_r+0x8>)
 800c9de:	f7ff b9f7 	b.w	800bdd0 <_strtod_l>
 800c9e2:	bf00      	nop
 800c9e4:	20000074 	.word	0x20000074

0800c9e8 <_strtol_l.constprop.0>:
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ee:	d001      	beq.n	800c9f4 <_strtol_l.constprop.0+0xc>
 800c9f0:	2b24      	cmp	r3, #36	; 0x24
 800c9f2:	d906      	bls.n	800ca02 <_strtol_l.constprop.0+0x1a>
 800c9f4:	f7fe fa60 	bl	800aeb8 <__errno>
 800c9f8:	2316      	movs	r3, #22
 800c9fa:	6003      	str	r3, [r0, #0]
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cae8 <_strtol_l.constprop.0+0x100>
 800ca06:	460d      	mov	r5, r1
 800ca08:	462e      	mov	r6, r5
 800ca0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ca12:	f017 0708 	ands.w	r7, r7, #8
 800ca16:	d1f7      	bne.n	800ca08 <_strtol_l.constprop.0+0x20>
 800ca18:	2c2d      	cmp	r4, #45	; 0x2d
 800ca1a:	d132      	bne.n	800ca82 <_strtol_l.constprop.0+0x9a>
 800ca1c:	782c      	ldrb	r4, [r5, #0]
 800ca1e:	2701      	movs	r7, #1
 800ca20:	1cb5      	adds	r5, r6, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d05b      	beq.n	800cade <_strtol_l.constprop.0+0xf6>
 800ca26:	2b10      	cmp	r3, #16
 800ca28:	d109      	bne.n	800ca3e <_strtol_l.constprop.0+0x56>
 800ca2a:	2c30      	cmp	r4, #48	; 0x30
 800ca2c:	d107      	bne.n	800ca3e <_strtol_l.constprop.0+0x56>
 800ca2e:	782c      	ldrb	r4, [r5, #0]
 800ca30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ca34:	2c58      	cmp	r4, #88	; 0x58
 800ca36:	d14d      	bne.n	800cad4 <_strtol_l.constprop.0+0xec>
 800ca38:	786c      	ldrb	r4, [r5, #1]
 800ca3a:	2310      	movs	r3, #16
 800ca3c:	3502      	adds	r5, #2
 800ca3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ca42:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca46:	f04f 0c00 	mov.w	ip, #0
 800ca4a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ca4e:	4666      	mov	r6, ip
 800ca50:	fb03 8a19 	mls	sl, r3, r9, r8
 800ca54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ca58:	f1be 0f09 	cmp.w	lr, #9
 800ca5c:	d816      	bhi.n	800ca8c <_strtol_l.constprop.0+0xa4>
 800ca5e:	4674      	mov	r4, lr
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	dd24      	ble.n	800caae <_strtol_l.constprop.0+0xc6>
 800ca64:	f1bc 0f00 	cmp.w	ip, #0
 800ca68:	db1e      	blt.n	800caa8 <_strtol_l.constprop.0+0xc0>
 800ca6a:	45b1      	cmp	r9, r6
 800ca6c:	d31c      	bcc.n	800caa8 <_strtol_l.constprop.0+0xc0>
 800ca6e:	d101      	bne.n	800ca74 <_strtol_l.constprop.0+0x8c>
 800ca70:	45a2      	cmp	sl, r4
 800ca72:	db19      	blt.n	800caa8 <_strtol_l.constprop.0+0xc0>
 800ca74:	fb06 4603 	mla	r6, r6, r3, r4
 800ca78:	f04f 0c01 	mov.w	ip, #1
 800ca7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca80:	e7e8      	b.n	800ca54 <_strtol_l.constprop.0+0x6c>
 800ca82:	2c2b      	cmp	r4, #43	; 0x2b
 800ca84:	bf04      	itt	eq
 800ca86:	782c      	ldrbeq	r4, [r5, #0]
 800ca88:	1cb5      	addeq	r5, r6, #2
 800ca8a:	e7ca      	b.n	800ca22 <_strtol_l.constprop.0+0x3a>
 800ca8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ca90:	f1be 0f19 	cmp.w	lr, #25
 800ca94:	d801      	bhi.n	800ca9a <_strtol_l.constprop.0+0xb2>
 800ca96:	3c37      	subs	r4, #55	; 0x37
 800ca98:	e7e2      	b.n	800ca60 <_strtol_l.constprop.0+0x78>
 800ca9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ca9e:	f1be 0f19 	cmp.w	lr, #25
 800caa2:	d804      	bhi.n	800caae <_strtol_l.constprop.0+0xc6>
 800caa4:	3c57      	subs	r4, #87	; 0x57
 800caa6:	e7db      	b.n	800ca60 <_strtol_l.constprop.0+0x78>
 800caa8:	f04f 3cff 	mov.w	ip, #4294967295
 800caac:	e7e6      	b.n	800ca7c <_strtol_l.constprop.0+0x94>
 800caae:	f1bc 0f00 	cmp.w	ip, #0
 800cab2:	da05      	bge.n	800cac0 <_strtol_l.constprop.0+0xd8>
 800cab4:	2322      	movs	r3, #34	; 0x22
 800cab6:	6003      	str	r3, [r0, #0]
 800cab8:	4646      	mov	r6, r8
 800caba:	b942      	cbnz	r2, 800cace <_strtol_l.constprop.0+0xe6>
 800cabc:	4630      	mov	r0, r6
 800cabe:	e79e      	b.n	800c9fe <_strtol_l.constprop.0+0x16>
 800cac0:	b107      	cbz	r7, 800cac4 <_strtol_l.constprop.0+0xdc>
 800cac2:	4276      	negs	r6, r6
 800cac4:	2a00      	cmp	r2, #0
 800cac6:	d0f9      	beq.n	800cabc <_strtol_l.constprop.0+0xd4>
 800cac8:	f1bc 0f00 	cmp.w	ip, #0
 800cacc:	d000      	beq.n	800cad0 <_strtol_l.constprop.0+0xe8>
 800cace:	1e69      	subs	r1, r5, #1
 800cad0:	6011      	str	r1, [r2, #0]
 800cad2:	e7f3      	b.n	800cabc <_strtol_l.constprop.0+0xd4>
 800cad4:	2430      	movs	r4, #48	; 0x30
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1b1      	bne.n	800ca3e <_strtol_l.constprop.0+0x56>
 800cada:	2308      	movs	r3, #8
 800cadc:	e7af      	b.n	800ca3e <_strtol_l.constprop.0+0x56>
 800cade:	2c30      	cmp	r4, #48	; 0x30
 800cae0:	d0a5      	beq.n	800ca2e <_strtol_l.constprop.0+0x46>
 800cae2:	230a      	movs	r3, #10
 800cae4:	e7ab      	b.n	800ca3e <_strtol_l.constprop.0+0x56>
 800cae6:	bf00      	nop
 800cae8:	08010c91 	.word	0x08010c91

0800caec <_strtol_r>:
 800caec:	f7ff bf7c 	b.w	800c9e8 <_strtol_l.constprop.0>

0800caf0 <__swbuf_r>:
 800caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf2:	460e      	mov	r6, r1
 800caf4:	4614      	mov	r4, r2
 800caf6:	4605      	mov	r5, r0
 800caf8:	b118      	cbz	r0, 800cb02 <__swbuf_r+0x12>
 800cafa:	6983      	ldr	r3, [r0, #24]
 800cafc:	b90b      	cbnz	r3, 800cb02 <__swbuf_r+0x12>
 800cafe:	f001 f84b 	bl	800db98 <__sinit>
 800cb02:	4b21      	ldr	r3, [pc, #132]	; (800cb88 <__swbuf_r+0x98>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	d12b      	bne.n	800cb60 <__swbuf_r+0x70>
 800cb08:	686c      	ldr	r4, [r5, #4]
 800cb0a:	69a3      	ldr	r3, [r4, #24]
 800cb0c:	60a3      	str	r3, [r4, #8]
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	071a      	lsls	r2, r3, #28
 800cb12:	d52f      	bpl.n	800cb74 <__swbuf_r+0x84>
 800cb14:	6923      	ldr	r3, [r4, #16]
 800cb16:	b36b      	cbz	r3, 800cb74 <__swbuf_r+0x84>
 800cb18:	6923      	ldr	r3, [r4, #16]
 800cb1a:	6820      	ldr	r0, [r4, #0]
 800cb1c:	1ac0      	subs	r0, r0, r3
 800cb1e:	6963      	ldr	r3, [r4, #20]
 800cb20:	b2f6      	uxtb	r6, r6
 800cb22:	4283      	cmp	r3, r0
 800cb24:	4637      	mov	r7, r6
 800cb26:	dc04      	bgt.n	800cb32 <__swbuf_r+0x42>
 800cb28:	4621      	mov	r1, r4
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	f000 ffa0 	bl	800da70 <_fflush_r>
 800cb30:	bb30      	cbnz	r0, 800cb80 <__swbuf_r+0x90>
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	60a3      	str	r3, [r4, #8]
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	1c5a      	adds	r2, r3, #1
 800cb3c:	6022      	str	r2, [r4, #0]
 800cb3e:	701e      	strb	r6, [r3, #0]
 800cb40:	6963      	ldr	r3, [r4, #20]
 800cb42:	3001      	adds	r0, #1
 800cb44:	4283      	cmp	r3, r0
 800cb46:	d004      	beq.n	800cb52 <__swbuf_r+0x62>
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	07db      	lsls	r3, r3, #31
 800cb4c:	d506      	bpl.n	800cb5c <__swbuf_r+0x6c>
 800cb4e:	2e0a      	cmp	r6, #10
 800cb50:	d104      	bne.n	800cb5c <__swbuf_r+0x6c>
 800cb52:	4621      	mov	r1, r4
 800cb54:	4628      	mov	r0, r5
 800cb56:	f000 ff8b 	bl	800da70 <_fflush_r>
 800cb5a:	b988      	cbnz	r0, 800cb80 <__swbuf_r+0x90>
 800cb5c:	4638      	mov	r0, r7
 800cb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb60:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <__swbuf_r+0x9c>)
 800cb62:	429c      	cmp	r4, r3
 800cb64:	d101      	bne.n	800cb6a <__swbuf_r+0x7a>
 800cb66:	68ac      	ldr	r4, [r5, #8]
 800cb68:	e7cf      	b.n	800cb0a <__swbuf_r+0x1a>
 800cb6a:	4b09      	ldr	r3, [pc, #36]	; (800cb90 <__swbuf_r+0xa0>)
 800cb6c:	429c      	cmp	r4, r3
 800cb6e:	bf08      	it	eq
 800cb70:	68ec      	ldreq	r4, [r5, #12]
 800cb72:	e7ca      	b.n	800cb0a <__swbuf_r+0x1a>
 800cb74:	4621      	mov	r1, r4
 800cb76:	4628      	mov	r0, r5
 800cb78:	f000 f80c 	bl	800cb94 <__swsetup_r>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d0cb      	beq.n	800cb18 <__swbuf_r+0x28>
 800cb80:	f04f 37ff 	mov.w	r7, #4294967295
 800cb84:	e7ea      	b.n	800cb5c <__swbuf_r+0x6c>
 800cb86:	bf00      	nop
 800cb88:	08010e44 	.word	0x08010e44
 800cb8c:	08010e64 	.word	0x08010e64
 800cb90:	08010e24 	.word	0x08010e24

0800cb94 <__swsetup_r>:
 800cb94:	4b32      	ldr	r3, [pc, #200]	; (800cc60 <__swsetup_r+0xcc>)
 800cb96:	b570      	push	{r4, r5, r6, lr}
 800cb98:	681d      	ldr	r5, [r3, #0]
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	b125      	cbz	r5, 800cbaa <__swsetup_r+0x16>
 800cba0:	69ab      	ldr	r3, [r5, #24]
 800cba2:	b913      	cbnz	r3, 800cbaa <__swsetup_r+0x16>
 800cba4:	4628      	mov	r0, r5
 800cba6:	f000 fff7 	bl	800db98 <__sinit>
 800cbaa:	4b2e      	ldr	r3, [pc, #184]	; (800cc64 <__swsetup_r+0xd0>)
 800cbac:	429c      	cmp	r4, r3
 800cbae:	d10f      	bne.n	800cbd0 <__swsetup_r+0x3c>
 800cbb0:	686c      	ldr	r4, [r5, #4]
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbb8:	0719      	lsls	r1, r3, #28
 800cbba:	d42c      	bmi.n	800cc16 <__swsetup_r+0x82>
 800cbbc:	06dd      	lsls	r5, r3, #27
 800cbbe:	d411      	bmi.n	800cbe4 <__swsetup_r+0x50>
 800cbc0:	2309      	movs	r3, #9
 800cbc2:	6033      	str	r3, [r6, #0]
 800cbc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	f04f 30ff 	mov.w	r0, #4294967295
 800cbce:	e03e      	b.n	800cc4e <__swsetup_r+0xba>
 800cbd0:	4b25      	ldr	r3, [pc, #148]	; (800cc68 <__swsetup_r+0xd4>)
 800cbd2:	429c      	cmp	r4, r3
 800cbd4:	d101      	bne.n	800cbda <__swsetup_r+0x46>
 800cbd6:	68ac      	ldr	r4, [r5, #8]
 800cbd8:	e7eb      	b.n	800cbb2 <__swsetup_r+0x1e>
 800cbda:	4b24      	ldr	r3, [pc, #144]	; (800cc6c <__swsetup_r+0xd8>)
 800cbdc:	429c      	cmp	r4, r3
 800cbde:	bf08      	it	eq
 800cbe0:	68ec      	ldreq	r4, [r5, #12]
 800cbe2:	e7e6      	b.n	800cbb2 <__swsetup_r+0x1e>
 800cbe4:	0758      	lsls	r0, r3, #29
 800cbe6:	d512      	bpl.n	800cc0e <__swsetup_r+0x7a>
 800cbe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbea:	b141      	cbz	r1, 800cbfe <__swsetup_r+0x6a>
 800cbec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbf0:	4299      	cmp	r1, r3
 800cbf2:	d002      	beq.n	800cbfa <__swsetup_r+0x66>
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f002 f939 	bl	800ee6c <_free_r>
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6363      	str	r3, [r4, #52]	; 0x34
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc04:	81a3      	strh	r3, [r4, #12]
 800cc06:	2300      	movs	r3, #0
 800cc08:	6063      	str	r3, [r4, #4]
 800cc0a:	6923      	ldr	r3, [r4, #16]
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	f043 0308 	orr.w	r3, r3, #8
 800cc14:	81a3      	strh	r3, [r4, #12]
 800cc16:	6923      	ldr	r3, [r4, #16]
 800cc18:	b94b      	cbnz	r3, 800cc2e <__swsetup_r+0x9a>
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc24:	d003      	beq.n	800cc2e <__swsetup_r+0x9a>
 800cc26:	4621      	mov	r1, r4
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f001 fbed 	bl	800e408 <__smakebuf_r>
 800cc2e:	89a0      	ldrh	r0, [r4, #12]
 800cc30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc34:	f010 0301 	ands.w	r3, r0, #1
 800cc38:	d00a      	beq.n	800cc50 <__swsetup_r+0xbc>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60a3      	str	r3, [r4, #8]
 800cc3e:	6963      	ldr	r3, [r4, #20]
 800cc40:	425b      	negs	r3, r3
 800cc42:	61a3      	str	r3, [r4, #24]
 800cc44:	6923      	ldr	r3, [r4, #16]
 800cc46:	b943      	cbnz	r3, 800cc5a <__swsetup_r+0xc6>
 800cc48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc4c:	d1ba      	bne.n	800cbc4 <__swsetup_r+0x30>
 800cc4e:	bd70      	pop	{r4, r5, r6, pc}
 800cc50:	0781      	lsls	r1, r0, #30
 800cc52:	bf58      	it	pl
 800cc54:	6963      	ldrpl	r3, [r4, #20]
 800cc56:	60a3      	str	r3, [r4, #8]
 800cc58:	e7f4      	b.n	800cc44 <__swsetup_r+0xb0>
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	e7f7      	b.n	800cc4e <__swsetup_r+0xba>
 800cc5e:	bf00      	nop
 800cc60:	2000000c 	.word	0x2000000c
 800cc64:	08010e44 	.word	0x08010e44
 800cc68:	08010e64 	.word	0x08010e64
 800cc6c:	08010e24 	.word	0x08010e24

0800cc70 <quorem>:
 800cc70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	6903      	ldr	r3, [r0, #16]
 800cc76:	690c      	ldr	r4, [r1, #16]
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	4607      	mov	r7, r0
 800cc7c:	f2c0 8081 	blt.w	800cd82 <quorem+0x112>
 800cc80:	3c01      	subs	r4, #1
 800cc82:	f101 0814 	add.w	r8, r1, #20
 800cc86:	f100 0514 	add.w	r5, r0, #20
 800cc8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cca0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cca4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cca8:	d331      	bcc.n	800cd0e <quorem+0x9e>
 800ccaa:	f04f 0e00 	mov.w	lr, #0
 800ccae:	4640      	mov	r0, r8
 800ccb0:	46ac      	mov	ip, r5
 800ccb2:	46f2      	mov	sl, lr
 800ccb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800ccb8:	b293      	uxth	r3, r2
 800ccba:	fb06 e303 	mla	r3, r6, r3, lr
 800ccbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	ebaa 0303 	sub.w	r3, sl, r3
 800ccc8:	f8dc a000 	ldr.w	sl, [ip]
 800cccc:	0c12      	lsrs	r2, r2, #16
 800ccce:	fa13 f38a 	uxtah	r3, r3, sl
 800ccd2:	fb06 e202 	mla	r2, r6, r2, lr
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	9b00      	ldr	r3, [sp, #0]
 800ccda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ccde:	b292      	uxth	r2, r2
 800cce0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cce8:	f8bd 3000 	ldrh.w	r3, [sp]
 800ccec:	4581      	cmp	r9, r0
 800ccee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccf2:	f84c 3b04 	str.w	r3, [ip], #4
 800ccf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ccfa:	d2db      	bcs.n	800ccb4 <quorem+0x44>
 800ccfc:	f855 300b 	ldr.w	r3, [r5, fp]
 800cd00:	b92b      	cbnz	r3, 800cd0e <quorem+0x9e>
 800cd02:	9b01      	ldr	r3, [sp, #4]
 800cd04:	3b04      	subs	r3, #4
 800cd06:	429d      	cmp	r5, r3
 800cd08:	461a      	mov	r2, r3
 800cd0a:	d32e      	bcc.n	800cd6a <quorem+0xfa>
 800cd0c:	613c      	str	r4, [r7, #16]
 800cd0e:	4638      	mov	r0, r7
 800cd10:	f001 fea0 	bl	800ea54 <__mcmp>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	db24      	blt.n	800cd62 <quorem+0xf2>
 800cd18:	3601      	adds	r6, #1
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f04f 0c00 	mov.w	ip, #0
 800cd20:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd24:	f8d0 e000 	ldr.w	lr, [r0]
 800cd28:	b293      	uxth	r3, r2
 800cd2a:	ebac 0303 	sub.w	r3, ip, r3
 800cd2e:	0c12      	lsrs	r2, r2, #16
 800cd30:	fa13 f38e 	uxtah	r3, r3, lr
 800cd34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd42:	45c1      	cmp	r9, r8
 800cd44:	f840 3b04 	str.w	r3, [r0], #4
 800cd48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd4c:	d2e8      	bcs.n	800cd20 <quorem+0xb0>
 800cd4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd56:	b922      	cbnz	r2, 800cd62 <quorem+0xf2>
 800cd58:	3b04      	subs	r3, #4
 800cd5a:	429d      	cmp	r5, r3
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	d30a      	bcc.n	800cd76 <quorem+0x106>
 800cd60:	613c      	str	r4, [r7, #16]
 800cd62:	4630      	mov	r0, r6
 800cd64:	b003      	add	sp, #12
 800cd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6a:	6812      	ldr	r2, [r2, #0]
 800cd6c:	3b04      	subs	r3, #4
 800cd6e:	2a00      	cmp	r2, #0
 800cd70:	d1cc      	bne.n	800cd0c <quorem+0x9c>
 800cd72:	3c01      	subs	r4, #1
 800cd74:	e7c7      	b.n	800cd06 <quorem+0x96>
 800cd76:	6812      	ldr	r2, [r2, #0]
 800cd78:	3b04      	subs	r3, #4
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	d1f0      	bne.n	800cd60 <quorem+0xf0>
 800cd7e:	3c01      	subs	r4, #1
 800cd80:	e7eb      	b.n	800cd5a <quorem+0xea>
 800cd82:	2000      	movs	r0, #0
 800cd84:	e7ee      	b.n	800cd64 <quorem+0xf4>
	...

0800cd88 <_dtoa_r>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	ed2d 8b04 	vpush	{d8-d9}
 800cd90:	ec57 6b10 	vmov	r6, r7, d0
 800cd94:	b093      	sub	sp, #76	; 0x4c
 800cd96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd9c:	9106      	str	r1, [sp, #24]
 800cd9e:	ee10 aa10 	vmov	sl, s0
 800cda2:	4604      	mov	r4, r0
 800cda4:	9209      	str	r2, [sp, #36]	; 0x24
 800cda6:	930c      	str	r3, [sp, #48]	; 0x30
 800cda8:	46bb      	mov	fp, r7
 800cdaa:	b975      	cbnz	r5, 800cdca <_dtoa_r+0x42>
 800cdac:	2010      	movs	r0, #16
 800cdae:	f001 fb6b 	bl	800e488 <malloc>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	6260      	str	r0, [r4, #36]	; 0x24
 800cdb6:	b920      	cbnz	r0, 800cdc2 <_dtoa_r+0x3a>
 800cdb8:	4ba7      	ldr	r3, [pc, #668]	; (800d058 <_dtoa_r+0x2d0>)
 800cdba:	21ea      	movs	r1, #234	; 0xea
 800cdbc:	48a7      	ldr	r0, [pc, #668]	; (800d05c <_dtoa_r+0x2d4>)
 800cdbe:	f002 fc79 	bl	800f6b4 <__assert_func>
 800cdc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cdc6:	6005      	str	r5, [r0, #0]
 800cdc8:	60c5      	str	r5, [r0, #12]
 800cdca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdcc:	6819      	ldr	r1, [r3, #0]
 800cdce:	b151      	cbz	r1, 800cde6 <_dtoa_r+0x5e>
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	604a      	str	r2, [r1, #4]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	4093      	lsls	r3, r2
 800cdd8:	608b      	str	r3, [r1, #8]
 800cdda:	4620      	mov	r0, r4
 800cddc:	f001 fbae 	bl	800e53c <_Bfree>
 800cde0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	1e3b      	subs	r3, r7, #0
 800cde8:	bfaa      	itet	ge
 800cdea:	2300      	movge	r3, #0
 800cdec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cdf0:	f8c8 3000 	strge.w	r3, [r8]
 800cdf4:	4b9a      	ldr	r3, [pc, #616]	; (800d060 <_dtoa_r+0x2d8>)
 800cdf6:	bfbc      	itt	lt
 800cdf8:	2201      	movlt	r2, #1
 800cdfa:	f8c8 2000 	strlt.w	r2, [r8]
 800cdfe:	ea33 030b 	bics.w	r3, r3, fp
 800ce02:	d11b      	bne.n	800ce3c <_dtoa_r+0xb4>
 800ce04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce06:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce0a:	6013      	str	r3, [r2, #0]
 800ce0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce10:	4333      	orrs	r3, r6
 800ce12:	f000 8592 	beq.w	800d93a <_dtoa_r+0xbb2>
 800ce16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce18:	b963      	cbnz	r3, 800ce34 <_dtoa_r+0xac>
 800ce1a:	4b92      	ldr	r3, [pc, #584]	; (800d064 <_dtoa_r+0x2dc>)
 800ce1c:	e022      	b.n	800ce64 <_dtoa_r+0xdc>
 800ce1e:	4b92      	ldr	r3, [pc, #584]	; (800d068 <_dtoa_r+0x2e0>)
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	3308      	adds	r3, #8
 800ce24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	9801      	ldr	r0, [sp, #4]
 800ce2a:	b013      	add	sp, #76	; 0x4c
 800ce2c:	ecbd 8b04 	vpop	{d8-d9}
 800ce30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce34:	4b8b      	ldr	r3, [pc, #556]	; (800d064 <_dtoa_r+0x2dc>)
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	3303      	adds	r3, #3
 800ce3a:	e7f3      	b.n	800ce24 <_dtoa_r+0x9c>
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2300      	movs	r3, #0
 800ce40:	4650      	mov	r0, sl
 800ce42:	4659      	mov	r1, fp
 800ce44:	f7f3 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce48:	ec4b ab19 	vmov	d9, sl, fp
 800ce4c:	4680      	mov	r8, r0
 800ce4e:	b158      	cbz	r0, 800ce68 <_dtoa_r+0xe0>
 800ce50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce52:	2301      	movs	r3, #1
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 856b 	beq.w	800d934 <_dtoa_r+0xbac>
 800ce5e:	4883      	ldr	r0, [pc, #524]	; (800d06c <_dtoa_r+0x2e4>)
 800ce60:	6018      	str	r0, [r3, #0]
 800ce62:	1e43      	subs	r3, r0, #1
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	e7df      	b.n	800ce28 <_dtoa_r+0xa0>
 800ce68:	ec4b ab10 	vmov	d0, sl, fp
 800ce6c:	aa10      	add	r2, sp, #64	; 0x40
 800ce6e:	a911      	add	r1, sp, #68	; 0x44
 800ce70:	4620      	mov	r0, r4
 800ce72:	f001 ff11 	bl	800ec98 <__d2b>
 800ce76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ce7a:	ee08 0a10 	vmov	s16, r0
 800ce7e:	2d00      	cmp	r5, #0
 800ce80:	f000 8084 	beq.w	800cf8c <_dtoa_r+0x204>
 800ce84:	ee19 3a90 	vmov	r3, s19
 800ce88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce90:	4656      	mov	r6, sl
 800ce92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ce9e:	4b74      	ldr	r3, [pc, #464]	; (800d070 <_dtoa_r+0x2e8>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	4630      	mov	r0, r6
 800cea4:	4639      	mov	r1, r7
 800cea6:	f7f3 f9ef 	bl	8000288 <__aeabi_dsub>
 800ceaa:	a365      	add	r3, pc, #404	; (adr r3, 800d040 <_dtoa_r+0x2b8>)
 800ceac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb0:	f7f3 fba2 	bl	80005f8 <__aeabi_dmul>
 800ceb4:	a364      	add	r3, pc, #400	; (adr r3, 800d048 <_dtoa_r+0x2c0>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 f9e7 	bl	800028c <__adddf3>
 800cebe:	4606      	mov	r6, r0
 800cec0:	4628      	mov	r0, r5
 800cec2:	460f      	mov	r7, r1
 800cec4:	f7f3 fb2e 	bl	8000524 <__aeabi_i2d>
 800cec8:	a361      	add	r3, pc, #388	; (adr r3, 800d050 <_dtoa_r+0x2c8>)
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	f7f3 fb93 	bl	80005f8 <__aeabi_dmul>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4630      	mov	r0, r6
 800ced8:	4639      	mov	r1, r7
 800ceda:	f7f3 f9d7 	bl	800028c <__adddf3>
 800cede:	4606      	mov	r6, r0
 800cee0:	460f      	mov	r7, r1
 800cee2:	f7f3 fe39 	bl	8000b58 <__aeabi_d2iz>
 800cee6:	2200      	movs	r2, #0
 800cee8:	9000      	str	r0, [sp, #0]
 800ceea:	2300      	movs	r3, #0
 800ceec:	4630      	mov	r0, r6
 800ceee:	4639      	mov	r1, r7
 800cef0:	f7f3 fdf4 	bl	8000adc <__aeabi_dcmplt>
 800cef4:	b150      	cbz	r0, 800cf0c <_dtoa_r+0x184>
 800cef6:	9800      	ldr	r0, [sp, #0]
 800cef8:	f7f3 fb14 	bl	8000524 <__aeabi_i2d>
 800cefc:	4632      	mov	r2, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	f7f3 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf04:	b910      	cbnz	r0, 800cf0c <_dtoa_r+0x184>
 800cf06:	9b00      	ldr	r3, [sp, #0]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	9b00      	ldr	r3, [sp, #0]
 800cf0e:	2b16      	cmp	r3, #22
 800cf10:	d85a      	bhi.n	800cfc8 <_dtoa_r+0x240>
 800cf12:	9a00      	ldr	r2, [sp, #0]
 800cf14:	4b57      	ldr	r3, [pc, #348]	; (800d074 <_dtoa_r+0x2ec>)
 800cf16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	ec51 0b19 	vmov	r0, r1, d9
 800cf22:	f7f3 fddb 	bl	8000adc <__aeabi_dcmplt>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d050      	beq.n	800cfcc <_dtoa_r+0x244>
 800cf2a:	9b00      	ldr	r3, [sp, #0]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	2300      	movs	r3, #0
 800cf32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf36:	1b5d      	subs	r5, r3, r5
 800cf38:	1e6b      	subs	r3, r5, #1
 800cf3a:	9305      	str	r3, [sp, #20]
 800cf3c:	bf45      	ittet	mi
 800cf3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cf42:	9304      	strmi	r3, [sp, #16]
 800cf44:	2300      	movpl	r3, #0
 800cf46:	2300      	movmi	r3, #0
 800cf48:	bf4c      	ite	mi
 800cf4a:	9305      	strmi	r3, [sp, #20]
 800cf4c:	9304      	strpl	r3, [sp, #16]
 800cf4e:	9b00      	ldr	r3, [sp, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	db3d      	blt.n	800cfd0 <_dtoa_r+0x248>
 800cf54:	9b05      	ldr	r3, [sp, #20]
 800cf56:	9a00      	ldr	r2, [sp, #0]
 800cf58:	920a      	str	r2, [sp, #40]	; 0x28
 800cf5a:	4413      	add	r3, r2
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	2300      	movs	r3, #0
 800cf60:	9307      	str	r3, [sp, #28]
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	2b09      	cmp	r3, #9
 800cf66:	f200 8089 	bhi.w	800d07c <_dtoa_r+0x2f4>
 800cf6a:	2b05      	cmp	r3, #5
 800cf6c:	bfc4      	itt	gt
 800cf6e:	3b04      	subgt	r3, #4
 800cf70:	9306      	strgt	r3, [sp, #24]
 800cf72:	9b06      	ldr	r3, [sp, #24]
 800cf74:	f1a3 0302 	sub.w	r3, r3, #2
 800cf78:	bfcc      	ite	gt
 800cf7a:	2500      	movgt	r5, #0
 800cf7c:	2501      	movle	r5, #1
 800cf7e:	2b03      	cmp	r3, #3
 800cf80:	f200 8087 	bhi.w	800d092 <_dtoa_r+0x30a>
 800cf84:	e8df f003 	tbb	[pc, r3]
 800cf88:	59383a2d 	.word	0x59383a2d
 800cf8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cf90:	441d      	add	r5, r3
 800cf92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf96:	2b20      	cmp	r3, #32
 800cf98:	bfc1      	itttt	gt
 800cf9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cfa2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cfa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cfaa:	bfda      	itte	le
 800cfac:	f1c3 0320 	rsble	r3, r3, #32
 800cfb0:	fa06 f003 	lslle.w	r0, r6, r3
 800cfb4:	4318      	orrgt	r0, r3
 800cfb6:	f7f3 faa5 	bl	8000504 <__aeabi_ui2d>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cfc2:	3d01      	subs	r5, #1
 800cfc4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfc6:	e76a      	b.n	800ce9e <_dtoa_r+0x116>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e7b2      	b.n	800cf32 <_dtoa_r+0x1aa>
 800cfcc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cfce:	e7b1      	b.n	800cf34 <_dtoa_r+0x1ac>
 800cfd0:	9b04      	ldr	r3, [sp, #16]
 800cfd2:	9a00      	ldr	r2, [sp, #0]
 800cfd4:	1a9b      	subs	r3, r3, r2
 800cfd6:	9304      	str	r3, [sp, #16]
 800cfd8:	4253      	negs	r3, r2
 800cfda:	9307      	str	r3, [sp, #28]
 800cfdc:	2300      	movs	r3, #0
 800cfde:	930a      	str	r3, [sp, #40]	; 0x28
 800cfe0:	e7bf      	b.n	800cf62 <_dtoa_r+0x1da>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	9308      	str	r3, [sp, #32]
 800cfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	dc55      	bgt.n	800d098 <_dtoa_r+0x310>
 800cfec:	2301      	movs	r3, #1
 800cfee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cff2:	461a      	mov	r2, r3
 800cff4:	9209      	str	r2, [sp, #36]	; 0x24
 800cff6:	e00c      	b.n	800d012 <_dtoa_r+0x28a>
 800cff8:	2301      	movs	r3, #1
 800cffa:	e7f3      	b.n	800cfe4 <_dtoa_r+0x25c>
 800cffc:	2300      	movs	r3, #0
 800cffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d000:	9308      	str	r3, [sp, #32]
 800d002:	9b00      	ldr	r3, [sp, #0]
 800d004:	4413      	add	r3, r2
 800d006:	9302      	str	r3, [sp, #8]
 800d008:	3301      	adds	r3, #1
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	9303      	str	r3, [sp, #12]
 800d00e:	bfb8      	it	lt
 800d010:	2301      	movlt	r3, #1
 800d012:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d014:	2200      	movs	r2, #0
 800d016:	6042      	str	r2, [r0, #4]
 800d018:	2204      	movs	r2, #4
 800d01a:	f102 0614 	add.w	r6, r2, #20
 800d01e:	429e      	cmp	r6, r3
 800d020:	6841      	ldr	r1, [r0, #4]
 800d022:	d93d      	bls.n	800d0a0 <_dtoa_r+0x318>
 800d024:	4620      	mov	r0, r4
 800d026:	f001 fa49 	bl	800e4bc <_Balloc>
 800d02a:	9001      	str	r0, [sp, #4]
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d13b      	bne.n	800d0a8 <_dtoa_r+0x320>
 800d030:	4b11      	ldr	r3, [pc, #68]	; (800d078 <_dtoa_r+0x2f0>)
 800d032:	4602      	mov	r2, r0
 800d034:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d038:	e6c0      	b.n	800cdbc <_dtoa_r+0x34>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e7df      	b.n	800cffe <_dtoa_r+0x276>
 800d03e:	bf00      	nop
 800d040:	636f4361 	.word	0x636f4361
 800d044:	3fd287a7 	.word	0x3fd287a7
 800d048:	8b60c8b3 	.word	0x8b60c8b3
 800d04c:	3fc68a28 	.word	0x3fc68a28
 800d050:	509f79fb 	.word	0x509f79fb
 800d054:	3fd34413 	.word	0x3fd34413
 800d058:	08010d9e 	.word	0x08010d9e
 800d05c:	08010db5 	.word	0x08010db5
 800d060:	7ff00000 	.word	0x7ff00000
 800d064:	08010d9a 	.word	0x08010d9a
 800d068:	08010d91 	.word	0x08010d91
 800d06c:	08010c11 	.word	0x08010c11
 800d070:	3ff80000 	.word	0x3ff80000
 800d074:	08010f88 	.word	0x08010f88
 800d078:	08010e10 	.word	0x08010e10
 800d07c:	2501      	movs	r5, #1
 800d07e:	2300      	movs	r3, #0
 800d080:	9306      	str	r3, [sp, #24]
 800d082:	9508      	str	r5, [sp, #32]
 800d084:	f04f 33ff 	mov.w	r3, #4294967295
 800d088:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d08c:	2200      	movs	r2, #0
 800d08e:	2312      	movs	r3, #18
 800d090:	e7b0      	b.n	800cff4 <_dtoa_r+0x26c>
 800d092:	2301      	movs	r3, #1
 800d094:	9308      	str	r3, [sp, #32]
 800d096:	e7f5      	b.n	800d084 <_dtoa_r+0x2fc>
 800d098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d09e:	e7b8      	b.n	800d012 <_dtoa_r+0x28a>
 800d0a0:	3101      	adds	r1, #1
 800d0a2:	6041      	str	r1, [r0, #4]
 800d0a4:	0052      	lsls	r2, r2, #1
 800d0a6:	e7b8      	b.n	800d01a <_dtoa_r+0x292>
 800d0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0aa:	9a01      	ldr	r2, [sp, #4]
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	2b0e      	cmp	r3, #14
 800d0b2:	f200 809d 	bhi.w	800d1f0 <_dtoa_r+0x468>
 800d0b6:	2d00      	cmp	r5, #0
 800d0b8:	f000 809a 	beq.w	800d1f0 <_dtoa_r+0x468>
 800d0bc:	9b00      	ldr	r3, [sp, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	dd32      	ble.n	800d128 <_dtoa_r+0x3a0>
 800d0c2:	4ab7      	ldr	r2, [pc, #732]	; (800d3a0 <_dtoa_r+0x618>)
 800d0c4:	f003 030f 	and.w	r3, r3, #15
 800d0c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0d0:	9b00      	ldr	r3, [sp, #0]
 800d0d2:	05d8      	lsls	r0, r3, #23
 800d0d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d0d8:	d516      	bpl.n	800d108 <_dtoa_r+0x380>
 800d0da:	4bb2      	ldr	r3, [pc, #712]	; (800d3a4 <_dtoa_r+0x61c>)
 800d0dc:	ec51 0b19 	vmov	r0, r1, d9
 800d0e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0e4:	f7f3 fbb2 	bl	800084c <__aeabi_ddiv>
 800d0e8:	f007 070f 	and.w	r7, r7, #15
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	468b      	mov	fp, r1
 800d0f0:	2503      	movs	r5, #3
 800d0f2:	4eac      	ldr	r6, [pc, #688]	; (800d3a4 <_dtoa_r+0x61c>)
 800d0f4:	b957      	cbnz	r7, 800d10c <_dtoa_r+0x384>
 800d0f6:	4642      	mov	r2, r8
 800d0f8:	464b      	mov	r3, r9
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	4659      	mov	r1, fp
 800d0fe:	f7f3 fba5 	bl	800084c <__aeabi_ddiv>
 800d102:	4682      	mov	sl, r0
 800d104:	468b      	mov	fp, r1
 800d106:	e028      	b.n	800d15a <_dtoa_r+0x3d2>
 800d108:	2502      	movs	r5, #2
 800d10a:	e7f2      	b.n	800d0f2 <_dtoa_r+0x36a>
 800d10c:	07f9      	lsls	r1, r7, #31
 800d10e:	d508      	bpl.n	800d122 <_dtoa_r+0x39a>
 800d110:	4640      	mov	r0, r8
 800d112:	4649      	mov	r1, r9
 800d114:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d118:	f7f3 fa6e 	bl	80005f8 <__aeabi_dmul>
 800d11c:	3501      	adds	r5, #1
 800d11e:	4680      	mov	r8, r0
 800d120:	4689      	mov	r9, r1
 800d122:	107f      	asrs	r7, r7, #1
 800d124:	3608      	adds	r6, #8
 800d126:	e7e5      	b.n	800d0f4 <_dtoa_r+0x36c>
 800d128:	f000 809b 	beq.w	800d262 <_dtoa_r+0x4da>
 800d12c:	9b00      	ldr	r3, [sp, #0]
 800d12e:	4f9d      	ldr	r7, [pc, #628]	; (800d3a4 <_dtoa_r+0x61c>)
 800d130:	425e      	negs	r6, r3
 800d132:	4b9b      	ldr	r3, [pc, #620]	; (800d3a0 <_dtoa_r+0x618>)
 800d134:	f006 020f 	and.w	r2, r6, #15
 800d138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	ec51 0b19 	vmov	r0, r1, d9
 800d144:	f7f3 fa58 	bl	80005f8 <__aeabi_dmul>
 800d148:	1136      	asrs	r6, r6, #4
 800d14a:	4682      	mov	sl, r0
 800d14c:	468b      	mov	fp, r1
 800d14e:	2300      	movs	r3, #0
 800d150:	2502      	movs	r5, #2
 800d152:	2e00      	cmp	r6, #0
 800d154:	d17a      	bne.n	800d24c <_dtoa_r+0x4c4>
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1d3      	bne.n	800d102 <_dtoa_r+0x37a>
 800d15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 8082 	beq.w	800d266 <_dtoa_r+0x4de>
 800d162:	4b91      	ldr	r3, [pc, #580]	; (800d3a8 <_dtoa_r+0x620>)
 800d164:	2200      	movs	r2, #0
 800d166:	4650      	mov	r0, sl
 800d168:	4659      	mov	r1, fp
 800d16a:	f7f3 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d079      	beq.n	800d266 <_dtoa_r+0x4de>
 800d172:	9b03      	ldr	r3, [sp, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d076      	beq.n	800d266 <_dtoa_r+0x4de>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	dd36      	ble.n	800d1ec <_dtoa_r+0x464>
 800d17e:	9b00      	ldr	r3, [sp, #0]
 800d180:	4650      	mov	r0, sl
 800d182:	4659      	mov	r1, fp
 800d184:	1e5f      	subs	r7, r3, #1
 800d186:	2200      	movs	r2, #0
 800d188:	4b88      	ldr	r3, [pc, #544]	; (800d3ac <_dtoa_r+0x624>)
 800d18a:	f7f3 fa35 	bl	80005f8 <__aeabi_dmul>
 800d18e:	9e02      	ldr	r6, [sp, #8]
 800d190:	4682      	mov	sl, r0
 800d192:	468b      	mov	fp, r1
 800d194:	3501      	adds	r5, #1
 800d196:	4628      	mov	r0, r5
 800d198:	f7f3 f9c4 	bl	8000524 <__aeabi_i2d>
 800d19c:	4652      	mov	r2, sl
 800d19e:	465b      	mov	r3, fp
 800d1a0:	f7f3 fa2a 	bl	80005f8 <__aeabi_dmul>
 800d1a4:	4b82      	ldr	r3, [pc, #520]	; (800d3b0 <_dtoa_r+0x628>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f7f3 f870 	bl	800028c <__adddf3>
 800d1ac:	46d0      	mov	r8, sl
 800d1ae:	46d9      	mov	r9, fp
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d1b6:	2e00      	cmp	r6, #0
 800d1b8:	d158      	bne.n	800d26c <_dtoa_r+0x4e4>
 800d1ba:	4b7e      	ldr	r3, [pc, #504]	; (800d3b4 <_dtoa_r+0x62c>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	f7f3 f861 	bl	8000288 <__aeabi_dsub>
 800d1c6:	4652      	mov	r2, sl
 800d1c8:	465b      	mov	r3, fp
 800d1ca:	4680      	mov	r8, r0
 800d1cc:	4689      	mov	r9, r1
 800d1ce:	f7f3 fca3 	bl	8000b18 <__aeabi_dcmpgt>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	f040 8295 	bne.w	800d702 <_dtoa_r+0x97a>
 800d1d8:	4652      	mov	r2, sl
 800d1da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d1de:	4640      	mov	r0, r8
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	f7f3 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	f040 8289 	bne.w	800d6fe <_dtoa_r+0x976>
 800d1ec:	ec5b ab19 	vmov	sl, fp, d9
 800d1f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f2c0 8148 	blt.w	800d488 <_dtoa_r+0x700>
 800d1f8:	9a00      	ldr	r2, [sp, #0]
 800d1fa:	2a0e      	cmp	r2, #14
 800d1fc:	f300 8144 	bgt.w	800d488 <_dtoa_r+0x700>
 800d200:	4b67      	ldr	r3, [pc, #412]	; (800d3a0 <_dtoa_r+0x618>)
 800d202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f280 80d5 	bge.w	800d3bc <_dtoa_r+0x634>
 800d212:	9b03      	ldr	r3, [sp, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	f300 80d1 	bgt.w	800d3bc <_dtoa_r+0x634>
 800d21a:	f040 826f 	bne.w	800d6fc <_dtoa_r+0x974>
 800d21e:	4b65      	ldr	r3, [pc, #404]	; (800d3b4 <_dtoa_r+0x62c>)
 800d220:	2200      	movs	r2, #0
 800d222:	4640      	mov	r0, r8
 800d224:	4649      	mov	r1, r9
 800d226:	f7f3 f9e7 	bl	80005f8 <__aeabi_dmul>
 800d22a:	4652      	mov	r2, sl
 800d22c:	465b      	mov	r3, fp
 800d22e:	f7f3 fc69 	bl	8000b04 <__aeabi_dcmpge>
 800d232:	9e03      	ldr	r6, [sp, #12]
 800d234:	4637      	mov	r7, r6
 800d236:	2800      	cmp	r0, #0
 800d238:	f040 8245 	bne.w	800d6c6 <_dtoa_r+0x93e>
 800d23c:	9d01      	ldr	r5, [sp, #4]
 800d23e:	2331      	movs	r3, #49	; 0x31
 800d240:	f805 3b01 	strb.w	r3, [r5], #1
 800d244:	9b00      	ldr	r3, [sp, #0]
 800d246:	3301      	adds	r3, #1
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	e240      	b.n	800d6ce <_dtoa_r+0x946>
 800d24c:	07f2      	lsls	r2, r6, #31
 800d24e:	d505      	bpl.n	800d25c <_dtoa_r+0x4d4>
 800d250:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d254:	f7f3 f9d0 	bl	80005f8 <__aeabi_dmul>
 800d258:	3501      	adds	r5, #1
 800d25a:	2301      	movs	r3, #1
 800d25c:	1076      	asrs	r6, r6, #1
 800d25e:	3708      	adds	r7, #8
 800d260:	e777      	b.n	800d152 <_dtoa_r+0x3ca>
 800d262:	2502      	movs	r5, #2
 800d264:	e779      	b.n	800d15a <_dtoa_r+0x3d2>
 800d266:	9f00      	ldr	r7, [sp, #0]
 800d268:	9e03      	ldr	r6, [sp, #12]
 800d26a:	e794      	b.n	800d196 <_dtoa_r+0x40e>
 800d26c:	9901      	ldr	r1, [sp, #4]
 800d26e:	4b4c      	ldr	r3, [pc, #304]	; (800d3a0 <_dtoa_r+0x618>)
 800d270:	4431      	add	r1, r6
 800d272:	910d      	str	r1, [sp, #52]	; 0x34
 800d274:	9908      	ldr	r1, [sp, #32]
 800d276:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d27a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d27e:	2900      	cmp	r1, #0
 800d280:	d043      	beq.n	800d30a <_dtoa_r+0x582>
 800d282:	494d      	ldr	r1, [pc, #308]	; (800d3b8 <_dtoa_r+0x630>)
 800d284:	2000      	movs	r0, #0
 800d286:	f7f3 fae1 	bl	800084c <__aeabi_ddiv>
 800d28a:	4652      	mov	r2, sl
 800d28c:	465b      	mov	r3, fp
 800d28e:	f7f2 fffb 	bl	8000288 <__aeabi_dsub>
 800d292:	9d01      	ldr	r5, [sp, #4]
 800d294:	4682      	mov	sl, r0
 800d296:	468b      	mov	fp, r1
 800d298:	4649      	mov	r1, r9
 800d29a:	4640      	mov	r0, r8
 800d29c:	f7f3 fc5c 	bl	8000b58 <__aeabi_d2iz>
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	f7f3 f93f 	bl	8000524 <__aeabi_i2d>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	4649      	mov	r1, r9
 800d2ae:	f7f2 ffeb 	bl	8000288 <__aeabi_dsub>
 800d2b2:	3630      	adds	r6, #48	; 0x30
 800d2b4:	f805 6b01 	strb.w	r6, [r5], #1
 800d2b8:	4652      	mov	r2, sl
 800d2ba:	465b      	mov	r3, fp
 800d2bc:	4680      	mov	r8, r0
 800d2be:	4689      	mov	r9, r1
 800d2c0:	f7f3 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d163      	bne.n	800d390 <_dtoa_r+0x608>
 800d2c8:	4642      	mov	r2, r8
 800d2ca:	464b      	mov	r3, r9
 800d2cc:	4936      	ldr	r1, [pc, #216]	; (800d3a8 <_dtoa_r+0x620>)
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	f7f2 ffda 	bl	8000288 <__aeabi_dsub>
 800d2d4:	4652      	mov	r2, sl
 800d2d6:	465b      	mov	r3, fp
 800d2d8:	f7f3 fc00 	bl	8000adc <__aeabi_dcmplt>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	f040 80b5 	bne.w	800d44c <_dtoa_r+0x6c4>
 800d2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2e4:	429d      	cmp	r5, r3
 800d2e6:	d081      	beq.n	800d1ec <_dtoa_r+0x464>
 800d2e8:	4b30      	ldr	r3, [pc, #192]	; (800d3ac <_dtoa_r+0x624>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	4650      	mov	r0, sl
 800d2ee:	4659      	mov	r1, fp
 800d2f0:	f7f3 f982 	bl	80005f8 <__aeabi_dmul>
 800d2f4:	4b2d      	ldr	r3, [pc, #180]	; (800d3ac <_dtoa_r+0x624>)
 800d2f6:	4682      	mov	sl, r0
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	2200      	movs	r2, #0
 800d300:	f7f3 f97a 	bl	80005f8 <__aeabi_dmul>
 800d304:	4680      	mov	r8, r0
 800d306:	4689      	mov	r9, r1
 800d308:	e7c6      	b.n	800d298 <_dtoa_r+0x510>
 800d30a:	4650      	mov	r0, sl
 800d30c:	4659      	mov	r1, fp
 800d30e:	f7f3 f973 	bl	80005f8 <__aeabi_dmul>
 800d312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d314:	9d01      	ldr	r5, [sp, #4]
 800d316:	930f      	str	r3, [sp, #60]	; 0x3c
 800d318:	4682      	mov	sl, r0
 800d31a:	468b      	mov	fp, r1
 800d31c:	4649      	mov	r1, r9
 800d31e:	4640      	mov	r0, r8
 800d320:	f7f3 fc1a 	bl	8000b58 <__aeabi_d2iz>
 800d324:	4606      	mov	r6, r0
 800d326:	f7f3 f8fd 	bl	8000524 <__aeabi_i2d>
 800d32a:	3630      	adds	r6, #48	; 0x30
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4640      	mov	r0, r8
 800d332:	4649      	mov	r1, r9
 800d334:	f7f2 ffa8 	bl	8000288 <__aeabi_dsub>
 800d338:	f805 6b01 	strb.w	r6, [r5], #1
 800d33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d33e:	429d      	cmp	r5, r3
 800d340:	4680      	mov	r8, r0
 800d342:	4689      	mov	r9, r1
 800d344:	f04f 0200 	mov.w	r2, #0
 800d348:	d124      	bne.n	800d394 <_dtoa_r+0x60c>
 800d34a:	4b1b      	ldr	r3, [pc, #108]	; (800d3b8 <_dtoa_r+0x630>)
 800d34c:	4650      	mov	r0, sl
 800d34e:	4659      	mov	r1, fp
 800d350:	f7f2 ff9c 	bl	800028c <__adddf3>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4640      	mov	r0, r8
 800d35a:	4649      	mov	r1, r9
 800d35c:	f7f3 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 800d360:	2800      	cmp	r0, #0
 800d362:	d173      	bne.n	800d44c <_dtoa_r+0x6c4>
 800d364:	4652      	mov	r2, sl
 800d366:	465b      	mov	r3, fp
 800d368:	4913      	ldr	r1, [pc, #76]	; (800d3b8 <_dtoa_r+0x630>)
 800d36a:	2000      	movs	r0, #0
 800d36c:	f7f2 ff8c 	bl	8000288 <__aeabi_dsub>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4640      	mov	r0, r8
 800d376:	4649      	mov	r1, r9
 800d378:	f7f3 fbb0 	bl	8000adc <__aeabi_dcmplt>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f43f af35 	beq.w	800d1ec <_dtoa_r+0x464>
 800d382:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d384:	1e6b      	subs	r3, r5, #1
 800d386:	930f      	str	r3, [sp, #60]	; 0x3c
 800d388:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d38c:	2b30      	cmp	r3, #48	; 0x30
 800d38e:	d0f8      	beq.n	800d382 <_dtoa_r+0x5fa>
 800d390:	9700      	str	r7, [sp, #0]
 800d392:	e049      	b.n	800d428 <_dtoa_r+0x6a0>
 800d394:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <_dtoa_r+0x624>)
 800d396:	f7f3 f92f 	bl	80005f8 <__aeabi_dmul>
 800d39a:	4680      	mov	r8, r0
 800d39c:	4689      	mov	r9, r1
 800d39e:	e7bd      	b.n	800d31c <_dtoa_r+0x594>
 800d3a0:	08010f88 	.word	0x08010f88
 800d3a4:	08010f60 	.word	0x08010f60
 800d3a8:	3ff00000 	.word	0x3ff00000
 800d3ac:	40240000 	.word	0x40240000
 800d3b0:	401c0000 	.word	0x401c0000
 800d3b4:	40140000 	.word	0x40140000
 800d3b8:	3fe00000 	.word	0x3fe00000
 800d3bc:	9d01      	ldr	r5, [sp, #4]
 800d3be:	4656      	mov	r6, sl
 800d3c0:	465f      	mov	r7, fp
 800d3c2:	4642      	mov	r2, r8
 800d3c4:	464b      	mov	r3, r9
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	f7f3 fa3f 	bl	800084c <__aeabi_ddiv>
 800d3ce:	f7f3 fbc3 	bl	8000b58 <__aeabi_d2iz>
 800d3d2:	4682      	mov	sl, r0
 800d3d4:	f7f3 f8a6 	bl	8000524 <__aeabi_i2d>
 800d3d8:	4642      	mov	r2, r8
 800d3da:	464b      	mov	r3, r9
 800d3dc:	f7f3 f90c 	bl	80005f8 <__aeabi_dmul>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d3ec:	f7f2 ff4c 	bl	8000288 <__aeabi_dsub>
 800d3f0:	f805 6b01 	strb.w	r6, [r5], #1
 800d3f4:	9e01      	ldr	r6, [sp, #4]
 800d3f6:	9f03      	ldr	r7, [sp, #12]
 800d3f8:	1bae      	subs	r6, r5, r6
 800d3fa:	42b7      	cmp	r7, r6
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	d135      	bne.n	800d46e <_dtoa_r+0x6e6>
 800d402:	f7f2 ff43 	bl	800028c <__adddf3>
 800d406:	4642      	mov	r2, r8
 800d408:	464b      	mov	r3, r9
 800d40a:	4606      	mov	r6, r0
 800d40c:	460f      	mov	r7, r1
 800d40e:	f7f3 fb83 	bl	8000b18 <__aeabi_dcmpgt>
 800d412:	b9d0      	cbnz	r0, 800d44a <_dtoa_r+0x6c2>
 800d414:	4642      	mov	r2, r8
 800d416:	464b      	mov	r3, r9
 800d418:	4630      	mov	r0, r6
 800d41a:	4639      	mov	r1, r7
 800d41c:	f7f3 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 800d420:	b110      	cbz	r0, 800d428 <_dtoa_r+0x6a0>
 800d422:	f01a 0f01 	tst.w	sl, #1
 800d426:	d110      	bne.n	800d44a <_dtoa_r+0x6c2>
 800d428:	4620      	mov	r0, r4
 800d42a:	ee18 1a10 	vmov	r1, s16
 800d42e:	f001 f885 	bl	800e53c <_Bfree>
 800d432:	2300      	movs	r3, #0
 800d434:	9800      	ldr	r0, [sp, #0]
 800d436:	702b      	strb	r3, [r5, #0]
 800d438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d43a:	3001      	adds	r0, #1
 800d43c:	6018      	str	r0, [r3, #0]
 800d43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d440:	2b00      	cmp	r3, #0
 800d442:	f43f acf1 	beq.w	800ce28 <_dtoa_r+0xa0>
 800d446:	601d      	str	r5, [r3, #0]
 800d448:	e4ee      	b.n	800ce28 <_dtoa_r+0xa0>
 800d44a:	9f00      	ldr	r7, [sp, #0]
 800d44c:	462b      	mov	r3, r5
 800d44e:	461d      	mov	r5, r3
 800d450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d454:	2a39      	cmp	r2, #57	; 0x39
 800d456:	d106      	bne.n	800d466 <_dtoa_r+0x6de>
 800d458:	9a01      	ldr	r2, [sp, #4]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d1f7      	bne.n	800d44e <_dtoa_r+0x6c6>
 800d45e:	9901      	ldr	r1, [sp, #4]
 800d460:	2230      	movs	r2, #48	; 0x30
 800d462:	3701      	adds	r7, #1
 800d464:	700a      	strb	r2, [r1, #0]
 800d466:	781a      	ldrb	r2, [r3, #0]
 800d468:	3201      	adds	r2, #1
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	e790      	b.n	800d390 <_dtoa_r+0x608>
 800d46e:	4ba6      	ldr	r3, [pc, #664]	; (800d708 <_dtoa_r+0x980>)
 800d470:	2200      	movs	r2, #0
 800d472:	f7f3 f8c1 	bl	80005f8 <__aeabi_dmul>
 800d476:	2200      	movs	r2, #0
 800d478:	2300      	movs	r3, #0
 800d47a:	4606      	mov	r6, r0
 800d47c:	460f      	mov	r7, r1
 800d47e:	f7f3 fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 800d482:	2800      	cmp	r0, #0
 800d484:	d09d      	beq.n	800d3c2 <_dtoa_r+0x63a>
 800d486:	e7cf      	b.n	800d428 <_dtoa_r+0x6a0>
 800d488:	9a08      	ldr	r2, [sp, #32]
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	f000 80d7 	beq.w	800d63e <_dtoa_r+0x8b6>
 800d490:	9a06      	ldr	r2, [sp, #24]
 800d492:	2a01      	cmp	r2, #1
 800d494:	f300 80ba 	bgt.w	800d60c <_dtoa_r+0x884>
 800d498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d49a:	2a00      	cmp	r2, #0
 800d49c:	f000 80b2 	beq.w	800d604 <_dtoa_r+0x87c>
 800d4a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d4a4:	9e07      	ldr	r6, [sp, #28]
 800d4a6:	9d04      	ldr	r5, [sp, #16]
 800d4a8:	9a04      	ldr	r2, [sp, #16]
 800d4aa:	441a      	add	r2, r3
 800d4ac:	9204      	str	r2, [sp, #16]
 800d4ae:	9a05      	ldr	r2, [sp, #20]
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	441a      	add	r2, r3
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	9205      	str	r2, [sp, #20]
 800d4b8:	f001 f942 	bl	800e740 <__i2b>
 800d4bc:	4607      	mov	r7, r0
 800d4be:	2d00      	cmp	r5, #0
 800d4c0:	dd0c      	ble.n	800d4dc <_dtoa_r+0x754>
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dd09      	ble.n	800d4dc <_dtoa_r+0x754>
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	9a04      	ldr	r2, [sp, #16]
 800d4cc:	bfa8      	it	ge
 800d4ce:	462b      	movge	r3, r5
 800d4d0:	1ad2      	subs	r2, r2, r3
 800d4d2:	9204      	str	r2, [sp, #16]
 800d4d4:	9a05      	ldr	r2, [sp, #20]
 800d4d6:	1aed      	subs	r5, r5, r3
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	9305      	str	r3, [sp, #20]
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	b31b      	cbz	r3, 800d528 <_dtoa_r+0x7a0>
 800d4e0:	9b08      	ldr	r3, [sp, #32]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f000 80af 	beq.w	800d646 <_dtoa_r+0x8be>
 800d4e8:	2e00      	cmp	r6, #0
 800d4ea:	dd13      	ble.n	800d514 <_dtoa_r+0x78c>
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f001 f9e5 	bl	800e8c0 <__pow5mult>
 800d4f6:	ee18 2a10 	vmov	r2, s16
 800d4fa:	4601      	mov	r1, r0
 800d4fc:	4607      	mov	r7, r0
 800d4fe:	4620      	mov	r0, r4
 800d500:	f001 f934 	bl	800e76c <__multiply>
 800d504:	ee18 1a10 	vmov	r1, s16
 800d508:	4680      	mov	r8, r0
 800d50a:	4620      	mov	r0, r4
 800d50c:	f001 f816 	bl	800e53c <_Bfree>
 800d510:	ee08 8a10 	vmov	s16, r8
 800d514:	9b07      	ldr	r3, [sp, #28]
 800d516:	1b9a      	subs	r2, r3, r6
 800d518:	d006      	beq.n	800d528 <_dtoa_r+0x7a0>
 800d51a:	ee18 1a10 	vmov	r1, s16
 800d51e:	4620      	mov	r0, r4
 800d520:	f001 f9ce 	bl	800e8c0 <__pow5mult>
 800d524:	ee08 0a10 	vmov	s16, r0
 800d528:	2101      	movs	r1, #1
 800d52a:	4620      	mov	r0, r4
 800d52c:	f001 f908 	bl	800e740 <__i2b>
 800d530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d532:	2b00      	cmp	r3, #0
 800d534:	4606      	mov	r6, r0
 800d536:	f340 8088 	ble.w	800d64a <_dtoa_r+0x8c2>
 800d53a:	461a      	mov	r2, r3
 800d53c:	4601      	mov	r1, r0
 800d53e:	4620      	mov	r0, r4
 800d540:	f001 f9be 	bl	800e8c0 <__pow5mult>
 800d544:	9b06      	ldr	r3, [sp, #24]
 800d546:	2b01      	cmp	r3, #1
 800d548:	4606      	mov	r6, r0
 800d54a:	f340 8081 	ble.w	800d650 <_dtoa_r+0x8c8>
 800d54e:	f04f 0800 	mov.w	r8, #0
 800d552:	6933      	ldr	r3, [r6, #16]
 800d554:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d558:	6918      	ldr	r0, [r3, #16]
 800d55a:	f001 f8a1 	bl	800e6a0 <__hi0bits>
 800d55e:	f1c0 0020 	rsb	r0, r0, #32
 800d562:	9b05      	ldr	r3, [sp, #20]
 800d564:	4418      	add	r0, r3
 800d566:	f010 001f 	ands.w	r0, r0, #31
 800d56a:	f000 8092 	beq.w	800d692 <_dtoa_r+0x90a>
 800d56e:	f1c0 0320 	rsb	r3, r0, #32
 800d572:	2b04      	cmp	r3, #4
 800d574:	f340 808a 	ble.w	800d68c <_dtoa_r+0x904>
 800d578:	f1c0 001c 	rsb	r0, r0, #28
 800d57c:	9b04      	ldr	r3, [sp, #16]
 800d57e:	4403      	add	r3, r0
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	4403      	add	r3, r0
 800d586:	4405      	add	r5, r0
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	9b04      	ldr	r3, [sp, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dd07      	ble.n	800d5a0 <_dtoa_r+0x818>
 800d590:	ee18 1a10 	vmov	r1, s16
 800d594:	461a      	mov	r2, r3
 800d596:	4620      	mov	r0, r4
 800d598:	f001 f9ec 	bl	800e974 <__lshift>
 800d59c:	ee08 0a10 	vmov	s16, r0
 800d5a0:	9b05      	ldr	r3, [sp, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	dd05      	ble.n	800d5b2 <_dtoa_r+0x82a>
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f001 f9e2 	bl	800e974 <__lshift>
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d06e      	beq.n	800d696 <_dtoa_r+0x90e>
 800d5b8:	ee18 0a10 	vmov	r0, s16
 800d5bc:	4631      	mov	r1, r6
 800d5be:	f001 fa49 	bl	800ea54 <__mcmp>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	da67      	bge.n	800d696 <_dtoa_r+0x90e>
 800d5c6:	9b00      	ldr	r3, [sp, #0]
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	ee18 1a10 	vmov	r1, s16
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	220a      	movs	r2, #10
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 ffd3 	bl	800e580 <__multadd>
 800d5da:	9b08      	ldr	r3, [sp, #32]
 800d5dc:	ee08 0a10 	vmov	s16, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 81b1 	beq.w	800d948 <_dtoa_r+0xbc0>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	4639      	mov	r1, r7
 800d5ea:	220a      	movs	r2, #10
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 ffc7 	bl	800e580 <__multadd>
 800d5f2:	9b02      	ldr	r3, [sp, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	4607      	mov	r7, r0
 800d5f8:	f300 808e 	bgt.w	800d718 <_dtoa_r+0x990>
 800d5fc:	9b06      	ldr	r3, [sp, #24]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	dc51      	bgt.n	800d6a6 <_dtoa_r+0x91e>
 800d602:	e089      	b.n	800d718 <_dtoa_r+0x990>
 800d604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d606:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d60a:	e74b      	b.n	800d4a4 <_dtoa_r+0x71c>
 800d60c:	9b03      	ldr	r3, [sp, #12]
 800d60e:	1e5e      	subs	r6, r3, #1
 800d610:	9b07      	ldr	r3, [sp, #28]
 800d612:	42b3      	cmp	r3, r6
 800d614:	bfbf      	itttt	lt
 800d616:	9b07      	ldrlt	r3, [sp, #28]
 800d618:	9607      	strlt	r6, [sp, #28]
 800d61a:	1af2      	sublt	r2, r6, r3
 800d61c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d61e:	bfb6      	itet	lt
 800d620:	189b      	addlt	r3, r3, r2
 800d622:	1b9e      	subge	r6, r3, r6
 800d624:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d626:	9b03      	ldr	r3, [sp, #12]
 800d628:	bfb8      	it	lt
 800d62a:	2600      	movlt	r6, #0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	bfb7      	itett	lt
 800d630:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d634:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d638:	1a9d      	sublt	r5, r3, r2
 800d63a:	2300      	movlt	r3, #0
 800d63c:	e734      	b.n	800d4a8 <_dtoa_r+0x720>
 800d63e:	9e07      	ldr	r6, [sp, #28]
 800d640:	9d04      	ldr	r5, [sp, #16]
 800d642:	9f08      	ldr	r7, [sp, #32]
 800d644:	e73b      	b.n	800d4be <_dtoa_r+0x736>
 800d646:	9a07      	ldr	r2, [sp, #28]
 800d648:	e767      	b.n	800d51a <_dtoa_r+0x792>
 800d64a:	9b06      	ldr	r3, [sp, #24]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	dc18      	bgt.n	800d682 <_dtoa_r+0x8fa>
 800d650:	f1ba 0f00 	cmp.w	sl, #0
 800d654:	d115      	bne.n	800d682 <_dtoa_r+0x8fa>
 800d656:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d65a:	b993      	cbnz	r3, 800d682 <_dtoa_r+0x8fa>
 800d65c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d660:	0d1b      	lsrs	r3, r3, #20
 800d662:	051b      	lsls	r3, r3, #20
 800d664:	b183      	cbz	r3, 800d688 <_dtoa_r+0x900>
 800d666:	9b04      	ldr	r3, [sp, #16]
 800d668:	3301      	adds	r3, #1
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	9b05      	ldr	r3, [sp, #20]
 800d66e:	3301      	adds	r3, #1
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	f04f 0801 	mov.w	r8, #1
 800d676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f47f af6a 	bne.w	800d552 <_dtoa_r+0x7ca>
 800d67e:	2001      	movs	r0, #1
 800d680:	e76f      	b.n	800d562 <_dtoa_r+0x7da>
 800d682:	f04f 0800 	mov.w	r8, #0
 800d686:	e7f6      	b.n	800d676 <_dtoa_r+0x8ee>
 800d688:	4698      	mov	r8, r3
 800d68a:	e7f4      	b.n	800d676 <_dtoa_r+0x8ee>
 800d68c:	f43f af7d 	beq.w	800d58a <_dtoa_r+0x802>
 800d690:	4618      	mov	r0, r3
 800d692:	301c      	adds	r0, #28
 800d694:	e772      	b.n	800d57c <_dtoa_r+0x7f4>
 800d696:	9b03      	ldr	r3, [sp, #12]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	dc37      	bgt.n	800d70c <_dtoa_r+0x984>
 800d69c:	9b06      	ldr	r3, [sp, #24]
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	dd34      	ble.n	800d70c <_dtoa_r+0x984>
 800d6a2:	9b03      	ldr	r3, [sp, #12]
 800d6a4:	9302      	str	r3, [sp, #8]
 800d6a6:	9b02      	ldr	r3, [sp, #8]
 800d6a8:	b96b      	cbnz	r3, 800d6c6 <_dtoa_r+0x93e>
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	2205      	movs	r2, #5
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f000 ff66 	bl	800e580 <__multadd>
 800d6b4:	4601      	mov	r1, r0
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	ee18 0a10 	vmov	r0, s16
 800d6bc:	f001 f9ca 	bl	800ea54 <__mcmp>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	f73f adbb 	bgt.w	800d23c <_dtoa_r+0x4b4>
 800d6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c8:	9d01      	ldr	r5, [sp, #4]
 800d6ca:	43db      	mvns	r3, r3
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	f04f 0800 	mov.w	r8, #0
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f000 ff31 	bl	800e53c <_Bfree>
 800d6da:	2f00      	cmp	r7, #0
 800d6dc:	f43f aea4 	beq.w	800d428 <_dtoa_r+0x6a0>
 800d6e0:	f1b8 0f00 	cmp.w	r8, #0
 800d6e4:	d005      	beq.n	800d6f2 <_dtoa_r+0x96a>
 800d6e6:	45b8      	cmp	r8, r7
 800d6e8:	d003      	beq.n	800d6f2 <_dtoa_r+0x96a>
 800d6ea:	4641      	mov	r1, r8
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 ff25 	bl	800e53c <_Bfree>
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f000 ff21 	bl	800e53c <_Bfree>
 800d6fa:	e695      	b.n	800d428 <_dtoa_r+0x6a0>
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	4637      	mov	r7, r6
 800d700:	e7e1      	b.n	800d6c6 <_dtoa_r+0x93e>
 800d702:	9700      	str	r7, [sp, #0]
 800d704:	4637      	mov	r7, r6
 800d706:	e599      	b.n	800d23c <_dtoa_r+0x4b4>
 800d708:	40240000 	.word	0x40240000
 800d70c:	9b08      	ldr	r3, [sp, #32]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f000 80ca 	beq.w	800d8a8 <_dtoa_r+0xb20>
 800d714:	9b03      	ldr	r3, [sp, #12]
 800d716:	9302      	str	r3, [sp, #8]
 800d718:	2d00      	cmp	r5, #0
 800d71a:	dd05      	ble.n	800d728 <_dtoa_r+0x9a0>
 800d71c:	4639      	mov	r1, r7
 800d71e:	462a      	mov	r2, r5
 800d720:	4620      	mov	r0, r4
 800d722:	f001 f927 	bl	800e974 <__lshift>
 800d726:	4607      	mov	r7, r0
 800d728:	f1b8 0f00 	cmp.w	r8, #0
 800d72c:	d05b      	beq.n	800d7e6 <_dtoa_r+0xa5e>
 800d72e:	6879      	ldr	r1, [r7, #4]
 800d730:	4620      	mov	r0, r4
 800d732:	f000 fec3 	bl	800e4bc <_Balloc>
 800d736:	4605      	mov	r5, r0
 800d738:	b928      	cbnz	r0, 800d746 <_dtoa_r+0x9be>
 800d73a:	4b87      	ldr	r3, [pc, #540]	; (800d958 <_dtoa_r+0xbd0>)
 800d73c:	4602      	mov	r2, r0
 800d73e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d742:	f7ff bb3b 	b.w	800cdbc <_dtoa_r+0x34>
 800d746:	693a      	ldr	r2, [r7, #16]
 800d748:	3202      	adds	r2, #2
 800d74a:	0092      	lsls	r2, r2, #2
 800d74c:	f107 010c 	add.w	r1, r7, #12
 800d750:	300c      	adds	r0, #12
 800d752:	f7fd fbdb 	bl	800af0c <memcpy>
 800d756:	2201      	movs	r2, #1
 800d758:	4629      	mov	r1, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	f001 f90a 	bl	800e974 <__lshift>
 800d760:	9b01      	ldr	r3, [sp, #4]
 800d762:	f103 0901 	add.w	r9, r3, #1
 800d766:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d76a:	4413      	add	r3, r2
 800d76c:	9305      	str	r3, [sp, #20]
 800d76e:	f00a 0301 	and.w	r3, sl, #1
 800d772:	46b8      	mov	r8, r7
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	4607      	mov	r7, r0
 800d778:	4631      	mov	r1, r6
 800d77a:	ee18 0a10 	vmov	r0, s16
 800d77e:	f7ff fa77 	bl	800cc70 <quorem>
 800d782:	4641      	mov	r1, r8
 800d784:	9002      	str	r0, [sp, #8]
 800d786:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d78a:	ee18 0a10 	vmov	r0, s16
 800d78e:	f001 f961 	bl	800ea54 <__mcmp>
 800d792:	463a      	mov	r2, r7
 800d794:	9003      	str	r0, [sp, #12]
 800d796:	4631      	mov	r1, r6
 800d798:	4620      	mov	r0, r4
 800d79a:	f001 f977 	bl	800ea8c <__mdiff>
 800d79e:	68c2      	ldr	r2, [r0, #12]
 800d7a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	bb02      	cbnz	r2, 800d7ea <_dtoa_r+0xa62>
 800d7a8:	4601      	mov	r1, r0
 800d7aa:	ee18 0a10 	vmov	r0, s16
 800d7ae:	f001 f951 	bl	800ea54 <__mcmp>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	9207      	str	r2, [sp, #28]
 800d7ba:	f000 febf 	bl	800e53c <_Bfree>
 800d7be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d7c2:	ea43 0102 	orr.w	r1, r3, r2
 800d7c6:	9b04      	ldr	r3, [sp, #16]
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	464d      	mov	r5, r9
 800d7cc:	d10f      	bne.n	800d7ee <_dtoa_r+0xa66>
 800d7ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7d2:	d02a      	beq.n	800d82a <_dtoa_r+0xaa2>
 800d7d4:	9b03      	ldr	r3, [sp, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	dd02      	ble.n	800d7e0 <_dtoa_r+0xa58>
 800d7da:	9b02      	ldr	r3, [sp, #8]
 800d7dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d7e0:	f88b a000 	strb.w	sl, [fp]
 800d7e4:	e775      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	e7ba      	b.n	800d760 <_dtoa_r+0x9d8>
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	e7e2      	b.n	800d7b4 <_dtoa_r+0xa2c>
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	db04      	blt.n	800d7fe <_dtoa_r+0xa76>
 800d7f4:	9906      	ldr	r1, [sp, #24]
 800d7f6:	430b      	orrs	r3, r1
 800d7f8:	9904      	ldr	r1, [sp, #16]
 800d7fa:	430b      	orrs	r3, r1
 800d7fc:	d122      	bne.n	800d844 <_dtoa_r+0xabc>
 800d7fe:	2a00      	cmp	r2, #0
 800d800:	ddee      	ble.n	800d7e0 <_dtoa_r+0xa58>
 800d802:	ee18 1a10 	vmov	r1, s16
 800d806:	2201      	movs	r2, #1
 800d808:	4620      	mov	r0, r4
 800d80a:	f001 f8b3 	bl	800e974 <__lshift>
 800d80e:	4631      	mov	r1, r6
 800d810:	ee08 0a10 	vmov	s16, r0
 800d814:	f001 f91e 	bl	800ea54 <__mcmp>
 800d818:	2800      	cmp	r0, #0
 800d81a:	dc03      	bgt.n	800d824 <_dtoa_r+0xa9c>
 800d81c:	d1e0      	bne.n	800d7e0 <_dtoa_r+0xa58>
 800d81e:	f01a 0f01 	tst.w	sl, #1
 800d822:	d0dd      	beq.n	800d7e0 <_dtoa_r+0xa58>
 800d824:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d828:	d1d7      	bne.n	800d7da <_dtoa_r+0xa52>
 800d82a:	2339      	movs	r3, #57	; 0x39
 800d82c:	f88b 3000 	strb.w	r3, [fp]
 800d830:	462b      	mov	r3, r5
 800d832:	461d      	mov	r5, r3
 800d834:	3b01      	subs	r3, #1
 800d836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d83a:	2a39      	cmp	r2, #57	; 0x39
 800d83c:	d071      	beq.n	800d922 <_dtoa_r+0xb9a>
 800d83e:	3201      	adds	r2, #1
 800d840:	701a      	strb	r2, [r3, #0]
 800d842:	e746      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d844:	2a00      	cmp	r2, #0
 800d846:	dd07      	ble.n	800d858 <_dtoa_r+0xad0>
 800d848:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d84c:	d0ed      	beq.n	800d82a <_dtoa_r+0xaa2>
 800d84e:	f10a 0301 	add.w	r3, sl, #1
 800d852:	f88b 3000 	strb.w	r3, [fp]
 800d856:	e73c      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d858:	9b05      	ldr	r3, [sp, #20]
 800d85a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d85e:	4599      	cmp	r9, r3
 800d860:	d047      	beq.n	800d8f2 <_dtoa_r+0xb6a>
 800d862:	ee18 1a10 	vmov	r1, s16
 800d866:	2300      	movs	r3, #0
 800d868:	220a      	movs	r2, #10
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 fe88 	bl	800e580 <__multadd>
 800d870:	45b8      	cmp	r8, r7
 800d872:	ee08 0a10 	vmov	s16, r0
 800d876:	f04f 0300 	mov.w	r3, #0
 800d87a:	f04f 020a 	mov.w	r2, #10
 800d87e:	4641      	mov	r1, r8
 800d880:	4620      	mov	r0, r4
 800d882:	d106      	bne.n	800d892 <_dtoa_r+0xb0a>
 800d884:	f000 fe7c 	bl	800e580 <__multadd>
 800d888:	4680      	mov	r8, r0
 800d88a:	4607      	mov	r7, r0
 800d88c:	f109 0901 	add.w	r9, r9, #1
 800d890:	e772      	b.n	800d778 <_dtoa_r+0x9f0>
 800d892:	f000 fe75 	bl	800e580 <__multadd>
 800d896:	4639      	mov	r1, r7
 800d898:	4680      	mov	r8, r0
 800d89a:	2300      	movs	r3, #0
 800d89c:	220a      	movs	r2, #10
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f000 fe6e 	bl	800e580 <__multadd>
 800d8a4:	4607      	mov	r7, r0
 800d8a6:	e7f1      	b.n	800d88c <_dtoa_r+0xb04>
 800d8a8:	9b03      	ldr	r3, [sp, #12]
 800d8aa:	9302      	str	r3, [sp, #8]
 800d8ac:	9d01      	ldr	r5, [sp, #4]
 800d8ae:	ee18 0a10 	vmov	r0, s16
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	f7ff f9dc 	bl	800cc70 <quorem>
 800d8b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d8bc:	9b01      	ldr	r3, [sp, #4]
 800d8be:	f805 ab01 	strb.w	sl, [r5], #1
 800d8c2:	1aea      	subs	r2, r5, r3
 800d8c4:	9b02      	ldr	r3, [sp, #8]
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	dd09      	ble.n	800d8de <_dtoa_r+0xb56>
 800d8ca:	ee18 1a10 	vmov	r1, s16
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	220a      	movs	r2, #10
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 fe54 	bl	800e580 <__multadd>
 800d8d8:	ee08 0a10 	vmov	s16, r0
 800d8dc:	e7e7      	b.n	800d8ae <_dtoa_r+0xb26>
 800d8de:	9b02      	ldr	r3, [sp, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	bfc8      	it	gt
 800d8e4:	461d      	movgt	r5, r3
 800d8e6:	9b01      	ldr	r3, [sp, #4]
 800d8e8:	bfd8      	it	le
 800d8ea:	2501      	movle	r5, #1
 800d8ec:	441d      	add	r5, r3
 800d8ee:	f04f 0800 	mov.w	r8, #0
 800d8f2:	ee18 1a10 	vmov	r1, s16
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f001 f83b 	bl	800e974 <__lshift>
 800d8fe:	4631      	mov	r1, r6
 800d900:	ee08 0a10 	vmov	s16, r0
 800d904:	f001 f8a6 	bl	800ea54 <__mcmp>
 800d908:	2800      	cmp	r0, #0
 800d90a:	dc91      	bgt.n	800d830 <_dtoa_r+0xaa8>
 800d90c:	d102      	bne.n	800d914 <_dtoa_r+0xb8c>
 800d90e:	f01a 0f01 	tst.w	sl, #1
 800d912:	d18d      	bne.n	800d830 <_dtoa_r+0xaa8>
 800d914:	462b      	mov	r3, r5
 800d916:	461d      	mov	r5, r3
 800d918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d91c:	2a30      	cmp	r2, #48	; 0x30
 800d91e:	d0fa      	beq.n	800d916 <_dtoa_r+0xb8e>
 800d920:	e6d7      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d922:	9a01      	ldr	r2, [sp, #4]
 800d924:	429a      	cmp	r2, r3
 800d926:	d184      	bne.n	800d832 <_dtoa_r+0xaaa>
 800d928:	9b00      	ldr	r3, [sp, #0]
 800d92a:	3301      	adds	r3, #1
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	2331      	movs	r3, #49	; 0x31
 800d930:	7013      	strb	r3, [r2, #0]
 800d932:	e6ce      	b.n	800d6d2 <_dtoa_r+0x94a>
 800d934:	4b09      	ldr	r3, [pc, #36]	; (800d95c <_dtoa_r+0xbd4>)
 800d936:	f7ff ba95 	b.w	800ce64 <_dtoa_r+0xdc>
 800d93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f47f aa6e 	bne.w	800ce1e <_dtoa_r+0x96>
 800d942:	4b07      	ldr	r3, [pc, #28]	; (800d960 <_dtoa_r+0xbd8>)
 800d944:	f7ff ba8e 	b.w	800ce64 <_dtoa_r+0xdc>
 800d948:	9b02      	ldr	r3, [sp, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	dcae      	bgt.n	800d8ac <_dtoa_r+0xb24>
 800d94e:	9b06      	ldr	r3, [sp, #24]
 800d950:	2b02      	cmp	r3, #2
 800d952:	f73f aea8 	bgt.w	800d6a6 <_dtoa_r+0x91e>
 800d956:	e7a9      	b.n	800d8ac <_dtoa_r+0xb24>
 800d958:	08010e10 	.word	0x08010e10
 800d95c:	08010c10 	.word	0x08010c10
 800d960:	08010d91 	.word	0x08010d91

0800d964 <__sflush_r>:
 800d964:	898a      	ldrh	r2, [r1, #12]
 800d966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d96a:	4605      	mov	r5, r0
 800d96c:	0710      	lsls	r0, r2, #28
 800d96e:	460c      	mov	r4, r1
 800d970:	d458      	bmi.n	800da24 <__sflush_r+0xc0>
 800d972:	684b      	ldr	r3, [r1, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	dc05      	bgt.n	800d984 <__sflush_r+0x20>
 800d978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	dc02      	bgt.n	800d984 <__sflush_r+0x20>
 800d97e:	2000      	movs	r0, #0
 800d980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d986:	2e00      	cmp	r6, #0
 800d988:	d0f9      	beq.n	800d97e <__sflush_r+0x1a>
 800d98a:	2300      	movs	r3, #0
 800d98c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d990:	682f      	ldr	r7, [r5, #0]
 800d992:	602b      	str	r3, [r5, #0]
 800d994:	d032      	beq.n	800d9fc <__sflush_r+0x98>
 800d996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d998:	89a3      	ldrh	r3, [r4, #12]
 800d99a:	075a      	lsls	r2, r3, #29
 800d99c:	d505      	bpl.n	800d9aa <__sflush_r+0x46>
 800d99e:	6863      	ldr	r3, [r4, #4]
 800d9a0:	1ac0      	subs	r0, r0, r3
 800d9a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9a4:	b10b      	cbz	r3, 800d9aa <__sflush_r+0x46>
 800d9a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9a8:	1ac0      	subs	r0, r0, r3
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9b0:	6a21      	ldr	r1, [r4, #32]
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b0      	blx	r6
 800d9b6:	1c43      	adds	r3, r0, #1
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	d106      	bne.n	800d9ca <__sflush_r+0x66>
 800d9bc:	6829      	ldr	r1, [r5, #0]
 800d9be:	291d      	cmp	r1, #29
 800d9c0:	d82c      	bhi.n	800da1c <__sflush_r+0xb8>
 800d9c2:	4a2a      	ldr	r2, [pc, #168]	; (800da6c <__sflush_r+0x108>)
 800d9c4:	40ca      	lsrs	r2, r1
 800d9c6:	07d6      	lsls	r6, r2, #31
 800d9c8:	d528      	bpl.n	800da1c <__sflush_r+0xb8>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	6062      	str	r2, [r4, #4]
 800d9ce:	04d9      	lsls	r1, r3, #19
 800d9d0:	6922      	ldr	r2, [r4, #16]
 800d9d2:	6022      	str	r2, [r4, #0]
 800d9d4:	d504      	bpl.n	800d9e0 <__sflush_r+0x7c>
 800d9d6:	1c42      	adds	r2, r0, #1
 800d9d8:	d101      	bne.n	800d9de <__sflush_r+0x7a>
 800d9da:	682b      	ldr	r3, [r5, #0]
 800d9dc:	b903      	cbnz	r3, 800d9e0 <__sflush_r+0x7c>
 800d9de:	6560      	str	r0, [r4, #84]	; 0x54
 800d9e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9e2:	602f      	str	r7, [r5, #0]
 800d9e4:	2900      	cmp	r1, #0
 800d9e6:	d0ca      	beq.n	800d97e <__sflush_r+0x1a>
 800d9e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9ec:	4299      	cmp	r1, r3
 800d9ee:	d002      	beq.n	800d9f6 <__sflush_r+0x92>
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	f001 fa3b 	bl	800ee6c <_free_r>
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	6360      	str	r0, [r4, #52]	; 0x34
 800d9fa:	e7c1      	b.n	800d980 <__sflush_r+0x1c>
 800d9fc:	6a21      	ldr	r1, [r4, #32]
 800d9fe:	2301      	movs	r3, #1
 800da00:	4628      	mov	r0, r5
 800da02:	47b0      	blx	r6
 800da04:	1c41      	adds	r1, r0, #1
 800da06:	d1c7      	bne.n	800d998 <__sflush_r+0x34>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0c4      	beq.n	800d998 <__sflush_r+0x34>
 800da0e:	2b1d      	cmp	r3, #29
 800da10:	d001      	beq.n	800da16 <__sflush_r+0xb2>
 800da12:	2b16      	cmp	r3, #22
 800da14:	d101      	bne.n	800da1a <__sflush_r+0xb6>
 800da16:	602f      	str	r7, [r5, #0]
 800da18:	e7b1      	b.n	800d97e <__sflush_r+0x1a>
 800da1a:	89a3      	ldrh	r3, [r4, #12]
 800da1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da20:	81a3      	strh	r3, [r4, #12]
 800da22:	e7ad      	b.n	800d980 <__sflush_r+0x1c>
 800da24:	690f      	ldr	r7, [r1, #16]
 800da26:	2f00      	cmp	r7, #0
 800da28:	d0a9      	beq.n	800d97e <__sflush_r+0x1a>
 800da2a:	0793      	lsls	r3, r2, #30
 800da2c:	680e      	ldr	r6, [r1, #0]
 800da2e:	bf08      	it	eq
 800da30:	694b      	ldreq	r3, [r1, #20]
 800da32:	600f      	str	r7, [r1, #0]
 800da34:	bf18      	it	ne
 800da36:	2300      	movne	r3, #0
 800da38:	eba6 0807 	sub.w	r8, r6, r7
 800da3c:	608b      	str	r3, [r1, #8]
 800da3e:	f1b8 0f00 	cmp.w	r8, #0
 800da42:	dd9c      	ble.n	800d97e <__sflush_r+0x1a>
 800da44:	6a21      	ldr	r1, [r4, #32]
 800da46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da48:	4643      	mov	r3, r8
 800da4a:	463a      	mov	r2, r7
 800da4c:	4628      	mov	r0, r5
 800da4e:	47b0      	blx	r6
 800da50:	2800      	cmp	r0, #0
 800da52:	dc06      	bgt.n	800da62 <__sflush_r+0xfe>
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da5a:	81a3      	strh	r3, [r4, #12]
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295
 800da60:	e78e      	b.n	800d980 <__sflush_r+0x1c>
 800da62:	4407      	add	r7, r0
 800da64:	eba8 0800 	sub.w	r8, r8, r0
 800da68:	e7e9      	b.n	800da3e <__sflush_r+0xda>
 800da6a:	bf00      	nop
 800da6c:	20400001 	.word	0x20400001

0800da70 <_fflush_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	690b      	ldr	r3, [r1, #16]
 800da74:	4605      	mov	r5, r0
 800da76:	460c      	mov	r4, r1
 800da78:	b913      	cbnz	r3, 800da80 <_fflush_r+0x10>
 800da7a:	2500      	movs	r5, #0
 800da7c:	4628      	mov	r0, r5
 800da7e:	bd38      	pop	{r3, r4, r5, pc}
 800da80:	b118      	cbz	r0, 800da8a <_fflush_r+0x1a>
 800da82:	6983      	ldr	r3, [r0, #24]
 800da84:	b90b      	cbnz	r3, 800da8a <_fflush_r+0x1a>
 800da86:	f000 f887 	bl	800db98 <__sinit>
 800da8a:	4b14      	ldr	r3, [pc, #80]	; (800dadc <_fflush_r+0x6c>)
 800da8c:	429c      	cmp	r4, r3
 800da8e:	d11b      	bne.n	800dac8 <_fflush_r+0x58>
 800da90:	686c      	ldr	r4, [r5, #4]
 800da92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d0ef      	beq.n	800da7a <_fflush_r+0xa>
 800da9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da9c:	07d0      	lsls	r0, r2, #31
 800da9e:	d404      	bmi.n	800daaa <_fflush_r+0x3a>
 800daa0:	0599      	lsls	r1, r3, #22
 800daa2:	d402      	bmi.n	800daaa <_fflush_r+0x3a>
 800daa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daa6:	f000 fc88 	bl	800e3ba <__retarget_lock_acquire_recursive>
 800daaa:	4628      	mov	r0, r5
 800daac:	4621      	mov	r1, r4
 800daae:	f7ff ff59 	bl	800d964 <__sflush_r>
 800dab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dab4:	07da      	lsls	r2, r3, #31
 800dab6:	4605      	mov	r5, r0
 800dab8:	d4e0      	bmi.n	800da7c <_fflush_r+0xc>
 800daba:	89a3      	ldrh	r3, [r4, #12]
 800dabc:	059b      	lsls	r3, r3, #22
 800dabe:	d4dd      	bmi.n	800da7c <_fflush_r+0xc>
 800dac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dac2:	f000 fc7b 	bl	800e3bc <__retarget_lock_release_recursive>
 800dac6:	e7d9      	b.n	800da7c <_fflush_r+0xc>
 800dac8:	4b05      	ldr	r3, [pc, #20]	; (800dae0 <_fflush_r+0x70>)
 800daca:	429c      	cmp	r4, r3
 800dacc:	d101      	bne.n	800dad2 <_fflush_r+0x62>
 800dace:	68ac      	ldr	r4, [r5, #8]
 800dad0:	e7df      	b.n	800da92 <_fflush_r+0x22>
 800dad2:	4b04      	ldr	r3, [pc, #16]	; (800dae4 <_fflush_r+0x74>)
 800dad4:	429c      	cmp	r4, r3
 800dad6:	bf08      	it	eq
 800dad8:	68ec      	ldreq	r4, [r5, #12]
 800dada:	e7da      	b.n	800da92 <_fflush_r+0x22>
 800dadc:	08010e44 	.word	0x08010e44
 800dae0:	08010e64 	.word	0x08010e64
 800dae4:	08010e24 	.word	0x08010e24

0800dae8 <std>:
 800dae8:	2300      	movs	r3, #0
 800daea:	b510      	push	{r4, lr}
 800daec:	4604      	mov	r4, r0
 800daee:	e9c0 3300 	strd	r3, r3, [r0]
 800daf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800daf6:	6083      	str	r3, [r0, #8]
 800daf8:	8181      	strh	r1, [r0, #12]
 800dafa:	6643      	str	r3, [r0, #100]	; 0x64
 800dafc:	81c2      	strh	r2, [r0, #14]
 800dafe:	6183      	str	r3, [r0, #24]
 800db00:	4619      	mov	r1, r3
 800db02:	2208      	movs	r2, #8
 800db04:	305c      	adds	r0, #92	; 0x5c
 800db06:	f7fd fa0f 	bl	800af28 <memset>
 800db0a:	4b05      	ldr	r3, [pc, #20]	; (800db20 <std+0x38>)
 800db0c:	6263      	str	r3, [r4, #36]	; 0x24
 800db0e:	4b05      	ldr	r3, [pc, #20]	; (800db24 <std+0x3c>)
 800db10:	62a3      	str	r3, [r4, #40]	; 0x28
 800db12:	4b05      	ldr	r3, [pc, #20]	; (800db28 <std+0x40>)
 800db14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db16:	4b05      	ldr	r3, [pc, #20]	; (800db2c <std+0x44>)
 800db18:	6224      	str	r4, [r4, #32]
 800db1a:	6323      	str	r3, [r4, #48]	; 0x30
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	bf00      	nop
 800db20:	0800f5c9 	.word	0x0800f5c9
 800db24:	0800f5eb 	.word	0x0800f5eb
 800db28:	0800f623 	.word	0x0800f623
 800db2c:	0800f647 	.word	0x0800f647

0800db30 <_cleanup_r>:
 800db30:	4901      	ldr	r1, [pc, #4]	; (800db38 <_cleanup_r+0x8>)
 800db32:	f000 b8af 	b.w	800dc94 <_fwalk_reent>
 800db36:	bf00      	nop
 800db38:	0800da71 	.word	0x0800da71

0800db3c <__sfmoreglue>:
 800db3c:	b570      	push	{r4, r5, r6, lr}
 800db3e:	2268      	movs	r2, #104	; 0x68
 800db40:	1e4d      	subs	r5, r1, #1
 800db42:	4355      	muls	r5, r2
 800db44:	460e      	mov	r6, r1
 800db46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db4a:	f001 f9fb 	bl	800ef44 <_malloc_r>
 800db4e:	4604      	mov	r4, r0
 800db50:	b140      	cbz	r0, 800db64 <__sfmoreglue+0x28>
 800db52:	2100      	movs	r1, #0
 800db54:	e9c0 1600 	strd	r1, r6, [r0]
 800db58:	300c      	adds	r0, #12
 800db5a:	60a0      	str	r0, [r4, #8]
 800db5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db60:	f7fd f9e2 	bl	800af28 <memset>
 800db64:	4620      	mov	r0, r4
 800db66:	bd70      	pop	{r4, r5, r6, pc}

0800db68 <__sfp_lock_acquire>:
 800db68:	4801      	ldr	r0, [pc, #4]	; (800db70 <__sfp_lock_acquire+0x8>)
 800db6a:	f000 bc26 	b.w	800e3ba <__retarget_lock_acquire_recursive>
 800db6e:	bf00      	nop
 800db70:	2001227d 	.word	0x2001227d

0800db74 <__sfp_lock_release>:
 800db74:	4801      	ldr	r0, [pc, #4]	; (800db7c <__sfp_lock_release+0x8>)
 800db76:	f000 bc21 	b.w	800e3bc <__retarget_lock_release_recursive>
 800db7a:	bf00      	nop
 800db7c:	2001227d 	.word	0x2001227d

0800db80 <__sinit_lock_acquire>:
 800db80:	4801      	ldr	r0, [pc, #4]	; (800db88 <__sinit_lock_acquire+0x8>)
 800db82:	f000 bc1a 	b.w	800e3ba <__retarget_lock_acquire_recursive>
 800db86:	bf00      	nop
 800db88:	2001227e 	.word	0x2001227e

0800db8c <__sinit_lock_release>:
 800db8c:	4801      	ldr	r0, [pc, #4]	; (800db94 <__sinit_lock_release+0x8>)
 800db8e:	f000 bc15 	b.w	800e3bc <__retarget_lock_release_recursive>
 800db92:	bf00      	nop
 800db94:	2001227e 	.word	0x2001227e

0800db98 <__sinit>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	4604      	mov	r4, r0
 800db9c:	f7ff fff0 	bl	800db80 <__sinit_lock_acquire>
 800dba0:	69a3      	ldr	r3, [r4, #24]
 800dba2:	b11b      	cbz	r3, 800dbac <__sinit+0x14>
 800dba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dba8:	f7ff bff0 	b.w	800db8c <__sinit_lock_release>
 800dbac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dbb0:	6523      	str	r3, [r4, #80]	; 0x50
 800dbb2:	4b13      	ldr	r3, [pc, #76]	; (800dc00 <__sinit+0x68>)
 800dbb4:	4a13      	ldr	r2, [pc, #76]	; (800dc04 <__sinit+0x6c>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	62a2      	str	r2, [r4, #40]	; 0x28
 800dbba:	42a3      	cmp	r3, r4
 800dbbc:	bf04      	itt	eq
 800dbbe:	2301      	moveq	r3, #1
 800dbc0:	61a3      	streq	r3, [r4, #24]
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f000 f820 	bl	800dc08 <__sfp>
 800dbc8:	6060      	str	r0, [r4, #4]
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f000 f81c 	bl	800dc08 <__sfp>
 800dbd0:	60a0      	str	r0, [r4, #8]
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 f818 	bl	800dc08 <__sfp>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	60e0      	str	r0, [r4, #12]
 800dbdc:	2104      	movs	r1, #4
 800dbde:	6860      	ldr	r0, [r4, #4]
 800dbe0:	f7ff ff82 	bl	800dae8 <std>
 800dbe4:	68a0      	ldr	r0, [r4, #8]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	2109      	movs	r1, #9
 800dbea:	f7ff ff7d 	bl	800dae8 <std>
 800dbee:	68e0      	ldr	r0, [r4, #12]
 800dbf0:	2202      	movs	r2, #2
 800dbf2:	2112      	movs	r1, #18
 800dbf4:	f7ff ff78 	bl	800dae8 <std>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	61a3      	str	r3, [r4, #24]
 800dbfc:	e7d2      	b.n	800dba4 <__sinit+0xc>
 800dbfe:	bf00      	nop
 800dc00:	08010bfc 	.word	0x08010bfc
 800dc04:	0800db31 	.word	0x0800db31

0800dc08 <__sfp>:
 800dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0a:	4607      	mov	r7, r0
 800dc0c:	f7ff ffac 	bl	800db68 <__sfp_lock_acquire>
 800dc10:	4b1e      	ldr	r3, [pc, #120]	; (800dc8c <__sfp+0x84>)
 800dc12:	681e      	ldr	r6, [r3, #0]
 800dc14:	69b3      	ldr	r3, [r6, #24]
 800dc16:	b913      	cbnz	r3, 800dc1e <__sfp+0x16>
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7ff ffbd 	bl	800db98 <__sinit>
 800dc1e:	3648      	adds	r6, #72	; 0x48
 800dc20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc24:	3b01      	subs	r3, #1
 800dc26:	d503      	bpl.n	800dc30 <__sfp+0x28>
 800dc28:	6833      	ldr	r3, [r6, #0]
 800dc2a:	b30b      	cbz	r3, 800dc70 <__sfp+0x68>
 800dc2c:	6836      	ldr	r6, [r6, #0]
 800dc2e:	e7f7      	b.n	800dc20 <__sfp+0x18>
 800dc30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc34:	b9d5      	cbnz	r5, 800dc6c <__sfp+0x64>
 800dc36:	4b16      	ldr	r3, [pc, #88]	; (800dc90 <__sfp+0x88>)
 800dc38:	60e3      	str	r3, [r4, #12]
 800dc3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc3e:	6665      	str	r5, [r4, #100]	; 0x64
 800dc40:	f000 fbba 	bl	800e3b8 <__retarget_lock_init_recursive>
 800dc44:	f7ff ff96 	bl	800db74 <__sfp_lock_release>
 800dc48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dc50:	6025      	str	r5, [r4, #0]
 800dc52:	61a5      	str	r5, [r4, #24]
 800dc54:	2208      	movs	r2, #8
 800dc56:	4629      	mov	r1, r5
 800dc58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc5c:	f7fd f964 	bl	800af28 <memset>
 800dc60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc68:	4620      	mov	r0, r4
 800dc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc6c:	3468      	adds	r4, #104	; 0x68
 800dc6e:	e7d9      	b.n	800dc24 <__sfp+0x1c>
 800dc70:	2104      	movs	r1, #4
 800dc72:	4638      	mov	r0, r7
 800dc74:	f7ff ff62 	bl	800db3c <__sfmoreglue>
 800dc78:	4604      	mov	r4, r0
 800dc7a:	6030      	str	r0, [r6, #0]
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	d1d5      	bne.n	800dc2c <__sfp+0x24>
 800dc80:	f7ff ff78 	bl	800db74 <__sfp_lock_release>
 800dc84:	230c      	movs	r3, #12
 800dc86:	603b      	str	r3, [r7, #0]
 800dc88:	e7ee      	b.n	800dc68 <__sfp+0x60>
 800dc8a:	bf00      	nop
 800dc8c:	08010bfc 	.word	0x08010bfc
 800dc90:	ffff0001 	.word	0xffff0001

0800dc94 <_fwalk_reent>:
 800dc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc98:	4606      	mov	r6, r0
 800dc9a:	4688      	mov	r8, r1
 800dc9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dca0:	2700      	movs	r7, #0
 800dca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dca6:	f1b9 0901 	subs.w	r9, r9, #1
 800dcaa:	d505      	bpl.n	800dcb8 <_fwalk_reent+0x24>
 800dcac:	6824      	ldr	r4, [r4, #0]
 800dcae:	2c00      	cmp	r4, #0
 800dcb0:	d1f7      	bne.n	800dca2 <_fwalk_reent+0xe>
 800dcb2:	4638      	mov	r0, r7
 800dcb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcb8:	89ab      	ldrh	r3, [r5, #12]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d907      	bls.n	800dcce <_fwalk_reent+0x3a>
 800dcbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	d003      	beq.n	800dcce <_fwalk_reent+0x3a>
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	4630      	mov	r0, r6
 800dcca:	47c0      	blx	r8
 800dccc:	4307      	orrs	r7, r0
 800dcce:	3568      	adds	r5, #104	; 0x68
 800dcd0:	e7e9      	b.n	800dca6 <_fwalk_reent+0x12>

0800dcd2 <rshift>:
 800dcd2:	6903      	ldr	r3, [r0, #16]
 800dcd4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dcd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcdc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dce0:	f100 0414 	add.w	r4, r0, #20
 800dce4:	dd45      	ble.n	800dd72 <rshift+0xa0>
 800dce6:	f011 011f 	ands.w	r1, r1, #31
 800dcea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dcee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dcf2:	d10c      	bne.n	800dd0e <rshift+0x3c>
 800dcf4:	f100 0710 	add.w	r7, r0, #16
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	42b1      	cmp	r1, r6
 800dcfc:	d334      	bcc.n	800dd68 <rshift+0x96>
 800dcfe:	1a9b      	subs	r3, r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	1eea      	subs	r2, r5, #3
 800dd04:	4296      	cmp	r6, r2
 800dd06:	bf38      	it	cc
 800dd08:	2300      	movcc	r3, #0
 800dd0a:	4423      	add	r3, r4
 800dd0c:	e015      	b.n	800dd3a <rshift+0x68>
 800dd0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd12:	f1c1 0820 	rsb	r8, r1, #32
 800dd16:	40cf      	lsrs	r7, r1
 800dd18:	f105 0e04 	add.w	lr, r5, #4
 800dd1c:	46a1      	mov	r9, r4
 800dd1e:	4576      	cmp	r6, lr
 800dd20:	46f4      	mov	ip, lr
 800dd22:	d815      	bhi.n	800dd50 <rshift+0x7e>
 800dd24:	1a9a      	subs	r2, r3, r2
 800dd26:	0092      	lsls	r2, r2, #2
 800dd28:	3a04      	subs	r2, #4
 800dd2a:	3501      	adds	r5, #1
 800dd2c:	42ae      	cmp	r6, r5
 800dd2e:	bf38      	it	cc
 800dd30:	2200      	movcc	r2, #0
 800dd32:	18a3      	adds	r3, r4, r2
 800dd34:	50a7      	str	r7, [r4, r2]
 800dd36:	b107      	cbz	r7, 800dd3a <rshift+0x68>
 800dd38:	3304      	adds	r3, #4
 800dd3a:	1b1a      	subs	r2, r3, r4
 800dd3c:	42a3      	cmp	r3, r4
 800dd3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd42:	bf08      	it	eq
 800dd44:	2300      	moveq	r3, #0
 800dd46:	6102      	str	r2, [r0, #16]
 800dd48:	bf08      	it	eq
 800dd4a:	6143      	streq	r3, [r0, #20]
 800dd4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd50:	f8dc c000 	ldr.w	ip, [ip]
 800dd54:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd58:	ea4c 0707 	orr.w	r7, ip, r7
 800dd5c:	f849 7b04 	str.w	r7, [r9], #4
 800dd60:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd64:	40cf      	lsrs	r7, r1
 800dd66:	e7da      	b.n	800dd1e <rshift+0x4c>
 800dd68:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd6c:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd70:	e7c3      	b.n	800dcfa <rshift+0x28>
 800dd72:	4623      	mov	r3, r4
 800dd74:	e7e1      	b.n	800dd3a <rshift+0x68>

0800dd76 <__hexdig_fun>:
 800dd76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dd7a:	2b09      	cmp	r3, #9
 800dd7c:	d802      	bhi.n	800dd84 <__hexdig_fun+0xe>
 800dd7e:	3820      	subs	r0, #32
 800dd80:	b2c0      	uxtb	r0, r0
 800dd82:	4770      	bx	lr
 800dd84:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd88:	2b05      	cmp	r3, #5
 800dd8a:	d801      	bhi.n	800dd90 <__hexdig_fun+0x1a>
 800dd8c:	3847      	subs	r0, #71	; 0x47
 800dd8e:	e7f7      	b.n	800dd80 <__hexdig_fun+0xa>
 800dd90:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd94:	2b05      	cmp	r3, #5
 800dd96:	d801      	bhi.n	800dd9c <__hexdig_fun+0x26>
 800dd98:	3827      	subs	r0, #39	; 0x27
 800dd9a:	e7f1      	b.n	800dd80 <__hexdig_fun+0xa>
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	4770      	bx	lr

0800dda0 <__gethex>:
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	ed2d 8b02 	vpush	{d8}
 800dda8:	b089      	sub	sp, #36	; 0x24
 800ddaa:	ee08 0a10 	vmov	s16, r0
 800ddae:	9304      	str	r3, [sp, #16]
 800ddb0:	4bb4      	ldr	r3, [pc, #720]	; (800e084 <__gethex+0x2e4>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9301      	str	r3, [sp, #4]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	468b      	mov	fp, r1
 800ddba:	4690      	mov	r8, r2
 800ddbc:	f7f2 fa08 	bl	80001d0 <strlen>
 800ddc0:	9b01      	ldr	r3, [sp, #4]
 800ddc2:	f8db 2000 	ldr.w	r2, [fp]
 800ddc6:	4403      	add	r3, r0
 800ddc8:	4682      	mov	sl, r0
 800ddca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ddce:	9305      	str	r3, [sp, #20]
 800ddd0:	1c93      	adds	r3, r2, #2
 800ddd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ddd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ddda:	32fe      	adds	r2, #254	; 0xfe
 800dddc:	18d1      	adds	r1, r2, r3
 800ddde:	461f      	mov	r7, r3
 800dde0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dde4:	9100      	str	r1, [sp, #0]
 800dde6:	2830      	cmp	r0, #48	; 0x30
 800dde8:	d0f8      	beq.n	800dddc <__gethex+0x3c>
 800ddea:	f7ff ffc4 	bl	800dd76 <__hexdig_fun>
 800ddee:	4604      	mov	r4, r0
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d13a      	bne.n	800de6a <__gethex+0xca>
 800ddf4:	9901      	ldr	r1, [sp, #4]
 800ddf6:	4652      	mov	r2, sl
 800ddf8:	4638      	mov	r0, r7
 800ddfa:	f001 fc28 	bl	800f64e <strncmp>
 800ddfe:	4605      	mov	r5, r0
 800de00:	2800      	cmp	r0, #0
 800de02:	d168      	bne.n	800ded6 <__gethex+0x136>
 800de04:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de08:	eb07 060a 	add.w	r6, r7, sl
 800de0c:	f7ff ffb3 	bl	800dd76 <__hexdig_fun>
 800de10:	2800      	cmp	r0, #0
 800de12:	d062      	beq.n	800deda <__gethex+0x13a>
 800de14:	4633      	mov	r3, r6
 800de16:	7818      	ldrb	r0, [r3, #0]
 800de18:	2830      	cmp	r0, #48	; 0x30
 800de1a:	461f      	mov	r7, r3
 800de1c:	f103 0301 	add.w	r3, r3, #1
 800de20:	d0f9      	beq.n	800de16 <__gethex+0x76>
 800de22:	f7ff ffa8 	bl	800dd76 <__hexdig_fun>
 800de26:	2301      	movs	r3, #1
 800de28:	fab0 f480 	clz	r4, r0
 800de2c:	0964      	lsrs	r4, r4, #5
 800de2e:	4635      	mov	r5, r6
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	463a      	mov	r2, r7
 800de34:	4616      	mov	r6, r2
 800de36:	3201      	adds	r2, #1
 800de38:	7830      	ldrb	r0, [r6, #0]
 800de3a:	f7ff ff9c 	bl	800dd76 <__hexdig_fun>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d1f8      	bne.n	800de34 <__gethex+0x94>
 800de42:	9901      	ldr	r1, [sp, #4]
 800de44:	4652      	mov	r2, sl
 800de46:	4630      	mov	r0, r6
 800de48:	f001 fc01 	bl	800f64e <strncmp>
 800de4c:	b980      	cbnz	r0, 800de70 <__gethex+0xd0>
 800de4e:	b94d      	cbnz	r5, 800de64 <__gethex+0xc4>
 800de50:	eb06 050a 	add.w	r5, r6, sl
 800de54:	462a      	mov	r2, r5
 800de56:	4616      	mov	r6, r2
 800de58:	3201      	adds	r2, #1
 800de5a:	7830      	ldrb	r0, [r6, #0]
 800de5c:	f7ff ff8b 	bl	800dd76 <__hexdig_fun>
 800de60:	2800      	cmp	r0, #0
 800de62:	d1f8      	bne.n	800de56 <__gethex+0xb6>
 800de64:	1bad      	subs	r5, r5, r6
 800de66:	00ad      	lsls	r5, r5, #2
 800de68:	e004      	b.n	800de74 <__gethex+0xd4>
 800de6a:	2400      	movs	r4, #0
 800de6c:	4625      	mov	r5, r4
 800de6e:	e7e0      	b.n	800de32 <__gethex+0x92>
 800de70:	2d00      	cmp	r5, #0
 800de72:	d1f7      	bne.n	800de64 <__gethex+0xc4>
 800de74:	7833      	ldrb	r3, [r6, #0]
 800de76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de7a:	2b50      	cmp	r3, #80	; 0x50
 800de7c:	d13b      	bne.n	800def6 <__gethex+0x156>
 800de7e:	7873      	ldrb	r3, [r6, #1]
 800de80:	2b2b      	cmp	r3, #43	; 0x2b
 800de82:	d02c      	beq.n	800dede <__gethex+0x13e>
 800de84:	2b2d      	cmp	r3, #45	; 0x2d
 800de86:	d02e      	beq.n	800dee6 <__gethex+0x146>
 800de88:	1c71      	adds	r1, r6, #1
 800de8a:	f04f 0900 	mov.w	r9, #0
 800de8e:	7808      	ldrb	r0, [r1, #0]
 800de90:	f7ff ff71 	bl	800dd76 <__hexdig_fun>
 800de94:	1e43      	subs	r3, r0, #1
 800de96:	b2db      	uxtb	r3, r3
 800de98:	2b18      	cmp	r3, #24
 800de9a:	d82c      	bhi.n	800def6 <__gethex+0x156>
 800de9c:	f1a0 0210 	sub.w	r2, r0, #16
 800dea0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dea4:	f7ff ff67 	bl	800dd76 <__hexdig_fun>
 800dea8:	1e43      	subs	r3, r0, #1
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b18      	cmp	r3, #24
 800deae:	d91d      	bls.n	800deec <__gethex+0x14c>
 800deb0:	f1b9 0f00 	cmp.w	r9, #0
 800deb4:	d000      	beq.n	800deb8 <__gethex+0x118>
 800deb6:	4252      	negs	r2, r2
 800deb8:	4415      	add	r5, r2
 800deba:	f8cb 1000 	str.w	r1, [fp]
 800debe:	b1e4      	cbz	r4, 800defa <__gethex+0x15a>
 800dec0:	9b00      	ldr	r3, [sp, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	bf14      	ite	ne
 800dec6:	2700      	movne	r7, #0
 800dec8:	2706      	moveq	r7, #6
 800deca:	4638      	mov	r0, r7
 800decc:	b009      	add	sp, #36	; 0x24
 800dece:	ecbd 8b02 	vpop	{d8}
 800ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded6:	463e      	mov	r6, r7
 800ded8:	4625      	mov	r5, r4
 800deda:	2401      	movs	r4, #1
 800dedc:	e7ca      	b.n	800de74 <__gethex+0xd4>
 800dede:	f04f 0900 	mov.w	r9, #0
 800dee2:	1cb1      	adds	r1, r6, #2
 800dee4:	e7d3      	b.n	800de8e <__gethex+0xee>
 800dee6:	f04f 0901 	mov.w	r9, #1
 800deea:	e7fa      	b.n	800dee2 <__gethex+0x142>
 800deec:	230a      	movs	r3, #10
 800deee:	fb03 0202 	mla	r2, r3, r2, r0
 800def2:	3a10      	subs	r2, #16
 800def4:	e7d4      	b.n	800dea0 <__gethex+0x100>
 800def6:	4631      	mov	r1, r6
 800def8:	e7df      	b.n	800deba <__gethex+0x11a>
 800defa:	1bf3      	subs	r3, r6, r7
 800defc:	3b01      	subs	r3, #1
 800defe:	4621      	mov	r1, r4
 800df00:	2b07      	cmp	r3, #7
 800df02:	dc0b      	bgt.n	800df1c <__gethex+0x17c>
 800df04:	ee18 0a10 	vmov	r0, s16
 800df08:	f000 fad8 	bl	800e4bc <_Balloc>
 800df0c:	4604      	mov	r4, r0
 800df0e:	b940      	cbnz	r0, 800df22 <__gethex+0x182>
 800df10:	4b5d      	ldr	r3, [pc, #372]	; (800e088 <__gethex+0x2e8>)
 800df12:	4602      	mov	r2, r0
 800df14:	21de      	movs	r1, #222	; 0xde
 800df16:	485d      	ldr	r0, [pc, #372]	; (800e08c <__gethex+0x2ec>)
 800df18:	f001 fbcc 	bl	800f6b4 <__assert_func>
 800df1c:	3101      	adds	r1, #1
 800df1e:	105b      	asrs	r3, r3, #1
 800df20:	e7ee      	b.n	800df00 <__gethex+0x160>
 800df22:	f100 0914 	add.w	r9, r0, #20
 800df26:	f04f 0b00 	mov.w	fp, #0
 800df2a:	f1ca 0301 	rsb	r3, sl, #1
 800df2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800df32:	f8cd b000 	str.w	fp, [sp]
 800df36:	9306      	str	r3, [sp, #24]
 800df38:	42b7      	cmp	r7, r6
 800df3a:	d340      	bcc.n	800dfbe <__gethex+0x21e>
 800df3c:	9802      	ldr	r0, [sp, #8]
 800df3e:	9b00      	ldr	r3, [sp, #0]
 800df40:	f840 3b04 	str.w	r3, [r0], #4
 800df44:	eba0 0009 	sub.w	r0, r0, r9
 800df48:	1080      	asrs	r0, r0, #2
 800df4a:	0146      	lsls	r6, r0, #5
 800df4c:	6120      	str	r0, [r4, #16]
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 fba6 	bl	800e6a0 <__hi0bits>
 800df54:	1a30      	subs	r0, r6, r0
 800df56:	f8d8 6000 	ldr.w	r6, [r8]
 800df5a:	42b0      	cmp	r0, r6
 800df5c:	dd63      	ble.n	800e026 <__gethex+0x286>
 800df5e:	1b87      	subs	r7, r0, r6
 800df60:	4639      	mov	r1, r7
 800df62:	4620      	mov	r0, r4
 800df64:	f000 ff4a 	bl	800edfc <__any_on>
 800df68:	4682      	mov	sl, r0
 800df6a:	b1a8      	cbz	r0, 800df98 <__gethex+0x1f8>
 800df6c:	1e7b      	subs	r3, r7, #1
 800df6e:	1159      	asrs	r1, r3, #5
 800df70:	f003 021f 	and.w	r2, r3, #31
 800df74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df78:	f04f 0a01 	mov.w	sl, #1
 800df7c:	fa0a f202 	lsl.w	r2, sl, r2
 800df80:	420a      	tst	r2, r1
 800df82:	d009      	beq.n	800df98 <__gethex+0x1f8>
 800df84:	4553      	cmp	r3, sl
 800df86:	dd05      	ble.n	800df94 <__gethex+0x1f4>
 800df88:	1eb9      	subs	r1, r7, #2
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 ff36 	bl	800edfc <__any_on>
 800df90:	2800      	cmp	r0, #0
 800df92:	d145      	bne.n	800e020 <__gethex+0x280>
 800df94:	f04f 0a02 	mov.w	sl, #2
 800df98:	4639      	mov	r1, r7
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7ff fe99 	bl	800dcd2 <rshift>
 800dfa0:	443d      	add	r5, r7
 800dfa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfa6:	42ab      	cmp	r3, r5
 800dfa8:	da4c      	bge.n	800e044 <__gethex+0x2a4>
 800dfaa:	ee18 0a10 	vmov	r0, s16
 800dfae:	4621      	mov	r1, r4
 800dfb0:	f000 fac4 	bl	800e53c <_Bfree>
 800dfb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	6013      	str	r3, [r2, #0]
 800dfba:	27a3      	movs	r7, #163	; 0xa3
 800dfbc:	e785      	b.n	800deca <__gethex+0x12a>
 800dfbe:	1e73      	subs	r3, r6, #1
 800dfc0:	9a05      	ldr	r2, [sp, #20]
 800dfc2:	9303      	str	r3, [sp, #12]
 800dfc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d019      	beq.n	800e000 <__gethex+0x260>
 800dfcc:	f1bb 0f20 	cmp.w	fp, #32
 800dfd0:	d107      	bne.n	800dfe2 <__gethex+0x242>
 800dfd2:	9b02      	ldr	r3, [sp, #8]
 800dfd4:	9a00      	ldr	r2, [sp, #0]
 800dfd6:	f843 2b04 	str.w	r2, [r3], #4
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	469b      	mov	fp, r3
 800dfe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dfe6:	f7ff fec6 	bl	800dd76 <__hexdig_fun>
 800dfea:	9b00      	ldr	r3, [sp, #0]
 800dfec:	f000 000f 	and.w	r0, r0, #15
 800dff0:	fa00 f00b 	lsl.w	r0, r0, fp
 800dff4:	4303      	orrs	r3, r0
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	f10b 0b04 	add.w	fp, fp, #4
 800dffc:	9b03      	ldr	r3, [sp, #12]
 800dffe:	e00d      	b.n	800e01c <__gethex+0x27c>
 800e000:	9b03      	ldr	r3, [sp, #12]
 800e002:	9a06      	ldr	r2, [sp, #24]
 800e004:	4413      	add	r3, r2
 800e006:	42bb      	cmp	r3, r7
 800e008:	d3e0      	bcc.n	800dfcc <__gethex+0x22c>
 800e00a:	4618      	mov	r0, r3
 800e00c:	9901      	ldr	r1, [sp, #4]
 800e00e:	9307      	str	r3, [sp, #28]
 800e010:	4652      	mov	r2, sl
 800e012:	f001 fb1c 	bl	800f64e <strncmp>
 800e016:	9b07      	ldr	r3, [sp, #28]
 800e018:	2800      	cmp	r0, #0
 800e01a:	d1d7      	bne.n	800dfcc <__gethex+0x22c>
 800e01c:	461e      	mov	r6, r3
 800e01e:	e78b      	b.n	800df38 <__gethex+0x198>
 800e020:	f04f 0a03 	mov.w	sl, #3
 800e024:	e7b8      	b.n	800df98 <__gethex+0x1f8>
 800e026:	da0a      	bge.n	800e03e <__gethex+0x29e>
 800e028:	1a37      	subs	r7, r6, r0
 800e02a:	4621      	mov	r1, r4
 800e02c:	ee18 0a10 	vmov	r0, s16
 800e030:	463a      	mov	r2, r7
 800e032:	f000 fc9f 	bl	800e974 <__lshift>
 800e036:	1bed      	subs	r5, r5, r7
 800e038:	4604      	mov	r4, r0
 800e03a:	f100 0914 	add.w	r9, r0, #20
 800e03e:	f04f 0a00 	mov.w	sl, #0
 800e042:	e7ae      	b.n	800dfa2 <__gethex+0x202>
 800e044:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e048:	42a8      	cmp	r0, r5
 800e04a:	dd72      	ble.n	800e132 <__gethex+0x392>
 800e04c:	1b45      	subs	r5, r0, r5
 800e04e:	42ae      	cmp	r6, r5
 800e050:	dc36      	bgt.n	800e0c0 <__gethex+0x320>
 800e052:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e056:	2b02      	cmp	r3, #2
 800e058:	d02a      	beq.n	800e0b0 <__gethex+0x310>
 800e05a:	2b03      	cmp	r3, #3
 800e05c:	d02c      	beq.n	800e0b8 <__gethex+0x318>
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d11c      	bne.n	800e09c <__gethex+0x2fc>
 800e062:	42ae      	cmp	r6, r5
 800e064:	d11a      	bne.n	800e09c <__gethex+0x2fc>
 800e066:	2e01      	cmp	r6, #1
 800e068:	d112      	bne.n	800e090 <__gethex+0x2f0>
 800e06a:	9a04      	ldr	r2, [sp, #16]
 800e06c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	2301      	movs	r3, #1
 800e074:	6123      	str	r3, [r4, #16]
 800e076:	f8c9 3000 	str.w	r3, [r9]
 800e07a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e07c:	2762      	movs	r7, #98	; 0x62
 800e07e:	601c      	str	r4, [r3, #0]
 800e080:	e723      	b.n	800deca <__gethex+0x12a>
 800e082:	bf00      	nop
 800e084:	08010eec 	.word	0x08010eec
 800e088:	08010e10 	.word	0x08010e10
 800e08c:	08010e84 	.word	0x08010e84
 800e090:	1e71      	subs	r1, r6, #1
 800e092:	4620      	mov	r0, r4
 800e094:	f000 feb2 	bl	800edfc <__any_on>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d1e6      	bne.n	800e06a <__gethex+0x2ca>
 800e09c:	ee18 0a10 	vmov	r0, s16
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	f000 fa4b 	bl	800e53c <_Bfree>
 800e0a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	6013      	str	r3, [r2, #0]
 800e0ac:	2750      	movs	r7, #80	; 0x50
 800e0ae:	e70c      	b.n	800deca <__gethex+0x12a>
 800e0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1f2      	bne.n	800e09c <__gethex+0x2fc>
 800e0b6:	e7d8      	b.n	800e06a <__gethex+0x2ca>
 800e0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1d5      	bne.n	800e06a <__gethex+0x2ca>
 800e0be:	e7ed      	b.n	800e09c <__gethex+0x2fc>
 800e0c0:	1e6f      	subs	r7, r5, #1
 800e0c2:	f1ba 0f00 	cmp.w	sl, #0
 800e0c6:	d131      	bne.n	800e12c <__gethex+0x38c>
 800e0c8:	b127      	cbz	r7, 800e0d4 <__gethex+0x334>
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f000 fe95 	bl	800edfc <__any_on>
 800e0d2:	4682      	mov	sl, r0
 800e0d4:	117b      	asrs	r3, r7, #5
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e0dc:	f007 071f 	and.w	r7, r7, #31
 800e0e0:	fa01 f707 	lsl.w	r7, r1, r7
 800e0e4:	421f      	tst	r7, r3
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	bf18      	it	ne
 800e0ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800e0f0:	1b76      	subs	r6, r6, r5
 800e0f2:	f7ff fdee 	bl	800dcd2 <rshift>
 800e0f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0fa:	2702      	movs	r7, #2
 800e0fc:	f1ba 0f00 	cmp.w	sl, #0
 800e100:	d048      	beq.n	800e194 <__gethex+0x3f4>
 800e102:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e106:	2b02      	cmp	r3, #2
 800e108:	d015      	beq.n	800e136 <__gethex+0x396>
 800e10a:	2b03      	cmp	r3, #3
 800e10c:	d017      	beq.n	800e13e <__gethex+0x39e>
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d109      	bne.n	800e126 <__gethex+0x386>
 800e112:	f01a 0f02 	tst.w	sl, #2
 800e116:	d006      	beq.n	800e126 <__gethex+0x386>
 800e118:	f8d9 0000 	ldr.w	r0, [r9]
 800e11c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e120:	f01a 0f01 	tst.w	sl, #1
 800e124:	d10e      	bne.n	800e144 <__gethex+0x3a4>
 800e126:	f047 0710 	orr.w	r7, r7, #16
 800e12a:	e033      	b.n	800e194 <__gethex+0x3f4>
 800e12c:	f04f 0a01 	mov.w	sl, #1
 800e130:	e7d0      	b.n	800e0d4 <__gethex+0x334>
 800e132:	2701      	movs	r7, #1
 800e134:	e7e2      	b.n	800e0fc <__gethex+0x35c>
 800e136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e138:	f1c3 0301 	rsb	r3, r3, #1
 800e13c:	9315      	str	r3, [sp, #84]	; 0x54
 800e13e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0f0      	beq.n	800e126 <__gethex+0x386>
 800e144:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e148:	f104 0314 	add.w	r3, r4, #20
 800e14c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e150:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e154:	f04f 0c00 	mov.w	ip, #0
 800e158:	4618      	mov	r0, r3
 800e15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e15e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e162:	d01c      	beq.n	800e19e <__gethex+0x3fe>
 800e164:	3201      	adds	r2, #1
 800e166:	6002      	str	r2, [r0, #0]
 800e168:	2f02      	cmp	r7, #2
 800e16a:	f104 0314 	add.w	r3, r4, #20
 800e16e:	d13f      	bne.n	800e1f0 <__gethex+0x450>
 800e170:	f8d8 2000 	ldr.w	r2, [r8]
 800e174:	3a01      	subs	r2, #1
 800e176:	42b2      	cmp	r2, r6
 800e178:	d10a      	bne.n	800e190 <__gethex+0x3f0>
 800e17a:	1171      	asrs	r1, r6, #5
 800e17c:	2201      	movs	r2, #1
 800e17e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e182:	f006 061f 	and.w	r6, r6, #31
 800e186:	fa02 f606 	lsl.w	r6, r2, r6
 800e18a:	421e      	tst	r6, r3
 800e18c:	bf18      	it	ne
 800e18e:	4617      	movne	r7, r2
 800e190:	f047 0720 	orr.w	r7, r7, #32
 800e194:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e196:	601c      	str	r4, [r3, #0]
 800e198:	9b04      	ldr	r3, [sp, #16]
 800e19a:	601d      	str	r5, [r3, #0]
 800e19c:	e695      	b.n	800deca <__gethex+0x12a>
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1a4:	d8d8      	bhi.n	800e158 <__gethex+0x3b8>
 800e1a6:	68a3      	ldr	r3, [r4, #8]
 800e1a8:	459b      	cmp	fp, r3
 800e1aa:	db19      	blt.n	800e1e0 <__gethex+0x440>
 800e1ac:	6861      	ldr	r1, [r4, #4]
 800e1ae:	ee18 0a10 	vmov	r0, s16
 800e1b2:	3101      	adds	r1, #1
 800e1b4:	f000 f982 	bl	800e4bc <_Balloc>
 800e1b8:	4681      	mov	r9, r0
 800e1ba:	b918      	cbnz	r0, 800e1c4 <__gethex+0x424>
 800e1bc:	4b1a      	ldr	r3, [pc, #104]	; (800e228 <__gethex+0x488>)
 800e1be:	4602      	mov	r2, r0
 800e1c0:	2184      	movs	r1, #132	; 0x84
 800e1c2:	e6a8      	b.n	800df16 <__gethex+0x176>
 800e1c4:	6922      	ldr	r2, [r4, #16]
 800e1c6:	3202      	adds	r2, #2
 800e1c8:	f104 010c 	add.w	r1, r4, #12
 800e1cc:	0092      	lsls	r2, r2, #2
 800e1ce:	300c      	adds	r0, #12
 800e1d0:	f7fc fe9c 	bl	800af0c <memcpy>
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	ee18 0a10 	vmov	r0, s16
 800e1da:	f000 f9af 	bl	800e53c <_Bfree>
 800e1de:	464c      	mov	r4, r9
 800e1e0:	6923      	ldr	r3, [r4, #16]
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1e8:	6122      	str	r2, [r4, #16]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	615a      	str	r2, [r3, #20]
 800e1ee:	e7bb      	b.n	800e168 <__gethex+0x3c8>
 800e1f0:	6922      	ldr	r2, [r4, #16]
 800e1f2:	455a      	cmp	r2, fp
 800e1f4:	dd0b      	ble.n	800e20e <__gethex+0x46e>
 800e1f6:	2101      	movs	r1, #1
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f7ff fd6a 	bl	800dcd2 <rshift>
 800e1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e202:	3501      	adds	r5, #1
 800e204:	42ab      	cmp	r3, r5
 800e206:	f6ff aed0 	blt.w	800dfaa <__gethex+0x20a>
 800e20a:	2701      	movs	r7, #1
 800e20c:	e7c0      	b.n	800e190 <__gethex+0x3f0>
 800e20e:	f016 061f 	ands.w	r6, r6, #31
 800e212:	d0fa      	beq.n	800e20a <__gethex+0x46a>
 800e214:	4453      	add	r3, sl
 800e216:	f1c6 0620 	rsb	r6, r6, #32
 800e21a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e21e:	f000 fa3f 	bl	800e6a0 <__hi0bits>
 800e222:	42b0      	cmp	r0, r6
 800e224:	dbe7      	blt.n	800e1f6 <__gethex+0x456>
 800e226:	e7f0      	b.n	800e20a <__gethex+0x46a>
 800e228:	08010e10 	.word	0x08010e10

0800e22c <L_shift>:
 800e22c:	f1c2 0208 	rsb	r2, r2, #8
 800e230:	0092      	lsls	r2, r2, #2
 800e232:	b570      	push	{r4, r5, r6, lr}
 800e234:	f1c2 0620 	rsb	r6, r2, #32
 800e238:	6843      	ldr	r3, [r0, #4]
 800e23a:	6804      	ldr	r4, [r0, #0]
 800e23c:	fa03 f506 	lsl.w	r5, r3, r6
 800e240:	432c      	orrs	r4, r5
 800e242:	40d3      	lsrs	r3, r2
 800e244:	6004      	str	r4, [r0, #0]
 800e246:	f840 3f04 	str.w	r3, [r0, #4]!
 800e24a:	4288      	cmp	r0, r1
 800e24c:	d3f4      	bcc.n	800e238 <L_shift+0xc>
 800e24e:	bd70      	pop	{r4, r5, r6, pc}

0800e250 <__match>:
 800e250:	b530      	push	{r4, r5, lr}
 800e252:	6803      	ldr	r3, [r0, #0]
 800e254:	3301      	adds	r3, #1
 800e256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e25a:	b914      	cbnz	r4, 800e262 <__match+0x12>
 800e25c:	6003      	str	r3, [r0, #0]
 800e25e:	2001      	movs	r0, #1
 800e260:	bd30      	pop	{r4, r5, pc}
 800e262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e266:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e26a:	2d19      	cmp	r5, #25
 800e26c:	bf98      	it	ls
 800e26e:	3220      	addls	r2, #32
 800e270:	42a2      	cmp	r2, r4
 800e272:	d0f0      	beq.n	800e256 <__match+0x6>
 800e274:	2000      	movs	r0, #0
 800e276:	e7f3      	b.n	800e260 <__match+0x10>

0800e278 <__hexnan>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	680b      	ldr	r3, [r1, #0]
 800e27e:	115e      	asrs	r6, r3, #5
 800e280:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e284:	f013 031f 	ands.w	r3, r3, #31
 800e288:	b087      	sub	sp, #28
 800e28a:	bf18      	it	ne
 800e28c:	3604      	addne	r6, #4
 800e28e:	2500      	movs	r5, #0
 800e290:	1f37      	subs	r7, r6, #4
 800e292:	4690      	mov	r8, r2
 800e294:	6802      	ldr	r2, [r0, #0]
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	4682      	mov	sl, r0
 800e29a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e29e:	46b9      	mov	r9, r7
 800e2a0:	463c      	mov	r4, r7
 800e2a2:	9502      	str	r5, [sp, #8]
 800e2a4:	46ab      	mov	fp, r5
 800e2a6:	7851      	ldrb	r1, [r2, #1]
 800e2a8:	1c53      	adds	r3, r2, #1
 800e2aa:	9303      	str	r3, [sp, #12]
 800e2ac:	b341      	cbz	r1, 800e300 <__hexnan+0x88>
 800e2ae:	4608      	mov	r0, r1
 800e2b0:	9205      	str	r2, [sp, #20]
 800e2b2:	9104      	str	r1, [sp, #16]
 800e2b4:	f7ff fd5f 	bl	800dd76 <__hexdig_fun>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d14f      	bne.n	800e35c <__hexnan+0xe4>
 800e2bc:	9904      	ldr	r1, [sp, #16]
 800e2be:	9a05      	ldr	r2, [sp, #20]
 800e2c0:	2920      	cmp	r1, #32
 800e2c2:	d818      	bhi.n	800e2f6 <__hexnan+0x7e>
 800e2c4:	9b02      	ldr	r3, [sp, #8]
 800e2c6:	459b      	cmp	fp, r3
 800e2c8:	dd13      	ble.n	800e2f2 <__hexnan+0x7a>
 800e2ca:	454c      	cmp	r4, r9
 800e2cc:	d206      	bcs.n	800e2dc <__hexnan+0x64>
 800e2ce:	2d07      	cmp	r5, #7
 800e2d0:	dc04      	bgt.n	800e2dc <__hexnan+0x64>
 800e2d2:	462a      	mov	r2, r5
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7ff ffa8 	bl	800e22c <L_shift>
 800e2dc:	4544      	cmp	r4, r8
 800e2de:	d950      	bls.n	800e382 <__hexnan+0x10a>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f1a4 0904 	sub.w	r9, r4, #4
 800e2e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2ea:	f8cd b008 	str.w	fp, [sp, #8]
 800e2ee:	464c      	mov	r4, r9
 800e2f0:	461d      	mov	r5, r3
 800e2f2:	9a03      	ldr	r2, [sp, #12]
 800e2f4:	e7d7      	b.n	800e2a6 <__hexnan+0x2e>
 800e2f6:	2929      	cmp	r1, #41	; 0x29
 800e2f8:	d156      	bne.n	800e3a8 <__hexnan+0x130>
 800e2fa:	3202      	adds	r2, #2
 800e2fc:	f8ca 2000 	str.w	r2, [sl]
 800e300:	f1bb 0f00 	cmp.w	fp, #0
 800e304:	d050      	beq.n	800e3a8 <__hexnan+0x130>
 800e306:	454c      	cmp	r4, r9
 800e308:	d206      	bcs.n	800e318 <__hexnan+0xa0>
 800e30a:	2d07      	cmp	r5, #7
 800e30c:	dc04      	bgt.n	800e318 <__hexnan+0xa0>
 800e30e:	462a      	mov	r2, r5
 800e310:	4649      	mov	r1, r9
 800e312:	4620      	mov	r0, r4
 800e314:	f7ff ff8a 	bl	800e22c <L_shift>
 800e318:	4544      	cmp	r4, r8
 800e31a:	d934      	bls.n	800e386 <__hexnan+0x10e>
 800e31c:	f1a8 0204 	sub.w	r2, r8, #4
 800e320:	4623      	mov	r3, r4
 800e322:	f853 1b04 	ldr.w	r1, [r3], #4
 800e326:	f842 1f04 	str.w	r1, [r2, #4]!
 800e32a:	429f      	cmp	r7, r3
 800e32c:	d2f9      	bcs.n	800e322 <__hexnan+0xaa>
 800e32e:	1b3b      	subs	r3, r7, r4
 800e330:	f023 0303 	bic.w	r3, r3, #3
 800e334:	3304      	adds	r3, #4
 800e336:	3401      	adds	r4, #1
 800e338:	3e03      	subs	r6, #3
 800e33a:	42b4      	cmp	r4, r6
 800e33c:	bf88      	it	hi
 800e33e:	2304      	movhi	r3, #4
 800e340:	4443      	add	r3, r8
 800e342:	2200      	movs	r2, #0
 800e344:	f843 2b04 	str.w	r2, [r3], #4
 800e348:	429f      	cmp	r7, r3
 800e34a:	d2fb      	bcs.n	800e344 <__hexnan+0xcc>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	b91b      	cbnz	r3, 800e358 <__hexnan+0xe0>
 800e350:	4547      	cmp	r7, r8
 800e352:	d127      	bne.n	800e3a4 <__hexnan+0x12c>
 800e354:	2301      	movs	r3, #1
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	2005      	movs	r0, #5
 800e35a:	e026      	b.n	800e3aa <__hexnan+0x132>
 800e35c:	3501      	adds	r5, #1
 800e35e:	2d08      	cmp	r5, #8
 800e360:	f10b 0b01 	add.w	fp, fp, #1
 800e364:	dd06      	ble.n	800e374 <__hexnan+0xfc>
 800e366:	4544      	cmp	r4, r8
 800e368:	d9c3      	bls.n	800e2f2 <__hexnan+0x7a>
 800e36a:	2300      	movs	r3, #0
 800e36c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e370:	2501      	movs	r5, #1
 800e372:	3c04      	subs	r4, #4
 800e374:	6822      	ldr	r2, [r4, #0]
 800e376:	f000 000f 	and.w	r0, r0, #15
 800e37a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e37e:	6022      	str	r2, [r4, #0]
 800e380:	e7b7      	b.n	800e2f2 <__hexnan+0x7a>
 800e382:	2508      	movs	r5, #8
 800e384:	e7b5      	b.n	800e2f2 <__hexnan+0x7a>
 800e386:	9b01      	ldr	r3, [sp, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d0df      	beq.n	800e34c <__hexnan+0xd4>
 800e38c:	f04f 32ff 	mov.w	r2, #4294967295
 800e390:	f1c3 0320 	rsb	r3, r3, #32
 800e394:	fa22 f303 	lsr.w	r3, r2, r3
 800e398:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e39c:	401a      	ands	r2, r3
 800e39e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e3a2:	e7d3      	b.n	800e34c <__hexnan+0xd4>
 800e3a4:	3f04      	subs	r7, #4
 800e3a6:	e7d1      	b.n	800e34c <__hexnan+0xd4>
 800e3a8:	2004      	movs	r0, #4
 800e3aa:	b007      	add	sp, #28
 800e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3b0 <_localeconv_r>:
 800e3b0:	4800      	ldr	r0, [pc, #0]	; (800e3b4 <_localeconv_r+0x4>)
 800e3b2:	4770      	bx	lr
 800e3b4:	20000164 	.word	0x20000164

0800e3b8 <__retarget_lock_init_recursive>:
 800e3b8:	4770      	bx	lr

0800e3ba <__retarget_lock_acquire_recursive>:
 800e3ba:	4770      	bx	lr

0800e3bc <__retarget_lock_release_recursive>:
 800e3bc:	4770      	bx	lr

0800e3be <__swhatbuf_r>:
 800e3be:	b570      	push	{r4, r5, r6, lr}
 800e3c0:	460e      	mov	r6, r1
 800e3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c6:	2900      	cmp	r1, #0
 800e3c8:	b096      	sub	sp, #88	; 0x58
 800e3ca:	4614      	mov	r4, r2
 800e3cc:	461d      	mov	r5, r3
 800e3ce:	da08      	bge.n	800e3e2 <__swhatbuf_r+0x24>
 800e3d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	602a      	str	r2, [r5, #0]
 800e3d8:	061a      	lsls	r2, r3, #24
 800e3da:	d410      	bmi.n	800e3fe <__swhatbuf_r+0x40>
 800e3dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3e0:	e00e      	b.n	800e400 <__swhatbuf_r+0x42>
 800e3e2:	466a      	mov	r2, sp
 800e3e4:	f001 f9a6 	bl	800f734 <_fstat_r>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	dbf1      	blt.n	800e3d0 <__swhatbuf_r+0x12>
 800e3ec:	9a01      	ldr	r2, [sp, #4]
 800e3ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3f6:	425a      	negs	r2, r3
 800e3f8:	415a      	adcs	r2, r3
 800e3fa:	602a      	str	r2, [r5, #0]
 800e3fc:	e7ee      	b.n	800e3dc <__swhatbuf_r+0x1e>
 800e3fe:	2340      	movs	r3, #64	; 0x40
 800e400:	2000      	movs	r0, #0
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	b016      	add	sp, #88	; 0x58
 800e406:	bd70      	pop	{r4, r5, r6, pc}

0800e408 <__smakebuf_r>:
 800e408:	898b      	ldrh	r3, [r1, #12]
 800e40a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e40c:	079d      	lsls	r5, r3, #30
 800e40e:	4606      	mov	r6, r0
 800e410:	460c      	mov	r4, r1
 800e412:	d507      	bpl.n	800e424 <__smakebuf_r+0x1c>
 800e414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e418:	6023      	str	r3, [r4, #0]
 800e41a:	6123      	str	r3, [r4, #16]
 800e41c:	2301      	movs	r3, #1
 800e41e:	6163      	str	r3, [r4, #20]
 800e420:	b002      	add	sp, #8
 800e422:	bd70      	pop	{r4, r5, r6, pc}
 800e424:	ab01      	add	r3, sp, #4
 800e426:	466a      	mov	r2, sp
 800e428:	f7ff ffc9 	bl	800e3be <__swhatbuf_r>
 800e42c:	9900      	ldr	r1, [sp, #0]
 800e42e:	4605      	mov	r5, r0
 800e430:	4630      	mov	r0, r6
 800e432:	f000 fd87 	bl	800ef44 <_malloc_r>
 800e436:	b948      	cbnz	r0, 800e44c <__smakebuf_r+0x44>
 800e438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e43c:	059a      	lsls	r2, r3, #22
 800e43e:	d4ef      	bmi.n	800e420 <__smakebuf_r+0x18>
 800e440:	f023 0303 	bic.w	r3, r3, #3
 800e444:	f043 0302 	orr.w	r3, r3, #2
 800e448:	81a3      	strh	r3, [r4, #12]
 800e44a:	e7e3      	b.n	800e414 <__smakebuf_r+0xc>
 800e44c:	4b0d      	ldr	r3, [pc, #52]	; (800e484 <__smakebuf_r+0x7c>)
 800e44e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e450:	89a3      	ldrh	r3, [r4, #12]
 800e452:	6020      	str	r0, [r4, #0]
 800e454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e458:	81a3      	strh	r3, [r4, #12]
 800e45a:	9b00      	ldr	r3, [sp, #0]
 800e45c:	6163      	str	r3, [r4, #20]
 800e45e:	9b01      	ldr	r3, [sp, #4]
 800e460:	6120      	str	r0, [r4, #16]
 800e462:	b15b      	cbz	r3, 800e47c <__smakebuf_r+0x74>
 800e464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e468:	4630      	mov	r0, r6
 800e46a:	f001 f975 	bl	800f758 <_isatty_r>
 800e46e:	b128      	cbz	r0, 800e47c <__smakebuf_r+0x74>
 800e470:	89a3      	ldrh	r3, [r4, #12]
 800e472:	f023 0303 	bic.w	r3, r3, #3
 800e476:	f043 0301 	orr.w	r3, r3, #1
 800e47a:	81a3      	strh	r3, [r4, #12]
 800e47c:	89a0      	ldrh	r0, [r4, #12]
 800e47e:	4305      	orrs	r5, r0
 800e480:	81a5      	strh	r5, [r4, #12]
 800e482:	e7cd      	b.n	800e420 <__smakebuf_r+0x18>
 800e484:	0800db31 	.word	0x0800db31

0800e488 <malloc>:
 800e488:	4b02      	ldr	r3, [pc, #8]	; (800e494 <malloc+0xc>)
 800e48a:	4601      	mov	r1, r0
 800e48c:	6818      	ldr	r0, [r3, #0]
 800e48e:	f000 bd59 	b.w	800ef44 <_malloc_r>
 800e492:	bf00      	nop
 800e494:	2000000c 	.word	0x2000000c

0800e498 <__ascii_mbtowc>:
 800e498:	b082      	sub	sp, #8
 800e49a:	b901      	cbnz	r1, 800e49e <__ascii_mbtowc+0x6>
 800e49c:	a901      	add	r1, sp, #4
 800e49e:	b142      	cbz	r2, 800e4b2 <__ascii_mbtowc+0x1a>
 800e4a0:	b14b      	cbz	r3, 800e4b6 <__ascii_mbtowc+0x1e>
 800e4a2:	7813      	ldrb	r3, [r2, #0]
 800e4a4:	600b      	str	r3, [r1, #0]
 800e4a6:	7812      	ldrb	r2, [r2, #0]
 800e4a8:	1e10      	subs	r0, r2, #0
 800e4aa:	bf18      	it	ne
 800e4ac:	2001      	movne	r0, #1
 800e4ae:	b002      	add	sp, #8
 800e4b0:	4770      	bx	lr
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	e7fb      	b.n	800e4ae <__ascii_mbtowc+0x16>
 800e4b6:	f06f 0001 	mvn.w	r0, #1
 800e4ba:	e7f8      	b.n	800e4ae <__ascii_mbtowc+0x16>

0800e4bc <_Balloc>:
 800e4bc:	b570      	push	{r4, r5, r6, lr}
 800e4be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	b976      	cbnz	r6, 800e4e4 <_Balloc+0x28>
 800e4c6:	2010      	movs	r0, #16
 800e4c8:	f7ff ffde 	bl	800e488 <malloc>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	6260      	str	r0, [r4, #36]	; 0x24
 800e4d0:	b920      	cbnz	r0, 800e4dc <_Balloc+0x20>
 800e4d2:	4b18      	ldr	r3, [pc, #96]	; (800e534 <_Balloc+0x78>)
 800e4d4:	4818      	ldr	r0, [pc, #96]	; (800e538 <_Balloc+0x7c>)
 800e4d6:	2166      	movs	r1, #102	; 0x66
 800e4d8:	f001 f8ec 	bl	800f6b4 <__assert_func>
 800e4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4e0:	6006      	str	r6, [r0, #0]
 800e4e2:	60c6      	str	r6, [r0, #12]
 800e4e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e4e6:	68f3      	ldr	r3, [r6, #12]
 800e4e8:	b183      	cbz	r3, 800e50c <_Balloc+0x50>
 800e4ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4f2:	b9b8      	cbnz	r0, 800e524 <_Balloc+0x68>
 800e4f4:	2101      	movs	r1, #1
 800e4f6:	fa01 f605 	lsl.w	r6, r1, r5
 800e4fa:	1d72      	adds	r2, r6, #5
 800e4fc:	0092      	lsls	r2, r2, #2
 800e4fe:	4620      	mov	r0, r4
 800e500:	f000 fc9d 	bl	800ee3e <_calloc_r>
 800e504:	b160      	cbz	r0, 800e520 <_Balloc+0x64>
 800e506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e50a:	e00e      	b.n	800e52a <_Balloc+0x6e>
 800e50c:	2221      	movs	r2, #33	; 0x21
 800e50e:	2104      	movs	r1, #4
 800e510:	4620      	mov	r0, r4
 800e512:	f000 fc94 	bl	800ee3e <_calloc_r>
 800e516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e518:	60f0      	str	r0, [r6, #12]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1e4      	bne.n	800e4ea <_Balloc+0x2e>
 800e520:	2000      	movs	r0, #0
 800e522:	bd70      	pop	{r4, r5, r6, pc}
 800e524:	6802      	ldr	r2, [r0, #0]
 800e526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e52a:	2300      	movs	r3, #0
 800e52c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e530:	e7f7      	b.n	800e522 <_Balloc+0x66>
 800e532:	bf00      	nop
 800e534:	08010d9e 	.word	0x08010d9e
 800e538:	08010f00 	.word	0x08010f00

0800e53c <_Bfree>:
 800e53c:	b570      	push	{r4, r5, r6, lr}
 800e53e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e540:	4605      	mov	r5, r0
 800e542:	460c      	mov	r4, r1
 800e544:	b976      	cbnz	r6, 800e564 <_Bfree+0x28>
 800e546:	2010      	movs	r0, #16
 800e548:	f7ff ff9e 	bl	800e488 <malloc>
 800e54c:	4602      	mov	r2, r0
 800e54e:	6268      	str	r0, [r5, #36]	; 0x24
 800e550:	b920      	cbnz	r0, 800e55c <_Bfree+0x20>
 800e552:	4b09      	ldr	r3, [pc, #36]	; (800e578 <_Bfree+0x3c>)
 800e554:	4809      	ldr	r0, [pc, #36]	; (800e57c <_Bfree+0x40>)
 800e556:	218a      	movs	r1, #138	; 0x8a
 800e558:	f001 f8ac 	bl	800f6b4 <__assert_func>
 800e55c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e560:	6006      	str	r6, [r0, #0]
 800e562:	60c6      	str	r6, [r0, #12]
 800e564:	b13c      	cbz	r4, 800e576 <_Bfree+0x3a>
 800e566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e568:	6862      	ldr	r2, [r4, #4]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e570:	6021      	str	r1, [r4, #0]
 800e572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e576:	bd70      	pop	{r4, r5, r6, pc}
 800e578:	08010d9e 	.word	0x08010d9e
 800e57c:	08010f00 	.word	0x08010f00

0800e580 <__multadd>:
 800e580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e584:	690d      	ldr	r5, [r1, #16]
 800e586:	4607      	mov	r7, r0
 800e588:	460c      	mov	r4, r1
 800e58a:	461e      	mov	r6, r3
 800e58c:	f101 0c14 	add.w	ip, r1, #20
 800e590:	2000      	movs	r0, #0
 800e592:	f8dc 3000 	ldr.w	r3, [ip]
 800e596:	b299      	uxth	r1, r3
 800e598:	fb02 6101 	mla	r1, r2, r1, r6
 800e59c:	0c1e      	lsrs	r6, r3, #16
 800e59e:	0c0b      	lsrs	r3, r1, #16
 800e5a0:	fb02 3306 	mla	r3, r2, r6, r3
 800e5a4:	b289      	uxth	r1, r1
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5ac:	4285      	cmp	r5, r0
 800e5ae:	f84c 1b04 	str.w	r1, [ip], #4
 800e5b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5b6:	dcec      	bgt.n	800e592 <__multadd+0x12>
 800e5b8:	b30e      	cbz	r6, 800e5fe <__multadd+0x7e>
 800e5ba:	68a3      	ldr	r3, [r4, #8]
 800e5bc:	42ab      	cmp	r3, r5
 800e5be:	dc19      	bgt.n	800e5f4 <__multadd+0x74>
 800e5c0:	6861      	ldr	r1, [r4, #4]
 800e5c2:	4638      	mov	r0, r7
 800e5c4:	3101      	adds	r1, #1
 800e5c6:	f7ff ff79 	bl	800e4bc <_Balloc>
 800e5ca:	4680      	mov	r8, r0
 800e5cc:	b928      	cbnz	r0, 800e5da <__multadd+0x5a>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	4b0c      	ldr	r3, [pc, #48]	; (800e604 <__multadd+0x84>)
 800e5d2:	480d      	ldr	r0, [pc, #52]	; (800e608 <__multadd+0x88>)
 800e5d4:	21b5      	movs	r1, #181	; 0xb5
 800e5d6:	f001 f86d 	bl	800f6b4 <__assert_func>
 800e5da:	6922      	ldr	r2, [r4, #16]
 800e5dc:	3202      	adds	r2, #2
 800e5de:	f104 010c 	add.w	r1, r4, #12
 800e5e2:	0092      	lsls	r2, r2, #2
 800e5e4:	300c      	adds	r0, #12
 800e5e6:	f7fc fc91 	bl	800af0c <memcpy>
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f7ff ffa5 	bl	800e53c <_Bfree>
 800e5f2:	4644      	mov	r4, r8
 800e5f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5f8:	3501      	adds	r5, #1
 800e5fa:	615e      	str	r6, [r3, #20]
 800e5fc:	6125      	str	r5, [r4, #16]
 800e5fe:	4620      	mov	r0, r4
 800e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e604:	08010e10 	.word	0x08010e10
 800e608:	08010f00 	.word	0x08010f00

0800e60c <__s2b>:
 800e60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e610:	460c      	mov	r4, r1
 800e612:	4615      	mov	r5, r2
 800e614:	461f      	mov	r7, r3
 800e616:	2209      	movs	r2, #9
 800e618:	3308      	adds	r3, #8
 800e61a:	4606      	mov	r6, r0
 800e61c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e620:	2100      	movs	r1, #0
 800e622:	2201      	movs	r2, #1
 800e624:	429a      	cmp	r2, r3
 800e626:	db09      	blt.n	800e63c <__s2b+0x30>
 800e628:	4630      	mov	r0, r6
 800e62a:	f7ff ff47 	bl	800e4bc <_Balloc>
 800e62e:	b940      	cbnz	r0, 800e642 <__s2b+0x36>
 800e630:	4602      	mov	r2, r0
 800e632:	4b19      	ldr	r3, [pc, #100]	; (800e698 <__s2b+0x8c>)
 800e634:	4819      	ldr	r0, [pc, #100]	; (800e69c <__s2b+0x90>)
 800e636:	21ce      	movs	r1, #206	; 0xce
 800e638:	f001 f83c 	bl	800f6b4 <__assert_func>
 800e63c:	0052      	lsls	r2, r2, #1
 800e63e:	3101      	adds	r1, #1
 800e640:	e7f0      	b.n	800e624 <__s2b+0x18>
 800e642:	9b08      	ldr	r3, [sp, #32]
 800e644:	6143      	str	r3, [r0, #20]
 800e646:	2d09      	cmp	r5, #9
 800e648:	f04f 0301 	mov.w	r3, #1
 800e64c:	6103      	str	r3, [r0, #16]
 800e64e:	dd16      	ble.n	800e67e <__s2b+0x72>
 800e650:	f104 0909 	add.w	r9, r4, #9
 800e654:	46c8      	mov	r8, r9
 800e656:	442c      	add	r4, r5
 800e658:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e65c:	4601      	mov	r1, r0
 800e65e:	3b30      	subs	r3, #48	; 0x30
 800e660:	220a      	movs	r2, #10
 800e662:	4630      	mov	r0, r6
 800e664:	f7ff ff8c 	bl	800e580 <__multadd>
 800e668:	45a0      	cmp	r8, r4
 800e66a:	d1f5      	bne.n	800e658 <__s2b+0x4c>
 800e66c:	f1a5 0408 	sub.w	r4, r5, #8
 800e670:	444c      	add	r4, r9
 800e672:	1b2d      	subs	r5, r5, r4
 800e674:	1963      	adds	r3, r4, r5
 800e676:	42bb      	cmp	r3, r7
 800e678:	db04      	blt.n	800e684 <__s2b+0x78>
 800e67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e67e:	340a      	adds	r4, #10
 800e680:	2509      	movs	r5, #9
 800e682:	e7f6      	b.n	800e672 <__s2b+0x66>
 800e684:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e688:	4601      	mov	r1, r0
 800e68a:	3b30      	subs	r3, #48	; 0x30
 800e68c:	220a      	movs	r2, #10
 800e68e:	4630      	mov	r0, r6
 800e690:	f7ff ff76 	bl	800e580 <__multadd>
 800e694:	e7ee      	b.n	800e674 <__s2b+0x68>
 800e696:	bf00      	nop
 800e698:	08010e10 	.word	0x08010e10
 800e69c:	08010f00 	.word	0x08010f00

0800e6a0 <__hi0bits>:
 800e6a0:	0c03      	lsrs	r3, r0, #16
 800e6a2:	041b      	lsls	r3, r3, #16
 800e6a4:	b9d3      	cbnz	r3, 800e6dc <__hi0bits+0x3c>
 800e6a6:	0400      	lsls	r0, r0, #16
 800e6a8:	2310      	movs	r3, #16
 800e6aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e6ae:	bf04      	itt	eq
 800e6b0:	0200      	lsleq	r0, r0, #8
 800e6b2:	3308      	addeq	r3, #8
 800e6b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e6b8:	bf04      	itt	eq
 800e6ba:	0100      	lsleq	r0, r0, #4
 800e6bc:	3304      	addeq	r3, #4
 800e6be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e6c2:	bf04      	itt	eq
 800e6c4:	0080      	lsleq	r0, r0, #2
 800e6c6:	3302      	addeq	r3, #2
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	db05      	blt.n	800e6d8 <__hi0bits+0x38>
 800e6cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e6d0:	f103 0301 	add.w	r3, r3, #1
 800e6d4:	bf08      	it	eq
 800e6d6:	2320      	moveq	r3, #32
 800e6d8:	4618      	mov	r0, r3
 800e6da:	4770      	bx	lr
 800e6dc:	2300      	movs	r3, #0
 800e6de:	e7e4      	b.n	800e6aa <__hi0bits+0xa>

0800e6e0 <__lo0bits>:
 800e6e0:	6803      	ldr	r3, [r0, #0]
 800e6e2:	f013 0207 	ands.w	r2, r3, #7
 800e6e6:	4601      	mov	r1, r0
 800e6e8:	d00b      	beq.n	800e702 <__lo0bits+0x22>
 800e6ea:	07da      	lsls	r2, r3, #31
 800e6ec:	d423      	bmi.n	800e736 <__lo0bits+0x56>
 800e6ee:	0798      	lsls	r0, r3, #30
 800e6f0:	bf49      	itett	mi
 800e6f2:	085b      	lsrmi	r3, r3, #1
 800e6f4:	089b      	lsrpl	r3, r3, #2
 800e6f6:	2001      	movmi	r0, #1
 800e6f8:	600b      	strmi	r3, [r1, #0]
 800e6fa:	bf5c      	itt	pl
 800e6fc:	600b      	strpl	r3, [r1, #0]
 800e6fe:	2002      	movpl	r0, #2
 800e700:	4770      	bx	lr
 800e702:	b298      	uxth	r0, r3
 800e704:	b9a8      	cbnz	r0, 800e732 <__lo0bits+0x52>
 800e706:	0c1b      	lsrs	r3, r3, #16
 800e708:	2010      	movs	r0, #16
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	b90a      	cbnz	r2, 800e712 <__lo0bits+0x32>
 800e70e:	3008      	adds	r0, #8
 800e710:	0a1b      	lsrs	r3, r3, #8
 800e712:	071a      	lsls	r2, r3, #28
 800e714:	bf04      	itt	eq
 800e716:	091b      	lsreq	r3, r3, #4
 800e718:	3004      	addeq	r0, #4
 800e71a:	079a      	lsls	r2, r3, #30
 800e71c:	bf04      	itt	eq
 800e71e:	089b      	lsreq	r3, r3, #2
 800e720:	3002      	addeq	r0, #2
 800e722:	07da      	lsls	r2, r3, #31
 800e724:	d403      	bmi.n	800e72e <__lo0bits+0x4e>
 800e726:	085b      	lsrs	r3, r3, #1
 800e728:	f100 0001 	add.w	r0, r0, #1
 800e72c:	d005      	beq.n	800e73a <__lo0bits+0x5a>
 800e72e:	600b      	str	r3, [r1, #0]
 800e730:	4770      	bx	lr
 800e732:	4610      	mov	r0, r2
 800e734:	e7e9      	b.n	800e70a <__lo0bits+0x2a>
 800e736:	2000      	movs	r0, #0
 800e738:	4770      	bx	lr
 800e73a:	2020      	movs	r0, #32
 800e73c:	4770      	bx	lr
	...

0800e740 <__i2b>:
 800e740:	b510      	push	{r4, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	2101      	movs	r1, #1
 800e746:	f7ff feb9 	bl	800e4bc <_Balloc>
 800e74a:	4602      	mov	r2, r0
 800e74c:	b928      	cbnz	r0, 800e75a <__i2b+0x1a>
 800e74e:	4b05      	ldr	r3, [pc, #20]	; (800e764 <__i2b+0x24>)
 800e750:	4805      	ldr	r0, [pc, #20]	; (800e768 <__i2b+0x28>)
 800e752:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e756:	f000 ffad 	bl	800f6b4 <__assert_func>
 800e75a:	2301      	movs	r3, #1
 800e75c:	6144      	str	r4, [r0, #20]
 800e75e:	6103      	str	r3, [r0, #16]
 800e760:	bd10      	pop	{r4, pc}
 800e762:	bf00      	nop
 800e764:	08010e10 	.word	0x08010e10
 800e768:	08010f00 	.word	0x08010f00

0800e76c <__multiply>:
 800e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e770:	4691      	mov	r9, r2
 800e772:	690a      	ldr	r2, [r1, #16]
 800e774:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e778:	429a      	cmp	r2, r3
 800e77a:	bfb8      	it	lt
 800e77c:	460b      	movlt	r3, r1
 800e77e:	460c      	mov	r4, r1
 800e780:	bfbc      	itt	lt
 800e782:	464c      	movlt	r4, r9
 800e784:	4699      	movlt	r9, r3
 800e786:	6927      	ldr	r7, [r4, #16]
 800e788:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e78c:	68a3      	ldr	r3, [r4, #8]
 800e78e:	6861      	ldr	r1, [r4, #4]
 800e790:	eb07 060a 	add.w	r6, r7, sl
 800e794:	42b3      	cmp	r3, r6
 800e796:	b085      	sub	sp, #20
 800e798:	bfb8      	it	lt
 800e79a:	3101      	addlt	r1, #1
 800e79c:	f7ff fe8e 	bl	800e4bc <_Balloc>
 800e7a0:	b930      	cbnz	r0, 800e7b0 <__multiply+0x44>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	4b44      	ldr	r3, [pc, #272]	; (800e8b8 <__multiply+0x14c>)
 800e7a6:	4845      	ldr	r0, [pc, #276]	; (800e8bc <__multiply+0x150>)
 800e7a8:	f240 115d 	movw	r1, #349	; 0x15d
 800e7ac:	f000 ff82 	bl	800f6b4 <__assert_func>
 800e7b0:	f100 0514 	add.w	r5, r0, #20
 800e7b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e7b8:	462b      	mov	r3, r5
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	4543      	cmp	r3, r8
 800e7be:	d321      	bcc.n	800e804 <__multiply+0x98>
 800e7c0:	f104 0314 	add.w	r3, r4, #20
 800e7c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e7c8:	f109 0314 	add.w	r3, r9, #20
 800e7cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e7d0:	9202      	str	r2, [sp, #8]
 800e7d2:	1b3a      	subs	r2, r7, r4
 800e7d4:	3a15      	subs	r2, #21
 800e7d6:	f022 0203 	bic.w	r2, r2, #3
 800e7da:	3204      	adds	r2, #4
 800e7dc:	f104 0115 	add.w	r1, r4, #21
 800e7e0:	428f      	cmp	r7, r1
 800e7e2:	bf38      	it	cc
 800e7e4:	2204      	movcc	r2, #4
 800e7e6:	9201      	str	r2, [sp, #4]
 800e7e8:	9a02      	ldr	r2, [sp, #8]
 800e7ea:	9303      	str	r3, [sp, #12]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d80c      	bhi.n	800e80a <__multiply+0x9e>
 800e7f0:	2e00      	cmp	r6, #0
 800e7f2:	dd03      	ble.n	800e7fc <__multiply+0x90>
 800e7f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d05a      	beq.n	800e8b2 <__multiply+0x146>
 800e7fc:	6106      	str	r6, [r0, #16]
 800e7fe:	b005      	add	sp, #20
 800e800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e804:	f843 2b04 	str.w	r2, [r3], #4
 800e808:	e7d8      	b.n	800e7bc <__multiply+0x50>
 800e80a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e80e:	f1ba 0f00 	cmp.w	sl, #0
 800e812:	d024      	beq.n	800e85e <__multiply+0xf2>
 800e814:	f104 0e14 	add.w	lr, r4, #20
 800e818:	46a9      	mov	r9, r5
 800e81a:	f04f 0c00 	mov.w	ip, #0
 800e81e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e822:	f8d9 1000 	ldr.w	r1, [r9]
 800e826:	fa1f fb82 	uxth.w	fp, r2
 800e82a:	b289      	uxth	r1, r1
 800e82c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e830:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e834:	f8d9 2000 	ldr.w	r2, [r9]
 800e838:	4461      	add	r1, ip
 800e83a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e83e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e842:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e846:	b289      	uxth	r1, r1
 800e848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e84c:	4577      	cmp	r7, lr
 800e84e:	f849 1b04 	str.w	r1, [r9], #4
 800e852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e856:	d8e2      	bhi.n	800e81e <__multiply+0xb2>
 800e858:	9a01      	ldr	r2, [sp, #4]
 800e85a:	f845 c002 	str.w	ip, [r5, r2]
 800e85e:	9a03      	ldr	r2, [sp, #12]
 800e860:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e864:	3304      	adds	r3, #4
 800e866:	f1b9 0f00 	cmp.w	r9, #0
 800e86a:	d020      	beq.n	800e8ae <__multiply+0x142>
 800e86c:	6829      	ldr	r1, [r5, #0]
 800e86e:	f104 0c14 	add.w	ip, r4, #20
 800e872:	46ae      	mov	lr, r5
 800e874:	f04f 0a00 	mov.w	sl, #0
 800e878:	f8bc b000 	ldrh.w	fp, [ip]
 800e87c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e880:	fb09 220b 	mla	r2, r9, fp, r2
 800e884:	4492      	add	sl, r2
 800e886:	b289      	uxth	r1, r1
 800e888:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e88c:	f84e 1b04 	str.w	r1, [lr], #4
 800e890:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e894:	f8be 1000 	ldrh.w	r1, [lr]
 800e898:	0c12      	lsrs	r2, r2, #16
 800e89a:	fb09 1102 	mla	r1, r9, r2, r1
 800e89e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e8a2:	4567      	cmp	r7, ip
 800e8a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e8a8:	d8e6      	bhi.n	800e878 <__multiply+0x10c>
 800e8aa:	9a01      	ldr	r2, [sp, #4]
 800e8ac:	50a9      	str	r1, [r5, r2]
 800e8ae:	3504      	adds	r5, #4
 800e8b0:	e79a      	b.n	800e7e8 <__multiply+0x7c>
 800e8b2:	3e01      	subs	r6, #1
 800e8b4:	e79c      	b.n	800e7f0 <__multiply+0x84>
 800e8b6:	bf00      	nop
 800e8b8:	08010e10 	.word	0x08010e10
 800e8bc:	08010f00 	.word	0x08010f00

0800e8c0 <__pow5mult>:
 800e8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8c4:	4615      	mov	r5, r2
 800e8c6:	f012 0203 	ands.w	r2, r2, #3
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	460f      	mov	r7, r1
 800e8ce:	d007      	beq.n	800e8e0 <__pow5mult+0x20>
 800e8d0:	4c25      	ldr	r4, [pc, #148]	; (800e968 <__pow5mult+0xa8>)
 800e8d2:	3a01      	subs	r2, #1
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8da:	f7ff fe51 	bl	800e580 <__multadd>
 800e8de:	4607      	mov	r7, r0
 800e8e0:	10ad      	asrs	r5, r5, #2
 800e8e2:	d03d      	beq.n	800e960 <__pow5mult+0xa0>
 800e8e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e8e6:	b97c      	cbnz	r4, 800e908 <__pow5mult+0x48>
 800e8e8:	2010      	movs	r0, #16
 800e8ea:	f7ff fdcd 	bl	800e488 <malloc>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	6270      	str	r0, [r6, #36]	; 0x24
 800e8f2:	b928      	cbnz	r0, 800e900 <__pow5mult+0x40>
 800e8f4:	4b1d      	ldr	r3, [pc, #116]	; (800e96c <__pow5mult+0xac>)
 800e8f6:	481e      	ldr	r0, [pc, #120]	; (800e970 <__pow5mult+0xb0>)
 800e8f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e8fc:	f000 feda 	bl	800f6b4 <__assert_func>
 800e900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e904:	6004      	str	r4, [r0, #0]
 800e906:	60c4      	str	r4, [r0, #12]
 800e908:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e90c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e910:	b94c      	cbnz	r4, 800e926 <__pow5mult+0x66>
 800e912:	f240 2171 	movw	r1, #625	; 0x271
 800e916:	4630      	mov	r0, r6
 800e918:	f7ff ff12 	bl	800e740 <__i2b>
 800e91c:	2300      	movs	r3, #0
 800e91e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e922:	4604      	mov	r4, r0
 800e924:	6003      	str	r3, [r0, #0]
 800e926:	f04f 0900 	mov.w	r9, #0
 800e92a:	07eb      	lsls	r3, r5, #31
 800e92c:	d50a      	bpl.n	800e944 <__pow5mult+0x84>
 800e92e:	4639      	mov	r1, r7
 800e930:	4622      	mov	r2, r4
 800e932:	4630      	mov	r0, r6
 800e934:	f7ff ff1a 	bl	800e76c <__multiply>
 800e938:	4639      	mov	r1, r7
 800e93a:	4680      	mov	r8, r0
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7ff fdfd 	bl	800e53c <_Bfree>
 800e942:	4647      	mov	r7, r8
 800e944:	106d      	asrs	r5, r5, #1
 800e946:	d00b      	beq.n	800e960 <__pow5mult+0xa0>
 800e948:	6820      	ldr	r0, [r4, #0]
 800e94a:	b938      	cbnz	r0, 800e95c <__pow5mult+0x9c>
 800e94c:	4622      	mov	r2, r4
 800e94e:	4621      	mov	r1, r4
 800e950:	4630      	mov	r0, r6
 800e952:	f7ff ff0b 	bl	800e76c <__multiply>
 800e956:	6020      	str	r0, [r4, #0]
 800e958:	f8c0 9000 	str.w	r9, [r0]
 800e95c:	4604      	mov	r4, r0
 800e95e:	e7e4      	b.n	800e92a <__pow5mult+0x6a>
 800e960:	4638      	mov	r0, r7
 800e962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e966:	bf00      	nop
 800e968:	08011050 	.word	0x08011050
 800e96c:	08010d9e 	.word	0x08010d9e
 800e970:	08010f00 	.word	0x08010f00

0800e974 <__lshift>:
 800e974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e978:	460c      	mov	r4, r1
 800e97a:	6849      	ldr	r1, [r1, #4]
 800e97c:	6923      	ldr	r3, [r4, #16]
 800e97e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e982:	68a3      	ldr	r3, [r4, #8]
 800e984:	4607      	mov	r7, r0
 800e986:	4691      	mov	r9, r2
 800e988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e98c:	f108 0601 	add.w	r6, r8, #1
 800e990:	42b3      	cmp	r3, r6
 800e992:	db0b      	blt.n	800e9ac <__lshift+0x38>
 800e994:	4638      	mov	r0, r7
 800e996:	f7ff fd91 	bl	800e4bc <_Balloc>
 800e99a:	4605      	mov	r5, r0
 800e99c:	b948      	cbnz	r0, 800e9b2 <__lshift+0x3e>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	4b2a      	ldr	r3, [pc, #168]	; (800ea4c <__lshift+0xd8>)
 800e9a2:	482b      	ldr	r0, [pc, #172]	; (800ea50 <__lshift+0xdc>)
 800e9a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e9a8:	f000 fe84 	bl	800f6b4 <__assert_func>
 800e9ac:	3101      	adds	r1, #1
 800e9ae:	005b      	lsls	r3, r3, #1
 800e9b0:	e7ee      	b.n	800e990 <__lshift+0x1c>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f100 0114 	add.w	r1, r0, #20
 800e9b8:	f100 0210 	add.w	r2, r0, #16
 800e9bc:	4618      	mov	r0, r3
 800e9be:	4553      	cmp	r3, sl
 800e9c0:	db37      	blt.n	800ea32 <__lshift+0xbe>
 800e9c2:	6920      	ldr	r0, [r4, #16]
 800e9c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9c8:	f104 0314 	add.w	r3, r4, #20
 800e9cc:	f019 091f 	ands.w	r9, r9, #31
 800e9d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e9d8:	d02f      	beq.n	800ea3a <__lshift+0xc6>
 800e9da:	f1c9 0e20 	rsb	lr, r9, #32
 800e9de:	468a      	mov	sl, r1
 800e9e0:	f04f 0c00 	mov.w	ip, #0
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	fa02 f209 	lsl.w	r2, r2, r9
 800e9ea:	ea42 020c 	orr.w	r2, r2, ip
 800e9ee:	f84a 2b04 	str.w	r2, [sl], #4
 800e9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f6:	4298      	cmp	r0, r3
 800e9f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e9fc:	d8f2      	bhi.n	800e9e4 <__lshift+0x70>
 800e9fe:	1b03      	subs	r3, r0, r4
 800ea00:	3b15      	subs	r3, #21
 800ea02:	f023 0303 	bic.w	r3, r3, #3
 800ea06:	3304      	adds	r3, #4
 800ea08:	f104 0215 	add.w	r2, r4, #21
 800ea0c:	4290      	cmp	r0, r2
 800ea0e:	bf38      	it	cc
 800ea10:	2304      	movcc	r3, #4
 800ea12:	f841 c003 	str.w	ip, [r1, r3]
 800ea16:	f1bc 0f00 	cmp.w	ip, #0
 800ea1a:	d001      	beq.n	800ea20 <__lshift+0xac>
 800ea1c:	f108 0602 	add.w	r6, r8, #2
 800ea20:	3e01      	subs	r6, #1
 800ea22:	4638      	mov	r0, r7
 800ea24:	612e      	str	r6, [r5, #16]
 800ea26:	4621      	mov	r1, r4
 800ea28:	f7ff fd88 	bl	800e53c <_Bfree>
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea32:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea36:	3301      	adds	r3, #1
 800ea38:	e7c1      	b.n	800e9be <__lshift+0x4a>
 800ea3a:	3904      	subs	r1, #4
 800ea3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea40:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea44:	4298      	cmp	r0, r3
 800ea46:	d8f9      	bhi.n	800ea3c <__lshift+0xc8>
 800ea48:	e7ea      	b.n	800ea20 <__lshift+0xac>
 800ea4a:	bf00      	nop
 800ea4c:	08010e10 	.word	0x08010e10
 800ea50:	08010f00 	.word	0x08010f00

0800ea54 <__mcmp>:
 800ea54:	b530      	push	{r4, r5, lr}
 800ea56:	6902      	ldr	r2, [r0, #16]
 800ea58:	690c      	ldr	r4, [r1, #16]
 800ea5a:	1b12      	subs	r2, r2, r4
 800ea5c:	d10e      	bne.n	800ea7c <__mcmp+0x28>
 800ea5e:	f100 0314 	add.w	r3, r0, #20
 800ea62:	3114      	adds	r1, #20
 800ea64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea74:	42a5      	cmp	r5, r4
 800ea76:	d003      	beq.n	800ea80 <__mcmp+0x2c>
 800ea78:	d305      	bcc.n	800ea86 <__mcmp+0x32>
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	bd30      	pop	{r4, r5, pc}
 800ea80:	4283      	cmp	r3, r0
 800ea82:	d3f3      	bcc.n	800ea6c <__mcmp+0x18>
 800ea84:	e7fa      	b.n	800ea7c <__mcmp+0x28>
 800ea86:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8a:	e7f7      	b.n	800ea7c <__mcmp+0x28>

0800ea8c <__mdiff>:
 800ea8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea90:	460c      	mov	r4, r1
 800ea92:	4606      	mov	r6, r0
 800ea94:	4611      	mov	r1, r2
 800ea96:	4620      	mov	r0, r4
 800ea98:	4690      	mov	r8, r2
 800ea9a:	f7ff ffdb 	bl	800ea54 <__mcmp>
 800ea9e:	1e05      	subs	r5, r0, #0
 800eaa0:	d110      	bne.n	800eac4 <__mdiff+0x38>
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	f7ff fd09 	bl	800e4bc <_Balloc>
 800eaaa:	b930      	cbnz	r0, 800eaba <__mdiff+0x2e>
 800eaac:	4b3a      	ldr	r3, [pc, #232]	; (800eb98 <__mdiff+0x10c>)
 800eaae:	4602      	mov	r2, r0
 800eab0:	f240 2132 	movw	r1, #562	; 0x232
 800eab4:	4839      	ldr	r0, [pc, #228]	; (800eb9c <__mdiff+0x110>)
 800eab6:	f000 fdfd 	bl	800f6b4 <__assert_func>
 800eaba:	2301      	movs	r3, #1
 800eabc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac4:	bfa4      	itt	ge
 800eac6:	4643      	movge	r3, r8
 800eac8:	46a0      	movge	r8, r4
 800eaca:	4630      	mov	r0, r6
 800eacc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ead0:	bfa6      	itte	ge
 800ead2:	461c      	movge	r4, r3
 800ead4:	2500      	movge	r5, #0
 800ead6:	2501      	movlt	r5, #1
 800ead8:	f7ff fcf0 	bl	800e4bc <_Balloc>
 800eadc:	b920      	cbnz	r0, 800eae8 <__mdiff+0x5c>
 800eade:	4b2e      	ldr	r3, [pc, #184]	; (800eb98 <__mdiff+0x10c>)
 800eae0:	4602      	mov	r2, r0
 800eae2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eae6:	e7e5      	b.n	800eab4 <__mdiff+0x28>
 800eae8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eaec:	6926      	ldr	r6, [r4, #16]
 800eaee:	60c5      	str	r5, [r0, #12]
 800eaf0:	f104 0914 	add.w	r9, r4, #20
 800eaf4:	f108 0514 	add.w	r5, r8, #20
 800eaf8:	f100 0e14 	add.w	lr, r0, #20
 800eafc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb04:	f108 0210 	add.w	r2, r8, #16
 800eb08:	46f2      	mov	sl, lr
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb14:	fa1f f883 	uxth.w	r8, r3
 800eb18:	fa11 f18b 	uxtah	r1, r1, fp
 800eb1c:	0c1b      	lsrs	r3, r3, #16
 800eb1e:	eba1 0808 	sub.w	r8, r1, r8
 800eb22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb2a:	fa1f f888 	uxth.w	r8, r8
 800eb2e:	1419      	asrs	r1, r3, #16
 800eb30:	454e      	cmp	r6, r9
 800eb32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb36:	f84a 3b04 	str.w	r3, [sl], #4
 800eb3a:	d8e7      	bhi.n	800eb0c <__mdiff+0x80>
 800eb3c:	1b33      	subs	r3, r6, r4
 800eb3e:	3b15      	subs	r3, #21
 800eb40:	f023 0303 	bic.w	r3, r3, #3
 800eb44:	3304      	adds	r3, #4
 800eb46:	3415      	adds	r4, #21
 800eb48:	42a6      	cmp	r6, r4
 800eb4a:	bf38      	it	cc
 800eb4c:	2304      	movcc	r3, #4
 800eb4e:	441d      	add	r5, r3
 800eb50:	4473      	add	r3, lr
 800eb52:	469e      	mov	lr, r3
 800eb54:	462e      	mov	r6, r5
 800eb56:	4566      	cmp	r6, ip
 800eb58:	d30e      	bcc.n	800eb78 <__mdiff+0xec>
 800eb5a:	f10c 0203 	add.w	r2, ip, #3
 800eb5e:	1b52      	subs	r2, r2, r5
 800eb60:	f022 0203 	bic.w	r2, r2, #3
 800eb64:	3d03      	subs	r5, #3
 800eb66:	45ac      	cmp	ip, r5
 800eb68:	bf38      	it	cc
 800eb6a:	2200      	movcc	r2, #0
 800eb6c:	441a      	add	r2, r3
 800eb6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb72:	b17b      	cbz	r3, 800eb94 <__mdiff+0x108>
 800eb74:	6107      	str	r7, [r0, #16]
 800eb76:	e7a3      	b.n	800eac0 <__mdiff+0x34>
 800eb78:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb7c:	fa11 f288 	uxtah	r2, r1, r8
 800eb80:	1414      	asrs	r4, r2, #16
 800eb82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb86:	b292      	uxth	r2, r2
 800eb88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb8c:	f84e 2b04 	str.w	r2, [lr], #4
 800eb90:	1421      	asrs	r1, r4, #16
 800eb92:	e7e0      	b.n	800eb56 <__mdiff+0xca>
 800eb94:	3f01      	subs	r7, #1
 800eb96:	e7ea      	b.n	800eb6e <__mdiff+0xe2>
 800eb98:	08010e10 	.word	0x08010e10
 800eb9c:	08010f00 	.word	0x08010f00

0800eba0 <__ulp>:
 800eba0:	b082      	sub	sp, #8
 800eba2:	ed8d 0b00 	vstr	d0, [sp]
 800eba6:	9b01      	ldr	r3, [sp, #4]
 800eba8:	4912      	ldr	r1, [pc, #72]	; (800ebf4 <__ulp+0x54>)
 800ebaa:	4019      	ands	r1, r3
 800ebac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ebb0:	2900      	cmp	r1, #0
 800ebb2:	dd05      	ble.n	800ebc0 <__ulp+0x20>
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	ec43 2b10 	vmov	d0, r2, r3
 800ebbc:	b002      	add	sp, #8
 800ebbe:	4770      	bx	lr
 800ebc0:	4249      	negs	r1, r1
 800ebc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ebc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ebca:	f04f 0200 	mov.w	r2, #0
 800ebce:	f04f 0300 	mov.w	r3, #0
 800ebd2:	da04      	bge.n	800ebde <__ulp+0x3e>
 800ebd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ebd8:	fa41 f300 	asr.w	r3, r1, r0
 800ebdc:	e7ec      	b.n	800ebb8 <__ulp+0x18>
 800ebde:	f1a0 0114 	sub.w	r1, r0, #20
 800ebe2:	291e      	cmp	r1, #30
 800ebe4:	bfda      	itte	le
 800ebe6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ebea:	fa20 f101 	lsrle.w	r1, r0, r1
 800ebee:	2101      	movgt	r1, #1
 800ebf0:	460a      	mov	r2, r1
 800ebf2:	e7e1      	b.n	800ebb8 <__ulp+0x18>
 800ebf4:	7ff00000 	.word	0x7ff00000

0800ebf8 <__b2d>:
 800ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebfa:	6905      	ldr	r5, [r0, #16]
 800ebfc:	f100 0714 	add.w	r7, r0, #20
 800ec00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ec04:	1f2e      	subs	r6, r5, #4
 800ec06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f7ff fd48 	bl	800e6a0 <__hi0bits>
 800ec10:	f1c0 0320 	rsb	r3, r0, #32
 800ec14:	280a      	cmp	r0, #10
 800ec16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ec94 <__b2d+0x9c>
 800ec1a:	600b      	str	r3, [r1, #0]
 800ec1c:	dc14      	bgt.n	800ec48 <__b2d+0x50>
 800ec1e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ec22:	fa24 f10e 	lsr.w	r1, r4, lr
 800ec26:	42b7      	cmp	r7, r6
 800ec28:	ea41 030c 	orr.w	r3, r1, ip
 800ec2c:	bf34      	ite	cc
 800ec2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec32:	2100      	movcs	r1, #0
 800ec34:	3015      	adds	r0, #21
 800ec36:	fa04 f000 	lsl.w	r0, r4, r0
 800ec3a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ec3e:	ea40 0201 	orr.w	r2, r0, r1
 800ec42:	ec43 2b10 	vmov	d0, r2, r3
 800ec46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec48:	42b7      	cmp	r7, r6
 800ec4a:	bf3a      	itte	cc
 800ec4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec50:	f1a5 0608 	subcc.w	r6, r5, #8
 800ec54:	2100      	movcs	r1, #0
 800ec56:	380b      	subs	r0, #11
 800ec58:	d017      	beq.n	800ec8a <__b2d+0x92>
 800ec5a:	f1c0 0c20 	rsb	ip, r0, #32
 800ec5e:	fa04 f500 	lsl.w	r5, r4, r0
 800ec62:	42be      	cmp	r6, r7
 800ec64:	fa21 f40c 	lsr.w	r4, r1, ip
 800ec68:	ea45 0504 	orr.w	r5, r5, r4
 800ec6c:	bf8c      	ite	hi
 800ec6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ec72:	2400      	movls	r4, #0
 800ec74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ec78:	fa01 f000 	lsl.w	r0, r1, r0
 800ec7c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ec80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec84:	ea40 0204 	orr.w	r2, r0, r4
 800ec88:	e7db      	b.n	800ec42 <__b2d+0x4a>
 800ec8a:	ea44 030c 	orr.w	r3, r4, ip
 800ec8e:	460a      	mov	r2, r1
 800ec90:	e7d7      	b.n	800ec42 <__b2d+0x4a>
 800ec92:	bf00      	nop
 800ec94:	3ff00000 	.word	0x3ff00000

0800ec98 <__d2b>:
 800ec98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec9c:	4689      	mov	r9, r1
 800ec9e:	2101      	movs	r1, #1
 800eca0:	ec57 6b10 	vmov	r6, r7, d0
 800eca4:	4690      	mov	r8, r2
 800eca6:	f7ff fc09 	bl	800e4bc <_Balloc>
 800ecaa:	4604      	mov	r4, r0
 800ecac:	b930      	cbnz	r0, 800ecbc <__d2b+0x24>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	4b25      	ldr	r3, [pc, #148]	; (800ed48 <__d2b+0xb0>)
 800ecb2:	4826      	ldr	r0, [pc, #152]	; (800ed4c <__d2b+0xb4>)
 800ecb4:	f240 310a 	movw	r1, #778	; 0x30a
 800ecb8:	f000 fcfc 	bl	800f6b4 <__assert_func>
 800ecbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ecc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ecc4:	bb35      	cbnz	r5, 800ed14 <__d2b+0x7c>
 800ecc6:	2e00      	cmp	r6, #0
 800ecc8:	9301      	str	r3, [sp, #4]
 800ecca:	d028      	beq.n	800ed1e <__d2b+0x86>
 800eccc:	4668      	mov	r0, sp
 800ecce:	9600      	str	r6, [sp, #0]
 800ecd0:	f7ff fd06 	bl	800e6e0 <__lo0bits>
 800ecd4:	9900      	ldr	r1, [sp, #0]
 800ecd6:	b300      	cbz	r0, 800ed1a <__d2b+0x82>
 800ecd8:	9a01      	ldr	r2, [sp, #4]
 800ecda:	f1c0 0320 	rsb	r3, r0, #32
 800ecde:	fa02 f303 	lsl.w	r3, r2, r3
 800ece2:	430b      	orrs	r3, r1
 800ece4:	40c2      	lsrs	r2, r0
 800ece6:	6163      	str	r3, [r4, #20]
 800ece8:	9201      	str	r2, [sp, #4]
 800ecea:	9b01      	ldr	r3, [sp, #4]
 800ecec:	61a3      	str	r3, [r4, #24]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	bf14      	ite	ne
 800ecf2:	2202      	movne	r2, #2
 800ecf4:	2201      	moveq	r2, #1
 800ecf6:	6122      	str	r2, [r4, #16]
 800ecf8:	b1d5      	cbz	r5, 800ed30 <__d2b+0x98>
 800ecfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecfe:	4405      	add	r5, r0
 800ed00:	f8c9 5000 	str.w	r5, [r9]
 800ed04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed08:	f8c8 0000 	str.w	r0, [r8]
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	b003      	add	sp, #12
 800ed10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed18:	e7d5      	b.n	800ecc6 <__d2b+0x2e>
 800ed1a:	6161      	str	r1, [r4, #20]
 800ed1c:	e7e5      	b.n	800ecea <__d2b+0x52>
 800ed1e:	a801      	add	r0, sp, #4
 800ed20:	f7ff fcde 	bl	800e6e0 <__lo0bits>
 800ed24:	9b01      	ldr	r3, [sp, #4]
 800ed26:	6163      	str	r3, [r4, #20]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	6122      	str	r2, [r4, #16]
 800ed2c:	3020      	adds	r0, #32
 800ed2e:	e7e3      	b.n	800ecf8 <__d2b+0x60>
 800ed30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed38:	f8c9 0000 	str.w	r0, [r9]
 800ed3c:	6918      	ldr	r0, [r3, #16]
 800ed3e:	f7ff fcaf 	bl	800e6a0 <__hi0bits>
 800ed42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed46:	e7df      	b.n	800ed08 <__d2b+0x70>
 800ed48:	08010e10 	.word	0x08010e10
 800ed4c:	08010f00 	.word	0x08010f00

0800ed50 <__ratio>:
 800ed50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	4688      	mov	r8, r1
 800ed56:	4669      	mov	r1, sp
 800ed58:	4681      	mov	r9, r0
 800ed5a:	f7ff ff4d 	bl	800ebf8 <__b2d>
 800ed5e:	a901      	add	r1, sp, #4
 800ed60:	4640      	mov	r0, r8
 800ed62:	ec55 4b10 	vmov	r4, r5, d0
 800ed66:	f7ff ff47 	bl	800ebf8 <__b2d>
 800ed6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ed72:	eba3 0c02 	sub.w	ip, r3, r2
 800ed76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed7a:	1a9b      	subs	r3, r3, r2
 800ed7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed80:	ec51 0b10 	vmov	r0, r1, d0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	bfd6      	itet	le
 800ed88:	460a      	movle	r2, r1
 800ed8a:	462a      	movgt	r2, r5
 800ed8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed90:	468b      	mov	fp, r1
 800ed92:	462f      	mov	r7, r5
 800ed94:	bfd4      	ite	le
 800ed96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ed9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed9e:	4620      	mov	r0, r4
 800eda0:	ee10 2a10 	vmov	r2, s0
 800eda4:	465b      	mov	r3, fp
 800eda6:	4639      	mov	r1, r7
 800eda8:	f7f1 fd50 	bl	800084c <__aeabi_ddiv>
 800edac:	ec41 0b10 	vmov	d0, r0, r1
 800edb0:	b003      	add	sp, #12
 800edb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edb6 <__copybits>:
 800edb6:	3901      	subs	r1, #1
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	1149      	asrs	r1, r1, #5
 800edbc:	6914      	ldr	r4, [r2, #16]
 800edbe:	3101      	adds	r1, #1
 800edc0:	f102 0314 	add.w	r3, r2, #20
 800edc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800edc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800edcc:	1f05      	subs	r5, r0, #4
 800edce:	42a3      	cmp	r3, r4
 800edd0:	d30c      	bcc.n	800edec <__copybits+0x36>
 800edd2:	1aa3      	subs	r3, r4, r2
 800edd4:	3b11      	subs	r3, #17
 800edd6:	f023 0303 	bic.w	r3, r3, #3
 800edda:	3211      	adds	r2, #17
 800eddc:	42a2      	cmp	r2, r4
 800edde:	bf88      	it	hi
 800ede0:	2300      	movhi	r3, #0
 800ede2:	4418      	add	r0, r3
 800ede4:	2300      	movs	r3, #0
 800ede6:	4288      	cmp	r0, r1
 800ede8:	d305      	bcc.n	800edf6 <__copybits+0x40>
 800edea:	bd70      	pop	{r4, r5, r6, pc}
 800edec:	f853 6b04 	ldr.w	r6, [r3], #4
 800edf0:	f845 6f04 	str.w	r6, [r5, #4]!
 800edf4:	e7eb      	b.n	800edce <__copybits+0x18>
 800edf6:	f840 3b04 	str.w	r3, [r0], #4
 800edfa:	e7f4      	b.n	800ede6 <__copybits+0x30>

0800edfc <__any_on>:
 800edfc:	f100 0214 	add.w	r2, r0, #20
 800ee00:	6900      	ldr	r0, [r0, #16]
 800ee02:	114b      	asrs	r3, r1, #5
 800ee04:	4298      	cmp	r0, r3
 800ee06:	b510      	push	{r4, lr}
 800ee08:	db11      	blt.n	800ee2e <__any_on+0x32>
 800ee0a:	dd0a      	ble.n	800ee22 <__any_on+0x26>
 800ee0c:	f011 011f 	ands.w	r1, r1, #31
 800ee10:	d007      	beq.n	800ee22 <__any_on+0x26>
 800ee12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee16:	fa24 f001 	lsr.w	r0, r4, r1
 800ee1a:	fa00 f101 	lsl.w	r1, r0, r1
 800ee1e:	428c      	cmp	r4, r1
 800ee20:	d10b      	bne.n	800ee3a <__any_on+0x3e>
 800ee22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d803      	bhi.n	800ee32 <__any_on+0x36>
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	bd10      	pop	{r4, pc}
 800ee2e:	4603      	mov	r3, r0
 800ee30:	e7f7      	b.n	800ee22 <__any_on+0x26>
 800ee32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee36:	2900      	cmp	r1, #0
 800ee38:	d0f5      	beq.n	800ee26 <__any_on+0x2a>
 800ee3a:	2001      	movs	r0, #1
 800ee3c:	e7f6      	b.n	800ee2c <__any_on+0x30>

0800ee3e <_calloc_r>:
 800ee3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee40:	fba1 2402 	umull	r2, r4, r1, r2
 800ee44:	b94c      	cbnz	r4, 800ee5a <_calloc_r+0x1c>
 800ee46:	4611      	mov	r1, r2
 800ee48:	9201      	str	r2, [sp, #4]
 800ee4a:	f000 f87b 	bl	800ef44 <_malloc_r>
 800ee4e:	9a01      	ldr	r2, [sp, #4]
 800ee50:	4605      	mov	r5, r0
 800ee52:	b930      	cbnz	r0, 800ee62 <_calloc_r+0x24>
 800ee54:	4628      	mov	r0, r5
 800ee56:	b003      	add	sp, #12
 800ee58:	bd30      	pop	{r4, r5, pc}
 800ee5a:	220c      	movs	r2, #12
 800ee5c:	6002      	str	r2, [r0, #0]
 800ee5e:	2500      	movs	r5, #0
 800ee60:	e7f8      	b.n	800ee54 <_calloc_r+0x16>
 800ee62:	4621      	mov	r1, r4
 800ee64:	f7fc f860 	bl	800af28 <memset>
 800ee68:	e7f4      	b.n	800ee54 <_calloc_r+0x16>
	...

0800ee6c <_free_r>:
 800ee6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee6e:	2900      	cmp	r1, #0
 800ee70:	d044      	beq.n	800eefc <_free_r+0x90>
 800ee72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee76:	9001      	str	r0, [sp, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ee7e:	bfb8      	it	lt
 800ee80:	18e4      	addlt	r4, r4, r3
 800ee82:	f000 fca5 	bl	800f7d0 <__malloc_lock>
 800ee86:	4a1e      	ldr	r2, [pc, #120]	; (800ef00 <_free_r+0x94>)
 800ee88:	9801      	ldr	r0, [sp, #4]
 800ee8a:	6813      	ldr	r3, [r2, #0]
 800ee8c:	b933      	cbnz	r3, 800ee9c <_free_r+0x30>
 800ee8e:	6063      	str	r3, [r4, #4]
 800ee90:	6014      	str	r4, [r2, #0]
 800ee92:	b003      	add	sp, #12
 800ee94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee98:	f000 bca0 	b.w	800f7dc <__malloc_unlock>
 800ee9c:	42a3      	cmp	r3, r4
 800ee9e:	d908      	bls.n	800eeb2 <_free_r+0x46>
 800eea0:	6825      	ldr	r5, [r4, #0]
 800eea2:	1961      	adds	r1, r4, r5
 800eea4:	428b      	cmp	r3, r1
 800eea6:	bf01      	itttt	eq
 800eea8:	6819      	ldreq	r1, [r3, #0]
 800eeaa:	685b      	ldreq	r3, [r3, #4]
 800eeac:	1949      	addeq	r1, r1, r5
 800eeae:	6021      	streq	r1, [r4, #0]
 800eeb0:	e7ed      	b.n	800ee8e <_free_r+0x22>
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	b10b      	cbz	r3, 800eebc <_free_r+0x50>
 800eeb8:	42a3      	cmp	r3, r4
 800eeba:	d9fa      	bls.n	800eeb2 <_free_r+0x46>
 800eebc:	6811      	ldr	r1, [r2, #0]
 800eebe:	1855      	adds	r5, r2, r1
 800eec0:	42a5      	cmp	r5, r4
 800eec2:	d10b      	bne.n	800eedc <_free_r+0x70>
 800eec4:	6824      	ldr	r4, [r4, #0]
 800eec6:	4421      	add	r1, r4
 800eec8:	1854      	adds	r4, r2, r1
 800eeca:	42a3      	cmp	r3, r4
 800eecc:	6011      	str	r1, [r2, #0]
 800eece:	d1e0      	bne.n	800ee92 <_free_r+0x26>
 800eed0:	681c      	ldr	r4, [r3, #0]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	6053      	str	r3, [r2, #4]
 800eed6:	4421      	add	r1, r4
 800eed8:	6011      	str	r1, [r2, #0]
 800eeda:	e7da      	b.n	800ee92 <_free_r+0x26>
 800eedc:	d902      	bls.n	800eee4 <_free_r+0x78>
 800eede:	230c      	movs	r3, #12
 800eee0:	6003      	str	r3, [r0, #0]
 800eee2:	e7d6      	b.n	800ee92 <_free_r+0x26>
 800eee4:	6825      	ldr	r5, [r4, #0]
 800eee6:	1961      	adds	r1, r4, r5
 800eee8:	428b      	cmp	r3, r1
 800eeea:	bf04      	itt	eq
 800eeec:	6819      	ldreq	r1, [r3, #0]
 800eeee:	685b      	ldreq	r3, [r3, #4]
 800eef0:	6063      	str	r3, [r4, #4]
 800eef2:	bf04      	itt	eq
 800eef4:	1949      	addeq	r1, r1, r5
 800eef6:	6021      	streq	r1, [r4, #0]
 800eef8:	6054      	str	r4, [r2, #4]
 800eefa:	e7ca      	b.n	800ee92 <_free_r+0x26>
 800eefc:	b003      	add	sp, #12
 800eefe:	bd30      	pop	{r4, r5, pc}
 800ef00:	20012280 	.word	0x20012280

0800ef04 <sbrk_aligned>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	4e0e      	ldr	r6, [pc, #56]	; (800ef40 <sbrk_aligned+0x3c>)
 800ef08:	460c      	mov	r4, r1
 800ef0a:	6831      	ldr	r1, [r6, #0]
 800ef0c:	4605      	mov	r5, r0
 800ef0e:	b911      	cbnz	r1, 800ef16 <sbrk_aligned+0x12>
 800ef10:	f000 fb4a 	bl	800f5a8 <_sbrk_r>
 800ef14:	6030      	str	r0, [r6, #0]
 800ef16:	4621      	mov	r1, r4
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f000 fb45 	bl	800f5a8 <_sbrk_r>
 800ef1e:	1c43      	adds	r3, r0, #1
 800ef20:	d00a      	beq.n	800ef38 <sbrk_aligned+0x34>
 800ef22:	1cc4      	adds	r4, r0, #3
 800ef24:	f024 0403 	bic.w	r4, r4, #3
 800ef28:	42a0      	cmp	r0, r4
 800ef2a:	d007      	beq.n	800ef3c <sbrk_aligned+0x38>
 800ef2c:	1a21      	subs	r1, r4, r0
 800ef2e:	4628      	mov	r0, r5
 800ef30:	f000 fb3a 	bl	800f5a8 <_sbrk_r>
 800ef34:	3001      	adds	r0, #1
 800ef36:	d101      	bne.n	800ef3c <sbrk_aligned+0x38>
 800ef38:	f04f 34ff 	mov.w	r4, #4294967295
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}
 800ef40:	20012284 	.word	0x20012284

0800ef44 <_malloc_r>:
 800ef44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef48:	1ccd      	adds	r5, r1, #3
 800ef4a:	f025 0503 	bic.w	r5, r5, #3
 800ef4e:	3508      	adds	r5, #8
 800ef50:	2d0c      	cmp	r5, #12
 800ef52:	bf38      	it	cc
 800ef54:	250c      	movcc	r5, #12
 800ef56:	2d00      	cmp	r5, #0
 800ef58:	4607      	mov	r7, r0
 800ef5a:	db01      	blt.n	800ef60 <_malloc_r+0x1c>
 800ef5c:	42a9      	cmp	r1, r5
 800ef5e:	d905      	bls.n	800ef6c <_malloc_r+0x28>
 800ef60:	230c      	movs	r3, #12
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	2600      	movs	r6, #0
 800ef66:	4630      	mov	r0, r6
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6c:	4e2e      	ldr	r6, [pc, #184]	; (800f028 <_malloc_r+0xe4>)
 800ef6e:	f000 fc2f 	bl	800f7d0 <__malloc_lock>
 800ef72:	6833      	ldr	r3, [r6, #0]
 800ef74:	461c      	mov	r4, r3
 800ef76:	bb34      	cbnz	r4, 800efc6 <_malloc_r+0x82>
 800ef78:	4629      	mov	r1, r5
 800ef7a:	4638      	mov	r0, r7
 800ef7c:	f7ff ffc2 	bl	800ef04 <sbrk_aligned>
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	4604      	mov	r4, r0
 800ef84:	d14d      	bne.n	800f022 <_malloc_r+0xde>
 800ef86:	6834      	ldr	r4, [r6, #0]
 800ef88:	4626      	mov	r6, r4
 800ef8a:	2e00      	cmp	r6, #0
 800ef8c:	d140      	bne.n	800f010 <_malloc_r+0xcc>
 800ef8e:	6823      	ldr	r3, [r4, #0]
 800ef90:	4631      	mov	r1, r6
 800ef92:	4638      	mov	r0, r7
 800ef94:	eb04 0803 	add.w	r8, r4, r3
 800ef98:	f000 fb06 	bl	800f5a8 <_sbrk_r>
 800ef9c:	4580      	cmp	r8, r0
 800ef9e:	d13a      	bne.n	800f016 <_malloc_r+0xd2>
 800efa0:	6821      	ldr	r1, [r4, #0]
 800efa2:	3503      	adds	r5, #3
 800efa4:	1a6d      	subs	r5, r5, r1
 800efa6:	f025 0503 	bic.w	r5, r5, #3
 800efaa:	3508      	adds	r5, #8
 800efac:	2d0c      	cmp	r5, #12
 800efae:	bf38      	it	cc
 800efb0:	250c      	movcc	r5, #12
 800efb2:	4629      	mov	r1, r5
 800efb4:	4638      	mov	r0, r7
 800efb6:	f7ff ffa5 	bl	800ef04 <sbrk_aligned>
 800efba:	3001      	adds	r0, #1
 800efbc:	d02b      	beq.n	800f016 <_malloc_r+0xd2>
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	442b      	add	r3, r5
 800efc2:	6023      	str	r3, [r4, #0]
 800efc4:	e00e      	b.n	800efe4 <_malloc_r+0xa0>
 800efc6:	6822      	ldr	r2, [r4, #0]
 800efc8:	1b52      	subs	r2, r2, r5
 800efca:	d41e      	bmi.n	800f00a <_malloc_r+0xc6>
 800efcc:	2a0b      	cmp	r2, #11
 800efce:	d916      	bls.n	800effe <_malloc_r+0xba>
 800efd0:	1961      	adds	r1, r4, r5
 800efd2:	42a3      	cmp	r3, r4
 800efd4:	6025      	str	r5, [r4, #0]
 800efd6:	bf18      	it	ne
 800efd8:	6059      	strne	r1, [r3, #4]
 800efda:	6863      	ldr	r3, [r4, #4]
 800efdc:	bf08      	it	eq
 800efde:	6031      	streq	r1, [r6, #0]
 800efe0:	5162      	str	r2, [r4, r5]
 800efe2:	604b      	str	r3, [r1, #4]
 800efe4:	4638      	mov	r0, r7
 800efe6:	f104 060b 	add.w	r6, r4, #11
 800efea:	f000 fbf7 	bl	800f7dc <__malloc_unlock>
 800efee:	f026 0607 	bic.w	r6, r6, #7
 800eff2:	1d23      	adds	r3, r4, #4
 800eff4:	1af2      	subs	r2, r6, r3
 800eff6:	d0b6      	beq.n	800ef66 <_malloc_r+0x22>
 800eff8:	1b9b      	subs	r3, r3, r6
 800effa:	50a3      	str	r3, [r4, r2]
 800effc:	e7b3      	b.n	800ef66 <_malloc_r+0x22>
 800effe:	6862      	ldr	r2, [r4, #4]
 800f000:	42a3      	cmp	r3, r4
 800f002:	bf0c      	ite	eq
 800f004:	6032      	streq	r2, [r6, #0]
 800f006:	605a      	strne	r2, [r3, #4]
 800f008:	e7ec      	b.n	800efe4 <_malloc_r+0xa0>
 800f00a:	4623      	mov	r3, r4
 800f00c:	6864      	ldr	r4, [r4, #4]
 800f00e:	e7b2      	b.n	800ef76 <_malloc_r+0x32>
 800f010:	4634      	mov	r4, r6
 800f012:	6876      	ldr	r6, [r6, #4]
 800f014:	e7b9      	b.n	800ef8a <_malloc_r+0x46>
 800f016:	230c      	movs	r3, #12
 800f018:	603b      	str	r3, [r7, #0]
 800f01a:	4638      	mov	r0, r7
 800f01c:	f000 fbde 	bl	800f7dc <__malloc_unlock>
 800f020:	e7a1      	b.n	800ef66 <_malloc_r+0x22>
 800f022:	6025      	str	r5, [r4, #0]
 800f024:	e7de      	b.n	800efe4 <_malloc_r+0xa0>
 800f026:	bf00      	nop
 800f028:	20012280 	.word	0x20012280

0800f02c <__ssputs_r>:
 800f02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f030:	688e      	ldr	r6, [r1, #8]
 800f032:	429e      	cmp	r6, r3
 800f034:	4682      	mov	sl, r0
 800f036:	460c      	mov	r4, r1
 800f038:	4690      	mov	r8, r2
 800f03a:	461f      	mov	r7, r3
 800f03c:	d838      	bhi.n	800f0b0 <__ssputs_r+0x84>
 800f03e:	898a      	ldrh	r2, [r1, #12]
 800f040:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f044:	d032      	beq.n	800f0ac <__ssputs_r+0x80>
 800f046:	6825      	ldr	r5, [r4, #0]
 800f048:	6909      	ldr	r1, [r1, #16]
 800f04a:	eba5 0901 	sub.w	r9, r5, r1
 800f04e:	6965      	ldr	r5, [r4, #20]
 800f050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f058:	3301      	adds	r3, #1
 800f05a:	444b      	add	r3, r9
 800f05c:	106d      	asrs	r5, r5, #1
 800f05e:	429d      	cmp	r5, r3
 800f060:	bf38      	it	cc
 800f062:	461d      	movcc	r5, r3
 800f064:	0553      	lsls	r3, r2, #21
 800f066:	d531      	bpl.n	800f0cc <__ssputs_r+0xa0>
 800f068:	4629      	mov	r1, r5
 800f06a:	f7ff ff6b 	bl	800ef44 <_malloc_r>
 800f06e:	4606      	mov	r6, r0
 800f070:	b950      	cbnz	r0, 800f088 <__ssputs_r+0x5c>
 800f072:	230c      	movs	r3, #12
 800f074:	f8ca 3000 	str.w	r3, [sl]
 800f078:	89a3      	ldrh	r3, [r4, #12]
 800f07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f07e:	81a3      	strh	r3, [r4, #12]
 800f080:	f04f 30ff 	mov.w	r0, #4294967295
 800f084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f088:	6921      	ldr	r1, [r4, #16]
 800f08a:	464a      	mov	r2, r9
 800f08c:	f7fb ff3e 	bl	800af0c <memcpy>
 800f090:	89a3      	ldrh	r3, [r4, #12]
 800f092:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f09a:	81a3      	strh	r3, [r4, #12]
 800f09c:	6126      	str	r6, [r4, #16]
 800f09e:	6165      	str	r5, [r4, #20]
 800f0a0:	444e      	add	r6, r9
 800f0a2:	eba5 0509 	sub.w	r5, r5, r9
 800f0a6:	6026      	str	r6, [r4, #0]
 800f0a8:	60a5      	str	r5, [r4, #8]
 800f0aa:	463e      	mov	r6, r7
 800f0ac:	42be      	cmp	r6, r7
 800f0ae:	d900      	bls.n	800f0b2 <__ssputs_r+0x86>
 800f0b0:	463e      	mov	r6, r7
 800f0b2:	6820      	ldr	r0, [r4, #0]
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	4641      	mov	r1, r8
 800f0b8:	f000 fb70 	bl	800f79c <memmove>
 800f0bc:	68a3      	ldr	r3, [r4, #8]
 800f0be:	1b9b      	subs	r3, r3, r6
 800f0c0:	60a3      	str	r3, [r4, #8]
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	4433      	add	r3, r6
 800f0c6:	6023      	str	r3, [r4, #0]
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	e7db      	b.n	800f084 <__ssputs_r+0x58>
 800f0cc:	462a      	mov	r2, r5
 800f0ce:	f000 fb8b 	bl	800f7e8 <_realloc_r>
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d1e1      	bne.n	800f09c <__ssputs_r+0x70>
 800f0d8:	6921      	ldr	r1, [r4, #16]
 800f0da:	4650      	mov	r0, sl
 800f0dc:	f7ff fec6 	bl	800ee6c <_free_r>
 800f0e0:	e7c7      	b.n	800f072 <__ssputs_r+0x46>
	...

0800f0e4 <_svfiprintf_r>:
 800f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e8:	4698      	mov	r8, r3
 800f0ea:	898b      	ldrh	r3, [r1, #12]
 800f0ec:	061b      	lsls	r3, r3, #24
 800f0ee:	b09d      	sub	sp, #116	; 0x74
 800f0f0:	4607      	mov	r7, r0
 800f0f2:	460d      	mov	r5, r1
 800f0f4:	4614      	mov	r4, r2
 800f0f6:	d50e      	bpl.n	800f116 <_svfiprintf_r+0x32>
 800f0f8:	690b      	ldr	r3, [r1, #16]
 800f0fa:	b963      	cbnz	r3, 800f116 <_svfiprintf_r+0x32>
 800f0fc:	2140      	movs	r1, #64	; 0x40
 800f0fe:	f7ff ff21 	bl	800ef44 <_malloc_r>
 800f102:	6028      	str	r0, [r5, #0]
 800f104:	6128      	str	r0, [r5, #16]
 800f106:	b920      	cbnz	r0, 800f112 <_svfiprintf_r+0x2e>
 800f108:	230c      	movs	r3, #12
 800f10a:	603b      	str	r3, [r7, #0]
 800f10c:	f04f 30ff 	mov.w	r0, #4294967295
 800f110:	e0d1      	b.n	800f2b6 <_svfiprintf_r+0x1d2>
 800f112:	2340      	movs	r3, #64	; 0x40
 800f114:	616b      	str	r3, [r5, #20]
 800f116:	2300      	movs	r3, #0
 800f118:	9309      	str	r3, [sp, #36]	; 0x24
 800f11a:	2320      	movs	r3, #32
 800f11c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f120:	f8cd 800c 	str.w	r8, [sp, #12]
 800f124:	2330      	movs	r3, #48	; 0x30
 800f126:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2d0 <_svfiprintf_r+0x1ec>
 800f12a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f12e:	f04f 0901 	mov.w	r9, #1
 800f132:	4623      	mov	r3, r4
 800f134:	469a      	mov	sl, r3
 800f136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f13a:	b10a      	cbz	r2, 800f140 <_svfiprintf_r+0x5c>
 800f13c:	2a25      	cmp	r2, #37	; 0x25
 800f13e:	d1f9      	bne.n	800f134 <_svfiprintf_r+0x50>
 800f140:	ebba 0b04 	subs.w	fp, sl, r4
 800f144:	d00b      	beq.n	800f15e <_svfiprintf_r+0x7a>
 800f146:	465b      	mov	r3, fp
 800f148:	4622      	mov	r2, r4
 800f14a:	4629      	mov	r1, r5
 800f14c:	4638      	mov	r0, r7
 800f14e:	f7ff ff6d 	bl	800f02c <__ssputs_r>
 800f152:	3001      	adds	r0, #1
 800f154:	f000 80aa 	beq.w	800f2ac <_svfiprintf_r+0x1c8>
 800f158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f15a:	445a      	add	r2, fp
 800f15c:	9209      	str	r2, [sp, #36]	; 0x24
 800f15e:	f89a 3000 	ldrb.w	r3, [sl]
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 80a2 	beq.w	800f2ac <_svfiprintf_r+0x1c8>
 800f168:	2300      	movs	r3, #0
 800f16a:	f04f 32ff 	mov.w	r2, #4294967295
 800f16e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f172:	f10a 0a01 	add.w	sl, sl, #1
 800f176:	9304      	str	r3, [sp, #16]
 800f178:	9307      	str	r3, [sp, #28]
 800f17a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f17e:	931a      	str	r3, [sp, #104]	; 0x68
 800f180:	4654      	mov	r4, sl
 800f182:	2205      	movs	r2, #5
 800f184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f188:	4851      	ldr	r0, [pc, #324]	; (800f2d0 <_svfiprintf_r+0x1ec>)
 800f18a:	f7f1 f829 	bl	80001e0 <memchr>
 800f18e:	9a04      	ldr	r2, [sp, #16]
 800f190:	b9d8      	cbnz	r0, 800f1ca <_svfiprintf_r+0xe6>
 800f192:	06d0      	lsls	r0, r2, #27
 800f194:	bf44      	itt	mi
 800f196:	2320      	movmi	r3, #32
 800f198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f19c:	0711      	lsls	r1, r2, #28
 800f19e:	bf44      	itt	mi
 800f1a0:	232b      	movmi	r3, #43	; 0x2b
 800f1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1a6:	f89a 3000 	ldrb.w	r3, [sl]
 800f1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800f1ac:	d015      	beq.n	800f1da <_svfiprintf_r+0xf6>
 800f1ae:	9a07      	ldr	r2, [sp, #28]
 800f1b0:	4654      	mov	r4, sl
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	f04f 0c0a 	mov.w	ip, #10
 800f1b8:	4621      	mov	r1, r4
 800f1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1be:	3b30      	subs	r3, #48	; 0x30
 800f1c0:	2b09      	cmp	r3, #9
 800f1c2:	d94e      	bls.n	800f262 <_svfiprintf_r+0x17e>
 800f1c4:	b1b0      	cbz	r0, 800f1f4 <_svfiprintf_r+0x110>
 800f1c6:	9207      	str	r2, [sp, #28]
 800f1c8:	e014      	b.n	800f1f4 <_svfiprintf_r+0x110>
 800f1ca:	eba0 0308 	sub.w	r3, r0, r8
 800f1ce:	fa09 f303 	lsl.w	r3, r9, r3
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	9304      	str	r3, [sp, #16]
 800f1d6:	46a2      	mov	sl, r4
 800f1d8:	e7d2      	b.n	800f180 <_svfiprintf_r+0x9c>
 800f1da:	9b03      	ldr	r3, [sp, #12]
 800f1dc:	1d19      	adds	r1, r3, #4
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	9103      	str	r1, [sp, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	bfbb      	ittet	lt
 800f1e6:	425b      	neglt	r3, r3
 800f1e8:	f042 0202 	orrlt.w	r2, r2, #2
 800f1ec:	9307      	strge	r3, [sp, #28]
 800f1ee:	9307      	strlt	r3, [sp, #28]
 800f1f0:	bfb8      	it	lt
 800f1f2:	9204      	strlt	r2, [sp, #16]
 800f1f4:	7823      	ldrb	r3, [r4, #0]
 800f1f6:	2b2e      	cmp	r3, #46	; 0x2e
 800f1f8:	d10c      	bne.n	800f214 <_svfiprintf_r+0x130>
 800f1fa:	7863      	ldrb	r3, [r4, #1]
 800f1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800f1fe:	d135      	bne.n	800f26c <_svfiprintf_r+0x188>
 800f200:	9b03      	ldr	r3, [sp, #12]
 800f202:	1d1a      	adds	r2, r3, #4
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	9203      	str	r2, [sp, #12]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	bfb8      	it	lt
 800f20c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f210:	3402      	adds	r4, #2
 800f212:	9305      	str	r3, [sp, #20]
 800f214:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2e0 <_svfiprintf_r+0x1fc>
 800f218:	7821      	ldrb	r1, [r4, #0]
 800f21a:	2203      	movs	r2, #3
 800f21c:	4650      	mov	r0, sl
 800f21e:	f7f0 ffdf 	bl	80001e0 <memchr>
 800f222:	b140      	cbz	r0, 800f236 <_svfiprintf_r+0x152>
 800f224:	2340      	movs	r3, #64	; 0x40
 800f226:	eba0 000a 	sub.w	r0, r0, sl
 800f22a:	fa03 f000 	lsl.w	r0, r3, r0
 800f22e:	9b04      	ldr	r3, [sp, #16]
 800f230:	4303      	orrs	r3, r0
 800f232:	3401      	adds	r4, #1
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f23a:	4826      	ldr	r0, [pc, #152]	; (800f2d4 <_svfiprintf_r+0x1f0>)
 800f23c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f240:	2206      	movs	r2, #6
 800f242:	f7f0 ffcd 	bl	80001e0 <memchr>
 800f246:	2800      	cmp	r0, #0
 800f248:	d038      	beq.n	800f2bc <_svfiprintf_r+0x1d8>
 800f24a:	4b23      	ldr	r3, [pc, #140]	; (800f2d8 <_svfiprintf_r+0x1f4>)
 800f24c:	bb1b      	cbnz	r3, 800f296 <_svfiprintf_r+0x1b2>
 800f24e:	9b03      	ldr	r3, [sp, #12]
 800f250:	3307      	adds	r3, #7
 800f252:	f023 0307 	bic.w	r3, r3, #7
 800f256:	3308      	adds	r3, #8
 800f258:	9303      	str	r3, [sp, #12]
 800f25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25c:	4433      	add	r3, r6
 800f25e:	9309      	str	r3, [sp, #36]	; 0x24
 800f260:	e767      	b.n	800f132 <_svfiprintf_r+0x4e>
 800f262:	fb0c 3202 	mla	r2, ip, r2, r3
 800f266:	460c      	mov	r4, r1
 800f268:	2001      	movs	r0, #1
 800f26a:	e7a5      	b.n	800f1b8 <_svfiprintf_r+0xd4>
 800f26c:	2300      	movs	r3, #0
 800f26e:	3401      	adds	r4, #1
 800f270:	9305      	str	r3, [sp, #20]
 800f272:	4619      	mov	r1, r3
 800f274:	f04f 0c0a 	mov.w	ip, #10
 800f278:	4620      	mov	r0, r4
 800f27a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f27e:	3a30      	subs	r2, #48	; 0x30
 800f280:	2a09      	cmp	r2, #9
 800f282:	d903      	bls.n	800f28c <_svfiprintf_r+0x1a8>
 800f284:	2b00      	cmp	r3, #0
 800f286:	d0c5      	beq.n	800f214 <_svfiprintf_r+0x130>
 800f288:	9105      	str	r1, [sp, #20]
 800f28a:	e7c3      	b.n	800f214 <_svfiprintf_r+0x130>
 800f28c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f290:	4604      	mov	r4, r0
 800f292:	2301      	movs	r3, #1
 800f294:	e7f0      	b.n	800f278 <_svfiprintf_r+0x194>
 800f296:	ab03      	add	r3, sp, #12
 800f298:	9300      	str	r3, [sp, #0]
 800f29a:	462a      	mov	r2, r5
 800f29c:	4b0f      	ldr	r3, [pc, #60]	; (800f2dc <_svfiprintf_r+0x1f8>)
 800f29e:	a904      	add	r1, sp, #16
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	f7fb fee9 	bl	800b078 <_printf_float>
 800f2a6:	1c42      	adds	r2, r0, #1
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	d1d6      	bne.n	800f25a <_svfiprintf_r+0x176>
 800f2ac:	89ab      	ldrh	r3, [r5, #12]
 800f2ae:	065b      	lsls	r3, r3, #25
 800f2b0:	f53f af2c 	bmi.w	800f10c <_svfiprintf_r+0x28>
 800f2b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2b6:	b01d      	add	sp, #116	; 0x74
 800f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2bc:	ab03      	add	r3, sp, #12
 800f2be:	9300      	str	r3, [sp, #0]
 800f2c0:	462a      	mov	r2, r5
 800f2c2:	4b06      	ldr	r3, [pc, #24]	; (800f2dc <_svfiprintf_r+0x1f8>)
 800f2c4:	a904      	add	r1, sp, #16
 800f2c6:	4638      	mov	r0, r7
 800f2c8:	f7fc f97a 	bl	800b5c0 <_printf_i>
 800f2cc:	e7eb      	b.n	800f2a6 <_svfiprintf_r+0x1c2>
 800f2ce:	bf00      	nop
 800f2d0:	0801105c 	.word	0x0801105c
 800f2d4:	08011066 	.word	0x08011066
 800f2d8:	0800b079 	.word	0x0800b079
 800f2dc:	0800f02d 	.word	0x0800f02d
 800f2e0:	08011062 	.word	0x08011062

0800f2e4 <__sfputc_r>:
 800f2e4:	6893      	ldr	r3, [r2, #8]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	b410      	push	{r4}
 800f2ec:	6093      	str	r3, [r2, #8]
 800f2ee:	da08      	bge.n	800f302 <__sfputc_r+0x1e>
 800f2f0:	6994      	ldr	r4, [r2, #24]
 800f2f2:	42a3      	cmp	r3, r4
 800f2f4:	db01      	blt.n	800f2fa <__sfputc_r+0x16>
 800f2f6:	290a      	cmp	r1, #10
 800f2f8:	d103      	bne.n	800f302 <__sfputc_r+0x1e>
 800f2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2fe:	f7fd bbf7 	b.w	800caf0 <__swbuf_r>
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	1c58      	adds	r0, r3, #1
 800f306:	6010      	str	r0, [r2, #0]
 800f308:	7019      	strb	r1, [r3, #0]
 800f30a:	4608      	mov	r0, r1
 800f30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f310:	4770      	bx	lr

0800f312 <__sfputs_r>:
 800f312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f314:	4606      	mov	r6, r0
 800f316:	460f      	mov	r7, r1
 800f318:	4614      	mov	r4, r2
 800f31a:	18d5      	adds	r5, r2, r3
 800f31c:	42ac      	cmp	r4, r5
 800f31e:	d101      	bne.n	800f324 <__sfputs_r+0x12>
 800f320:	2000      	movs	r0, #0
 800f322:	e007      	b.n	800f334 <__sfputs_r+0x22>
 800f324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f328:	463a      	mov	r2, r7
 800f32a:	4630      	mov	r0, r6
 800f32c:	f7ff ffda 	bl	800f2e4 <__sfputc_r>
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d1f3      	bne.n	800f31c <__sfputs_r+0xa>
 800f334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f338 <_vfiprintf_r>:
 800f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f33c:	460d      	mov	r5, r1
 800f33e:	b09d      	sub	sp, #116	; 0x74
 800f340:	4614      	mov	r4, r2
 800f342:	4698      	mov	r8, r3
 800f344:	4606      	mov	r6, r0
 800f346:	b118      	cbz	r0, 800f350 <_vfiprintf_r+0x18>
 800f348:	6983      	ldr	r3, [r0, #24]
 800f34a:	b90b      	cbnz	r3, 800f350 <_vfiprintf_r+0x18>
 800f34c:	f7fe fc24 	bl	800db98 <__sinit>
 800f350:	4b89      	ldr	r3, [pc, #548]	; (800f578 <_vfiprintf_r+0x240>)
 800f352:	429d      	cmp	r5, r3
 800f354:	d11b      	bne.n	800f38e <_vfiprintf_r+0x56>
 800f356:	6875      	ldr	r5, [r6, #4]
 800f358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f35a:	07d9      	lsls	r1, r3, #31
 800f35c:	d405      	bmi.n	800f36a <_vfiprintf_r+0x32>
 800f35e:	89ab      	ldrh	r3, [r5, #12]
 800f360:	059a      	lsls	r2, r3, #22
 800f362:	d402      	bmi.n	800f36a <_vfiprintf_r+0x32>
 800f364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f366:	f7ff f828 	bl	800e3ba <__retarget_lock_acquire_recursive>
 800f36a:	89ab      	ldrh	r3, [r5, #12]
 800f36c:	071b      	lsls	r3, r3, #28
 800f36e:	d501      	bpl.n	800f374 <_vfiprintf_r+0x3c>
 800f370:	692b      	ldr	r3, [r5, #16]
 800f372:	b9eb      	cbnz	r3, 800f3b0 <_vfiprintf_r+0x78>
 800f374:	4629      	mov	r1, r5
 800f376:	4630      	mov	r0, r6
 800f378:	f7fd fc0c 	bl	800cb94 <__swsetup_r>
 800f37c:	b1c0      	cbz	r0, 800f3b0 <_vfiprintf_r+0x78>
 800f37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f380:	07dc      	lsls	r4, r3, #31
 800f382:	d50e      	bpl.n	800f3a2 <_vfiprintf_r+0x6a>
 800f384:	f04f 30ff 	mov.w	r0, #4294967295
 800f388:	b01d      	add	sp, #116	; 0x74
 800f38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f38e:	4b7b      	ldr	r3, [pc, #492]	; (800f57c <_vfiprintf_r+0x244>)
 800f390:	429d      	cmp	r5, r3
 800f392:	d101      	bne.n	800f398 <_vfiprintf_r+0x60>
 800f394:	68b5      	ldr	r5, [r6, #8]
 800f396:	e7df      	b.n	800f358 <_vfiprintf_r+0x20>
 800f398:	4b79      	ldr	r3, [pc, #484]	; (800f580 <_vfiprintf_r+0x248>)
 800f39a:	429d      	cmp	r5, r3
 800f39c:	bf08      	it	eq
 800f39e:	68f5      	ldreq	r5, [r6, #12]
 800f3a0:	e7da      	b.n	800f358 <_vfiprintf_r+0x20>
 800f3a2:	89ab      	ldrh	r3, [r5, #12]
 800f3a4:	0598      	lsls	r0, r3, #22
 800f3a6:	d4ed      	bmi.n	800f384 <_vfiprintf_r+0x4c>
 800f3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3aa:	f7ff f807 	bl	800e3bc <__retarget_lock_release_recursive>
 800f3ae:	e7e9      	b.n	800f384 <_vfiprintf_r+0x4c>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3b4:	2320      	movs	r3, #32
 800f3b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3be:	2330      	movs	r3, #48	; 0x30
 800f3c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f584 <_vfiprintf_r+0x24c>
 800f3c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3c8:	f04f 0901 	mov.w	r9, #1
 800f3cc:	4623      	mov	r3, r4
 800f3ce:	469a      	mov	sl, r3
 800f3d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3d4:	b10a      	cbz	r2, 800f3da <_vfiprintf_r+0xa2>
 800f3d6:	2a25      	cmp	r2, #37	; 0x25
 800f3d8:	d1f9      	bne.n	800f3ce <_vfiprintf_r+0x96>
 800f3da:	ebba 0b04 	subs.w	fp, sl, r4
 800f3de:	d00b      	beq.n	800f3f8 <_vfiprintf_r+0xc0>
 800f3e0:	465b      	mov	r3, fp
 800f3e2:	4622      	mov	r2, r4
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	f7ff ff93 	bl	800f312 <__sfputs_r>
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	f000 80aa 	beq.w	800f546 <_vfiprintf_r+0x20e>
 800f3f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3f4:	445a      	add	r2, fp
 800f3f6:	9209      	str	r2, [sp, #36]	; 0x24
 800f3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f000 80a2 	beq.w	800f546 <_vfiprintf_r+0x20e>
 800f402:	2300      	movs	r3, #0
 800f404:	f04f 32ff 	mov.w	r2, #4294967295
 800f408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f40c:	f10a 0a01 	add.w	sl, sl, #1
 800f410:	9304      	str	r3, [sp, #16]
 800f412:	9307      	str	r3, [sp, #28]
 800f414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f418:	931a      	str	r3, [sp, #104]	; 0x68
 800f41a:	4654      	mov	r4, sl
 800f41c:	2205      	movs	r2, #5
 800f41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f422:	4858      	ldr	r0, [pc, #352]	; (800f584 <_vfiprintf_r+0x24c>)
 800f424:	f7f0 fedc 	bl	80001e0 <memchr>
 800f428:	9a04      	ldr	r2, [sp, #16]
 800f42a:	b9d8      	cbnz	r0, 800f464 <_vfiprintf_r+0x12c>
 800f42c:	06d1      	lsls	r1, r2, #27
 800f42e:	bf44      	itt	mi
 800f430:	2320      	movmi	r3, #32
 800f432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f436:	0713      	lsls	r3, r2, #28
 800f438:	bf44      	itt	mi
 800f43a:	232b      	movmi	r3, #43	; 0x2b
 800f43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f440:	f89a 3000 	ldrb.w	r3, [sl]
 800f444:	2b2a      	cmp	r3, #42	; 0x2a
 800f446:	d015      	beq.n	800f474 <_vfiprintf_r+0x13c>
 800f448:	9a07      	ldr	r2, [sp, #28]
 800f44a:	4654      	mov	r4, sl
 800f44c:	2000      	movs	r0, #0
 800f44e:	f04f 0c0a 	mov.w	ip, #10
 800f452:	4621      	mov	r1, r4
 800f454:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f458:	3b30      	subs	r3, #48	; 0x30
 800f45a:	2b09      	cmp	r3, #9
 800f45c:	d94e      	bls.n	800f4fc <_vfiprintf_r+0x1c4>
 800f45e:	b1b0      	cbz	r0, 800f48e <_vfiprintf_r+0x156>
 800f460:	9207      	str	r2, [sp, #28]
 800f462:	e014      	b.n	800f48e <_vfiprintf_r+0x156>
 800f464:	eba0 0308 	sub.w	r3, r0, r8
 800f468:	fa09 f303 	lsl.w	r3, r9, r3
 800f46c:	4313      	orrs	r3, r2
 800f46e:	9304      	str	r3, [sp, #16]
 800f470:	46a2      	mov	sl, r4
 800f472:	e7d2      	b.n	800f41a <_vfiprintf_r+0xe2>
 800f474:	9b03      	ldr	r3, [sp, #12]
 800f476:	1d19      	adds	r1, r3, #4
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	9103      	str	r1, [sp, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	bfbb      	ittet	lt
 800f480:	425b      	neglt	r3, r3
 800f482:	f042 0202 	orrlt.w	r2, r2, #2
 800f486:	9307      	strge	r3, [sp, #28]
 800f488:	9307      	strlt	r3, [sp, #28]
 800f48a:	bfb8      	it	lt
 800f48c:	9204      	strlt	r2, [sp, #16]
 800f48e:	7823      	ldrb	r3, [r4, #0]
 800f490:	2b2e      	cmp	r3, #46	; 0x2e
 800f492:	d10c      	bne.n	800f4ae <_vfiprintf_r+0x176>
 800f494:	7863      	ldrb	r3, [r4, #1]
 800f496:	2b2a      	cmp	r3, #42	; 0x2a
 800f498:	d135      	bne.n	800f506 <_vfiprintf_r+0x1ce>
 800f49a:	9b03      	ldr	r3, [sp, #12]
 800f49c:	1d1a      	adds	r2, r3, #4
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	9203      	str	r2, [sp, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	bfb8      	it	lt
 800f4a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4aa:	3402      	adds	r4, #2
 800f4ac:	9305      	str	r3, [sp, #20]
 800f4ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f594 <_vfiprintf_r+0x25c>
 800f4b2:	7821      	ldrb	r1, [r4, #0]
 800f4b4:	2203      	movs	r2, #3
 800f4b6:	4650      	mov	r0, sl
 800f4b8:	f7f0 fe92 	bl	80001e0 <memchr>
 800f4bc:	b140      	cbz	r0, 800f4d0 <_vfiprintf_r+0x198>
 800f4be:	2340      	movs	r3, #64	; 0x40
 800f4c0:	eba0 000a 	sub.w	r0, r0, sl
 800f4c4:	fa03 f000 	lsl.w	r0, r3, r0
 800f4c8:	9b04      	ldr	r3, [sp, #16]
 800f4ca:	4303      	orrs	r3, r0
 800f4cc:	3401      	adds	r4, #1
 800f4ce:	9304      	str	r3, [sp, #16]
 800f4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d4:	482c      	ldr	r0, [pc, #176]	; (800f588 <_vfiprintf_r+0x250>)
 800f4d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4da:	2206      	movs	r2, #6
 800f4dc:	f7f0 fe80 	bl	80001e0 <memchr>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	d03f      	beq.n	800f564 <_vfiprintf_r+0x22c>
 800f4e4:	4b29      	ldr	r3, [pc, #164]	; (800f58c <_vfiprintf_r+0x254>)
 800f4e6:	bb1b      	cbnz	r3, 800f530 <_vfiprintf_r+0x1f8>
 800f4e8:	9b03      	ldr	r3, [sp, #12]
 800f4ea:	3307      	adds	r3, #7
 800f4ec:	f023 0307 	bic.w	r3, r3, #7
 800f4f0:	3308      	adds	r3, #8
 800f4f2:	9303      	str	r3, [sp, #12]
 800f4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4f6:	443b      	add	r3, r7
 800f4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4fa:	e767      	b.n	800f3cc <_vfiprintf_r+0x94>
 800f4fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f500:	460c      	mov	r4, r1
 800f502:	2001      	movs	r0, #1
 800f504:	e7a5      	b.n	800f452 <_vfiprintf_r+0x11a>
 800f506:	2300      	movs	r3, #0
 800f508:	3401      	adds	r4, #1
 800f50a:	9305      	str	r3, [sp, #20]
 800f50c:	4619      	mov	r1, r3
 800f50e:	f04f 0c0a 	mov.w	ip, #10
 800f512:	4620      	mov	r0, r4
 800f514:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f518:	3a30      	subs	r2, #48	; 0x30
 800f51a:	2a09      	cmp	r2, #9
 800f51c:	d903      	bls.n	800f526 <_vfiprintf_r+0x1ee>
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d0c5      	beq.n	800f4ae <_vfiprintf_r+0x176>
 800f522:	9105      	str	r1, [sp, #20]
 800f524:	e7c3      	b.n	800f4ae <_vfiprintf_r+0x176>
 800f526:	fb0c 2101 	mla	r1, ip, r1, r2
 800f52a:	4604      	mov	r4, r0
 800f52c:	2301      	movs	r3, #1
 800f52e:	e7f0      	b.n	800f512 <_vfiprintf_r+0x1da>
 800f530:	ab03      	add	r3, sp, #12
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	462a      	mov	r2, r5
 800f536:	4b16      	ldr	r3, [pc, #88]	; (800f590 <_vfiprintf_r+0x258>)
 800f538:	a904      	add	r1, sp, #16
 800f53a:	4630      	mov	r0, r6
 800f53c:	f7fb fd9c 	bl	800b078 <_printf_float>
 800f540:	4607      	mov	r7, r0
 800f542:	1c78      	adds	r0, r7, #1
 800f544:	d1d6      	bne.n	800f4f4 <_vfiprintf_r+0x1bc>
 800f546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f548:	07d9      	lsls	r1, r3, #31
 800f54a:	d405      	bmi.n	800f558 <_vfiprintf_r+0x220>
 800f54c:	89ab      	ldrh	r3, [r5, #12]
 800f54e:	059a      	lsls	r2, r3, #22
 800f550:	d402      	bmi.n	800f558 <_vfiprintf_r+0x220>
 800f552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f554:	f7fe ff32 	bl	800e3bc <__retarget_lock_release_recursive>
 800f558:	89ab      	ldrh	r3, [r5, #12]
 800f55a:	065b      	lsls	r3, r3, #25
 800f55c:	f53f af12 	bmi.w	800f384 <_vfiprintf_r+0x4c>
 800f560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f562:	e711      	b.n	800f388 <_vfiprintf_r+0x50>
 800f564:	ab03      	add	r3, sp, #12
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	462a      	mov	r2, r5
 800f56a:	4b09      	ldr	r3, [pc, #36]	; (800f590 <_vfiprintf_r+0x258>)
 800f56c:	a904      	add	r1, sp, #16
 800f56e:	4630      	mov	r0, r6
 800f570:	f7fc f826 	bl	800b5c0 <_printf_i>
 800f574:	e7e4      	b.n	800f540 <_vfiprintf_r+0x208>
 800f576:	bf00      	nop
 800f578:	08010e44 	.word	0x08010e44
 800f57c:	08010e64 	.word	0x08010e64
 800f580:	08010e24 	.word	0x08010e24
 800f584:	0801105c 	.word	0x0801105c
 800f588:	08011066 	.word	0x08011066
 800f58c:	0800b079 	.word	0x0800b079
 800f590:	0800f313 	.word	0x0800f313
 800f594:	08011062 	.word	0x08011062

0800f598 <nan>:
 800f598:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f5a0 <nan+0x8>
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	00000000 	.word	0x00000000
 800f5a4:	7ff80000 	.word	0x7ff80000

0800f5a8 <_sbrk_r>:
 800f5a8:	b538      	push	{r3, r4, r5, lr}
 800f5aa:	4d06      	ldr	r5, [pc, #24]	; (800f5c4 <_sbrk_r+0x1c>)
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	4608      	mov	r0, r1
 800f5b2:	602b      	str	r3, [r5, #0]
 800f5b4:	f7f5 fcbe 	bl	8004f34 <_sbrk>
 800f5b8:	1c43      	adds	r3, r0, #1
 800f5ba:	d102      	bne.n	800f5c2 <_sbrk_r+0x1a>
 800f5bc:	682b      	ldr	r3, [r5, #0]
 800f5be:	b103      	cbz	r3, 800f5c2 <_sbrk_r+0x1a>
 800f5c0:	6023      	str	r3, [r4, #0]
 800f5c2:	bd38      	pop	{r3, r4, r5, pc}
 800f5c4:	20012288 	.word	0x20012288

0800f5c8 <__sread>:
 800f5c8:	b510      	push	{r4, lr}
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d0:	f000 f93a 	bl	800f848 <_read_r>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	bfab      	itete	ge
 800f5d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5da:	89a3      	ldrhlt	r3, [r4, #12]
 800f5dc:	181b      	addge	r3, r3, r0
 800f5de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5e2:	bfac      	ite	ge
 800f5e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f5e6:	81a3      	strhlt	r3, [r4, #12]
 800f5e8:	bd10      	pop	{r4, pc}

0800f5ea <__swrite>:
 800f5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ee:	461f      	mov	r7, r3
 800f5f0:	898b      	ldrh	r3, [r1, #12]
 800f5f2:	05db      	lsls	r3, r3, #23
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	4616      	mov	r6, r2
 800f5fa:	d505      	bpl.n	800f608 <__swrite+0x1e>
 800f5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f600:	2302      	movs	r3, #2
 800f602:	2200      	movs	r2, #0
 800f604:	f000 f8b8 	bl	800f778 <_lseek_r>
 800f608:	89a3      	ldrh	r3, [r4, #12]
 800f60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f60e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f612:	81a3      	strh	r3, [r4, #12]
 800f614:	4632      	mov	r2, r6
 800f616:	463b      	mov	r3, r7
 800f618:	4628      	mov	r0, r5
 800f61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f61e:	f000 b837 	b.w	800f690 <_write_r>

0800f622 <__sseek>:
 800f622:	b510      	push	{r4, lr}
 800f624:	460c      	mov	r4, r1
 800f626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f62a:	f000 f8a5 	bl	800f778 <_lseek_r>
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	89a3      	ldrh	r3, [r4, #12]
 800f632:	bf15      	itete	ne
 800f634:	6560      	strne	r0, [r4, #84]	; 0x54
 800f636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f63a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f63e:	81a3      	strheq	r3, [r4, #12]
 800f640:	bf18      	it	ne
 800f642:	81a3      	strhne	r3, [r4, #12]
 800f644:	bd10      	pop	{r4, pc}

0800f646 <__sclose>:
 800f646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f64a:	f000 b851 	b.w	800f6f0 <_close_r>

0800f64e <strncmp>:
 800f64e:	b510      	push	{r4, lr}
 800f650:	b17a      	cbz	r2, 800f672 <strncmp+0x24>
 800f652:	4603      	mov	r3, r0
 800f654:	3901      	subs	r1, #1
 800f656:	1884      	adds	r4, r0, r2
 800f658:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f65c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f660:	4290      	cmp	r0, r2
 800f662:	d101      	bne.n	800f668 <strncmp+0x1a>
 800f664:	42a3      	cmp	r3, r4
 800f666:	d101      	bne.n	800f66c <strncmp+0x1e>
 800f668:	1a80      	subs	r0, r0, r2
 800f66a:	bd10      	pop	{r4, pc}
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d1f3      	bne.n	800f658 <strncmp+0xa>
 800f670:	e7fa      	b.n	800f668 <strncmp+0x1a>
 800f672:	4610      	mov	r0, r2
 800f674:	e7f9      	b.n	800f66a <strncmp+0x1c>

0800f676 <__ascii_wctomb>:
 800f676:	b149      	cbz	r1, 800f68c <__ascii_wctomb+0x16>
 800f678:	2aff      	cmp	r2, #255	; 0xff
 800f67a:	bf85      	ittet	hi
 800f67c:	238a      	movhi	r3, #138	; 0x8a
 800f67e:	6003      	strhi	r3, [r0, #0]
 800f680:	700a      	strbls	r2, [r1, #0]
 800f682:	f04f 30ff 	movhi.w	r0, #4294967295
 800f686:	bf98      	it	ls
 800f688:	2001      	movls	r0, #1
 800f68a:	4770      	bx	lr
 800f68c:	4608      	mov	r0, r1
 800f68e:	4770      	bx	lr

0800f690 <_write_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4d07      	ldr	r5, [pc, #28]	; (800f6b0 <_write_r+0x20>)
 800f694:	4604      	mov	r4, r0
 800f696:	4608      	mov	r0, r1
 800f698:	4611      	mov	r1, r2
 800f69a:	2200      	movs	r2, #0
 800f69c:	602a      	str	r2, [r5, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	f7f5 fbf7 	bl	8004e92 <_write>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d102      	bne.n	800f6ae <_write_r+0x1e>
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	b103      	cbz	r3, 800f6ae <_write_r+0x1e>
 800f6ac:	6023      	str	r3, [r4, #0]
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	20012288 	.word	0x20012288

0800f6b4 <__assert_func>:
 800f6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6b6:	4614      	mov	r4, r2
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	4b09      	ldr	r3, [pc, #36]	; (800f6e0 <__assert_func+0x2c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4605      	mov	r5, r0
 800f6c0:	68d8      	ldr	r0, [r3, #12]
 800f6c2:	b14c      	cbz	r4, 800f6d8 <__assert_func+0x24>
 800f6c4:	4b07      	ldr	r3, [pc, #28]	; (800f6e4 <__assert_func+0x30>)
 800f6c6:	9100      	str	r1, [sp, #0]
 800f6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6cc:	4906      	ldr	r1, [pc, #24]	; (800f6e8 <__assert_func+0x34>)
 800f6ce:	462b      	mov	r3, r5
 800f6d0:	f000 f81e 	bl	800f710 <fiprintf>
 800f6d4:	f000 f8ca 	bl	800f86c <abort>
 800f6d8:	4b04      	ldr	r3, [pc, #16]	; (800f6ec <__assert_func+0x38>)
 800f6da:	461c      	mov	r4, r3
 800f6dc:	e7f3      	b.n	800f6c6 <__assert_func+0x12>
 800f6de:	bf00      	nop
 800f6e0:	2000000c 	.word	0x2000000c
 800f6e4:	0801106d 	.word	0x0801106d
 800f6e8:	0801107a 	.word	0x0801107a
 800f6ec:	080110a8 	.word	0x080110a8

0800f6f0 <_close_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d06      	ldr	r5, [pc, #24]	; (800f70c <_close_r+0x1c>)
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	602b      	str	r3, [r5, #0]
 800f6fc:	f7f5 fbe5 	bl	8004eca <_close>
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	d102      	bne.n	800f70a <_close_r+0x1a>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	b103      	cbz	r3, 800f70a <_close_r+0x1a>
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	bd38      	pop	{r3, r4, r5, pc}
 800f70c:	20012288 	.word	0x20012288

0800f710 <fiprintf>:
 800f710:	b40e      	push	{r1, r2, r3}
 800f712:	b503      	push	{r0, r1, lr}
 800f714:	4601      	mov	r1, r0
 800f716:	ab03      	add	r3, sp, #12
 800f718:	4805      	ldr	r0, [pc, #20]	; (800f730 <fiprintf+0x20>)
 800f71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f71e:	6800      	ldr	r0, [r0, #0]
 800f720:	9301      	str	r3, [sp, #4]
 800f722:	f7ff fe09 	bl	800f338 <_vfiprintf_r>
 800f726:	b002      	add	sp, #8
 800f728:	f85d eb04 	ldr.w	lr, [sp], #4
 800f72c:	b003      	add	sp, #12
 800f72e:	4770      	bx	lr
 800f730:	2000000c 	.word	0x2000000c

0800f734 <_fstat_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4d07      	ldr	r5, [pc, #28]	; (800f754 <_fstat_r+0x20>)
 800f738:	2300      	movs	r3, #0
 800f73a:	4604      	mov	r4, r0
 800f73c:	4608      	mov	r0, r1
 800f73e:	4611      	mov	r1, r2
 800f740:	602b      	str	r3, [r5, #0]
 800f742:	f7f5 fbce 	bl	8004ee2 <_fstat>
 800f746:	1c43      	adds	r3, r0, #1
 800f748:	d102      	bne.n	800f750 <_fstat_r+0x1c>
 800f74a:	682b      	ldr	r3, [r5, #0]
 800f74c:	b103      	cbz	r3, 800f750 <_fstat_r+0x1c>
 800f74e:	6023      	str	r3, [r4, #0]
 800f750:	bd38      	pop	{r3, r4, r5, pc}
 800f752:	bf00      	nop
 800f754:	20012288 	.word	0x20012288

0800f758 <_isatty_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d06      	ldr	r5, [pc, #24]	; (800f774 <_isatty_r+0x1c>)
 800f75c:	2300      	movs	r3, #0
 800f75e:	4604      	mov	r4, r0
 800f760:	4608      	mov	r0, r1
 800f762:	602b      	str	r3, [r5, #0]
 800f764:	f7f5 fbcd 	bl	8004f02 <_isatty>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d102      	bne.n	800f772 <_isatty_r+0x1a>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b103      	cbz	r3, 800f772 <_isatty_r+0x1a>
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	20012288 	.word	0x20012288

0800f778 <_lseek_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	; (800f798 <_lseek_r+0x20>)
 800f77c:	4604      	mov	r4, r0
 800f77e:	4608      	mov	r0, r1
 800f780:	4611      	mov	r1, r2
 800f782:	2200      	movs	r2, #0
 800f784:	602a      	str	r2, [r5, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	f7f5 fbc6 	bl	8004f18 <_lseek>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_lseek_r+0x1e>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_lseek_r+0x1e>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	20012288 	.word	0x20012288

0800f79c <memmove>:
 800f79c:	4288      	cmp	r0, r1
 800f79e:	b510      	push	{r4, lr}
 800f7a0:	eb01 0402 	add.w	r4, r1, r2
 800f7a4:	d902      	bls.n	800f7ac <memmove+0x10>
 800f7a6:	4284      	cmp	r4, r0
 800f7a8:	4623      	mov	r3, r4
 800f7aa:	d807      	bhi.n	800f7bc <memmove+0x20>
 800f7ac:	1e43      	subs	r3, r0, #1
 800f7ae:	42a1      	cmp	r1, r4
 800f7b0:	d008      	beq.n	800f7c4 <memmove+0x28>
 800f7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ba:	e7f8      	b.n	800f7ae <memmove+0x12>
 800f7bc:	4402      	add	r2, r0
 800f7be:	4601      	mov	r1, r0
 800f7c0:	428a      	cmp	r2, r1
 800f7c2:	d100      	bne.n	800f7c6 <memmove+0x2a>
 800f7c4:	bd10      	pop	{r4, pc}
 800f7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7ce:	e7f7      	b.n	800f7c0 <memmove+0x24>

0800f7d0 <__malloc_lock>:
 800f7d0:	4801      	ldr	r0, [pc, #4]	; (800f7d8 <__malloc_lock+0x8>)
 800f7d2:	f7fe bdf2 	b.w	800e3ba <__retarget_lock_acquire_recursive>
 800f7d6:	bf00      	nop
 800f7d8:	2001227c 	.word	0x2001227c

0800f7dc <__malloc_unlock>:
 800f7dc:	4801      	ldr	r0, [pc, #4]	; (800f7e4 <__malloc_unlock+0x8>)
 800f7de:	f7fe bded 	b.w	800e3bc <__retarget_lock_release_recursive>
 800f7e2:	bf00      	nop
 800f7e4:	2001227c 	.word	0x2001227c

0800f7e8 <_realloc_r>:
 800f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ec:	4680      	mov	r8, r0
 800f7ee:	4614      	mov	r4, r2
 800f7f0:	460e      	mov	r6, r1
 800f7f2:	b921      	cbnz	r1, 800f7fe <_realloc_r+0x16>
 800f7f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	f7ff bba3 	b.w	800ef44 <_malloc_r>
 800f7fe:	b92a      	cbnz	r2, 800f80c <_realloc_r+0x24>
 800f800:	f7ff fb34 	bl	800ee6c <_free_r>
 800f804:	4625      	mov	r5, r4
 800f806:	4628      	mov	r0, r5
 800f808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f80c:	f000 f835 	bl	800f87a <_malloc_usable_size_r>
 800f810:	4284      	cmp	r4, r0
 800f812:	4607      	mov	r7, r0
 800f814:	d802      	bhi.n	800f81c <_realloc_r+0x34>
 800f816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f81a:	d812      	bhi.n	800f842 <_realloc_r+0x5a>
 800f81c:	4621      	mov	r1, r4
 800f81e:	4640      	mov	r0, r8
 800f820:	f7ff fb90 	bl	800ef44 <_malloc_r>
 800f824:	4605      	mov	r5, r0
 800f826:	2800      	cmp	r0, #0
 800f828:	d0ed      	beq.n	800f806 <_realloc_r+0x1e>
 800f82a:	42bc      	cmp	r4, r7
 800f82c:	4622      	mov	r2, r4
 800f82e:	4631      	mov	r1, r6
 800f830:	bf28      	it	cs
 800f832:	463a      	movcs	r2, r7
 800f834:	f7fb fb6a 	bl	800af0c <memcpy>
 800f838:	4631      	mov	r1, r6
 800f83a:	4640      	mov	r0, r8
 800f83c:	f7ff fb16 	bl	800ee6c <_free_r>
 800f840:	e7e1      	b.n	800f806 <_realloc_r+0x1e>
 800f842:	4635      	mov	r5, r6
 800f844:	e7df      	b.n	800f806 <_realloc_r+0x1e>
	...

0800f848 <_read_r>:
 800f848:	b538      	push	{r3, r4, r5, lr}
 800f84a:	4d07      	ldr	r5, [pc, #28]	; (800f868 <_read_r+0x20>)
 800f84c:	4604      	mov	r4, r0
 800f84e:	4608      	mov	r0, r1
 800f850:	4611      	mov	r1, r2
 800f852:	2200      	movs	r2, #0
 800f854:	602a      	str	r2, [r5, #0]
 800f856:	461a      	mov	r2, r3
 800f858:	f7f5 fafe 	bl	8004e58 <_read>
 800f85c:	1c43      	adds	r3, r0, #1
 800f85e:	d102      	bne.n	800f866 <_read_r+0x1e>
 800f860:	682b      	ldr	r3, [r5, #0]
 800f862:	b103      	cbz	r3, 800f866 <_read_r+0x1e>
 800f864:	6023      	str	r3, [r4, #0]
 800f866:	bd38      	pop	{r3, r4, r5, pc}
 800f868:	20012288 	.word	0x20012288

0800f86c <abort>:
 800f86c:	b508      	push	{r3, lr}
 800f86e:	2006      	movs	r0, #6
 800f870:	f000 f834 	bl	800f8dc <raise>
 800f874:	2001      	movs	r0, #1
 800f876:	f7f5 fae5 	bl	8004e44 <_exit>

0800f87a <_malloc_usable_size_r>:
 800f87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f87e:	1f18      	subs	r0, r3, #4
 800f880:	2b00      	cmp	r3, #0
 800f882:	bfbc      	itt	lt
 800f884:	580b      	ldrlt	r3, [r1, r0]
 800f886:	18c0      	addlt	r0, r0, r3
 800f888:	4770      	bx	lr

0800f88a <_raise_r>:
 800f88a:	291f      	cmp	r1, #31
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	4604      	mov	r4, r0
 800f890:	460d      	mov	r5, r1
 800f892:	d904      	bls.n	800f89e <_raise_r+0x14>
 800f894:	2316      	movs	r3, #22
 800f896:	6003      	str	r3, [r0, #0]
 800f898:	f04f 30ff 	mov.w	r0, #4294967295
 800f89c:	bd38      	pop	{r3, r4, r5, pc}
 800f89e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8a0:	b112      	cbz	r2, 800f8a8 <_raise_r+0x1e>
 800f8a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8a6:	b94b      	cbnz	r3, 800f8bc <_raise_r+0x32>
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 f831 	bl	800f910 <_getpid_r>
 800f8ae:	462a      	mov	r2, r5
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8b8:	f000 b818 	b.w	800f8ec <_kill_r>
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d00a      	beq.n	800f8d6 <_raise_r+0x4c>
 800f8c0:	1c59      	adds	r1, r3, #1
 800f8c2:	d103      	bne.n	800f8cc <_raise_r+0x42>
 800f8c4:	2316      	movs	r3, #22
 800f8c6:	6003      	str	r3, [r0, #0]
 800f8c8:	2001      	movs	r0, #1
 800f8ca:	e7e7      	b.n	800f89c <_raise_r+0x12>
 800f8cc:	2400      	movs	r4, #0
 800f8ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	4798      	blx	r3
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	e7e0      	b.n	800f89c <_raise_r+0x12>
	...

0800f8dc <raise>:
 800f8dc:	4b02      	ldr	r3, [pc, #8]	; (800f8e8 <raise+0xc>)
 800f8de:	4601      	mov	r1, r0
 800f8e0:	6818      	ldr	r0, [r3, #0]
 800f8e2:	f7ff bfd2 	b.w	800f88a <_raise_r>
 800f8e6:	bf00      	nop
 800f8e8:	2000000c 	.word	0x2000000c

0800f8ec <_kill_r>:
 800f8ec:	b538      	push	{r3, r4, r5, lr}
 800f8ee:	4d07      	ldr	r5, [pc, #28]	; (800f90c <_kill_r+0x20>)
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	4608      	mov	r0, r1
 800f8f6:	4611      	mov	r1, r2
 800f8f8:	602b      	str	r3, [r5, #0]
 800f8fa:	f7f5 fa93 	bl	8004e24 <_kill>
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	d102      	bne.n	800f908 <_kill_r+0x1c>
 800f902:	682b      	ldr	r3, [r5, #0]
 800f904:	b103      	cbz	r3, 800f908 <_kill_r+0x1c>
 800f906:	6023      	str	r3, [r4, #0]
 800f908:	bd38      	pop	{r3, r4, r5, pc}
 800f90a:	bf00      	nop
 800f90c:	20012288 	.word	0x20012288

0800f910 <_getpid_r>:
 800f910:	f7f5 ba80 	b.w	8004e14 <_getpid>

0800f914 <pow>:
 800f914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f916:	ed2d 8b02 	vpush	{d8}
 800f91a:	eeb0 8a40 	vmov.f32	s16, s0
 800f91e:	eef0 8a60 	vmov.f32	s17, s1
 800f922:	ec55 4b11 	vmov	r4, r5, d1
 800f926:	f000 f893 	bl	800fa50 <__ieee754_pow>
 800f92a:	4622      	mov	r2, r4
 800f92c:	462b      	mov	r3, r5
 800f92e:	4620      	mov	r0, r4
 800f930:	4629      	mov	r1, r5
 800f932:	ec57 6b10 	vmov	r6, r7, d0
 800f936:	f7f1 f8f9 	bl	8000b2c <__aeabi_dcmpun>
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d13b      	bne.n	800f9b6 <pow+0xa2>
 800f93e:	ec51 0b18 	vmov	r0, r1, d8
 800f942:	2200      	movs	r2, #0
 800f944:	2300      	movs	r3, #0
 800f946:	f7f1 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800f94a:	b1b8      	cbz	r0, 800f97c <pow+0x68>
 800f94c:	2200      	movs	r2, #0
 800f94e:	2300      	movs	r3, #0
 800f950:	4620      	mov	r0, r4
 800f952:	4629      	mov	r1, r5
 800f954:	f7f1 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d146      	bne.n	800f9ea <pow+0xd6>
 800f95c:	ec45 4b10 	vmov	d0, r4, r5
 800f960:	f000 fe8f 	bl	8010682 <finite>
 800f964:	b338      	cbz	r0, 800f9b6 <pow+0xa2>
 800f966:	2200      	movs	r2, #0
 800f968:	2300      	movs	r3, #0
 800f96a:	4620      	mov	r0, r4
 800f96c:	4629      	mov	r1, r5
 800f96e:	f7f1 f8b5 	bl	8000adc <__aeabi_dcmplt>
 800f972:	b300      	cbz	r0, 800f9b6 <pow+0xa2>
 800f974:	f7fb faa0 	bl	800aeb8 <__errno>
 800f978:	2322      	movs	r3, #34	; 0x22
 800f97a:	e01b      	b.n	800f9b4 <pow+0xa0>
 800f97c:	ec47 6b10 	vmov	d0, r6, r7
 800f980:	f000 fe7f 	bl	8010682 <finite>
 800f984:	b9e0      	cbnz	r0, 800f9c0 <pow+0xac>
 800f986:	eeb0 0a48 	vmov.f32	s0, s16
 800f98a:	eef0 0a68 	vmov.f32	s1, s17
 800f98e:	f000 fe78 	bl	8010682 <finite>
 800f992:	b1a8      	cbz	r0, 800f9c0 <pow+0xac>
 800f994:	ec45 4b10 	vmov	d0, r4, r5
 800f998:	f000 fe73 	bl	8010682 <finite>
 800f99c:	b180      	cbz	r0, 800f9c0 <pow+0xac>
 800f99e:	4632      	mov	r2, r6
 800f9a0:	463b      	mov	r3, r7
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	4639      	mov	r1, r7
 800f9a6:	f7f1 f8c1 	bl	8000b2c <__aeabi_dcmpun>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d0e2      	beq.n	800f974 <pow+0x60>
 800f9ae:	f7fb fa83 	bl	800aeb8 <__errno>
 800f9b2:	2321      	movs	r3, #33	; 0x21
 800f9b4:	6003      	str	r3, [r0, #0]
 800f9b6:	ecbd 8b02 	vpop	{d8}
 800f9ba:	ec47 6b10 	vmov	d0, r6, r7
 800f9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	4639      	mov	r1, r7
 800f9c8:	f7f1 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d0f2      	beq.n	800f9b6 <pow+0xa2>
 800f9d0:	eeb0 0a48 	vmov.f32	s0, s16
 800f9d4:	eef0 0a68 	vmov.f32	s1, s17
 800f9d8:	f000 fe53 	bl	8010682 <finite>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d0ea      	beq.n	800f9b6 <pow+0xa2>
 800f9e0:	ec45 4b10 	vmov	d0, r4, r5
 800f9e4:	f000 fe4d 	bl	8010682 <finite>
 800f9e8:	e7c3      	b.n	800f972 <pow+0x5e>
 800f9ea:	4f01      	ldr	r7, [pc, #4]	; (800f9f0 <pow+0xdc>)
 800f9ec:	2600      	movs	r6, #0
 800f9ee:	e7e2      	b.n	800f9b6 <pow+0xa2>
 800f9f0:	3ff00000 	.word	0x3ff00000

0800f9f4 <sqrt>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	ed2d 8b02 	vpush	{d8}
 800f9fa:	ec55 4b10 	vmov	r4, r5, d0
 800f9fe:	f000 fd55 	bl	80104ac <__ieee754_sqrt>
 800fa02:	4622      	mov	r2, r4
 800fa04:	462b      	mov	r3, r5
 800fa06:	4620      	mov	r0, r4
 800fa08:	4629      	mov	r1, r5
 800fa0a:	eeb0 8a40 	vmov.f32	s16, s0
 800fa0e:	eef0 8a60 	vmov.f32	s17, s1
 800fa12:	f7f1 f88b 	bl	8000b2c <__aeabi_dcmpun>
 800fa16:	b990      	cbnz	r0, 800fa3e <sqrt+0x4a>
 800fa18:	2200      	movs	r2, #0
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	4629      	mov	r1, r5
 800fa20:	f7f1 f85c 	bl	8000adc <__aeabi_dcmplt>
 800fa24:	b158      	cbz	r0, 800fa3e <sqrt+0x4a>
 800fa26:	f7fb fa47 	bl	800aeb8 <__errno>
 800fa2a:	2321      	movs	r3, #33	; 0x21
 800fa2c:	6003      	str	r3, [r0, #0]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	2300      	movs	r3, #0
 800fa32:	4610      	mov	r0, r2
 800fa34:	4619      	mov	r1, r3
 800fa36:	f7f0 ff09 	bl	800084c <__aeabi_ddiv>
 800fa3a:	ec41 0b18 	vmov	d8, r0, r1
 800fa3e:	eeb0 0a48 	vmov.f32	s0, s16
 800fa42:	eef0 0a68 	vmov.f32	s1, s17
 800fa46:	ecbd 8b02 	vpop	{d8}
 800fa4a:	bd38      	pop	{r3, r4, r5, pc}
 800fa4c:	0000      	movs	r0, r0
	...

0800fa50 <__ieee754_pow>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	ed2d 8b06 	vpush	{d8-d10}
 800fa58:	b089      	sub	sp, #36	; 0x24
 800fa5a:	ed8d 1b00 	vstr	d1, [sp]
 800fa5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800fa62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800fa66:	ea58 0102 	orrs.w	r1, r8, r2
 800fa6a:	ec57 6b10 	vmov	r6, r7, d0
 800fa6e:	d115      	bne.n	800fa9c <__ieee754_pow+0x4c>
 800fa70:	19b3      	adds	r3, r6, r6
 800fa72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800fa76:	4152      	adcs	r2, r2
 800fa78:	4299      	cmp	r1, r3
 800fa7a:	4b89      	ldr	r3, [pc, #548]	; (800fca0 <__ieee754_pow+0x250>)
 800fa7c:	4193      	sbcs	r3, r2
 800fa7e:	f080 84d2 	bcs.w	8010426 <__ieee754_pow+0x9d6>
 800fa82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa86:	4630      	mov	r0, r6
 800fa88:	4639      	mov	r1, r7
 800fa8a:	f7f0 fbff 	bl	800028c <__adddf3>
 800fa8e:	ec41 0b10 	vmov	d0, r0, r1
 800fa92:	b009      	add	sp, #36	; 0x24
 800fa94:	ecbd 8b06 	vpop	{d8-d10}
 800fa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9c:	4b81      	ldr	r3, [pc, #516]	; (800fca4 <__ieee754_pow+0x254>)
 800fa9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800faa2:	429c      	cmp	r4, r3
 800faa4:	ee10 aa10 	vmov	sl, s0
 800faa8:	463d      	mov	r5, r7
 800faaa:	dc06      	bgt.n	800faba <__ieee754_pow+0x6a>
 800faac:	d101      	bne.n	800fab2 <__ieee754_pow+0x62>
 800faae:	2e00      	cmp	r6, #0
 800fab0:	d1e7      	bne.n	800fa82 <__ieee754_pow+0x32>
 800fab2:	4598      	cmp	r8, r3
 800fab4:	dc01      	bgt.n	800faba <__ieee754_pow+0x6a>
 800fab6:	d10f      	bne.n	800fad8 <__ieee754_pow+0x88>
 800fab8:	b172      	cbz	r2, 800fad8 <__ieee754_pow+0x88>
 800faba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fabe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fac2:	ea55 050a 	orrs.w	r5, r5, sl
 800fac6:	d1dc      	bne.n	800fa82 <__ieee754_pow+0x32>
 800fac8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800facc:	18db      	adds	r3, r3, r3
 800face:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fad2:	4152      	adcs	r2, r2
 800fad4:	429d      	cmp	r5, r3
 800fad6:	e7d0      	b.n	800fa7a <__ieee754_pow+0x2a>
 800fad8:	2d00      	cmp	r5, #0
 800fada:	da3b      	bge.n	800fb54 <__ieee754_pow+0x104>
 800fadc:	4b72      	ldr	r3, [pc, #456]	; (800fca8 <__ieee754_pow+0x258>)
 800fade:	4598      	cmp	r8, r3
 800fae0:	dc51      	bgt.n	800fb86 <__ieee754_pow+0x136>
 800fae2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fae6:	4598      	cmp	r8, r3
 800fae8:	f340 84ac 	ble.w	8010444 <__ieee754_pow+0x9f4>
 800faec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800faf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800faf4:	2b14      	cmp	r3, #20
 800faf6:	dd0f      	ble.n	800fb18 <__ieee754_pow+0xc8>
 800faf8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fafc:	fa22 f103 	lsr.w	r1, r2, r3
 800fb00:	fa01 f303 	lsl.w	r3, r1, r3
 800fb04:	4293      	cmp	r3, r2
 800fb06:	f040 849d 	bne.w	8010444 <__ieee754_pow+0x9f4>
 800fb0a:	f001 0101 	and.w	r1, r1, #1
 800fb0e:	f1c1 0302 	rsb	r3, r1, #2
 800fb12:	9304      	str	r3, [sp, #16]
 800fb14:	b182      	cbz	r2, 800fb38 <__ieee754_pow+0xe8>
 800fb16:	e05f      	b.n	800fbd8 <__ieee754_pow+0x188>
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	d15b      	bne.n	800fbd4 <__ieee754_pow+0x184>
 800fb1c:	f1c3 0314 	rsb	r3, r3, #20
 800fb20:	fa48 f103 	asr.w	r1, r8, r3
 800fb24:	fa01 f303 	lsl.w	r3, r1, r3
 800fb28:	4543      	cmp	r3, r8
 800fb2a:	f040 8488 	bne.w	801043e <__ieee754_pow+0x9ee>
 800fb2e:	f001 0101 	and.w	r1, r1, #1
 800fb32:	f1c1 0302 	rsb	r3, r1, #2
 800fb36:	9304      	str	r3, [sp, #16]
 800fb38:	4b5c      	ldr	r3, [pc, #368]	; (800fcac <__ieee754_pow+0x25c>)
 800fb3a:	4598      	cmp	r8, r3
 800fb3c:	d132      	bne.n	800fba4 <__ieee754_pow+0x154>
 800fb3e:	f1b9 0f00 	cmp.w	r9, #0
 800fb42:	f280 8478 	bge.w	8010436 <__ieee754_pow+0x9e6>
 800fb46:	4959      	ldr	r1, [pc, #356]	; (800fcac <__ieee754_pow+0x25c>)
 800fb48:	4632      	mov	r2, r6
 800fb4a:	463b      	mov	r3, r7
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	f7f0 fe7d 	bl	800084c <__aeabi_ddiv>
 800fb52:	e79c      	b.n	800fa8e <__ieee754_pow+0x3e>
 800fb54:	2300      	movs	r3, #0
 800fb56:	9304      	str	r3, [sp, #16]
 800fb58:	2a00      	cmp	r2, #0
 800fb5a:	d13d      	bne.n	800fbd8 <__ieee754_pow+0x188>
 800fb5c:	4b51      	ldr	r3, [pc, #324]	; (800fca4 <__ieee754_pow+0x254>)
 800fb5e:	4598      	cmp	r8, r3
 800fb60:	d1ea      	bne.n	800fb38 <__ieee754_pow+0xe8>
 800fb62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fb66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fb6a:	ea53 030a 	orrs.w	r3, r3, sl
 800fb6e:	f000 845a 	beq.w	8010426 <__ieee754_pow+0x9d6>
 800fb72:	4b4f      	ldr	r3, [pc, #316]	; (800fcb0 <__ieee754_pow+0x260>)
 800fb74:	429c      	cmp	r4, r3
 800fb76:	dd08      	ble.n	800fb8a <__ieee754_pow+0x13a>
 800fb78:	f1b9 0f00 	cmp.w	r9, #0
 800fb7c:	f2c0 8457 	blt.w	801042e <__ieee754_pow+0x9de>
 800fb80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb84:	e783      	b.n	800fa8e <__ieee754_pow+0x3e>
 800fb86:	2302      	movs	r3, #2
 800fb88:	e7e5      	b.n	800fb56 <__ieee754_pow+0x106>
 800fb8a:	f1b9 0f00 	cmp.w	r9, #0
 800fb8e:	f04f 0000 	mov.w	r0, #0
 800fb92:	f04f 0100 	mov.w	r1, #0
 800fb96:	f6bf af7a 	bge.w	800fa8e <__ieee754_pow+0x3e>
 800fb9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fb9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fba2:	e774      	b.n	800fa8e <__ieee754_pow+0x3e>
 800fba4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fba8:	d106      	bne.n	800fbb8 <__ieee754_pow+0x168>
 800fbaa:	4632      	mov	r2, r6
 800fbac:	463b      	mov	r3, r7
 800fbae:	4630      	mov	r0, r6
 800fbb0:	4639      	mov	r1, r7
 800fbb2:	f7f0 fd21 	bl	80005f8 <__aeabi_dmul>
 800fbb6:	e76a      	b.n	800fa8e <__ieee754_pow+0x3e>
 800fbb8:	4b3e      	ldr	r3, [pc, #248]	; (800fcb4 <__ieee754_pow+0x264>)
 800fbba:	4599      	cmp	r9, r3
 800fbbc:	d10c      	bne.n	800fbd8 <__ieee754_pow+0x188>
 800fbbe:	2d00      	cmp	r5, #0
 800fbc0:	db0a      	blt.n	800fbd8 <__ieee754_pow+0x188>
 800fbc2:	ec47 6b10 	vmov	d0, r6, r7
 800fbc6:	b009      	add	sp, #36	; 0x24
 800fbc8:	ecbd 8b06 	vpop	{d8-d10}
 800fbcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd0:	f000 bc6c 	b.w	80104ac <__ieee754_sqrt>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	ec47 6b10 	vmov	d0, r6, r7
 800fbdc:	f000 fd48 	bl	8010670 <fabs>
 800fbe0:	ec51 0b10 	vmov	r0, r1, d0
 800fbe4:	f1ba 0f00 	cmp.w	sl, #0
 800fbe8:	d129      	bne.n	800fc3e <__ieee754_pow+0x1ee>
 800fbea:	b124      	cbz	r4, 800fbf6 <__ieee754_pow+0x1a6>
 800fbec:	4b2f      	ldr	r3, [pc, #188]	; (800fcac <__ieee754_pow+0x25c>)
 800fbee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d123      	bne.n	800fc3e <__ieee754_pow+0x1ee>
 800fbf6:	f1b9 0f00 	cmp.w	r9, #0
 800fbfa:	da05      	bge.n	800fc08 <__ieee754_pow+0x1b8>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	2000      	movs	r0, #0
 800fc02:	492a      	ldr	r1, [pc, #168]	; (800fcac <__ieee754_pow+0x25c>)
 800fc04:	f7f0 fe22 	bl	800084c <__aeabi_ddiv>
 800fc08:	2d00      	cmp	r5, #0
 800fc0a:	f6bf af40 	bge.w	800fa8e <__ieee754_pow+0x3e>
 800fc0e:	9b04      	ldr	r3, [sp, #16]
 800fc10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fc14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fc18:	4323      	orrs	r3, r4
 800fc1a:	d108      	bne.n	800fc2e <__ieee754_pow+0x1de>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	460b      	mov	r3, r1
 800fc20:	4610      	mov	r0, r2
 800fc22:	4619      	mov	r1, r3
 800fc24:	f7f0 fb30 	bl	8000288 <__aeabi_dsub>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	e78f      	b.n	800fb4e <__ieee754_pow+0xfe>
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	f47f af2c 	bne.w	800fa8e <__ieee754_pow+0x3e>
 800fc36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	e727      	b.n	800fa8e <__ieee754_pow+0x3e>
 800fc3e:	0feb      	lsrs	r3, r5, #31
 800fc40:	3b01      	subs	r3, #1
 800fc42:	9306      	str	r3, [sp, #24]
 800fc44:	9a06      	ldr	r2, [sp, #24]
 800fc46:	9b04      	ldr	r3, [sp, #16]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	d102      	bne.n	800fc52 <__ieee754_pow+0x202>
 800fc4c:	4632      	mov	r2, r6
 800fc4e:	463b      	mov	r3, r7
 800fc50:	e7e6      	b.n	800fc20 <__ieee754_pow+0x1d0>
 800fc52:	4b19      	ldr	r3, [pc, #100]	; (800fcb8 <__ieee754_pow+0x268>)
 800fc54:	4598      	cmp	r8, r3
 800fc56:	f340 80fb 	ble.w	800fe50 <__ieee754_pow+0x400>
 800fc5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fc5e:	4598      	cmp	r8, r3
 800fc60:	4b13      	ldr	r3, [pc, #76]	; (800fcb0 <__ieee754_pow+0x260>)
 800fc62:	dd0c      	ble.n	800fc7e <__ieee754_pow+0x22e>
 800fc64:	429c      	cmp	r4, r3
 800fc66:	dc0f      	bgt.n	800fc88 <__ieee754_pow+0x238>
 800fc68:	f1b9 0f00 	cmp.w	r9, #0
 800fc6c:	da0f      	bge.n	800fc8e <__ieee754_pow+0x23e>
 800fc6e:	2000      	movs	r0, #0
 800fc70:	b009      	add	sp, #36	; 0x24
 800fc72:	ecbd 8b06 	vpop	{d8-d10}
 800fc76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7a:	f000 bcf0 	b.w	801065e <__math_oflow>
 800fc7e:	429c      	cmp	r4, r3
 800fc80:	dbf2      	blt.n	800fc68 <__ieee754_pow+0x218>
 800fc82:	4b0a      	ldr	r3, [pc, #40]	; (800fcac <__ieee754_pow+0x25c>)
 800fc84:	429c      	cmp	r4, r3
 800fc86:	dd19      	ble.n	800fcbc <__ieee754_pow+0x26c>
 800fc88:	f1b9 0f00 	cmp.w	r9, #0
 800fc8c:	dcef      	bgt.n	800fc6e <__ieee754_pow+0x21e>
 800fc8e:	2000      	movs	r0, #0
 800fc90:	b009      	add	sp, #36	; 0x24
 800fc92:	ecbd 8b06 	vpop	{d8-d10}
 800fc96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9a:	f000 bcd7 	b.w	801064c <__math_uflow>
 800fc9e:	bf00      	nop
 800fca0:	fff00000 	.word	0xfff00000
 800fca4:	7ff00000 	.word	0x7ff00000
 800fca8:	433fffff 	.word	0x433fffff
 800fcac:	3ff00000 	.word	0x3ff00000
 800fcb0:	3fefffff 	.word	0x3fefffff
 800fcb4:	3fe00000 	.word	0x3fe00000
 800fcb8:	41e00000 	.word	0x41e00000
 800fcbc:	4b60      	ldr	r3, [pc, #384]	; (800fe40 <__ieee754_pow+0x3f0>)
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f7f0 fae2 	bl	8000288 <__aeabi_dsub>
 800fcc4:	a354      	add	r3, pc, #336	; (adr r3, 800fe18 <__ieee754_pow+0x3c8>)
 800fcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcca:	4604      	mov	r4, r0
 800fccc:	460d      	mov	r5, r1
 800fcce:	f7f0 fc93 	bl	80005f8 <__aeabi_dmul>
 800fcd2:	a353      	add	r3, pc, #332	; (adr r3, 800fe20 <__ieee754_pow+0x3d0>)
 800fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd8:	4606      	mov	r6, r0
 800fcda:	460f      	mov	r7, r1
 800fcdc:	4620      	mov	r0, r4
 800fcde:	4629      	mov	r1, r5
 800fce0:	f7f0 fc8a 	bl	80005f8 <__aeabi_dmul>
 800fce4:	4b57      	ldr	r3, [pc, #348]	; (800fe44 <__ieee754_pow+0x3f4>)
 800fce6:	4682      	mov	sl, r0
 800fce8:	468b      	mov	fp, r1
 800fcea:	2200      	movs	r2, #0
 800fcec:	4620      	mov	r0, r4
 800fcee:	4629      	mov	r1, r5
 800fcf0:	f7f0 fc82 	bl	80005f8 <__aeabi_dmul>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	a14b      	add	r1, pc, #300	; (adr r1, 800fe28 <__ieee754_pow+0x3d8>)
 800fcfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcfe:	f7f0 fac3 	bl	8000288 <__aeabi_dsub>
 800fd02:	4622      	mov	r2, r4
 800fd04:	462b      	mov	r3, r5
 800fd06:	f7f0 fc77 	bl	80005f8 <__aeabi_dmul>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	2000      	movs	r0, #0
 800fd10:	494d      	ldr	r1, [pc, #308]	; (800fe48 <__ieee754_pow+0x3f8>)
 800fd12:	f7f0 fab9 	bl	8000288 <__aeabi_dsub>
 800fd16:	4622      	mov	r2, r4
 800fd18:	4680      	mov	r8, r0
 800fd1a:	4689      	mov	r9, r1
 800fd1c:	462b      	mov	r3, r5
 800fd1e:	4620      	mov	r0, r4
 800fd20:	4629      	mov	r1, r5
 800fd22:	f7f0 fc69 	bl	80005f8 <__aeabi_dmul>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	f7f0 fc63 	bl	80005f8 <__aeabi_dmul>
 800fd32:	a33f      	add	r3, pc, #252	; (adr r3, 800fe30 <__ieee754_pow+0x3e0>)
 800fd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd38:	f7f0 fc5e 	bl	80005f8 <__aeabi_dmul>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	4650      	mov	r0, sl
 800fd42:	4659      	mov	r1, fp
 800fd44:	f7f0 faa0 	bl	8000288 <__aeabi_dsub>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4680      	mov	r8, r0
 800fd4e:	4689      	mov	r9, r1
 800fd50:	4630      	mov	r0, r6
 800fd52:	4639      	mov	r1, r7
 800fd54:	f7f0 fa9a 	bl	800028c <__adddf3>
 800fd58:	2000      	movs	r0, #0
 800fd5a:	4632      	mov	r2, r6
 800fd5c:	463b      	mov	r3, r7
 800fd5e:	4604      	mov	r4, r0
 800fd60:	460d      	mov	r5, r1
 800fd62:	f7f0 fa91 	bl	8000288 <__aeabi_dsub>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	4640      	mov	r0, r8
 800fd6c:	4649      	mov	r1, r9
 800fd6e:	f7f0 fa8b 	bl	8000288 <__aeabi_dsub>
 800fd72:	9b04      	ldr	r3, [sp, #16]
 800fd74:	9a06      	ldr	r2, [sp, #24]
 800fd76:	3b01      	subs	r3, #1
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	4682      	mov	sl, r0
 800fd7c:	468b      	mov	fp, r1
 800fd7e:	f040 81e7 	bne.w	8010150 <__ieee754_pow+0x700>
 800fd82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fe38 <__ieee754_pow+0x3e8>
 800fd86:	eeb0 8a47 	vmov.f32	s16, s14
 800fd8a:	eef0 8a67 	vmov.f32	s17, s15
 800fd8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd92:	2600      	movs	r6, #0
 800fd94:	4632      	mov	r2, r6
 800fd96:	463b      	mov	r3, r7
 800fd98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd9c:	f7f0 fa74 	bl	8000288 <__aeabi_dsub>
 800fda0:	4622      	mov	r2, r4
 800fda2:	462b      	mov	r3, r5
 800fda4:	f7f0 fc28 	bl	80005f8 <__aeabi_dmul>
 800fda8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdac:	4680      	mov	r8, r0
 800fdae:	4689      	mov	r9, r1
 800fdb0:	4650      	mov	r0, sl
 800fdb2:	4659      	mov	r1, fp
 800fdb4:	f7f0 fc20 	bl	80005f8 <__aeabi_dmul>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	460b      	mov	r3, r1
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	f7f0 fa64 	bl	800028c <__adddf3>
 800fdc4:	4632      	mov	r2, r6
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	4680      	mov	r8, r0
 800fdca:	4689      	mov	r9, r1
 800fdcc:	4620      	mov	r0, r4
 800fdce:	4629      	mov	r1, r5
 800fdd0:	f7f0 fc12 	bl	80005f8 <__aeabi_dmul>
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	460d      	mov	r5, r1
 800fdda:	4602      	mov	r2, r0
 800fddc:	4649      	mov	r1, r9
 800fdde:	4640      	mov	r0, r8
 800fde0:	f7f0 fa54 	bl	800028c <__adddf3>
 800fde4:	4b19      	ldr	r3, [pc, #100]	; (800fe4c <__ieee754_pow+0x3fc>)
 800fde6:	4299      	cmp	r1, r3
 800fde8:	ec45 4b19 	vmov	d9, r4, r5
 800fdec:	4606      	mov	r6, r0
 800fdee:	460f      	mov	r7, r1
 800fdf0:	468b      	mov	fp, r1
 800fdf2:	f340 82f1 	ble.w	80103d8 <__ieee754_pow+0x988>
 800fdf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fdfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fdfe:	4303      	orrs	r3, r0
 800fe00:	f000 81e4 	beq.w	80101cc <__ieee754_pow+0x77c>
 800fe04:	ec51 0b18 	vmov	r0, r1, d8
 800fe08:	2200      	movs	r2, #0
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f7f0 fe66 	bl	8000adc <__aeabi_dcmplt>
 800fe10:	3800      	subs	r0, #0
 800fe12:	bf18      	it	ne
 800fe14:	2001      	movne	r0, #1
 800fe16:	e72b      	b.n	800fc70 <__ieee754_pow+0x220>
 800fe18:	60000000 	.word	0x60000000
 800fe1c:	3ff71547 	.word	0x3ff71547
 800fe20:	f85ddf44 	.word	0xf85ddf44
 800fe24:	3e54ae0b 	.word	0x3e54ae0b
 800fe28:	55555555 	.word	0x55555555
 800fe2c:	3fd55555 	.word	0x3fd55555
 800fe30:	652b82fe 	.word	0x652b82fe
 800fe34:	3ff71547 	.word	0x3ff71547
 800fe38:	00000000 	.word	0x00000000
 800fe3c:	bff00000 	.word	0xbff00000
 800fe40:	3ff00000 	.word	0x3ff00000
 800fe44:	3fd00000 	.word	0x3fd00000
 800fe48:	3fe00000 	.word	0x3fe00000
 800fe4c:	408fffff 	.word	0x408fffff
 800fe50:	4bd5      	ldr	r3, [pc, #852]	; (80101a8 <__ieee754_pow+0x758>)
 800fe52:	402b      	ands	r3, r5
 800fe54:	2200      	movs	r2, #0
 800fe56:	b92b      	cbnz	r3, 800fe64 <__ieee754_pow+0x414>
 800fe58:	4bd4      	ldr	r3, [pc, #848]	; (80101ac <__ieee754_pow+0x75c>)
 800fe5a:	f7f0 fbcd 	bl	80005f8 <__aeabi_dmul>
 800fe5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fe62:	460c      	mov	r4, r1
 800fe64:	1523      	asrs	r3, r4, #20
 800fe66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fe6a:	4413      	add	r3, r2
 800fe6c:	9305      	str	r3, [sp, #20]
 800fe6e:	4bd0      	ldr	r3, [pc, #832]	; (80101b0 <__ieee754_pow+0x760>)
 800fe70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fe74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fe78:	429c      	cmp	r4, r3
 800fe7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fe7e:	dd08      	ble.n	800fe92 <__ieee754_pow+0x442>
 800fe80:	4bcc      	ldr	r3, [pc, #816]	; (80101b4 <__ieee754_pow+0x764>)
 800fe82:	429c      	cmp	r4, r3
 800fe84:	f340 8162 	ble.w	801014c <__ieee754_pow+0x6fc>
 800fe88:	9b05      	ldr	r3, [sp, #20]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	9305      	str	r3, [sp, #20]
 800fe8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fe92:	2400      	movs	r4, #0
 800fe94:	00e3      	lsls	r3, r4, #3
 800fe96:	9307      	str	r3, [sp, #28]
 800fe98:	4bc7      	ldr	r3, [pc, #796]	; (80101b8 <__ieee754_pow+0x768>)
 800fe9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe9e:	ed93 7b00 	vldr	d7, [r3]
 800fea2:	4629      	mov	r1, r5
 800fea4:	ec53 2b17 	vmov	r2, r3, d7
 800fea8:	eeb0 9a47 	vmov.f32	s18, s14
 800feac:	eef0 9a67 	vmov.f32	s19, s15
 800feb0:	4682      	mov	sl, r0
 800feb2:	f7f0 f9e9 	bl	8000288 <__aeabi_dsub>
 800feb6:	4652      	mov	r2, sl
 800feb8:	4606      	mov	r6, r0
 800feba:	460f      	mov	r7, r1
 800febc:	462b      	mov	r3, r5
 800febe:	ec51 0b19 	vmov	r0, r1, d9
 800fec2:	f7f0 f9e3 	bl	800028c <__adddf3>
 800fec6:	4602      	mov	r2, r0
 800fec8:	460b      	mov	r3, r1
 800feca:	2000      	movs	r0, #0
 800fecc:	49bb      	ldr	r1, [pc, #748]	; (80101bc <__ieee754_pow+0x76c>)
 800fece:	f7f0 fcbd 	bl	800084c <__aeabi_ddiv>
 800fed2:	ec41 0b1a 	vmov	d10, r0, r1
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4630      	mov	r0, r6
 800fedc:	4639      	mov	r1, r7
 800fede:	f7f0 fb8b 	bl	80005f8 <__aeabi_dmul>
 800fee2:	2300      	movs	r3, #0
 800fee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fee8:	9302      	str	r3, [sp, #8]
 800feea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800feee:	46ab      	mov	fp, r5
 800fef0:	106d      	asrs	r5, r5, #1
 800fef2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fef6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fefa:	ec41 0b18 	vmov	d8, r0, r1
 800fefe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ff02:	2200      	movs	r2, #0
 800ff04:	4640      	mov	r0, r8
 800ff06:	4649      	mov	r1, r9
 800ff08:	4614      	mov	r4, r2
 800ff0a:	461d      	mov	r5, r3
 800ff0c:	f7f0 fb74 	bl	80005f8 <__aeabi_dmul>
 800ff10:	4602      	mov	r2, r0
 800ff12:	460b      	mov	r3, r1
 800ff14:	4630      	mov	r0, r6
 800ff16:	4639      	mov	r1, r7
 800ff18:	f7f0 f9b6 	bl	8000288 <__aeabi_dsub>
 800ff1c:	ec53 2b19 	vmov	r2, r3, d9
 800ff20:	4606      	mov	r6, r0
 800ff22:	460f      	mov	r7, r1
 800ff24:	4620      	mov	r0, r4
 800ff26:	4629      	mov	r1, r5
 800ff28:	f7f0 f9ae 	bl	8000288 <__aeabi_dsub>
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	460b      	mov	r3, r1
 800ff30:	4650      	mov	r0, sl
 800ff32:	4659      	mov	r1, fp
 800ff34:	f7f0 f9a8 	bl	8000288 <__aeabi_dsub>
 800ff38:	4642      	mov	r2, r8
 800ff3a:	464b      	mov	r3, r9
 800ff3c:	f7f0 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	4630      	mov	r0, r6
 800ff46:	4639      	mov	r1, r7
 800ff48:	f7f0 f99e 	bl	8000288 <__aeabi_dsub>
 800ff4c:	ec53 2b1a 	vmov	r2, r3, d10
 800ff50:	f7f0 fb52 	bl	80005f8 <__aeabi_dmul>
 800ff54:	ec53 2b18 	vmov	r2, r3, d8
 800ff58:	ec41 0b19 	vmov	d9, r0, r1
 800ff5c:	ec51 0b18 	vmov	r0, r1, d8
 800ff60:	f7f0 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ff64:	a37c      	add	r3, pc, #496	; (adr r3, 8010158 <__ieee754_pow+0x708>)
 800ff66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	460d      	mov	r5, r1
 800ff6e:	f7f0 fb43 	bl	80005f8 <__aeabi_dmul>
 800ff72:	a37b      	add	r3, pc, #492	; (adr r3, 8010160 <__ieee754_pow+0x710>)
 800ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff78:	f7f0 f988 	bl	800028c <__adddf3>
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	462b      	mov	r3, r5
 800ff80:	f7f0 fb3a 	bl	80005f8 <__aeabi_dmul>
 800ff84:	a378      	add	r3, pc, #480	; (adr r3, 8010168 <__ieee754_pow+0x718>)
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	f7f0 f97f 	bl	800028c <__adddf3>
 800ff8e:	4622      	mov	r2, r4
 800ff90:	462b      	mov	r3, r5
 800ff92:	f7f0 fb31 	bl	80005f8 <__aeabi_dmul>
 800ff96:	a376      	add	r3, pc, #472	; (adr r3, 8010170 <__ieee754_pow+0x720>)
 800ff98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9c:	f7f0 f976 	bl	800028c <__adddf3>
 800ffa0:	4622      	mov	r2, r4
 800ffa2:	462b      	mov	r3, r5
 800ffa4:	f7f0 fb28 	bl	80005f8 <__aeabi_dmul>
 800ffa8:	a373      	add	r3, pc, #460	; (adr r3, 8010178 <__ieee754_pow+0x728>)
 800ffaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffae:	f7f0 f96d 	bl	800028c <__adddf3>
 800ffb2:	4622      	mov	r2, r4
 800ffb4:	462b      	mov	r3, r5
 800ffb6:	f7f0 fb1f 	bl	80005f8 <__aeabi_dmul>
 800ffba:	a371      	add	r3, pc, #452	; (adr r3, 8010180 <__ieee754_pow+0x730>)
 800ffbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc0:	f7f0 f964 	bl	800028c <__adddf3>
 800ffc4:	4622      	mov	r2, r4
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	460f      	mov	r7, r1
 800ffca:	462b      	mov	r3, r5
 800ffcc:	4620      	mov	r0, r4
 800ffce:	4629      	mov	r1, r5
 800ffd0:	f7f0 fb12 	bl	80005f8 <__aeabi_dmul>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	4630      	mov	r0, r6
 800ffda:	4639      	mov	r1, r7
 800ffdc:	f7f0 fb0c 	bl	80005f8 <__aeabi_dmul>
 800ffe0:	4642      	mov	r2, r8
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	460d      	mov	r5, r1
 800ffe6:	464b      	mov	r3, r9
 800ffe8:	ec51 0b18 	vmov	r0, r1, d8
 800ffec:	f7f0 f94e 	bl	800028c <__adddf3>
 800fff0:	ec53 2b19 	vmov	r2, r3, d9
 800fff4:	f7f0 fb00 	bl	80005f8 <__aeabi_dmul>
 800fff8:	4622      	mov	r2, r4
 800fffa:	462b      	mov	r3, r5
 800fffc:	f7f0 f946 	bl	800028c <__adddf3>
 8010000:	4642      	mov	r2, r8
 8010002:	4682      	mov	sl, r0
 8010004:	468b      	mov	fp, r1
 8010006:	464b      	mov	r3, r9
 8010008:	4640      	mov	r0, r8
 801000a:	4649      	mov	r1, r9
 801000c:	f7f0 faf4 	bl	80005f8 <__aeabi_dmul>
 8010010:	4b6b      	ldr	r3, [pc, #428]	; (80101c0 <__ieee754_pow+0x770>)
 8010012:	2200      	movs	r2, #0
 8010014:	4606      	mov	r6, r0
 8010016:	460f      	mov	r7, r1
 8010018:	f7f0 f938 	bl	800028c <__adddf3>
 801001c:	4652      	mov	r2, sl
 801001e:	465b      	mov	r3, fp
 8010020:	f7f0 f934 	bl	800028c <__adddf3>
 8010024:	2000      	movs	r0, #0
 8010026:	4604      	mov	r4, r0
 8010028:	460d      	mov	r5, r1
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4640      	mov	r0, r8
 8010030:	4649      	mov	r1, r9
 8010032:	f7f0 fae1 	bl	80005f8 <__aeabi_dmul>
 8010036:	4b62      	ldr	r3, [pc, #392]	; (80101c0 <__ieee754_pow+0x770>)
 8010038:	4680      	mov	r8, r0
 801003a:	4689      	mov	r9, r1
 801003c:	2200      	movs	r2, #0
 801003e:	4620      	mov	r0, r4
 8010040:	4629      	mov	r1, r5
 8010042:	f7f0 f921 	bl	8000288 <__aeabi_dsub>
 8010046:	4632      	mov	r2, r6
 8010048:	463b      	mov	r3, r7
 801004a:	f7f0 f91d 	bl	8000288 <__aeabi_dsub>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4650      	mov	r0, sl
 8010054:	4659      	mov	r1, fp
 8010056:	f7f0 f917 	bl	8000288 <__aeabi_dsub>
 801005a:	ec53 2b18 	vmov	r2, r3, d8
 801005e:	f7f0 facb 	bl	80005f8 <__aeabi_dmul>
 8010062:	4622      	mov	r2, r4
 8010064:	4606      	mov	r6, r0
 8010066:	460f      	mov	r7, r1
 8010068:	462b      	mov	r3, r5
 801006a:	ec51 0b19 	vmov	r0, r1, d9
 801006e:	f7f0 fac3 	bl	80005f8 <__aeabi_dmul>
 8010072:	4602      	mov	r2, r0
 8010074:	460b      	mov	r3, r1
 8010076:	4630      	mov	r0, r6
 8010078:	4639      	mov	r1, r7
 801007a:	f7f0 f907 	bl	800028c <__adddf3>
 801007e:	4606      	mov	r6, r0
 8010080:	460f      	mov	r7, r1
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	4640      	mov	r0, r8
 8010088:	4649      	mov	r1, r9
 801008a:	f7f0 f8ff 	bl	800028c <__adddf3>
 801008e:	a33e      	add	r3, pc, #248	; (adr r3, 8010188 <__ieee754_pow+0x738>)
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	2000      	movs	r0, #0
 8010096:	4604      	mov	r4, r0
 8010098:	460d      	mov	r5, r1
 801009a:	f7f0 faad 	bl	80005f8 <__aeabi_dmul>
 801009e:	4642      	mov	r2, r8
 80100a0:	ec41 0b18 	vmov	d8, r0, r1
 80100a4:	464b      	mov	r3, r9
 80100a6:	4620      	mov	r0, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7f0 f8ed 	bl	8000288 <__aeabi_dsub>
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	4630      	mov	r0, r6
 80100b4:	4639      	mov	r1, r7
 80100b6:	f7f0 f8e7 	bl	8000288 <__aeabi_dsub>
 80100ba:	a335      	add	r3, pc, #212	; (adr r3, 8010190 <__ieee754_pow+0x740>)
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f7f0 fa9a 	bl	80005f8 <__aeabi_dmul>
 80100c4:	a334      	add	r3, pc, #208	; (adr r3, 8010198 <__ieee754_pow+0x748>)
 80100c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ca:	4606      	mov	r6, r0
 80100cc:	460f      	mov	r7, r1
 80100ce:	4620      	mov	r0, r4
 80100d0:	4629      	mov	r1, r5
 80100d2:	f7f0 fa91 	bl	80005f8 <__aeabi_dmul>
 80100d6:	4602      	mov	r2, r0
 80100d8:	460b      	mov	r3, r1
 80100da:	4630      	mov	r0, r6
 80100dc:	4639      	mov	r1, r7
 80100de:	f7f0 f8d5 	bl	800028c <__adddf3>
 80100e2:	9a07      	ldr	r2, [sp, #28]
 80100e4:	4b37      	ldr	r3, [pc, #220]	; (80101c4 <__ieee754_pow+0x774>)
 80100e6:	4413      	add	r3, r2
 80100e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ec:	f7f0 f8ce 	bl	800028c <__adddf3>
 80100f0:	4682      	mov	sl, r0
 80100f2:	9805      	ldr	r0, [sp, #20]
 80100f4:	468b      	mov	fp, r1
 80100f6:	f7f0 fa15 	bl	8000524 <__aeabi_i2d>
 80100fa:	9a07      	ldr	r2, [sp, #28]
 80100fc:	4b32      	ldr	r3, [pc, #200]	; (80101c8 <__ieee754_pow+0x778>)
 80100fe:	4413      	add	r3, r2
 8010100:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010104:	4606      	mov	r6, r0
 8010106:	460f      	mov	r7, r1
 8010108:	4652      	mov	r2, sl
 801010a:	465b      	mov	r3, fp
 801010c:	ec51 0b18 	vmov	r0, r1, d8
 8010110:	f7f0 f8bc 	bl	800028c <__adddf3>
 8010114:	4642      	mov	r2, r8
 8010116:	464b      	mov	r3, r9
 8010118:	f7f0 f8b8 	bl	800028c <__adddf3>
 801011c:	4632      	mov	r2, r6
 801011e:	463b      	mov	r3, r7
 8010120:	f7f0 f8b4 	bl	800028c <__adddf3>
 8010124:	2000      	movs	r0, #0
 8010126:	4632      	mov	r2, r6
 8010128:	463b      	mov	r3, r7
 801012a:	4604      	mov	r4, r0
 801012c:	460d      	mov	r5, r1
 801012e:	f7f0 f8ab 	bl	8000288 <__aeabi_dsub>
 8010132:	4642      	mov	r2, r8
 8010134:	464b      	mov	r3, r9
 8010136:	f7f0 f8a7 	bl	8000288 <__aeabi_dsub>
 801013a:	ec53 2b18 	vmov	r2, r3, d8
 801013e:	f7f0 f8a3 	bl	8000288 <__aeabi_dsub>
 8010142:	4602      	mov	r2, r0
 8010144:	460b      	mov	r3, r1
 8010146:	4650      	mov	r0, sl
 8010148:	4659      	mov	r1, fp
 801014a:	e610      	b.n	800fd6e <__ieee754_pow+0x31e>
 801014c:	2401      	movs	r4, #1
 801014e:	e6a1      	b.n	800fe94 <__ieee754_pow+0x444>
 8010150:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80101a0 <__ieee754_pow+0x750>
 8010154:	e617      	b.n	800fd86 <__ieee754_pow+0x336>
 8010156:	bf00      	nop
 8010158:	4a454eef 	.word	0x4a454eef
 801015c:	3fca7e28 	.word	0x3fca7e28
 8010160:	93c9db65 	.word	0x93c9db65
 8010164:	3fcd864a 	.word	0x3fcd864a
 8010168:	a91d4101 	.word	0xa91d4101
 801016c:	3fd17460 	.word	0x3fd17460
 8010170:	518f264d 	.word	0x518f264d
 8010174:	3fd55555 	.word	0x3fd55555
 8010178:	db6fabff 	.word	0xdb6fabff
 801017c:	3fdb6db6 	.word	0x3fdb6db6
 8010180:	33333303 	.word	0x33333303
 8010184:	3fe33333 	.word	0x3fe33333
 8010188:	e0000000 	.word	0xe0000000
 801018c:	3feec709 	.word	0x3feec709
 8010190:	dc3a03fd 	.word	0xdc3a03fd
 8010194:	3feec709 	.word	0x3feec709
 8010198:	145b01f5 	.word	0x145b01f5
 801019c:	be3e2fe0 	.word	0xbe3e2fe0
 80101a0:	00000000 	.word	0x00000000
 80101a4:	3ff00000 	.word	0x3ff00000
 80101a8:	7ff00000 	.word	0x7ff00000
 80101ac:	43400000 	.word	0x43400000
 80101b0:	0003988e 	.word	0x0003988e
 80101b4:	000bb679 	.word	0x000bb679
 80101b8:	080110b0 	.word	0x080110b0
 80101bc:	3ff00000 	.word	0x3ff00000
 80101c0:	40080000 	.word	0x40080000
 80101c4:	080110d0 	.word	0x080110d0
 80101c8:	080110c0 	.word	0x080110c0
 80101cc:	a3b5      	add	r3, pc, #724	; (adr r3, 80104a4 <__ieee754_pow+0xa54>)
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	4640      	mov	r0, r8
 80101d4:	4649      	mov	r1, r9
 80101d6:	f7f0 f859 	bl	800028c <__adddf3>
 80101da:	4622      	mov	r2, r4
 80101dc:	ec41 0b1a 	vmov	d10, r0, r1
 80101e0:	462b      	mov	r3, r5
 80101e2:	4630      	mov	r0, r6
 80101e4:	4639      	mov	r1, r7
 80101e6:	f7f0 f84f 	bl	8000288 <__aeabi_dsub>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	ec51 0b1a 	vmov	r0, r1, d10
 80101f2:	f7f0 fc91 	bl	8000b18 <__aeabi_dcmpgt>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	f47f ae04 	bne.w	800fe04 <__ieee754_pow+0x3b4>
 80101fc:	4aa4      	ldr	r2, [pc, #656]	; (8010490 <__ieee754_pow+0xa40>)
 80101fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010202:	4293      	cmp	r3, r2
 8010204:	f340 8108 	ble.w	8010418 <__ieee754_pow+0x9c8>
 8010208:	151b      	asrs	r3, r3, #20
 801020a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801020e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010212:	fa4a f303 	asr.w	r3, sl, r3
 8010216:	445b      	add	r3, fp
 8010218:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801021c:	4e9d      	ldr	r6, [pc, #628]	; (8010494 <__ieee754_pow+0xa44>)
 801021e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010222:	4116      	asrs	r6, r2
 8010224:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010228:	2000      	movs	r0, #0
 801022a:	ea23 0106 	bic.w	r1, r3, r6
 801022e:	f1c2 0214 	rsb	r2, r2, #20
 8010232:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010236:	fa4a fa02 	asr.w	sl, sl, r2
 801023a:	f1bb 0f00 	cmp.w	fp, #0
 801023e:	4602      	mov	r2, r0
 8010240:	460b      	mov	r3, r1
 8010242:	4620      	mov	r0, r4
 8010244:	4629      	mov	r1, r5
 8010246:	bfb8      	it	lt
 8010248:	f1ca 0a00 	rsblt	sl, sl, #0
 801024c:	f7f0 f81c 	bl	8000288 <__aeabi_dsub>
 8010250:	ec41 0b19 	vmov	d9, r0, r1
 8010254:	4642      	mov	r2, r8
 8010256:	464b      	mov	r3, r9
 8010258:	ec51 0b19 	vmov	r0, r1, d9
 801025c:	f7f0 f816 	bl	800028c <__adddf3>
 8010260:	a37b      	add	r3, pc, #492	; (adr r3, 8010450 <__ieee754_pow+0xa00>)
 8010262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010266:	2000      	movs	r0, #0
 8010268:	4604      	mov	r4, r0
 801026a:	460d      	mov	r5, r1
 801026c:	f7f0 f9c4 	bl	80005f8 <__aeabi_dmul>
 8010270:	ec53 2b19 	vmov	r2, r3, d9
 8010274:	4606      	mov	r6, r0
 8010276:	460f      	mov	r7, r1
 8010278:	4620      	mov	r0, r4
 801027a:	4629      	mov	r1, r5
 801027c:	f7f0 f804 	bl	8000288 <__aeabi_dsub>
 8010280:	4602      	mov	r2, r0
 8010282:	460b      	mov	r3, r1
 8010284:	4640      	mov	r0, r8
 8010286:	4649      	mov	r1, r9
 8010288:	f7ef fffe 	bl	8000288 <__aeabi_dsub>
 801028c:	a372      	add	r3, pc, #456	; (adr r3, 8010458 <__ieee754_pow+0xa08>)
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	f7f0 f9b1 	bl	80005f8 <__aeabi_dmul>
 8010296:	a372      	add	r3, pc, #456	; (adr r3, 8010460 <__ieee754_pow+0xa10>)
 8010298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029c:	4680      	mov	r8, r0
 801029e:	4689      	mov	r9, r1
 80102a0:	4620      	mov	r0, r4
 80102a2:	4629      	mov	r1, r5
 80102a4:	f7f0 f9a8 	bl	80005f8 <__aeabi_dmul>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4640      	mov	r0, r8
 80102ae:	4649      	mov	r1, r9
 80102b0:	f7ef ffec 	bl	800028c <__adddf3>
 80102b4:	4604      	mov	r4, r0
 80102b6:	460d      	mov	r5, r1
 80102b8:	4602      	mov	r2, r0
 80102ba:	460b      	mov	r3, r1
 80102bc:	4630      	mov	r0, r6
 80102be:	4639      	mov	r1, r7
 80102c0:	f7ef ffe4 	bl	800028c <__adddf3>
 80102c4:	4632      	mov	r2, r6
 80102c6:	463b      	mov	r3, r7
 80102c8:	4680      	mov	r8, r0
 80102ca:	4689      	mov	r9, r1
 80102cc:	f7ef ffdc 	bl	8000288 <__aeabi_dsub>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4620      	mov	r0, r4
 80102d6:	4629      	mov	r1, r5
 80102d8:	f7ef ffd6 	bl	8000288 <__aeabi_dsub>
 80102dc:	4642      	mov	r2, r8
 80102de:	4606      	mov	r6, r0
 80102e0:	460f      	mov	r7, r1
 80102e2:	464b      	mov	r3, r9
 80102e4:	4640      	mov	r0, r8
 80102e6:	4649      	mov	r1, r9
 80102e8:	f7f0 f986 	bl	80005f8 <__aeabi_dmul>
 80102ec:	a35e      	add	r3, pc, #376	; (adr r3, 8010468 <__ieee754_pow+0xa18>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	4604      	mov	r4, r0
 80102f4:	460d      	mov	r5, r1
 80102f6:	f7f0 f97f 	bl	80005f8 <__aeabi_dmul>
 80102fa:	a35d      	add	r3, pc, #372	; (adr r3, 8010470 <__ieee754_pow+0xa20>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	f7ef ffc2 	bl	8000288 <__aeabi_dsub>
 8010304:	4622      	mov	r2, r4
 8010306:	462b      	mov	r3, r5
 8010308:	f7f0 f976 	bl	80005f8 <__aeabi_dmul>
 801030c:	a35a      	add	r3, pc, #360	; (adr r3, 8010478 <__ieee754_pow+0xa28>)
 801030e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010312:	f7ef ffbb 	bl	800028c <__adddf3>
 8010316:	4622      	mov	r2, r4
 8010318:	462b      	mov	r3, r5
 801031a:	f7f0 f96d 	bl	80005f8 <__aeabi_dmul>
 801031e:	a358      	add	r3, pc, #352	; (adr r3, 8010480 <__ieee754_pow+0xa30>)
 8010320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010324:	f7ef ffb0 	bl	8000288 <__aeabi_dsub>
 8010328:	4622      	mov	r2, r4
 801032a:	462b      	mov	r3, r5
 801032c:	f7f0 f964 	bl	80005f8 <__aeabi_dmul>
 8010330:	a355      	add	r3, pc, #340	; (adr r3, 8010488 <__ieee754_pow+0xa38>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	f7ef ffa9 	bl	800028c <__adddf3>
 801033a:	4622      	mov	r2, r4
 801033c:	462b      	mov	r3, r5
 801033e:	f7f0 f95b 	bl	80005f8 <__aeabi_dmul>
 8010342:	4602      	mov	r2, r0
 8010344:	460b      	mov	r3, r1
 8010346:	4640      	mov	r0, r8
 8010348:	4649      	mov	r1, r9
 801034a:	f7ef ff9d 	bl	8000288 <__aeabi_dsub>
 801034e:	4604      	mov	r4, r0
 8010350:	460d      	mov	r5, r1
 8010352:	4602      	mov	r2, r0
 8010354:	460b      	mov	r3, r1
 8010356:	4640      	mov	r0, r8
 8010358:	4649      	mov	r1, r9
 801035a:	f7f0 f94d 	bl	80005f8 <__aeabi_dmul>
 801035e:	2200      	movs	r2, #0
 8010360:	ec41 0b19 	vmov	d9, r0, r1
 8010364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010368:	4620      	mov	r0, r4
 801036a:	4629      	mov	r1, r5
 801036c:	f7ef ff8c 	bl	8000288 <__aeabi_dsub>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	ec51 0b19 	vmov	r0, r1, d9
 8010378:	f7f0 fa68 	bl	800084c <__aeabi_ddiv>
 801037c:	4632      	mov	r2, r6
 801037e:	4604      	mov	r4, r0
 8010380:	460d      	mov	r5, r1
 8010382:	463b      	mov	r3, r7
 8010384:	4640      	mov	r0, r8
 8010386:	4649      	mov	r1, r9
 8010388:	f7f0 f936 	bl	80005f8 <__aeabi_dmul>
 801038c:	4632      	mov	r2, r6
 801038e:	463b      	mov	r3, r7
 8010390:	f7ef ff7c 	bl	800028c <__adddf3>
 8010394:	4602      	mov	r2, r0
 8010396:	460b      	mov	r3, r1
 8010398:	4620      	mov	r0, r4
 801039a:	4629      	mov	r1, r5
 801039c:	f7ef ff74 	bl	8000288 <__aeabi_dsub>
 80103a0:	4642      	mov	r2, r8
 80103a2:	464b      	mov	r3, r9
 80103a4:	f7ef ff70 	bl	8000288 <__aeabi_dsub>
 80103a8:	460b      	mov	r3, r1
 80103aa:	4602      	mov	r2, r0
 80103ac:	493a      	ldr	r1, [pc, #232]	; (8010498 <__ieee754_pow+0xa48>)
 80103ae:	2000      	movs	r0, #0
 80103b0:	f7ef ff6a 	bl	8000288 <__aeabi_dsub>
 80103b4:	ec41 0b10 	vmov	d0, r0, r1
 80103b8:	ee10 3a90 	vmov	r3, s1
 80103bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80103c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103c4:	da2b      	bge.n	801041e <__ieee754_pow+0x9ce>
 80103c6:	4650      	mov	r0, sl
 80103c8:	f000 f966 	bl	8010698 <scalbn>
 80103cc:	ec51 0b10 	vmov	r0, r1, d0
 80103d0:	ec53 2b18 	vmov	r2, r3, d8
 80103d4:	f7ff bbed 	b.w	800fbb2 <__ieee754_pow+0x162>
 80103d8:	4b30      	ldr	r3, [pc, #192]	; (801049c <__ieee754_pow+0xa4c>)
 80103da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80103de:	429e      	cmp	r6, r3
 80103e0:	f77f af0c 	ble.w	80101fc <__ieee754_pow+0x7ac>
 80103e4:	4b2e      	ldr	r3, [pc, #184]	; (80104a0 <__ieee754_pow+0xa50>)
 80103e6:	440b      	add	r3, r1
 80103e8:	4303      	orrs	r3, r0
 80103ea:	d009      	beq.n	8010400 <__ieee754_pow+0x9b0>
 80103ec:	ec51 0b18 	vmov	r0, r1, d8
 80103f0:	2200      	movs	r2, #0
 80103f2:	2300      	movs	r3, #0
 80103f4:	f7f0 fb72 	bl	8000adc <__aeabi_dcmplt>
 80103f8:	3800      	subs	r0, #0
 80103fa:	bf18      	it	ne
 80103fc:	2001      	movne	r0, #1
 80103fe:	e447      	b.n	800fc90 <__ieee754_pow+0x240>
 8010400:	4622      	mov	r2, r4
 8010402:	462b      	mov	r3, r5
 8010404:	f7ef ff40 	bl	8000288 <__aeabi_dsub>
 8010408:	4642      	mov	r2, r8
 801040a:	464b      	mov	r3, r9
 801040c:	f7f0 fb7a 	bl	8000b04 <__aeabi_dcmpge>
 8010410:	2800      	cmp	r0, #0
 8010412:	f43f aef3 	beq.w	80101fc <__ieee754_pow+0x7ac>
 8010416:	e7e9      	b.n	80103ec <__ieee754_pow+0x99c>
 8010418:	f04f 0a00 	mov.w	sl, #0
 801041c:	e71a      	b.n	8010254 <__ieee754_pow+0x804>
 801041e:	ec51 0b10 	vmov	r0, r1, d0
 8010422:	4619      	mov	r1, r3
 8010424:	e7d4      	b.n	80103d0 <__ieee754_pow+0x980>
 8010426:	491c      	ldr	r1, [pc, #112]	; (8010498 <__ieee754_pow+0xa48>)
 8010428:	2000      	movs	r0, #0
 801042a:	f7ff bb30 	b.w	800fa8e <__ieee754_pow+0x3e>
 801042e:	2000      	movs	r0, #0
 8010430:	2100      	movs	r1, #0
 8010432:	f7ff bb2c 	b.w	800fa8e <__ieee754_pow+0x3e>
 8010436:	4630      	mov	r0, r6
 8010438:	4639      	mov	r1, r7
 801043a:	f7ff bb28 	b.w	800fa8e <__ieee754_pow+0x3e>
 801043e:	9204      	str	r2, [sp, #16]
 8010440:	f7ff bb7a 	b.w	800fb38 <__ieee754_pow+0xe8>
 8010444:	2300      	movs	r3, #0
 8010446:	f7ff bb64 	b.w	800fb12 <__ieee754_pow+0xc2>
 801044a:	bf00      	nop
 801044c:	f3af 8000 	nop.w
 8010450:	00000000 	.word	0x00000000
 8010454:	3fe62e43 	.word	0x3fe62e43
 8010458:	fefa39ef 	.word	0xfefa39ef
 801045c:	3fe62e42 	.word	0x3fe62e42
 8010460:	0ca86c39 	.word	0x0ca86c39
 8010464:	be205c61 	.word	0xbe205c61
 8010468:	72bea4d0 	.word	0x72bea4d0
 801046c:	3e663769 	.word	0x3e663769
 8010470:	c5d26bf1 	.word	0xc5d26bf1
 8010474:	3ebbbd41 	.word	0x3ebbbd41
 8010478:	af25de2c 	.word	0xaf25de2c
 801047c:	3f11566a 	.word	0x3f11566a
 8010480:	16bebd93 	.word	0x16bebd93
 8010484:	3f66c16c 	.word	0x3f66c16c
 8010488:	5555553e 	.word	0x5555553e
 801048c:	3fc55555 	.word	0x3fc55555
 8010490:	3fe00000 	.word	0x3fe00000
 8010494:	000fffff 	.word	0x000fffff
 8010498:	3ff00000 	.word	0x3ff00000
 801049c:	4090cbff 	.word	0x4090cbff
 80104a0:	3f6f3400 	.word	0x3f6f3400
 80104a4:	652b82fe 	.word	0x652b82fe
 80104a8:	3c971547 	.word	0x3c971547

080104ac <__ieee754_sqrt>:
 80104ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b0:	ec55 4b10 	vmov	r4, r5, d0
 80104b4:	4e55      	ldr	r6, [pc, #340]	; (801060c <__ieee754_sqrt+0x160>)
 80104b6:	43ae      	bics	r6, r5
 80104b8:	ee10 0a10 	vmov	r0, s0
 80104bc:	ee10 3a10 	vmov	r3, s0
 80104c0:	462a      	mov	r2, r5
 80104c2:	4629      	mov	r1, r5
 80104c4:	d110      	bne.n	80104e8 <__ieee754_sqrt+0x3c>
 80104c6:	ee10 2a10 	vmov	r2, s0
 80104ca:	462b      	mov	r3, r5
 80104cc:	f7f0 f894 	bl	80005f8 <__aeabi_dmul>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	4620      	mov	r0, r4
 80104d6:	4629      	mov	r1, r5
 80104d8:	f7ef fed8 	bl	800028c <__adddf3>
 80104dc:	4604      	mov	r4, r0
 80104de:	460d      	mov	r5, r1
 80104e0:	ec45 4b10 	vmov	d0, r4, r5
 80104e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	dc10      	bgt.n	801050e <__ieee754_sqrt+0x62>
 80104ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80104f0:	4330      	orrs	r0, r6
 80104f2:	d0f5      	beq.n	80104e0 <__ieee754_sqrt+0x34>
 80104f4:	b15d      	cbz	r5, 801050e <__ieee754_sqrt+0x62>
 80104f6:	ee10 2a10 	vmov	r2, s0
 80104fa:	462b      	mov	r3, r5
 80104fc:	ee10 0a10 	vmov	r0, s0
 8010500:	f7ef fec2 	bl	8000288 <__aeabi_dsub>
 8010504:	4602      	mov	r2, r0
 8010506:	460b      	mov	r3, r1
 8010508:	f7f0 f9a0 	bl	800084c <__aeabi_ddiv>
 801050c:	e7e6      	b.n	80104dc <__ieee754_sqrt+0x30>
 801050e:	1512      	asrs	r2, r2, #20
 8010510:	d074      	beq.n	80105fc <__ieee754_sqrt+0x150>
 8010512:	07d4      	lsls	r4, r2, #31
 8010514:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010518:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801051c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010520:	bf5e      	ittt	pl
 8010522:	0fda      	lsrpl	r2, r3, #31
 8010524:	005b      	lslpl	r3, r3, #1
 8010526:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801052a:	2400      	movs	r4, #0
 801052c:	0fda      	lsrs	r2, r3, #31
 801052e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010532:	107f      	asrs	r7, r7, #1
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	2516      	movs	r5, #22
 8010538:	4620      	mov	r0, r4
 801053a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801053e:	1886      	adds	r6, r0, r2
 8010540:	428e      	cmp	r6, r1
 8010542:	bfde      	ittt	le
 8010544:	1b89      	suble	r1, r1, r6
 8010546:	18b0      	addle	r0, r6, r2
 8010548:	18a4      	addle	r4, r4, r2
 801054a:	0049      	lsls	r1, r1, #1
 801054c:	3d01      	subs	r5, #1
 801054e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010552:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010556:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801055a:	d1f0      	bne.n	801053e <__ieee754_sqrt+0x92>
 801055c:	462a      	mov	r2, r5
 801055e:	f04f 0e20 	mov.w	lr, #32
 8010562:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010566:	4281      	cmp	r1, r0
 8010568:	eb06 0c05 	add.w	ip, r6, r5
 801056c:	dc02      	bgt.n	8010574 <__ieee754_sqrt+0xc8>
 801056e:	d113      	bne.n	8010598 <__ieee754_sqrt+0xec>
 8010570:	459c      	cmp	ip, r3
 8010572:	d811      	bhi.n	8010598 <__ieee754_sqrt+0xec>
 8010574:	f1bc 0f00 	cmp.w	ip, #0
 8010578:	eb0c 0506 	add.w	r5, ip, r6
 801057c:	da43      	bge.n	8010606 <__ieee754_sqrt+0x15a>
 801057e:	2d00      	cmp	r5, #0
 8010580:	db41      	blt.n	8010606 <__ieee754_sqrt+0x15a>
 8010582:	f100 0801 	add.w	r8, r0, #1
 8010586:	1a09      	subs	r1, r1, r0
 8010588:	459c      	cmp	ip, r3
 801058a:	bf88      	it	hi
 801058c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010590:	eba3 030c 	sub.w	r3, r3, ip
 8010594:	4432      	add	r2, r6
 8010596:	4640      	mov	r0, r8
 8010598:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801059c:	f1be 0e01 	subs.w	lr, lr, #1
 80105a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80105a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80105a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80105ac:	d1db      	bne.n	8010566 <__ieee754_sqrt+0xba>
 80105ae:	430b      	orrs	r3, r1
 80105b0:	d006      	beq.n	80105c0 <__ieee754_sqrt+0x114>
 80105b2:	1c50      	adds	r0, r2, #1
 80105b4:	bf13      	iteet	ne
 80105b6:	3201      	addne	r2, #1
 80105b8:	3401      	addeq	r4, #1
 80105ba:	4672      	moveq	r2, lr
 80105bc:	f022 0201 	bicne.w	r2, r2, #1
 80105c0:	1063      	asrs	r3, r4, #1
 80105c2:	0852      	lsrs	r2, r2, #1
 80105c4:	07e1      	lsls	r1, r4, #31
 80105c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80105ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80105ce:	bf48      	it	mi
 80105d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80105d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80105d8:	4614      	mov	r4, r2
 80105da:	e781      	b.n	80104e0 <__ieee754_sqrt+0x34>
 80105dc:	0ad9      	lsrs	r1, r3, #11
 80105de:	3815      	subs	r0, #21
 80105e0:	055b      	lsls	r3, r3, #21
 80105e2:	2900      	cmp	r1, #0
 80105e4:	d0fa      	beq.n	80105dc <__ieee754_sqrt+0x130>
 80105e6:	02cd      	lsls	r5, r1, #11
 80105e8:	d50a      	bpl.n	8010600 <__ieee754_sqrt+0x154>
 80105ea:	f1c2 0420 	rsb	r4, r2, #32
 80105ee:	fa23 f404 	lsr.w	r4, r3, r4
 80105f2:	1e55      	subs	r5, r2, #1
 80105f4:	4093      	lsls	r3, r2
 80105f6:	4321      	orrs	r1, r4
 80105f8:	1b42      	subs	r2, r0, r5
 80105fa:	e78a      	b.n	8010512 <__ieee754_sqrt+0x66>
 80105fc:	4610      	mov	r0, r2
 80105fe:	e7f0      	b.n	80105e2 <__ieee754_sqrt+0x136>
 8010600:	0049      	lsls	r1, r1, #1
 8010602:	3201      	adds	r2, #1
 8010604:	e7ef      	b.n	80105e6 <__ieee754_sqrt+0x13a>
 8010606:	4680      	mov	r8, r0
 8010608:	e7bd      	b.n	8010586 <__ieee754_sqrt+0xda>
 801060a:	bf00      	nop
 801060c:	7ff00000 	.word	0x7ff00000

08010610 <with_errno>:
 8010610:	b570      	push	{r4, r5, r6, lr}
 8010612:	4604      	mov	r4, r0
 8010614:	460d      	mov	r5, r1
 8010616:	4616      	mov	r6, r2
 8010618:	f7fa fc4e 	bl	800aeb8 <__errno>
 801061c:	4629      	mov	r1, r5
 801061e:	6006      	str	r6, [r0, #0]
 8010620:	4620      	mov	r0, r4
 8010622:	bd70      	pop	{r4, r5, r6, pc}

08010624 <xflow>:
 8010624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010626:	4614      	mov	r4, r2
 8010628:	461d      	mov	r5, r3
 801062a:	b108      	cbz	r0, 8010630 <xflow+0xc>
 801062c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010630:	e9cd 2300 	strd	r2, r3, [sp]
 8010634:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010638:	4620      	mov	r0, r4
 801063a:	4629      	mov	r1, r5
 801063c:	f7ef ffdc 	bl	80005f8 <__aeabi_dmul>
 8010640:	2222      	movs	r2, #34	; 0x22
 8010642:	b003      	add	sp, #12
 8010644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010648:	f7ff bfe2 	b.w	8010610 <with_errno>

0801064c <__math_uflow>:
 801064c:	b508      	push	{r3, lr}
 801064e:	2200      	movs	r2, #0
 8010650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010654:	f7ff ffe6 	bl	8010624 <xflow>
 8010658:	ec41 0b10 	vmov	d0, r0, r1
 801065c:	bd08      	pop	{r3, pc}

0801065e <__math_oflow>:
 801065e:	b508      	push	{r3, lr}
 8010660:	2200      	movs	r2, #0
 8010662:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010666:	f7ff ffdd 	bl	8010624 <xflow>
 801066a:	ec41 0b10 	vmov	d0, r0, r1
 801066e:	bd08      	pop	{r3, pc}

08010670 <fabs>:
 8010670:	ec51 0b10 	vmov	r0, r1, d0
 8010674:	ee10 2a10 	vmov	r2, s0
 8010678:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801067c:	ec43 2b10 	vmov	d0, r2, r3
 8010680:	4770      	bx	lr

08010682 <finite>:
 8010682:	b082      	sub	sp, #8
 8010684:	ed8d 0b00 	vstr	d0, [sp]
 8010688:	9801      	ldr	r0, [sp, #4]
 801068a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801068e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010692:	0fc0      	lsrs	r0, r0, #31
 8010694:	b002      	add	sp, #8
 8010696:	4770      	bx	lr

08010698 <scalbn>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	ec55 4b10 	vmov	r4, r5, d0
 801069e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80106a2:	4606      	mov	r6, r0
 80106a4:	462b      	mov	r3, r5
 80106a6:	b99a      	cbnz	r2, 80106d0 <scalbn+0x38>
 80106a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80106ac:	4323      	orrs	r3, r4
 80106ae:	d036      	beq.n	801071e <scalbn+0x86>
 80106b0:	4b39      	ldr	r3, [pc, #228]	; (8010798 <scalbn+0x100>)
 80106b2:	4629      	mov	r1, r5
 80106b4:	ee10 0a10 	vmov	r0, s0
 80106b8:	2200      	movs	r2, #0
 80106ba:	f7ef ff9d 	bl	80005f8 <__aeabi_dmul>
 80106be:	4b37      	ldr	r3, [pc, #220]	; (801079c <scalbn+0x104>)
 80106c0:	429e      	cmp	r6, r3
 80106c2:	4604      	mov	r4, r0
 80106c4:	460d      	mov	r5, r1
 80106c6:	da10      	bge.n	80106ea <scalbn+0x52>
 80106c8:	a32b      	add	r3, pc, #172	; (adr r3, 8010778 <scalbn+0xe0>)
 80106ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ce:	e03a      	b.n	8010746 <scalbn+0xae>
 80106d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80106d4:	428a      	cmp	r2, r1
 80106d6:	d10c      	bne.n	80106f2 <scalbn+0x5a>
 80106d8:	ee10 2a10 	vmov	r2, s0
 80106dc:	4620      	mov	r0, r4
 80106de:	4629      	mov	r1, r5
 80106e0:	f7ef fdd4 	bl	800028c <__adddf3>
 80106e4:	4604      	mov	r4, r0
 80106e6:	460d      	mov	r5, r1
 80106e8:	e019      	b.n	801071e <scalbn+0x86>
 80106ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80106ee:	460b      	mov	r3, r1
 80106f0:	3a36      	subs	r2, #54	; 0x36
 80106f2:	4432      	add	r2, r6
 80106f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80106f8:	428a      	cmp	r2, r1
 80106fa:	dd08      	ble.n	801070e <scalbn+0x76>
 80106fc:	2d00      	cmp	r5, #0
 80106fe:	a120      	add	r1, pc, #128	; (adr r1, 8010780 <scalbn+0xe8>)
 8010700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010704:	da1c      	bge.n	8010740 <scalbn+0xa8>
 8010706:	a120      	add	r1, pc, #128	; (adr r1, 8010788 <scalbn+0xf0>)
 8010708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801070c:	e018      	b.n	8010740 <scalbn+0xa8>
 801070e:	2a00      	cmp	r2, #0
 8010710:	dd08      	ble.n	8010724 <scalbn+0x8c>
 8010712:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010716:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801071a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801071e:	ec45 4b10 	vmov	d0, r4, r5
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010728:	da19      	bge.n	801075e <scalbn+0xc6>
 801072a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801072e:	429e      	cmp	r6, r3
 8010730:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010734:	dd0a      	ble.n	801074c <scalbn+0xb4>
 8010736:	a112      	add	r1, pc, #72	; (adr r1, 8010780 <scalbn+0xe8>)
 8010738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d1e2      	bne.n	8010706 <scalbn+0x6e>
 8010740:	a30f      	add	r3, pc, #60	; (adr r3, 8010780 <scalbn+0xe8>)
 8010742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010746:	f7ef ff57 	bl	80005f8 <__aeabi_dmul>
 801074a:	e7cb      	b.n	80106e4 <scalbn+0x4c>
 801074c:	a10a      	add	r1, pc, #40	; (adr r1, 8010778 <scalbn+0xe0>)
 801074e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d0b8      	beq.n	80106c8 <scalbn+0x30>
 8010756:	a10e      	add	r1, pc, #56	; (adr r1, 8010790 <scalbn+0xf8>)
 8010758:	e9d1 0100 	ldrd	r0, r1, [r1]
 801075c:	e7b4      	b.n	80106c8 <scalbn+0x30>
 801075e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010762:	3236      	adds	r2, #54	; 0x36
 8010764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010768:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801076c:	4620      	mov	r0, r4
 801076e:	4b0c      	ldr	r3, [pc, #48]	; (80107a0 <scalbn+0x108>)
 8010770:	2200      	movs	r2, #0
 8010772:	e7e8      	b.n	8010746 <scalbn+0xae>
 8010774:	f3af 8000 	nop.w
 8010778:	c2f8f359 	.word	0xc2f8f359
 801077c:	01a56e1f 	.word	0x01a56e1f
 8010780:	8800759c 	.word	0x8800759c
 8010784:	7e37e43c 	.word	0x7e37e43c
 8010788:	8800759c 	.word	0x8800759c
 801078c:	fe37e43c 	.word	0xfe37e43c
 8010790:	c2f8f359 	.word	0xc2f8f359
 8010794:	81a56e1f 	.word	0x81a56e1f
 8010798:	43500000 	.word	0x43500000
 801079c:	ffff3cb0 	.word	0xffff3cb0
 80107a0:	3c900000 	.word	0x3c900000

080107a4 <_init>:
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a6:	bf00      	nop
 80107a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107aa:	bc08      	pop	{r3}
 80107ac:	469e      	mov	lr, r3
 80107ae:	4770      	bx	lr

080107b0 <_fini>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	bf00      	nop
 80107b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b6:	bc08      	pop	{r3}
 80107b8:	469e      	mov	lr, r3
 80107ba:	4770      	bx	lr
