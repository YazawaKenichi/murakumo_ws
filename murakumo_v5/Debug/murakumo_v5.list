
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d384  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800d518  0800d518  0001d518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db80  0800db80  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800db80  0800db80  0001db80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db88  0800db88  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db88  0800db88  0001db88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db8c  0800db8c  0001db8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800db90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001431c  200001e0  0800dd6c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200144fc  0800dd6c  000244fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ba0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002efe  00000000  00000000  00036dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  00039cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002365a  00000000  00000000  0003c590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd45  00000000  00000000  0005fbea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb7fe  00000000  00000000  0006f92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  0013b12d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c44  00000000  00000000  0013b1fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4fc 	.word	0x0800d4fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d4fc 	.word	0x0800d4fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t read_byte( uint8_t reg )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <read_byte+0x54>)
 8000fa4:	f005 f940 	bl	8006228 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8000fa8:	f107 010f 	add.w	r1, r7, #15
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <read_byte+0x58>)
 8000fb2:	f005 ff4f 	bl	8006e54 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8000fb6:	f107 010e 	add.w	r1, r7, #14
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <read_byte+0x58>)
 8000fc0:	f006 f87c 	bl	80070bc <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <read_byte+0x54>)
 8000fcc:	f005 f92c 	bl	8006228 <HAL_GPIO_WritePin>
#endif

	return val;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20014140 	.word	0x20014140

08000fe4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <write_byte+0x54>)
 8001006:	f005 f90f 	bl	8006228 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	2201      	movs	r2, #1
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <write_byte+0x58>)
 8001014:	f005 ff1e 	bl	8006e54 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001018:	1db9      	adds	r1, r7, #6
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2201      	movs	r2, #1
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <write_byte+0x58>)
 8001020:	f005 ff18 	bl	8006e54 <HAL_SPI_Transmit>
#if USE_NCS
	CS_SET;
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <write_byte+0x54>)
 800102c:	f005 f8fc 	bl	8006228 <HAL_GPIO_WritePin>
#endif
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400
 800103c:	20014140 	.word	0x20014140

08001040 <IMU_init>:

uint8_t IMU_init(uint8_t* wai)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	4834      	ldr	r0, [pc, #208]	; (8001120 <IMU_init+0xe0>)
 8001050:	f005 f8ea 	bl	8006228 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <IMU_init+0xe4>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <IMU_init+0xe4>)
 8001060:	2200      	movs	r2, #0
 8001062:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 8001064:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <IMU_init+0xe4>)
 8001066:	2200      	movs	r2, #0
 8001068:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 800106a:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <IMU_init+0xe8>)
 800106c:	a42a      	add	r4, pc, #168	; (adr r4, 8001118 <IMU_init+0xd8>)
 800106e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001072:	e9c2 3400 	strd	r3, r4, [r2]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <IMU_init+0xec>)
 8001078:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <IMU_init+0xe4>)
 800107a:	6811      	ldr	r1, [r2, #0]
 800107c:	6019      	str	r1, [r3, #0]
 800107e:	8892      	ldrh	r2, [r2, #4]
 8001080:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <IMU_init+0xec>)
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <IMU_init+0xe4>)
 8001086:	3306      	adds	r3, #6
 8001088:	6811      	ldr	r1, [r2, #0]
 800108a:	6019      	str	r1, [r3, #0]
 800108c:	8892      	ldrh	r2, [r2, #4]
 800108e:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <IMU_init+0xf0>)
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <IMU_init+0xe4>)
 8001094:	6811      	ldr	r1, [r2, #0]
 8001096:	6019      	str	r1, [r3, #0]
 8001098:	8892      	ldrh	r2, [r2, #4]
 800109a:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <IMU_init+0xf0>)
 800109e:	4a21      	ldr	r2, [pc, #132]	; (8001124 <IMU_init+0xe4>)
 80010a0:	3306      	adds	r3, #6
 80010a2:	6811      	ldr	r1, [r2, #0]
 80010a4:	6019      	str	r1, [r3, #0]
 80010a6:	8892      	ldrh	r2, [r2, #4]
 80010a8:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = read_byte(0x00);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff6c 	bl	8000f88 <read_byte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7bba      	ldrb	r2, [r7, #14]
 80010b8:	701a      	strb	r2, [r3, #0]
	if ( who_am_i == 0xE0 )
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2be0      	cmp	r3, #224	; 0xe0
 80010be:	d11e      	bne.n	80010fe <IMU_init+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
		write_byte(PWR_MGMT_1,0x01);	//PWR_MGMT_1
 80010c4:	2101      	movs	r1, #1
 80010c6:	2006      	movs	r0, #6
 80010c8:	f7ff ff8c 	bl	8000fe4 <write_byte>
		HAL_Delay(100);
 80010cc:	2064      	movs	r0, #100	; 0x64
 80010ce:	f003 fadd 	bl	800468c <HAL_Delay>
		write_byte(USER_CTRL,0x10);	//USER_CTRL
 80010d2:	2110      	movs	r1, #16
 80010d4:	2003      	movs	r0, #3
 80010d6:	f7ff ff85 	bl	8000fe4 <write_byte>
		write_byte(REG_BANK_SEL,0x20);	//USER_BANK2
 80010da:	2120      	movs	r1, #32
 80010dc:	207f      	movs	r0, #127	; 0x7f
 80010de:	f7ff ff81 	bl	8000fe4 <write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 80010e2:	2107      	movs	r1, #7
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff ff7d 	bl	8000fe4 <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		write_byte(0x14,0x00);	//range±2g
 80010ea:	2100      	movs	r1, #0
 80010ec:	2014      	movs	r0, #20
 80010ee:	f7ff ff79 	bl	8000fe4 <write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(REG_BANK_SEL,0x00);	//USER_BANK0
 80010f2:	2100      	movs	r1, #0
 80010f4:	207f      	movs	r0, #127	; 0x7f
 80010f6:	f7ff ff75 	bl	8000fe4 <write_byte>
		IMU_set_offset();
 80010fa:	f000 f81b 	bl	8001134 <IMU_set_offset>
	}
#if USE_NCS
	CS_SET;
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <IMU_init+0xe0>)
 8001106:	f005 f88f 	bl	8006228 <HAL_GPIO_WritePin>
#endif
	return ret;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	a2529d39 	.word	0xa2529d39
 800111c:	3f91df46 	.word	0x3f91df46
 8001120:	40020400 	.word	0x40020400
 8001124:	20000210 	.word	0x20000210
 8001128:	20000208 	.word	0x20000208
 800112c:	20000230 	.word	0x20000230
 8001130:	20000224 	.word	0x20000224

08001134 <IMU_set_offset>:
	CS_SET;
#endif
}

void IMU_set_offset()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	IMU_read();
 8001138:	f000 f80e 	bl	8001158 <IMU_read>
	inertial_offset = inertial;
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <IMU_set_offset+0x1c>)
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <IMU_set_offset+0x20>)
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	6851      	ldr	r1, [r2, #4]
 8001144:	6892      	ldr	r2, [r2, #8]
 8001146:	6018      	str	r0, [r3, #0]
 8001148:	6059      	str	r1, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000218 	.word	0x20000218
 8001154:	20000230 	.word	0x20000230

08001158 <IMU_read>:

void IMU_read()
{
 8001158:	b598      	push	{r3, r4, r7, lr}
 800115a:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)read_byte(ACCEL_XOUT_L));
 800115c:	202d      	movs	r0, #45	; 0x2d
 800115e:	f7ff ff13 	bl	8000f88 <read_byte>
 8001162:	4603      	mov	r3, r0
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21c      	sxth	r4, r3
 8001168:	202e      	movs	r0, #46	; 0x2e
 800116a:	f7ff ff0d 	bl	8000f88 <read_byte>
 800116e:	4603      	mov	r3, r0
 8001170:	b21b      	sxth	r3, r3
 8001172:	4323      	orrs	r3, r4
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <IMU_read+0xbc>)
 8001178:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)read_byte(ACCEL_YOUT_L));
 800117a:	202f      	movs	r0, #47	; 0x2f
 800117c:	f7ff ff04 	bl	8000f88 <read_byte>
 8001180:	4603      	mov	r3, r0
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21c      	sxth	r4, r3
 8001186:	2030      	movs	r0, #48	; 0x30
 8001188:	f7ff fefe 	bl	8000f88 <read_byte>
 800118c:	4603      	mov	r3, r0
 800118e:	b21b      	sxth	r3, r3
 8001190:	4323      	orrs	r3, r4
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <IMU_read+0xbc>)
 8001196:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)read_byte(ACCEL_ZOUT_L));
 8001198:	2031      	movs	r0, #49	; 0x31
 800119a:	f7ff fef5 	bl	8000f88 <read_byte>
 800119e:	4603      	mov	r3, r0
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21c      	sxth	r4, r3
 80011a4:	2032      	movs	r0, #50	; 0x32
 80011a6:	f7ff feef 	bl	8000f88 <read_byte>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4323      	orrs	r3, r4
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <IMU_read+0xbc>)
 80011b4:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)read_byte(GYRO_XOUT_H) << 8) | ((int16_t)read_byte(GYRO_XOUT_L));
 80011b6:	2033      	movs	r0, #51	; 0x33
 80011b8:	f7ff fee6 	bl	8000f88 <read_byte>
 80011bc:	4603      	mov	r3, r0
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21c      	sxth	r4, r3
 80011c2:	2034      	movs	r0, #52	; 0x34
 80011c4:	f7ff fee0 	bl	8000f88 <read_byte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4323      	orrs	r3, r4
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <IMU_read+0xbc>)
 80011d2:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)read_byte(GYRO_YOUT_H) << 8) | ((int16_t)read_byte(GYRO_YOUT_L));
 80011d4:	2035      	movs	r0, #53	; 0x35
 80011d6:	f7ff fed7 	bl	8000f88 <read_byte>
 80011da:	4603      	mov	r3, r0
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21c      	sxth	r4, r3
 80011e0:	2036      	movs	r0, #54	; 0x36
 80011e2:	f7ff fed1 	bl	8000f88 <read_byte>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4323      	orrs	r3, r4
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <IMU_read+0xbc>)
 80011f0:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)read_byte(GYRO_ZOUT_L));
 80011f2:	2037      	movs	r0, #55	; 0x37
 80011f4:	f7ff fec8 	bl	8000f88 <read_byte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21c      	sxth	r4, r3
 80011fe:	2038      	movs	r0, #56	; 0x38
 8001200:	f7ff fec2 	bl	8000f88 <read_byte>
 8001204:	4603      	mov	r3, r0
 8001206:	b21b      	sxth	r3, r3
 8001208:	4323      	orrs	r3, r4
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <IMU_read+0xbc>)
 800120e:	815a      	strh	r2, [r3, #10]
}
 8001210:	bf00      	nop
 8001212:	bd98      	pop	{r3, r4, r7, pc}
 8001214:	20000230 	.word	0x20000230

08001218 <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

#if USE_LED
void led_rgb(char r, char g, char b) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	460b      	mov	r3, r1
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	4613      	mov	r3, r2
 8001228:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123c:	480f      	ldr	r0, [pc, #60]	; (800127c <led_rgb+0x64>)
 800123e:	f004 fff3 	bl	8006228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <led_rgb+0x64>)
 8001256:	f004 ffe7 	bl	8006228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf0c      	ite	eq
 8001260:	2301      	moveq	r3, #1
 8001262:	2300      	movne	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <led_rgb+0x68>)
 800126e:	f004 ffdb 	bl	8006228 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020000 	.word	0x40020000
 8001280:	40020800 	.word	0x40020800

08001284 <set_led>:
void set_led(char mask, char value) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
	if (mask & 0b01) {
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00d      	beq.n	80012ba <set_led+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,
				(value & 0b01) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// RIGHT
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <set_led+0x64>)
 80012b6:	f004 ffb7 	bl	8006228 <HAL_GPIO_WritePin>
	}
	if (mask & 0b10) {
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00d      	beq.n	80012e0 <set_led+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,
				(value & 0b10) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LEFT
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	f003 0302 	and.w	r3, r3, #2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <set_led+0x68>)
 80012dc:	f004 ffa4 	bl	8006228 <HAL_GPIO_WritePin>
	}
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020400 	.word	0x40020400

080012f0 <playmode_print>:
#endif

void playmode_print() {
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
		default:
			printf("unknown;;\r\n");
			break;
	}
	#endif
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <d_print>:

void d_print() {
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af04      	add	r7, sp, #16
	printf("////////// d_print //////////\r\n");
 8001306:	4841      	ldr	r0, [pc, #260]	; (800140c <d_print+0x10c>)
 8001308:	f008 fd78 	bl	8009dfc <puts>
	printf("\r\n");

#endif	// D_ANALOG

#if D_ENCODER
	printf("encoder_l = %d, encoder_r = %d \r\n",
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <d_print+0x110>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	4619      	mov	r1, r3
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <d_print+0x114>)
 8001316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131a:	461a      	mov	r2, r3
 800131c:	483e      	ldr	r0, [pc, #248]	; (8001418 <d_print+0x118>)
 800131e:	f008 fcf9 	bl	8009d14 <iprintf>
			encoder_l, encoder_r);
	printf("course_length = %7.2f\r\n", course_length);
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <d_print+0x11c>)
 8001324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001328:	461a      	mov	r2, r3
 800132a:	4623      	mov	r3, r4
 800132c:	483c      	ldr	r0, [pc, #240]	; (8001420 <d_print+0x120>)
 800132e:	f008 fcf1 	bl	8009d14 <iprintf>
*/
	/*
	printf("TIM1->CNT = %5d, TIM3->CNT = %5d\r\nencoder_l = %5d, encoder_r = %5d\r\n", TIM1->CNT, TIM3->CNT, encoder_l, encoder_r);
	*/

	printf("encoder_lr = %7d, %7d\r\nencoder = %7d\r\ns_encoder = %7d\r\ns_velocity = %7.3f\r\n", encoder_l, encoder_r, encoder, s_encoder, s_velocity);
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <d_print+0x110>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	4619      	mov	r1, r3
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <d_print+0x114>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	4618      	mov	r0, r3
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <d_print+0x124>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	461d      	mov	r5, r3
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <d_print+0x128>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	461a      	mov	r2, r3
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <d_print+0x12c>)
 8001354:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001358:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800135c:	9200      	str	r2, [sp, #0]
 800135e:	462b      	mov	r3, r5
 8001360:	4602      	mov	r2, r0
 8001362:	4833      	ldr	r0, [pc, #204]	; (8001430 <d_print+0x130>)
 8001364:	f008 fcd6 	bl	8009d14 <iprintf>
#if D_SWITCH
	printf("enter = %d\r\n", enter);
#endif

#if D_FLASH
	printf("rightmarkercount = %1d\r\n", rightmarkercount);
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <d_print+0x134>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4832      	ldr	r0, [pc, #200]	; (8001438 <d_print+0x138>)
 8001370:	f008 fcd0 	bl	8009d14 <iprintf>
	printf("sampling_length = %5f\r\n", mm_length);
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <d_print+0x13c>)
 8001376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	4623      	mov	r3, r4
 800137e:	4830      	ldr	r0, [pc, #192]	; (8001440 <d_print+0x140>)
 8001380:	f008 fcc8 	bl	8009d14 <iprintf>
	printf("sampling_time = %5d\r\n", sampling_time);
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <d_print+0x144>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	482f      	ldr	r0, [pc, #188]	; (8001448 <d_print+0x148>)
 800138c:	f008 fcc2 	bl	8009d14 <iprintf>
	printf("course_state_time = %4d\r\n", course_state_time);
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <d_print+0x14c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	482e      	ldr	r0, [pc, #184]	; (8001450 <d_print+0x150>)
 8001398:	f008 fcbc 	bl	8009d14 <iprintf>

#if D_IMU
	printf("mm_length = %5.3f\r\n", mm_length);
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <d_print+0x13c>)
 800139e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4623      	mov	r3, r4
 80013a6:	482b      	ldr	r0, [pc, #172]	; (8001454 <d_print+0x154>)
 80013a8:	f008 fcb4 	bl	8009d14 <iprintf>
	printf("inertial.gyro.z = %5d, my_gyro.z = %7.3f\r\n", inertial.gyro.z, my_gyro.z);
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <d_print+0x158>)
 80013ae:	895b      	ldrh	r3, [r3, #10]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <d_print+0x15c>)
 80013b6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4623      	mov	r3, r4
 80013be:	4828      	ldr	r0, [pc, #160]	; (8001460 <d_print+0x160>)
 80013c0:	f008 fca8 	bl	8009d14 <iprintf>
	printf("my_gyro.z / mm_length = %8.5f\r\n", (double) my_gyro.z / (double) mm_length);
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <d_print+0x15c>)
 80013c6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <d_print+0x13c>)
 80013cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4623      	mov	r3, r4
 80013d4:	f7ff fa3a 	bl	800084c <__aeabi_ddiv>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	4820      	ldr	r0, [pc, #128]	; (8001464 <d_print+0x164>)
 80013e2:	f008 fc97 	bl	8009d14 <iprintf>
#endif

#if !D_COURSE_SAVING
	printf("flash_buffer.radius[%4d] = %8.3f\r\n", course_state_time,
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <d_print+0x14c>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <d_print+0x14c>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <d_print+0x168>)
 80013f2:	3307      	adds	r3, #7
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	481a      	ldr	r0, [pc, #104]	; (800146c <d_print+0x16c>)
 8001402:	f008 fc87 	bl	8009d14 <iprintf>
		printf("sigmoid = %5.3f\r\n", 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500));
	}
#endif
#endif

}	// d_print
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bdb0      	pop	{r4, r5, r7, pc}
 800140c:	0800d518 	.word	0x0800d518
 8001410:	20000370 	.word	0x20000370
 8001414:	20013f38 	.word	0x20013f38
 8001418:	0800d538 	.word	0x0800d538
 800141c:	20000240 	.word	0x20000240
 8001420:	0800d55c 	.word	0x0800d55c
 8001424:	20000300 	.word	0x20000300
 8001428:	20013e50 	.word	0x20013e50
 800142c:	20000398 	.word	0x20000398
 8001430:	0800d574 	.word	0x0800d574
 8001434:	20013f98 	.word	0x20013f98
 8001438:	0800d5c0 	.word	0x0800d5c0
 800143c:	20013e40 	.word	0x20013e40
 8001440:	0800d5dc 	.word	0x0800d5dc
 8001444:	20000278 	.word	0x20000278
 8001448:	0800d5f4 	.word	0x0800d5f4
 800144c:	20013f9a 	.word	0x20013f9a
 8001450:	0800d60c 	.word	0x0800d60c
 8001454:	0800d628 	.word	0x0800d628
 8001458:	20000230 	.word	0x20000230
 800145c:	20013f78 	.word	0x20013f78
 8001460:	0800d63c 	.word	0x0800d63c
 8001464:	0800d668 	.word	0x0800d668
 8001468:	200003d0 	.word	0x200003d0
 800146c:	0800d688 	.word	0x0800d688

08001470 <HAL_ADC_ConvCpltCallback>:
double low_pass_filter(double val, double pre_val, double gamma) {
	return (double) (gamma * (double) pre_val
			+ (double) (1 - gamma) * (double) val);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 8001470:	b4b0      	push	{r4, r5, r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	// sort
	if (sensgettime >= SENSGETCOUNT) {
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x144>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b08      	cmp	r3, #8
 800147e:	d973      	bls.n	8001568 <HAL_ADC_ConvCpltCallback+0xf8>
		sensgettime = 0;
 8001480:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x144>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e06a      	b.n	8001562 <HAL_ADC_ConvCpltCallback+0xf2>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 800148c:	2300      	movs	r3, #0
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	e039      	b.n	8001506 <HAL_ADC_ConvCpltCallback+0x96>
				for (unsigned char alphaindex = 0; alphaindex > count;
 8001492:	2300      	movs	r3, #0
 8001494:	737b      	strb	r3, [r7, #13]
 8001496:	e02f      	b.n	80014f8 <HAL_ADC_ConvCpltCallback+0x88>
						alphaindex--) {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001498:	7b7b      	ldrb	r3, [r7, #13]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	7bf9      	ldrb	r1, [r7, #15]
 800149e:	4846      	ldr	r0, [pc, #280]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x148>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80014ae:	813b      	strh	r3, [r7, #8]
					analogbuffers[alphaindex - 1][index] =
							analogbuffers[alphaindex][index];
 80014b0:	7b79      	ldrb	r1, [r7, #13]
 80014b2:	7bfc      	ldrb	r4, [r7, #15]
					analogbuffers[alphaindex - 1][index] =
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	7bf8      	ldrb	r0, [r7, #15]
							analogbuffers[alphaindex][index];
 80014ba:	4d3f      	ldr	r5, [pc, #252]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x148>)
 80014bc:	460b      	mov	r3, r1
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	440b      	add	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4423      	add	r3, r4
 80014c6:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
					analogbuffers[alphaindex - 1][index] =
 80014ca:	493b      	ldr	r1, [pc, #236]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x148>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4403      	add	r3, r0
 80014d6:	4622      	mov	r2, r4
 80014d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 80014dc:	7b7a      	ldrb	r2, [r7, #13]
 80014de:	7bf9      	ldrb	r1, [r7, #15]
 80014e0:	4835      	ldr	r0, [pc, #212]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x148>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	893a      	ldrh	r2, [r7, #8]
 80014ee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						alphaindex--) {
 80014f2:	7b7b      	ldrb	r3, [r7, #13]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	737b      	strb	r3, [r7, #13]
				for (unsigned char alphaindex = 0; alphaindex > count;
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8cb      	bhi.n	8001498 <HAL_ADC_ConvCpltCallback+0x28>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	3301      	adds	r3, #1
 8001504:	73bb      	strb	r3, [r7, #14]
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d9c2      	bls.n	8001492 <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4929      	ldr	r1, [pc, #164]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x148>)
 8001512:	3230      	adds	r2, #48	; 0x30
 8001514:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <HAL_ADC_ConvCpltCallback+0x14c>)
 800151a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// get maxvalue and minimumvalue
			uint16_t analogbuf;
			analogbuf = analog[index];
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_ADC_ConvCpltCallback+0x14c>)
 8001522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001526:	817b      	strh	r3, [r7, #10]
			analogmax[index] =
					(analogmax[index] < analogbuf) ?
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x150>)
 800152c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
			analogmax[index] =
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	8979      	ldrh	r1, [r7, #10]
 8001534:	428a      	cmp	r2, r1
 8001536:	bf38      	it	cc
 8001538:	460a      	movcc	r2, r1
 800153a:	b291      	uxth	r1, r2
 800153c:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x150>)
 800153e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							analogbuf : analogmax[index];
			analogmin[index] =
					(analogmin[index] > analogbuf) ?
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x154>)
 8001546:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
			analogmin[index] =
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	8979      	ldrh	r1, [r7, #10]
 800154e:	428a      	cmp	r2, r1
 8001550:	bf28      	it	cs
 8001552:	460a      	movcs	r2, r1
 8001554:	b291      	uxth	r1, r2
 8001556:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x154>)
 8001558:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	3301      	adds	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b0b      	cmp	r3, #11
 8001566:	d991      	bls.n	800148c <HAL_ADC_ConvCpltCallback+0x1c>
							analogbuf : analogmin[index];
		}
	}
	// sensorget
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 8001568:	2300      	movs	r3, #0
 800156a:	733b      	strb	r3, [r7, #12]
 800156c:	e013      	b.n	8001596 <HAL_ADC_ConvCpltCallback+0x126>
		analogbuffers[sensgettime][index] = analograw[index];
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x144>)
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	4610      	mov	r0, r2
 8001576:	7b3a      	ldrb	r2, [r7, #12]
 8001578:	4913      	ldr	r1, [pc, #76]	; (80015c8 <HAL_ADC_ConvCpltCallback+0x158>)
 800157a:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800157e:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x148>)
 8001580:	4603      	mov	r3, r0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	4622      	mov	r2, r4
 800158c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 8001590:	7b3b      	ldrb	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	733b      	strb	r3, [r7, #12]
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	2b0b      	cmp	r3, #11
 800159a:	d9e8      	bls.n	800156e <HAL_ADC_ConvCpltCallback+0xfe>
	}
	sensgettime++;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x144>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x144>)
 80015a6:	701a      	strb	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bcb0      	pop	{r4, r5, r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000298 	.word	0x20000298
 80015b8:	20013e58 	.word	0x20013e58
 80015bc:	20000260 	.word	0x20000260
 80015c0:	20013f48 	.word	0x20013f48
 80015c4:	20000304 	.word	0x20000304
 80015c8:	2000029c 	.word	0x2000029c

080015cc <eraseFlash>:
	// printf("pow(%5.3f, %5.3f, %5.3f)\r\n", x, a, x0);
	return 1 / (double) (1 + exp(-a * (x - x0)));
}

#if USE_FLASH
void eraseFlash(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 80015d6:	230b      	movs	r3, #11
 80015d8:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80015de:	2302      	movs	r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 80015e6:	463a      	mov	r2, r7
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 fb47 	bl	8005c80 <HAL_FLASHEx_Erase>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <writeFlash>:

void writeFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b087      	sub	sp, #28
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8001606:	f004 f9db 	bl	80059c0 <HAL_FLASH_Unlock>
	eraseFlash();
 800160a:	f7ff ffdf 	bl	80015cc <eraseFlash>

	for (uint32_t add = address; add < (address + size); add++)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e010      	b.n	8001636 <writeFlash+0x3c>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f04f 0400 	mov.w	r4, #0
 800161e:	461a      	mov	r2, r3
 8001620:	4623      	mov	r3, r4
 8001622:	6979      	ldr	r1, [r7, #20]
 8001624:	2000      	movs	r0, #0
 8001626:	f004 f977 	bl	8005918 <HAL_FLASH_Program>
		data++;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	429a      	cmp	r2, r3
 8001640:	d3e8      	bcc.n	8001614 <writeFlash+0x1a>
	}

	HAL_FLASH_Lock();
 8001642:	f004 f9df 	bl	8005a04 <HAL_FLASH_Lock>
#endif
}
 8001646:	bf00      	nop
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <loadFlash>:

void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4619      	mov	r1, r3
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f007 fd05 	bl	8009070 <memcpy>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <sidesens_function>:
#endif

void sidesens_function()
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
#if USE_SIDESENSOR
	unsigned char subsens, first, second;

	subsens = read_sidesens();
 8001676:	f002 f8eb 	bl	8003850 <read_sidesens>
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]

	if (subsens != subsensbuf)
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <sidesens_function+0x10c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	429a      	cmp	r2, r3
 8001686:	d074      	beq.n	8001772 <sidesens_function+0x102>
	{
		subsensbuf = subsens;
 8001688:	4a3c      	ldr	r2, [pc, #240]	; (800177c <sidesens_function+0x10c>)
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <sidesens_function+0x110>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <sidesens_function+0x114>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b37      	ldr	r3, [pc, #220]	; (8001784 <sidesens_function+0x114>)
 80016a6:	701a      	strb	r2, [r3, #0]
		if (subsens == 0b00 && sidedeltacount != 0)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d15b      	bne.n	8001766 <sidesens_function+0xf6>
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <sidesens_function+0x110>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d057      	beq.n	8001766 <sidesens_function+0xf6>
		{
			first = (marker & 0b0011);
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <sidesens_function+0x114>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <sidesens_function+0x114>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	109b      	asrs	r3, r3, #2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 80016ce:	797b      	ldrb	r3, [r7, #5]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d13e      	bne.n	8001752 <sidesens_function+0xe2>
			{
				if (first == 0b01)
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d121      	bne.n	800171e <sidesens_function+0xae>
				{
					// right -> stop
					markerstate = 0b01;
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <sidesens_function+0x118>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
					if(rightmarkercount == 1 - 1)
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <sidesens_function+0x11c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10a      	bne.n	80016fe <sidesens_function+0x8e>
					{
						rightmarkercount++;
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <sidesens_function+0x11c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <sidesens_function+0x11c>)
 80016f2:	701a      	strb	r2, [r3, #0]
						set_led(0b01, 0b01);
 80016f4:	2101      	movs	r1, #1
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fdc4 	bl	8001284 <set_led>
 80016fc:	e02c      	b.n	8001758 <sidesens_function+0xe8>
					}
					else if (rightmarkercount == 2 - 1)
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <sidesens_function+0x11c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d128      	bne.n	8001758 <sidesens_function+0xe8>
					{
						// stop_motion
						rightmarkercount++;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <sidesens_function+0x11c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <sidesens_function+0x11c>)
 8001710:	701a      	strb	r2, [r3, #0]
						course_state_function();
 8001712:	f000 f8cd 	bl	80018b0 <course_state_function>
						slow = 1;
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <sidesens_function+0x120>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e01c      	b.n	8001758 <sidesens_function+0xe8>
					}
				}
				else if (first == 0b10)
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d112      	bne.n	800174a <sidesens_function+0xda>
				{
					// left -> curve
					markerstate = 0b10;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <sidesens_function+0x118>)
 8001726:	2202      	movs	r2, #2
 8001728:	701a      	strb	r2, [r3, #0]
#if LEFTMARKER_SAMPLING
					course_state_function();
 800172a:	f000 f8c1 	bl	80018b0 <course_state_function>
#endif
				markerstate = 0;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <sidesens_function+0x118>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
#if USE_ANALOG
					sdirection = 0;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <sidesens_function+0x124>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
#endif
#if USE_FLASH && USE_VELOCITY_CONTROL
#if USE_VELOCITY_CONTROL
					s_velocity = 0;
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <sidesens_function+0x128>)
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	e9c2 3400 	strd	r3, r4, [r2]
 8001748:	e006      	b.n	8001758 <sidesens_function+0xe8>
#endif	// USE_FLASH && USE_VELOCITY_CONTROL
				}
				else
				{
					// cross
					markerstate = 0b11;
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <sidesens_function+0x118>)
 800174c:	2203      	movs	r2, #3
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e002      	b.n	8001758 <sidesens_function+0xe8>
				}
			}
			else
			{
				// cross
				markerstate = 0b11;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <sidesens_function+0x118>)
 8001754:	2203      	movs	r2, #3
 8001756:	701a      	strb	r2, [r3, #0]
			}
			sidedeltacount = 0;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <sidesens_function+0x110>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
			marker = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <sidesens_function+0x114>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
		{
			sidedeltacount++;
		}
	}
#endif	// USE_SIDESENSOR
}
 8001764:	e005      	b.n	8001772 <sidesens_function+0x102>
			sidedeltacount++;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <sidesens_function+0x110>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <sidesens_function+0x110>)
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	bf00      	nop
 800177c:	20000320 	.word	0x20000320
 8001780:	20000326 	.word	0x20000326
 8001784:	200003c9 	.word	0x200003c9
 8001788:	20000358 	.word	0x20000358
 800178c:	20013f98 	.word	0x20013f98
 8001790:	20000349 	.word	0x20000349
 8001794:	200002bc 	.word	0x200002bc
 8001798:	20000398 	.word	0x20000398

0800179c <velocity_control_switch_function>:
	}
#endif	// USE_VELOCITY_CONTROL
}

void velocity_control_switch_function()
{
 800179c:	b598      	push	{r3, r4, r7, lr}
 800179e:	af00      	add	r7, sp, #0
#if USE_FLASH
#if !D_COURSE_SAVING
    if(flash_buffer.radius[course_state_time] < THRESHOLDRADIUS)
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <velocity_control_switch_function+0xe8>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	4a38      	ldr	r2, [pc, #224]	; (8001888 <velocity_control_switch_function+0xec>)
 80017a6:	3307      	adds	r3, #7
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <velocity_control_switch_function+0xf0>)
 80017b6:	f7ff f991 	bl	8000adc <__aeabi_dcmplt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d02f      	beq.n	8001820 <velocity_control_switch_function+0x84>
    {
        // deceleration
        velocity_target = low_velo.velocity_target[rv];
 80017c0:	4b33      	ldr	r3, [pc, #204]	; (8001890 <velocity_control_switch_function+0xf4>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <velocity_control_switch_function+0xf8>)
 80017c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe99 	bl	8000504 <__aeabi_ui2d>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	4a30      	ldr	r2, [pc, #192]	; (8001898 <velocity_control_switch_function+0xfc>)
 80017d8:	e9c2 3400 	strd	r3, r4, [r2]
        kp = low_velo.kp[rv];
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <velocity_control_switch_function+0xf4>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <velocity_control_switch_function+0xf8>)
 80017e2:	3304      	adds	r3, #4
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017ec:	4a2b      	ldr	r2, [pc, #172]	; (800189c <velocity_control_switch_function+0x100>)
 80017ee:	e9c2 3400 	strd	r3, r4, [r2]
        kd = low_velo.kd[rv];
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <velocity_control_switch_function+0xf4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4a27      	ldr	r2, [pc, #156]	; (8001894 <velocity_control_switch_function+0xf8>)
 80017f8:	3324      	adds	r3, #36	; 0x24
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <velocity_control_switch_function+0x104>)
 8001804:	e9c2 3400 	strd	r3, r4, [r2]
        ki = low_velo.ki[rv];
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <velocity_control_switch_function+0xf4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4a21      	ldr	r2, [pc, #132]	; (8001894 <velocity_control_switch_function+0xf8>)
 800180e:	3314      	adds	r3, #20
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001818:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <velocity_control_switch_function+0x108>)
 800181a:	e9c2 3400 	strd	r3, r4, [r2]
        kd = high_velo.kd[rv];
        ki = high_velo.ki[rv];
    }
#endif
#endif
}
 800181e:	e02e      	b.n	800187e <velocity_control_switch_function+0xe2>
        velocity_target = high_velo.velocity_target[rv];
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <velocity_control_switch_function+0xf4>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <velocity_control_switch_function+0x10c>)
 8001828:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe69 	bl	8000504 <__aeabi_ui2d>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <velocity_control_switch_function+0xfc>)
 8001838:	e9c2 3400 	strd	r3, r4, [r2]
        kp = high_velo.kp[rv];
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <velocity_control_switch_function+0xf4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <velocity_control_switch_function+0x10c>)
 8001842:	3304      	adds	r3, #4
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4413      	add	r3, r2
 8001848:	e9d3 3400 	ldrd	r3, r4, [r3]
 800184c:	4a13      	ldr	r2, [pc, #76]	; (800189c <velocity_control_switch_function+0x100>)
 800184e:	e9c2 3400 	strd	r3, r4, [r2]
        kd = high_velo.kd[rv];
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <velocity_control_switch_function+0xf4>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <velocity_control_switch_function+0x10c>)
 8001858:	3324      	adds	r3, #36	; 0x24
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <velocity_control_switch_function+0x104>)
 8001864:	e9c2 3400 	strd	r3, r4, [r2]
        ki = high_velo.ki[rv];
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <velocity_control_switch_function+0xf4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <velocity_control_switch_function+0x10c>)
 800186e:	3314      	adds	r3, #20
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4413      	add	r3, r2
 8001874:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <velocity_control_switch_function+0x108>)
 800187a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800187e:	bf00      	nop
 8001880:	bd98      	pop	{r3, r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	20013f9a 	.word	0x20013f9a
 8001888:	200003d0 	.word	0x200003d0
 800188c:	407f4000 	.word	0x407f4000
 8001890:	200003c8 	.word	0x200003c8
 8001894:	20013ca0 	.word	0x20013ca0
 8001898:	20013f30 	.word	0x20013f30
 800189c:	20013f68 	.word	0x20013f68
 80018a0:	20000290 	.word	0x20000290
 80018a4:	200003b0 	.word	0x200003b0
 80018a8:	20013fa0 	.word	0x20013fa0
 80018ac:	00000000 	.word	0x00000000

080018b0 <course_state_function>:

void course_state_function()
{
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	if(playmode == search)
 80018b4:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <course_state_function+0x160>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	f040 8083 	bne.w	80019c4 <course_state_function+0x114>
	{
		if(course_state_time + 1 >= COURSE_STATE_SIZE)	// sizeof(flash_buffer.radius) / sizeof(flash_buffer.radius[0]))
 80018be:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <course_state_function+0x164>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80018c8:	4293      	cmp	r3, r2
 80018ca:	dd08      	ble.n	80018de <course_state_function+0x2e>
		{
			led_rgb(1, 1, 0);	// Yellow
 80018cc:	2200      	movs	r2, #0
 80018ce:	2101      	movs	r1, #1
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fca1 	bl	8001218 <led_rgb>
			motorenable = 0;
 80018d6:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <course_state_function+0x168>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e072      	b.n	80019c4 <course_state_function+0x114>
		}
		else
		{
#if USE_COURSE_STATE_TIME
			course_state_time++;
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <course_state_function+0x164>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <course_state_function+0x164>)
 80018e8:	801a      	strh	r2, [r3, #0]
#endif
			flash_buffer.course_state_time_max = course_state_time;
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <course_state_function+0x164>)
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <course_state_function+0x16c>)
 80018f0:	801a      	strh	r2, [r3, #0]
			my_gyro.z = theta * RADPERDEG;
 80018f2:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <course_state_function+0x170>)
 80018f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f8:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <course_state_function+0x174>)
 80018fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018fe:	461a      	mov	r2, r3
 8001900:	4623      	mov	r3, r4
 8001902:	f7fe fe79 	bl	80005f8 <__aeabi_dmul>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	4a47      	ldr	r2, [pc, #284]	; (8001a28 <course_state_function+0x178>)
 800190c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	//		my_gyro.z *= RADPERDEG;
	#if !D_COURSE_SAVING
	#if !USE_LR_DIFFERENCE
			flash_buffer.radius[course_state_time] = (double) my_gyro.z / (double) mm_length;
	#else	// USE_LR_DIFFERENCE
			flash_buffer.radius[course_state_time] = (double) TREAD * (double) ((left_length) + (right_length)) / (double) ((left_length) - (right_length)) / (double) 2;
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <course_state_function+0x17c>)
 8001912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001916:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <course_state_function+0x180>)
 8001918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800191c:	461a      	mov	r2, r3
 800191e:	4623      	mov	r3, r4
 8001920:	f7fe fcb4 	bl	800028c <__adddf3>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	a336      	add	r3, pc, #216	; (adr r3, 8001a08 <course_state_function+0x158>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe61 	bl	80005f8 <__aeabi_dmul>
 8001936:	4603      	mov	r3, r0
 8001938:	460c      	mov	r4, r1
 800193a:	461d      	mov	r5, r3
 800193c:	4626      	mov	r6, r4
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <course_state_function+0x17c>)
 8001940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <course_state_function+0x180>)
 8001946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800194a:	461a      	mov	r2, r3
 800194c:	4623      	mov	r3, r4
 800194e:	f7fe fc9b 	bl	8000288 <__aeabi_dsub>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	461a      	mov	r2, r3
 8001958:	4623      	mov	r3, r4
 800195a:	4628      	mov	r0, r5
 800195c:	4631      	mov	r1, r6
 800195e:	f7fe ff75 	bl	800084c <__aeabi_ddiv>
 8001962:	4603      	mov	r3, r0
 8001964:	460c      	mov	r4, r1
 8001966:	4618      	mov	r0, r3
 8001968:	4621      	mov	r1, r4
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <course_state_function+0x164>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	461d      	mov	r5, r3
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001978:	f7fe ff68 	bl	800084c <__aeabi_ddiv>
 800197c:	4603      	mov	r3, r0
 800197e:	460c      	mov	r4, r1
 8001980:	4926      	ldr	r1, [pc, #152]	; (8001a1c <course_state_function+0x16c>)
 8001982:	1dea      	adds	r2, r5, #7
 8001984:	00d2      	lsls	r2, r2, #3
 8001986:	440a      	add	r2, r1
 8001988:	e9c2 3400 	strd	r3, r4, [r2]
			flash_buffer.igz[course_state_time] = my_gyro.z;
			flash_buffer.len[course_state_time] = mm_length;
	#endif	// !USE_LR_DIFFERENCE
	#endif	// D_COURSE_SAVING
	#if USE_LR_DIFFERENCE
			left_length = 0;
 800198c:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <course_state_function+0x17c>)
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	f04f 0400 	mov.w	r4, #0
 8001996:	e9c2 3400 	strd	r3, r4, [r2]
			right_length = 0;
 800199a:	4a25      	ldr	r2, [pc, #148]	; (8001a30 <course_state_function+0x180>)
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	e9c2 3400 	strd	r3, r4, [r2]
	#endif
			mm_length = 0;
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <course_state_function+0x184>)
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f04f 0400 	mov.w	r4, #0
 80019b2:	e9c2 3400 	strd	r3, r4, [r2]
			my_gyro.z = 0;
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <course_state_function+0x178>)
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	f04f 0400 	mov.w	r4, #0
 80019c0:	e9c2 3404 	strd	r3, r4, [r2, #16]
		}
	}
	if(playmode == accel || playmode == max_enable)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <course_state_function+0x160>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d003      	beq.n	80019d4 <course_state_function+0x124>
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <course_state_function+0x160>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d117      	bne.n	8001a04 <course_state_function+0x154>
	{
		velocity_control_switch_function();
 80019d4:	f7ff fee2 	bl	800179c <velocity_control_switch_function>
		if(course_state_time + 1 >= COURSE_STATE_SIZE)	// sizeof(flash_buffer.radius) / sizeof(flash_buffer.radius[0]))
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <course_state_function+0x164>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	f242 720f 	movw	r2, #9999	; 0x270f
 80019e2:	4293      	cmp	r3, r2
 80019e4:	dd08      	ble.n	80019f8 <course_state_function+0x148>
		{
			led_rgb(1, 1, 0);	// Yellow
 80019e6:	2200      	movs	r2, #0
 80019e8:	2101      	movs	r1, #1
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff fc14 	bl	8001218 <led_rgb>
			motorenable = 0;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <course_state_function+0x168>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
#if USE_COURSE_STATE_TIME
			course_state_time++;
#endif
		}
	}
}
 80019f6:	e005      	b.n	8001a04 <course_state_function+0x154>
			course_state_time++;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <course_state_function+0x164>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <course_state_function+0x164>)
 8001a02:	801a      	strh	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	4059c000 	.word	0x4059c000
 8001a10:	200002c8 	.word	0x200002c8
 8001a14:	20013f9a 	.word	0x20013f9a
 8001a18:	20013e52 	.word	0x20013e52
 8001a1c:	200003d0 	.word	0x200003d0
 8001a20:	20000330 	.word	0x20000330
 8001a24:	20000208 	.word	0x20000208
 8001a28:	20013f78 	.word	0x20013f78
 8001a2c:	20000360 	.word	0x20000360
 8001a30:	20000340 	.word	0x20000340
 8001a34:	20013e40 	.word	0x20013e40

08001a38 <led_brink>:
	*/
#endif	// USE_IMU
}

void led_brink()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
#if USE_LED
	uint16_t TIMTIM = 1000;
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	80fb      	strh	r3, [r7, #6]

	if (timtim1 % TIMTIM == 0)	// 1 ms / roop
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <led_brink+0x70>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a4e:	fb02 f201 	mul.w	r2, r2, r1
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <led_brink+0x28>
	{
		set_led(0b10, 0b10);
 8001a58:	2102      	movs	r1, #2
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f7ff fc12 	bl	8001284 <set_led>
	}
	if (timtim1 % TIMTIM == (int) (TIMTIM / 2))
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <led_brink+0x70>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a6a:	fb02 f201 	mul.w	r2, r2, r1
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	0852      	lsrs	r2, r2, #1
 8001a74:	b292      	uxth	r2, r2
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d103      	bne.n	8001a82 <led_brink+0x4a>
	{
		set_led(0b10, 0b00);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f7ff fc01 	bl	8001284 <set_led>
	}
	timtim1 = timtim1 + 1;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <led_brink+0x70>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <led_brink+0x70>)
 8001a8a:	6013      	str	r3, [r2, #0]
	if (timtim1 >= 60000)
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <led_brink+0x70>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001a94:	4293      	cmp	r3, r2
 8001a96:	dd02      	ble.n	8001a9e <led_brink+0x66>
	{
		timtim1 = 0;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <led_brink+0x70>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
	}
#endif
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000374 	.word	0x20000374
 8001aac:	00000000 	.word	0x00000000

08001ab0 <pid_gain_initialize>:

void pid_gain_initialize()
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	e019      	b.n	8001af0 <pid_gain_initialize+0x40>
	{
		low_velo.velocity_target[i] = VELOCITY_TARGET_LOW;
 8001abc:	4a86      	ldr	r2, [pc, #536]	; (8001cd8 <pid_gain_initialize+0x228>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(playmode != max_enable)
 8001ac8:	4b84      	ldr	r3, [pc, #528]	; (8001cdc <pid_gain_initialize+0x22c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d006      	beq.n	8001ade <pid_gain_initialize+0x2e>
		{
			high_velo.velocity_target[i] = VELOCITY_TARGET_HIGH;
 8001ad0:	4a83      	ldr	r2, [pc, #524]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001adc:	e005      	b.n	8001aea <pid_gain_initialize+0x3a>
		}
		else
		{
			high_velo.velocity_target[i] = VELOCITY_TARGET_MAX;
 8001ade:	4a80      	ldr	r2, [pc, #512]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 16; i++)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3301      	adds	r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	dde2      	ble.n	8001abc <pid_gain_initialize+0xc>
		}
	}
	low_velo.kp[0] = KP_LOW;
 8001af6:	4a78      	ldr	r2, [pc, #480]	; (8001cd8 <pid_gain_initialize+0x228>)
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	4c79      	ldr	r4, [pc, #484]	; (8001ce4 <pid_gain_initialize+0x234>)
 8001afe:	e9c2 3408 	strd	r3, r4, [r2, #32]
	low_velo.ki[0] = KI_LOW;
 8001b02:	4a75      	ldr	r2, [pc, #468]	; (8001cd8 <pid_gain_initialize+0x228>)
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	f04f 0400 	mov.w	r4, #0
 8001b0c:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	low_velo.kd[0] = KD_LOW;
 8001b10:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <pid_gain_initialize+0x228>)
 8001b12:	a46f      	add	r4, pc, #444	; (adr r4, 8001cd0 <pid_gain_initialize+0x220>)
 8001b14:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b18:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
	if(playmode != max_enable)
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <pid_gain_initialize+0x22c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d013      	beq.n	8001b4c <pid_gain_initialize+0x9c>
	{
		high_velo.kp[0] = KP_HIGH;
 8001b24:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	4c6f      	ldr	r4, [pc, #444]	; (8001ce8 <pid_gain_initialize+0x238>)
 8001b2c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		high_velo.ki[0] = KI_HIGH;
 8001b30:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	f04f 0400 	mov.w	r4, #0
 8001b3a:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
		high_velo.kd[0] = KD_HIGH;
 8001b3e:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001b40:	a463      	add	r4, pc, #396	; (adr r4, 8001cd0 <pid_gain_initialize+0x220>)
 8001b42:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b46:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 8001b4a:	e012      	b.n	8001b72 <pid_gain_initialize+0xc2>
	}
	else
	{
		high_velo.kp[0] = KP_MAX;
 8001b4c:	4a64      	ldr	r2, [pc, #400]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	4c66      	ldr	r4, [pc, #408]	; (8001cec <pid_gain_initialize+0x23c>)
 8001b54:	e9c2 3408 	strd	r3, r4, [r2, #32]
		high_velo.ki[0] = KI_MAX;
 8001b58:	4a61      	ldr	r2, [pc, #388]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	f04f 0400 	mov.w	r4, #0
 8001b62:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
		high_velo.kd[0] = KD_MAX;
 8001b66:	4a5e      	ldr	r2, [pc, #376]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	4c60      	ldr	r4, [pc, #384]	; (8001cf0 <pid_gain_initialize+0x240>)
 8001b6e:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
	}
	for(int i = 1; i < 16; i++)
 8001b72:	2301      	movs	r3, #1
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	e0a2      	b.n	8001cbe <pid_gain_initialize+0x20e>
	{
		low_velo.kp[i] = KP_LOW + (i - 1) * KP_LOW_TOLERANCE;
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <pid_gain_initialize+0x228>)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	441a      	add	r2, r3
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	4c57      	ldr	r4, [pc, #348]	; (8001ce4 <pid_gain_initialize+0x234>)
 8001b88:	e9c2 3400 	strd	r3, r4, [r2]
		low_velo.ki[i] = KI_LOW + (i - 1) * KI_LOW_TOLERANCE;
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <pid_gain_initialize+0x228>)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3314      	adds	r3, #20
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	441a      	add	r2, r3
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	f04f 0400 	mov.w	r4, #0
 8001b9e:	e9c2 3400 	strd	r3, r4, [r2]
		low_velo.kd[i] = KD_LOW + (i - 1) * KD_LOW_TOLERANCE;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001cf4 <pid_gain_initialize+0x244>
 8001bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001cf8 <pid_gain_initialize+0x248>
 8001bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bbe:	ee17 0a90 	vmov	r0, s15
 8001bc2:	f7fe fcc1 	bl	8000548 <__aeabi_f2d>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	4943      	ldr	r1, [pc, #268]	; (8001cd8 <pid_gain_initialize+0x228>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	3224      	adds	r2, #36	; 0x24
 8001bd0:	00d2      	lsls	r2, r2, #3
 8001bd2:	440a      	add	r2, r1
 8001bd4:	e9c2 3400 	strd	r3, r4, [r2]
		if(playmode != max_enable)
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <pid_gain_initialize+0x22c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d041      	beq.n	8001c64 <pid_gain_initialize+0x1b4>
		{
			high_velo.kp[i] = KP_HIGH + (i - 1) * KP_HIGH_TOLERANCE;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bec:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001cfc <pid_gain_initialize+0x24c>
 8001bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001d00 <pid_gain_initialize+0x250>
 8001bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bfc:	ee17 0a90 	vmov	r0, s15
 8001c00:	f7fe fca2 	bl	8000548 <__aeabi_f2d>
 8001c04:	4603      	mov	r3, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	3204      	adds	r2, #4
 8001c0e:	00d2      	lsls	r2, r2, #3
 8001c10:	440a      	add	r2, r1
 8001c12:	e9c2 3400 	strd	r3, r4, [r2]
			high_velo.ki[i] = KI_HIGH + (i - 1) * KI_HIGH_TOLERANCE;
 8001c16:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3314      	adds	r3, #20
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	441a      	add	r2, r3
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	f04f 0400 	mov.w	r4, #0
 8001c28:	e9c2 3400 	strd	r3, r4, [r2]
			high_velo.kd[i] = KD_HIGH + (i - 1) * KD_HIGH_TOLERANCE;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001d04 <pid_gain_initialize+0x254>
 8001c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c40:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001cf8 <pid_gain_initialize+0x248>
 8001c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c48:	ee17 0a90 	vmov	r0, s15
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	4603      	mov	r3, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	3224      	adds	r2, #36	; 0x24
 8001c5a:	00d2      	lsls	r2, r2, #3
 8001c5c:	440a      	add	r2, r1
 8001c5e:	e9c2 3400 	strd	r3, r4, [r2]
 8001c62:	e029      	b.n	8001cb8 <pid_gain_initialize+0x208>
		}
		else
		{
			high_velo.kp[i] = KP_MAX + (i - 1) * KP_MAX_TOLERANCE;
 8001c64:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	441a      	add	r2, r3
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	4c1e      	ldr	r4, [pc, #120]	; (8001cec <pid_gain_initialize+0x23c>)
 8001c74:	e9c2 3400 	strd	r3, r4, [r2]
			high_velo.ki[i] = KI_MAX + (i - 1) * KI_MAX_TOLERANCE;
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3314      	adds	r3, #20
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	441a      	add	r2, r3
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	f04f 0400 	mov.w	r4, #0
 8001c8a:	e9c2 3400 	strd	r3, r4, [r2]
			high_velo.kd[i] = KD_MAX + (i - 1) * KD_MAX_TOLERANCE;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc3f 	bl	8000524 <__aeabi_i2d>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	460c      	mov	r4, r1
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <pid_gain_initialize+0x230>)
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	3224      	adds	r2, #36	; 0x24
 8001cb0:	00d2      	lsls	r2, r2, #3
 8001cb2:	440a      	add	r2, r1
 8001cb4:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i = 1; i < 16; i++)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	f77f af59 	ble.w	8001b78 <pid_gain_initialize+0xc8>
		}
	}
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	4074fb5c 	.word	0x4074fb5c
 8001cd8:	20013ca0 	.word	0x20013ca0
 8001cdc:	200002c8 	.word	0x200002c8
 8001ce0:	20013fa0 	.word	0x20013fa0
 8001ce4:	40318000 	.word	0x40318000
 8001ce8:	40398000 	.word	0x40398000
 8001cec:	40490000 	.word	0x40490000
 8001cf0:	40790000 	.word	0x40790000
 8001cf4:	41965ae2 	.word	0x41965ae2
 8001cf8:	43a7dae1 	.word	0x43a7dae1
 8001cfc:	3f888889 	.word	0x3f888889
 8001d00:	41cc0000 	.word	0x41cc0000
 8001d04:	41c57201 	.word	0x41c57201

08001d08 <pid_initialize>:

void pid_initialize()
{
 8001d08:	b598      	push	{r3, r4, r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	velocity_target = low_velo.velocity_target[rv];
 8001d0c:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <pid_initialize+0x118>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <pid_initialize+0x11c>)
 8001d14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fbf3 	bl	8000504 <__aeabi_ui2d>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460c      	mov	r4, r1
 8001d22:	4a41      	ldr	r2, [pc, #260]	; (8001e28 <pid_initialize+0x120>)
 8001d24:	e9c2 3400 	strd	r3, r4, [r2]
	kp = low_velo.kp[rv];
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <pid_initialize+0x118>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <pid_initialize+0x11c>)
 8001d2e:	3304      	adds	r3, #4
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d38:	4a3c      	ldr	r2, [pc, #240]	; (8001e2c <pid_initialize+0x124>)
 8001d3a:	e9c2 3400 	strd	r3, r4, [r2]
	kd = low_velo.kd[rv];
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <pid_initialize+0x118>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4a38      	ldr	r2, [pc, #224]	; (8001e24 <pid_initialize+0x11c>)
 8001d44:	3324      	adds	r3, #36	; 0x24
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d4e:	4a38      	ldr	r2, [pc, #224]	; (8001e30 <pid_initialize+0x128>)
 8001d50:	e9c2 3400 	strd	r3, r4, [r2]
	ki = low_velo.ki[rv];
 8001d54:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <pid_initialize+0x118>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <pid_initialize+0x11c>)
 8001d5a:	3314      	adds	r3, #20
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d64:	4a33      	ldr	r2, [pc, #204]	; (8001e34 <pid_initialize+0x12c>)
 8001d66:	e9c2 3400 	strd	r3, r4, [r2]
	if(playmode == accel || playmode == max_enable)
 8001d6a:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <pid_initialize+0x130>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d003      	beq.n	8001d7a <pid_initialize+0x72>
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <pid_initialize+0x130>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d12e      	bne.n	8001dd8 <pid_initialize+0xd0>
	{
		velocity_target = high_velo.velocity_target[rv];
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <pid_initialize+0x118>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <pid_initialize+0x134>)
 8001d82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbbc 	bl	8000504 <__aeabi_ui2d>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	460c      	mov	r4, r1
 8001d90:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <pid_initialize+0x120>)
 8001d92:	e9c2 3400 	strd	r3, r4, [r2]
		kp = high_velo.kp[rv];
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <pid_initialize+0x118>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <pid_initialize+0x134>)
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <pid_initialize+0x124>)
 8001da8:	e9c2 3400 	strd	r3, r4, [r2]
		kd = high_velo.kd[rv];
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <pid_initialize+0x118>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <pid_initialize+0x134>)
 8001db2:	3324      	adds	r3, #36	; 0x24
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <pid_initialize+0x128>)
 8001dbe:	e9c2 3400 	strd	r3, r4, [r2]
		ki = high_velo.ki[rv];
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <pid_initialize+0x118>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <pid_initialize+0x134>)
 8001dc8:	3314      	adds	r3, #20
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <pid_initialize+0x12c>)
 8001dd4:	e9c2 3400 	strd	r3, r4, [r2]
	}
#if USE_SLOWSTART
	slow = 1;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <pid_initialize+0x138>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
	starting_length = 0;
 8001dde:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <pid_initialize+0x13c>)
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	f04f 0400 	mov.w	r4, #0
 8001de8:	e9c2 3400 	strd	r3, r4, [r2]
	base_velocity_target = velocity_target;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <pid_initialize+0x120>)
 8001dee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <pid_initialize+0x140>)
 8001df4:	e9c2 3400 	strd	r3, r4, [r2]
	base_p = kp;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <pid_initialize+0x124>)
 8001dfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <pid_initialize+0x144>)
 8001e00:	e9c2 3400 	strd	r3, r4, [r2]
	base_i = ki;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <pid_initialize+0x12c>)
 8001e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e0a:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <pid_initialize+0x148>)
 8001e0c:	e9c2 3400 	strd	r3, r4, [r2]
	base_d = kd;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <pid_initialize+0x128>)
 8001e12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <pid_initialize+0x14c>)
 8001e18:	e9c2 3400 	strd	r3, r4, [r2]
#endif  // USE_SLOWSTART
}
 8001e1c:	bf00      	nop
 8001e1e:	bd98      	pop	{r3, r4, r7, pc}
 8001e20:	200003c8 	.word	0x200003c8
 8001e24:	20013ca0 	.word	0x20013ca0
 8001e28:	20013f30 	.word	0x20013f30
 8001e2c:	20013f68 	.word	0x20013f68
 8001e30:	20000290 	.word	0x20000290
 8001e34:	200003b0 	.word	0x200003b0
 8001e38:	200002c8 	.word	0x200002c8
 8001e3c:	20013fa0 	.word	0x20013fa0
 8001e40:	20000349 	.word	0x20000349
 8001e44:	20013c98 	.word	0x20013c98
 8001e48:	20000248 	.word	0x20000248
 8001e4c:	200002d0 	.word	0x200002d0
 8001e50:	20000350 	.word	0x20000350
 8001e54:	20013f90 	.word	0x20013f90

08001e58 <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM14_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e5c:	b08b      	sub	sp, #44	; 0x2c
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
	if (htim->Instance == TIM6) {	// 1 ms
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4ab4      	ldr	r2, [pc, #720]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	f040 821b 	bne.w	80022a4 <HAL_TIM_PeriodElapsedCallback+0x44c>
		if (motorenable) {
 8001e6e:	4bb3      	ldr	r3, [pc, #716]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8186 	beq.w	8002184 <HAL_TIM_PeriodElapsedCallback+0x32c>
#if USE_ANALOG
			analogl = 0;
 8001e78:	4bb1      	ldr	r3, [pc, #708]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	801a      	strh	r2, [r3, #0]
			analogr = 0;
 8001e7e:	4bb1      	ldr	r3, [pc, #708]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
			for (unsigned char i = 0; i < calibrationsize; i++) {
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e8a:	e046      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0xc2>
				analograte[i] = ((analog[i] - analogmin[i]) * 1000)
 8001e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e90:	4aad      	ldr	r2, [pc, #692]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e96:	4619      	mov	r1, r3
 8001e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e9c:	4aab      	ldr	r2, [pc, #684]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea2:	1acb      	subs	r3, r1, r3
 8001ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea8:	fb02 f203 	mul.w	r2, r2, r3
						/ (analogmax[i] - analogmin[i]);
 8001eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb0:	49a7      	ldr	r1, [pc, #668]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001eb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ebc:	49a3      	ldr	r1, [pc, #652]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ebe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ec2:	1ac3      	subs	r3, r0, r3
 8001ec4:	fb92 f2f3 	sdiv	r2, r2, r3
				analograte[i] = ((analog[i] - analogmin[i]) * 1000)
 8001ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ecc:	b291      	uxth	r1, r2
 8001ece:	4aa1      	ldr	r2, [pc, #644]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001ed0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
				analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif

				if (i % 2 == 0) {
 8001ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <HAL_TIM_PeriodElapsedCallback+0xa2>
					analogl += analograte[i];
 8001ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee6:	4a9b      	ldr	r2, [pc, #620]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001ee8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001eec:	4b94      	ldr	r3, [pc, #592]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	e00a      	b.n	8001f10 <HAL_TIM_PeriodElapsedCallback+0xb8>
				} else {
					analogr += analograte[i];
 8001efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001efe:	4a95      	ldr	r2, [pc, #596]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f0e:	801a      	strh	r2, [r3, #0]
			for (unsigned char i = 0; i < calibrationsize; i++) {
 8001f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f14:	3301      	adds	r3, #1
 8001f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f1a:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d3b2      	bcc.n	8001e8c <HAL_TIM_PeriodElapsedCallback+0x34>
			}
#endif

			// ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
			// When ( direction > 0 ) , must turn right.
			direction = (analogl - analogr);	// difference
 8001f26:	4b86      	ldr	r3, [pc, #536]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b85      	ldr	r3, [pc, #532]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	4a8a      	ldr	r2, [pc, #552]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f34:	6013      	str	r3, [r2, #0]
			sdirection = sdirection + direction;	// Integral
 8001f36:	4b8a      	ldr	r3, [pc, #552]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a87      	ldr	r2, [pc, #540]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f42:	6013      	str	r3, [r2, #0]

			if (analogl + analogr <= 700 * calibrationsize) {
 8001f44:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	441a      	add	r2, r3
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001f5a:	fb03 f301 	mul.w	r3, r3, r1
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	dc02      	bgt.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0x110>
				direction = 0;
 8001f62:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
#if !VELOCITY_CONTROL_RELATIVE
			// left
			leftmotor = nextspeed_l + (kp * direction + kd * (direction - beforedirection)) / calibrationsize / 2;
			rightmotor = nextspeed_r - (kp * direction + kd * (direction - beforedirection)) / calibrationsize / 2;
#else	// VELOCITY_CONTROL_RELATIVE
			if(playmode != banquet)
 8001f68:	4b7e      	ldr	r3, [pc, #504]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b06      	cmp	r3, #6
 8001f6e:	f000 80de 	beq.w	800212e <HAL_TIM_PeriodElapsedCallback+0x2d6>
			{
				leftmotor = commonspeed
						+ (kp * direction + kd * (direction - beforedirection)
 8001f72:	4b7d      	ldr	r3, [pc, #500]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fad3 	bl	8000524 <__aeabi_i2d>
 8001f7e:	e9c7 0100 	strd	r0, r1, [r7]
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe facc 	bl	8000524 <__aeabi_i2d>
 8001f8c:	4b77      	ldr	r3, [pc, #476]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001f8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4623      	mov	r3, r4
 8001f96:	f7fe fb2f 	bl	80005f8 <__aeabi_dmul>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	469a      	mov	sl, r3
 8001fa0:	46a3      	mov	fp, r4
 8001fa2:	4b6e      	ldr	r3, [pc, #440]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b72      	ldr	r3, [pc, #456]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fab9 	bl	8000524 <__aeabi_i2d>
 8001fb2:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001fb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4623      	mov	r3, r4
 8001fbc:	f7fe fb1c 	bl	80005f8 <__aeabi_dmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	4650      	mov	r0, sl
 8001fca:	4659      	mov	r1, fp
 8001fcc:	f7fe f95e 	bl	800028c <__adddf3>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	469a      	mov	sl, r3
 8001fd6:	46a3      	mov	fp, r4
								+ ki * sdirection) / calibrationsize / 2;
 8001fd8:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe faa1 	bl	8000524 <__aeabi_i2d>
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	f7fe fb04 	bl	80005f8 <__aeabi_dmul>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	4650      	mov	r0, sl
 8001ffa:	4659      	mov	r1, fp
 8001ffc:	f7fe f946 	bl	800028c <__adddf3>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	469a      	mov	sl, r3
 8002006:	46a3      	mov	fp, r4
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa89 	bl	8000524 <__aeabi_i2d>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	461a      	mov	r2, r3
 8002018:	4623      	mov	r3, r4
 800201a:	4650      	mov	r0, sl
 800201c:	4659      	mov	r1, fp
 800201e:	f7fe fc15 	bl	800084c <__aeabi_ddiv>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	4618      	mov	r0, r3
 8002028:	4621      	mov	r1, r4
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002032:	f7fe fc0b 	bl	800084c <__aeabi_ddiv>
 8002036:	4603      	mov	r3, r0
 8002038:	460c      	mov	r4, r1
						+ (kp * direction + kd * (direction - beforedirection)
 800203a:	461a      	mov	r2, r3
 800203c:	4623      	mov	r3, r4
 800203e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002042:	f7fe f923 	bl	800028c <__adddf3>
 8002046:	4603      	mov	r3, r0
 8002048:	460c      	mov	r4, r1
				leftmotor = commonspeed
 800204a:	4a4c      	ldr	r2, [pc, #304]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800204c:	e9c2 3400 	strd	r3, r4, [r2]
				rightmotor = commonspeed
						- (kp * direction + kd * (direction - beforedirection)
 8002050:	4b45      	ldr	r3, [pc, #276]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa64 	bl	8000524 <__aeabi_i2d>
 800205c:	e9c7 0100 	strd	r0, r1, [r7]
 8002060:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa5d 	bl	8000524 <__aeabi_i2d>
 800206a:	4b40      	ldr	r3, [pc, #256]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800206c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	f7fe fac0 	bl	80005f8 <__aeabi_dmul>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	469a      	mov	sl, r3
 800207e:	46a3      	mov	fp, r4
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fa4a 	bl	8000524 <__aeabi_i2d>
 8002090:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002092:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002096:	461a      	mov	r2, r3
 8002098:	4623      	mov	r3, r4
 800209a:	f7fe faad 	bl	80005f8 <__aeabi_dmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	460c      	mov	r4, r1
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	4650      	mov	r0, sl
 80020a8:	4659      	mov	r1, fp
 80020aa:	f7fe f8ef 	bl	800028c <__adddf3>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	469a      	mov	sl, r3
 80020b4:	46a3      	mov	fp, r4
								+ ki * sdirection) / calibrationsize / 2;
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa32 	bl	8000524 <__aeabi_i2d>
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80020c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	f7fe fa95 	bl	80005f8 <__aeabi_dmul>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	461a      	mov	r2, r3
 80020d4:	4623      	mov	r3, r4
 80020d6:	4650      	mov	r0, sl
 80020d8:	4659      	mov	r1, fp
 80020da:	f7fe f8d7 	bl	800028c <__adddf3>
 80020de:	4603      	mov	r3, r0
 80020e0:	460c      	mov	r4, r1
 80020e2:	469a      	mov	sl, r3
 80020e4:	46a3      	mov	fp, r4
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fa1a 	bl	8000524 <__aeabi_i2d>
 80020f0:	4603      	mov	r3, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	461a      	mov	r2, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	4650      	mov	r0, sl
 80020fa:	4659      	mov	r1, fp
 80020fc:	f7fe fba6 	bl	800084c <__aeabi_ddiv>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	4618      	mov	r0, r3
 8002106:	4621      	mov	r1, r4
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002110:	f7fe fb9c 	bl	800084c <__aeabi_ddiv>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
						- (kp * direction + kd * (direction - beforedirection)
 8002118:	461a      	mov	r2, r3
 800211a:	4623      	mov	r3, r4
 800211c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002120:	f7fe f8b2 	bl	8000288 <__aeabi_dsub>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
				rightmotor = commonspeed
 8002128:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800212a:	e9c2 3400 	strd	r3, r4, [r2]
			leftmotor = commonspeed;
			rightmotor = commonspeed;
#endif
#endif	// !USE_ANALOG
#if USE_ANALOG
			beforedirection = direction;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e033      	b.n	80021a0 <HAL_TIM_PeriodElapsedCallback+0x348>
 8002138:	40001000 	.word	0x40001000
 800213c:	20013e52 	.word	0x20013e52
 8002140:	2000031e 	.word	0x2000031e
 8002144:	20013e54 	.word	0x20013e54
 8002148:	20000260 	.word	0x20000260
 800214c:	20000304 	.word	0x20000304
 8002150:	20013f48 	.word	0x20013f48
 8002154:	20000380 	.word	0x20000380
 8002158:	20000348 	.word	0x20000348
 800215c:	20000338 	.word	0x20000338
 8002160:	200002bc 	.word	0x200002bc
 8002164:	200002c8 	.word	0x200002c8
 8002168:	20000324 	.word	0x20000324
 800216c:	20013f68 	.word	0x20013f68
 8002170:	20013f70 	.word	0x20013f70
 8002174:	20000290 	.word	0x20000290
 8002178:	200003b0 	.word	0x200003b0
 800217c:	200002f0 	.word	0x200002f0
 8002180:	200002e0 	.word	0x200002e0
			leftmotor = COMMONSPEED1;
			rightmotor = COMMONSPEED1;
#endif	// !STATICMOTORPWM
		} else	// if(motorenable)
		{
			leftmotor = 0;
 8002184:	4a96      	ldr	r2, [pc, #600]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	e9c2 3400 	strd	r3, r4, [r2]
			rightmotor = 0;
 8002192:	4a94      	ldr	r2, [pc, #592]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f04f 0400 	mov.w	r4, #0
 800219c:	e9c2 3400 	strd	r3, r4, [r2]
		}
#if USE_MOTOR
		if (leftmotor < 0) {
 80021a0:	4b8f      	ldr	r3, [pc, #572]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80021a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	f7fe fc95 	bl	8000adc <__aeabi_dcmplt>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00e      	beq.n	80021d6 <HAL_TIM_PeriodElapsedCallback+0x37e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2104      	movs	r1, #4
 80021bc:	488a      	ldr	r0, [pc, #552]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80021be:	f004 f833 	bl	8006228 <HAL_GPIO_WritePin>
			leftmotor = leftmotor * -1;
 80021c2:	4b87      	ldr	r3, [pc, #540]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80021c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021c8:	4698      	mov	r8, r3
 80021ca:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 80021ce:	4b84      	ldr	r3, [pc, #528]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80021d0:	e9c3 8900 	strd	r8, r9, [r3]
 80021d4:	e004      	b.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x388>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80021d6:	2201      	movs	r2, #1
 80021d8:	2104      	movs	r1, #4
 80021da:	4883      	ldr	r0, [pc, #524]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80021dc:	f004 f824 	bl	8006228 <HAL_GPIO_WritePin>
		}

		if (rightmotor < 0) {
 80021e0:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80021e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	f7fe fc75 	bl	8000adc <__aeabi_dcmplt>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00f      	beq.n	8002218 <HAL_TIM_PeriodElapsedCallback+0x3c0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fe:	487b      	ldr	r0, [pc, #492]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002200:	f004 f812 	bl	8006228 <HAL_GPIO_WritePin>
			rightmotor = rightmotor * -1;
 8002204:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002206:	e9d3 3400 	ldrd	r3, r4, [r3]
 800220a:	461d      	mov	r5, r3
 800220c:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8002210:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002212:	e9c3 5600 	strd	r5, r6, [r3]
 8002216:	e005      	b.n	8002224 <HAL_TIM_PeriodElapsedCallback+0x3cc>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800221e:	4873      	ldr	r0, [pc, #460]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002220:	f004 f802 	bl	8006228 <HAL_GPIO_WritePin>
		}

		leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 8002224:	4b6e      	ldr	r3, [pc, #440]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002230:	f7fe fc72 	bl	8000b18 <__aeabi_dcmpgt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x3ea>
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	4c6c      	ldr	r4, [pc, #432]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002240:	e002      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x3f0>
 8002242:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002244:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002248:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800224a:	e9c2 3400 	strd	r3, r4, [r2]
		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800225a:	f7fe fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_TIM_PeriodElapsedCallback+0x414>
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	4c61      	ldr	r4, [pc, #388]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800226a:	e002      	b.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x41a>
 800226c:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800226e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002272:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002274:	e9c2 3400 	strd	r3, r4, [r2]
#endif

#if !D_PWM
#if USE_MOTOR
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800227a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002280:	6815      	ldr	r5, [r2, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	f7fe fc8f 	bl	8000ba8 <__aeabi_d2uiz>
 800228a:	4603      	mov	r3, r0
 800228c:	636b      	str	r3, [r5, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 800228e:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002290:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002294:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002296:	6815      	ldr	r5, [r2, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	4621      	mov	r1, r4
 800229c:	f7fe fc84 	bl	8000ba8 <__aeabi_d2uiz>
 80022a0:	4603      	mov	r3, r0
 80022a2:	63ab      	str	r3, [r5, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, COMMONSPEED1);
#endif	// STATICPWM
#endif	// D_PWM
	}	// TIM6

	if (htim->Instance == TIM10)	// TIM10 // 1ms
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a53      	ldr	r2, [pc, #332]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f040 8274 	bne.w	8002798 <HAL_TIM_PeriodElapsedCallback+0x940>
	{
	#if USE_ENCODER
		// 1ms
		encoder_l = TIM1->CNT - ENCODER_MIDDLE;
 80022b0:	4b52      	ldr	r3, [pc, #328]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b21a      	sxth	r2, r3
 80022be:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80022c0:	801a      	strh	r2, [r3, #0]
		encoder_r = -(TIM3->CNT - ENCODER_MIDDLE);
 80022c2:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80022d2:	801a      	strh	r2, [r3, #0]

		TIM1->CNT = ENCODER_MIDDLE;
 80022d4:	4b49      	ldr	r3, [pc, #292]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80022d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = ENCODER_MIDDLE;
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80022de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

		encoder = (double) (encoder_l + encoder_r) / 2;
 80022e4:	4b46      	ldr	r3, [pc, #280]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80022e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80022ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f2:	4413      	add	r3, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f915 	bl	8000524 <__aeabi_i2d>
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002302:	f7fe faa3 	bl	800084c <__aeabi_ddiv>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	4618      	mov	r0, r3
 800230c:	4621      	mov	r1, r4
 800230e:	f7fe fc23 	bl	8000b58 <__aeabi_d2iz>
 8002312:	4603      	mov	r3, r0
 8002314:	b21a      	sxth	r2, r3
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8002318:	801a      	strh	r2, [r3, #0]
		velocity = (double) encoder * LENGTHPERPULSE;
 800231a:	4b3c      	ldr	r3, [pc, #240]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800231c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f8ff 	bl	8000524 <__aeabi_i2d>
 8002326:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002328:	e9d3 3400 	ldrd	r3, r4, [r3]
 800232c:	461a      	mov	r2, r3
 800232e:	4623      	mov	r3, r4
 8002330:	f7fe f962 	bl	80005f8 <__aeabi_dmul>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	4a36      	ldr	r2, [pc, #216]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800233a:	e9c2 3400 	strd	r3, r4, [r2]
    course_length += velocity;
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800234a:	461a      	mov	r2, r3
 800234c:	4623      	mov	r3, r4
 800234e:	f7fd ff9d 	bl	800028c <__adddf3>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002358:	e9c2 3400 	strd	r3, r4, [r2]
	#endif	// USE_ENCODER
	#if USE_SLOWSTART
		if(slow)
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80ec 	beq.w	800253e <HAL_TIM_PeriodElapsedCallback+0x6e6>
		{
			starting_length += velocity;
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800236e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002372:	461a      	mov	r2, r3
 8002374:	4623      	mov	r3, r4
 8002376:	f7fd ff89 	bl	800028c <__adddf3>
 800237a:	4603      	mov	r3, r0
 800237c:	460c      	mov	r4, r1
 800237e:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002380:	e9c2 3400 	strd	r3, r4, [r2]
			if(rightmarkercount == 0)
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d17d      	bne.n	8002488 <HAL_TIM_PeriodElapsedCallback+0x630>
			{
				if(starting_length < THRESHOLD_STARTING_LENGTH)
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800238e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002392:	a311      	add	r3, pc, #68	; (adr r3, 80023d8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe fba0 	bl	8000adc <__aeabi_dcmplt>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d050      	beq.n	8002444 <HAL_TIM_PeriodElapsedCallback+0x5ec>
				{
					velocity_target = 100;
 80023a2:	4a21      	ldr	r2, [pc, #132]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	4c20      	ldr	r4, [pc, #128]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80023aa:	e9c2 3400 	strd	r3, r4, [r2]
					kp = 10;
 80023ae:	4a20      	ldr	r2, [pc, #128]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	4c1f      	ldr	r4, [pc, #124]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80023b6:	e9c2 3400 	strd	r3, r4, [r2]
					kd = 15;
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	4c1e      	ldr	r4, [pc, #120]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80023c2:	e9c2 3400 	strd	r3, r4, [r2]
					ki = 0;
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	f04f 0400 	mov.w	r4, #0
 80023d0:	e9c2 3400 	strd	r3, r4, [r2]
 80023d4:	e058      	b.n	8002488 <HAL_TIM_PeriodElapsedCallback+0x630>
 80023d6:	bf00      	nop
 80023d8:	00000000 	.word	0x00000000
 80023dc:	410e8480 	.word	0x410e8480
 80023e0:	200002f0 	.word	0x200002f0
 80023e4:	200002e0 	.word	0x200002e0
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40020800 	.word	0x40020800
 80023f0:	408f4000 	.word	0x408f4000
 80023f4:	20014198 	.word	0x20014198
 80023f8:	40014400 	.word	0x40014400
 80023fc:	40010000 	.word	0x40010000
 8002400:	20000370 	.word	0x20000370
 8002404:	40000400 	.word	0x40000400
 8002408:	20013f38 	.word	0x20013f38
 800240c:	20000300 	.word	0x20000300
 8002410:	20013e48 	.word	0x20013e48
 8002414:	200003a8 	.word	0x200003a8
 8002418:	20000240 	.word	0x20000240
 800241c:	20000349 	.word	0x20000349
 8002420:	20013c98 	.word	0x20013c98
 8002424:	20013f98 	.word	0x20013f98
 8002428:	20013f30 	.word	0x20013f30
 800242c:	40590000 	.word	0x40590000
 8002430:	20013f68 	.word	0x20013f68
 8002434:	40240000 	.word	0x40240000
 8002438:	20000290 	.word	0x20000290
 800243c:	402e0000 	.word	0x402e0000
 8002440:	200003b0 	.word	0x200003b0
				}
				else
				{
					velocity_target = base_velocity_target;
 8002444:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8002446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800244a:	4a78      	ldr	r2, [pc, #480]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 800244c:	e9c2 3400 	strd	r3, r4, [r2]
					kp = base_p;
 8002450:	4b77      	ldr	r3, [pc, #476]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8002452:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002456:	4a77      	ldr	r2, [pc, #476]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8002458:	e9c2 3400 	strd	r3, r4, [r2]
					ki = base_i;
 800245c:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 800245e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002462:	4a76      	ldr	r2, [pc, #472]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002464:	e9c2 3400 	strd	r3, r4, [r2]
					kd = base_d;
 8002468:	4b75      	ldr	r3, [pc, #468]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 800246a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800246e:	4a75      	ldr	r2, [pc, #468]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002470:	e9c2 3400 	strd	r3, r4, [r2]
					slow = 0;
 8002474:	4b74      	ldr	r3, [pc, #464]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
					starting_length = 0;
 800247a:	4a74      	ldr	r2, [pc, #464]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f04f 0400 	mov.w	r4, #0
 8002484:	e9c2 3400 	strd	r3, r4, [r2]
				}
			}
			if(rightmarkercount >= 2)
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d959      	bls.n	8002544 <HAL_TIM_PeriodElapsedCallback+0x6ec>
			{
				if(starting_length < THRESHOLD_STARTING_LENGTH)
 8002490:	4b6e      	ldr	r3, [pc, #440]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8002492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002496:	a35e      	add	r3, pc, #376	; (adr r3, 8002610 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe fb1e 	bl	8000adc <__aeabi_dcmplt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d047      	beq.n	8002536 <HAL_TIM_PeriodElapsedCallback+0x6de>
				{
					double _rate;
					_rate = (THRESHOLD_STARTING_LENGTH - starting_length) / THRESHOLD_STARTING_LENGTH;
 80024a6:	4b69      	ldr	r3, [pc, #420]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 80024a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	a157      	add	r1, pc, #348	; (adr r1, 8002610 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80024b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024b6:	f7fd fee7 	bl	8000288 <__aeabi_dsub>
 80024ba:	4603      	mov	r3, r0
 80024bc:	460c      	mov	r4, r1
 80024be:	4618      	mov	r0, r3
 80024c0:	4621      	mov	r1, r4
 80024c2:	a353      	add	r3, pc, #332	; (adr r3, 8002610 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f9c0 	bl	800084c <__aeabi_ddiv>
 80024cc:	4603      	mov	r3, r0
 80024ce:	460c      	mov	r4, r1
 80024d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
					velocity_target = base_velocity_target * _rate;
 80024d4:	4b54      	ldr	r3, [pc, #336]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 80024d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024de:	f7fe f88b 	bl	80005f8 <__aeabi_dmul>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 80024e8:	e9c2 3400 	strd	r3, r4, [r2]
					kp = base_p * _rate;
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 80024ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f6:	f7fe f87f 	bl	80005f8 <__aeabi_dmul>
 80024fa:	4603      	mov	r3, r0
 80024fc:	460c      	mov	r4, r1
 80024fe:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8002500:	e9c2 3400 	strd	r3, r4, [r2]
					ki = base_i * _rate;
 8002504:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8002506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800250a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250e:	f7fe f873 	bl	80005f8 <__aeabi_dmul>
 8002512:	4603      	mov	r3, r0
 8002514:	460c      	mov	r4, r1
 8002516:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002518:	e9c2 3400 	strd	r3, r4, [r2]
					kd = base_d * _rate;
 800251c:	4b48      	ldr	r3, [pc, #288]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 800251e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002522:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002526:	f7fe f867 	bl	80005f8 <__aeabi_dmul>
 800252a:	4603      	mov	r3, r0
 800252c:	460c      	mov	r4, r1
 800252e:	4a45      	ldr	r2, [pc, #276]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002530:	e9c2 3400 	strd	r3, r4, [r2]
 8002534:	e006      	b.n	8002544 <HAL_TIM_PeriodElapsedCallback+0x6ec>
				}
				else
				{
					motorenable = 0;
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e002      	b.n	8002544 <HAL_TIM_PeriodElapsedCallback+0x6ec>
				}
			}
		}
		else
		{
	        if(playmode == accel || playmode == max_enable)
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b02      	cmp	r3, #2
			}
		}
#endif // D_VELOCITY_CONTROL_TIMER && USE_VELOCITY_CONTROL

#if USE_VELOCITY_CONTROL
		if (playmode != zero_trace && playmode != banquet)
 8002544:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b05      	cmp	r3, #5
 800254a:	f000 8095 	beq.w	8002678 <HAL_TIM_PeriodElapsedCallback+0x820>
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b06      	cmp	r3, #6
 8002554:	f000 8090 	beq.w	8002678 <HAL_TIM_PeriodElapsedCallback+0x820>
		{
			velocity_error = velocity_target - velocity;
 8002558:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 800255a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255e:	4b3f      	ldr	r3, [pc, #252]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002560:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002564:	461a      	mov	r2, r3
 8002566:	4623      	mov	r3, r4
 8002568:	f7fd fe8e 	bl	8000288 <__aeabi_dsub>
 800256c:	4603      	mov	r3, r0
 800256e:	460c      	mov	r4, r1
 8002570:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8002572:	e9c2 3400 	strd	r3, r4, [r2]
			s_velocity_error = s_velocity_error + velocity_error;
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x808>)
 800257e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002582:	461a      	mov	r2, r3
 8002584:	4623      	mov	r3, r4
 8002586:	f7fd fe81 	bl	800028c <__adddf3>
 800258a:	4603      	mov	r3, r0
 800258c:	460c      	mov	r4, r1
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002590:	e9c2 3400 	strd	r3, r4, [r2]

			velocity_next = (double) VKP * velocity_error
 8002594:	4b32      	ldr	r3, [pc, #200]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8002596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	4b32      	ldr	r3, [pc, #200]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x810>)
 80025a0:	f7fe f82a 	bl	80005f8 <__aeabi_dmul>
 80025a4:	4603      	mov	r3, r0
 80025a6:	460c      	mov	r4, r1
 80025a8:	4625      	mov	r5, r4
 80025aa:	461c      	mov	r4, r3
					+ (double) VKI * s_velocity_error;
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 80025ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b2:	a319      	add	r3, pc, #100	; (adr r3, 8002618 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fe f81e 	bl	80005f8 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4620      	mov	r0, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	f7fd fe62 	bl	800028c <__adddf3>
 80025c8:	4603      	mov	r3, r0
 80025ca:	460c      	mov	r4, r1
			velocity_next = (double) VKP * velocity_error
 80025cc:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x814>)
 80025ce:	e9c2 3400 	strd	r3, r4, [r2]
			commonspeed = (double) velocity_next * (double) PWMMAX
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x814>)
 80025d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80025de:	f7fe f80b 	bl	80005f8 <__aeabi_dmul>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	4618      	mov	r0, r3
 80025e8:	4621      	mov	r1, r4
					/ (double) VELOCITY_MAX;
 80025ea:	a30d      	add	r3, pc, #52	; (adr r3, 8002620 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fe f92c 	bl	800084c <__aeabi_ddiv>
 80025f4:	4603      	mov	r3, r0
 80025f6:	460c      	mov	r4, r1
			commonspeed = (double) velocity_next * (double) PWMMAX
 80025f8:	4618      	mov	r0, r3
 80025fa:	4621      	mov	r1, r4
 80025fc:	f7fe faac 	bl	8000b58 <__aeabi_d2iz>
 8002600:	4603      	mov	r3, r0
 8002602:	b21a      	sxth	r2, r3
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002606:	801a      	strh	r2, [r3, #0]
 8002608:	e039      	b.n	800267e <HAL_TIM_PeriodElapsedCallback+0x826>
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	00000000 	.word	0x00000000
 8002614:	410e8480 	.word	0x410e8480
 8002618:	e0000000 	.word	0xe0000000
 800261c:	3faeb851 	.word	0x3faeb851
 8002620:	00000000 	.word	0x00000000
 8002624:	40c04a00 	.word	0x40c04a00
 8002628:	20000248 	.word	0x20000248
 800262c:	20013f30 	.word	0x20013f30
 8002630:	200002d0 	.word	0x200002d0
 8002634:	20013f68 	.word	0x20013f68
 8002638:	20000350 	.word	0x20000350
 800263c:	200003b0 	.word	0x200003b0
 8002640:	20013f90 	.word	0x20013f90
 8002644:	20000290 	.word	0x20000290
 8002648:	20000349 	.word	0x20000349
 800264c:	20013c98 	.word	0x20013c98
 8002650:	20013f98 	.word	0x20013f98
 8002654:	20013e52 	.word	0x20013e52
 8002658:	200002c8 	.word	0x200002c8
 800265c:	200003a8 	.word	0x200003a8
 8002660:	20000280 	.word	0x20000280
 8002664:	200002c0 	.word	0x200002c0
 8002668:	40180000 	.word	0x40180000
 800266c:	20013c88 	.word	0x20013c88
 8002670:	408f4000 	.word	0x408f4000
 8002674:	20000324 	.word	0x20000324
		} else {
			commonspeed = 0;
 8002678:	4b7d      	ldr	r3, [pc, #500]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 800267a:	2200      	movs	r2, #0
 800267c:	801a      	strh	r2, [r3, #0]
		}
	#endif	// USE_VELOCITY_CONTROL
	#if USE_IMU
		if(playmode == search && !slow)
 800267e:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b01      	cmp	r3, #1
 8002684:	f040 8084 	bne.w	8002790 <HAL_TIM_PeriodElapsedCallback+0x938>
 8002688:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d17f      	bne.n	8002790 <HAL_TIM_PeriodElapsedCallback+0x938>
		{
			if (rightmarkercount == 1)	// SAMPLING_LENGTH /
 8002690:	4b7a      	ldr	r3, [pc, #488]	; (800287c <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d16f      	bne.n	8002778 <HAL_TIM_PeriodElapsedCallback+0x920>
			{
				IMU_read();
 8002698:	f7fe fd5e 	bl	8001158 <IMU_read>
				theta += (double) inertial.gyro.z / (double) GYRO_RANGE;
 800269c:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800269e:	895b      	ldrh	r3, [r3, #10]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff3e 	bl	8000524 <__aeabi_i2d>
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80026ae:	f7fe f8cd 	bl	800084c <__aeabi_ddiv>
 80026b2:	4603      	mov	r3, r0
 80026b4:	460c      	mov	r4, r1
 80026b6:	4618      	mov	r0, r3
 80026b8:	4621      	mov	r1, r4
 80026ba:	4b73      	ldr	r3, [pc, #460]	; (8002888 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80026bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4623      	mov	r3, r4
 80026c4:	f7fd fde2 	bl	800028c <__adddf3>
 80026c8:	4603      	mov	r3, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80026ce:	e9c2 3400 	strd	r3, r4, [r2]
//				my_gyro.z += low_pass_filter((double) inertial.gyro.z / (double) GYRO_RANGE, before_igz, 0);
//				my_gyro.z += (double) inertial.gyro.z / (double) GYRO_RANGE;
//				before_igz = inertial.gyro.z;
				mm_length += (double) velocity / (double) 1000;
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_TIM_PeriodElapsedCallback+0xa34>)
 80026d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80026de:	f7fe f8b5 	bl	800084c <__aeabi_ddiv>
 80026e2:	4603      	mov	r3, r0
 80026e4:	460c      	mov	r4, r1
 80026e6:	4618      	mov	r0, r3
 80026e8:	4621      	mov	r1, r4
 80026ea:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80026ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	f7fd fdca 	bl	800028c <__adddf3>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80026fe:	e9c2 3400 	strd	r3, r4, [r2]
#if USE_LR_DIFFERENCE
		left_length += (double) encoder_l * LENGTHPERPULSE;
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8002704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff0b 	bl	8000524 <__aeabi_i2d>
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8002710:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_dmul>
 800271c:	4603      	mov	r3, r0
 800271e:	460c      	mov	r4, r1
 8002720:	4618      	mov	r0, r3
 8002722:	4621      	mov	r1, r4
 8002724:	4b5e      	ldr	r3, [pc, #376]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8002726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800272a:	461a      	mov	r2, r3
 800272c:	4623      	mov	r3, r4
 800272e:	f7fd fdad 	bl	800028c <__adddf3>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	4a5a      	ldr	r2, [pc, #360]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8002738:	e9c2 3400 	strd	r3, r4, [r2]
		right_length += (double) encoder_r * LENGTHPERPULSE;
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 800273e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd feee 	bl	8000524 <__aeabi_i2d>
 8002748:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800274a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800274e:	461a      	mov	r2, r3
 8002750:	4623      	mov	r3, r4
 8002752:	f7fd ff51 	bl	80005f8 <__aeabi_dmul>
 8002756:	4603      	mov	r3, r0
 8002758:	460c      	mov	r4, r1
 800275a:	4618      	mov	r0, r3
 800275c:	4621      	mov	r1, r4
 800275e:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8002760:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002764:	461a      	mov	r2, r3
 8002766:	4623      	mov	r3, r4
 8002768:	f7fd fd90 	bl	800028c <__adddf3>
 800276c:	4603      	mov	r3, r0
 800276e:	460c      	mov	r4, r1
 8002770:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8002772:	e9c2 3400 	strd	r3, r4, [r2]
 8002776:	e00b      	b.n	8002790 <HAL_TIM_PeriodElapsedCallback+0x938>
#endif
			}
			else
			{
#if !D_COURSE_SAVING
				flash_buffer.radius[course_state_time] = 0;
 8002778:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800277e:	3307      	adds	r3, #7
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	441a      	add	r2, r3
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	f04f 0400 	mov.w	r4, #0
 800278c:	e9c2 3400 	strd	r3, r4, [r2]
#endif
			}
		}	// playmode == search && !slow
	#endif	// USE_IMU

		sidesens_function();
 8002790:	f7fe ff6e 	bl	8001670 <sidesens_function>
		led_brink();
 8002794:	f7ff f950 	bl	8001a38 <led_brink>
	}	// TIM10


	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a45      	ldr	r2, [pc, #276]	; (80028b4 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d161      	bne.n	8002866 <HAL_TIM_PeriodElapsedCallback+0xa0e>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 80027a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a6:	4844      	ldr	r0, [pc, #272]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80027a8:	f003 fd26 	bl	80061f8 <HAL_GPIO_ReadPin>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	75fb      	strb	r3, [r7, #23]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 80027ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027be:	483e      	ldr	r0, [pc, #248]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80027c0:	f003 fd1a 	bl	80061f8 <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_PeriodElapsedCallback+0x976>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e000      	b.n	80027d0 <HAL_TIM_PeriodElapsedCallback+0x978>
 80027ce:	2300      	movs	r3, #0
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	4413      	add	r3, r2
 80027d6:	75fb      	strb	r3, [r7, #23]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 80027d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027dc:	4837      	ldr	r0, [pc, #220]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80027de:	f003 fd0b 	bl	80061f8 <HAL_GPIO_ReadPin>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_TIM_PeriodElapsedCallback+0x994>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e000      	b.n	80027ee <HAL_TIM_PeriodElapsedCallback+0x996>
 80027ec:	2300      	movs	r3, #0
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	4413      	add	r3, r2
 80027f4:	75fb      	strb	r3, [r7, #23]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 80027f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027fa:	482f      	ldr	r0, [pc, #188]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80027fc:	f003 fcfc 	bl	80061f8 <HAL_GPIO_ReadPin>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_TIM_PeriodElapsedCallback+0x9b2>
 8002806:	2308      	movs	r3, #8
 8002808:	e000      	b.n	800280c <HAL_TIM_PeriodElapsedCallback+0x9b4>
 800280a:	2300      	movs	r3, #0
 800280c:	b2da      	uxtb	r2, r3
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	4413      	add	r3, r2
 8002812:	75fb      	strb	r3, [r7, #23]
		rotary_value = rotary_value_row;
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	7013      	strb	r3, [r2, #0]

#if USE_BUZZER
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1406 * rotary_value_row / 16);
#endif

		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 800281a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800281e:	4826      	ldr	r0, [pc, #152]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8002820:	f003 fcea 	bl	80061f8 <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_TIM_PeriodElapsedCallback+0x9e8>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 800282a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800282e:	4822      	ldr	r0, [pc, #136]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8002830:	f003 fce2 	bl	80061f8 <HAL_GPIO_ReadPin>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_TIM_PeriodElapsedCallback+0x9e8>
			enter = 1;
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 8002840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002844:	481c      	ldr	r0, [pc, #112]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8002846:	f003 fcd7 	bl	80061f8 <HAL_GPIO_ReadPin>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_TIM_PeriodElapsedCallback+0xa0e>
				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8002850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002854:	4818      	ldr	r0, [pc, #96]	; (80028b8 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8002856:	f003 fccf 	bl	80061f8 <HAL_GPIO_ReadPin>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <HAL_TIM_PeriodElapsedCallback+0xa0e>
			enter = 0;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002866:	bf00      	nop
 8002868:	372c      	adds	r7, #44	; 0x2c
 800286a:	46bd      	mov	sp, r7
 800286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002870:	20000324 	.word	0x20000324
 8002874:	200002c8 	.word	0x200002c8
 8002878:	20000349 	.word	0x20000349
 800287c:	20013f98 	.word	0x20013f98
 8002880:	20000230 	.word	0x20000230
 8002884:	409f4000 	.word	0x409f4000
 8002888:	20000330 	.word	0x20000330
 800288c:	200003a8 	.word	0x200003a8
 8002890:	408f4000 	.word	0x408f4000
 8002894:	20013e40 	.word	0x20013e40
 8002898:	20000370 	.word	0x20000370
 800289c:	20013e48 	.word	0x20013e48
 80028a0:	20000360 	.word	0x20000360
 80028a4:	20013f38 	.word	0x20013f38
 80028a8:	20000340 	.word	0x20000340
 80028ac:	20013f9a 	.word	0x20013f9a
 80028b0:	200003d0 	.word	0x200003d0
 80028b4:	40014800 	.word	0x40014800
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020000 	.word	0x40020000
 80028c0:	2000031c 	.word	0x2000031c
 80028c4:	20013f9c 	.word	0x20013f9c

080028c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ce:	f001 fe6b 	bl	80045a8 <HAL_Init>

  /* USER CODE BEGIN Init */
#if USE_LED
	set_led(0b11, 0b00);
 80028d2:	2100      	movs	r1, #0
 80028d4:	2003      	movs	r0, #3
 80028d6:	f7fe fcd5 	bl	8001284 <set_led>
#endif

	enter = 0;
 80028da:	4bbf      	ldr	r3, [pc, #764]	; (8002bd8 <main+0x310>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 80028e0:	4bbe      	ldr	r3, [pc, #760]	; (8002bdc <main+0x314>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 80028e6:	4bbe      	ldr	r3, [pc, #760]	; (8002be0 <main+0x318>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
	rv = 0;
 80028ec:	4bbd      	ldr	r3, [pc, #756]	; (8002be4 <main+0x31c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = M_PI * TIREDIAMETER * PINION / (double) PULSEPERROTATE
 80028f2:	4abd      	ldr	r2, [pc, #756]	; (8002be8 <main+0x320>)
 80028f4:	a4b6      	add	r4, pc, #728	; (adr r4, 8002bd0 <main+0x308>)
 80028f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80028fa:	e9c2 3400 	strd	r3, r4, [r2]
			/ (double) SUPER;
	commonspeed = 0;
 80028fe:	4bbb      	ldr	r3, [pc, #748]	; (8002bec <main+0x324>)
 8002900:	2200      	movs	r2, #0
 8002902:	801a      	strh	r2, [r3, #0]
	calibrationsize = CALIBRATIONSIZE;
 8002904:	4bba      	ldr	r3, [pc, #744]	; (8002bf0 <main+0x328>)
 8002906:	220c      	movs	r2, #12
 8002908:	701a      	strb	r2, [r3, #0]
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

#if USE_FLASH
	printf("Load Flash\r\n");
 800290a:	48ba      	ldr	r0, [pc, #744]	; (8002bf4 <main+0x32c>)
 800290c:	f007 fa76 	bl	8009dfc <puts>
	loadFlash(start_address, (uint8_t*) &flash_buffer, sizeof(FlashBuffer));
 8002910:	4bb9      	ldr	r3, [pc, #740]	; (8002bf8 <main+0x330>)
 8002912:	4aba      	ldr	r2, [pc, #744]	; (8002bfc <main+0x334>)
 8002914:	49ba      	ldr	r1, [pc, #744]	; (8002c00 <main+0x338>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fe99 	bl	800164e <loadFlash>
#endif

	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e00d      	b.n	800293e <main+0x76>
		analogmax[i] = 0;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	4ab7      	ldr	r2, [pc, #732]	; (8002c04 <main+0x33c>)
 8002926:	2100      	movs	r1, #0
 8002928:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	4ab6      	ldr	r2, [pc, #728]	; (8002c08 <main+0x340>)
 8002930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002934:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	3301      	adds	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b0b      	cmp	r3, #11
 8002942:	d9ee      	bls.n	8002922 <main+0x5a>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002944:	f000 fa66 	bl	8002e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002948:	f000 feaa 	bl	80036a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800294c:	f000 fe88 	bl	8003660 <MX_DMA_Init>
  MX_ADC1_Init();
 8002950:	f000 faca 	bl	8002ee8 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8002954:	f000 fe5a 	bl	800360c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8002958:	f000 fdb6 	bl	80034c8 <MX_TIM6_Init>
  MX_TIM4_Init();
 800295c:	f000 fd50 	bl	8003400 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002960:	f000 fc4a 	bl	80031f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002964:	f000 fcf8 	bl	8003358 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002968:	f000 fde4 	bl	8003534 <MX_TIM10_Init>
  MX_TIM11_Init();
 800296c:	f000 fe06 	bl	800357c <MX_TIM11_Init>
  MX_SPI2_Init();
 8002970:	f000 fc0c 	bl	800318c <MX_SPI2_Init>
  MX_I2C1_Init();
 8002974:	f000 fbdc 	bl	8003130 <MX_I2C1_Init>
  MX_TIM14_Init();
 8002978:	f000 fe24 	bl	80035c4 <MX_TIM14_Init>
  MX_TIM2_Init();
 800297c:	f000 fc94 	bl	80032a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8002980:	48a2      	ldr	r0, [pc, #648]	; (8002c0c <main+0x344>)
 8002982:	f007 f9c7 	bl	8009d14 <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8002986:	48a2      	ldr	r0, [pc, #648]	; (8002c10 <main+0x348>)
 8002988:	f007 fa38 	bl	8009dfc <puts>

	printf("Starting Analog Read\r\n");
 800298c:	48a1      	ldr	r0, [pc, #644]	; (8002c14 <main+0x34c>)
 800298e:	f007 fa35 	bl	8009dfc <puts>
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002992:	48a1      	ldr	r0, [pc, #644]	; (8002c18 <main+0x350>)
 8002994:	f001 fe9c 	bl	80046d0 <HAL_ADC_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <main+0xda>
		Error_Handler();
 800299e:	f001 f96f 	bl	8003c80 <Error_Handler>
	}

	printf("Starting TIM11\r\n");
 80029a2:	489e      	ldr	r0, [pc, #632]	; (8002c1c <main+0x354>)
 80029a4:	f007 fa2a 	bl	8009dfc <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 80029a8:	489d      	ldr	r0, [pc, #628]	; (8002c20 <main+0x358>)
 80029aa:	f004 ff6e 	bl	800788a <HAL_TIM_Base_Start_IT>

	playmode = (PlayMode) rotary_value;
 80029ae:	4b8c      	ldr	r3, [pc, #560]	; (8002be0 <main+0x318>)
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	4b9c      	ldr	r3, [pc, #624]	; (8002c24 <main+0x35c>)
 80029b4:	701a      	strb	r2, [r3, #0]

	playmode_print();
 80029b6:	f7fe fc9b 	bl	80012f0 <playmode_print>
	Error_Handler();
}
#endif

#if USE_IMU
	printf("Starting SPI2 (IMU)\r\n");
 80029ba:	489b      	ldr	r0, [pc, #620]	; (8002c28 <main+0x360>)
 80029bc:	f007 fa1e 	bl	8009dfc <puts>
	uint8_t wai, ret;
	ret = IMU_init(&wai);
 80029c0:	1dbb      	adds	r3, r7, #6
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fb3c 	bl	8001040 <IMU_init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 80029cc:	79bb      	ldrb	r3, [r7, #6]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4896      	ldr	r0, [pc, #600]	; (8002c2c <main+0x364>)
 80029d2:	f007 f99f 	bl	8009d14 <iprintf>
	if (ret == 1) {
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d103      	bne.n	80029e4 <main+0x11c>
		printf("SPI INIT COLLECT!\r\n");
 80029dc:	4894      	ldr	r0, [pc, #592]	; (8002c30 <main+0x368>)
 80029de:	f007 fa0d 	bl	8009dfc <puts>
 80029e2:	e002      	b.n	80029ea <main+0x122>
	} else {
		printf("SPI INIT FAILURE x_x \r\n");
 80029e4:	4893      	ldr	r0, [pc, #588]	; (8002c34 <main+0x36c>)
 80029e6:	f007 fa09 	bl	8009dfc <puts>
	}
#endif

#if D_ENCODER
	printf("LENGTHPERPULSE = %f\r\n", LENGTHPERPULSE);
 80029ea:	4b7f      	ldr	r3, [pc, #508]	; (8002be8 <main+0x320>)
 80029ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4623      	mov	r3, r4
 80029f4:	4890      	ldr	r0, [pc, #576]	; (8002c38 <main+0x370>)
 80029f6:	f007 f98d 	bl	8009d14 <iprintf>
#if D_MATH
printf("M_PI = %f, exp(1) = %f\r\n", M_PI, exp(1));
printf("10 ^ (-1 / 10) = %f\r\n", pow(10, -1/(double)10));
#endif
#if USE_LED
	set_led(0b11, 0b11);
 80029fa:	2103      	movs	r1, #3
 80029fc:	2003      	movs	r0, #3
 80029fe:	f7fe fc41 	bl	8001284 <set_led>
	led_rgb(1, 1, 1);	// White
 8002a02:	2201      	movs	r2, #1
 8002a04:	2101      	movs	r1, #1
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7fe fc06 	bl	8001218 <led_rgb>
#endif
#if D_LED
	HAL_TIM_Base_Start_IT(&htim6);	// PID
#endif

	pid_gain_initialize();
 8002a0c:	f7ff f850 	bl	8001ab0 <pid_gain_initialize>

#if D_ROTARY
		printf("rotary_value = %x\r\n", rotary_value);
#endif

		if(enter)
 8002a10:	4b71      	ldr	r3, [pc, #452]	; (8002bd8 <main+0x310>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 81e4 	beq.w	8002de2 <main+0x51a>
		{
			rv = rotary_value;
 8002a1a:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <main+0x318>)
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	4b71      	ldr	r3, [pc, #452]	; (8002be4 <main+0x31c>)
 8002a20:	701a      	strb	r2, [r3, #0]
			switch (rv) {
 8002a22:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <main+0x31c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f200 81dd 	bhi.w	8002de6 <main+0x51e>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <main+0x16c>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a75 	.word	0x08002a75
 8002a38:	08002b2f 	.word	0x08002b2f
 8002a3c:	08002b4f 	.word	0x08002b4f
 8002a40:	08002b6d 	.word	0x08002b6d
 8002a44:	08002b8b 	.word	0x08002b8b
 8002a48:	08002ba9 	.word	0x08002ba9
 8002a4c:	08002bc7 	.word	0x08002bc7
 8002a50:	08002c55 	.word	0x08002c55
 8002a54:	08002c73 	.word	0x08002c73
 8002a58:	08002c91 	.word	0x08002c91
 8002a5c:	08002caf 	.word	0x08002caf
 8002a60:	08002ccd 	.word	0x08002ccd
 8002a64:	08002ceb 	.word	0x08002ceb
 8002a68:	08002d09 	.word	0x08002d09
 8002a6c:	08002d27 	.word	0x08002d27
 8002a70:	08002d45 	.word	0x08002d45
			case 0x00:
				if(playmode == calibration)
 8002a74:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <main+0x35c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d149      	bne.n	8002b10 <main+0x248>
				{
	#if USE_LED
					led_rgb(1, 1, 0);	// Yellow
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2101      	movs	r1, #1
 8002a80:	2001      	movs	r0, #1
 8002a82:	f7fe fbc9 	bl	8001218 <led_rgb>
	#endif
					for (unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	73bb      	strb	r3, [r7, #14]
 8002a8a:	e00d      	b.n	8002aa8 <main+0x1e0>
					{
						analogmax[i] = 0;
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	4a5d      	ldr	r2, [pc, #372]	; (8002c04 <main+0x33c>)
 8002a90:	2100      	movs	r1, #0
 8002a92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						analogmin[i] = 4096;
 8002a96:	7bbb      	ldrb	r3, [r7, #14]
 8002a98:	4a5b      	ldr	r2, [pc, #364]	; (8002c08 <main+0x340>)
 8002a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for (unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8002aa2:	7bbb      	ldrb	r3, [r7, #14]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	73bb      	strb	r3, [r7, #14]
 8002aa8:	7bbb      	ldrb	r3, [r7, #14]
 8002aaa:	2b0b      	cmp	r3, #11
 8002aac:	d9ee      	bls.n	8002a8c <main+0x1c4>
					}

					sensor_initialize();
 8002aae:	f000 fef3 	bl	8003898 <sensor_initialize>

					while (enter)
 8002ab2:	e002      	b.n	8002aba <main+0x1f2>
							analog[0], analog[2], analog[4], analog[6], analog[8], analog[10],
							analog[11], analog[9], analog[7], analog[5], analog[3],
							analog[1]);
	#endif
	#endif
						HAL_Delay(100);
 8002ab4:	2064      	movs	r0, #100	; 0x64
 8002ab6:	f001 fde9 	bl	800468c <HAL_Delay>
					while (enter)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <main+0x310>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f8      	bne.n	8002ab4 <main+0x1ec>
					}

					sensor_finalize();
 8002ac2:	f000 ff05 	bl	80038d0 <sensor_finalize>
				printf("\r\n");
				printf(ESC_DEF);
	#endif

	#if USE_FLASH
					for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	737b      	strb	r3, [r7, #13]
 8002aca:	e017      	b.n	8002afc <main+0x234>
					{
						flash_buffer.analogmax[i] = analogmax[i];
 8002acc:	7b7a      	ldrb	r2, [r7, #13]
 8002ace:	7b7b      	ldrb	r3, [r7, #13]
 8002ad0:	494c      	ldr	r1, [pc, #304]	; (8002c04 <main+0x33c>)
 8002ad2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002ad6:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <main+0x338>)
 8002ad8:	330c      	adds	r3, #12
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	460a      	mov	r2, r1
 8002ae0:	805a      	strh	r2, [r3, #2]
						flash_buffer.analogmin[i] = analogmin[i];
 8002ae2:	7b7a      	ldrb	r2, [r7, #13]
 8002ae4:	7b7b      	ldrb	r3, [r7, #13]
 8002ae6:	4948      	ldr	r1, [pc, #288]	; (8002c08 <main+0x340>)
 8002ae8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002aec:	4a44      	ldr	r2, [pc, #272]	; (8002c00 <main+0x338>)
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	460a      	mov	r2, r1
 8002af4:	805a      	strh	r2, [r3, #2]
					for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8002af6:	7b7b      	ldrb	r3, [r7, #13]
 8002af8:	3301      	adds	r3, #1
 8002afa:	737b      	strb	r3, [r7, #13]
 8002afc:	7b7b      	ldrb	r3, [r7, #13]
 8002afe:	2b0b      	cmp	r3, #11
 8002b00:	d9e4      	bls.n	8002acc <main+0x204>
					}

					writeFlash(start_address, (uint8_t*) &flash_buffer,
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <main+0x330>)
 8002b04:	4a3d      	ldr	r2, [pc, #244]	; (8002bfc <main+0x334>)
 8002b06:	493e      	ldr	r1, [pc, #248]	; (8002c00 <main+0x338>)
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fd76 	bl	80015fa <writeFlash>
						HAL_Delay(250);
					}

					running_finalize();
				}
				break;	// case 0x00:
 8002b0e:	e16b      	b.n	8002de8 <main+0x520>
					running_initialize();
 8002b10:	f000 fee8 	bl	80038e4 <running_initialize>
					while (enter) {
 8002b14:	e004      	b.n	8002b20 <main+0x258>
						d_print();
 8002b16:	f7fe fbf3 	bl	8001300 <d_print>
						HAL_Delay(250);
 8002b1a:	20fa      	movs	r0, #250	; 0xfa
 8002b1c:	f001 fdb6 	bl	800468c <HAL_Delay>
					while (enter) {
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <main+0x310>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f6      	bne.n	8002b16 <main+0x24e>
					running_finalize();
 8002b28:	f000 fff6 	bl	8003b18 <running_finalize>
				break;	// case 0x00:
 8002b2c:	e15c      	b.n	8002de8 <main+0x520>
			case 0x01:	// 1
				running_initialize();
 8002b2e:	f000 fed9 	bl	80038e4 <running_initialize>

				while (enter) {
 8002b32:	e005      	b.n	8002b40 <main+0x278>
					d_print();
 8002b34:	f7fe fbe4 	bl	8001300 <d_print>
					HAL_Delay(500);
 8002b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b3c:	f001 fda6 	bl	800468c <HAL_Delay>
				while (enter) {
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <main+0x310>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f5      	bne.n	8002b34 <main+0x26c>
				}

				running_finalize();
 8002b48:	f000 ffe6 	bl	8003b18 <running_finalize>
				break;
 8002b4c:	e14c      	b.n	8002de8 <main+0x520>
			case 0x02:	// 2
				running_initialize();
 8002b4e:	f000 fec9 	bl	80038e4 <running_initialize>

				while (enter) {
 8002b52:	e004      	b.n	8002b5e <main+0x296>
					d_print();
 8002b54:	f7fe fbd4 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002b58:	20fa      	movs	r0, #250	; 0xfa
 8002b5a:	f001 fd97 	bl	800468c <HAL_Delay>
				while (enter) {
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <main+0x310>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f6      	bne.n	8002b54 <main+0x28c>
				}

				running_finalize();
 8002b66:	f000 ffd7 	bl	8003b18 <running_finalize>
				break;
 8002b6a:	e13d      	b.n	8002de8 <main+0x520>
			case 0x03:	// 3
				running_initialize();
 8002b6c:	f000 feba 	bl	80038e4 <running_initialize>

				while (enter) {
 8002b70:	e004      	b.n	8002b7c <main+0x2b4>
					d_print();
 8002b72:	f7fe fbc5 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002b76:	20fa      	movs	r0, #250	; 0xfa
 8002b78:	f001 fd88 	bl	800468c <HAL_Delay>
				while (enter) {
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <main+0x310>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f6      	bne.n	8002b72 <main+0x2aa>
				}

				running_finalize();
 8002b84:	f000 ffc8 	bl	8003b18 <running_finalize>
				break;
 8002b88:	e12e      	b.n	8002de8 <main+0x520>
			case 0x04:	// 4
				running_initialize();
 8002b8a:	f000 feab 	bl	80038e4 <running_initialize>

				while (enter) {
 8002b8e:	e004      	b.n	8002b9a <main+0x2d2>
					d_print();
 8002b90:	f7fe fbb6 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002b94:	20fa      	movs	r0, #250	; 0xfa
 8002b96:	f001 fd79 	bl	800468c <HAL_Delay>
				while (enter) {
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <main+0x310>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f6      	bne.n	8002b90 <main+0x2c8>
				}

				running_finalize();
 8002ba2:	f000 ffb9 	bl	8003b18 <running_finalize>
				break;
 8002ba6:	e11f      	b.n	8002de8 <main+0x520>
			case 0x05:	// 5
				running_initialize();
 8002ba8:	f000 fe9c 	bl	80038e4 <running_initialize>

				while (enter) {
 8002bac:	e004      	b.n	8002bb8 <main+0x2f0>
					d_print();
 8002bae:	f7fe fba7 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002bb2:	20fa      	movs	r0, #250	; 0xfa
 8002bb4:	f001 fd6a 	bl	800468c <HAL_Delay>
				while (enter) {
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <main+0x310>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f6      	bne.n	8002bae <main+0x2e6>
				}

				running_finalize();
 8002bc0:	f000 ffaa 	bl	8003b18 <running_finalize>
				break;
 8002bc4:	e110      	b.n	8002de8 <main+0x520>
			case 0x06:	// 6
				running_initialize();
 8002bc6:	f000 fe8d 	bl	80038e4 <running_initialize>

				while (enter) {
 8002bca:	e03c      	b.n	8002c46 <main+0x37e>
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	24a478cb 	.word	0x24a478cb
 8002bd4:	40192ab8 	.word	0x40192ab8
 8002bd8:	20013f9c 	.word	0x20013f9c
 8002bdc:	20013e52 	.word	0x20013e52
 8002be0:	2000031c 	.word	0x2000031c
 8002be4:	200003c8 	.word	0x200003c8
 8002be8:	20013e48 	.word	0x20013e48
 8002bec:	20000324 	.word	0x20000324
 8002bf0:	20000348 	.word	0x20000348
 8002bf4:	0800d6ac 	.word	0x0800d6ac
 8002bf8:	080e0000 	.word	0x080e0000
 8002bfc:	000138b8 	.word	0x000138b8
 8002c00:	200003d0 	.word	0x200003d0
 8002c04:	20013f48 	.word	0x20013f48
 8002c08:	20000304 	.word	0x20000304
 8002c0c:	0800d6b8 	.word	0x0800d6b8
 8002c10:	0800d6c0 	.word	0x0800d6c0
 8002c14:	0800d6e0 	.word	0x0800d6e0
 8002c18:	200142ac 	.word	0x200142ac
 8002c1c:	0800d6f8 	.word	0x0800d6f8
 8002c20:	200142f4 	.word	0x200142f4
 8002c24:	200002c8 	.word	0x200002c8
 8002c28:	0800d708 	.word	0x0800d708
 8002c2c:	0800d720 	.word	0x0800d720
 8002c30:	0800d730 	.word	0x0800d730
 8002c34:	0800d744 	.word	0x0800d744
 8002c38:	0800d75c 	.word	0x0800d75c
					d_print();
 8002c3c:	f7fe fb60 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002c40:	20fa      	movs	r0, #250	; 0xfa
 8002c42:	f001 fd23 	bl	800468c <HAL_Delay>
				while (enter) {
 8002c46:	4b69      	ldr	r3, [pc, #420]	; (8002dec <main+0x524>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f6      	bne.n	8002c3c <main+0x374>
				}

				running_finalize();
 8002c4e:	f000 ff63 	bl	8003b18 <running_finalize>
				break;
 8002c52:	e0c9      	b.n	8002de8 <main+0x520>
			case 0x07:	// 7
				running_initialize();
 8002c54:	f000 fe46 	bl	80038e4 <running_initialize>

				while (enter) {
 8002c58:	e004      	b.n	8002c64 <main+0x39c>
					d_print();
 8002c5a:	f7fe fb51 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002c5e:	20fa      	movs	r0, #250	; 0xfa
 8002c60:	f001 fd14 	bl	800468c <HAL_Delay>
				while (enter) {
 8002c64:	4b61      	ldr	r3, [pc, #388]	; (8002dec <main+0x524>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f6      	bne.n	8002c5a <main+0x392>
				}

				running_finalize();
 8002c6c:	f000 ff54 	bl	8003b18 <running_finalize>
				break;
 8002c70:	e0ba      	b.n	8002de8 <main+0x520>
			case 0x08:	// 8
				running_initialize();
 8002c72:	f000 fe37 	bl	80038e4 <running_initialize>

				while (enter) {
 8002c76:	e004      	b.n	8002c82 <main+0x3ba>
					d_print();
 8002c78:	f7fe fb42 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002c7c:	20fa      	movs	r0, #250	; 0xfa
 8002c7e:	f001 fd05 	bl	800468c <HAL_Delay>
				while (enter) {
 8002c82:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <main+0x524>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f6      	bne.n	8002c78 <main+0x3b0>
				}

				running_finalize();
 8002c8a:	f000 ff45 	bl	8003b18 <running_finalize>
				break;
 8002c8e:	e0ab      	b.n	8002de8 <main+0x520>
			case 0x09:	// 9
				running_initialize();
 8002c90:	f000 fe28 	bl	80038e4 <running_initialize>

				while (enter) {
 8002c94:	e004      	b.n	8002ca0 <main+0x3d8>
					d_print();
 8002c96:	f7fe fb33 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002c9a:	20fa      	movs	r0, #250	; 0xfa
 8002c9c:	f001 fcf6 	bl	800468c <HAL_Delay>
				while (enter) {
 8002ca0:	4b52      	ldr	r3, [pc, #328]	; (8002dec <main+0x524>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f6      	bne.n	8002c96 <main+0x3ce>
				}

				running_finalize();
 8002ca8:	f000 ff36 	bl	8003b18 <running_finalize>
				break;
 8002cac:	e09c      	b.n	8002de8 <main+0x520>
			case 0x0A:	// A
				running_initialize();
 8002cae:	f000 fe19 	bl	80038e4 <running_initialize>

				while (enter) {
 8002cb2:	e004      	b.n	8002cbe <main+0x3f6>
					d_print();
 8002cb4:	f7fe fb24 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002cb8:	20fa      	movs	r0, #250	; 0xfa
 8002cba:	f001 fce7 	bl	800468c <HAL_Delay>
				while (enter) {
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <main+0x524>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f6      	bne.n	8002cb4 <main+0x3ec>
				}

				running_finalize();
 8002cc6:	f000 ff27 	bl	8003b18 <running_finalize>
				break;
 8002cca:	e08d      	b.n	8002de8 <main+0x520>
			case 0x0B:	// B
				running_initialize();
 8002ccc:	f000 fe0a 	bl	80038e4 <running_initialize>

				while (enter) {
 8002cd0:	e004      	b.n	8002cdc <main+0x414>
					d_print();
 8002cd2:	f7fe fb15 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002cd6:	20fa      	movs	r0, #250	; 0xfa
 8002cd8:	f001 fcd8 	bl	800468c <HAL_Delay>
				while (enter) {
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <main+0x524>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f6      	bne.n	8002cd2 <main+0x40a>
				}

				running_finalize();
 8002ce4:	f000 ff18 	bl	8003b18 <running_finalize>
				break;
 8002ce8:	e07e      	b.n	8002de8 <main+0x520>
			case 0x0C:	// C
				running_initialize();
 8002cea:	f000 fdfb 	bl	80038e4 <running_initialize>

				while (enter) {
 8002cee:	e004      	b.n	8002cfa <main+0x432>
					d_print();
 8002cf0:	f7fe fb06 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002cf4:	20fa      	movs	r0, #250	; 0xfa
 8002cf6:	f001 fcc9 	bl	800468c <HAL_Delay>
				while (enter) {
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <main+0x524>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f6      	bne.n	8002cf0 <main+0x428>
				}

				running_finalize();
 8002d02:	f000 ff09 	bl	8003b18 <running_finalize>
				break;
 8002d06:	e06f      	b.n	8002de8 <main+0x520>
			case 0x0D:	// D
				running_initialize();
 8002d08:	f000 fdec 	bl	80038e4 <running_initialize>

				while (enter) {
 8002d0c:	e004      	b.n	8002d18 <main+0x450>
					d_print();
 8002d0e:	f7fe faf7 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002d12:	20fa      	movs	r0, #250	; 0xfa
 8002d14:	f001 fcba 	bl	800468c <HAL_Delay>
				while (enter) {
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <main+0x524>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f6      	bne.n	8002d0e <main+0x446>
				}

				running_finalize();
 8002d20:	f000 fefa 	bl	8003b18 <running_finalize>
				break;
 8002d24:	e060      	b.n	8002de8 <main+0x520>
			case 0x0E:	// E
				running_initialize();
 8002d26:	f000 fddd 	bl	80038e4 <running_initialize>

				while (enter) {
 8002d2a:	e004      	b.n	8002d36 <main+0x46e>
					d_print();
 8002d2c:	f7fe fae8 	bl	8001300 <d_print>
					HAL_Delay(250);
 8002d30:	20fa      	movs	r0, #250	; 0xfa
 8002d32:	f001 fcab 	bl	800468c <HAL_Delay>
				while (enter) {
 8002d36:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <main+0x524>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f6      	bne.n	8002d2c <main+0x464>
				}

				running_finalize();
 8002d3e:	f000 feeb 	bl	8003b18 <running_finalize>
				break;
 8002d42:	e051      	b.n	8002de8 <main+0x520>
			case 0x0F:
				if(playmode == flash_print)
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <main+0x528>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b0f      	cmp	r3, #15
 8002d4a:	d13b      	bne.n	8002dc4 <main+0x4fc>
                {
#if USE_FLASH
					// load flash output
					loadFlash(start_address, (uint8_t*) &flash_buffer,
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <main+0x52c>)
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <main+0x530>)
 8002d50:	492a      	ldr	r1, [pc, #168]	; (8002dfc <main+0x534>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fc7b 	bl	800164e <loadFlash>
							sizeof(FlashBuffer));
					printf("////////// Radius //////////\r\n");
 8002d58:	4829      	ldr	r0, [pc, #164]	; (8002e00 <main+0x538>)
 8002d5a:	f007 f84f 	bl	8009dfc <puts>
					printf("course_state_time_max = %5d\r\n", flash_buffer.course_state_time_max);
 8002d5e:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <main+0x534>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4827      	ldr	r0, [pc, #156]	; (8002e04 <main+0x53c>)
 8002d66:	f006 ffd5 	bl	8009d14 <iprintf>
					for (int i = 0; i < COURSE_STATE_SIZE; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	e01b      	b.n	8002da8 <main+0x4e0>
					{
						if(i >= flash_buffer.course_state_time_max + 1)
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <main+0x534>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	db02      	blt.n	8002d82 <main+0x4ba>
						{
							printf(ESC_RED);
 8002d7c:	4822      	ldr	r0, [pc, #136]	; (8002e08 <main+0x540>)
 8002d7e:	f006 ffc9 	bl	8009d14 <iprintf>
						}
#if !D_COURSE_SAVING
						printf("%3d, %6.3lf\r\n", i, flash_buffer.radius[i]);
 8002d82:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <main+0x534>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3307      	adds	r3, #7
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	481d      	ldr	r0, [pc, #116]	; (8002e0c <main+0x544>)
 8002d98:	f006 ffbc 	bl	8009d14 <iprintf>
#else
						printf("%6.3lf, %6.3lf\r\n", flash_buffer.igz[i], flash_buffer.len[i]);
#endif
						printf(ESC_DEF);
 8002d9c:	481c      	ldr	r0, [pc, #112]	; (8002e10 <main+0x548>)
 8002d9e:	f006 ffb9 	bl	8009d14 <iprintf>
					for (int i = 0; i < COURSE_STATE_SIZE; i++)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3301      	adds	r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f242 720f 	movw	r2, #9999	; 0x270f
 8002dae:	4293      	cmp	r3, r2
 8002db0:	ddde      	ble.n	8002d70 <main+0x4a8>
					}

					while(enter)
 8002db2:	e002      	b.n	8002dba <main+0x4f2>
					{
						HAL_Delay(250);
 8002db4:	20fa      	movs	r0, #250	; 0xfa
 8002db6:	f001 fc69 	bl	800468c <HAL_Delay>
					while(enter)
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <main+0x524>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f8      	bne.n	8002db4 <main+0x4ec>
				 }
				 #endif
				 #endif
				 */

				break;
 8002dc2:	e011      	b.n	8002de8 <main+0x520>
					running_initialize();
 8002dc4:	f000 fd8e 	bl	80038e4 <running_initialize>
					while (enter) {
 8002dc8:	e004      	b.n	8002dd4 <main+0x50c>
						d_print();
 8002dca:	f7fe fa99 	bl	8001300 <d_print>
						HAL_Delay(250);
 8002dce:	20fa      	movs	r0, #250	; 0xfa
 8002dd0:	f001 fc5c 	bl	800468c <HAL_Delay>
					while (enter) {
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <main+0x524>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f6      	bne.n	8002dca <main+0x502>
					running_finalize();
 8002ddc:	f000 fe9c 	bl	8003b18 <running_finalize>
				break;
 8002de0:	e002      	b.n	8002de8 <main+0x520>
			default:
				break;
			} // switch(rotary_value)
		}	// if(enter)
 8002de2:	bf00      	nop
 8002de4:	e614      	b.n	8002a10 <main+0x148>
				break;
 8002de6:	bf00      	nop
		if(enter)
 8002de8:	e612      	b.n	8002a10 <main+0x148>
 8002dea:	bf00      	nop
 8002dec:	20013f9c 	.word	0x20013f9c
 8002df0:	200002c8 	.word	0x200002c8
 8002df4:	080e0000 	.word	0x080e0000
 8002df8:	000138b8 	.word	0x000138b8
 8002dfc:	200003d0 	.word	0x200003d0
 8002e00:	0800d774 	.word	0x0800d774
 8002e04:	0800d794 	.word	0x0800d794
 8002e08:	0800d7b4 	.word	0x0800d7b4
 8002e0c:	0800d7bc 	.word	0x0800d7bc
 8002e10:	0800d6b8 	.word	0x0800d6b8

08002e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b094      	sub	sp, #80	; 0x50
 8002e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e1a:	f107 0320 	add.w	r3, r7, #32
 8002e1e:	2230      	movs	r2, #48	; 0x30
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f006 f92f 	bl	8009086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e70:	2301      	movs	r3, #1
 8002e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e84:	2308      	movs	r3, #8
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e88:	23a8      	movs	r3, #168	; 0xa8
 8002e8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e90:	2304      	movs	r3, #4
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fb17 	bl	80064cc <HAL_RCC_OscConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ea4:	f000 feec 	bl	8003c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eac:	2302      	movs	r3, #2
 8002eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002eb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002eb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	2105      	movs	r1, #5
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fd70 	bl	80069ac <HAL_RCC_ClockConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ed2:	f000 fed5 	bl	8003c80 <Error_Handler>
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3750      	adds	r7, #80	; 0x50
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002eee:	463b      	mov	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002efa:	4b8a      	ldr	r3, [pc, #552]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002efc:	4a8a      	ldr	r2, [pc, #552]	; (8003128 <MX_ADC1_Init+0x240>)
 8002efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f00:	4b88      	ldr	r3, [pc, #544]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f08:	4b86      	ldr	r3, [pc, #536]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f0e:	4b85      	ldr	r3, [pc, #532]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f14:	4b83      	ldr	r3, [pc, #524]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f1a:	4b82      	ldr	r3, [pc, #520]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f22:	4b80      	ldr	r3, [pc, #512]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f28:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f2a:	4a80      	ldr	r2, [pc, #512]	; (800312c <MX_ADC1_Init+0x244>)
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8002f34:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f36:	2210      	movs	r2, #16
 8002f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f42:	4b78      	ldr	r3, [pc, #480]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f48:	4876      	ldr	r0, [pc, #472]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f4a:	f001 fbc1 	bl	80046d0 <HAL_ADC_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002f54:	f000 fe94 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002f58:	2309      	movs	r3, #9
 8002f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002f60:	2303      	movs	r3, #3
 8002f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f64:	463b      	mov	r3, r7
 8002f66:	4619      	mov	r1, r3
 8002f68:	486e      	ldr	r0, [pc, #440]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f6a:	f001 fd45 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002f74:	f000 fe84 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002f78:	230a      	movs	r3, #10
 8002f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f80:	463b      	mov	r3, r7
 8002f82:	4619      	mov	r1, r3
 8002f84:	4867      	ldr	r0, [pc, #412]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002f86:	f001 fd37 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002f90:	f000 fe76 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002f94:	2308      	movs	r3, #8
 8002f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4860      	ldr	r0, [pc, #384]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002fa2:	f001 fd29 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002fac:	f000 fe68 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002fb0:	230b      	movs	r3, #11
 8002fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fb8:	463b      	mov	r3, r7
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4859      	ldr	r0, [pc, #356]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002fbe:	f001 fd1b 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002fc8:	f000 fe5a 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002fcc:	230f      	movs	r3, #15
 8002fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002fd0:	2305      	movs	r3, #5
 8002fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4852      	ldr	r0, [pc, #328]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002fda:	f001 fd0d 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002fe4:	f000 fe4c 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002fe8:	230c      	movs	r3, #12
 8002fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002fec:	2306      	movs	r3, #6
 8002fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	484b      	ldr	r0, [pc, #300]	; (8003124 <MX_ADC1_Init+0x23c>)
 8002ff6:	f001 fcff 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003000:	f000 fe3e 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003004:	230e      	movs	r3, #14
 8003006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003008:	2307      	movs	r3, #7
 800300a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	4619      	mov	r1, r3
 8003010:	4844      	ldr	r0, [pc, #272]	; (8003124 <MX_ADC1_Init+0x23c>)
 8003012:	f001 fcf1 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800301c:	f000 fe30 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003020:	230d      	movs	r3, #13
 8003022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003024:	2308      	movs	r3, #8
 8003026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003028:	463b      	mov	r3, r7
 800302a:	4619      	mov	r1, r3
 800302c:	483d      	ldr	r0, [pc, #244]	; (8003124 <MX_ADC1_Init+0x23c>)
 800302e:	f001 fce3 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003038:	f000 fe22 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800303c:	2307      	movs	r3, #7
 800303e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003040:	2309      	movs	r3, #9
 8003042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003044:	463b      	mov	r3, r7
 8003046:	4619      	mov	r1, r3
 8003048:	4836      	ldr	r0, [pc, #216]	; (8003124 <MX_ADC1_Init+0x23c>)
 800304a:	f001 fcd5 	bl	80049f8 <HAL_ADC_ConfigChannel>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003054:	f000 fe14 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003058:	2300      	movs	r3, #0
 800305a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800305c:	230a      	movs	r3, #10
 800305e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003060:	463b      	mov	r3, r7
 8003062:	4619      	mov	r1, r3
 8003064:	482f      	ldr	r0, [pc, #188]	; (8003124 <MX_ADC1_Init+0x23c>)
 8003066:	f001 fcc7 	bl	80049f8 <HAL_ADC_ConfigChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8003070:	f000 fe06 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003074:	2306      	movs	r3, #6
 8003076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003078:	230b      	movs	r3, #11
 800307a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800307c:	463b      	mov	r3, r7
 800307e:	4619      	mov	r1, r3
 8003080:	4828      	ldr	r0, [pc, #160]	; (8003124 <MX_ADC1_Init+0x23c>)
 8003082:	f001 fcb9 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800308c:	f000 fdf8 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003090:	2301      	movs	r3, #1
 8003092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003094:	230c      	movs	r3, #12
 8003096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003098:	463b      	mov	r3, r7
 800309a:	4619      	mov	r1, r3
 800309c:	4821      	ldr	r0, [pc, #132]	; (8003124 <MX_ADC1_Init+0x23c>)
 800309e:	f001 fcab 	bl	80049f8 <HAL_ADC_ConfigChannel>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80030a8:	f000 fdea 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80030ac:	2305      	movs	r3, #5
 80030ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80030b0:	230d      	movs	r3, #13
 80030b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030b4:	463b      	mov	r3, r7
 80030b6:	4619      	mov	r1, r3
 80030b8:	481a      	ldr	r0, [pc, #104]	; (8003124 <MX_ADC1_Init+0x23c>)
 80030ba:	f001 fc9d 	bl	80049f8 <HAL_ADC_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80030c4:	f000 fddc 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030c8:	2302      	movs	r3, #2
 80030ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80030cc:	230e      	movs	r3, #14
 80030ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030d0:	463b      	mov	r3, r7
 80030d2:	4619      	mov	r1, r3
 80030d4:	4813      	ldr	r0, [pc, #76]	; (8003124 <MX_ADC1_Init+0x23c>)
 80030d6:	f001 fc8f 	bl	80049f8 <HAL_ADC_ConfigChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80030e0:	f000 fdce 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80030e4:	2304      	movs	r3, #4
 80030e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80030e8:	230f      	movs	r3, #15
 80030ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ec:	463b      	mov	r3, r7
 80030ee:	4619      	mov	r1, r3
 80030f0:	480c      	ldr	r0, [pc, #48]	; (8003124 <MX_ADC1_Init+0x23c>)
 80030f2:	f001 fc81 	bl	80049f8 <HAL_ADC_ConfigChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 80030fc:	f000 fdc0 	bl	8003c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003100:	2303      	movs	r3, #3
 8003102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8003104:	2310      	movs	r3, #16
 8003106:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003108:	463b      	mov	r3, r7
 800310a:	4619      	mov	r1, r3
 800310c:	4805      	ldr	r0, [pc, #20]	; (8003124 <MX_ADC1_Init+0x23c>)
 800310e:	f001 fc73 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8003118:	f000 fdb2 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200142ac 	.word	0x200142ac
 8003128:	40012000 	.word	0x40012000
 800312c:	0f000001 	.word	0x0f000001

08003130 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <MX_I2C1_Init+0x50>)
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <MX_I2C1_Init+0x54>)
 8003138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <MX_I2C1_Init+0x50>)
 800313c:	4a12      	ldr	r2, [pc, #72]	; (8003188 <MX_I2C1_Init+0x58>)
 800313e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_I2C1_Init+0x50>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <MX_I2C1_Init+0x50>)
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <MX_I2C1_Init+0x50>)
 800314e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <MX_I2C1_Init+0x50>)
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_I2C1_Init+0x50>)
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <MX_I2C1_Init+0x50>)
 8003162:	2200      	movs	r2, #0
 8003164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <MX_I2C1_Init+0x50>)
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <MX_I2C1_Init+0x50>)
 800316e:	f003 f875 	bl	800625c <HAL_I2C_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003178:	f000 fd82 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200141d8 	.word	0x200141d8
 8003184:	40005400 	.word	0x40005400
 8003188:	000186a0 	.word	0x000186a0

0800318c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <MX_SPI2_Init+0x64>)
 8003192:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <MX_SPI2_Init+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <MX_SPI2_Init+0x64>)
 8003198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800319c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031ac:	2202      	movs	r2, #2
 80031ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031c0:	2228      	movs	r2, #40	; 0x28
 80031c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031d8:	220a      	movs	r2, #10
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <MX_SPI2_Init+0x64>)
 80031de:	f003 fdd5 	bl	8006d8c <HAL_SPI_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031e8:	f000 fd4a 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20014140 	.word	0x20014140
 80031f4:	40003800 	.word	0x40003800

080031f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031fe:	f107 030c 	add.w	r3, r7, #12
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f005 ff3d 	bl	8009086 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <MX_TIM1_Init+0xa8>)
 8003216:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <MX_TIM1_Init+0xac>)
 8003218:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <MX_TIM1_Init+0xa8>)
 800321c:	2200      	movs	r2, #0
 800321e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <MX_TIM1_Init+0xa8>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <MX_TIM1_Init+0xa8>)
 8003228:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800322c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <MX_TIM1_Init+0xa8>)
 8003230:	2200      	movs	r2, #0
 8003232:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <MX_TIM1_Init+0xa8>)
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <MX_TIM1_Init+0xa8>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003240:	2303      	movs	r3, #3
 8003242:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003248:	2301      	movs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003254:	2300      	movs	r3, #0
 8003256:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003258:	2301      	movs	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003264:	f107 030c 	add.w	r3, r7, #12
 8003268:	4619      	mov	r1, r3
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <MX_TIM1_Init+0xa8>)
 800326c:	f004 fc1e 	bl	8007aac <HAL_TIM_Encoder_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003276:	f000 fd03 	bl	8003c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4806      	ldr	r0, [pc, #24]	; (80032a0 <MX_TIM1_Init+0xa8>)
 8003288:	f005 f98c 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003292:	f000 fcf5 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003296:	bf00      	nop
 8003298:	3730      	adds	r7, #48	; 0x30
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200143d4 	.word	0x200143d4
 80032a4:	40010000 	.word	0x40010000

080032a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ae:	f107 0320 	add.w	r3, r7, #32
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	611a      	str	r2, [r3, #16]
 80032c6:	615a      	str	r2, [r3, #20]
 80032c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <MX_TIM2_Init+0xac>)
 80032cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <MX_TIM2_Init+0xac>)
 80032d4:	2204      	movs	r2, #4
 80032d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d8:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <MX_TIM2_Init+0xac>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33599;
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <MX_TIM2_Init+0xac>)
 80032e0:	f248 323f 	movw	r2, #33599	; 0x833f
 80032e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <MX_TIM2_Init+0xac>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <MX_TIM2_Init+0xac>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032f2:	4818      	ldr	r0, [pc, #96]	; (8003354 <MX_TIM2_Init+0xac>)
 80032f4:	f004 fb18 	bl	8007928 <HAL_TIM_PWM_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80032fe:	f000 fcbf 	bl	8003c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800330a:	f107 0320 	add.w	r3, r7, #32
 800330e:	4619      	mov	r1, r3
 8003310:	4810      	ldr	r0, [pc, #64]	; (8003354 <MX_TIM2_Init+0xac>)
 8003312:	f005 f947 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800331c:	f000 fcb0 	bl	8003c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003320:	2360      	movs	r3, #96	; 0x60
 8003322:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	4619      	mov	r1, r3
 8003336:	4807      	ldr	r0, [pc, #28]	; (8003354 <MX_TIM2_Init+0xac>)
 8003338:	f004 fdd0 	bl	8007edc <HAL_TIM_PWM_ConfigChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003342:	f000 fc9d 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003346:	4803      	ldr	r0, [pc, #12]	; (8003354 <MX_TIM2_Init+0xac>)
 8003348:	f000 ff48 	bl	80041dc <HAL_TIM_MspPostInit>

}
 800334c:	bf00      	nop
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20014454 	.word	0x20014454

08003358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	2224      	movs	r2, #36	; 0x24
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f005 fe8d 	bl	8009086 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <MX_TIM3_Init+0xa0>)
 8003376:	4a21      	ldr	r2, [pc, #132]	; (80033fc <MX_TIM3_Init+0xa4>)
 8003378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <MX_TIM3_Init+0xa0>)
 800337c:	2200      	movs	r2, #0
 800337e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <MX_TIM3_Init+0xa0>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <MX_TIM3_Init+0xa0>)
 8003388:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800338c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <MX_TIM3_Init+0xa0>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <MX_TIM3_Init+0xa0>)
 8003396:	2200      	movs	r2, #0
 8003398:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800339a:	2303      	movs	r3, #3
 800339c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033a2:	2301      	movs	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033b2:	2301      	movs	r3, #1
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	4619      	mov	r1, r3
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <MX_TIM3_Init+0xa0>)
 80033c6:	f004 fb71 	bl	8007aac <HAL_TIM_Encoder_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80033d0:	f000 fc56 	bl	8003c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4805      	ldr	r0, [pc, #20]	; (80033f8 <MX_TIM3_Init+0xa0>)
 80033e2:	f005 f8df 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80033ec:	f000 fc48 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033f0:	bf00      	nop
 80033f2:	3730      	adds	r7, #48	; 0x30
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	2001426c 	.word	0x2001426c
 80033fc:	40000400 	.word	0x40000400

08003400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003406:	f107 0320 	add.w	r3, r7, #32
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	611a      	str	r2, [r3, #16]
 800341e:	615a      	str	r2, [r3, #20]
 8003420:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <MX_TIM4_Init+0xc0>)
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <MX_TIM4_Init+0xc4>)
 8003426:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <MX_TIM4_Init+0xc0>)
 800342a:	2202      	movs	r2, #2
 800342c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <MX_TIM4_Init+0xc0>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <MX_TIM4_Init+0xc0>)
 8003436:	f240 32e7 	movw	r2, #999	; 0x3e7
 800343a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <MX_TIM4_Init+0xc0>)
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <MX_TIM4_Init+0xc0>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003448:	481d      	ldr	r0, [pc, #116]	; (80034c0 <MX_TIM4_Init+0xc0>)
 800344a:	f004 fa6d 	bl	8007928 <HAL_TIM_PWM_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003454:	f000 fc14 	bl	8003c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003460:	f107 0320 	add.w	r3, r7, #32
 8003464:	4619      	mov	r1, r3
 8003466:	4816      	ldr	r0, [pc, #88]	; (80034c0 <MX_TIM4_Init+0xc0>)
 8003468:	f005 f89c 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003472:	f000 fc05 	bl	8003c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003476:	2360      	movs	r3, #96	; 0x60
 8003478:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	2200      	movs	r2, #0
 800348a:	4619      	mov	r1, r3
 800348c:	480c      	ldr	r0, [pc, #48]	; (80034c0 <MX_TIM4_Init+0xc0>)
 800348e:	f004 fd25 	bl	8007edc <HAL_TIM_PWM_ConfigChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003498:	f000 fbf2 	bl	8003c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	2204      	movs	r2, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4807      	ldr	r0, [pc, #28]	; (80034c0 <MX_TIM4_Init+0xc0>)
 80034a4:	f004 fd1a 	bl	8007edc <HAL_TIM_PWM_ConfigChannel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80034ae:	f000 fbe7 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80034b2:	4803      	ldr	r0, [pc, #12]	; (80034c0 <MX_TIM4_Init+0xc0>)
 80034b4:	f000 fe92 	bl	80041dc <HAL_TIM_MspPostInit>

}
 80034b8:	bf00      	nop
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20014198 	.word	0x20014198
 80034c4:	40000800 	.word	0x40000800

080034c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ce:	463b      	mov	r3, r7
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <MX_TIM6_Init+0x64>)
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <MX_TIM6_Init+0x68>)
 80034da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <MX_TIM6_Init+0x64>)
 80034de:	2204      	movs	r2, #4
 80034e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <MX_TIM6_Init+0x64>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 80034e8:	4b10      	ldr	r3, [pc, #64]	; (800352c <MX_TIM6_Init+0x64>)
 80034ea:	f244 129f 	movw	r2, #16799	; 0x419f
 80034ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <MX_TIM6_Init+0x64>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <MX_TIM6_Init+0x64>)
 80034f8:	f004 f99c 	bl	8007834 <HAL_TIM_Base_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003502:	f000 fbbd 	bl	8003c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800350e:	463b      	mov	r3, r7
 8003510:	4619      	mov	r1, r3
 8003512:	4806      	ldr	r0, [pc, #24]	; (800352c <MX_TIM6_Init+0x64>)
 8003514:	f005 f846 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800351e:	f000 fbaf 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20014394 	.word	0x20014394
 8003530:	40001000 	.word	0x40001000

08003534 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <MX_TIM10_Init+0x40>)
 800353a:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <MX_TIM10_Init+0x44>)
 800353c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <MX_TIM10_Init+0x40>)
 8003540:	2204      	movs	r2, #4
 8003542:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <MX_TIM10_Init+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <MX_TIM10_Init+0x40>)
 800354c:	f248 323f 	movw	r2, #33599	; 0x833f
 8003550:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <MX_TIM10_Init+0x40>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_TIM10_Init+0x40>)
 800355a:	2200      	movs	r2, #0
 800355c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800355e:	4805      	ldr	r0, [pc, #20]	; (8003574 <MX_TIM10_Init+0x40>)
 8003560:	f004 f968 	bl	8007834 <HAL_TIM_Base_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800356a:	f000 fb89 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2001422c 	.word	0x2001422c
 8003578:	40014400 	.word	0x40014400

0800357c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <MX_TIM11_Init+0x40>)
 8003582:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <MX_TIM11_Init+0x44>)
 8003584:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <MX_TIM11_Init+0x40>)
 8003588:	2204      	movs	r2, #4
 800358a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <MX_TIM11_Init+0x40>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <MX_TIM11_Init+0x40>)
 8003594:	f248 323f 	movw	r2, #33599	; 0x833f
 8003598:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <MX_TIM11_Init+0x40>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <MX_TIM11_Init+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80035a6:	4805      	ldr	r0, [pc, #20]	; (80035bc <MX_TIM11_Init+0x40>)
 80035a8:	f004 f944 	bl	8007834 <HAL_TIM_Base_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80035b2:	f000 fb65 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200142f4 	.word	0x200142f4
 80035c0:	40014800 	.word	0x40014800

080035c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <MX_TIM14_Init+0x40>)
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <MX_TIM14_Init+0x44>)
 80035cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <MX_TIM14_Init+0x40>)
 80035d0:	2204      	movs	r2, #4
 80035d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <MX_TIM14_Init+0x40>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <MX_TIM14_Init+0x40>)
 80035dc:	f248 323f 	movw	r2, #33599	; 0x833f
 80035e0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <MX_TIM14_Init+0x40>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <MX_TIM14_Init+0x40>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <MX_TIM14_Init+0x40>)
 80035f0:	f004 f920 	bl	8007834 <HAL_TIM_Base_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80035fa:	f000 fb41 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20014494 	.word	0x20014494
 8003608:	40002000 	.word	0x40002000

0800360c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <MX_USART6_UART_Init+0x50>)
 8003614:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 8003618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800361c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 8003632:	220c      	movs	r2, #12
 8003634:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_USART6_UART_Init+0x4c>)
 8003644:	f005 f83e 	bl	80086c4 <HAL_UART_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800364e:	f000 fb17 	bl	8003c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20014414 	.word	0x20014414
 800365c:	40011400 	.word	0x40011400

08003660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <MX_DMA_Init+0x3c>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <MX_DMA_Init+0x3c>)
 8003670:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <MX_DMA_Init+0x3c>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003682:	2200      	movs	r2, #0
 8003684:	2100      	movs	r1, #0
 8003686:	2038      	movs	r0, #56	; 0x38
 8003688:	f001 fd31 	bl	80050ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800368c:	2038      	movs	r0, #56	; 0x38
 800368e:	f001 fd4a 	bl	8005126 <HAL_NVIC_EnableIRQ>

}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800

080036a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	609a      	str	r2, [r3, #8]
 80036b2:	60da      	str	r2, [r3, #12]
 80036b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	4b60      	ldr	r3, [pc, #384]	; (800383c <MX_GPIO_Init+0x19c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a5f      	ldr	r2, [pc, #380]	; (800383c <MX_GPIO_Init+0x19c>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <MX_GPIO_Init+0x19c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4b59      	ldr	r3, [pc, #356]	; (800383c <MX_GPIO_Init+0x19c>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a58      	ldr	r2, [pc, #352]	; (800383c <MX_GPIO_Init+0x19c>)
 80036dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <MX_GPIO_Init+0x19c>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	4b52      	ldr	r3, [pc, #328]	; (800383c <MX_GPIO_Init+0x19c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a51      	ldr	r2, [pc, #324]	; (800383c <MX_GPIO_Init+0x19c>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b4f      	ldr	r3, [pc, #316]	; (800383c <MX_GPIO_Init+0x19c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	4b4b      	ldr	r3, [pc, #300]	; (800383c <MX_GPIO_Init+0x19c>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a4a      	ldr	r2, [pc, #296]	; (800383c <MX_GPIO_Init+0x19c>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b48      	ldr	r3, [pc, #288]	; (800383c <MX_GPIO_Init+0x19c>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4b44      	ldr	r3, [pc, #272]	; (800383c <MX_GPIO_Init+0x19c>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a43      	ldr	r2, [pc, #268]	; (800383c <MX_GPIO_Init+0x19c>)
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <MX_GPIO_Init+0x19c>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003742:	2200      	movs	r2, #0
 8003744:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8003748:	483d      	ldr	r0, [pc, #244]	; (8003840 <MX_GPIO_Init+0x1a0>)
 800374a:	f002 fd6d 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003754:	483b      	ldr	r0, [pc, #236]	; (8003844 <MX_GPIO_Init+0x1a4>)
 8003756:	f002 fd67 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800375a:	2200      	movs	r2, #0
 800375c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003760:	4839      	ldr	r0, [pc, #228]	; (8003848 <MX_GPIO_Init+0x1a8>)
 8003762:	f002 fd61 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8003766:	2200      	movs	r2, #0
 8003768:	2104      	movs	r1, #4
 800376a:	4838      	ldr	r0, [pc, #224]	; (800384c <MX_GPIO_Init+0x1ac>)
 800376c:	f002 fd5c 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8003770:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003776:	2301      	movs	r3, #1
 8003778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	4619      	mov	r1, r3
 8003788:	482d      	ldr	r0, [pc, #180]	; (8003840 <MX_GPIO_Init+0x1a0>)
 800378a:	f002 fb9b 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 800378e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003792:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4619      	mov	r1, r3
 80037a2:	4827      	ldr	r0, [pc, #156]	; (8003840 <MX_GPIO_Init+0x1a0>)
 80037a4:	f002 fb8e 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80037a8:	f640 0304 	movw	r3, #2052	; 0x804
 80037ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b6:	f107 0314 	add.w	r3, r7, #20
 80037ba:	4619      	mov	r1, r3
 80037bc:	4821      	ldr	r0, [pc, #132]	; (8003844 <MX_GPIO_Init+0x1a4>)
 80037be:	f002 fb81 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 80037c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80037c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2300      	movs	r3, #0
 80037d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	4619      	mov	r1, r3
 80037da:	481a      	ldr	r0, [pc, #104]	; (8003844 <MX_GPIO_Init+0x1a4>)
 80037dc:	f002 fb72 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80037e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e6:	2301      	movs	r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	4619      	mov	r1, r3
 80037f8:	4813      	ldr	r0, [pc, #76]	; (8003848 <MX_GPIO_Init+0x1a8>)
 80037fa:	f002 fb63 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 80037fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	4619      	mov	r1, r3
 8003812:	480d      	ldr	r0, [pc, #52]	; (8003848 <MX_GPIO_Init+0x1a8>)
 8003814:	f002 fb56 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8003818:	2304      	movs	r3, #4
 800381a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381c:	2301      	movs	r3, #1
 800381e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003824:	2300      	movs	r3, #0
 8003826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4619      	mov	r1, r3
 800382e:	4807      	ldr	r0, [pc, #28]	; (800384c <MX_GPIO_Init+0x1ac>)
 8003830:	f002 fb48 	bl	8005ec4 <HAL_GPIO_Init>

}
 8003834:	bf00      	nop
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	40020800 	.word	0x40020800
 8003844:	40020400 	.word	0x40020400
 8003848:	40020000 	.word	0x40020000
 800384c:	40020c00 	.word	0x40020c00

08003850 <read_sidesens>:

/* USER CODE BEGIN 4 */

uint8_t read_sidesens()
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
	uint8_t _subsens;

	_subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 8003856:	2104      	movs	r1, #4
 8003858:	480e      	ldr	r0, [pc, #56]	; (8003894 <read_sidesens+0x44>)
 800385a:	f002 fccd 	bl	80061f8 <HAL_GPIO_ReadPin>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	71fb      	strb	r3, [r7, #7]
	_subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 800386c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003870:	4808      	ldr	r0, [pc, #32]	; (8003894 <read_sidesens+0x44>)
 8003872:	f002 fcc1 	bl	80061f8 <HAL_GPIO_ReadPin>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <read_sidesens+0x30>
 800387c:	2302      	movs	r3, #2
 800387e:	e000      	b.n	8003882 <read_sidesens+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	b2da      	uxtb	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	4413      	add	r3, r2
 8003888:	71fb      	strb	r3, [r7, #7]

	return _subsens;
 800388a:	79fb      	ldrb	r3, [r7, #7]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40020400 	.word	0x40020400

08003898 <sensor_initialize>:

void sensor_initialize() {
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
	sensgettime = 0;
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <sensor_initialize+0x2c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
 80038a2:	2210      	movs	r2, #16
 80038a4:	4908      	ldr	r1, [pc, #32]	; (80038c8 <sensor_initialize+0x30>)
 80038a6:	4809      	ldr	r0, [pc, #36]	; (80038cc <sensor_initialize+0x34>)
 80038a8:	f000 ff56 	bl	8004758 <HAL_ADC_Start_DMA>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <sensor_initialize+0x1e>
	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
		Error_Handler();
 80038b2:	f000 f9e5 	bl	8003c80 <Error_Handler>
	}
	HAL_Delay(1000);
 80038b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ba:	f000 fee7 	bl	800468c <HAL_Delay>
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000298 	.word	0x20000298
 80038c8:	2000029c 	.word	0x2000029c
 80038cc:	200142ac 	.word	0x200142ac

080038d0 <sensor_finalize>:

void sensor_finalize() {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <sensor_finalize+0x10>)
 80038d6:	f001 f831 	bl	800493c <HAL_ADC_Stop_DMA>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	200142ac 	.word	0x200142ac

080038e4 <running_initialize>:

void running_initialize()
{
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
#if USE_LED
	set_led(0b11, 0b00);
 80038ea:	2100      	movs	r1, #0
 80038ec:	2003      	movs	r0, #3
 80038ee:	f7fd fcc9 	bl	8001284 <set_led>
#endif
#if USE_FLASH
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	71fb      	strb	r3, [r7, #7]
 80038f6:	e015      	b.n	8003924 <running_initialize+0x40>
		analogmax[i] = flash_buffer.analogmax[i];
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	79fa      	ldrb	r2, [r7, #7]
 80038fc:	4960      	ldr	r1, [pc, #384]	; (8003a80 <running_initialize+0x19c>)
 80038fe:	330c      	adds	r3, #12
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	440b      	add	r3, r1
 8003904:	8859      	ldrh	r1, [r3, #2]
 8003906:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <running_initialize+0x1a0>)
 8003908:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		analogmin[i] = flash_buffer.analogmin[i];
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	79fa      	ldrb	r2, [r7, #7]
 8003910:	495b      	ldr	r1, [pc, #364]	; (8003a80 <running_initialize+0x19c>)
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	440b      	add	r3, r1
 8003916:	8859      	ldrh	r1, [r3, #2]
 8003918:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <running_initialize+0x1a4>)
 800391a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	3301      	adds	r3, #1
 8003922:	71fb      	strb	r3, [r7, #7]
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	2b0b      	cmp	r3, #11
 8003928:	d9e6      	bls.n	80038f8 <running_initialize+0x14>
	}
	if(playmode == search)
 800392a:	4b58      	ldr	r3, [pc, #352]	; (8003a8c <running_initialize+0x1a8>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10a      	bne.n	8003948 <running_initialize+0x64>
	{
		for(int i = 0; i <= COURSE_STATE_SIZE; i++)
 8003932:	2300      	movs	r3, #0
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	e002      	b.n	800393e <running_initialize+0x5a>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f242 7210 	movw	r2, #10000	; 0x2710
 8003944:	4293      	cmp	r3, r2
 8003946:	ddf7      	ble.n	8003938 <running_initialize+0x54>
			// flash_buffer.igz[i] = 0;
			// flash_buffer.len[i] = 0;
		}
	}
#endif
	HAL_Delay(3000);
 8003948:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800394c:	f000 fe9e 	bl	800468c <HAL_Delay>
	pid_initialize();
 8003950:	f7fe f9da 	bl	8001d08 <pid_initialize>
	sensor_initialize();
 8003954:	f7ff ffa0 	bl	8003898 <sensor_initialize>
#if D_ENCODER
	s_encoder_l = 0;
 8003958:	4b4d      	ldr	r3, [pc, #308]	; (8003a90 <running_initialize+0x1ac>)
 800395a:	2200      	movs	r2, #0
 800395c:	801a      	strh	r2, [r3, #0]
	s_encoder_r = 0;
 800395e:	4b4d      	ldr	r3, [pc, #308]	; (8003a94 <running_initialize+0x1b0>)
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]
	left_length = 0;
 8003964:	4a4c      	ldr	r2, [pc, #304]	; (8003a98 <running_initialize+0x1b4>)
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	f04f 0400 	mov.w	r4, #0
 800396e:	e9c2 3400 	strd	r3, r4, [r2]
	right_length = 0;
 8003972:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <running_initialize+0x1b8>)
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	e9c2 3400 	strd	r3, r4, [r2]
#endif
#if USE_VELOCITY_CONTROL && D_VELOCITY_CONTROL_TIMER
	stoptime = 0;
#endif
	sampling_time = 0;
 8003980:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <running_initialize+0x1bc>)
 8003982:	2200      	movs	r2, #0
 8003984:	801a      	strh	r2, [r3, #0]
  course_length = 0;
 8003986:	4a47      	ldr	r2, [pc, #284]	; (8003aa4 <running_initialize+0x1c0>)
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	e9c2 3400 	strd	r3, r4, [r2]
	m_velocity = 0;
 8003994:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <running_initialize+0x1c4>)
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	f04f 0400 	mov.w	r4, #0
 800399e:	e9c2 3400 	strd	r3, r4, [r2]
	mm_length = 0;
 80039a2:	4a42      	ldr	r2, [pc, #264]	; (8003aac <running_initialize+0x1c8>)
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	f04f 0400 	mov.w	r4, #0
 80039ac:	e9c2 3400 	strd	r3, r4, [r2]
	my_gyro.z = 0;
 80039b0:	4a3f      	ldr	r2, [pc, #252]	; (8003ab0 <running_initialize+0x1cc>)
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f04f 0400 	mov.w	r4, #0
 80039ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
	before_igz = 0;
 80039be:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <running_initialize+0x1d0>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]
	timtim1 = 0;
 80039c4:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <running_initialize+0x1d4>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
	timtim2 = 0;
 80039ca:	4b3c      	ldr	r3, [pc, #240]	; (8003abc <running_initialize+0x1d8>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
	encoder_initialize();
 80039d0:	f000 f8e4 	bl	8003b9c <encoder_initialize>
	printf("Encoder_Start\r\n");
 80039d4:	483a      	ldr	r0, [pc, #232]	; (8003ac0 <running_initialize+0x1dc>)
 80039d6:	f006 fa11 	bl	8009dfc <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80039da:	213c      	movs	r1, #60	; 0x3c
 80039dc:	4839      	ldr	r0, [pc, #228]	; (8003ac4 <running_initialize+0x1e0>)
 80039de:	f004 f8f7 	bl	8007bd0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80039e2:	213c      	movs	r1, #60	; 0x3c
 80039e4:	4838      	ldr	r0, [pc, #224]	; (8003ac8 <running_initialize+0x1e4>)
 80039e6:	f004 f8f3 	bl	8007bd0 <HAL_TIM_Encoder_Start>
	subsensbuf = 0;
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <running_initialize+0x1e8>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
	marker = 0;
 80039f0:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <running_initialize+0x1ec>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <running_initialize+0x1f0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <running_initialize+0x1f4>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 8003a02:	4b36      	ldr	r3, [pc, #216]	; (8003adc <running_initialize+0x1f8>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
	course_state_time = 0;
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <running_initialize+0x1fc>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
#endif
	printf("SideSens Timer\r\n");
 8003a0e:	4835      	ldr	r0, [pc, #212]	; (8003ae4 <running_initialize+0x200>)
 8003a10:	f006 f9f4 	bl	8009dfc <puts>
	HAL_TIM_Base_Start_IT(&htim14);
 8003a14:	4834      	ldr	r0, [pc, #208]	; (8003ae8 <running_initialize+0x204>)
 8003a16:	f003 ff38 	bl	800788a <HAL_TIM_Base_Start_IT>
	printf("Encoder Timer\r\n");
 8003a1a:	4834      	ldr	r0, [pc, #208]	; (8003aec <running_initialize+0x208>)
 8003a1c:	f006 f9ee 	bl	8009dfc <puts>
	HAL_TIM_Base_Start_IT(&htim10);
 8003a20:	4833      	ldr	r0, [pc, #204]	; (8003af0 <running_initialize+0x20c>)
 8003a22:	f003 ff32 	bl	800788a <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <running_initialize+0x210>)
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	f04f 0400 	mov.w	r4, #0
 8003a30:	e9c2 3400 	strd	r3, r4, [r2]
	rightmotor = 0;
 8003a34:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <running_initialize+0x214>)
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	e9c2 3400 	strd	r3, r4, [r2]
	beforedirection = 0;
 8003a42:	4b2e      	ldr	r3, [pc, #184]	; (8003afc <running_initialize+0x218>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
	sdirection = 0;
 8003a48:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <running_initialize+0x21c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
	printf("PWM_Start\r\n");
 8003a4e:	482d      	ldr	r0, [pc, #180]	; (8003b04 <running_initialize+0x220>)
 8003a50:	f006 f9d4 	bl	8009dfc <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8003a54:	2100      	movs	r1, #0
 8003a56:	482c      	ldr	r0, [pc, #176]	; (8003b08 <running_initialize+0x224>)
 8003a58:	f003 ff92 	bl	8007980 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003a5c:	2104      	movs	r1, #4
 8003a5e:	482a      	ldr	r0, [pc, #168]	; (8003b08 <running_initialize+0x224>)
 8003a60:	f003 ff8e 	bl	8007980 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 8003a64:	4829      	ldr	r0, [pc, #164]	; (8003b0c <running_initialize+0x228>)
 8003a66:	f006 f9c9 	bl	8009dfc <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8003a6a:	4829      	ldr	r0, [pc, #164]	; (8003b10 <running_initialize+0x22c>)
 8003a6c:	f003 ff0d 	bl	800788a <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <running_initialize+0x230>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
#endif
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd90      	pop	{r4, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200003d0 	.word	0x200003d0
 8003a84:	20013f48 	.word	0x20013f48
 8003a88:	20000304 	.word	0x20000304
 8003a8c:	200002c8 	.word	0x200002c8
 8003a90:	20000328 	.word	0x20000328
 8003a94:	200003b8 	.word	0x200003b8
 8003a98:	20000360 	.word	0x20000360
 8003a9c:	20000340 	.word	0x20000340
 8003aa0:	20000278 	.word	0x20000278
 8003aa4:	20000240 	.word	0x20000240
 8003aa8:	200002d8 	.word	0x200002d8
 8003aac:	20013e40 	.word	0x20013e40
 8003ab0:	20013f78 	.word	0x20013f78
 8003ab4:	20000322 	.word	0x20000322
 8003ab8:	20000374 	.word	0x20000374
 8003abc:	20000250 	.word	0x20000250
 8003ac0:	0800d7cc 	.word	0x0800d7cc
 8003ac4:	200143d4 	.word	0x200143d4
 8003ac8:	2001426c 	.word	0x2001426c
 8003acc:	20000320 	.word	0x20000320
 8003ad0:	200003c9 	.word	0x200003c9
 8003ad4:	20000326 	.word	0x20000326
 8003ad8:	20000358 	.word	0x20000358
 8003adc:	20013f98 	.word	0x20013f98
 8003ae0:	20013f9a 	.word	0x20013f9a
 8003ae4:	0800d7dc 	.word	0x0800d7dc
 8003ae8:	20014494 	.word	0x20014494
 8003aec:	0800d7ec 	.word	0x0800d7ec
 8003af0:	2001422c 	.word	0x2001422c
 8003af4:	200002f0 	.word	0x200002f0
 8003af8:	200002e0 	.word	0x200002e0
 8003afc:	20013f70 	.word	0x20013f70
 8003b00:	200002bc 	.word	0x200002bc
 8003b04:	0800d7fc 	.word	0x0800d7fc
 8003b08:	20014198 	.word	0x20014198
 8003b0c:	0800d808 	.word	0x0800d808
 8003b10:	20014394 	.word	0x20014394
 8003b14:	20013e52 	.word	0x20013e52

08003b18 <running_finalize>:

void running_finalize() {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	motorenable = 0;
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <running_finalize+0x58>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 8003b22:	f7ff fed5 	bl	80038d0 <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 8003b26:	4813      	ldr	r0, [pc, #76]	; (8003b74 <running_finalize+0x5c>)
 8003b28:	f003 fed3 	bl	80078d2 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	4812      	ldr	r0, [pc, #72]	; (8003b78 <running_finalize+0x60>)
 8003b30:	f003 ff64 	bl	80079fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003b34:	2100      	movs	r1, #0
 8003b36:	4810      	ldr	r0, [pc, #64]	; (8003b78 <running_finalize+0x60>)
 8003b38:	f003 ff60 	bl	80079fc <HAL_TIM_PWM_Stop>
	encoder_finalize();
 8003b3c:	f000 f87e 	bl	8003c3c <encoder_finalize>
	HAL_TIM_Base_Stop_IT(&htim10);
 8003b40:	480e      	ldr	r0, [pc, #56]	; (8003b7c <running_finalize+0x64>)
 8003b42:	f003 fec6 	bl	80078d2 <HAL_TIM_Base_Stop_IT>
	if(playmode == search)
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <running_finalize+0x68>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d10e      	bne.n	8003b6c <running_finalize+0x54>
	{
#if USE_FLASH
		printf(ESC_CYA);
 8003b4e:	480d      	ldr	r0, [pc, #52]	; (8003b84 <running_finalize+0x6c>)
 8003b50:	f006 f8e0 	bl	8009d14 <iprintf>
		printf("////////// WRITE FLASH ///////////\r\n");
 8003b54:	480c      	ldr	r0, [pc, #48]	; (8003b88 <running_finalize+0x70>)
 8003b56:	f006 f951 	bl	8009dfc <puts>
		printf(ESC_DEF);
 8003b5a:	480c      	ldr	r0, [pc, #48]	; (8003b8c <running_finalize+0x74>)
 8003b5c:	f006 f8da 	bl	8009d14 <iprintf>
		writeFlash(start_address, (uint8_t*) &flash_buffer,
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <running_finalize+0x78>)
 8003b62:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <running_finalize+0x7c>)
 8003b64:	490c      	ldr	r1, [pc, #48]	; (8003b98 <running_finalize+0x80>)
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd fd47 	bl	80015fa <writeFlash>
				sizeof(FlashBuffer));
#endif
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20013e52 	.word	0x20013e52
 8003b74:	20014394 	.word	0x20014394
 8003b78:	20014198 	.word	0x20014198
 8003b7c:	2001422c 	.word	0x2001422c
 8003b80:	200002c8 	.word	0x200002c8
 8003b84:	0800d810 	.word	0x0800d810
 8003b88:	0800d818 	.word	0x0800d818
 8003b8c:	0800d6b8 	.word	0x0800d6b8
 8003b90:	080e0000 	.word	0x080e0000
 8003b94:	000138b8 	.word	0x000138b8
 8003b98:	200003d0 	.word	0x200003d0

08003b9c <encoder_initialize>:

void encoder_initialize() {
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
#if USE_VELOCITY_CONTROL
#if VELOCITY_CONTROL_RELATIVE
	s_velocity_error = 0;
 8003ba2:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <encoder_initialize+0x7c>)
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	f04f 0400 	mov.w	r4, #0
 8003bac:	e9c2 3400 	strd	r3, r4, [r2]
#else
	s_velocity_error_l = 0;
	s_velocity_error_r = 0;
#endif
#if USE_FLASH
	if (rv == 0x01) {
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <encoder_initialize+0x80>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d11b      	bne.n	8003bf0 <encoder_initialize+0x54>
		s_velocity = 0;
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <encoder_initialize+0x84>)
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	f04f 0400 	mov.w	r4, #0
 8003bc2:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; COURSE_STATE_SIZE > i; i++) {
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	e00c      	b.n	8003be6 <encoder_initialize+0x4a>
#if !D_COURSE_SAVING
			flash_buffer.radius[i] = 65536;
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <encoder_initialize+0x88>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3307      	adds	r3, #7
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	441a      	add	r2, r3
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	4c13      	ldr	r4, [pc, #76]	; (8003c28 <encoder_initialize+0x8c>)
 8003bdc:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; COURSE_STATE_SIZE > i; i++) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3301      	adds	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f242 720f 	movw	r2, #9999	; 0x270f
 8003bec:	4293      	cmp	r3, r2
 8003bee:	dded      	ble.n	8003bcc <encoder_initialize+0x30>
		}
	}
#endif
#endif

	TIM1->CNT = ENCODER_MIDDLE;
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <encoder_initialize+0x90>)
 8003bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = ENCODER_MIDDLE;
 8003bf8:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <encoder_initialize+0x94>)
 8003bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003c00:	213c      	movs	r1, #60	; 0x3c
 8003c02:	480c      	ldr	r0, [pc, #48]	; (8003c34 <encoder_initialize+0x98>)
 8003c04:	f003 ffe4 	bl	8007bd0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003c08:	213c      	movs	r1, #60	; 0x3c
 8003c0a:	480b      	ldr	r0, [pc, #44]	; (8003c38 <encoder_initialize+0x9c>)
 8003c0c:	f003 ffe0 	bl	8007bd0 <HAL_TIM_Encoder_Start>
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd90      	pop	{r4, r7, pc}
 8003c18:	200002c0 	.word	0x200002c0
 8003c1c:	200003c8 	.word	0x200003c8
 8003c20:	20000398 	.word	0x20000398
 8003c24:	200003d0 	.word	0x200003d0
 8003c28:	40f00000 	.word	0x40f00000
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	200143d4 	.word	0x200143d4
 8003c38:	2001426c 	.word	0x2001426c

08003c3c <encoder_finalize>:

void encoder_finalize() {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8003c40:	213c      	movs	r1, #60	; 0x3c
 8003c42:	4804      	ldr	r0, [pc, #16]	; (8003c54 <encoder_finalize+0x18>)
 8003c44:	f003 fffb 	bl	8007c3e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8003c48:	213c      	movs	r1, #60	; 0x3c
 8003c4a:	4803      	ldr	r0, [pc, #12]	; (8003c58 <encoder_finalize+0x1c>)
 8003c4c:	f003 fff7 	bl	8007c3e <HAL_TIM_Encoder_Stop>
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	200143d4 	.word	0x200143d4
 8003c58:	2001426c 	.word	0x2001426c

08003c5c <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003c64:	1d39      	adds	r1, r7, #4
 8003c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4803      	ldr	r0, [pc, #12]	; (8003c7c <__io_putchar+0x20>)
 8003c6e:	f004 fd76 	bl	800875e <HAL_UART_Transmit>
	return ch;
 8003c72:	687b      	ldr	r3, [r7, #4]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20014414 	.word	0x20014414

08003c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003c86:	e7fe      	b.n	8003c86 <Error_Handler+0x6>

08003c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_MspInit+0x54>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_MspInit+0x54>)
 8003c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <HAL_MspInit+0x54>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_MspInit+0x54>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_MspInit+0x54>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_MspInit+0x54>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	210f      	movs	r1, #15
 8003cca:	f06f 0003 	mvn.w	r0, #3
 8003cce:	f001 fa0e 	bl	80050ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08c      	sub	sp, #48	; 0x30
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	f107 031c 	add.w	r3, r7, #28
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_ADC_MspInit+0x144>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	f040 808c 	bne.w	8003e1c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	4a46      	ldr	r2, [pc, #280]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6453      	str	r3, [r2, #68]	; 0x44
 8003d14:	4b44      	ldr	r3, [pc, #272]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4a3f      	ldr	r2, [pc, #252]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d30:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	4a31      	ldr	r2, [pc, #196]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	6313      	str	r3, [r2, #48]	; 0x30
 8003d68:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_ADC_MspInit+0x148>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003d74:	233f      	movs	r3, #63	; 0x3f
 8003d76:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d80:	f107 031c 	add.w	r3, r7, #28
 8003d84:	4619      	mov	r1, r3
 8003d86:	4829      	ldr	r0, [pc, #164]	; (8003e2c <HAL_ADC_MspInit+0x14c>)
 8003d88:	f002 f89c 	bl	8005ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003d8c:	23ff      	movs	r3, #255	; 0xff
 8003d8e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d90:	2303      	movs	r3, #3
 8003d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	f107 031c 	add.w	r3, r7, #28
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4824      	ldr	r0, [pc, #144]	; (8003e30 <HAL_ADC_MspInit+0x150>)
 8003da0:	f002 f890 	bl	8005ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003da4:	2303      	movs	r3, #3
 8003da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003da8:	2303      	movs	r3, #3
 8003daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	4619      	mov	r1, r3
 8003db6:	481f      	ldr	r0, [pc, #124]	; (8003e34 <HAL_ADC_MspInit+0x154>)
 8003db8:	f002 f884 	bl	8005ec4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_ADC_MspInit+0x15c>)
 8003dc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003dd4:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ddc:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003df4:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e00:	480d      	ldr	r0, [pc, #52]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003e02:	f001 f9ab 	bl	800515c <HAL_DMA_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003e0c:	f7ff ff38 	bl	8003c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_ADC_MspInit+0x158>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e1c:	bf00      	nop
 8003e1e:	3730      	adds	r7, #48	; 0x30
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40012000 	.word	0x40012000
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020000 	.word	0x40020000
 8003e34:	40020400 	.word	0x40020400
 8003e38:	20014334 	.word	0x20014334
 8003e3c:	40026410 	.word	0x40026410

08003e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <HAL_I2C_MspInit+0x84>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d12c      	bne.n	8003ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_I2C_MspInit+0x88>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_I2C_MspInit+0x88>)
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_I2C_MspInit+0x88>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e84:	2312      	movs	r3, #18
 8003e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e90:	2304      	movs	r3, #4
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	4619      	mov	r1, r3
 8003e9a:	480c      	ldr	r0, [pc, #48]	; (8003ecc <HAL_I2C_MspInit+0x8c>)
 8003e9c:	f002 f812 	bl	8005ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <HAL_I2C_MspInit+0x88>)
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <HAL_I2C_MspInit+0x88>)
 8003eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eae:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_I2C_MspInit+0x88>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ebc:	bf00      	nop
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40005400 	.word	0x40005400
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40020400 	.word	0x40020400

08003ed0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_SPI_MspInit+0x84>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d12c      	bne.n	8003f4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <HAL_SPI_MspInit+0x88>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_SPI_MspInit+0x88>)
 8003efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_SPI_MspInit+0x88>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <HAL_SPI_MspInit+0x88>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <HAL_SPI_MspInit+0x88>)
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_SPI_MspInit+0x88>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003f2a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f3c:	2305      	movs	r3, #5
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f40:	f107 0314 	add.w	r3, r7, #20
 8003f44:	4619      	mov	r1, r3
 8003f46:	4805      	ldr	r0, [pc, #20]	; (8003f5c <HAL_SPI_MspInit+0x8c>)
 8003f48:	f001 ffbc 	bl	8005ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003f4c:	bf00      	nop
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40003800 	.word	0x40003800
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40020400 	.word	0x40020400

08003f60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08c      	sub	sp, #48	; 0x30
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 031c 	add.w	r3, r7, #28
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a3a      	ldr	r2, [pc, #232]	; (8004068 <HAL_TIM_Encoder_MspInit+0x108>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d13d      	bne.n	8003ffe <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	4a38      	ldr	r2, [pc, #224]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6453      	str	r3, [r2, #68]	; 0x44
 8003f92:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	4b32      	ldr	r3, [pc, #200]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4a31      	ldr	r2, [pc, #196]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6313      	str	r3, [r2, #48]	; 0x30
 8003fae:	4b2f      	ldr	r3, [pc, #188]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8003fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd0:	f107 031c 	add.w	r3, r7, #28
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4826      	ldr	r0, [pc, #152]	; (8004070 <HAL_TIM_Encoder_MspInit+0x110>)
 8003fd8:	f001 ff74 	bl	8005ec4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	2019      	movs	r0, #25
 8003fe2:	f001 f884 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fe6:	2019      	movs	r0, #25
 8003fe8:	f001 f89d 	bl	8005126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003fec:	2200      	movs	r2, #0
 8003fee:	2100      	movs	r1, #0
 8003ff0:	201a      	movs	r0, #26
 8003ff2:	f001 f87c 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003ff6:	201a      	movs	r0, #26
 8003ff8:	f001 f895 	bl	8005126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ffc:	e030      	b.n	8004060 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_TIM_Encoder_MspInit+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d12b      	bne.n	8004060 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	6413      	str	r3, [r2, #64]	; 0x40
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	4a0f      	ldr	r2, [pc, #60]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	6313      	str	r3, [r2, #48]	; 0x30
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <HAL_TIM_Encoder_MspInit+0x10c>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8004040:	2330      	movs	r3, #48	; 0x30
 8004042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404c:	2300      	movs	r3, #0
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004050:	2302      	movs	r3, #2
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4619      	mov	r1, r3
 800405a:	4807      	ldr	r0, [pc, #28]	; (8004078 <HAL_TIM_Encoder_MspInit+0x118>)
 800405c:	f001 ff32 	bl	8005ec4 <HAL_GPIO_Init>
}
 8004060:	bf00      	nop
 8004062:	3730      	adds	r7, #48	; 0x30
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40010000 	.word	0x40010000
 800406c:	40023800 	.word	0x40023800
 8004070:	40020000 	.word	0x40020000
 8004074:	40000400 	.word	0x40000400
 8004078:	40020400 	.word	0x40020400

0800407c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d10e      	bne.n	80040ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_TIM_PWM_MspInit+0x64>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <HAL_TIM_PWM_MspInit+0x64>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6413      	str	r3, [r2, #64]	; 0x40
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_TIM_PWM_MspInit+0x64>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040aa:	e012      	b.n	80040d2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_TIM_PWM_MspInit+0x68>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10d      	bne.n	80040d2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_TIM_PWM_MspInit+0x64>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <HAL_TIM_PWM_MspInit+0x64>)
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_TIM_PWM_MspInit+0x64>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40000800 	.word	0x40000800

080040e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a34      	ldr	r2, [pc, #208]	; (80041c8 <HAL_TIM_Base_MspInit+0xe0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d116      	bne.n	8004128 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	4b33      	ldr	r3, [pc, #204]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a32      	ldr	r2, [pc, #200]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 8004104:	f043 0310 	orr.w	r3, r3, #16
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b30      	ldr	r3, [pc, #192]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004116:	2200      	movs	r2, #0
 8004118:	2100      	movs	r1, #0
 800411a:	2036      	movs	r0, #54	; 0x36
 800411c:	f000 ffe7 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004120:	2036      	movs	r0, #54	; 0x36
 8004122:	f001 f800 	bl	8005126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004126:	e04a      	b.n	80041be <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <HAL_TIM_Base_MspInit+0xe8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d116      	bne.n	8004160 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	4a24      	ldr	r2, [pc, #144]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 800413c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004140:	6453      	str	r3, [r2, #68]	; 0x44
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	2019      	movs	r0, #25
 8004154:	f000 ffcb 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004158:	2019      	movs	r0, #25
 800415a:	f000 ffe4 	bl	8005126 <HAL_NVIC_EnableIRQ>
}
 800415e:	e02e      	b.n	80041be <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_TIM_Base_MspInit+0xec>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d116      	bne.n	8004198 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	4a16      	ldr	r2, [pc, #88]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 8004174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004178:	6453      	str	r3, [r2, #68]	; 0x44
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004186:	2200      	movs	r2, #0
 8004188:	2100      	movs	r1, #0
 800418a:	201a      	movs	r0, #26
 800418c:	f000 ffaf 	bl	80050ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004190:	201a      	movs	r0, #26
 8004192:	f000 ffc8 	bl	8005126 <HAL_NVIC_EnableIRQ>
}
 8004196:	e012      	b.n	80041be <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <HAL_TIM_Base_MspInit+0xf0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10d      	bne.n	80041be <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_TIM_Base_MspInit+0xe4>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
}
 80041be:	bf00      	nop
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40001000 	.word	0x40001000
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800
 80041d8:	40002000 	.word	0x40002000

080041dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d11f      	bne.n	800423e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <HAL_TIM_MspPostInit+0xb0>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_TIM_MspPostInit+0xb0>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_TIM_MspPostInit+0xb0>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800421a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004220:	2302      	movs	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004228:	2300      	movs	r3, #0
 800422a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800422c:	2301      	movs	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004230:	f107 0314 	add.w	r3, r7, #20
 8004234:	4619      	mov	r1, r3
 8004236:	4816      	ldr	r0, [pc, #88]	; (8004290 <HAL_TIM_MspPostInit+0xb4>)
 8004238:	f001 fe44 	bl	8005ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800423c:	e022      	b.n	8004284 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a14      	ldr	r2, [pc, #80]	; (8004294 <HAL_TIM_MspPostInit+0xb8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d11d      	bne.n	8004284 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	4b0f      	ldr	r3, [pc, #60]	; (800428c <HAL_TIM_MspPostInit+0xb0>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	4a0e      	ldr	r2, [pc, #56]	; (800428c <HAL_TIM_MspPostInit+0xb0>)
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	6313      	str	r3, [r2, #48]	; 0x30
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <HAL_TIM_MspPostInit+0xb0>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8004264:	23c0      	movs	r3, #192	; 0xc0
 8004266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004268:	2302      	movs	r3, #2
 800426a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004274:	2302      	movs	r3, #2
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	4619      	mov	r1, r3
 800427e:	4806      	ldr	r0, [pc, #24]	; (8004298 <HAL_TIM_MspPostInit+0xbc>)
 8004280:	f001 fe20 	bl	8005ec4 <HAL_GPIO_Init>
}
 8004284:	bf00      	nop
 8004286:	3728      	adds	r7, #40	; 0x28
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	40020000 	.word	0x40020000
 8004294:	40000800 	.word	0x40000800
 8004298:	40020400 	.word	0x40020400

0800429c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a19      	ldr	r2, [pc, #100]	; (8004320 <HAL_UART_MspInit+0x84>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d12b      	bne.n	8004316 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <HAL_UART_MspInit+0x88>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	4a17      	ldr	r2, [pc, #92]	; (8004324 <HAL_UART_MspInit+0x88>)
 80042c8:	f043 0320 	orr.w	r3, r3, #32
 80042cc:	6453      	str	r3, [r2, #68]	; 0x44
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_UART_MspInit+0x88>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_UART_MspInit+0x88>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a10      	ldr	r2, [pc, #64]	; (8004324 <HAL_UART_MspInit+0x88>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_UART_MspInit+0x88>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f6:	23c0      	movs	r3, #192	; 0xc0
 80042f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fa:	2302      	movs	r3, #2
 80042fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004302:	2303      	movs	r3, #3
 8004304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004306:	2308      	movs	r3, #8
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	4619      	mov	r1, r3
 8004310:	4805      	ldr	r0, [pc, #20]	; (8004328 <HAL_UART_MspInit+0x8c>)
 8004312:	f001 fdd7 	bl	8005ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004316:	bf00      	nop
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40011400 	.word	0x40011400
 8004324:	40023800 	.word	0x40023800
 8004328:	40020800 	.word	0x40020800

0800432c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004330:	e7fe      	b.n	8004330 <NMI_Handler+0x4>

08004332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004336:	e7fe      	b.n	8004336 <HardFault_Handler+0x4>

08004338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800433c:	e7fe      	b.n	800433c <MemManage_Handler+0x4>

0800433e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004342:	e7fe      	b.n	8004342 <BusFault_Handler+0x4>

08004344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004348:	e7fe      	b.n	8004348 <UsageFault_Handler+0x4>

0800434a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004378:	f000 f968 	bl	800464c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800437c:	bf00      	nop
 800437e:	bd80      	pop	{r7, pc}

08004380 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004384:	4803      	ldr	r0, [pc, #12]	; (8004394 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004386:	f003 fca1 	bl	8007ccc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800438a:	4803      	ldr	r0, [pc, #12]	; (8004398 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800438c:	f003 fc9e 	bl	8007ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200143d4 	.word	0x200143d4
 8004398:	2001422c 	.word	0x2001422c

0800439c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043a0:	4803      	ldr	r0, [pc, #12]	; (80043b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80043a2:	f003 fc93 	bl	8007ccc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80043a6:	4803      	ldr	r0, [pc, #12]	; (80043b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80043a8:	f003 fc90 	bl	8007ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200143d4 	.word	0x200143d4
 80043b4:	200142f4 	.word	0x200142f4

080043b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043bc:	4802      	ldr	r0, [pc, #8]	; (80043c8 <TIM6_DAC_IRQHandler+0x10>)
 80043be:	f003 fc85 	bl	8007ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20014394 	.word	0x20014394

080043cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <DMA2_Stream0_IRQHandler+0x10>)
 80043d2:	f001 f839 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20014334 	.word	0x20014334

080043e0 <_read>:
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e00a      	b.n	8004408 <_read+0x28>
 80043f2:	f3af 8000 	nop.w
 80043f6:	4601      	mov	r1, r0
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	60ba      	str	r2, [r7, #8]
 80043fe:	b2ca      	uxtb	r2, r1
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	3301      	adds	r3, #1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	dbf0      	blt.n	80043f2 <_read+0x12>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <_write>:
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e009      	b.n	8004440 <_write+0x26>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	60ba      	str	r2, [r7, #8]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fc11 	bl	8003c5c <__io_putchar>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3301      	adds	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	dbf1      	blt.n	800442c <_write+0x12>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_close>:
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <_fstat>:
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	6039      	str	r1, [r7, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	2300      	movs	r3, #0
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <_isatty>:
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	2301      	movs	r3, #1
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <_lseek>:
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	2300      	movs	r3, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <_sbrk>:
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <_sbrk+0x5c>)
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <_sbrk+0x60>)
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <_sbrk+0x64>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <_sbrk+0x22>
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <_sbrk+0x64>)
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <_sbrk+0x68>)
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <_sbrk+0x64>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d207      	bcs.n	80044fc <_sbrk+0x40>
 80044ec:	f004 fd96 	bl	800901c <__errno>
 80044f0:	4603      	mov	r3, r0
 80044f2:	220c      	movs	r2, #12
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e009      	b.n	8004510 <_sbrk+0x54>
 80044fc:	4b08      	ldr	r3, [pc, #32]	; (8004520 <_sbrk+0x64>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <_sbrk+0x64>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	4a05      	ldr	r2, [pc, #20]	; (8004520 <_sbrk+0x64>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20020000 	.word	0x20020000
 800451c:	00000400 	.word	0x00000400
 8004520:	200001fc 	.word	0x200001fc
 8004524:	20014500 	.word	0x20014500

08004528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800452c:	4b08      	ldr	r3, [pc, #32]	; (8004550 <SystemInit+0x28>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <SystemInit+0x28>)
 8004534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <SystemInit+0x28>)
 800453e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004542:	609a      	str	r2, [r3, #8]
#endif
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <Reset_Handler>:
 8004554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800458c <LoopFillZerobss+0x14>
 8004558:	2100      	movs	r1, #0
 800455a:	e003      	b.n	8004564 <LoopCopyDataInit>

0800455c <CopyDataInit>:
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <LoopFillZerobss+0x18>)
 800455e:	585b      	ldr	r3, [r3, r1]
 8004560:	5043      	str	r3, [r0, r1]
 8004562:	3104      	adds	r1, #4

08004564 <LoopCopyDataInit>:
 8004564:	480b      	ldr	r0, [pc, #44]	; (8004594 <LoopFillZerobss+0x1c>)
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <LoopFillZerobss+0x20>)
 8004568:	1842      	adds	r2, r0, r1
 800456a:	429a      	cmp	r2, r3
 800456c:	d3f6      	bcc.n	800455c <CopyDataInit>
 800456e:	4a0b      	ldr	r2, [pc, #44]	; (800459c <LoopFillZerobss+0x24>)
 8004570:	e002      	b.n	8004578 <LoopFillZerobss>

08004572 <FillZerobss>:
 8004572:	2300      	movs	r3, #0
 8004574:	f842 3b04 	str.w	r3, [r2], #4

08004578 <LoopFillZerobss>:
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <LoopFillZerobss+0x28>)
 800457a:	429a      	cmp	r2, r3
 800457c:	d3f9      	bcc.n	8004572 <FillZerobss>
 800457e:	f7ff ffd3 	bl	8004528 <SystemInit>
 8004582:	f004 fd51 	bl	8009028 <__libc_init_array>
 8004586:	f7fe f99f 	bl	80028c8 <main>
 800458a:	4770      	bx	lr
 800458c:	20020000 	.word	0x20020000
 8004590:	0800db90 	.word	0x0800db90
 8004594:	20000000 	.word	0x20000000
 8004598:	200001dc 	.word	0x200001dc
 800459c:	200001e0 	.word	0x200001e0
 80045a0:	200144fc 	.word	0x200144fc

080045a4 <ADC_IRQHandler>:
 80045a4:	e7fe      	b.n	80045a4 <ADC_IRQHandler>
	...

080045a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_Init+0x40>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0d      	ldr	r2, [pc, #52]	; (80045e8 <HAL_Init+0x40>)
 80045b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_Init+0x40>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <HAL_Init+0x40>)
 80045be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_Init+0x40>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <HAL_Init+0x40>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d0:	2003      	movs	r0, #3
 80045d2:	f000 fd81 	bl	80050d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f000 f808 	bl	80045ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045dc:	f7ff fb54 	bl	8003c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40023c00 	.word	0x40023c00

080045ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_InitTick+0x54>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_InitTick+0x58>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004602:	fbb3 f3f1 	udiv	r3, r3, r1
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fd99 	bl	8005142 <HAL_SYSTICK_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e00e      	b.n	8004638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b0f      	cmp	r3, #15
 800461e:	d80a      	bhi.n	8004636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004620:	2200      	movs	r2, #0
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f000 fd61 	bl	80050ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800462c:	4a06      	ldr	r2, [pc, #24]	; (8004648 <HAL_InitTick+0x5c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000000 	.word	0x20000000
 8004644:	20000008 	.word	0x20000008
 8004648:	20000004 	.word	0x20000004

0800464c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_IncTick+0x20>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_IncTick+0x24>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4413      	add	r3, r2
 800465c:	4a04      	ldr	r2, [pc, #16]	; (8004670 <HAL_IncTick+0x24>)
 800465e:	6013      	str	r3, [r2, #0]
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000008 	.word	0x20000008
 8004670:	200144d4 	.word	0x200144d4

08004674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return uwTick;
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_GetTick+0x14>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	200144d4 	.word	0x200144d4

0800468c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff ffee 	bl	8004674 <HAL_GetTick>
 8004698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d005      	beq.n	80046b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_Delay+0x40>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046b2:	bf00      	nop
 80046b4:	f7ff ffde 	bl	8004674 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d8f7      	bhi.n	80046b4 <HAL_Delay+0x28>
  {
  }
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000008 	.word	0x20000008

080046d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e033      	b.n	800474e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff faf6 	bl	8003ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004716:	f023 0302 	bic.w	r3, r3, #2
 800471a:	f043 0202 	orr.w	r2, r3, #2
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa8a 	bl	8004c3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
 800473e:	e001      	b.n	8004744 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_ADC_Start_DMA+0x1e>
 8004772:	2302      	movs	r3, #2
 8004774:	e0cc      	b.n	8004910 <HAL_ADC_Start_DMA+0x1b8>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d018      	beq.n	80047be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800479c:	4b5e      	ldr	r3, [pc, #376]	; (8004918 <HAL_ADC_Start_DMA+0x1c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5e      	ldr	r2, [pc, #376]	; (800491c <HAL_ADC_Start_DMA+0x1c4>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0c9a      	lsrs	r2, r3, #18
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047b0:	e002      	b.n	80047b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f9      	bne.n	80047b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 80a0 	bne.w	800490e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d106      	bne.n	800481c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f023 0206 	bic.w	r2, r3, #6
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
 800481a:	e002      	b.n	8004822 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800482a:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <HAL_ADC_Start_DMA+0x1c8>)
 800482c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	4a3c      	ldr	r2, [pc, #240]	; (8004924 <HAL_ADC_Start_DMA+0x1cc>)
 8004834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	4a3b      	ldr	r2, [pc, #236]	; (8004928 <HAL_ADC_Start_DMA+0x1d0>)
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	4a3a      	ldr	r2, [pc, #232]	; (800492c <HAL_ADC_Start_DMA+0x1d4>)
 8004844:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800484e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800485e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800486e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	334c      	adds	r3, #76	; 0x4c
 800487a:	4619      	mov	r1, r3
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f000 fd1a 	bl	80052b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2b00      	cmp	r3, #0
 800488e:	d12a      	bne.n	80048e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <HAL_ADC_Start_DMA+0x1d8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d015      	beq.n	80048c6 <HAL_ADC_Start_DMA+0x16e>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a25      	ldr	r2, [pc, #148]	; (8004934 <HAL_ADC_Start_DMA+0x1dc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d105      	bne.n	80048b0 <HAL_ADC_Start_DMA+0x158>
 80048a4:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <HAL_ADC_Start_DMA+0x1c8>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a20      	ldr	r2, [pc, #128]	; (8004938 <HAL_ADC_Start_DMA+0x1e0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d129      	bne.n	800490e <HAL_ADC_Start_DMA+0x1b6>
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_ADC_Start_DMA+0x1c8>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d823      	bhi.n	800490e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d11c      	bne.n	800490e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	e013      	b.n	800490e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <HAL_ADC_Start_DMA+0x1d8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10e      	bne.n	800490e <HAL_ADC_Start_DMA+0x1b6>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d107      	bne.n	800490e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800490c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000000 	.word	0x20000000
 800491c:	431bde83 	.word	0x431bde83
 8004920:	40012300 	.word	0x40012300
 8004924:	08004e35 	.word	0x08004e35
 8004928:	08004eef 	.word	0x08004eef
 800492c:	08004f0b 	.word	0x08004f0b
 8004930:	40012000 	.word	0x40012000
 8004934:	40012100 	.word	0x40012100
 8004938:	40012200 	.word	0x40012200

0800493c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_ADC_Stop_DMA+0x1a>
 8004952:	2302      	movs	r3, #2
 8004954:	e038      	b.n	80049c8 <HAL_ADC_Stop_DMA+0x8c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d120      	bne.n	80049be <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800498a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fce9 	bl	8005368 <HAL_DMA_Abort>
 8004996:	4603      	mov	r3, r0
 8004998:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80049a8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x1c>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e105      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x228>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b09      	cmp	r3, #9
 8004a22:	d925      	bls.n	8004a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	3b1e      	subs	r3, #30
 8004a3a:	2207      	movs	r2, #7
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43da      	mvns	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	400a      	ands	r2, r1
 8004a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68d9      	ldr	r1, [r3, #12]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4403      	add	r3, r0
 8004a62:	3b1e      	subs	r3, #30
 8004a64:	409a      	lsls	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	60da      	str	r2, [r3, #12]
 8004a6e:	e022      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6919      	ldr	r1, [r3, #16]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	2207      	movs	r2, #7
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	400a      	ands	r2, r1
 8004a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6919      	ldr	r1, [r3, #16]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4403      	add	r3, r0
 8004aac:	409a      	lsls	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d824      	bhi.n	8004b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	3b05      	subs	r3, #5
 8004ad0:	221f      	movs	r2, #31
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	400a      	ands	r2, r1
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4618      	mov	r0, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	3b05      	subs	r3, #5
 8004afa:	fa00 f203 	lsl.w	r2, r0, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
 8004b06:	e04c      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d824      	bhi.n	8004b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	3b23      	subs	r3, #35	; 0x23
 8004b22:	221f      	movs	r2, #31
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	400a      	ands	r2, r1
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	3b23      	subs	r3, #35	; 0x23
 8004b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
 8004b58:	e023      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	3b41      	subs	r3, #65	; 0x41
 8004b6c:	221f      	movs	r2, #31
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43da      	mvns	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	400a      	ands	r2, r1
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	3b41      	subs	r3, #65	; 0x41
 8004b96:	fa00 f203 	lsl.w	r2, r0, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_ADC_ConfigChannel+0x234>)
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <HAL_ADC_ConfigChannel+0x238>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d109      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x1cc>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b12      	cmp	r3, #18
 8004bb6:	d105      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	; (8004c30 <HAL_ADC_ConfigChannel+0x238>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d123      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x21e>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d003      	beq.n	8004bde <HAL_ADC_ConfigChannel+0x1e6>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b11      	cmp	r3, #17
 8004bdc:	d11b      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d111      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_ADC_ConfigChannel+0x23c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <HAL_ADC_ConfigChannel+0x240>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	0c9a      	lsrs	r2, r3, #18
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c08:	e002      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f9      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40012300 	.word	0x40012300
 8004c30:	40012000 	.word	0x40012000
 8004c34:	20000000 	.word	0x20000000
 8004c38:	431bde83 	.word	0x431bde83

08004c3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c44:	4b79      	ldr	r3, [pc, #484]	; (8004e2c <ADC_Init+0x1f0>)
 8004c46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	021a      	lsls	r2, r3, #8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6899      	ldr	r1, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	4a58      	ldr	r2, [pc, #352]	; (8004e30 <ADC_Init+0x1f4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6899      	ldr	r1, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6899      	ldr	r1, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	e00f      	b.n	8004d3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0202 	bic.w	r2, r2, #2
 8004d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6899      	ldr	r1, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	7e1b      	ldrb	r3, [r3, #24]
 8004d54:	005a      	lsls	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	3b01      	subs	r3, #1
 8004d94:	035a      	lsls	r2, r3, #13
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	e007      	b.n	8004db0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	051a      	lsls	r2, r3, #20
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6899      	ldr	r1, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004df2:	025a      	lsls	r2, r3, #9
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6899      	ldr	r1, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	029a      	lsls	r2, r3, #10
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40012300 	.word	0x40012300
 8004e30:	0f000001 	.word	0x0f000001

08004e34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d13c      	bne.n	8004ec8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d12b      	bne.n	8004ec0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d127      	bne.n	8004ec0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d119      	bne.n	8004ec0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0220 	bic.w	r2, r2, #32
 8004e9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f043 0201 	orr.w	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7fc fad5 	bl	8001470 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ec6:	e00e      	b.n	8004ee6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fd85 	bl	80049e4 <HAL_ADC_ErrorCallback>
}
 8004eda:	e004      	b.n	8004ee6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fd67 	bl	80049d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2240      	movs	r2, #64	; 0x40
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	f043 0204 	orr.w	r2, r3, #4
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff fd5a 	bl	80049e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f54:	4013      	ands	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f6a:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <__NVIC_SetPriorityGrouping+0x44>)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	60d3      	str	r3, [r2, #12]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f84:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <__NVIC_GetPriorityGrouping+0x18>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	f003 0307 	and.w	r3, r3, #7
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	db0b      	blt.n	8004fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	f003 021f 	and.w	r2, r3, #31
 8004fb4:	4907      	ldr	r1, [pc, #28]	; (8004fd4 <__NVIC_EnableIRQ+0x38>)
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	e000e100 	.word	0xe000e100

08004fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db0a      	blt.n	8005002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	490c      	ldr	r1, [pc, #48]	; (8005024 <__NVIC_SetPriority+0x4c>)
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005000:	e00a      	b.n	8005018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4908      	ldr	r1, [pc, #32]	; (8005028 <__NVIC_SetPriority+0x50>)
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	3b04      	subs	r3, #4
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	440b      	add	r3, r1
 8005016:	761a      	strb	r2, [r3, #24]
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000e100 	.word	0xe000e100
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f1c3 0307 	rsb	r3, r3, #7
 8005046:	2b04      	cmp	r3, #4
 8005048:	bf28      	it	cs
 800504a:	2304      	movcs	r3, #4
 800504c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3304      	adds	r3, #4
 8005052:	2b06      	cmp	r3, #6
 8005054:	d902      	bls.n	800505c <NVIC_EncodePriority+0x30>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3b03      	subs	r3, #3
 800505a:	e000      	b.n	800505e <NVIC_EncodePriority+0x32>
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	401a      	ands	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005074:	f04f 31ff 	mov.w	r1, #4294967295
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	43d9      	mvns	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	4313      	orrs	r3, r2
         );
}
 8005086:	4618      	mov	r0, r3
 8005088:	3724      	adds	r7, #36	; 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050a4:	d301      	bcc.n	80050aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00f      	b.n	80050ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <SysTick_Config+0x40>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050b2:	210f      	movs	r1, #15
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	f7ff ff8e 	bl	8004fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <SysTick_Config+0x40>)
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050c2:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <SysTick_Config+0x40>)
 80050c4:	2207      	movs	r2, #7
 80050c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	e000e010 	.word	0xe000e010

080050d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff29 	bl	8004f38 <__NVIC_SetPriorityGrouping>
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	4603      	mov	r3, r0
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005100:	f7ff ff3e 	bl	8004f80 <__NVIC_GetPriorityGrouping>
 8005104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	6978      	ldr	r0, [r7, #20]
 800510c:	f7ff ff8e 	bl	800502c <NVIC_EncodePriority>
 8005110:	4602      	mov	r2, r0
 8005112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff ff5d 	bl	8004fd8 <__NVIC_SetPriority>
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	4603      	mov	r3, r0
 800512e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff ff31 	bl	8004f9c <__NVIC_EnableIRQ>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ffa2 	bl	8005094 <SysTick_Config>
 8005150:	4603      	mov	r3, r0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005168:	f7ff fa84 	bl	8004674 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e099      	b.n	80052ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005198:	e00f      	b.n	80051ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800519a:	f7ff fa6b 	bl	8004674 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b05      	cmp	r3, #5
 80051a6:	d908      	bls.n	80051ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2203      	movs	r2, #3
 80051b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e078      	b.n	80052ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e8      	bne.n	800519a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4b38      	ldr	r3, [pc, #224]	; (80052b4 <HAL_DMA_Init+0x158>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b04      	cmp	r3, #4
 8005212:	d107      	bne.n	8005224 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	4313      	orrs	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b04      	cmp	r3, #4
 800524c:	d117      	bne.n	800527e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fadf 	bl	8005824 <DMA_CheckFifoParam>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2240      	movs	r2, #64	; 0x40
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800527a:	2301      	movs	r3, #1
 800527c:	e016      	b.n	80052ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa96 	bl	80057b8 <DMA_CalcBaseAndBitshift>
 800528c:	4603      	mov	r3, r0
 800528e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	223f      	movs	r2, #63	; 0x3f
 8005296:	409a      	lsls	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	f010803f 	.word	0xf010803f

080052b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_DMA_Start_IT+0x26>
 80052da:	2302      	movs	r3, #2
 80052dc:	e040      	b.n	8005360 <HAL_DMA_Start_IT+0xa8>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d12f      	bne.n	8005352 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fa28 	bl	800575c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	223f      	movs	r2, #63	; 0x3f
 8005312:	409a      	lsls	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0216 	orr.w	r2, r2, #22
 8005326:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e005      	b.n	800535e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800535a:	2302      	movs	r3, #2
 800535c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800535e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005376:	f7ff f97d 	bl	8004674 <HAL_GetTick>
 800537a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d008      	beq.n	800539a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e052      	b.n	8005440 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0216 	bic.w	r2, r2, #22
 80053a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <HAL_DMA_Abort+0x62>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0208 	bic.w	r2, r2, #8
 80053d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0201 	bic.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ea:	e013      	b.n	8005414 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053ec:	f7ff f942 	bl	8004674 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d90c      	bls.n	8005414 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2203      	movs	r2, #3
 800540c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e015      	b.n	8005440 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e4      	bne.n	80053ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005426:	223f      	movs	r2, #63	; 0x3f
 8005428:	409a      	lsls	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005454:	4b92      	ldr	r3, [pc, #584]	; (80056a0 <HAL_DMA_IRQHandler+0x258>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a92      	ldr	r2, [pc, #584]	; (80056a4 <HAL_DMA_IRQHandler+0x25c>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0a9b      	lsrs	r3, r3, #10
 8005460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	2208      	movs	r2, #8
 8005474:	409a      	lsls	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01a      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d013      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0204 	bic.w	r2, r2, #4
 800549a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a0:	2208      	movs	r2, #8
 80054a2:	409a      	lsls	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	f043 0201 	orr.w	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	2201      	movs	r2, #1
 80054ba:	409a      	lsls	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d012      	beq.n	80054ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	2201      	movs	r2, #1
 80054d8:	409a      	lsls	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f043 0202 	orr.w	r2, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	2204      	movs	r2, #4
 80054f0:	409a      	lsls	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550c:	2204      	movs	r2, #4
 800550e:	409a      	lsls	r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005524:	2210      	movs	r2, #16
 8005526:	409a      	lsls	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d043      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d03c      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	2210      	movs	r2, #16
 8005544:	409a      	lsls	r2, r3
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d018      	beq.n	800558a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d024      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
 8005576:	e01f      	b.n	80055b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
 8005588:	e016      	b.n	80055b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0208 	bic.w	r2, r2, #8
 80055a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	2220      	movs	r2, #32
 80055be:	409a      	lsls	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 808e 	beq.w	80056e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8086 	beq.w	80056e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	2220      	movs	r2, #32
 80055e0:	409a      	lsls	r2, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d136      	bne.n	8005660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0216 	bic.w	r2, r2, #22
 8005600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <HAL_DMA_IRQHandler+0x1da>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0208 	bic.w	r2, r2, #8
 8005630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	223f      	movs	r2, #63	; 0x3f
 8005638:	409a      	lsls	r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005652:	2b00      	cmp	r3, #0
 8005654:	d07d      	beq.n	8005752 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
        }
        return;
 800565e:	e078      	b.n	8005752 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01c      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005680:	2b00      	cmp	r3, #0
 8005682:	d030      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
 800568c:	e02b      	b.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d027      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	e022      	b.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
 80056a0:	20000000 	.word	0x20000000
 80056a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10f      	bne.n	80056d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0210 	bic.w	r2, r2, #16
 80056c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d032      	beq.n	8005754 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d022      	beq.n	8005740 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2205      	movs	r2, #5
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3301      	adds	r3, #1
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	429a      	cmp	r2, r3
 800571c:	d307      	bcc.n	800572e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f2      	bne.n	8005712 <HAL_DMA_IRQHandler+0x2ca>
 800572c:	e000      	b.n	8005730 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800572e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
 8005750:	e000      	b.n	8005754 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005752:	bf00      	nop
    }
  }
}
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop

0800575c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005778:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d108      	bne.n	800579c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800579a:	e007      	b.n	80057ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	3b10      	subs	r3, #16
 80057c8:	4a14      	ldr	r2, [pc, #80]	; (800581c <DMA_CalcBaseAndBitshift+0x64>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057d2:	4a13      	ldr	r2, [pc, #76]	; (8005820 <DMA_CalcBaseAndBitshift+0x68>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d909      	bls.n	80057fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	1d1a      	adds	r2, r3, #4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	659a      	str	r2, [r3, #88]	; 0x58
 80057f8:	e007      	b.n	800580a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	aaaaaaab 	.word	0xaaaaaaab
 8005820:	0800d854 	.word	0x0800d854

08005824 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d11f      	bne.n	800587e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b03      	cmp	r3, #3
 8005842:	d855      	bhi.n	80058f0 <DMA_CheckFifoParam+0xcc>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <DMA_CheckFifoParam+0x28>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	0800585d 	.word	0x0800585d
 8005850:	0800586f 	.word	0x0800586f
 8005854:	0800585d 	.word	0x0800585d
 8005858:	080058f1 	.word	0x080058f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d045      	beq.n	80058f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586c:	e042      	b.n	80058f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005876:	d13f      	bne.n	80058f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800587c:	e03c      	b.n	80058f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d121      	bne.n	80058cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d836      	bhi.n	80058fc <DMA_CheckFifoParam+0xd8>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <DMA_CheckFifoParam+0x70>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058a5 	.word	0x080058a5
 8005898:	080058ab 	.word	0x080058ab
 800589c:	080058a5 	.word	0x080058a5
 80058a0:	080058bd 	.word	0x080058bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
      break;
 80058a8:	e02f      	b.n	800590a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d024      	beq.n	8005900 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ba:	e021      	b.n	8005900 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058c4:	d11e      	bne.n	8005904 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058ca:	e01b      	b.n	8005904 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d902      	bls.n	80058d8 <DMA_CheckFifoParam+0xb4>
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d003      	beq.n	80058de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058d6:	e018      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e015      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00e      	beq.n	8005908 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
      break;
 80058ee:	e00b      	b.n	8005908 <DMA_CheckFifoParam+0xe4>
      break;
 80058f0:	bf00      	nop
 80058f2:	e00a      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      break;
 80058f4:	bf00      	nop
 80058f6:	e008      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      break;
 80058f8:	bf00      	nop
 80058fa:	e006      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      break;
 80058fc:	bf00      	nop
 80058fe:	e004      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      break;
 8005900:	bf00      	nop
 8005902:	e002      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      break;   
 8005904:	bf00      	nop
 8005906:	e000      	b.n	800590a <DMA_CheckFifoParam+0xe6>
      break;
 8005908:	bf00      	nop
    }
  } 
  
  return status; 
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <HAL_FLASH_Program+0xa0>)
 800592c:	7e1b      	ldrb	r3, [r3, #24]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_FLASH_Program+0x1e>
 8005932:	2302      	movs	r3, #2
 8005934:	e03b      	b.n	80059ae <HAL_FLASH_Program+0x96>
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_FLASH_Program+0xa0>)
 8005938:	2201      	movs	r2, #1
 800593a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800593c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005940:	f000 f870 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d12b      	bne.n	80059a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005954:	783b      	ldrb	r3, [r7, #0]
 8005956:	4619      	mov	r1, r3
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	f000 f919 	bl	8005b90 <FLASH_Program_Byte>
 800595e:	e016      	b.n	800598e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005966:	883b      	ldrh	r3, [r7, #0]
 8005968:	4619      	mov	r1, r3
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f000 f8ec 	bl	8005b48 <FLASH_Program_HalfWord>
 8005970:	e00d      	b.n	800598e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d105      	bne.n	8005984 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	68b8      	ldr	r0, [r7, #8]
 800597e:	f000 f8c1 	bl	8005b04 <FLASH_Program_Word>
 8005982:	e004      	b.n	800598e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005988:	68b8      	ldr	r0, [r7, #8]
 800598a:	f000 f88b 	bl	8005aa4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800598e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005992:	f000 f847 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005996:	4603      	mov	r3, r0
 8005998:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <HAL_FLASH_Program+0xa4>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_FLASH_Program+0xa4>)
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059a6:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_FLASH_Program+0xa0>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200144d8 	.word	0x200144d8
 80059bc:	40023c00 	.word	0x40023c00

080059c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da0b      	bge.n	80059ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <HAL_FLASH_Unlock+0x3c>)
 80059d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <HAL_FLASH_Unlock+0x40>)
 80059dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	da01      	bge.n	80059ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80059ea:	79fb      	ldrb	r3, [r7, #7]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40023c00 	.word	0x40023c00
 80059fc:	45670123 	.word	0x45670123
 8005a00:	cdef89ab 	.word	0xcdef89ab

08005a04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_FLASH_Lock+0x1c>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <HAL_FLASH_Lock+0x1c>)
 8005a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40023c00 	.word	0x40023c00

08005a24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <FLASH_WaitForLastOperation+0x78>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005a36:	f7fe fe1d 	bl	8004674 <HAL_GetTick>
 8005a3a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005a3c:	e010      	b.n	8005a60 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d00c      	beq.n	8005a60 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <FLASH_WaitForLastOperation+0x38>
 8005a4c:	f7fe fe12 	bl	8004674 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d201      	bcs.n	8005a60 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e019      	b.n	8005a94 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <FLASH_WaitForLastOperation+0x7c>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e8      	bne.n	8005a3e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <FLASH_WaitForLastOperation+0x7c>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <FLASH_WaitForLastOperation+0x7c>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <FLASH_WaitForLastOperation+0x7c>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005a8a:	f000 f8a3 	bl	8005bd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
  
}  
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	200144d8 	.word	0x200144d8
 8005aa0:	40023c00 	.word	0x40023c00

08005aa4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005aa4:	b490      	push	{r4, r7}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <FLASH_Program_DoubleWord+0x5c>)
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <FLASH_Program_DoubleWord+0x5c>)
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005abc:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <FLASH_Program_DoubleWord+0x5c>)
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	4a0f      	ldr	r2, [pc, #60]	; (8005b00 <FLASH_Program_DoubleWord+0x5c>)
 8005ac2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005ac6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <FLASH_Program_DoubleWord+0x5c>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <FLASH_Program_DoubleWord+0x5c>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005ada:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005ade:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	0013      	movs	r3, r2
 8005aec:	2400      	movs	r4, #0
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	3204      	adds	r2, #4
 8005af2:	6013      	str	r3, [r2, #0]
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc90      	pop	{r4, r7}
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40023c00 	.word	0x40023c00

08005b04 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <FLASH_Program_Word+0x40>)
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <FLASH_Program_Word+0x40>)
 8005b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <FLASH_Program_Word+0x40>)
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <FLASH_Program_Word+0x40>)
 8005b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <FLASH_Program_Word+0x40>)
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <FLASH_Program_Word+0x40>)
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40023c00 	.word	0x40023c00

08005b48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b54:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <FLASH_Program_HalfWord+0x44>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <FLASH_Program_HalfWord+0x44>)
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <FLASH_Program_HalfWord+0x44>)
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	4a09      	ldr	r2, [pc, #36]	; (8005b8c <FLASH_Program_HalfWord+0x44>)
 8005b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b6c:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <FLASH_Program_HalfWord+0x44>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	4a06      	ldr	r2, [pc, #24]	; (8005b8c <FLASH_Program_HalfWord+0x44>)
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	887a      	ldrh	r2, [r7, #2]
 8005b7c:	801a      	strh	r2, [r3, #0]
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40023c00 	.word	0x40023c00

08005b90 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <FLASH_Program_Byte+0x40>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	4a0b      	ldr	r2, [pc, #44]	; (8005bd0 <FLASH_Program_Byte+0x40>)
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <FLASH_Program_Byte+0x40>)
 8005baa:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <FLASH_Program_Byte+0x40>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <FLASH_Program_Byte+0x40>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	4a06      	ldr	r2, [pc, #24]	; (8005bd0 <FLASH_Program_Byte+0x40>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	701a      	strb	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40023c00 	.word	0x40023c00

08005bd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005bd8:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f043 0310 	orr.w	r3, r3, #16
 8005bec:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005bee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005bf0:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005bf6:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005c02:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f043 0308 	orr.w	r3, r3, #8
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c0c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005c0e:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005c10:	2220      	movs	r2, #32
 8005c12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005c14:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d008      	beq.n	8005c32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f043 0304 	orr.w	r3, r3, #4
 8005c28:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005c2c:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005c2e:	2240      	movs	r2, #64	; 0x40
 8005c30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005c32:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f043 0302 	orr.w	r3, r3, #2
 8005c46:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f043 0320 	orr.w	r3, r3, #32
 8005c64:	4a05      	ldr	r2, [pc, #20]	; (8005c7c <FLASH_SetErrorCode+0xa8>)
 8005c66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005c68:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <FLASH_SetErrorCode+0xa4>)
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	60da      	str	r2, [r3, #12]
  }
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40023c00 	.word	0x40023c00
 8005c7c:	200144d8 	.word	0x200144d8

08005c80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c92:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <HAL_FLASHEx_Erase+0xd8>)
 8005c94:	7e1b      	ldrb	r3, [r3, #24]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_FLASHEx_Erase+0x1e>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e058      	b.n	8005d50 <HAL_FLASHEx_Erase+0xd0>
 8005c9e:	4b2e      	ldr	r3, [pc, #184]	; (8005d58 <HAL_FLASHEx_Erase+0xd8>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ca4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ca8:	f7ff febc 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005cac:	4603      	mov	r3, r0
 8005cae:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d148      	bne.n	8005d48 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d115      	bne.n	8005cf2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f000 f844 	bl	8005d60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cdc:	f7ff fea2 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005ce4:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_FLASHEx_Erase+0xdc>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <HAL_FLASHEx_Erase+0xdc>)
 8005cea:	f023 0304 	bic.w	r3, r3, #4
 8005cee:	6113      	str	r3, [r2, #16]
 8005cf0:	e028      	b.n	8005d44 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	e01c      	b.n	8005d34 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	4619      	mov	r1, r3
 8005d02:	68b8      	ldr	r0, [r7, #8]
 8005d04:	f000 f850 	bl	8005da8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d0c:	f7ff fe8a 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <HAL_FLASHEx_Erase+0xdc>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <HAL_FLASHEx_Erase+0xdc>)
 8005d1a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005d1e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	601a      	str	r2, [r3, #0]
          break;
 8005d2c:	e00a      	b.n	8005d44 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d3da      	bcc.n	8005cfa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8005d44:	f000 f878 	bl	8005e38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <HAL_FLASHEx_Erase+0xd8>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	761a      	strb	r2, [r3, #24]

  return status;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200144d8 	.word	0x200144d8
 8005d5c:	40023c00 	.word	0x40023c00

08005d60 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <FLASH_MassErase+0x44>)
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <FLASH_MassErase+0x44>)
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <FLASH_MassErase+0x44>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <FLASH_MassErase+0x44>)
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <FLASH_MassErase+0x44>)
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	4a05      	ldr	r2, [pc, #20]	; (8005da4 <FLASH_MassErase+0x44>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d94:	6113      	str	r3, [r2, #16]
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40023c00 	.word	0x40023c00

08005da8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e010      	b.n	8005de6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d103      	bne.n	8005dd2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e009      	b.n	8005de6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d103      	bne.n	8005de0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e002      	b.n	8005de6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005de0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005de6:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005df2:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	490f      	ldr	r1, [pc, #60]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005e04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005e08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4313      	orrs	r3, r2
 8005e14:	4a07      	ldr	r2, [pc, #28]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005e16:	f043 0302 	orr.w	r3, r3, #2
 8005e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <FLASH_Erase_Sector+0x8c>)
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e26:	6113      	str	r3, [r2, #16]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40023c00 	.word	0x40023c00

08005e38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005e3c:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d017      	beq.n	8005e78 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e52:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005e54:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a19      	ldr	r2, [pc, #100]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a16      	ldr	r2, [pc, #88]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e6a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e6c:	4b14      	ldr	r3, [pc, #80]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e76:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005e78:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d017      	beq.n	8005eb4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a0d      	ldr	r2, [pc, #52]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <FLASH_FlushCaches+0x88>)
 8005eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eb2:	6013      	str	r3, [r2, #0]
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40023c00 	.word	0x40023c00

08005ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b089      	sub	sp, #36	; 0x24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	e16b      	b.n	80061b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	f040 815a 	bne.w	80061b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d00b      	beq.n	8005f1e <HAL_GPIO_Init+0x5a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d007      	beq.n	8005f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f12:	2b11      	cmp	r3, #17
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b12      	cmp	r3, #18
 8005f1c:	d130      	bne.n	8005f80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	2203      	movs	r2, #3
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f54:	2201      	movs	r2, #1
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 0201 	and.w	r2, r3, #1
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4013      	ands	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d003      	beq.n	8005fc0 <HAL_GPIO_Init+0xfc>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b12      	cmp	r3, #18
 8005fbe:	d123      	bne.n	8006008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	08da      	lsrs	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3208      	adds	r2, #8
 8005fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	220f      	movs	r2, #15
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	08da      	lsrs	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3208      	adds	r2, #8
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	2203      	movs	r2, #3
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f003 0203 	and.w	r2, r3, #3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80b4 	beq.w	80061b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	4b5f      	ldr	r3, [pc, #380]	; (80061cc <HAL_GPIO_Init+0x308>)
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	4a5e      	ldr	r2, [pc, #376]	; (80061cc <HAL_GPIO_Init+0x308>)
 8006054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006058:	6453      	str	r3, [r2, #68]	; 0x44
 800605a:	4b5c      	ldr	r3, [pc, #368]	; (80061cc <HAL_GPIO_Init+0x308>)
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006066:	4a5a      	ldr	r2, [pc, #360]	; (80061d0 <HAL_GPIO_Init+0x30c>)
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	3302      	adds	r3, #2
 800606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	220f      	movs	r2, #15
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a51      	ldr	r2, [pc, #324]	; (80061d4 <HAL_GPIO_Init+0x310>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d02b      	beq.n	80060ea <HAL_GPIO_Init+0x226>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a50      	ldr	r2, [pc, #320]	; (80061d8 <HAL_GPIO_Init+0x314>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d025      	beq.n	80060e6 <HAL_GPIO_Init+0x222>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a4f      	ldr	r2, [pc, #316]	; (80061dc <HAL_GPIO_Init+0x318>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01f      	beq.n	80060e2 <HAL_GPIO_Init+0x21e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a4e      	ldr	r2, [pc, #312]	; (80061e0 <HAL_GPIO_Init+0x31c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d019      	beq.n	80060de <HAL_GPIO_Init+0x21a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a4d      	ldr	r2, [pc, #308]	; (80061e4 <HAL_GPIO_Init+0x320>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_GPIO_Init+0x216>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a4c      	ldr	r2, [pc, #304]	; (80061e8 <HAL_GPIO_Init+0x324>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00d      	beq.n	80060d6 <HAL_GPIO_Init+0x212>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a4b      	ldr	r2, [pc, #300]	; (80061ec <HAL_GPIO_Init+0x328>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <HAL_GPIO_Init+0x20e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a4a      	ldr	r2, [pc, #296]	; (80061f0 <HAL_GPIO_Init+0x32c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d101      	bne.n	80060ce <HAL_GPIO_Init+0x20a>
 80060ca:	2307      	movs	r3, #7
 80060cc:	e00e      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060ce:	2308      	movs	r3, #8
 80060d0:	e00c      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060d2:	2306      	movs	r3, #6
 80060d4:	e00a      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060d6:	2305      	movs	r3, #5
 80060d8:	e008      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060da:	2304      	movs	r3, #4
 80060dc:	e006      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060de:	2303      	movs	r3, #3
 80060e0:	e004      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e002      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060ea:	2300      	movs	r3, #0
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	f002 0203 	and.w	r2, r2, #3
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	4093      	lsls	r3, r2
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060fc:	4934      	ldr	r1, [pc, #208]	; (80061d0 <HAL_GPIO_Init+0x30c>)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	3302      	adds	r3, #2
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800610a:	4b3a      	ldr	r3, [pc, #232]	; (80061f4 <HAL_GPIO_Init+0x330>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800612e:	4a31      	ldr	r2, [pc, #196]	; (80061f4 <HAL_GPIO_Init+0x330>)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006134:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <HAL_GPIO_Init+0x330>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006158:	4a26      	ldr	r2, [pc, #152]	; (80061f4 <HAL_GPIO_Init+0x330>)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800615e:	4b25      	ldr	r3, [pc, #148]	; (80061f4 <HAL_GPIO_Init+0x330>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	43db      	mvns	r3, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006182:	4a1c      	ldr	r2, [pc, #112]	; (80061f4 <HAL_GPIO_Init+0x330>)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_GPIO_Init+0x330>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061ac:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <HAL_GPIO_Init+0x330>)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3301      	adds	r3, #1
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	f67f ae90 	bls.w	8005ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061c0:	bf00      	nop
 80061c2:	3724      	adds	r7, #36	; 0x24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40023800 	.word	0x40023800
 80061d0:	40013800 	.word	0x40013800
 80061d4:	40020000 	.word	0x40020000
 80061d8:	40020400 	.word	0x40020400
 80061dc:	40020800 	.word	0x40020800
 80061e0:	40020c00 	.word	0x40020c00
 80061e4:	40021000 	.word	0x40021000
 80061e8:	40021400 	.word	0x40021400
 80061ec:	40021800 	.word	0x40021800
 80061f0:	40021c00 	.word	0x40021c00
 80061f4:	40013c00 	.word	0x40013c00

080061f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	887b      	ldrh	r3, [r7, #2]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	e001      	b.n	800621a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]
 8006234:	4613      	mov	r3, r2
 8006236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006238:	787b      	ldrb	r3, [r7, #1]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006244:	e003      	b.n	800624e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006246:	887b      	ldrh	r3, [r7, #2]
 8006248:	041a      	lsls	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	619a      	str	r2, [r3, #24]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e11f      	b.n	80064ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fd fddc 	bl	8003e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062c0:	f000 fd3c 	bl	8006d3c <HAL_RCC_GetPCLK1Freq>
 80062c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4a7b      	ldr	r2, [pc, #492]	; (80064b8 <HAL_I2C_Init+0x25c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d807      	bhi.n	80062e0 <HAL_I2C_Init+0x84>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a7a      	ldr	r2, [pc, #488]	; (80064bc <HAL_I2C_Init+0x260>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bf94      	ite	ls
 80062d8:	2301      	movls	r3, #1
 80062da:	2300      	movhi	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e006      	b.n	80062ee <HAL_I2C_Init+0x92>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a77      	ldr	r2, [pc, #476]	; (80064c0 <HAL_I2C_Init+0x264>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	bf94      	ite	ls
 80062e8:	2301      	movls	r3, #1
 80062ea:	2300      	movhi	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0db      	b.n	80064ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a72      	ldr	r2, [pc, #456]	; (80064c4 <HAL_I2C_Init+0x268>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	0c9b      	lsrs	r3, r3, #18
 8006300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a64      	ldr	r2, [pc, #400]	; (80064b8 <HAL_I2C_Init+0x25c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d802      	bhi.n	8006330 <HAL_I2C_Init+0xd4>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3301      	adds	r3, #1
 800632e:	e009      	b.n	8006344 <HAL_I2C_Init+0xe8>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	4a63      	ldr	r2, [pc, #396]	; (80064c8 <HAL_I2C_Init+0x26c>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	099b      	lsrs	r3, r3, #6
 8006342:	3301      	adds	r3, #1
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	430b      	orrs	r3, r1
 800634a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4956      	ldr	r1, [pc, #344]	; (80064b8 <HAL_I2C_Init+0x25c>)
 8006360:	428b      	cmp	r3, r1
 8006362:	d80d      	bhi.n	8006380 <HAL_I2C_Init+0x124>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1e59      	subs	r1, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006372:	3301      	adds	r3, #1
 8006374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006378:	2b04      	cmp	r3, #4
 800637a:	bf38      	it	cc
 800637c:	2304      	movcc	r3, #4
 800637e:	e04f      	b.n	8006420 <HAL_I2C_Init+0x1c4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d111      	bne.n	80063ac <HAL_I2C_Init+0x150>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	1e58      	subs	r0, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	440b      	add	r3, r1
 8006396:	fbb0 f3f3 	udiv	r3, r0, r3
 800639a:	3301      	adds	r3, #1
 800639c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	e012      	b.n	80063d2 <HAL_I2C_Init+0x176>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1e58      	subs	r0, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6859      	ldr	r1, [r3, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	0099      	lsls	r1, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	fbb0 f3f3 	udiv	r3, r0, r3
 80063c2:	3301      	adds	r3, #1
 80063c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_I2C_Init+0x17e>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e022      	b.n	8006420 <HAL_I2C_Init+0x1c4>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10e      	bne.n	8006400 <HAL_I2C_Init+0x1a4>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1e58      	subs	r0, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6859      	ldr	r1, [r3, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	440b      	add	r3, r1
 80063f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063f4:	3301      	adds	r3, #1
 80063f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fe:	e00f      	b.n	8006420 <HAL_I2C_Init+0x1c4>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	1e58      	subs	r0, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6859      	ldr	r1, [r3, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	0099      	lsls	r1, r3, #2
 8006410:	440b      	add	r3, r1
 8006412:	fbb0 f3f3 	udiv	r3, r0, r3
 8006416:	3301      	adds	r3, #1
 8006418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	6809      	ldr	r1, [r1, #0]
 8006424:	4313      	orrs	r3, r2
 8006426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69da      	ldr	r2, [r3, #28]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800644e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6911      	ldr	r1, [r2, #16]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68d2      	ldr	r2, [r2, #12]
 800645a:	4311      	orrs	r1, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6812      	ldr	r2, [r2, #0]
 8006460:	430b      	orrs	r3, r1
 8006462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	000186a0 	.word	0x000186a0
 80064bc:	001e847f 	.word	0x001e847f
 80064c0:	003d08ff 	.word	0x003d08ff
 80064c4:	431bde83 	.word	0x431bde83
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e25b      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d075      	beq.n	80065d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064ea:	4ba3      	ldr	r3, [pc, #652]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 030c 	and.w	r3, r3, #12
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d00c      	beq.n	8006510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064f6:	4ba0      	ldr	r3, [pc, #640]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d112      	bne.n	8006528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006502:	4b9d      	ldr	r3, [pc, #628]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800650e:	d10b      	bne.n	8006528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	4b99      	ldr	r3, [pc, #612]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05b      	beq.n	80065d4 <HAL_RCC_OscConfig+0x108>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d157      	bne.n	80065d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e236      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006530:	d106      	bne.n	8006540 <HAL_RCC_OscConfig+0x74>
 8006532:	4b91      	ldr	r3, [pc, #580]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a90      	ldr	r2, [pc, #576]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e01d      	b.n	800657c <HAL_RCC_OscConfig+0xb0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006548:	d10c      	bne.n	8006564 <HAL_RCC_OscConfig+0x98>
 800654a:	4b8b      	ldr	r3, [pc, #556]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a8a      	ldr	r2, [pc, #552]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b88      	ldr	r3, [pc, #544]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a87      	ldr	r2, [pc, #540]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e00b      	b.n	800657c <HAL_RCC_OscConfig+0xb0>
 8006564:	4b84      	ldr	r3, [pc, #528]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a83      	ldr	r2, [pc, #524]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800656a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	4b81      	ldr	r3, [pc, #516]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a80      	ldr	r2, [pc, #512]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d013      	beq.n	80065ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7fe f876 	bl	8004674 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800658c:	f7fe f872 	bl	8004674 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e1fb      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800659e:	4b76      	ldr	r3, [pc, #472]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0xc0>
 80065aa:	e014      	b.n	80065d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ac:	f7fe f862 	bl	8004674 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065b4:	f7fe f85e 	bl	8004674 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b64      	cmp	r3, #100	; 0x64
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e1e7      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065c6:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f0      	bne.n	80065b4 <HAL_RCC_OscConfig+0xe8>
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d063      	beq.n	80066aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065e2:	4b65      	ldr	r3, [pc, #404]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 030c 	and.w	r3, r3, #12
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ee:	4b62      	ldr	r3, [pc, #392]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d11c      	bne.n	8006634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065fa:	4b5f      	ldr	r3, [pc, #380]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d116      	bne.n	8006634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006606:	4b5c      	ldr	r3, [pc, #368]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <HAL_RCC_OscConfig+0x152>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d001      	beq.n	800661e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e1bb      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661e:	4b56      	ldr	r3, [pc, #344]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4952      	ldr	r1, [pc, #328]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800662e:	4313      	orrs	r3, r2
 8006630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006632:	e03a      	b.n	80066aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d020      	beq.n	800667e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800663c:	4b4f      	ldr	r3, [pc, #316]	; (800677c <HAL_RCC_OscConfig+0x2b0>)
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006642:	f7fe f817 	bl	8004674 <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800664a:	f7fe f813 	bl	8004674 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e19c      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800665c:	4b46      	ldr	r3, [pc, #280]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006668:	4b43      	ldr	r3, [pc, #268]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	4940      	ldr	r1, [pc, #256]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006678:	4313      	orrs	r3, r2
 800667a:	600b      	str	r3, [r1, #0]
 800667c:	e015      	b.n	80066aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800667e:	4b3f      	ldr	r3, [pc, #252]	; (800677c <HAL_RCC_OscConfig+0x2b0>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fd fff6 	bl	8004674 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800668c:	f7fd fff2 	bl	8004674 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e17b      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800669e:	4b36      	ldr	r3, [pc, #216]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d030      	beq.n	8006718 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d016      	beq.n	80066ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066be:	4b30      	ldr	r3, [pc, #192]	; (8006780 <HAL_RCC_OscConfig+0x2b4>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c4:	f7fd ffd6 	bl	8004674 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066cc:	f7fd ffd2 	bl	8004674 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e15b      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066de:	4b26      	ldr	r3, [pc, #152]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 80066e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f0      	beq.n	80066cc <HAL_RCC_OscConfig+0x200>
 80066ea:	e015      	b.n	8006718 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ec:	4b24      	ldr	r3, [pc, #144]	; (8006780 <HAL_RCC_OscConfig+0x2b4>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fd ffbf 	bl	8004674 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066fa:	f7fd ffbb 	bl	8004674 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e144      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800670c:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800670e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f0      	bne.n	80066fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a0 	beq.w	8006866 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672a:	4b13      	ldr	r3, [pc, #76]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10f      	bne.n	8006756 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	4a0e      	ldr	r2, [pc, #56]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006744:	6413      	str	r3, [r2, #64]	; 0x40
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <HAL_RCC_OscConfig+0x2ac>)
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_RCC_OscConfig+0x2b8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675e:	2b00      	cmp	r3, #0
 8006760:	d121      	bne.n	80067a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006762:	4b08      	ldr	r3, [pc, #32]	; (8006784 <HAL_RCC_OscConfig+0x2b8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a07      	ldr	r2, [pc, #28]	; (8006784 <HAL_RCC_OscConfig+0x2b8>)
 8006768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800676c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800676e:	f7fd ff81 	bl	8004674 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006774:	e011      	b.n	800679a <HAL_RCC_OscConfig+0x2ce>
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800
 800677c:	42470000 	.word	0x42470000
 8006780:	42470e80 	.word	0x42470e80
 8006784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006788:	f7fd ff74 	bl	8004674 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e0fd      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679a:	4b81      	ldr	r3, [pc, #516]	; (80069a0 <HAL_RCC_OscConfig+0x4d4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d106      	bne.n	80067bc <HAL_RCC_OscConfig+0x2f0>
 80067ae:	4b7d      	ldr	r3, [pc, #500]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4a7c      	ldr	r2, [pc, #496]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ba:	e01c      	b.n	80067f6 <HAL_RCC_OscConfig+0x32a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b05      	cmp	r3, #5
 80067c2:	d10c      	bne.n	80067de <HAL_RCC_OscConfig+0x312>
 80067c4:	4b77      	ldr	r3, [pc, #476]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	4a76      	ldr	r2, [pc, #472]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067ca:	f043 0304 	orr.w	r3, r3, #4
 80067ce:	6713      	str	r3, [r2, #112]	; 0x70
 80067d0:	4b74      	ldr	r3, [pc, #464]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	4a73      	ldr	r2, [pc, #460]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6713      	str	r3, [r2, #112]	; 0x70
 80067dc:	e00b      	b.n	80067f6 <HAL_RCC_OscConfig+0x32a>
 80067de:	4b71      	ldr	r3, [pc, #452]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a70      	ldr	r2, [pc, #448]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ea:	4b6e      	ldr	r3, [pc, #440]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	4a6d      	ldr	r2, [pc, #436]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80067f0:	f023 0304 	bic.w	r3, r3, #4
 80067f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d015      	beq.n	800682a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fe:	f7fd ff39 	bl	8004674 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006804:	e00a      	b.n	800681c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fd ff35 	bl	8004674 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f241 3288 	movw	r2, #5000	; 0x1388
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e0bc      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0ee      	beq.n	8006806 <HAL_RCC_OscConfig+0x33a>
 8006828:	e014      	b.n	8006854 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682a:	f7fd ff23 	bl	8004674 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006830:	e00a      	b.n	8006848 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006832:	f7fd ff1f 	bl	8004674 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006840:	4293      	cmp	r3, r2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e0a6      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006848:	4b56      	ldr	r3, [pc, #344]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ee      	bne.n	8006832 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d105      	bne.n	8006866 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685a:	4b52      	ldr	r3, [pc, #328]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	4a51      	ldr	r2, [pc, #324]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 8006860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8092 	beq.w	8006994 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006870:	4b4c      	ldr	r3, [pc, #304]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 030c 	and.w	r3, r3, #12
 8006878:	2b08      	cmp	r3, #8
 800687a:	d05c      	beq.n	8006936 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d141      	bne.n	8006908 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006884:	4b48      	ldr	r3, [pc, #288]	; (80069a8 <HAL_RCC_OscConfig+0x4dc>)
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688a:	f7fd fef3 	bl	8004674 <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006892:	f7fd feef 	bl	8004674 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e078      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a4:	4b3f      	ldr	r3, [pc, #252]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1f0      	bne.n	8006892 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	019b      	lsls	r3, r3, #6
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	3b01      	subs	r3, #1
 80068ca:	041b      	lsls	r3, r3, #16
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	061b      	lsls	r3, r3, #24
 80068d4:	4933      	ldr	r1, [pc, #204]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068da:	4b33      	ldr	r3, [pc, #204]	; (80069a8 <HAL_RCC_OscConfig+0x4dc>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fd fec8 	bl	8004674 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e8:	f7fd fec4 	bl	8004674 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e04d      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fa:	4b2a      	ldr	r3, [pc, #168]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0x41c>
 8006906:	e045      	b.n	8006994 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006908:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <HAL_RCC_OscConfig+0x4dc>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800690e:	f7fd feb1 	bl	8004674 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006916:	f7fd fead 	bl	8004674 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e036      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006928:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <HAL_RCC_OscConfig+0x44a>
 8006934:	e02e      	b.n	8006994 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e029      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006942:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <HAL_RCC_OscConfig+0x4d8>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	429a      	cmp	r2, r3
 8006954:	d11c      	bne.n	8006990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d115      	bne.n	8006990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800696a:	4013      	ands	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006970:	4293      	cmp	r3, r2
 8006972:	d10d      	bne.n	8006990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800697e:	429a      	cmp	r2, r3
 8006980:	d106      	bne.n	8006990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800698c:	429a      	cmp	r2, r3
 800698e:	d001      	beq.n	8006994 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40007000 	.word	0x40007000
 80069a4:	40023800 	.word	0x40023800
 80069a8:	42470060 	.word	0x42470060

080069ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e0cc      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c0:	4b68      	ldr	r3, [pc, #416]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d90c      	bls.n	80069e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ce:	4b65      	ldr	r3, [pc, #404]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d6:	4b63      	ldr	r3, [pc, #396]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d001      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e0b8      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d020      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a00:	4b59      	ldr	r3, [pc, #356]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	4a58      	ldr	r2, [pc, #352]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a18:	4b53      	ldr	r3, [pc, #332]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4a52      	ldr	r2, [pc, #328]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a24:	4b50      	ldr	r3, [pc, #320]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	494d      	ldr	r1, [pc, #308]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d044      	beq.n	8006acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d107      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4a:	4b47      	ldr	r3, [pc, #284]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d119      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e07f      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d003      	beq.n	8006a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d107      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a6a:	4b3f      	ldr	r3, [pc, #252]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e06f      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a7a:	4b3b      	ldr	r3, [pc, #236]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e067      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a8a:	4b37      	ldr	r3, [pc, #220]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f023 0203 	bic.w	r2, r3, #3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	4934      	ldr	r1, [pc, #208]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a9c:	f7fd fdea 	bl	8004674 <HAL_GetTick>
 8006aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa2:	e00a      	b.n	8006aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa4:	f7fd fde6 	bl	8004674 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e04f      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aba:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 020c 	and.w	r2, r3, #12
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d1eb      	bne.n	8006aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006acc:	4b25      	ldr	r3, [pc, #148]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d20c      	bcs.n	8006af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ae2:	4b20      	ldr	r3, [pc, #128]	; (8006b64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d001      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e032      	b.n	8006b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b00:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	4916      	ldr	r1, [pc, #88]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b1e:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	490e      	ldr	r1, [pc, #56]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b32:	f000 f821 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 8006b36:	4601      	mov	r1, r0
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <HAL_RCC_ClockConfig+0x1c0>)
 8006b44:	5cd3      	ldrb	r3, [r2, r3]
 8006b46:	fa21 f303 	lsr.w	r3, r1, r3
 8006b4a:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b4e:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <HAL_RCC_ClockConfig+0x1c8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fd fd4a 	bl	80045ec <HAL_InitTick>

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40023c00 	.word	0x40023c00
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	0800d83c 	.word	0x0800d83c
 8006b70:	20000000 	.word	0x20000000
 8006b74:	20000004 	.word	0x20000004

08006b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	2300      	movs	r3, #0
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b8e:	4b63      	ldr	r3, [pc, #396]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 030c 	and.w	r3, r3, #12
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d007      	beq.n	8006baa <HAL_RCC_GetSysClockFreq+0x32>
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d008      	beq.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x38>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 80b4 	bne.w	8006d0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ba4:	4b5e      	ldr	r3, [pc, #376]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ba6:	60bb      	str	r3, [r7, #8]
       break;
 8006ba8:	e0b3      	b.n	8006d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006baa:	4b5d      	ldr	r3, [pc, #372]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006bac:	60bb      	str	r3, [r7, #8]
      break;
 8006bae:	e0b0      	b.n	8006d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bb0:	4b5a      	ldr	r3, [pc, #360]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bba:	4b58      	ldr	r3, [pc, #352]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d04a      	beq.n	8006c5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bc6:	4b55      	ldr	r3, [pc, #340]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	099b      	lsrs	r3, r3, #6
 8006bcc:	f04f 0400 	mov.w	r4, #0
 8006bd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	ea03 0501 	and.w	r5, r3, r1
 8006bdc:	ea04 0602 	and.w	r6, r4, r2
 8006be0:	4629      	mov	r1, r5
 8006be2:	4632      	mov	r2, r6
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	f04f 0400 	mov.w	r4, #0
 8006bec:	0154      	lsls	r4, r2, #5
 8006bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bf2:	014b      	lsls	r3, r1, #5
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	1b49      	subs	r1, r1, r5
 8006bfa:	eb62 0206 	sbc.w	r2, r2, r6
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	f04f 0400 	mov.w	r4, #0
 8006c06:	0194      	lsls	r4, r2, #6
 8006c08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c0c:	018b      	lsls	r3, r1, #6
 8006c0e:	1a5b      	subs	r3, r3, r1
 8006c10:	eb64 0402 	sbc.w	r4, r4, r2
 8006c14:	f04f 0100 	mov.w	r1, #0
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	00e2      	lsls	r2, r4, #3
 8006c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c22:	00d9      	lsls	r1, r3, #3
 8006c24:	460b      	mov	r3, r1
 8006c26:	4614      	mov	r4, r2
 8006c28:	195b      	adds	r3, r3, r5
 8006c2a:	eb44 0406 	adc.w	r4, r4, r6
 8006c2e:	f04f 0100 	mov.w	r1, #0
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	02a2      	lsls	r2, r4, #10
 8006c38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c3c:	0299      	lsls	r1, r3, #10
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4614      	mov	r4, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	4621      	mov	r1, r4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f04f 0400 	mov.w	r4, #0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4623      	mov	r3, r4
 8006c50:	f7fa f81a 	bl	8000c88 <__aeabi_uldivmod>
 8006c54:	4603      	mov	r3, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	e049      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5c:	4b2f      	ldr	r3, [pc, #188]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	099b      	lsrs	r3, r3, #6
 8006c62:	f04f 0400 	mov.w	r4, #0
 8006c66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	ea03 0501 	and.w	r5, r3, r1
 8006c72:	ea04 0602 	and.w	r6, r4, r2
 8006c76:	4629      	mov	r1, r5
 8006c78:	4632      	mov	r2, r6
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	f04f 0400 	mov.w	r4, #0
 8006c82:	0154      	lsls	r4, r2, #5
 8006c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c88:	014b      	lsls	r3, r1, #5
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	1b49      	subs	r1, r1, r5
 8006c90:	eb62 0206 	sbc.w	r2, r2, r6
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	f04f 0400 	mov.w	r4, #0
 8006c9c:	0194      	lsls	r4, r2, #6
 8006c9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ca2:	018b      	lsls	r3, r1, #6
 8006ca4:	1a5b      	subs	r3, r3, r1
 8006ca6:	eb64 0402 	sbc.w	r4, r4, r2
 8006caa:	f04f 0100 	mov.w	r1, #0
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	00e2      	lsls	r2, r4, #3
 8006cb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006cb8:	00d9      	lsls	r1, r3, #3
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	195b      	adds	r3, r3, r5
 8006cc0:	eb44 0406 	adc.w	r4, r4, r6
 8006cc4:	f04f 0100 	mov.w	r1, #0
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	02a2      	lsls	r2, r4, #10
 8006cce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006cd2:	0299      	lsls	r1, r3, #10
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	4621      	mov	r1, r4
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f04f 0400 	mov.w	r4, #0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	f7f9 ffcf 	bl	8000c88 <__aeabi_uldivmod>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	0c1b      	lsrs	r3, r3, #16
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	60bb      	str	r3, [r7, #8]
      break;
 8006d0a:	e002      	b.n	8006d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006d0e:	60bb      	str	r3, [r7, #8]
      break;
 8006d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d12:	68bb      	ldr	r3, [r7, #8]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	00f42400 	.word	0x00f42400

08006d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d28:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000000 	.word	0x20000000

08006d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d40:	f7ff fff0 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 8006d44:	4601      	mov	r1, r0
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	0a9b      	lsrs	r3, r3, #10
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	4a03      	ldr	r2, [pc, #12]	; (8006d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d52:	5cd3      	ldrb	r3, [r2, r3]
 8006d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	0800d84c 	.word	0x0800d84c

08006d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d68:	f7ff ffdc 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	0b5b      	lsrs	r3, r3, #13
 8006d74:	f003 0307 	and.w	r3, r3, #7
 8006d78:	4a03      	ldr	r2, [pc, #12]	; (8006d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d7a:	5cd3      	ldrb	r3, [r2, r3]
 8006d7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40023800 	.word	0x40023800
 8006d88:	0800d84c 	.word	0x0800d84c

08006d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e056      	b.n	8006e4c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fd f889 	bl	8003ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	ea42 0103 	orr.w	r1, r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	f003 0104 	and.w	r1, r3, #4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	4613      	mov	r3, r2
 8006e62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d101      	bne.n	8006e76 <HAL_SPI_Transmit+0x22>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e11e      	b.n	80070b4 <HAL_SPI_Transmit+0x260>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e7e:	f7fd fbf9 	bl	8004674 <HAL_GetTick>
 8006e82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e84:	88fb      	ldrh	r3, [r7, #6]
 8006e86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d002      	beq.n	8006e9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
 8006e96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e98:	e103      	b.n	80070a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_SPI_Transmit+0x52>
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eaa:	e0fa      	b.n	80070a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef2:	d107      	bne.n	8006f04 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d007      	beq.n	8006f22 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d14b      	bne.n	8006fc4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_SPI_Transmit+0xe6>
 8006f34:	8afb      	ldrh	r3, [r7, #22]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d13e      	bne.n	8006fb8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	881a      	ldrh	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	1c9a      	adds	r2, r3, #2
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f5e:	e02b      	b.n	8006fb8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d112      	bne.n	8006f94 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	1c9a      	adds	r2, r3, #2
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f92:	e011      	b.n	8006fb8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f94:	f7fd fb6e 	bl	8004674 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d803      	bhi.n	8006fac <HAL_SPI_Transmit+0x158>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d102      	bne.n	8006fb2 <HAL_SPI_Transmit+0x15e>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fb6:	e074      	b.n	80070a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1ce      	bne.n	8006f60 <HAL_SPI_Transmit+0x10c>
 8006fc2:	e04c      	b.n	800705e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_SPI_Transmit+0x17e>
 8006fcc:	8afb      	ldrh	r3, [r7, #22]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d140      	bne.n	8007054 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ff8:	e02c      	b.n	8007054 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b02      	cmp	r3, #2
 8007006:	d113      	bne.n	8007030 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	330c      	adds	r3, #12
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	86da      	strh	r2, [r3, #54]	; 0x36
 800702e:	e011      	b.n	8007054 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007030:	f7fd fb20 	bl	8004674 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d803      	bhi.n	8007048 <HAL_SPI_Transmit+0x1f4>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d102      	bne.n	800704e <HAL_SPI_Transmit+0x1fa>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007052:	e026      	b.n	80070a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1cd      	bne.n	8006ffa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fba4 	bl	80077b0 <SPI_EndRxTxTransaction>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e000      	b.n	80070a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80070a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3720      	adds	r7, #32
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d8:	d112      	bne.n	8007100 <HAL_SPI_Receive+0x44>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10e      	bne.n	8007100 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2204      	movs	r2, #4
 80070e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f8e9 	bl	80072ce <HAL_SPI_TransmitReceive>
 80070fc:	4603      	mov	r3, r0
 80070fe:	e0e2      	b.n	80072c6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_SPI_Receive+0x52>
 800710a:	2302      	movs	r3, #2
 800710c:	e0db      	b.n	80072c6 <HAL_SPI_Receive+0x20a>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007116:	f7fd faad 	bl	8004674 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b01      	cmp	r3, #1
 8007126:	d002      	beq.n	800712e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007128:	2302      	movs	r3, #2
 800712a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800712c:	e0c2      	b.n	80072b4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_SPI_Receive+0x7e>
 8007134:	88fb      	ldrh	r3, [r7, #6]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800713e:	e0b9      	b.n	80072b4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2204      	movs	r2, #4
 8007144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007186:	d107      	bne.n	8007198 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007196:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d007      	beq.n	80071b6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d162      	bne.n	8007284 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071be:	e02e      	b.n	800721e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d115      	bne.n	80071fa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f103 020c 	add.w	r2, r3, #12
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071f8:	e011      	b.n	800721e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071fa:	f7fd fa3b 	bl	8004674 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d803      	bhi.n	8007212 <HAL_SPI_Receive+0x156>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d102      	bne.n	8007218 <HAL_SPI_Receive+0x15c>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800721c:	e04a      	b.n	80072b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1cb      	bne.n	80071c0 <HAL_SPI_Receive+0x104>
 8007228:	e031      	b.n	800728e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d113      	bne.n	8007260 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	b292      	uxth	r2, r2
 8007244:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	1c9a      	adds	r2, r3, #2
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800725e:	e011      	b.n	8007284 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007260:	f7fd fa08 	bl	8004674 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d803      	bhi.n	8007278 <HAL_SPI_Receive+0x1bc>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d102      	bne.n	800727e <HAL_SPI_Receive+0x1c2>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007282:	e017      	b.n	80072b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1cd      	bne.n	800722a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fa27 	bl	80076e6 <SPI_EndRxTransaction>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
 80072b0:	e000      	b.n	80072b4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80072b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b08c      	sub	sp, #48	; 0x30
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072dc:	2301      	movs	r3, #1
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_SPI_TransmitReceive+0x26>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e18a      	b.n	800760a <HAL_SPI_TransmitReceive+0x33c>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072fc:	f7fd f9ba 	bl	8004674 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007312:	887b      	ldrh	r3, [r7, #2]
 8007314:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800731a:	2b01      	cmp	r3, #1
 800731c:	d00f      	beq.n	800733e <HAL_SPI_TransmitReceive+0x70>
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007324:	d107      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x68>
 800732e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007332:	2b04      	cmp	r3, #4
 8007334:	d003      	beq.n	800733e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007336:	2302      	movs	r3, #2
 8007338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800733c:	e15b      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x82>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x82>
 800734a:	887b      	ldrh	r3, [r7, #2]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d103      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007356:	e14e      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b04      	cmp	r3, #4
 8007362:	d003      	beq.n	800736c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2205      	movs	r2, #5
 8007368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	887a      	ldrh	r2, [r7, #2]
 800737c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	887a      	ldrh	r2, [r7, #2]
 8007382:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	887a      	ldrh	r2, [r7, #2]
 800738e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b40      	cmp	r3, #64	; 0x40
 80073ae:	d007      	beq.n	80073c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c8:	d178      	bne.n	80074bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_SPI_TransmitReceive+0x10a>
 80073d2:	8b7b      	ldrh	r3, [r7, #26]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d166      	bne.n	80074a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	881a      	ldrh	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	1c9a      	adds	r2, r3, #2
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073fc:	e053      	b.n	80074a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b02      	cmp	r3, #2
 800740a:	d11b      	bne.n	8007444 <HAL_SPI_TransmitReceive+0x176>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d016      	beq.n	8007444 <HAL_SPI_TransmitReceive+0x176>
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	2b01      	cmp	r3, #1
 800741a:	d113      	bne.n	8007444 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	881a      	ldrh	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	1c9a      	adds	r2, r3, #2
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b01      	cmp	r3, #1
 8007450:	d119      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x1b8>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d014      	beq.n	8007486 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	b292      	uxth	r2, r2
 8007468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	1c9a      	adds	r2, r3, #2
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007482:	2301      	movs	r3, #1
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007486:	f7fd f8f5 	bl	8004674 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007492:	429a      	cmp	r2, r3
 8007494:	d807      	bhi.n	80074a6 <HAL_SPI_TransmitReceive+0x1d8>
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d003      	beq.n	80074a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074a4:	e0a7      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1a6      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x130>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1a1      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x130>
 80074ba:	e07c      	b.n	80075b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <HAL_SPI_TransmitReceive+0x1fc>
 80074c4:	8b7b      	ldrh	r3, [r7, #26]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d16b      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	7812      	ldrb	r2, [r2, #0]
 80074d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f0:	e057      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d11c      	bne.n	800753a <HAL_SPI_TransmitReceive+0x26c>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d017      	beq.n	800753a <HAL_SPI_TransmitReceive+0x26c>
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d114      	bne.n	800753a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b01      	cmp	r3, #1
 8007546:	d119      	bne.n	800757c <HAL_SPI_TransmitReceive+0x2ae>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d014      	beq.n	800757c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007578:	2301      	movs	r3, #1
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800757c:	f7fd f87a 	bl	8004674 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007588:	429a      	cmp	r2, r3
 800758a:	d803      	bhi.n	8007594 <HAL_SPI_TransmitReceive+0x2c6>
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d102      	bne.n	800759a <HAL_SPI_TransmitReceive+0x2cc>
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075a0:	e029      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1a2      	bne.n	80074f2 <HAL_SPI_TransmitReceive+0x224>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d19d      	bne.n	80074f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f8f8 	bl	80077b0 <SPI_EndRxTxTransaction>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d006      	beq.n	80075d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2220      	movs	r2, #32
 80075d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075d2:	e010      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10b      	bne.n	80075f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	e000      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800760a:	4618      	mov	r0, r3
 800760c:	3730      	adds	r7, #48	; 0x30
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	603b      	str	r3, [r7, #0]
 800761e:	4613      	mov	r3, r2
 8007620:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007622:	e04c      	b.n	80076be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d048      	beq.n	80076be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800762c:	f7fd f822 	bl	8004674 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d902      	bls.n	8007642 <SPI_WaitFlagStateUntilTimeout+0x30>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d13d      	bne.n	80076be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800765a:	d111      	bne.n	8007680 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007664:	d004      	beq.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766e:	d107      	bne.n	8007680 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800767e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007688:	d10f      	bne.n	80076aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e00f      	b.n	80076de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d1a3      	bne.n	8007624 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af02      	add	r7, sp, #8
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fa:	d111      	bne.n	8007720 <SPI_EndRxTransaction+0x3a>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007704:	d004      	beq.n	8007710 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770e:	d107      	bne.n	8007720 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007728:	d12a      	bne.n	8007780 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007732:	d012      	beq.n	800775a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	2180      	movs	r1, #128	; 0x80
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff ff67 	bl	8007612 <SPI_WaitFlagStateUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d02d      	beq.n	80077a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f043 0220 	orr.w	r2, r3, #32
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e026      	b.n	80077a8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2200      	movs	r2, #0
 8007762:	2101      	movs	r1, #1
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff ff54 	bl	8007612 <SPI_WaitFlagStateUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01a      	beq.n	80077a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007774:	f043 0220 	orr.w	r2, r3, #32
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e013      	b.n	80077a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	2101      	movs	r1, #1
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff ff41 	bl	8007612 <SPI_WaitFlagStateUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d007      	beq.n	80077a6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	f043 0220 	orr.w	r2, r3, #32
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e000      	b.n	80077a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <SPI_EndRxTxTransaction+0x7c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <SPI_EndRxTxTransaction+0x80>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	0d5b      	lsrs	r3, r3, #21
 80077c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077da:	d112      	bne.n	8007802 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	2180      	movs	r1, #128	; 0x80
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff ff13 	bl	8007612 <SPI_WaitFlagStateUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d016      	beq.n	8007820 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e00f      	b.n	8007822 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	3b01      	subs	r3, #1
 800780c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007818:	2b80      	cmp	r3, #128	; 0x80
 800781a:	d0f2      	beq.n	8007802 <SPI_EndRxTxTransaction+0x52>
 800781c:	e000      	b.n	8007820 <SPI_EndRxTxTransaction+0x70>
        break;
 800781e:	bf00      	nop
  }

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000000 	.word	0x20000000
 8007830:	165e9f81 	.word	0x165e9f81

08007834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e01d      	b.n	8007882 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fc fc44 	bl	80040e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	4619      	mov	r1, r3
 8007872:	4610      	mov	r0, r2
 8007874:	f000 fc20 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0201 	orr.w	r2, r2, #1
 80078a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	d007      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6a1a      	ldr	r2, [r3, #32]
 80078f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80078f4:	4013      	ands	r3, r2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10f      	bne.n	800791a <HAL_TIM_Base_Stop_IT+0x48>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6a1a      	ldr	r2, [r3, #32]
 8007900:	f240 4344 	movw	r3, #1092	; 0x444
 8007904:	4013      	ands	r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <HAL_TIM_Base_Stop_IT+0x48>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0201 	bic.w	r2, r2, #1
 8007918:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e01d      	b.n	8007976 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fc fb94 	bl	800407c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f000 fba6 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2201      	movs	r2, #1
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fde0 	bl	8008558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a15      	ldr	r2, [pc, #84]	; (80079f4 <HAL_TIM_PWM_Start+0x74>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_TIM_PWM_Start+0x2c>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a14      	ldr	r2, [pc, #80]	; (80079f8 <HAL_TIM_PWM_Start+0x78>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d101      	bne.n	80079b0 <HAL_TIM_PWM_Start+0x30>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <HAL_TIM_PWM_Start+0x32>
 80079b0:	2300      	movs	r3, #0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b06      	cmp	r3, #6
 80079d6:	d007      	beq.n	80079e8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	40010000 	.word	0x40010000
 80079f8:	40010400 	.word	0x40010400

080079fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fda2 	bl	8008558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a22      	ldr	r2, [pc, #136]	; (8007aa4 <HAL_TIM_PWM_Stop+0xa8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <HAL_TIM_PWM_Stop+0x2c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <HAL_TIM_PWM_Stop+0xac>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d101      	bne.n	8007a2c <HAL_TIM_PWM_Stop+0x30>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <HAL_TIM_PWM_Stop+0x32>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d017      	beq.n	8007a62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10f      	bne.n	8007a62 <HAL_TIM_PWM_Stop+0x66>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6a1a      	ldr	r2, [r3, #32]
 8007a48:	f240 4344 	movw	r3, #1092	; 0x444
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d107      	bne.n	8007a62 <HAL_TIM_PWM_Stop+0x66>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10f      	bne.n	8007a92 <HAL_TIM_PWM_Stop+0x96>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6a1a      	ldr	r2, [r3, #32]
 8007a78:	f240 4344 	movw	r3, #1092	; 0x444
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d107      	bne.n	8007a92 <HAL_TIM_PWM_Stop+0x96>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0201 	bic.w	r2, r2, #1
 8007a90:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40010400 	.word	0x40010400

08007aac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e083      	b.n	8007bc8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fc fa43 	bl	8003f60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007af0:	f023 0307 	bic.w	r3, r3, #7
 8007af4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f000 fad9 	bl	80080b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b4c:	f023 030c 	bic.w	r3, r3, #12
 8007b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	011a      	lsls	r2, r3, #4
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	031b      	lsls	r3, r3, #12
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007b8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007b92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_TIM_Encoder_Start+0x16>
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d008      	beq.n	8007bf6 <HAL_TIM_Encoder_Start+0x26>
 8007be4:	e00f      	b.n	8007c06 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2201      	movs	r2, #1
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fcb2 	bl	8008558 <TIM_CCxChannelCmd>
      break;
 8007bf4:	e016      	b.n	8007c24 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	2104      	movs	r1, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fcaa 	bl	8008558 <TIM_CCxChannelCmd>
      break;
 8007c04:	e00e      	b.n	8007c24 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fca2 	bl	8008558 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2104      	movs	r1, #4
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fc9b 	bl	8008558 <TIM_CCxChannelCmd>
      break;
 8007c22:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <HAL_TIM_Encoder_Stop+0x16>
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d008      	beq.n	8007c64 <HAL_TIM_Encoder_Stop+0x26>
 8007c52:	e00f      	b.n	8007c74 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fc7b 	bl	8008558 <TIM_CCxChannelCmd>
      break;
 8007c62:	e016      	b.n	8007c92 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2104      	movs	r1, #4
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fc73 	bl	8008558 <TIM_CCxChannelCmd>
      break;
 8007c72:	e00e      	b.n	8007c92 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fc6b 	bl	8008558 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	2104      	movs	r1, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fc64 	bl	8008558 <TIM_CCxChannelCmd>
      break;
 8007c90:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6a1a      	ldr	r2, [r3, #32]
 8007c98:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10f      	bne.n	8007cc2 <HAL_TIM_Encoder_Stop+0x84>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6a1a      	ldr	r2, [r3, #32]
 8007ca8:	f240 4344 	movw	r3, #1092	; 0x444
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <HAL_TIM_Encoder_Stop+0x84>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0201 	bic.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d122      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d11b      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0202 	mvn.w	r2, #2
 8007cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9b4 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007d14:	e005      	b.n	8007d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f9a6 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f9b7 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d122      	bne.n	8007d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d11b      	bne.n	8007d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0204 	mvn.w	r2, #4
 8007d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f98a 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007d68:	e005      	b.n	8007d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f97c 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f98d 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d122      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d11b      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0208 	mvn.w	r2, #8
 8007da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f960 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f952 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f963 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0310 	and.w	r3, r3, #16
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d122      	bne.n	8007e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d11b      	bne.n	8007e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0210 	mvn.w	r2, #16
 8007df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2208      	movs	r2, #8
 8007dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f936 	bl	800807c <HAL_TIM_IC_CaptureCallback>
 8007e10:	e005      	b.n	8007e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f928 	bl	8008068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f939 	bl	8008090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d10e      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d107      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0201 	mvn.w	r2, #1
 8007e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fa f804 	bl	8001e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5a:	2b80      	cmp	r3, #128	; 0x80
 8007e5c:	d10e      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d107      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc1a 	bl	80086b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d10e      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	d107      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f8fe 	bl	80080a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0220 	mvn.w	r2, #32
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fbe4 	bl	800869c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e0b4      	b.n	8008060 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2202      	movs	r2, #2
 8007f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b0c      	cmp	r3, #12
 8007f0a:	f200 809f 	bhi.w	800804c <HAL_TIM_PWM_ConfigChannel+0x170>
 8007f0e:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f14:	08007f49 	.word	0x08007f49
 8007f18:	0800804d 	.word	0x0800804d
 8007f1c:	0800804d 	.word	0x0800804d
 8007f20:	0800804d 	.word	0x0800804d
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	0800804d 	.word	0x0800804d
 8007f2c:	0800804d 	.word	0x0800804d
 8007f30:	0800804d 	.word	0x0800804d
 8007f34:	08007fcb 	.word	0x08007fcb
 8007f38:	0800804d 	.word	0x0800804d
 8007f3c:	0800804d 	.word	0x0800804d
 8007f40:	0800804d 	.word	0x0800804d
 8007f44:	0800800b 	.word	0x0800800b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f952 	bl	80081f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0208 	orr.w	r2, r2, #8
 8007f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0204 	bic.w	r2, r2, #4
 8007f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6999      	ldr	r1, [r3, #24]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	619a      	str	r2, [r3, #24]
      break;
 8007f86:	e062      	b.n	800804e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 f9a2 	bl	80082d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	619a      	str	r2, [r3, #24]
      break;
 8007fc8:	e041      	b.n	800804e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 f9f7 	bl	80083c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0208 	orr.w	r2, r2, #8
 8007fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0204 	bic.w	r2, r2, #4
 8007ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69d9      	ldr	r1, [r3, #28]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	691a      	ldr	r2, [r3, #16]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	61da      	str	r2, [r3, #28]
      break;
 8008008:	e021      	b.n	800804e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fa4b 	bl	80084ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69d9      	ldr	r1, [r3, #28]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	021a      	lsls	r2, r3, #8
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	61da      	str	r2, [r3, #28]
      break;
 800804a:	e000      	b.n	800804e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800804c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a40      	ldr	r2, [pc, #256]	; (80081cc <TIM_Base_SetConfig+0x114>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d013      	beq.n	80080f8 <TIM_Base_SetConfig+0x40>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d6:	d00f      	beq.n	80080f8 <TIM_Base_SetConfig+0x40>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a3d      	ldr	r2, [pc, #244]	; (80081d0 <TIM_Base_SetConfig+0x118>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00b      	beq.n	80080f8 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a3c      	ldr	r2, [pc, #240]	; (80081d4 <TIM_Base_SetConfig+0x11c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d007      	beq.n	80080f8 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3b      	ldr	r2, [pc, #236]	; (80081d8 <TIM_Base_SetConfig+0x120>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d003      	beq.n	80080f8 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a3a      	ldr	r2, [pc, #232]	; (80081dc <TIM_Base_SetConfig+0x124>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d108      	bne.n	800810a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a2f      	ldr	r2, [pc, #188]	; (80081cc <TIM_Base_SetConfig+0x114>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d02b      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008118:	d027      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a2c      	ldr	r2, [pc, #176]	; (80081d0 <TIM_Base_SetConfig+0x118>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d023      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2b      	ldr	r2, [pc, #172]	; (80081d4 <TIM_Base_SetConfig+0x11c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d01f      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2a      	ldr	r2, [pc, #168]	; (80081d8 <TIM_Base_SetConfig+0x120>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d01b      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a29      	ldr	r2, [pc, #164]	; (80081dc <TIM_Base_SetConfig+0x124>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d017      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a28      	ldr	r2, [pc, #160]	; (80081e0 <TIM_Base_SetConfig+0x128>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d013      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a27      	ldr	r2, [pc, #156]	; (80081e4 <TIM_Base_SetConfig+0x12c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00f      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <TIM_Base_SetConfig+0x130>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00b      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a25      	ldr	r2, [pc, #148]	; (80081ec <TIM_Base_SetConfig+0x134>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d007      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a24      	ldr	r2, [pc, #144]	; (80081f0 <TIM_Base_SetConfig+0x138>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a23      	ldr	r2, [pc, #140]	; (80081f4 <TIM_Base_SetConfig+0x13c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d108      	bne.n	800817c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <TIM_Base_SetConfig+0x114>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d003      	beq.n	80081b0 <TIM_Base_SetConfig+0xf8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a0c      	ldr	r2, [pc, #48]	; (80081dc <TIM_Base_SetConfig+0x124>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d103      	bne.n	80081b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	615a      	str	r2, [r3, #20]
}
 80081be:	bf00      	nop
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	40010000 	.word	0x40010000
 80081d0:	40000400 	.word	0x40000400
 80081d4:	40000800 	.word	0x40000800
 80081d8:	40000c00 	.word	0x40000c00
 80081dc:	40010400 	.word	0x40010400
 80081e0:	40014000 	.word	0x40014000
 80081e4:	40014400 	.word	0x40014400
 80081e8:	40014800 	.word	0x40014800
 80081ec:	40001800 	.word	0x40001800
 80081f0:	40001c00 	.word	0x40001c00
 80081f4:	40002000 	.word	0x40002000

080081f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f023 0201 	bic.w	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f023 0302 	bic.w	r3, r3, #2
 8008240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a20      	ldr	r2, [pc, #128]	; (80082d0 <TIM_OC1_SetConfig+0xd8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d003      	beq.n	800825c <TIM_OC1_SetConfig+0x64>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a1f      	ldr	r2, [pc, #124]	; (80082d4 <TIM_OC1_SetConfig+0xdc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d10c      	bne.n	8008276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f023 0308 	bic.w	r3, r3, #8
 8008262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f023 0304 	bic.w	r3, r3, #4
 8008274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <TIM_OC1_SetConfig+0xd8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d003      	beq.n	8008286 <TIM_OC1_SetConfig+0x8e>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a14      	ldr	r2, [pc, #80]	; (80082d4 <TIM_OC1_SetConfig+0xdc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d111      	bne.n	80082aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800828c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	621a      	str	r2, [r3, #32]
}
 80082c4:	bf00      	nop
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400

080082d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	f023 0210 	bic.w	r2, r3, #16
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800830e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f023 0320 	bic.w	r3, r3, #32
 8008322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	4313      	orrs	r3, r2
 800832e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a22      	ldr	r2, [pc, #136]	; (80083bc <TIM_OC2_SetConfig+0xe4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d003      	beq.n	8008340 <TIM_OC2_SetConfig+0x68>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a21      	ldr	r2, [pc, #132]	; (80083c0 <TIM_OC2_SetConfig+0xe8>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d10d      	bne.n	800835c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800835a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a17      	ldr	r2, [pc, #92]	; (80083bc <TIM_OC2_SetConfig+0xe4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d003      	beq.n	800836c <TIM_OC2_SetConfig+0x94>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <TIM_OC2_SetConfig+0xe8>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d113      	bne.n	8008394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800837a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	621a      	str	r2, [r3, #32]
}
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40010400 	.word	0x40010400

080083c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a21      	ldr	r2, [pc, #132]	; (80084a4 <TIM_OC3_SetConfig+0xe0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d003      	beq.n	800842a <TIM_OC3_SetConfig+0x66>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a20      	ldr	r2, [pc, #128]	; (80084a8 <TIM_OC3_SetConfig+0xe4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d10d      	bne.n	8008446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a16      	ldr	r2, [pc, #88]	; (80084a4 <TIM_OC3_SetConfig+0xe0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_OC3_SetConfig+0x92>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <TIM_OC3_SetConfig+0xe4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d113      	bne.n	800847e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800845c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	621a      	str	r2, [r3, #32]
}
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	40010000 	.word	0x40010000
 80084a8:	40010400 	.word	0x40010400

080084ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	031b      	lsls	r3, r3, #12
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a12      	ldr	r2, [pc, #72]	; (8008550 <TIM_OC4_SetConfig+0xa4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d003      	beq.n	8008514 <TIM_OC4_SetConfig+0x68>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a11      	ldr	r2, [pc, #68]	; (8008554 <TIM_OC4_SetConfig+0xa8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d109      	bne.n	8008528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800851a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	019b      	lsls	r3, r3, #6
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	621a      	str	r2, [r3, #32]
}
 8008542:	bf00      	nop
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	40010000 	.word	0x40010000
 8008554:	40010400 	.word	0x40010400

08008558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	2201      	movs	r2, #1
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a1a      	ldr	r2, [r3, #32]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	43db      	mvns	r3, r3
 800857a:	401a      	ands	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a1a      	ldr	r2, [r3, #32]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	fa01 f303 	lsl.w	r3, r1, r3
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e05a      	b.n	8008672 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a21      	ldr	r2, [pc, #132]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d022      	beq.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008608:	d01d      	beq.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d018      	beq.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a1b      	ldr	r2, [pc, #108]	; (8008688 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d013      	beq.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a1a      	ldr	r2, [pc, #104]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00e      	beq.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a18      	ldr	r2, [pc, #96]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d009      	beq.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a17      	ldr	r2, [pc, #92]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a15      	ldr	r2, [pc, #84]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d10c      	bne.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800864c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	4313      	orrs	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40010000 	.word	0x40010000
 8008684:	40000400 	.word	0x40000400
 8008688:	40000800 	.word	0x40000800
 800868c:	40000c00 	.word	0x40000c00
 8008690:	40010400 	.word	0x40010400
 8008694:	40014000 	.word	0x40014000
 8008698:	40001800 	.word	0x40001800

0800869c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e03f      	b.n	8008756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7fb fdd6 	bl	800429c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2224      	movs	r2, #36	; 0x24
 80086f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f90b 	bl	8008924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800871c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800872c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800873c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b088      	sub	sp, #32
 8008762:	af02      	add	r7, sp, #8
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	603b      	str	r3, [r7, #0]
 800876a:	4613      	mov	r3, r2
 800876c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b20      	cmp	r3, #32
 800877c:	f040 8083 	bne.w	8008886 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <HAL_UART_Transmit+0x2e>
 8008786:	88fb      	ldrh	r3, [r7, #6]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e07b      	b.n	8008888 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <HAL_UART_Transmit+0x40>
 800879a:	2302      	movs	r3, #2
 800879c:	e074      	b.n	8008888 <HAL_UART_Transmit+0x12a>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2221      	movs	r2, #33	; 0x21
 80087b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80087b4:	f7fb ff5e 	bl	8004674 <HAL_GetTick>
 80087b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	88fa      	ldrh	r2, [r7, #6]
 80087c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80087ce:	e042      	b.n	8008856 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29a      	uxth	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e6:	d122      	bne.n	800882e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2200      	movs	r2, #0
 80087f0:	2180      	movs	r1, #128	; 0x80
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 f84c 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e042      	b.n	8008888 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008814:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d103      	bne.n	8008826 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	3302      	adds	r3, #2
 8008822:	60bb      	str	r3, [r7, #8]
 8008824:	e017      	b.n	8008856 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	3301      	adds	r3, #1
 800882a:	60bb      	str	r3, [r7, #8]
 800882c:	e013      	b.n	8008856 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	2180      	movs	r1, #128	; 0x80
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f829 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e01f      	b.n	8008888 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	60ba      	str	r2, [r7, #8]
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1b7      	bne.n	80087d0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2200      	movs	r2, #0
 8008868:	2140      	movs	r1, #64	; 0x40
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f810 	bl	8008890 <UART_WaitOnFlagUntilTimeout>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e006      	b.n	8008888 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	e000      	b.n	8008888 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008886:	2302      	movs	r3, #2
  }
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	4613      	mov	r3, r2
 800889e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a0:	e02c      	b.n	80088fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d028      	beq.n	80088fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d007      	beq.n	80088c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80088b0:	f7fb fee0 	bl	8004674 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d21d      	bcs.n	80088fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	695a      	ldr	r2, [r3, #20]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0201 	bic.w	r2, r2, #1
 80088de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e00f      	b.n	800891c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	4013      	ands	r3, r2
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	429a      	cmp	r2, r3
 800890a:	bf0c      	ite	eq
 800890c:	2301      	moveq	r3, #1
 800890e:	2300      	movne	r3, #0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	429a      	cmp	r2, r3
 8008918:	d0c3      	beq.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008966:	f023 030c 	bic.w	r3, r3, #12
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	430b      	orrs	r3, r1
 8008972:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699a      	ldr	r2, [r3, #24]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008992:	f040 818b 	bne.w	8008cac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4ac1      	ldr	r2, [pc, #772]	; (8008ca0 <UART_SetConfig+0x37c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d005      	beq.n	80089ac <UART_SetConfig+0x88>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4abf      	ldr	r2, [pc, #764]	; (8008ca4 <UART_SetConfig+0x380>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f040 80bd 	bne.w	8008b26 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089ac:	f7fe f9da 	bl	8006d64 <HAL_RCC_GetPCLK2Freq>
 80089b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	461d      	mov	r5, r3
 80089b6:	f04f 0600 	mov.w	r6, #0
 80089ba:	46a8      	mov	r8, r5
 80089bc:	46b1      	mov	r9, r6
 80089be:	eb18 0308 	adds.w	r3, r8, r8
 80089c2:	eb49 0409 	adc.w	r4, r9, r9
 80089c6:	4698      	mov	r8, r3
 80089c8:	46a1      	mov	r9, r4
 80089ca:	eb18 0805 	adds.w	r8, r8, r5
 80089ce:	eb49 0906 	adc.w	r9, r9, r6
 80089d2:	f04f 0100 	mov.w	r1, #0
 80089d6:	f04f 0200 	mov.w	r2, #0
 80089da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80089de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80089e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80089e6:	4688      	mov	r8, r1
 80089e8:	4691      	mov	r9, r2
 80089ea:	eb18 0005 	adds.w	r0, r8, r5
 80089ee:	eb49 0106 	adc.w	r1, r9, r6
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	461d      	mov	r5, r3
 80089f8:	f04f 0600 	mov.w	r6, #0
 80089fc:	196b      	adds	r3, r5, r5
 80089fe:	eb46 0406 	adc.w	r4, r6, r6
 8008a02:	461a      	mov	r2, r3
 8008a04:	4623      	mov	r3, r4
 8008a06:	f7f8 f93f 	bl	8000c88 <__aeabi_uldivmod>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4ba5      	ldr	r3, [pc, #660]	; (8008ca8 <UART_SetConfig+0x384>)
 8008a12:	fba3 2302 	umull	r2, r3, r3, r2
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	461d      	mov	r5, r3
 8008a20:	f04f 0600 	mov.w	r6, #0
 8008a24:	46a9      	mov	r9, r5
 8008a26:	46b2      	mov	sl, r6
 8008a28:	eb19 0309 	adds.w	r3, r9, r9
 8008a2c:	eb4a 040a 	adc.w	r4, sl, sl
 8008a30:	4699      	mov	r9, r3
 8008a32:	46a2      	mov	sl, r4
 8008a34:	eb19 0905 	adds.w	r9, r9, r5
 8008a38:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a3c:	f04f 0100 	mov.w	r1, #0
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a50:	4689      	mov	r9, r1
 8008a52:	4692      	mov	sl, r2
 8008a54:	eb19 0005 	adds.w	r0, r9, r5
 8008a58:	eb4a 0106 	adc.w	r1, sl, r6
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	461d      	mov	r5, r3
 8008a62:	f04f 0600 	mov.w	r6, #0
 8008a66:	196b      	adds	r3, r5, r5
 8008a68:	eb46 0406 	adc.w	r4, r6, r6
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4623      	mov	r3, r4
 8008a70:	f7f8 f90a 	bl	8000c88 <__aeabi_uldivmod>
 8008a74:	4603      	mov	r3, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4b8b      	ldr	r3, [pc, #556]	; (8008ca8 <UART_SetConfig+0x384>)
 8008a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	2164      	movs	r1, #100	; 0x64
 8008a84:	fb01 f303 	mul.w	r3, r1, r3
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	3332      	adds	r3, #50	; 0x32
 8008a8e:	4a86      	ldr	r2, [pc, #536]	; (8008ca8 <UART_SetConfig+0x384>)
 8008a90:	fba2 2303 	umull	r2, r3, r2, r3
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a9c:	4498      	add	r8, r3
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	461d      	mov	r5, r3
 8008aa2:	f04f 0600 	mov.w	r6, #0
 8008aa6:	46a9      	mov	r9, r5
 8008aa8:	46b2      	mov	sl, r6
 8008aaa:	eb19 0309 	adds.w	r3, r9, r9
 8008aae:	eb4a 040a 	adc.w	r4, sl, sl
 8008ab2:	4699      	mov	r9, r3
 8008ab4:	46a2      	mov	sl, r4
 8008ab6:	eb19 0905 	adds.w	r9, r9, r5
 8008aba:	eb4a 0a06 	adc.w	sl, sl, r6
 8008abe:	f04f 0100 	mov.w	r1, #0
 8008ac2:	f04f 0200 	mov.w	r2, #0
 8008ac6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ace:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ad2:	4689      	mov	r9, r1
 8008ad4:	4692      	mov	sl, r2
 8008ad6:	eb19 0005 	adds.w	r0, r9, r5
 8008ada:	eb4a 0106 	adc.w	r1, sl, r6
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	461d      	mov	r5, r3
 8008ae4:	f04f 0600 	mov.w	r6, #0
 8008ae8:	196b      	adds	r3, r5, r5
 8008aea:	eb46 0406 	adc.w	r4, r6, r6
 8008aee:	461a      	mov	r2, r3
 8008af0:	4623      	mov	r3, r4
 8008af2:	f7f8 f8c9 	bl	8000c88 <__aeabi_uldivmod>
 8008af6:	4603      	mov	r3, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	461a      	mov	r2, r3
 8008afc:	4b6a      	ldr	r3, [pc, #424]	; (8008ca8 <UART_SetConfig+0x384>)
 8008afe:	fba3 1302 	umull	r1, r3, r3, r2
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	2164      	movs	r1, #100	; 0x64
 8008b06:	fb01 f303 	mul.w	r3, r1, r3
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	3332      	adds	r3, #50	; 0x32
 8008b10:	4a65      	ldr	r2, [pc, #404]	; (8008ca8 <UART_SetConfig+0x384>)
 8008b12:	fba2 2303 	umull	r2, r3, r2, r3
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	f003 0207 	and.w	r2, r3, #7
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4442      	add	r2, r8
 8008b22:	609a      	str	r2, [r3, #8]
 8008b24:	e26f      	b.n	8009006 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b26:	f7fe f909 	bl	8006d3c <HAL_RCC_GetPCLK1Freq>
 8008b2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	461d      	mov	r5, r3
 8008b30:	f04f 0600 	mov.w	r6, #0
 8008b34:	46a8      	mov	r8, r5
 8008b36:	46b1      	mov	r9, r6
 8008b38:	eb18 0308 	adds.w	r3, r8, r8
 8008b3c:	eb49 0409 	adc.w	r4, r9, r9
 8008b40:	4698      	mov	r8, r3
 8008b42:	46a1      	mov	r9, r4
 8008b44:	eb18 0805 	adds.w	r8, r8, r5
 8008b48:	eb49 0906 	adc.w	r9, r9, r6
 8008b4c:	f04f 0100 	mov.w	r1, #0
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b60:	4688      	mov	r8, r1
 8008b62:	4691      	mov	r9, r2
 8008b64:	eb18 0005 	adds.w	r0, r8, r5
 8008b68:	eb49 0106 	adc.w	r1, r9, r6
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	461d      	mov	r5, r3
 8008b72:	f04f 0600 	mov.w	r6, #0
 8008b76:	196b      	adds	r3, r5, r5
 8008b78:	eb46 0406 	adc.w	r4, r6, r6
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4623      	mov	r3, r4
 8008b80:	f7f8 f882 	bl	8000c88 <__aeabi_uldivmod>
 8008b84:	4603      	mov	r3, r0
 8008b86:	460c      	mov	r4, r1
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b47      	ldr	r3, [pc, #284]	; (8008ca8 <UART_SetConfig+0x384>)
 8008b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8008b90:	095b      	lsrs	r3, r3, #5
 8008b92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	461d      	mov	r5, r3
 8008b9a:	f04f 0600 	mov.w	r6, #0
 8008b9e:	46a9      	mov	r9, r5
 8008ba0:	46b2      	mov	sl, r6
 8008ba2:	eb19 0309 	adds.w	r3, r9, r9
 8008ba6:	eb4a 040a 	adc.w	r4, sl, sl
 8008baa:	4699      	mov	r9, r3
 8008bac:	46a2      	mov	sl, r4
 8008bae:	eb19 0905 	adds.w	r9, r9, r5
 8008bb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8008bb6:	f04f 0100 	mov.w	r1, #0
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bca:	4689      	mov	r9, r1
 8008bcc:	4692      	mov	sl, r2
 8008bce:	eb19 0005 	adds.w	r0, r9, r5
 8008bd2:	eb4a 0106 	adc.w	r1, sl, r6
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	461d      	mov	r5, r3
 8008bdc:	f04f 0600 	mov.w	r6, #0
 8008be0:	196b      	adds	r3, r5, r5
 8008be2:	eb46 0406 	adc.w	r4, r6, r6
 8008be6:	461a      	mov	r2, r3
 8008be8:	4623      	mov	r3, r4
 8008bea:	f7f8 f84d 	bl	8000c88 <__aeabi_uldivmod>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <UART_SetConfig+0x384>)
 8008bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8008bfa:	095b      	lsrs	r3, r3, #5
 8008bfc:	2164      	movs	r1, #100	; 0x64
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	3332      	adds	r3, #50	; 0x32
 8008c08:	4a27      	ldr	r2, [pc, #156]	; (8008ca8 <UART_SetConfig+0x384>)
 8008c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c16:	4498      	add	r8, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	461d      	mov	r5, r3
 8008c1c:	f04f 0600 	mov.w	r6, #0
 8008c20:	46a9      	mov	r9, r5
 8008c22:	46b2      	mov	sl, r6
 8008c24:	eb19 0309 	adds.w	r3, r9, r9
 8008c28:	eb4a 040a 	adc.w	r4, sl, sl
 8008c2c:	4699      	mov	r9, r3
 8008c2e:	46a2      	mov	sl, r4
 8008c30:	eb19 0905 	adds.w	r9, r9, r5
 8008c34:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c38:	f04f 0100 	mov.w	r1, #0
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c4c:	4689      	mov	r9, r1
 8008c4e:	4692      	mov	sl, r2
 8008c50:	eb19 0005 	adds.w	r0, r9, r5
 8008c54:	eb4a 0106 	adc.w	r1, sl, r6
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	461d      	mov	r5, r3
 8008c5e:	f04f 0600 	mov.w	r6, #0
 8008c62:	196b      	adds	r3, r5, r5
 8008c64:	eb46 0406 	adc.w	r4, r6, r6
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4623      	mov	r3, r4
 8008c6c:	f7f8 f80c 	bl	8000c88 <__aeabi_uldivmod>
 8008c70:	4603      	mov	r3, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <UART_SetConfig+0x384>)
 8008c78:	fba3 1302 	umull	r1, r3, r3, r2
 8008c7c:	095b      	lsrs	r3, r3, #5
 8008c7e:	2164      	movs	r1, #100	; 0x64
 8008c80:	fb01 f303 	mul.w	r3, r1, r3
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	3332      	adds	r3, #50	; 0x32
 8008c8a:	4a07      	ldr	r2, [pc, #28]	; (8008ca8 <UART_SetConfig+0x384>)
 8008c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c90:	095b      	lsrs	r3, r3, #5
 8008c92:	f003 0207 	and.w	r2, r3, #7
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4442      	add	r2, r8
 8008c9c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008c9e:	e1b2      	b.n	8009006 <UART_SetConfig+0x6e2>
 8008ca0:	40011000 	.word	0x40011000
 8008ca4:	40011400 	.word	0x40011400
 8008ca8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4ad7      	ldr	r2, [pc, #860]	; (8009010 <UART_SetConfig+0x6ec>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d005      	beq.n	8008cc2 <UART_SetConfig+0x39e>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4ad6      	ldr	r2, [pc, #856]	; (8009014 <UART_SetConfig+0x6f0>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	f040 80d1 	bne.w	8008e64 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cc2:	f7fe f84f 	bl	8006d64 <HAL_RCC_GetPCLK2Freq>
 8008cc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	469a      	mov	sl, r3
 8008ccc:	f04f 0b00 	mov.w	fp, #0
 8008cd0:	46d0      	mov	r8, sl
 8008cd2:	46d9      	mov	r9, fp
 8008cd4:	eb18 0308 	adds.w	r3, r8, r8
 8008cd8:	eb49 0409 	adc.w	r4, r9, r9
 8008cdc:	4698      	mov	r8, r3
 8008cde:	46a1      	mov	r9, r4
 8008ce0:	eb18 080a 	adds.w	r8, r8, sl
 8008ce4:	eb49 090b 	adc.w	r9, r9, fp
 8008ce8:	f04f 0100 	mov.w	r1, #0
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008cf4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008cf8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cfc:	4688      	mov	r8, r1
 8008cfe:	4691      	mov	r9, r2
 8008d00:	eb1a 0508 	adds.w	r5, sl, r8
 8008d04:	eb4b 0609 	adc.w	r6, fp, r9
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f04f 0200 	mov.w	r2, #0
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	f04f 0400 	mov.w	r4, #0
 8008d1a:	0094      	lsls	r4, r2, #2
 8008d1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d20:	008b      	lsls	r3, r1, #2
 8008d22:	461a      	mov	r2, r3
 8008d24:	4623      	mov	r3, r4
 8008d26:	4628      	mov	r0, r5
 8008d28:	4631      	mov	r1, r6
 8008d2a:	f7f7 ffad 	bl	8000c88 <__aeabi_uldivmod>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	461a      	mov	r2, r3
 8008d34:	4bb8      	ldr	r3, [pc, #736]	; (8009018 <UART_SetConfig+0x6f4>)
 8008d36:	fba3 2302 	umull	r2, r3, r3, r2
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	469b      	mov	fp, r3
 8008d44:	f04f 0c00 	mov.w	ip, #0
 8008d48:	46d9      	mov	r9, fp
 8008d4a:	46e2      	mov	sl, ip
 8008d4c:	eb19 0309 	adds.w	r3, r9, r9
 8008d50:	eb4a 040a 	adc.w	r4, sl, sl
 8008d54:	4699      	mov	r9, r3
 8008d56:	46a2      	mov	sl, r4
 8008d58:	eb19 090b 	adds.w	r9, r9, fp
 8008d5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d74:	4689      	mov	r9, r1
 8008d76:	4692      	mov	sl, r2
 8008d78:	eb1b 0509 	adds.w	r5, fp, r9
 8008d7c:	eb4c 060a 	adc.w	r6, ip, sl
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4619      	mov	r1, r3
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	f04f 0400 	mov.w	r4, #0
 8008d92:	0094      	lsls	r4, r2, #2
 8008d94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d98:	008b      	lsls	r3, r1, #2
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	4628      	mov	r0, r5
 8008da0:	4631      	mov	r1, r6
 8008da2:	f7f7 ff71 	bl	8000c88 <__aeabi_uldivmod>
 8008da6:	4603      	mov	r3, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	461a      	mov	r2, r3
 8008dac:	4b9a      	ldr	r3, [pc, #616]	; (8009018 <UART_SetConfig+0x6f4>)
 8008dae:	fba3 1302 	umull	r1, r3, r3, r2
 8008db2:	095b      	lsrs	r3, r3, #5
 8008db4:	2164      	movs	r1, #100	; 0x64
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	3332      	adds	r3, #50	; 0x32
 8008dc0:	4a95      	ldr	r2, [pc, #596]	; (8009018 <UART_SetConfig+0x6f4>)
 8008dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc6:	095b      	lsrs	r3, r3, #5
 8008dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dcc:	4498      	add	r8, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	469b      	mov	fp, r3
 8008dd2:	f04f 0c00 	mov.w	ip, #0
 8008dd6:	46d9      	mov	r9, fp
 8008dd8:	46e2      	mov	sl, ip
 8008dda:	eb19 0309 	adds.w	r3, r9, r9
 8008dde:	eb4a 040a 	adc.w	r4, sl, sl
 8008de2:	4699      	mov	r9, r3
 8008de4:	46a2      	mov	sl, r4
 8008de6:	eb19 090b 	adds.w	r9, r9, fp
 8008dea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008dee:	f04f 0100 	mov.w	r1, #0
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e02:	4689      	mov	r9, r1
 8008e04:	4692      	mov	sl, r2
 8008e06:	eb1b 0509 	adds.w	r5, fp, r9
 8008e0a:	eb4c 060a 	adc.w	r6, ip, sl
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	4619      	mov	r1, r3
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	f04f 0300 	mov.w	r3, #0
 8008e1c:	f04f 0400 	mov.w	r4, #0
 8008e20:	0094      	lsls	r4, r2, #2
 8008e22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e26:	008b      	lsls	r3, r1, #2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4623      	mov	r3, r4
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	4631      	mov	r1, r6
 8008e30:	f7f7 ff2a 	bl	8000c88 <__aeabi_uldivmod>
 8008e34:	4603      	mov	r3, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b77      	ldr	r3, [pc, #476]	; (8009018 <UART_SetConfig+0x6f4>)
 8008e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	2164      	movs	r1, #100	; 0x64
 8008e44:	fb01 f303 	mul.w	r3, r1, r3
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	3332      	adds	r3, #50	; 0x32
 8008e4e:	4a72      	ldr	r2, [pc, #456]	; (8009018 <UART_SetConfig+0x6f4>)
 8008e50:	fba2 2303 	umull	r2, r3, r2, r3
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	f003 020f 	and.w	r2, r3, #15
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4442      	add	r2, r8
 8008e60:	609a      	str	r2, [r3, #8]
 8008e62:	e0d0      	b.n	8009006 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e64:	f7fd ff6a 	bl	8006d3c <HAL_RCC_GetPCLK1Freq>
 8008e68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	469a      	mov	sl, r3
 8008e6e:	f04f 0b00 	mov.w	fp, #0
 8008e72:	46d0      	mov	r8, sl
 8008e74:	46d9      	mov	r9, fp
 8008e76:	eb18 0308 	adds.w	r3, r8, r8
 8008e7a:	eb49 0409 	adc.w	r4, r9, r9
 8008e7e:	4698      	mov	r8, r3
 8008e80:	46a1      	mov	r9, r4
 8008e82:	eb18 080a 	adds.w	r8, r8, sl
 8008e86:	eb49 090b 	adc.w	r9, r9, fp
 8008e8a:	f04f 0100 	mov.w	r1, #0
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e9e:	4688      	mov	r8, r1
 8008ea0:	4691      	mov	r9, r2
 8008ea2:	eb1a 0508 	adds.w	r5, sl, r8
 8008ea6:	eb4b 0609 	adc.w	r6, fp, r9
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	f04f 0400 	mov.w	r4, #0
 8008ebc:	0094      	lsls	r4, r2, #2
 8008ebe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ec2:	008b      	lsls	r3, r1, #2
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	4631      	mov	r1, r6
 8008ecc:	f7f7 fedc 	bl	8000c88 <__aeabi_uldivmod>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4b50      	ldr	r3, [pc, #320]	; (8009018 <UART_SetConfig+0x6f4>)
 8008ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	469b      	mov	fp, r3
 8008ee6:	f04f 0c00 	mov.w	ip, #0
 8008eea:	46d9      	mov	r9, fp
 8008eec:	46e2      	mov	sl, ip
 8008eee:	eb19 0309 	adds.w	r3, r9, r9
 8008ef2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ef6:	4699      	mov	r9, r3
 8008ef8:	46a2      	mov	sl, r4
 8008efa:	eb19 090b 	adds.w	r9, r9, fp
 8008efe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f02:	f04f 0100 	mov.w	r1, #0
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f16:	4689      	mov	r9, r1
 8008f18:	4692      	mov	sl, r2
 8008f1a:	eb1b 0509 	adds.w	r5, fp, r9
 8008f1e:	eb4c 060a 	adc.w	r6, ip, sl
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	4619      	mov	r1, r3
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	f04f 0400 	mov.w	r4, #0
 8008f34:	0094      	lsls	r4, r2, #2
 8008f36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f3a:	008b      	lsls	r3, r1, #2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4623      	mov	r3, r4
 8008f40:	4628      	mov	r0, r5
 8008f42:	4631      	mov	r1, r6
 8008f44:	f7f7 fea0 	bl	8000c88 <__aeabi_uldivmod>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b32      	ldr	r3, [pc, #200]	; (8009018 <UART_SetConfig+0x6f4>)
 8008f50:	fba3 1302 	umull	r1, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	2164      	movs	r1, #100	; 0x64
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	3332      	adds	r3, #50	; 0x32
 8008f62:	4a2d      	ldr	r2, [pc, #180]	; (8009018 <UART_SetConfig+0x6f4>)
 8008f64:	fba2 2303 	umull	r2, r3, r2, r3
 8008f68:	095b      	lsrs	r3, r3, #5
 8008f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f6e:	4498      	add	r8, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	469b      	mov	fp, r3
 8008f74:	f04f 0c00 	mov.w	ip, #0
 8008f78:	46d9      	mov	r9, fp
 8008f7a:	46e2      	mov	sl, ip
 8008f7c:	eb19 0309 	adds.w	r3, r9, r9
 8008f80:	eb4a 040a 	adc.w	r4, sl, sl
 8008f84:	4699      	mov	r9, r3
 8008f86:	46a2      	mov	sl, r4
 8008f88:	eb19 090b 	adds.w	r9, r9, fp
 8008f8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f90:	f04f 0100 	mov.w	r1, #0
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fa4:	4689      	mov	r9, r1
 8008fa6:	4692      	mov	sl, r2
 8008fa8:	eb1b 0509 	adds.w	r5, fp, r9
 8008fac:	eb4c 060a 	adc.w	r6, ip, sl
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	f04f 0400 	mov.w	r4, #0
 8008fc2:	0094      	lsls	r4, r2, #2
 8008fc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fc8:	008b      	lsls	r3, r1, #2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4623      	mov	r3, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	f7f7 fe59 	bl	8000c88 <__aeabi_uldivmod>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	461a      	mov	r2, r3
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <UART_SetConfig+0x6f4>)
 8008fde:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	2164      	movs	r1, #100	; 0x64
 8008fe6:	fb01 f303 	mul.w	r3, r1, r3
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	3332      	adds	r3, #50	; 0x32
 8008ff0:	4a09      	ldr	r2, [pc, #36]	; (8009018 <UART_SetConfig+0x6f4>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	f003 020f 	and.w	r2, r3, #15
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4442      	add	r2, r8
 8009002:	609a      	str	r2, [r3, #8]
}
 8009004:	e7ff      	b.n	8009006 <UART_SetConfig+0x6e2>
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009010:	40011000 	.word	0x40011000
 8009014:	40011400 	.word	0x40011400
 8009018:	51eb851f 	.word	0x51eb851f

0800901c <__errno>:
 800901c:	4b01      	ldr	r3, [pc, #4]	; (8009024 <__errno+0x8>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000000c 	.word	0x2000000c

08009028 <__libc_init_array>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4e0d      	ldr	r6, [pc, #52]	; (8009060 <__libc_init_array+0x38>)
 800902c:	4c0d      	ldr	r4, [pc, #52]	; (8009064 <__libc_init_array+0x3c>)
 800902e:	1ba4      	subs	r4, r4, r6
 8009030:	10a4      	asrs	r4, r4, #2
 8009032:	2500      	movs	r5, #0
 8009034:	42a5      	cmp	r5, r4
 8009036:	d109      	bne.n	800904c <__libc_init_array+0x24>
 8009038:	4e0b      	ldr	r6, [pc, #44]	; (8009068 <__libc_init_array+0x40>)
 800903a:	4c0c      	ldr	r4, [pc, #48]	; (800906c <__libc_init_array+0x44>)
 800903c:	f004 fa5e 	bl	800d4fc <_init>
 8009040:	1ba4      	subs	r4, r4, r6
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	2500      	movs	r5, #0
 8009046:	42a5      	cmp	r5, r4
 8009048:	d105      	bne.n	8009056 <__libc_init_array+0x2e>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009050:	4798      	blx	r3
 8009052:	3501      	adds	r5, #1
 8009054:	e7ee      	b.n	8009034 <__libc_init_array+0xc>
 8009056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800905a:	4798      	blx	r3
 800905c:	3501      	adds	r5, #1
 800905e:	e7f2      	b.n	8009046 <__libc_init_array+0x1e>
 8009060:	0800db88 	.word	0x0800db88
 8009064:	0800db88 	.word	0x0800db88
 8009068:	0800db88 	.word	0x0800db88
 800906c:	0800db8c 	.word	0x0800db8c

08009070 <memcpy>:
 8009070:	b510      	push	{r4, lr}
 8009072:	1e43      	subs	r3, r0, #1
 8009074:	440a      	add	r2, r1
 8009076:	4291      	cmp	r1, r2
 8009078:	d100      	bne.n	800907c <memcpy+0xc>
 800907a:	bd10      	pop	{r4, pc}
 800907c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009084:	e7f7      	b.n	8009076 <memcpy+0x6>

08009086 <memset>:
 8009086:	4402      	add	r2, r0
 8009088:	4603      	mov	r3, r0
 800908a:	4293      	cmp	r3, r2
 800908c:	d100      	bne.n	8009090 <memset+0xa>
 800908e:	4770      	bx	lr
 8009090:	f803 1b01 	strb.w	r1, [r3], #1
 8009094:	e7f9      	b.n	800908a <memset+0x4>

08009096 <__cvt>:
 8009096:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800909a:	ec55 4b10 	vmov	r4, r5, d0
 800909e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80090a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090a4:	2d00      	cmp	r5, #0
 80090a6:	460e      	mov	r6, r1
 80090a8:	4691      	mov	r9, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	bfb8      	it	lt
 80090ae:	4622      	movlt	r2, r4
 80090b0:	462b      	mov	r3, r5
 80090b2:	f027 0720 	bic.w	r7, r7, #32
 80090b6:	bfbb      	ittet	lt
 80090b8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090bc:	461d      	movlt	r5, r3
 80090be:	2300      	movge	r3, #0
 80090c0:	232d      	movlt	r3, #45	; 0x2d
 80090c2:	bfb8      	it	lt
 80090c4:	4614      	movlt	r4, r2
 80090c6:	2f46      	cmp	r7, #70	; 0x46
 80090c8:	700b      	strb	r3, [r1, #0]
 80090ca:	d004      	beq.n	80090d6 <__cvt+0x40>
 80090cc:	2f45      	cmp	r7, #69	; 0x45
 80090ce:	d100      	bne.n	80090d2 <__cvt+0x3c>
 80090d0:	3601      	adds	r6, #1
 80090d2:	2102      	movs	r1, #2
 80090d4:	e000      	b.n	80090d8 <__cvt+0x42>
 80090d6:	2103      	movs	r1, #3
 80090d8:	ab03      	add	r3, sp, #12
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	ab02      	add	r3, sp, #8
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4632      	mov	r2, r6
 80090e2:	4653      	mov	r3, sl
 80090e4:	ec45 4b10 	vmov	d0, r4, r5
 80090e8:	f001 feb2 	bl	800ae50 <_dtoa_r>
 80090ec:	2f47      	cmp	r7, #71	; 0x47
 80090ee:	4680      	mov	r8, r0
 80090f0:	d102      	bne.n	80090f8 <__cvt+0x62>
 80090f2:	f019 0f01 	tst.w	r9, #1
 80090f6:	d026      	beq.n	8009146 <__cvt+0xb0>
 80090f8:	2f46      	cmp	r7, #70	; 0x46
 80090fa:	eb08 0906 	add.w	r9, r8, r6
 80090fe:	d111      	bne.n	8009124 <__cvt+0x8e>
 8009100:	f898 3000 	ldrb.w	r3, [r8]
 8009104:	2b30      	cmp	r3, #48	; 0x30
 8009106:	d10a      	bne.n	800911e <__cvt+0x88>
 8009108:	2200      	movs	r2, #0
 800910a:	2300      	movs	r3, #0
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8009114:	b918      	cbnz	r0, 800911e <__cvt+0x88>
 8009116:	f1c6 0601 	rsb	r6, r6, #1
 800911a:	f8ca 6000 	str.w	r6, [sl]
 800911e:	f8da 3000 	ldr.w	r3, [sl]
 8009122:	4499      	add	r9, r3
 8009124:	2200      	movs	r2, #0
 8009126:	2300      	movs	r3, #0
 8009128:	4620      	mov	r0, r4
 800912a:	4629      	mov	r1, r5
 800912c:	f7f7 fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009130:	b938      	cbnz	r0, 8009142 <__cvt+0xac>
 8009132:	2230      	movs	r2, #48	; 0x30
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	454b      	cmp	r3, r9
 8009138:	d205      	bcs.n	8009146 <__cvt+0xb0>
 800913a:	1c59      	adds	r1, r3, #1
 800913c:	9103      	str	r1, [sp, #12]
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	e7f8      	b.n	8009134 <__cvt+0x9e>
 8009142:	f8cd 900c 	str.w	r9, [sp, #12]
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800914a:	eba3 0308 	sub.w	r3, r3, r8
 800914e:	4640      	mov	r0, r8
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	b004      	add	sp, #16
 8009154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009158 <__exponent>:
 8009158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800915a:	2900      	cmp	r1, #0
 800915c:	4604      	mov	r4, r0
 800915e:	bfba      	itte	lt
 8009160:	4249      	neglt	r1, r1
 8009162:	232d      	movlt	r3, #45	; 0x2d
 8009164:	232b      	movge	r3, #43	; 0x2b
 8009166:	2909      	cmp	r1, #9
 8009168:	f804 2b02 	strb.w	r2, [r4], #2
 800916c:	7043      	strb	r3, [r0, #1]
 800916e:	dd20      	ble.n	80091b2 <__exponent+0x5a>
 8009170:	f10d 0307 	add.w	r3, sp, #7
 8009174:	461f      	mov	r7, r3
 8009176:	260a      	movs	r6, #10
 8009178:	fb91 f5f6 	sdiv	r5, r1, r6
 800917c:	fb06 1115 	mls	r1, r6, r5, r1
 8009180:	3130      	adds	r1, #48	; 0x30
 8009182:	2d09      	cmp	r5, #9
 8009184:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009188:	f103 32ff 	add.w	r2, r3, #4294967295
 800918c:	4629      	mov	r1, r5
 800918e:	dc09      	bgt.n	80091a4 <__exponent+0x4c>
 8009190:	3130      	adds	r1, #48	; 0x30
 8009192:	3b02      	subs	r3, #2
 8009194:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009198:	42bb      	cmp	r3, r7
 800919a:	4622      	mov	r2, r4
 800919c:	d304      	bcc.n	80091a8 <__exponent+0x50>
 800919e:	1a10      	subs	r0, r2, r0
 80091a0:	b003      	add	sp, #12
 80091a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a4:	4613      	mov	r3, r2
 80091a6:	e7e7      	b.n	8009178 <__exponent+0x20>
 80091a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091ac:	f804 2b01 	strb.w	r2, [r4], #1
 80091b0:	e7f2      	b.n	8009198 <__exponent+0x40>
 80091b2:	2330      	movs	r3, #48	; 0x30
 80091b4:	4419      	add	r1, r3
 80091b6:	7083      	strb	r3, [r0, #2]
 80091b8:	1d02      	adds	r2, r0, #4
 80091ba:	70c1      	strb	r1, [r0, #3]
 80091bc:	e7ef      	b.n	800919e <__exponent+0x46>
	...

080091c0 <_printf_float>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	b08d      	sub	sp, #52	; 0x34
 80091c6:	460c      	mov	r4, r1
 80091c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80091cc:	4616      	mov	r6, r2
 80091ce:	461f      	mov	r7, r3
 80091d0:	4605      	mov	r5, r0
 80091d2:	f003 f89b 	bl	800c30c <_localeconv_r>
 80091d6:	6803      	ldr	r3, [r0, #0]
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7f6 fff8 	bl	80001d0 <strlen>
 80091e0:	2300      	movs	r3, #0
 80091e2:	930a      	str	r3, [sp, #40]	; 0x28
 80091e4:	f8d8 3000 	ldr.w	r3, [r8]
 80091e8:	9005      	str	r0, [sp, #20]
 80091ea:	3307      	adds	r3, #7
 80091ec:	f023 0307 	bic.w	r3, r3, #7
 80091f0:	f103 0208 	add.w	r2, r3, #8
 80091f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80091f8:	f8d4 b000 	ldr.w	fp, [r4]
 80091fc:	f8c8 2000 	str.w	r2, [r8]
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009208:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800920c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009210:	9307      	str	r3, [sp, #28]
 8009212:	f8cd 8018 	str.w	r8, [sp, #24]
 8009216:	f04f 32ff 	mov.w	r2, #4294967295
 800921a:	4ba7      	ldr	r3, [pc, #668]	; (80094b8 <_printf_float+0x2f8>)
 800921c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009220:	f7f7 fc84 	bl	8000b2c <__aeabi_dcmpun>
 8009224:	bb70      	cbnz	r0, 8009284 <_printf_float+0xc4>
 8009226:	f04f 32ff 	mov.w	r2, #4294967295
 800922a:	4ba3      	ldr	r3, [pc, #652]	; (80094b8 <_printf_float+0x2f8>)
 800922c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009230:	f7f7 fc5e 	bl	8000af0 <__aeabi_dcmple>
 8009234:	bb30      	cbnz	r0, 8009284 <_printf_float+0xc4>
 8009236:	2200      	movs	r2, #0
 8009238:	2300      	movs	r3, #0
 800923a:	4640      	mov	r0, r8
 800923c:	4649      	mov	r1, r9
 800923e:	f7f7 fc4d 	bl	8000adc <__aeabi_dcmplt>
 8009242:	b110      	cbz	r0, 800924a <_printf_float+0x8a>
 8009244:	232d      	movs	r3, #45	; 0x2d
 8009246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800924a:	4a9c      	ldr	r2, [pc, #624]	; (80094bc <_printf_float+0x2fc>)
 800924c:	4b9c      	ldr	r3, [pc, #624]	; (80094c0 <_printf_float+0x300>)
 800924e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009252:	bf8c      	ite	hi
 8009254:	4690      	movhi	r8, r2
 8009256:	4698      	movls	r8, r3
 8009258:	2303      	movs	r3, #3
 800925a:	f02b 0204 	bic.w	r2, fp, #4
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	6022      	str	r2, [r4, #0]
 8009262:	f04f 0900 	mov.w	r9, #0
 8009266:	9700      	str	r7, [sp, #0]
 8009268:	4633      	mov	r3, r6
 800926a:	aa0b      	add	r2, sp, #44	; 0x2c
 800926c:	4621      	mov	r1, r4
 800926e:	4628      	mov	r0, r5
 8009270:	f000 f9e6 	bl	8009640 <_printf_common>
 8009274:	3001      	adds	r0, #1
 8009276:	f040 808d 	bne.w	8009394 <_printf_float+0x1d4>
 800927a:	f04f 30ff 	mov.w	r0, #4294967295
 800927e:	b00d      	add	sp, #52	; 0x34
 8009280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009284:	4642      	mov	r2, r8
 8009286:	464b      	mov	r3, r9
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 fc4e 	bl	8000b2c <__aeabi_dcmpun>
 8009290:	b110      	cbz	r0, 8009298 <_printf_float+0xd8>
 8009292:	4a8c      	ldr	r2, [pc, #560]	; (80094c4 <_printf_float+0x304>)
 8009294:	4b8c      	ldr	r3, [pc, #560]	; (80094c8 <_printf_float+0x308>)
 8009296:	e7da      	b.n	800924e <_printf_float+0x8e>
 8009298:	6861      	ldr	r1, [r4, #4]
 800929a:	1c4b      	adds	r3, r1, #1
 800929c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80092a0:	a80a      	add	r0, sp, #40	; 0x28
 80092a2:	d13e      	bne.n	8009322 <_printf_float+0x162>
 80092a4:	2306      	movs	r3, #6
 80092a6:	6063      	str	r3, [r4, #4]
 80092a8:	2300      	movs	r3, #0
 80092aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80092ae:	ab09      	add	r3, sp, #36	; 0x24
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	ec49 8b10 	vmov	d0, r8, r9
 80092b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	f8cd a004 	str.w	sl, [sp, #4]
 80092c0:	6861      	ldr	r1, [r4, #4]
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7ff fee7 	bl	8009096 <__cvt>
 80092c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80092cc:	2b47      	cmp	r3, #71	; 0x47
 80092ce:	4680      	mov	r8, r0
 80092d0:	d109      	bne.n	80092e6 <_printf_float+0x126>
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	1cd8      	adds	r0, r3, #3
 80092d6:	db02      	blt.n	80092de <_printf_float+0x11e>
 80092d8:	6862      	ldr	r2, [r4, #4]
 80092da:	4293      	cmp	r3, r2
 80092dc:	dd47      	ble.n	800936e <_printf_float+0x1ae>
 80092de:	f1aa 0a02 	sub.w	sl, sl, #2
 80092e2:	fa5f fa8a 	uxtb.w	sl, sl
 80092e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80092ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ec:	d824      	bhi.n	8009338 <_printf_float+0x178>
 80092ee:	3901      	subs	r1, #1
 80092f0:	4652      	mov	r2, sl
 80092f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092f6:	9109      	str	r1, [sp, #36]	; 0x24
 80092f8:	f7ff ff2e 	bl	8009158 <__exponent>
 80092fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092fe:	1813      	adds	r3, r2, r0
 8009300:	2a01      	cmp	r2, #1
 8009302:	4681      	mov	r9, r0
 8009304:	6123      	str	r3, [r4, #16]
 8009306:	dc02      	bgt.n	800930e <_printf_float+0x14e>
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	07d1      	lsls	r1, r2, #31
 800930c:	d501      	bpl.n	8009312 <_printf_float+0x152>
 800930e:	3301      	adds	r3, #1
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0a5      	beq.n	8009266 <_printf_float+0xa6>
 800931a:	232d      	movs	r3, #45	; 0x2d
 800931c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009320:	e7a1      	b.n	8009266 <_printf_float+0xa6>
 8009322:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009326:	f000 8177 	beq.w	8009618 <_printf_float+0x458>
 800932a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800932e:	d1bb      	bne.n	80092a8 <_printf_float+0xe8>
 8009330:	2900      	cmp	r1, #0
 8009332:	d1b9      	bne.n	80092a8 <_printf_float+0xe8>
 8009334:	2301      	movs	r3, #1
 8009336:	e7b6      	b.n	80092a6 <_printf_float+0xe6>
 8009338:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800933c:	d119      	bne.n	8009372 <_printf_float+0x1b2>
 800933e:	2900      	cmp	r1, #0
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	dd0c      	ble.n	800935e <_printf_float+0x19e>
 8009344:	6121      	str	r1, [r4, #16]
 8009346:	b913      	cbnz	r3, 800934e <_printf_float+0x18e>
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	07d2      	lsls	r2, r2, #31
 800934c:	d502      	bpl.n	8009354 <_printf_float+0x194>
 800934e:	3301      	adds	r3, #1
 8009350:	440b      	add	r3, r1
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009356:	65a3      	str	r3, [r4, #88]	; 0x58
 8009358:	f04f 0900 	mov.w	r9, #0
 800935c:	e7d9      	b.n	8009312 <_printf_float+0x152>
 800935e:	b913      	cbnz	r3, 8009366 <_printf_float+0x1a6>
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	07d0      	lsls	r0, r2, #31
 8009364:	d501      	bpl.n	800936a <_printf_float+0x1aa>
 8009366:	3302      	adds	r3, #2
 8009368:	e7f3      	b.n	8009352 <_printf_float+0x192>
 800936a:	2301      	movs	r3, #1
 800936c:	e7f1      	b.n	8009352 <_printf_float+0x192>
 800936e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009372:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009376:	4293      	cmp	r3, r2
 8009378:	db05      	blt.n	8009386 <_printf_float+0x1c6>
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	07d1      	lsls	r1, r2, #31
 8009380:	d5e8      	bpl.n	8009354 <_printf_float+0x194>
 8009382:	3301      	adds	r3, #1
 8009384:	e7e5      	b.n	8009352 <_printf_float+0x192>
 8009386:	2b00      	cmp	r3, #0
 8009388:	bfd4      	ite	le
 800938a:	f1c3 0302 	rsble	r3, r3, #2
 800938e:	2301      	movgt	r3, #1
 8009390:	4413      	add	r3, r2
 8009392:	e7de      	b.n	8009352 <_printf_float+0x192>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	055a      	lsls	r2, r3, #21
 8009398:	d407      	bmi.n	80093aa <_printf_float+0x1ea>
 800939a:	6923      	ldr	r3, [r4, #16]
 800939c:	4642      	mov	r2, r8
 800939e:	4631      	mov	r1, r6
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b8      	blx	r7
 80093a4:	3001      	adds	r0, #1
 80093a6:	d12b      	bne.n	8009400 <_printf_float+0x240>
 80093a8:	e767      	b.n	800927a <_printf_float+0xba>
 80093aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80093ae:	f240 80dc 	bls.w	800956a <_printf_float+0x3aa>
 80093b2:	2200      	movs	r2, #0
 80093b4:	2300      	movs	r3, #0
 80093b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093ba:	f7f7 fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d033      	beq.n	800942a <_printf_float+0x26a>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4a41      	ldr	r2, [pc, #260]	; (80094cc <_printf_float+0x30c>)
 80093c6:	4631      	mov	r1, r6
 80093c8:	4628      	mov	r0, r5
 80093ca:	47b8      	blx	r7
 80093cc:	3001      	adds	r0, #1
 80093ce:	f43f af54 	beq.w	800927a <_printf_float+0xba>
 80093d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093d6:	429a      	cmp	r2, r3
 80093d8:	db02      	blt.n	80093e0 <_printf_float+0x220>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	07d8      	lsls	r0, r3, #31
 80093de:	d50f      	bpl.n	8009400 <_printf_float+0x240>
 80093e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	f43f af45 	beq.w	800927a <_printf_float+0xba>
 80093f0:	f04f 0800 	mov.w	r8, #0
 80093f4:	f104 091a 	add.w	r9, r4, #26
 80093f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fa:	3b01      	subs	r3, #1
 80093fc:	4543      	cmp	r3, r8
 80093fe:	dc09      	bgt.n	8009414 <_printf_float+0x254>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	079b      	lsls	r3, r3, #30
 8009404:	f100 8103 	bmi.w	800960e <_printf_float+0x44e>
 8009408:	68e0      	ldr	r0, [r4, #12]
 800940a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940c:	4298      	cmp	r0, r3
 800940e:	bfb8      	it	lt
 8009410:	4618      	movlt	r0, r3
 8009412:	e734      	b.n	800927e <_printf_float+0xbe>
 8009414:	2301      	movs	r3, #1
 8009416:	464a      	mov	r2, r9
 8009418:	4631      	mov	r1, r6
 800941a:	4628      	mov	r0, r5
 800941c:	47b8      	blx	r7
 800941e:	3001      	adds	r0, #1
 8009420:	f43f af2b 	beq.w	800927a <_printf_float+0xba>
 8009424:	f108 0801 	add.w	r8, r8, #1
 8009428:	e7e6      	b.n	80093f8 <_printf_float+0x238>
 800942a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942c:	2b00      	cmp	r3, #0
 800942e:	dc2b      	bgt.n	8009488 <_printf_float+0x2c8>
 8009430:	2301      	movs	r3, #1
 8009432:	4a26      	ldr	r2, [pc, #152]	; (80094cc <_printf_float+0x30c>)
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	f43f af1d 	beq.w	800927a <_printf_float+0xba>
 8009440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009442:	b923      	cbnz	r3, 800944e <_printf_float+0x28e>
 8009444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009446:	b913      	cbnz	r3, 800944e <_printf_float+0x28e>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	07d9      	lsls	r1, r3, #31
 800944c:	d5d8      	bpl.n	8009400 <_printf_float+0x240>
 800944e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009452:	4631      	mov	r1, r6
 8009454:	4628      	mov	r0, r5
 8009456:	47b8      	blx	r7
 8009458:	3001      	adds	r0, #1
 800945a:	f43f af0e 	beq.w	800927a <_printf_float+0xba>
 800945e:	f04f 0900 	mov.w	r9, #0
 8009462:	f104 0a1a 	add.w	sl, r4, #26
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	425b      	negs	r3, r3
 800946a:	454b      	cmp	r3, r9
 800946c:	dc01      	bgt.n	8009472 <_printf_float+0x2b2>
 800946e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009470:	e794      	b.n	800939c <_printf_float+0x1dc>
 8009472:	2301      	movs	r3, #1
 8009474:	4652      	mov	r2, sl
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	f43f aefc 	beq.w	800927a <_printf_float+0xba>
 8009482:	f109 0901 	add.w	r9, r9, #1
 8009486:	e7ee      	b.n	8009466 <_printf_float+0x2a6>
 8009488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800948a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800948c:	429a      	cmp	r2, r3
 800948e:	bfa8      	it	ge
 8009490:	461a      	movge	r2, r3
 8009492:	2a00      	cmp	r2, #0
 8009494:	4691      	mov	r9, r2
 8009496:	dd07      	ble.n	80094a8 <_printf_float+0x2e8>
 8009498:	4613      	mov	r3, r2
 800949a:	4631      	mov	r1, r6
 800949c:	4642      	mov	r2, r8
 800949e:	4628      	mov	r0, r5
 80094a0:	47b8      	blx	r7
 80094a2:	3001      	adds	r0, #1
 80094a4:	f43f aee9 	beq.w	800927a <_printf_float+0xba>
 80094a8:	f104 031a 	add.w	r3, r4, #26
 80094ac:	f04f 0b00 	mov.w	fp, #0
 80094b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094b4:	9306      	str	r3, [sp, #24]
 80094b6:	e015      	b.n	80094e4 <_printf_float+0x324>
 80094b8:	7fefffff 	.word	0x7fefffff
 80094bc:	0800d864 	.word	0x0800d864
 80094c0:	0800d860 	.word	0x0800d860
 80094c4:	0800d86c 	.word	0x0800d86c
 80094c8:	0800d868 	.word	0x0800d868
 80094cc:	0800d870 	.word	0x0800d870
 80094d0:	2301      	movs	r3, #1
 80094d2:	9a06      	ldr	r2, [sp, #24]
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f aecd 	beq.w	800927a <_printf_float+0xba>
 80094e0:	f10b 0b01 	add.w	fp, fp, #1
 80094e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80094e8:	ebaa 0309 	sub.w	r3, sl, r9
 80094ec:	455b      	cmp	r3, fp
 80094ee:	dcef      	bgt.n	80094d0 <_printf_float+0x310>
 80094f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f4:	429a      	cmp	r2, r3
 80094f6:	44d0      	add	r8, sl
 80094f8:	db15      	blt.n	8009526 <_printf_float+0x366>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	07da      	lsls	r2, r3, #31
 80094fe:	d412      	bmi.n	8009526 <_printf_float+0x366>
 8009500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009504:	eba3 020a 	sub.w	r2, r3, sl
 8009508:	eba3 0a01 	sub.w	sl, r3, r1
 800950c:	4592      	cmp	sl, r2
 800950e:	bfa8      	it	ge
 8009510:	4692      	movge	sl, r2
 8009512:	f1ba 0f00 	cmp.w	sl, #0
 8009516:	dc0e      	bgt.n	8009536 <_printf_float+0x376>
 8009518:	f04f 0800 	mov.w	r8, #0
 800951c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009520:	f104 091a 	add.w	r9, r4, #26
 8009524:	e019      	b.n	800955a <_printf_float+0x39a>
 8009526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800952a:	4631      	mov	r1, r6
 800952c:	4628      	mov	r0, r5
 800952e:	47b8      	blx	r7
 8009530:	3001      	adds	r0, #1
 8009532:	d1e5      	bne.n	8009500 <_printf_float+0x340>
 8009534:	e6a1      	b.n	800927a <_printf_float+0xba>
 8009536:	4653      	mov	r3, sl
 8009538:	4642      	mov	r2, r8
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	d1e9      	bne.n	8009518 <_printf_float+0x358>
 8009544:	e699      	b.n	800927a <_printf_float+0xba>
 8009546:	2301      	movs	r3, #1
 8009548:	464a      	mov	r2, r9
 800954a:	4631      	mov	r1, r6
 800954c:	4628      	mov	r0, r5
 800954e:	47b8      	blx	r7
 8009550:	3001      	adds	r0, #1
 8009552:	f43f ae92 	beq.w	800927a <_printf_float+0xba>
 8009556:	f108 0801 	add.w	r8, r8, #1
 800955a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	eba3 030a 	sub.w	r3, r3, sl
 8009564:	4543      	cmp	r3, r8
 8009566:	dcee      	bgt.n	8009546 <_printf_float+0x386>
 8009568:	e74a      	b.n	8009400 <_printf_float+0x240>
 800956a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800956c:	2a01      	cmp	r2, #1
 800956e:	dc01      	bgt.n	8009574 <_printf_float+0x3b4>
 8009570:	07db      	lsls	r3, r3, #31
 8009572:	d53a      	bpl.n	80095ea <_printf_float+0x42a>
 8009574:	2301      	movs	r3, #1
 8009576:	4642      	mov	r2, r8
 8009578:	4631      	mov	r1, r6
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	f43f ae7b 	beq.w	800927a <_printf_float+0xba>
 8009584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009588:	4631      	mov	r1, r6
 800958a:	4628      	mov	r0, r5
 800958c:	47b8      	blx	r7
 800958e:	3001      	adds	r0, #1
 8009590:	f108 0801 	add.w	r8, r8, #1
 8009594:	f43f ae71 	beq.w	800927a <_printf_float+0xba>
 8009598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959a:	2200      	movs	r2, #0
 800959c:	f103 3aff 	add.w	sl, r3, #4294967295
 80095a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095a4:	2300      	movs	r3, #0
 80095a6:	f7f7 fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80095aa:	b9c8      	cbnz	r0, 80095e0 <_printf_float+0x420>
 80095ac:	4653      	mov	r3, sl
 80095ae:	4642      	mov	r2, r8
 80095b0:	4631      	mov	r1, r6
 80095b2:	4628      	mov	r0, r5
 80095b4:	47b8      	blx	r7
 80095b6:	3001      	adds	r0, #1
 80095b8:	d10e      	bne.n	80095d8 <_printf_float+0x418>
 80095ba:	e65e      	b.n	800927a <_printf_float+0xba>
 80095bc:	2301      	movs	r3, #1
 80095be:	4652      	mov	r2, sl
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	f43f ae57 	beq.w	800927a <_printf_float+0xba>
 80095cc:	f108 0801 	add.w	r8, r8, #1
 80095d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d2:	3b01      	subs	r3, #1
 80095d4:	4543      	cmp	r3, r8
 80095d6:	dcf1      	bgt.n	80095bc <_printf_float+0x3fc>
 80095d8:	464b      	mov	r3, r9
 80095da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095de:	e6de      	b.n	800939e <_printf_float+0x1de>
 80095e0:	f04f 0800 	mov.w	r8, #0
 80095e4:	f104 0a1a 	add.w	sl, r4, #26
 80095e8:	e7f2      	b.n	80095d0 <_printf_float+0x410>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e7df      	b.n	80095ae <_printf_float+0x3ee>
 80095ee:	2301      	movs	r3, #1
 80095f0:	464a      	mov	r2, r9
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	f43f ae3e 	beq.w	800927a <_printf_float+0xba>
 80095fe:	f108 0801 	add.w	r8, r8, #1
 8009602:	68e3      	ldr	r3, [r4, #12]
 8009604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009606:	1a9b      	subs	r3, r3, r2
 8009608:	4543      	cmp	r3, r8
 800960a:	dcf0      	bgt.n	80095ee <_printf_float+0x42e>
 800960c:	e6fc      	b.n	8009408 <_printf_float+0x248>
 800960e:	f04f 0800 	mov.w	r8, #0
 8009612:	f104 0919 	add.w	r9, r4, #25
 8009616:	e7f4      	b.n	8009602 <_printf_float+0x442>
 8009618:	2900      	cmp	r1, #0
 800961a:	f43f ae8b 	beq.w	8009334 <_printf_float+0x174>
 800961e:	2300      	movs	r3, #0
 8009620:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009624:	ab09      	add	r3, sp, #36	; 0x24
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	ec49 8b10 	vmov	d0, r8, r9
 800962c:	6022      	str	r2, [r4, #0]
 800962e:	f8cd a004 	str.w	sl, [sp, #4]
 8009632:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009636:	4628      	mov	r0, r5
 8009638:	f7ff fd2d 	bl	8009096 <__cvt>
 800963c:	4680      	mov	r8, r0
 800963e:	e648      	b.n	80092d2 <_printf_float+0x112>

08009640 <_printf_common>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	4691      	mov	r9, r2
 8009646:	461f      	mov	r7, r3
 8009648:	688a      	ldr	r2, [r1, #8]
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009650:	4293      	cmp	r3, r2
 8009652:	bfb8      	it	lt
 8009654:	4613      	movlt	r3, r2
 8009656:	f8c9 3000 	str.w	r3, [r9]
 800965a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800965e:	4606      	mov	r6, r0
 8009660:	460c      	mov	r4, r1
 8009662:	b112      	cbz	r2, 800966a <_printf_common+0x2a>
 8009664:	3301      	adds	r3, #1
 8009666:	f8c9 3000 	str.w	r3, [r9]
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	0699      	lsls	r1, r3, #26
 800966e:	bf42      	ittt	mi
 8009670:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009674:	3302      	addmi	r3, #2
 8009676:	f8c9 3000 	strmi.w	r3, [r9]
 800967a:	6825      	ldr	r5, [r4, #0]
 800967c:	f015 0506 	ands.w	r5, r5, #6
 8009680:	d107      	bne.n	8009692 <_printf_common+0x52>
 8009682:	f104 0a19 	add.w	sl, r4, #25
 8009686:	68e3      	ldr	r3, [r4, #12]
 8009688:	f8d9 2000 	ldr.w	r2, [r9]
 800968c:	1a9b      	subs	r3, r3, r2
 800968e:	42ab      	cmp	r3, r5
 8009690:	dc28      	bgt.n	80096e4 <_printf_common+0xa4>
 8009692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009696:	6822      	ldr	r2, [r4, #0]
 8009698:	3300      	adds	r3, #0
 800969a:	bf18      	it	ne
 800969c:	2301      	movne	r3, #1
 800969e:	0692      	lsls	r2, r2, #26
 80096a0:	d42d      	bmi.n	80096fe <_printf_common+0xbe>
 80096a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096a6:	4639      	mov	r1, r7
 80096a8:	4630      	mov	r0, r6
 80096aa:	47c0      	blx	r8
 80096ac:	3001      	adds	r0, #1
 80096ae:	d020      	beq.n	80096f2 <_printf_common+0xb2>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	68e5      	ldr	r5, [r4, #12]
 80096b4:	f8d9 2000 	ldr.w	r2, [r9]
 80096b8:	f003 0306 	and.w	r3, r3, #6
 80096bc:	2b04      	cmp	r3, #4
 80096be:	bf08      	it	eq
 80096c0:	1aad      	subeq	r5, r5, r2
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	6922      	ldr	r2, [r4, #16]
 80096c6:	bf0c      	ite	eq
 80096c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096cc:	2500      	movne	r5, #0
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bfc4      	itt	gt
 80096d2:	1a9b      	subgt	r3, r3, r2
 80096d4:	18ed      	addgt	r5, r5, r3
 80096d6:	f04f 0900 	mov.w	r9, #0
 80096da:	341a      	adds	r4, #26
 80096dc:	454d      	cmp	r5, r9
 80096de:	d11a      	bne.n	8009716 <_printf_common+0xd6>
 80096e0:	2000      	movs	r0, #0
 80096e2:	e008      	b.n	80096f6 <_printf_common+0xb6>
 80096e4:	2301      	movs	r3, #1
 80096e6:	4652      	mov	r2, sl
 80096e8:	4639      	mov	r1, r7
 80096ea:	4630      	mov	r0, r6
 80096ec:	47c0      	blx	r8
 80096ee:	3001      	adds	r0, #1
 80096f0:	d103      	bne.n	80096fa <_printf_common+0xba>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	3501      	adds	r5, #1
 80096fc:	e7c3      	b.n	8009686 <_printf_common+0x46>
 80096fe:	18e1      	adds	r1, r4, r3
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	2030      	movs	r0, #48	; 0x30
 8009704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009708:	4422      	add	r2, r4
 800970a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800970e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009712:	3302      	adds	r3, #2
 8009714:	e7c5      	b.n	80096a2 <_printf_common+0x62>
 8009716:	2301      	movs	r3, #1
 8009718:	4622      	mov	r2, r4
 800971a:	4639      	mov	r1, r7
 800971c:	4630      	mov	r0, r6
 800971e:	47c0      	blx	r8
 8009720:	3001      	adds	r0, #1
 8009722:	d0e6      	beq.n	80096f2 <_printf_common+0xb2>
 8009724:	f109 0901 	add.w	r9, r9, #1
 8009728:	e7d8      	b.n	80096dc <_printf_common+0x9c>
	...

0800972c <_printf_i>:
 800972c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009734:	460c      	mov	r4, r1
 8009736:	7e09      	ldrb	r1, [r1, #24]
 8009738:	b085      	sub	sp, #20
 800973a:	296e      	cmp	r1, #110	; 0x6e
 800973c:	4617      	mov	r7, r2
 800973e:	4606      	mov	r6, r0
 8009740:	4698      	mov	r8, r3
 8009742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009744:	f000 80b3 	beq.w	80098ae <_printf_i+0x182>
 8009748:	d822      	bhi.n	8009790 <_printf_i+0x64>
 800974a:	2963      	cmp	r1, #99	; 0x63
 800974c:	d036      	beq.n	80097bc <_printf_i+0x90>
 800974e:	d80a      	bhi.n	8009766 <_printf_i+0x3a>
 8009750:	2900      	cmp	r1, #0
 8009752:	f000 80b9 	beq.w	80098c8 <_printf_i+0x19c>
 8009756:	2958      	cmp	r1, #88	; 0x58
 8009758:	f000 8083 	beq.w	8009862 <_printf_i+0x136>
 800975c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009764:	e032      	b.n	80097cc <_printf_i+0xa0>
 8009766:	2964      	cmp	r1, #100	; 0x64
 8009768:	d001      	beq.n	800976e <_printf_i+0x42>
 800976a:	2969      	cmp	r1, #105	; 0x69
 800976c:	d1f6      	bne.n	800975c <_printf_i+0x30>
 800976e:	6820      	ldr	r0, [r4, #0]
 8009770:	6813      	ldr	r3, [r2, #0]
 8009772:	0605      	lsls	r5, r0, #24
 8009774:	f103 0104 	add.w	r1, r3, #4
 8009778:	d52a      	bpl.n	80097d0 <_printf_i+0xa4>
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	da03      	bge.n	800978a <_printf_i+0x5e>
 8009782:	222d      	movs	r2, #45	; 0x2d
 8009784:	425b      	negs	r3, r3
 8009786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800978a:	486f      	ldr	r0, [pc, #444]	; (8009948 <_printf_i+0x21c>)
 800978c:	220a      	movs	r2, #10
 800978e:	e039      	b.n	8009804 <_printf_i+0xd8>
 8009790:	2973      	cmp	r1, #115	; 0x73
 8009792:	f000 809d 	beq.w	80098d0 <_printf_i+0x1a4>
 8009796:	d808      	bhi.n	80097aa <_printf_i+0x7e>
 8009798:	296f      	cmp	r1, #111	; 0x6f
 800979a:	d020      	beq.n	80097de <_printf_i+0xb2>
 800979c:	2970      	cmp	r1, #112	; 0x70
 800979e:	d1dd      	bne.n	800975c <_printf_i+0x30>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	f043 0320 	orr.w	r3, r3, #32
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	e003      	b.n	80097b2 <_printf_i+0x86>
 80097aa:	2975      	cmp	r1, #117	; 0x75
 80097ac:	d017      	beq.n	80097de <_printf_i+0xb2>
 80097ae:	2978      	cmp	r1, #120	; 0x78
 80097b0:	d1d4      	bne.n	800975c <_printf_i+0x30>
 80097b2:	2378      	movs	r3, #120	; 0x78
 80097b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097b8:	4864      	ldr	r0, [pc, #400]	; (800994c <_printf_i+0x220>)
 80097ba:	e055      	b.n	8009868 <_printf_i+0x13c>
 80097bc:	6813      	ldr	r3, [r2, #0]
 80097be:	1d19      	adds	r1, r3, #4
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6011      	str	r1, [r2, #0]
 80097c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097cc:	2301      	movs	r3, #1
 80097ce:	e08c      	b.n	80098ea <_printf_i+0x1be>
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6011      	str	r1, [r2, #0]
 80097d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097d8:	bf18      	it	ne
 80097da:	b21b      	sxthne	r3, r3
 80097dc:	e7cf      	b.n	800977e <_printf_i+0x52>
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	6825      	ldr	r5, [r4, #0]
 80097e2:	1d18      	adds	r0, r3, #4
 80097e4:	6010      	str	r0, [r2, #0]
 80097e6:	0628      	lsls	r0, r5, #24
 80097e8:	d501      	bpl.n	80097ee <_printf_i+0xc2>
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	e002      	b.n	80097f4 <_printf_i+0xc8>
 80097ee:	0668      	lsls	r0, r5, #25
 80097f0:	d5fb      	bpl.n	80097ea <_printf_i+0xbe>
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	4854      	ldr	r0, [pc, #336]	; (8009948 <_printf_i+0x21c>)
 80097f6:	296f      	cmp	r1, #111	; 0x6f
 80097f8:	bf14      	ite	ne
 80097fa:	220a      	movne	r2, #10
 80097fc:	2208      	moveq	r2, #8
 80097fe:	2100      	movs	r1, #0
 8009800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009804:	6865      	ldr	r5, [r4, #4]
 8009806:	60a5      	str	r5, [r4, #8]
 8009808:	2d00      	cmp	r5, #0
 800980a:	f2c0 8095 	blt.w	8009938 <_printf_i+0x20c>
 800980e:	6821      	ldr	r1, [r4, #0]
 8009810:	f021 0104 	bic.w	r1, r1, #4
 8009814:	6021      	str	r1, [r4, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d13d      	bne.n	8009896 <_printf_i+0x16a>
 800981a:	2d00      	cmp	r5, #0
 800981c:	f040 808e 	bne.w	800993c <_printf_i+0x210>
 8009820:	4665      	mov	r5, ip
 8009822:	2a08      	cmp	r2, #8
 8009824:	d10b      	bne.n	800983e <_printf_i+0x112>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d508      	bpl.n	800983e <_printf_i+0x112>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	bfde      	ittt	le
 8009834:	2330      	movle	r3, #48	; 0x30
 8009836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800983a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800983e:	ebac 0305 	sub.w	r3, ip, r5
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	f8cd 8000 	str.w	r8, [sp]
 8009848:	463b      	mov	r3, r7
 800984a:	aa03      	add	r2, sp, #12
 800984c:	4621      	mov	r1, r4
 800984e:	4630      	mov	r0, r6
 8009850:	f7ff fef6 	bl	8009640 <_printf_common>
 8009854:	3001      	adds	r0, #1
 8009856:	d14d      	bne.n	80098f4 <_printf_i+0x1c8>
 8009858:	f04f 30ff 	mov.w	r0, #4294967295
 800985c:	b005      	add	sp, #20
 800985e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009862:	4839      	ldr	r0, [pc, #228]	; (8009948 <_printf_i+0x21c>)
 8009864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009868:	6813      	ldr	r3, [r2, #0]
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	1d1d      	adds	r5, r3, #4
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6015      	str	r5, [r2, #0]
 8009872:	060a      	lsls	r2, r1, #24
 8009874:	d50b      	bpl.n	800988e <_printf_i+0x162>
 8009876:	07ca      	lsls	r2, r1, #31
 8009878:	bf44      	itt	mi
 800987a:	f041 0120 	orrmi.w	r1, r1, #32
 800987e:	6021      	strmi	r1, [r4, #0]
 8009880:	b91b      	cbnz	r3, 800988a <_printf_i+0x15e>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	f022 0220 	bic.w	r2, r2, #32
 8009888:	6022      	str	r2, [r4, #0]
 800988a:	2210      	movs	r2, #16
 800988c:	e7b7      	b.n	80097fe <_printf_i+0xd2>
 800988e:	064d      	lsls	r5, r1, #25
 8009890:	bf48      	it	mi
 8009892:	b29b      	uxthmi	r3, r3
 8009894:	e7ef      	b.n	8009876 <_printf_i+0x14a>
 8009896:	4665      	mov	r5, ip
 8009898:	fbb3 f1f2 	udiv	r1, r3, r2
 800989c:	fb02 3311 	mls	r3, r2, r1, r3
 80098a0:	5cc3      	ldrb	r3, [r0, r3]
 80098a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098a6:	460b      	mov	r3, r1
 80098a8:	2900      	cmp	r1, #0
 80098aa:	d1f5      	bne.n	8009898 <_printf_i+0x16c>
 80098ac:	e7b9      	b.n	8009822 <_printf_i+0xf6>
 80098ae:	6813      	ldr	r3, [r2, #0]
 80098b0:	6825      	ldr	r5, [r4, #0]
 80098b2:	6961      	ldr	r1, [r4, #20]
 80098b4:	1d18      	adds	r0, r3, #4
 80098b6:	6010      	str	r0, [r2, #0]
 80098b8:	0628      	lsls	r0, r5, #24
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	d501      	bpl.n	80098c2 <_printf_i+0x196>
 80098be:	6019      	str	r1, [r3, #0]
 80098c0:	e002      	b.n	80098c8 <_printf_i+0x19c>
 80098c2:	066a      	lsls	r2, r5, #25
 80098c4:	d5fb      	bpl.n	80098be <_printf_i+0x192>
 80098c6:	8019      	strh	r1, [r3, #0]
 80098c8:	2300      	movs	r3, #0
 80098ca:	6123      	str	r3, [r4, #16]
 80098cc:	4665      	mov	r5, ip
 80098ce:	e7b9      	b.n	8009844 <_printf_i+0x118>
 80098d0:	6813      	ldr	r3, [r2, #0]
 80098d2:	1d19      	adds	r1, r3, #4
 80098d4:	6011      	str	r1, [r2, #0]
 80098d6:	681d      	ldr	r5, [r3, #0]
 80098d8:	6862      	ldr	r2, [r4, #4]
 80098da:	2100      	movs	r1, #0
 80098dc:	4628      	mov	r0, r5
 80098de:	f7f6 fc7f 	bl	80001e0 <memchr>
 80098e2:	b108      	cbz	r0, 80098e8 <_printf_i+0x1bc>
 80098e4:	1b40      	subs	r0, r0, r5
 80098e6:	6060      	str	r0, [r4, #4]
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	6123      	str	r3, [r4, #16]
 80098ec:	2300      	movs	r3, #0
 80098ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f2:	e7a7      	b.n	8009844 <_printf_i+0x118>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	462a      	mov	r2, r5
 80098f8:	4639      	mov	r1, r7
 80098fa:	4630      	mov	r0, r6
 80098fc:	47c0      	blx	r8
 80098fe:	3001      	adds	r0, #1
 8009900:	d0aa      	beq.n	8009858 <_printf_i+0x12c>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	079b      	lsls	r3, r3, #30
 8009906:	d413      	bmi.n	8009930 <_printf_i+0x204>
 8009908:	68e0      	ldr	r0, [r4, #12]
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	4298      	cmp	r0, r3
 800990e:	bfb8      	it	lt
 8009910:	4618      	movlt	r0, r3
 8009912:	e7a3      	b.n	800985c <_printf_i+0x130>
 8009914:	2301      	movs	r3, #1
 8009916:	464a      	mov	r2, r9
 8009918:	4639      	mov	r1, r7
 800991a:	4630      	mov	r0, r6
 800991c:	47c0      	blx	r8
 800991e:	3001      	adds	r0, #1
 8009920:	d09a      	beq.n	8009858 <_printf_i+0x12c>
 8009922:	3501      	adds	r5, #1
 8009924:	68e3      	ldr	r3, [r4, #12]
 8009926:	9a03      	ldr	r2, [sp, #12]
 8009928:	1a9b      	subs	r3, r3, r2
 800992a:	42ab      	cmp	r3, r5
 800992c:	dcf2      	bgt.n	8009914 <_printf_i+0x1e8>
 800992e:	e7eb      	b.n	8009908 <_printf_i+0x1dc>
 8009930:	2500      	movs	r5, #0
 8009932:	f104 0919 	add.w	r9, r4, #25
 8009936:	e7f5      	b.n	8009924 <_printf_i+0x1f8>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1ac      	bne.n	8009896 <_printf_i+0x16a>
 800993c:	7803      	ldrb	r3, [r0, #0]
 800993e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009942:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009946:	e76c      	b.n	8009822 <_printf_i+0xf6>
 8009948:	0800d872 	.word	0x0800d872
 800994c:	0800d883 	.word	0x0800d883

08009950 <_scanf_float>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	469a      	mov	sl, r3
 8009956:	688b      	ldr	r3, [r1, #8]
 8009958:	4616      	mov	r6, r2
 800995a:	1e5a      	subs	r2, r3, #1
 800995c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009960:	b087      	sub	sp, #28
 8009962:	bf83      	ittte	hi
 8009964:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009968:	189b      	addhi	r3, r3, r2
 800996a:	9301      	strhi	r3, [sp, #4]
 800996c:	2300      	movls	r3, #0
 800996e:	bf86      	itte	hi
 8009970:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009974:	608b      	strhi	r3, [r1, #8]
 8009976:	9301      	strls	r3, [sp, #4]
 8009978:	680b      	ldr	r3, [r1, #0]
 800997a:	4688      	mov	r8, r1
 800997c:	f04f 0b00 	mov.w	fp, #0
 8009980:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009984:	f848 3b1c 	str.w	r3, [r8], #28
 8009988:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800998c:	4607      	mov	r7, r0
 800998e:	460c      	mov	r4, r1
 8009990:	4645      	mov	r5, r8
 8009992:	465a      	mov	r2, fp
 8009994:	46d9      	mov	r9, fp
 8009996:	f8cd b008 	str.w	fp, [sp, #8]
 800999a:	68a1      	ldr	r1, [r4, #8]
 800999c:	b181      	cbz	r1, 80099c0 <_scanf_float+0x70>
 800999e:	6833      	ldr	r3, [r6, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b49      	cmp	r3, #73	; 0x49
 80099a4:	d071      	beq.n	8009a8a <_scanf_float+0x13a>
 80099a6:	d84d      	bhi.n	8009a44 <_scanf_float+0xf4>
 80099a8:	2b39      	cmp	r3, #57	; 0x39
 80099aa:	d840      	bhi.n	8009a2e <_scanf_float+0xde>
 80099ac:	2b31      	cmp	r3, #49	; 0x31
 80099ae:	f080 8088 	bcs.w	8009ac2 <_scanf_float+0x172>
 80099b2:	2b2d      	cmp	r3, #45	; 0x2d
 80099b4:	f000 8090 	beq.w	8009ad8 <_scanf_float+0x188>
 80099b8:	d815      	bhi.n	80099e6 <_scanf_float+0x96>
 80099ba:	2b2b      	cmp	r3, #43	; 0x2b
 80099bc:	f000 808c 	beq.w	8009ad8 <_scanf_float+0x188>
 80099c0:	f1b9 0f00 	cmp.w	r9, #0
 80099c4:	d003      	beq.n	80099ce <_scanf_float+0x7e>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	3a01      	subs	r2, #1
 80099d0:	2a01      	cmp	r2, #1
 80099d2:	f200 80ea 	bhi.w	8009baa <_scanf_float+0x25a>
 80099d6:	4545      	cmp	r5, r8
 80099d8:	f200 80dc 	bhi.w	8009b94 <_scanf_float+0x244>
 80099dc:	2601      	movs	r6, #1
 80099de:	4630      	mov	r0, r6
 80099e0:	b007      	add	sp, #28
 80099e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e6:	2b2e      	cmp	r3, #46	; 0x2e
 80099e8:	f000 809f 	beq.w	8009b2a <_scanf_float+0x1da>
 80099ec:	2b30      	cmp	r3, #48	; 0x30
 80099ee:	d1e7      	bne.n	80099c0 <_scanf_float+0x70>
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80099f6:	d064      	beq.n	8009ac2 <_scanf_float+0x172>
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80099fe:	6020      	str	r0, [r4, #0]
 8009a00:	f109 0901 	add.w	r9, r9, #1
 8009a04:	b11b      	cbz	r3, 8009a0e <_scanf_float+0xbe>
 8009a06:	3b01      	subs	r3, #1
 8009a08:	3101      	adds	r1, #1
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	60a1      	str	r1, [r4, #8]
 8009a0e:	68a3      	ldr	r3, [r4, #8]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	60a3      	str	r3, [r4, #8]
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	3301      	adds	r3, #1
 8009a18:	6123      	str	r3, [r4, #16]
 8009a1a:	6873      	ldr	r3, [r6, #4]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	6073      	str	r3, [r6, #4]
 8009a22:	f340 80ac 	ble.w	8009b7e <_scanf_float+0x22e>
 8009a26:	6833      	ldr	r3, [r6, #0]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	6033      	str	r3, [r6, #0]
 8009a2c:	e7b5      	b.n	800999a <_scanf_float+0x4a>
 8009a2e:	2b45      	cmp	r3, #69	; 0x45
 8009a30:	f000 8085 	beq.w	8009b3e <_scanf_float+0x1ee>
 8009a34:	2b46      	cmp	r3, #70	; 0x46
 8009a36:	d06a      	beq.n	8009b0e <_scanf_float+0x1be>
 8009a38:	2b41      	cmp	r3, #65	; 0x41
 8009a3a:	d1c1      	bne.n	80099c0 <_scanf_float+0x70>
 8009a3c:	2a01      	cmp	r2, #1
 8009a3e:	d1bf      	bne.n	80099c0 <_scanf_float+0x70>
 8009a40:	2202      	movs	r2, #2
 8009a42:	e046      	b.n	8009ad2 <_scanf_float+0x182>
 8009a44:	2b65      	cmp	r3, #101	; 0x65
 8009a46:	d07a      	beq.n	8009b3e <_scanf_float+0x1ee>
 8009a48:	d818      	bhi.n	8009a7c <_scanf_float+0x12c>
 8009a4a:	2b54      	cmp	r3, #84	; 0x54
 8009a4c:	d066      	beq.n	8009b1c <_scanf_float+0x1cc>
 8009a4e:	d811      	bhi.n	8009a74 <_scanf_float+0x124>
 8009a50:	2b4e      	cmp	r3, #78	; 0x4e
 8009a52:	d1b5      	bne.n	80099c0 <_scanf_float+0x70>
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	d146      	bne.n	8009ae6 <_scanf_float+0x196>
 8009a58:	f1b9 0f00 	cmp.w	r9, #0
 8009a5c:	d145      	bne.n	8009aea <_scanf_float+0x19a>
 8009a5e:	6821      	ldr	r1, [r4, #0]
 8009a60:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009a64:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009a68:	d13f      	bne.n	8009aea <_scanf_float+0x19a>
 8009a6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009a6e:	6021      	str	r1, [r4, #0]
 8009a70:	2201      	movs	r2, #1
 8009a72:	e02e      	b.n	8009ad2 <_scanf_float+0x182>
 8009a74:	2b59      	cmp	r3, #89	; 0x59
 8009a76:	d01e      	beq.n	8009ab6 <_scanf_float+0x166>
 8009a78:	2b61      	cmp	r3, #97	; 0x61
 8009a7a:	e7de      	b.n	8009a3a <_scanf_float+0xea>
 8009a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8009a7e:	d0e9      	beq.n	8009a54 <_scanf_float+0x104>
 8009a80:	d815      	bhi.n	8009aae <_scanf_float+0x15e>
 8009a82:	2b66      	cmp	r3, #102	; 0x66
 8009a84:	d043      	beq.n	8009b0e <_scanf_float+0x1be>
 8009a86:	2b69      	cmp	r3, #105	; 0x69
 8009a88:	d19a      	bne.n	80099c0 <_scanf_float+0x70>
 8009a8a:	f1bb 0f00 	cmp.w	fp, #0
 8009a8e:	d138      	bne.n	8009b02 <_scanf_float+0x1b2>
 8009a90:	f1b9 0f00 	cmp.w	r9, #0
 8009a94:	d197      	bne.n	80099c6 <_scanf_float+0x76>
 8009a96:	6821      	ldr	r1, [r4, #0]
 8009a98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009a9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009aa0:	d195      	bne.n	80099ce <_scanf_float+0x7e>
 8009aa2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009aa6:	6021      	str	r1, [r4, #0]
 8009aa8:	f04f 0b01 	mov.w	fp, #1
 8009aac:	e011      	b.n	8009ad2 <_scanf_float+0x182>
 8009aae:	2b74      	cmp	r3, #116	; 0x74
 8009ab0:	d034      	beq.n	8009b1c <_scanf_float+0x1cc>
 8009ab2:	2b79      	cmp	r3, #121	; 0x79
 8009ab4:	d184      	bne.n	80099c0 <_scanf_float+0x70>
 8009ab6:	f1bb 0f07 	cmp.w	fp, #7
 8009aba:	d181      	bne.n	80099c0 <_scanf_float+0x70>
 8009abc:	f04f 0b08 	mov.w	fp, #8
 8009ac0:	e007      	b.n	8009ad2 <_scanf_float+0x182>
 8009ac2:	eb12 0f0b 	cmn.w	r2, fp
 8009ac6:	f47f af7b 	bne.w	80099c0 <_scanf_float+0x70>
 8009aca:	6821      	ldr	r1, [r4, #0]
 8009acc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009ad0:	6021      	str	r1, [r4, #0]
 8009ad2:	702b      	strb	r3, [r5, #0]
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	e79a      	b.n	8009a0e <_scanf_float+0xbe>
 8009ad8:	6821      	ldr	r1, [r4, #0]
 8009ada:	0608      	lsls	r0, r1, #24
 8009adc:	f57f af70 	bpl.w	80099c0 <_scanf_float+0x70>
 8009ae0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ae4:	e7f4      	b.n	8009ad0 <_scanf_float+0x180>
 8009ae6:	2a02      	cmp	r2, #2
 8009ae8:	d047      	beq.n	8009b7a <_scanf_float+0x22a>
 8009aea:	f1bb 0f01 	cmp.w	fp, #1
 8009aee:	d003      	beq.n	8009af8 <_scanf_float+0x1a8>
 8009af0:	f1bb 0f04 	cmp.w	fp, #4
 8009af4:	f47f af64 	bne.w	80099c0 <_scanf_float+0x70>
 8009af8:	f10b 0b01 	add.w	fp, fp, #1
 8009afc:	fa5f fb8b 	uxtb.w	fp, fp
 8009b00:	e7e7      	b.n	8009ad2 <_scanf_float+0x182>
 8009b02:	f1bb 0f03 	cmp.w	fp, #3
 8009b06:	d0f7      	beq.n	8009af8 <_scanf_float+0x1a8>
 8009b08:	f1bb 0f05 	cmp.w	fp, #5
 8009b0c:	e7f2      	b.n	8009af4 <_scanf_float+0x1a4>
 8009b0e:	f1bb 0f02 	cmp.w	fp, #2
 8009b12:	f47f af55 	bne.w	80099c0 <_scanf_float+0x70>
 8009b16:	f04f 0b03 	mov.w	fp, #3
 8009b1a:	e7da      	b.n	8009ad2 <_scanf_float+0x182>
 8009b1c:	f1bb 0f06 	cmp.w	fp, #6
 8009b20:	f47f af4e 	bne.w	80099c0 <_scanf_float+0x70>
 8009b24:	f04f 0b07 	mov.w	fp, #7
 8009b28:	e7d3      	b.n	8009ad2 <_scanf_float+0x182>
 8009b2a:	6821      	ldr	r1, [r4, #0]
 8009b2c:	0588      	lsls	r0, r1, #22
 8009b2e:	f57f af47 	bpl.w	80099c0 <_scanf_float+0x70>
 8009b32:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009b36:	6021      	str	r1, [r4, #0]
 8009b38:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b3c:	e7c9      	b.n	8009ad2 <_scanf_float+0x182>
 8009b3e:	6821      	ldr	r1, [r4, #0]
 8009b40:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009b44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009b48:	d006      	beq.n	8009b58 <_scanf_float+0x208>
 8009b4a:	0548      	lsls	r0, r1, #21
 8009b4c:	f57f af38 	bpl.w	80099c0 <_scanf_float+0x70>
 8009b50:	f1b9 0f00 	cmp.w	r9, #0
 8009b54:	f43f af3b 	beq.w	80099ce <_scanf_float+0x7e>
 8009b58:	0588      	lsls	r0, r1, #22
 8009b5a:	bf58      	it	pl
 8009b5c:	9802      	ldrpl	r0, [sp, #8]
 8009b5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009b62:	bf58      	it	pl
 8009b64:	eba9 0000 	subpl.w	r0, r9, r0
 8009b68:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009b6c:	bf58      	it	pl
 8009b6e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009b72:	6021      	str	r1, [r4, #0]
 8009b74:	f04f 0900 	mov.w	r9, #0
 8009b78:	e7ab      	b.n	8009ad2 <_scanf_float+0x182>
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	e7a9      	b.n	8009ad2 <_scanf_float+0x182>
 8009b7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b82:	9205      	str	r2, [sp, #20]
 8009b84:	4631      	mov	r1, r6
 8009b86:	4638      	mov	r0, r7
 8009b88:	4798      	blx	r3
 8009b8a:	9a05      	ldr	r2, [sp, #20]
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	f43f af04 	beq.w	800999a <_scanf_float+0x4a>
 8009b92:	e715      	b.n	80099c0 <_scanf_float+0x70>
 8009b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	4798      	blx	r3
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	6123      	str	r3, [r4, #16]
 8009ba8:	e715      	b.n	80099d6 <_scanf_float+0x86>
 8009baa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009bae:	2b06      	cmp	r3, #6
 8009bb0:	d80a      	bhi.n	8009bc8 <_scanf_float+0x278>
 8009bb2:	f1bb 0f02 	cmp.w	fp, #2
 8009bb6:	d968      	bls.n	8009c8a <_scanf_float+0x33a>
 8009bb8:	f1ab 0b03 	sub.w	fp, fp, #3
 8009bbc:	fa5f fb8b 	uxtb.w	fp, fp
 8009bc0:	eba5 0b0b 	sub.w	fp, r5, fp
 8009bc4:	455d      	cmp	r5, fp
 8009bc6:	d14b      	bne.n	8009c60 <_scanf_float+0x310>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	05da      	lsls	r2, r3, #23
 8009bcc:	d51f      	bpl.n	8009c0e <_scanf_float+0x2be>
 8009bce:	055b      	lsls	r3, r3, #21
 8009bd0:	d468      	bmi.n	8009ca4 <_scanf_float+0x354>
 8009bd2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009bd6:	6923      	ldr	r3, [r4, #16]
 8009bd8:	2965      	cmp	r1, #101	; 0x65
 8009bda:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bde:	f105 3bff 	add.w	fp, r5, #4294967295
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	d00d      	beq.n	8009c02 <_scanf_float+0x2b2>
 8009be6:	2945      	cmp	r1, #69	; 0x45
 8009be8:	d00b      	beq.n	8009c02 <_scanf_float+0x2b2>
 8009bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bee:	4632      	mov	r2, r6
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	4798      	blx	r3
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	f1a5 0b02 	sub.w	fp, r5, #2
 8009c00:	6123      	str	r3, [r4, #16]
 8009c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c06:	4632      	mov	r2, r6
 8009c08:	4638      	mov	r0, r7
 8009c0a:	4798      	blx	r3
 8009c0c:	465d      	mov	r5, fp
 8009c0e:	6826      	ldr	r6, [r4, #0]
 8009c10:	f016 0610 	ands.w	r6, r6, #16
 8009c14:	d17a      	bne.n	8009d0c <_scanf_float+0x3bc>
 8009c16:	702e      	strb	r6, [r5, #0]
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c22:	d142      	bne.n	8009caa <_scanf_float+0x35a>
 8009c24:	9b02      	ldr	r3, [sp, #8]
 8009c26:	eba9 0303 	sub.w	r3, r9, r3
 8009c2a:	425a      	negs	r2, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d149      	bne.n	8009cc4 <_scanf_float+0x374>
 8009c30:	2200      	movs	r2, #0
 8009c32:	4641      	mov	r1, r8
 8009c34:	4638      	mov	r0, r7
 8009c36:	f000 ff1f 	bl	800aa78 <_strtod_r>
 8009c3a:	6825      	ldr	r5, [r4, #0]
 8009c3c:	f8da 3000 	ldr.w	r3, [sl]
 8009c40:	f015 0f02 	tst.w	r5, #2
 8009c44:	f103 0204 	add.w	r2, r3, #4
 8009c48:	ec59 8b10 	vmov	r8, r9, d0
 8009c4c:	f8ca 2000 	str.w	r2, [sl]
 8009c50:	d043      	beq.n	8009cda <_scanf_float+0x38a>
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	e9c3 8900 	strd	r8, r9, [r3]
 8009c58:	68e3      	ldr	r3, [r4, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	60e3      	str	r3, [r4, #12]
 8009c5e:	e6be      	b.n	80099de <_scanf_float+0x8e>
 8009c60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c68:	4632      	mov	r2, r6
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	4798      	blx	r3
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	6123      	str	r3, [r4, #16]
 8009c74:	e7a6      	b.n	8009bc4 <_scanf_float+0x274>
 8009c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c7e:	4632      	mov	r2, r6
 8009c80:	4638      	mov	r0, r7
 8009c82:	4798      	blx	r3
 8009c84:	6923      	ldr	r3, [r4, #16]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	6123      	str	r3, [r4, #16]
 8009c8a:	4545      	cmp	r5, r8
 8009c8c:	d8f3      	bhi.n	8009c76 <_scanf_float+0x326>
 8009c8e:	e6a5      	b.n	80099dc <_scanf_float+0x8c>
 8009c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c98:	4632      	mov	r2, r6
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	4798      	blx	r3
 8009c9e:	6923      	ldr	r3, [r4, #16]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	4545      	cmp	r5, r8
 8009ca6:	d8f3      	bhi.n	8009c90 <_scanf_float+0x340>
 8009ca8:	e698      	b.n	80099dc <_scanf_float+0x8c>
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0bf      	beq.n	8009c30 <_scanf_float+0x2e0>
 8009cb0:	9904      	ldr	r1, [sp, #16]
 8009cb2:	230a      	movs	r3, #10
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	3101      	adds	r1, #1
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f000 ff69 	bl	800ab90 <_strtol_r>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	9d04      	ldr	r5, [sp, #16]
 8009cc2:	1ac2      	subs	r2, r0, r3
 8009cc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009cc8:	429d      	cmp	r5, r3
 8009cca:	bf28      	it	cs
 8009ccc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009cd0:	490f      	ldr	r1, [pc, #60]	; (8009d10 <_scanf_float+0x3c0>)
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f000 f8a0 	bl	8009e18 <siprintf>
 8009cd8:	e7aa      	b.n	8009c30 <_scanf_float+0x2e0>
 8009cda:	f015 0504 	ands.w	r5, r5, #4
 8009cde:	d1b8      	bne.n	8009c52 <_scanf_float+0x302>
 8009ce0:	681f      	ldr	r7, [r3, #0]
 8009ce2:	ee10 2a10 	vmov	r2, s0
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	ee10 0a10 	vmov	r0, s0
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 ff1d 	bl	8000b2c <__aeabi_dcmpun>
 8009cf2:	b128      	cbz	r0, 8009d00 <_scanf_float+0x3b0>
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 f889 	bl	8009e0c <nanf>
 8009cfa:	ed87 0a00 	vstr	s0, [r7]
 8009cfe:	e7ab      	b.n	8009c58 <_scanf_float+0x308>
 8009d00:	4640      	mov	r0, r8
 8009d02:	4649      	mov	r1, r9
 8009d04:	f7f6 ff70 	bl	8000be8 <__aeabi_d2f>
 8009d08:	6038      	str	r0, [r7, #0]
 8009d0a:	e7a5      	b.n	8009c58 <_scanf_float+0x308>
 8009d0c:	2600      	movs	r6, #0
 8009d0e:	e666      	b.n	80099de <_scanf_float+0x8e>
 8009d10:	0800d894 	.word	0x0800d894

08009d14 <iprintf>:
 8009d14:	b40f      	push	{r0, r1, r2, r3}
 8009d16:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <iprintf+0x2c>)
 8009d18:	b513      	push	{r0, r1, r4, lr}
 8009d1a:	681c      	ldr	r4, [r3, #0]
 8009d1c:	b124      	cbz	r4, 8009d28 <iprintf+0x14>
 8009d1e:	69a3      	ldr	r3, [r4, #24]
 8009d20:	b913      	cbnz	r3, 8009d28 <iprintf+0x14>
 8009d22:	4620      	mov	r0, r4
 8009d24:	f001 ff3c 	bl	800bba0 <__sinit>
 8009d28:	ab05      	add	r3, sp, #20
 8009d2a:	9a04      	ldr	r2, [sp, #16]
 8009d2c:	68a1      	ldr	r1, [r4, #8]
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	4620      	mov	r0, r4
 8009d32:	f003 f9a9 	bl	800d088 <_vfiprintf_r>
 8009d36:	b002      	add	sp, #8
 8009d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d3c:	b004      	add	sp, #16
 8009d3e:	4770      	bx	lr
 8009d40:	2000000c 	.word	0x2000000c

08009d44 <_puts_r>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	460e      	mov	r6, r1
 8009d48:	4605      	mov	r5, r0
 8009d4a:	b118      	cbz	r0, 8009d54 <_puts_r+0x10>
 8009d4c:	6983      	ldr	r3, [r0, #24]
 8009d4e:	b90b      	cbnz	r3, 8009d54 <_puts_r+0x10>
 8009d50:	f001 ff26 	bl	800bba0 <__sinit>
 8009d54:	69ab      	ldr	r3, [r5, #24]
 8009d56:	68ac      	ldr	r4, [r5, #8]
 8009d58:	b913      	cbnz	r3, 8009d60 <_puts_r+0x1c>
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f001 ff20 	bl	800bba0 <__sinit>
 8009d60:	4b23      	ldr	r3, [pc, #140]	; (8009df0 <_puts_r+0xac>)
 8009d62:	429c      	cmp	r4, r3
 8009d64:	d117      	bne.n	8009d96 <_puts_r+0x52>
 8009d66:	686c      	ldr	r4, [r5, #4]
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	071b      	lsls	r3, r3, #28
 8009d6c:	d51d      	bpl.n	8009daa <_puts_r+0x66>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	b1db      	cbz	r3, 8009daa <_puts_r+0x66>
 8009d72:	3e01      	subs	r6, #1
 8009d74:	68a3      	ldr	r3, [r4, #8]
 8009d76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	60a3      	str	r3, [r4, #8]
 8009d7e:	b9e9      	cbnz	r1, 8009dbc <_puts_r+0x78>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	da2e      	bge.n	8009de2 <_puts_r+0x9e>
 8009d84:	4622      	mov	r2, r4
 8009d86:	210a      	movs	r1, #10
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f000 ff13 	bl	800abb4 <__swbuf_r>
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d011      	beq.n	8009db6 <_puts_r+0x72>
 8009d92:	200a      	movs	r0, #10
 8009d94:	e011      	b.n	8009dba <_puts_r+0x76>
 8009d96:	4b17      	ldr	r3, [pc, #92]	; (8009df4 <_puts_r+0xb0>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	d101      	bne.n	8009da0 <_puts_r+0x5c>
 8009d9c:	68ac      	ldr	r4, [r5, #8]
 8009d9e:	e7e3      	b.n	8009d68 <_puts_r+0x24>
 8009da0:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <_puts_r+0xb4>)
 8009da2:	429c      	cmp	r4, r3
 8009da4:	bf08      	it	eq
 8009da6:	68ec      	ldreq	r4, [r5, #12]
 8009da8:	e7de      	b.n	8009d68 <_puts_r+0x24>
 8009daa:	4621      	mov	r1, r4
 8009dac:	4628      	mov	r0, r5
 8009dae:	f000 ff53 	bl	800ac58 <__swsetup_r>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d0dd      	beq.n	8009d72 <_puts_r+0x2e>
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dba:	bd70      	pop	{r4, r5, r6, pc}
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	da04      	bge.n	8009dca <_puts_r+0x86>
 8009dc0:	69a2      	ldr	r2, [r4, #24]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	dc06      	bgt.n	8009dd4 <_puts_r+0x90>
 8009dc6:	290a      	cmp	r1, #10
 8009dc8:	d004      	beq.n	8009dd4 <_puts_r+0x90>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	7019      	strb	r1, [r3, #0]
 8009dd2:	e7cf      	b.n	8009d74 <_puts_r+0x30>
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f000 feec 	bl	800abb4 <__swbuf_r>
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d1c9      	bne.n	8009d74 <_puts_r+0x30>
 8009de0:	e7e9      	b.n	8009db6 <_puts_r+0x72>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	200a      	movs	r0, #10
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	6022      	str	r2, [r4, #0]
 8009dea:	7018      	strb	r0, [r3, #0]
 8009dec:	e7e5      	b.n	8009dba <_puts_r+0x76>
 8009dee:	bf00      	nop
 8009df0:	0800d920 	.word	0x0800d920
 8009df4:	0800d940 	.word	0x0800d940
 8009df8:	0800d900 	.word	0x0800d900

08009dfc <puts>:
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <puts+0xc>)
 8009dfe:	4601      	mov	r1, r0
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	f7ff bf9f 	b.w	8009d44 <_puts_r>
 8009e06:	bf00      	nop
 8009e08:	2000000c 	.word	0x2000000c

08009e0c <nanf>:
 8009e0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e14 <nanf+0x8>
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	7fc00000 	.word	0x7fc00000

08009e18 <siprintf>:
 8009e18:	b40e      	push	{r1, r2, r3}
 8009e1a:	b500      	push	{lr}
 8009e1c:	b09c      	sub	sp, #112	; 0x70
 8009e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8009e20:	9002      	str	r0, [sp, #8]
 8009e22:	9006      	str	r0, [sp, #24]
 8009e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e28:	4809      	ldr	r0, [pc, #36]	; (8009e50 <siprintf+0x38>)
 8009e2a:	9107      	str	r1, [sp, #28]
 8009e2c:	9104      	str	r1, [sp, #16]
 8009e2e:	4909      	ldr	r1, [pc, #36]	; (8009e54 <siprintf+0x3c>)
 8009e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e34:	9105      	str	r1, [sp, #20]
 8009e36:	6800      	ldr	r0, [r0, #0]
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	a902      	add	r1, sp, #8
 8009e3c:	f003 f802 	bl	800ce44 <_svfiprintf_r>
 8009e40:	9b02      	ldr	r3, [sp, #8]
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	b01c      	add	sp, #112	; 0x70
 8009e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e4c:	b003      	add	sp, #12
 8009e4e:	4770      	bx	lr
 8009e50:	2000000c 	.word	0x2000000c
 8009e54:	ffff0208 	.word	0xffff0208

08009e58 <sulp>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	ec45 4b10 	vmov	d0, r4, r5
 8009e62:	4616      	mov	r6, r2
 8009e64:	f002 fdaa 	bl	800c9bc <__ulp>
 8009e68:	ec51 0b10 	vmov	r0, r1, d0
 8009e6c:	b17e      	cbz	r6, 8009e8e <sulp+0x36>
 8009e6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dd09      	ble.n	8009e8e <sulp+0x36>
 8009e7a:	051b      	lsls	r3, r3, #20
 8009e7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e80:	2400      	movs	r4, #0
 8009e82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e86:	4622      	mov	r2, r4
 8009e88:	462b      	mov	r3, r5
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}

08009e90 <_strtod_l>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	461f      	mov	r7, r3
 8009e96:	b0a1      	sub	sp, #132	; 0x84
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4681      	mov	r9, r0
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	460e      	mov	r6, r1
 8009ea0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ea2:	931c      	str	r3, [sp, #112]	; 0x70
 8009ea4:	f002 fa2f 	bl	800c306 <__localeconv_l>
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	f7f6 f990 	bl	80001d0 <strlen>
 8009eb0:	f04f 0a00 	mov.w	sl, #0
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	f04f 0b00 	mov.w	fp, #0
 8009eba:	961b      	str	r6, [sp, #108]	; 0x6c
 8009ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	2a0d      	cmp	r2, #13
 8009ec2:	d832      	bhi.n	8009f2a <_strtod_l+0x9a>
 8009ec4:	2a09      	cmp	r2, #9
 8009ec6:	d236      	bcs.n	8009f36 <_strtod_l+0xa6>
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	d03e      	beq.n	8009f4a <_strtod_l+0xba>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009ed2:	782b      	ldrb	r3, [r5, #0]
 8009ed4:	2b30      	cmp	r3, #48	; 0x30
 8009ed6:	f040 80ac 	bne.w	800a032 <_strtod_l+0x1a2>
 8009eda:	786b      	ldrb	r3, [r5, #1]
 8009edc:	2b58      	cmp	r3, #88	; 0x58
 8009ede:	d001      	beq.n	8009ee4 <_strtod_l+0x54>
 8009ee0:	2b78      	cmp	r3, #120	; 0x78
 8009ee2:	d167      	bne.n	8009fb4 <_strtod_l+0x124>
 8009ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	ab1c      	add	r3, sp, #112	; 0x70
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	9702      	str	r7, [sp, #8]
 8009eee:	ab1d      	add	r3, sp, #116	; 0x74
 8009ef0:	4a88      	ldr	r2, [pc, #544]	; (800a114 <_strtod_l+0x284>)
 8009ef2:	a91b      	add	r1, sp, #108	; 0x6c
 8009ef4:	4648      	mov	r0, r9
 8009ef6:	f001 ff2c 	bl	800bd52 <__gethex>
 8009efa:	f010 0407 	ands.w	r4, r0, #7
 8009efe:	4606      	mov	r6, r0
 8009f00:	d005      	beq.n	8009f0e <_strtod_l+0x7e>
 8009f02:	2c06      	cmp	r4, #6
 8009f04:	d12b      	bne.n	8009f5e <_strtod_l+0xce>
 8009f06:	3501      	adds	r5, #1
 8009f08:	2300      	movs	r3, #0
 8009f0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8009f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 859a 	bne.w	800aa4a <_strtod_l+0xbba>
 8009f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f18:	b1e3      	cbz	r3, 8009f54 <_strtod_l+0xc4>
 8009f1a:	4652      	mov	r2, sl
 8009f1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f20:	ec43 2b10 	vmov	d0, r2, r3
 8009f24:	b021      	add	sp, #132	; 0x84
 8009f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2a:	2a2b      	cmp	r2, #43	; 0x2b
 8009f2c:	d015      	beq.n	8009f5a <_strtod_l+0xca>
 8009f2e:	2a2d      	cmp	r2, #45	; 0x2d
 8009f30:	d004      	beq.n	8009f3c <_strtod_l+0xac>
 8009f32:	2a20      	cmp	r2, #32
 8009f34:	d1ca      	bne.n	8009ecc <_strtod_l+0x3c>
 8009f36:	3301      	adds	r3, #1
 8009f38:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f3a:	e7bf      	b.n	8009ebc <_strtod_l+0x2c>
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	920d      	str	r2, [sp, #52]	; 0x34
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f44:	785b      	ldrb	r3, [r3, #1]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1c2      	bne.n	8009ed0 <_strtod_l+0x40>
 8009f4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f040 8579 	bne.w	800aa46 <_strtod_l+0xbb6>
 8009f54:	4652      	mov	r2, sl
 8009f56:	465b      	mov	r3, fp
 8009f58:	e7e2      	b.n	8009f20 <_strtod_l+0x90>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	e7ef      	b.n	8009f3e <_strtod_l+0xae>
 8009f5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009f60:	b13a      	cbz	r2, 8009f72 <_strtod_l+0xe2>
 8009f62:	2135      	movs	r1, #53	; 0x35
 8009f64:	a81e      	add	r0, sp, #120	; 0x78
 8009f66:	f002 fe21 	bl	800cbac <__copybits>
 8009f6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f6c:	4648      	mov	r0, r9
 8009f6e:	f002 fa8d 	bl	800c48c <_Bfree>
 8009f72:	3c01      	subs	r4, #1
 8009f74:	2c04      	cmp	r4, #4
 8009f76:	d806      	bhi.n	8009f86 <_strtod_l+0xf6>
 8009f78:	e8df f004 	tbb	[pc, r4]
 8009f7c:	1714030a 	.word	0x1714030a
 8009f80:	0a          	.byte	0x0a
 8009f81:	00          	.byte	0x00
 8009f82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009f86:	0730      	lsls	r0, r6, #28
 8009f88:	d5c1      	bpl.n	8009f0e <_strtod_l+0x7e>
 8009f8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009f8e:	e7be      	b.n	8009f0e <_strtod_l+0x7e>
 8009f90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009f94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009fa2:	e7f0      	b.n	8009f86 <_strtod_l+0xf6>
 8009fa4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a118 <_strtod_l+0x288>
 8009fa8:	e7ed      	b.n	8009f86 <_strtod_l+0xf6>
 8009faa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009fae:	f04f 3aff 	mov.w	sl, #4294967295
 8009fb2:	e7e8      	b.n	8009f86 <_strtod_l+0xf6>
 8009fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8009fba:	785b      	ldrb	r3, [r3, #1]
 8009fbc:	2b30      	cmp	r3, #48	; 0x30
 8009fbe:	d0f9      	beq.n	8009fb4 <_strtod_l+0x124>
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0a4      	beq.n	8009f0e <_strtod_l+0x7e>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	2500      	movs	r5, #0
 8009fc8:	9306      	str	r3, [sp, #24]
 8009fca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fcc:	9308      	str	r3, [sp, #32]
 8009fce:	9507      	str	r5, [sp, #28]
 8009fd0:	9505      	str	r5, [sp, #20]
 8009fd2:	220a      	movs	r2, #10
 8009fd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009fd6:	7807      	ldrb	r7, [r0, #0]
 8009fd8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009fdc:	b2d9      	uxtb	r1, r3
 8009fde:	2909      	cmp	r1, #9
 8009fe0:	d929      	bls.n	800a036 <_strtod_l+0x1a6>
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	f8d8 1000 	ldr.w	r1, [r8]
 8009fe8:	f003 f9b7 	bl	800d35a <strncmp>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d031      	beq.n	800a054 <_strtod_l+0x1c4>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	9c05      	ldr	r4, [sp, #20]
 8009ff4:	9004      	str	r0, [sp, #16]
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	2b65      	cmp	r3, #101	; 0x65
 8009ffc:	d001      	beq.n	800a002 <_strtod_l+0x172>
 8009ffe:	2b45      	cmp	r3, #69	; 0x45
 800a000:	d114      	bne.n	800a02c <_strtod_l+0x19c>
 800a002:	b924      	cbnz	r4, 800a00e <_strtod_l+0x17e>
 800a004:	b910      	cbnz	r0, 800a00c <_strtod_l+0x17c>
 800a006:	9b06      	ldr	r3, [sp, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d09e      	beq.n	8009f4a <_strtod_l+0xba>
 800a00c:	2400      	movs	r4, #0
 800a00e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a010:	1c73      	adds	r3, r6, #1
 800a012:	931b      	str	r3, [sp, #108]	; 0x6c
 800a014:	7873      	ldrb	r3, [r6, #1]
 800a016:	2b2b      	cmp	r3, #43	; 0x2b
 800a018:	d078      	beq.n	800a10c <_strtod_l+0x27c>
 800a01a:	2b2d      	cmp	r3, #45	; 0x2d
 800a01c:	d070      	beq.n	800a100 <_strtod_l+0x270>
 800a01e:	f04f 0c00 	mov.w	ip, #0
 800a022:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a026:	2f09      	cmp	r7, #9
 800a028:	d97c      	bls.n	800a124 <_strtod_l+0x294>
 800a02a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a02c:	f04f 0e00 	mov.w	lr, #0
 800a030:	e09a      	b.n	800a168 <_strtod_l+0x2d8>
 800a032:	2300      	movs	r3, #0
 800a034:	e7c7      	b.n	8009fc6 <_strtod_l+0x136>
 800a036:	9905      	ldr	r1, [sp, #20]
 800a038:	2908      	cmp	r1, #8
 800a03a:	bfdd      	ittte	le
 800a03c:	9907      	ldrle	r1, [sp, #28]
 800a03e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a042:	9307      	strle	r3, [sp, #28]
 800a044:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	3001      	adds	r0, #1
 800a04c:	3301      	adds	r3, #1
 800a04e:	9305      	str	r3, [sp, #20]
 800a050:	901b      	str	r0, [sp, #108]	; 0x6c
 800a052:	e7bf      	b.n	8009fd4 <_strtod_l+0x144>
 800a054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a056:	191a      	adds	r2, r3, r4
 800a058:	921b      	str	r2, [sp, #108]	; 0x6c
 800a05a:	9a05      	ldr	r2, [sp, #20]
 800a05c:	5d1b      	ldrb	r3, [r3, r4]
 800a05e:	2a00      	cmp	r2, #0
 800a060:	d037      	beq.n	800a0d2 <_strtod_l+0x242>
 800a062:	9c05      	ldr	r4, [sp, #20]
 800a064:	4602      	mov	r2, r0
 800a066:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a06a:	2909      	cmp	r1, #9
 800a06c:	d913      	bls.n	800a096 <_strtod_l+0x206>
 800a06e:	2101      	movs	r1, #1
 800a070:	9104      	str	r1, [sp, #16]
 800a072:	e7c2      	b.n	8009ffa <_strtod_l+0x16a>
 800a074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	921b      	str	r2, [sp, #108]	; 0x6c
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	3001      	adds	r0, #1
 800a07e:	2b30      	cmp	r3, #48	; 0x30
 800a080:	d0f8      	beq.n	800a074 <_strtod_l+0x1e4>
 800a082:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a086:	2a08      	cmp	r2, #8
 800a088:	f200 84e4 	bhi.w	800aa54 <_strtod_l+0xbc4>
 800a08c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a08e:	9208      	str	r2, [sp, #32]
 800a090:	4602      	mov	r2, r0
 800a092:	2000      	movs	r0, #0
 800a094:	4604      	mov	r4, r0
 800a096:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a09a:	f100 0101 	add.w	r1, r0, #1
 800a09e:	d012      	beq.n	800a0c6 <_strtod_l+0x236>
 800a0a0:	440a      	add	r2, r1
 800a0a2:	eb00 0c04 	add.w	ip, r0, r4
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	270a      	movs	r7, #10
 800a0aa:	458c      	cmp	ip, r1
 800a0ac:	d113      	bne.n	800a0d6 <_strtod_l+0x246>
 800a0ae:	1821      	adds	r1, r4, r0
 800a0b0:	2908      	cmp	r1, #8
 800a0b2:	f104 0401 	add.w	r4, r4, #1
 800a0b6:	4404      	add	r4, r0
 800a0b8:	dc19      	bgt.n	800a0ee <_strtod_l+0x25e>
 800a0ba:	9b07      	ldr	r3, [sp, #28]
 800a0bc:	210a      	movs	r1, #10
 800a0be:	fb01 e303 	mla	r3, r1, r3, lr
 800a0c2:	9307      	str	r3, [sp, #28]
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0c8:	1c58      	adds	r0, r3, #1
 800a0ca:	901b      	str	r0, [sp, #108]	; 0x6c
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	e7c9      	b.n	800a066 <_strtod_l+0x1d6>
 800a0d2:	9805      	ldr	r0, [sp, #20]
 800a0d4:	e7d3      	b.n	800a07e <_strtod_l+0x1ee>
 800a0d6:	2908      	cmp	r1, #8
 800a0d8:	f101 0101 	add.w	r1, r1, #1
 800a0dc:	dc03      	bgt.n	800a0e6 <_strtod_l+0x256>
 800a0de:	9b07      	ldr	r3, [sp, #28]
 800a0e0:	437b      	muls	r3, r7
 800a0e2:	9307      	str	r3, [sp, #28]
 800a0e4:	e7e1      	b.n	800a0aa <_strtod_l+0x21a>
 800a0e6:	2910      	cmp	r1, #16
 800a0e8:	bfd8      	it	le
 800a0ea:	437d      	mulle	r5, r7
 800a0ec:	e7dd      	b.n	800a0aa <_strtod_l+0x21a>
 800a0ee:	2c10      	cmp	r4, #16
 800a0f0:	bfdc      	itt	le
 800a0f2:	210a      	movle	r1, #10
 800a0f4:	fb01 e505 	mlale	r5, r1, r5, lr
 800a0f8:	e7e4      	b.n	800a0c4 <_strtod_l+0x234>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	e781      	b.n	800a004 <_strtod_l+0x174>
 800a100:	f04f 0c01 	mov.w	ip, #1
 800a104:	1cb3      	adds	r3, r6, #2
 800a106:	931b      	str	r3, [sp, #108]	; 0x6c
 800a108:	78b3      	ldrb	r3, [r6, #2]
 800a10a:	e78a      	b.n	800a022 <_strtod_l+0x192>
 800a10c:	f04f 0c00 	mov.w	ip, #0
 800a110:	e7f8      	b.n	800a104 <_strtod_l+0x274>
 800a112:	bf00      	nop
 800a114:	0800d89c 	.word	0x0800d89c
 800a118:	7ff00000 	.word	0x7ff00000
 800a11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a11e:	1c5f      	adds	r7, r3, #1
 800a120:	971b      	str	r7, [sp, #108]	; 0x6c
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	2b30      	cmp	r3, #48	; 0x30
 800a126:	d0f9      	beq.n	800a11c <_strtod_l+0x28c>
 800a128:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a12c:	2f08      	cmp	r7, #8
 800a12e:	f63f af7d 	bhi.w	800a02c <_strtod_l+0x19c>
 800a132:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a136:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a138:	930a      	str	r3, [sp, #40]	; 0x28
 800a13a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a13c:	1c5f      	adds	r7, r3, #1
 800a13e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a140:	785b      	ldrb	r3, [r3, #1]
 800a142:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a146:	f1b8 0f09 	cmp.w	r8, #9
 800a14a:	d937      	bls.n	800a1bc <_strtod_l+0x32c>
 800a14c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a14e:	1a7f      	subs	r7, r7, r1
 800a150:	2f08      	cmp	r7, #8
 800a152:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a156:	dc37      	bgt.n	800a1c8 <_strtod_l+0x338>
 800a158:	45be      	cmp	lr, r7
 800a15a:	bfa8      	it	ge
 800a15c:	46be      	movge	lr, r7
 800a15e:	f1bc 0f00 	cmp.w	ip, #0
 800a162:	d001      	beq.n	800a168 <_strtod_l+0x2d8>
 800a164:	f1ce 0e00 	rsb	lr, lr, #0
 800a168:	2c00      	cmp	r4, #0
 800a16a:	d151      	bne.n	800a210 <_strtod_l+0x380>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f47f aece 	bne.w	8009f0e <_strtod_l+0x7e>
 800a172:	9a06      	ldr	r2, [sp, #24]
 800a174:	2a00      	cmp	r2, #0
 800a176:	f47f aeca 	bne.w	8009f0e <_strtod_l+0x7e>
 800a17a:	9a04      	ldr	r2, [sp, #16]
 800a17c:	2a00      	cmp	r2, #0
 800a17e:	f47f aee4 	bne.w	8009f4a <_strtod_l+0xba>
 800a182:	2b4e      	cmp	r3, #78	; 0x4e
 800a184:	d027      	beq.n	800a1d6 <_strtod_l+0x346>
 800a186:	dc21      	bgt.n	800a1cc <_strtod_l+0x33c>
 800a188:	2b49      	cmp	r3, #73	; 0x49
 800a18a:	f47f aede 	bne.w	8009f4a <_strtod_l+0xba>
 800a18e:	49a0      	ldr	r1, [pc, #640]	; (800a410 <_strtod_l+0x580>)
 800a190:	a81b      	add	r0, sp, #108	; 0x6c
 800a192:	f002 f811 	bl	800c1b8 <__match>
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f aed7 	beq.w	8009f4a <_strtod_l+0xba>
 800a19c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a19e:	499d      	ldr	r1, [pc, #628]	; (800a414 <_strtod_l+0x584>)
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	a81b      	add	r0, sp, #108	; 0x6c
 800a1a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a1a6:	f002 f807 	bl	800c1b8 <__match>
 800a1aa:	b910      	cbnz	r0, 800a1b2 <_strtod_l+0x322>
 800a1ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a1b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a428 <_strtod_l+0x598>
 800a1b6:	f04f 0a00 	mov.w	sl, #0
 800a1ba:	e6a8      	b.n	8009f0e <_strtod_l+0x7e>
 800a1bc:	210a      	movs	r1, #10
 800a1be:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a1c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a1c6:	e7b8      	b.n	800a13a <_strtod_l+0x2aa>
 800a1c8:	46be      	mov	lr, r7
 800a1ca:	e7c8      	b.n	800a15e <_strtod_l+0x2ce>
 800a1cc:	2b69      	cmp	r3, #105	; 0x69
 800a1ce:	d0de      	beq.n	800a18e <_strtod_l+0x2fe>
 800a1d0:	2b6e      	cmp	r3, #110	; 0x6e
 800a1d2:	f47f aeba 	bne.w	8009f4a <_strtod_l+0xba>
 800a1d6:	4990      	ldr	r1, [pc, #576]	; (800a418 <_strtod_l+0x588>)
 800a1d8:	a81b      	add	r0, sp, #108	; 0x6c
 800a1da:	f001 ffed 	bl	800c1b8 <__match>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f43f aeb3 	beq.w	8009f4a <_strtod_l+0xba>
 800a1e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	2b28      	cmp	r3, #40	; 0x28
 800a1ea:	d10e      	bne.n	800a20a <_strtod_l+0x37a>
 800a1ec:	aa1e      	add	r2, sp, #120	; 0x78
 800a1ee:	498b      	ldr	r1, [pc, #556]	; (800a41c <_strtod_l+0x58c>)
 800a1f0:	a81b      	add	r0, sp, #108	; 0x6c
 800a1f2:	f001 fff5 	bl	800c1e0 <__hexnan>
 800a1f6:	2805      	cmp	r0, #5
 800a1f8:	d107      	bne.n	800a20a <_strtod_l+0x37a>
 800a1fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a1fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a200:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a204:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a208:	e681      	b.n	8009f0e <_strtod_l+0x7e>
 800a20a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a430 <_strtod_l+0x5a0>
 800a20e:	e7d2      	b.n	800a1b6 <_strtod_l+0x326>
 800a210:	ebae 0302 	sub.w	r3, lr, r2
 800a214:	9306      	str	r3, [sp, #24]
 800a216:	9b05      	ldr	r3, [sp, #20]
 800a218:	9807      	ldr	r0, [sp, #28]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bf08      	it	eq
 800a21e:	4623      	moveq	r3, r4
 800a220:	2c10      	cmp	r4, #16
 800a222:	9305      	str	r3, [sp, #20]
 800a224:	46a0      	mov	r8, r4
 800a226:	bfa8      	it	ge
 800a228:	f04f 0810 	movge.w	r8, #16
 800a22c:	f7f6 f96a 	bl	8000504 <__aeabi_ui2d>
 800a230:	2c09      	cmp	r4, #9
 800a232:	4682      	mov	sl, r0
 800a234:	468b      	mov	fp, r1
 800a236:	dc13      	bgt.n	800a260 <_strtod_l+0x3d0>
 800a238:	9b06      	ldr	r3, [sp, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f43f ae67 	beq.w	8009f0e <_strtod_l+0x7e>
 800a240:	9b06      	ldr	r3, [sp, #24]
 800a242:	dd7a      	ble.n	800a33a <_strtod_l+0x4aa>
 800a244:	2b16      	cmp	r3, #22
 800a246:	dc61      	bgt.n	800a30c <_strtod_l+0x47c>
 800a248:	4a75      	ldr	r2, [pc, #468]	; (800a420 <_strtod_l+0x590>)
 800a24a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a24e:	e9de 0100 	ldrd	r0, r1, [lr]
 800a252:	4652      	mov	r2, sl
 800a254:	465b      	mov	r3, fp
 800a256:	f7f6 f9cf 	bl	80005f8 <__aeabi_dmul>
 800a25a:	4682      	mov	sl, r0
 800a25c:	468b      	mov	fp, r1
 800a25e:	e656      	b.n	8009f0e <_strtod_l+0x7e>
 800a260:	4b6f      	ldr	r3, [pc, #444]	; (800a420 <_strtod_l+0x590>)
 800a262:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a266:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a26a:	f7f6 f9c5 	bl	80005f8 <__aeabi_dmul>
 800a26e:	4606      	mov	r6, r0
 800a270:	4628      	mov	r0, r5
 800a272:	460f      	mov	r7, r1
 800a274:	f7f6 f946 	bl	8000504 <__aeabi_ui2d>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 f804 	bl	800028c <__adddf3>
 800a284:	2c0f      	cmp	r4, #15
 800a286:	4682      	mov	sl, r0
 800a288:	468b      	mov	fp, r1
 800a28a:	ddd5      	ble.n	800a238 <_strtod_l+0x3a8>
 800a28c:	9b06      	ldr	r3, [sp, #24]
 800a28e:	eba4 0808 	sub.w	r8, r4, r8
 800a292:	4498      	add	r8, r3
 800a294:	f1b8 0f00 	cmp.w	r8, #0
 800a298:	f340 8096 	ble.w	800a3c8 <_strtod_l+0x538>
 800a29c:	f018 030f 	ands.w	r3, r8, #15
 800a2a0:	d00a      	beq.n	800a2b8 <_strtod_l+0x428>
 800a2a2:	495f      	ldr	r1, [pc, #380]	; (800a420 <_strtod_l+0x590>)
 800a2a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2a8:	4652      	mov	r2, sl
 800a2aa:	465b      	mov	r3, fp
 800a2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b0:	f7f6 f9a2 	bl	80005f8 <__aeabi_dmul>
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	468b      	mov	fp, r1
 800a2b8:	f038 080f 	bics.w	r8, r8, #15
 800a2bc:	d073      	beq.n	800a3a6 <_strtod_l+0x516>
 800a2be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a2c2:	dd47      	ble.n	800a354 <_strtod_l+0x4c4>
 800a2c4:	2400      	movs	r4, #0
 800a2c6:	46a0      	mov	r8, r4
 800a2c8:	9407      	str	r4, [sp, #28]
 800a2ca:	9405      	str	r4, [sp, #20]
 800a2cc:	2322      	movs	r3, #34	; 0x22
 800a2ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a428 <_strtod_l+0x598>
 800a2d2:	f8c9 3000 	str.w	r3, [r9]
 800a2d6:	f04f 0a00 	mov.w	sl, #0
 800a2da:	9b07      	ldr	r3, [sp, #28]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f43f ae16 	beq.w	8009f0e <_strtod_l+0x7e>
 800a2e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2e4:	4648      	mov	r0, r9
 800a2e6:	f002 f8d1 	bl	800c48c <_Bfree>
 800a2ea:	9905      	ldr	r1, [sp, #20]
 800a2ec:	4648      	mov	r0, r9
 800a2ee:	f002 f8cd 	bl	800c48c <_Bfree>
 800a2f2:	4641      	mov	r1, r8
 800a2f4:	4648      	mov	r0, r9
 800a2f6:	f002 f8c9 	bl	800c48c <_Bfree>
 800a2fa:	9907      	ldr	r1, [sp, #28]
 800a2fc:	4648      	mov	r0, r9
 800a2fe:	f002 f8c5 	bl	800c48c <_Bfree>
 800a302:	4621      	mov	r1, r4
 800a304:	4648      	mov	r0, r9
 800a306:	f002 f8c1 	bl	800c48c <_Bfree>
 800a30a:	e600      	b.n	8009f0e <_strtod_l+0x7e>
 800a30c:	9a06      	ldr	r2, [sp, #24]
 800a30e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a312:	4293      	cmp	r3, r2
 800a314:	dbba      	blt.n	800a28c <_strtod_l+0x3fc>
 800a316:	4d42      	ldr	r5, [pc, #264]	; (800a420 <_strtod_l+0x590>)
 800a318:	f1c4 040f 	rsb	r4, r4, #15
 800a31c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a320:	4652      	mov	r2, sl
 800a322:	465b      	mov	r3, fp
 800a324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a328:	f7f6 f966 	bl	80005f8 <__aeabi_dmul>
 800a32c:	9b06      	ldr	r3, [sp, #24]
 800a32e:	1b1c      	subs	r4, r3, r4
 800a330:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a334:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a338:	e78d      	b.n	800a256 <_strtod_l+0x3c6>
 800a33a:	f113 0f16 	cmn.w	r3, #22
 800a33e:	dba5      	blt.n	800a28c <_strtod_l+0x3fc>
 800a340:	4a37      	ldr	r2, [pc, #220]	; (800a420 <_strtod_l+0x590>)
 800a342:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a346:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a34a:	4650      	mov	r0, sl
 800a34c:	4659      	mov	r1, fp
 800a34e:	f7f6 fa7d 	bl	800084c <__aeabi_ddiv>
 800a352:	e782      	b.n	800a25a <_strtod_l+0x3ca>
 800a354:	2300      	movs	r3, #0
 800a356:	4e33      	ldr	r6, [pc, #204]	; (800a424 <_strtod_l+0x594>)
 800a358:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a35c:	4650      	mov	r0, sl
 800a35e:	4659      	mov	r1, fp
 800a360:	461d      	mov	r5, r3
 800a362:	f1b8 0f01 	cmp.w	r8, #1
 800a366:	dc21      	bgt.n	800a3ac <_strtod_l+0x51c>
 800a368:	b10b      	cbz	r3, 800a36e <_strtod_l+0x4de>
 800a36a:	4682      	mov	sl, r0
 800a36c:	468b      	mov	fp, r1
 800a36e:	4b2d      	ldr	r3, [pc, #180]	; (800a424 <_strtod_l+0x594>)
 800a370:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a374:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a378:	4652      	mov	r2, sl
 800a37a:	465b      	mov	r3, fp
 800a37c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a380:	f7f6 f93a 	bl	80005f8 <__aeabi_dmul>
 800a384:	4b28      	ldr	r3, [pc, #160]	; (800a428 <_strtod_l+0x598>)
 800a386:	460a      	mov	r2, r1
 800a388:	400b      	ands	r3, r1
 800a38a:	4928      	ldr	r1, [pc, #160]	; (800a42c <_strtod_l+0x59c>)
 800a38c:	428b      	cmp	r3, r1
 800a38e:	4682      	mov	sl, r0
 800a390:	d898      	bhi.n	800a2c4 <_strtod_l+0x434>
 800a392:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a396:	428b      	cmp	r3, r1
 800a398:	bf86      	itte	hi
 800a39a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a434 <_strtod_l+0x5a4>
 800a39e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a3a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9304      	str	r3, [sp, #16]
 800a3aa:	e077      	b.n	800a49c <_strtod_l+0x60c>
 800a3ac:	f018 0f01 	tst.w	r8, #1
 800a3b0:	d006      	beq.n	800a3c0 <_strtod_l+0x530>
 800a3b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	f7f6 f91d 	bl	80005f8 <__aeabi_dmul>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	3501      	adds	r5, #1
 800a3c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3c6:	e7cc      	b.n	800a362 <_strtod_l+0x4d2>
 800a3c8:	d0ed      	beq.n	800a3a6 <_strtod_l+0x516>
 800a3ca:	f1c8 0800 	rsb	r8, r8, #0
 800a3ce:	f018 020f 	ands.w	r2, r8, #15
 800a3d2:	d00a      	beq.n	800a3ea <_strtod_l+0x55a>
 800a3d4:	4b12      	ldr	r3, [pc, #72]	; (800a420 <_strtod_l+0x590>)
 800a3d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3da:	4650      	mov	r0, sl
 800a3dc:	4659      	mov	r1, fp
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f6 fa33 	bl	800084c <__aeabi_ddiv>
 800a3e6:	4682      	mov	sl, r0
 800a3e8:	468b      	mov	fp, r1
 800a3ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a3ee:	d0da      	beq.n	800a3a6 <_strtod_l+0x516>
 800a3f0:	f1b8 0f1f 	cmp.w	r8, #31
 800a3f4:	dd20      	ble.n	800a438 <_strtod_l+0x5a8>
 800a3f6:	2400      	movs	r4, #0
 800a3f8:	46a0      	mov	r8, r4
 800a3fa:	9407      	str	r4, [sp, #28]
 800a3fc:	9405      	str	r4, [sp, #20]
 800a3fe:	2322      	movs	r3, #34	; 0x22
 800a400:	f04f 0a00 	mov.w	sl, #0
 800a404:	f04f 0b00 	mov.w	fp, #0
 800a408:	f8c9 3000 	str.w	r3, [r9]
 800a40c:	e765      	b.n	800a2da <_strtod_l+0x44a>
 800a40e:	bf00      	nop
 800a410:	0800d865 	.word	0x0800d865
 800a414:	0800d8f3 	.word	0x0800d8f3
 800a418:	0800d86d 	.word	0x0800d86d
 800a41c:	0800d8b0 	.word	0x0800d8b0
 800a420:	0800d998 	.word	0x0800d998
 800a424:	0800d970 	.word	0x0800d970
 800a428:	7ff00000 	.word	0x7ff00000
 800a42c:	7ca00000 	.word	0x7ca00000
 800a430:	fff80000 	.word	0xfff80000
 800a434:	7fefffff 	.word	0x7fefffff
 800a438:	f018 0310 	ands.w	r3, r8, #16
 800a43c:	bf18      	it	ne
 800a43e:	236a      	movne	r3, #106	; 0x6a
 800a440:	4da0      	ldr	r5, [pc, #640]	; (800a6c4 <_strtod_l+0x834>)
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	4650      	mov	r0, sl
 800a446:	4659      	mov	r1, fp
 800a448:	2300      	movs	r3, #0
 800a44a:	f1b8 0f00 	cmp.w	r8, #0
 800a44e:	f300 810a 	bgt.w	800a666 <_strtod_l+0x7d6>
 800a452:	b10b      	cbz	r3, 800a458 <_strtod_l+0x5c8>
 800a454:	4682      	mov	sl, r0
 800a456:	468b      	mov	fp, r1
 800a458:	9b04      	ldr	r3, [sp, #16]
 800a45a:	b1bb      	cbz	r3, 800a48c <_strtod_l+0x5fc>
 800a45c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a460:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a464:	2b00      	cmp	r3, #0
 800a466:	4659      	mov	r1, fp
 800a468:	dd10      	ble.n	800a48c <_strtod_l+0x5fc>
 800a46a:	2b1f      	cmp	r3, #31
 800a46c:	f340 8107 	ble.w	800a67e <_strtod_l+0x7ee>
 800a470:	2b34      	cmp	r3, #52	; 0x34
 800a472:	bfde      	ittt	le
 800a474:	3b20      	suble	r3, #32
 800a476:	f04f 32ff 	movle.w	r2, #4294967295
 800a47a:	fa02 f303 	lslle.w	r3, r2, r3
 800a47e:	f04f 0a00 	mov.w	sl, #0
 800a482:	bfcc      	ite	gt
 800a484:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a488:	ea03 0b01 	andle.w	fp, r3, r1
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	4650      	mov	r0, sl
 800a492:	4659      	mov	r1, fp
 800a494:	f7f6 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1ac      	bne.n	800a3f6 <_strtod_l+0x566>
 800a49c:	9b07      	ldr	r3, [sp, #28]
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	9a05      	ldr	r2, [sp, #20]
 800a4a2:	9908      	ldr	r1, [sp, #32]
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	4648      	mov	r0, r9
 800a4a8:	f002 f842 	bl	800c530 <__s2b>
 800a4ac:	9007      	str	r0, [sp, #28]
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f43f af08 	beq.w	800a2c4 <_strtod_l+0x434>
 800a4b4:	9a06      	ldr	r2, [sp, #24]
 800a4b6:	9b06      	ldr	r3, [sp, #24]
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	f1c3 0300 	rsb	r3, r3, #0
 800a4be:	bfa8      	it	ge
 800a4c0:	2300      	movge	r3, #0
 800a4c2:	930e      	str	r3, [sp, #56]	; 0x38
 800a4c4:	2400      	movs	r4, #0
 800a4c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4ca:	9316      	str	r3, [sp, #88]	; 0x58
 800a4cc:	46a0      	mov	r8, r4
 800a4ce:	9b07      	ldr	r3, [sp, #28]
 800a4d0:	4648      	mov	r0, r9
 800a4d2:	6859      	ldr	r1, [r3, #4]
 800a4d4:	f001 ffa6 	bl	800c424 <_Balloc>
 800a4d8:	9005      	str	r0, [sp, #20]
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	f43f aef6 	beq.w	800a2cc <_strtod_l+0x43c>
 800a4e0:	9b07      	ldr	r3, [sp, #28]
 800a4e2:	691a      	ldr	r2, [r3, #16]
 800a4e4:	3202      	adds	r2, #2
 800a4e6:	f103 010c 	add.w	r1, r3, #12
 800a4ea:	0092      	lsls	r2, r2, #2
 800a4ec:	300c      	adds	r0, #12
 800a4ee:	f7fe fdbf 	bl	8009070 <memcpy>
 800a4f2:	aa1e      	add	r2, sp, #120	; 0x78
 800a4f4:	a91d      	add	r1, sp, #116	; 0x74
 800a4f6:	ec4b ab10 	vmov	d0, sl, fp
 800a4fa:	4648      	mov	r0, r9
 800a4fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a500:	f002 fad2 	bl	800caa8 <__d2b>
 800a504:	901c      	str	r0, [sp, #112]	; 0x70
 800a506:	2800      	cmp	r0, #0
 800a508:	f43f aee0 	beq.w	800a2cc <_strtod_l+0x43c>
 800a50c:	2101      	movs	r1, #1
 800a50e:	4648      	mov	r0, r9
 800a510:	f002 f89a 	bl	800c648 <__i2b>
 800a514:	4680      	mov	r8, r0
 800a516:	2800      	cmp	r0, #0
 800a518:	f43f aed8 	beq.w	800a2cc <_strtod_l+0x43c>
 800a51c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a51e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a520:	2e00      	cmp	r6, #0
 800a522:	bfab      	itete	ge
 800a524:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a526:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a528:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a52a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a52c:	bfac      	ite	ge
 800a52e:	18f7      	addge	r7, r6, r3
 800a530:	1b9d      	sublt	r5, r3, r6
 800a532:	9b04      	ldr	r3, [sp, #16]
 800a534:	1af6      	subs	r6, r6, r3
 800a536:	4416      	add	r6, r2
 800a538:	4b63      	ldr	r3, [pc, #396]	; (800a6c8 <_strtod_l+0x838>)
 800a53a:	3e01      	subs	r6, #1
 800a53c:	429e      	cmp	r6, r3
 800a53e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a542:	f280 80af 	bge.w	800a6a4 <_strtod_l+0x814>
 800a546:	1b9b      	subs	r3, r3, r6
 800a548:	2b1f      	cmp	r3, #31
 800a54a:	eba2 0203 	sub.w	r2, r2, r3
 800a54e:	f04f 0101 	mov.w	r1, #1
 800a552:	f300 809b 	bgt.w	800a68c <_strtod_l+0x7fc>
 800a556:	fa01 f303 	lsl.w	r3, r1, r3
 800a55a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a55c:	2300      	movs	r3, #0
 800a55e:	930a      	str	r3, [sp, #40]	; 0x28
 800a560:	18be      	adds	r6, r7, r2
 800a562:	9b04      	ldr	r3, [sp, #16]
 800a564:	42b7      	cmp	r7, r6
 800a566:	4415      	add	r5, r2
 800a568:	441d      	add	r5, r3
 800a56a:	463b      	mov	r3, r7
 800a56c:	bfa8      	it	ge
 800a56e:	4633      	movge	r3, r6
 800a570:	42ab      	cmp	r3, r5
 800a572:	bfa8      	it	ge
 800a574:	462b      	movge	r3, r5
 800a576:	2b00      	cmp	r3, #0
 800a578:	bfc2      	ittt	gt
 800a57a:	1af6      	subgt	r6, r6, r3
 800a57c:	1aed      	subgt	r5, r5, r3
 800a57e:	1aff      	subgt	r7, r7, r3
 800a580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a582:	b1bb      	cbz	r3, 800a5b4 <_strtod_l+0x724>
 800a584:	4641      	mov	r1, r8
 800a586:	461a      	mov	r2, r3
 800a588:	4648      	mov	r0, r9
 800a58a:	f002 f8fd 	bl	800c788 <__pow5mult>
 800a58e:	4680      	mov	r8, r0
 800a590:	2800      	cmp	r0, #0
 800a592:	f43f ae9b 	beq.w	800a2cc <_strtod_l+0x43c>
 800a596:	4601      	mov	r1, r0
 800a598:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a59a:	4648      	mov	r0, r9
 800a59c:	f002 f85d 	bl	800c65a <__multiply>
 800a5a0:	900c      	str	r0, [sp, #48]	; 0x30
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	f43f ae92 	beq.w	800a2cc <_strtod_l+0x43c>
 800a5a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5aa:	4648      	mov	r0, r9
 800a5ac:	f001 ff6e 	bl	800c48c <_Bfree>
 800a5b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b2:	931c      	str	r3, [sp, #112]	; 0x70
 800a5b4:	2e00      	cmp	r6, #0
 800a5b6:	dc7a      	bgt.n	800a6ae <_strtod_l+0x81e>
 800a5b8:	9b06      	ldr	r3, [sp, #24]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	dd08      	ble.n	800a5d0 <_strtod_l+0x740>
 800a5be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5c0:	9905      	ldr	r1, [sp, #20]
 800a5c2:	4648      	mov	r0, r9
 800a5c4:	f002 f8e0 	bl	800c788 <__pow5mult>
 800a5c8:	9005      	str	r0, [sp, #20]
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	f43f ae7e 	beq.w	800a2cc <_strtod_l+0x43c>
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	dd08      	ble.n	800a5e6 <_strtod_l+0x756>
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	9905      	ldr	r1, [sp, #20]
 800a5d8:	4648      	mov	r0, r9
 800a5da:	f002 f923 	bl	800c824 <__lshift>
 800a5de:	9005      	str	r0, [sp, #20]
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	f43f ae73 	beq.w	800a2cc <_strtod_l+0x43c>
 800a5e6:	2f00      	cmp	r7, #0
 800a5e8:	dd08      	ble.n	800a5fc <_strtod_l+0x76c>
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	463a      	mov	r2, r7
 800a5ee:	4648      	mov	r0, r9
 800a5f0:	f002 f918 	bl	800c824 <__lshift>
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f43f ae68 	beq.w	800a2cc <_strtod_l+0x43c>
 800a5fc:	9a05      	ldr	r2, [sp, #20]
 800a5fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a600:	4648      	mov	r0, r9
 800a602:	f002 f97d 	bl	800c900 <__mdiff>
 800a606:	4604      	mov	r4, r0
 800a608:	2800      	cmp	r0, #0
 800a60a:	f43f ae5f 	beq.w	800a2cc <_strtod_l+0x43c>
 800a60e:	68c3      	ldr	r3, [r0, #12]
 800a610:	930c      	str	r3, [sp, #48]	; 0x30
 800a612:	2300      	movs	r3, #0
 800a614:	60c3      	str	r3, [r0, #12]
 800a616:	4641      	mov	r1, r8
 800a618:	f002 f958 	bl	800c8cc <__mcmp>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	da55      	bge.n	800a6cc <_strtod_l+0x83c>
 800a620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a622:	b9e3      	cbnz	r3, 800a65e <_strtod_l+0x7ce>
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	d119      	bne.n	800a65e <_strtod_l+0x7ce>
 800a62a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a62e:	b9b3      	cbnz	r3, 800a65e <_strtod_l+0x7ce>
 800a630:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a634:	0d1b      	lsrs	r3, r3, #20
 800a636:	051b      	lsls	r3, r3, #20
 800a638:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a63c:	d90f      	bls.n	800a65e <_strtod_l+0x7ce>
 800a63e:	6963      	ldr	r3, [r4, #20]
 800a640:	b913      	cbnz	r3, 800a648 <_strtod_l+0x7b8>
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	2b01      	cmp	r3, #1
 800a646:	dd0a      	ble.n	800a65e <_strtod_l+0x7ce>
 800a648:	4621      	mov	r1, r4
 800a64a:	2201      	movs	r2, #1
 800a64c:	4648      	mov	r0, r9
 800a64e:	f002 f8e9 	bl	800c824 <__lshift>
 800a652:	4641      	mov	r1, r8
 800a654:	4604      	mov	r4, r0
 800a656:	f002 f939 	bl	800c8cc <__mcmp>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	dc67      	bgt.n	800a72e <_strtod_l+0x89e>
 800a65e:	9b04      	ldr	r3, [sp, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d171      	bne.n	800a748 <_strtod_l+0x8b8>
 800a664:	e63d      	b.n	800a2e2 <_strtod_l+0x452>
 800a666:	f018 0f01 	tst.w	r8, #1
 800a66a:	d004      	beq.n	800a676 <_strtod_l+0x7e6>
 800a66c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	2301      	movs	r3, #1
 800a676:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a67a:	3508      	adds	r5, #8
 800a67c:	e6e5      	b.n	800a44a <_strtod_l+0x5ba>
 800a67e:	f04f 32ff 	mov.w	r2, #4294967295
 800a682:	fa02 f303 	lsl.w	r3, r2, r3
 800a686:	ea03 0a0a 	and.w	sl, r3, sl
 800a68a:	e6ff      	b.n	800a48c <_strtod_l+0x5fc>
 800a68c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a690:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a694:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a698:	36e2      	adds	r6, #226	; 0xe2
 800a69a:	fa01 f306 	lsl.w	r3, r1, r6
 800a69e:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a6a2:	e75d      	b.n	800a560 <_strtod_l+0x6d0>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ac:	e758      	b.n	800a560 <_strtod_l+0x6d0>
 800a6ae:	4632      	mov	r2, r6
 800a6b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a6b2:	4648      	mov	r0, r9
 800a6b4:	f002 f8b6 	bl	800c824 <__lshift>
 800a6b8:	901c      	str	r0, [sp, #112]	; 0x70
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f47f af7c 	bne.w	800a5b8 <_strtod_l+0x728>
 800a6c0:	e604      	b.n	800a2cc <_strtod_l+0x43c>
 800a6c2:	bf00      	nop
 800a6c4:	0800d8c8 	.word	0x0800d8c8
 800a6c8:	fffffc02 	.word	0xfffffc02
 800a6cc:	465d      	mov	r5, fp
 800a6ce:	f040 8086 	bne.w	800a7de <_strtod_l+0x94e>
 800a6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6d8:	b32a      	cbz	r2, 800a726 <_strtod_l+0x896>
 800a6da:	4aaf      	ldr	r2, [pc, #700]	; (800a998 <_strtod_l+0xb08>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d153      	bne.n	800a788 <_strtod_l+0x8f8>
 800a6e0:	9b04      	ldr	r3, [sp, #16]
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	b1d3      	cbz	r3, 800a71c <_strtod_l+0x88c>
 800a6e6:	4aad      	ldr	r2, [pc, #692]	; (800a99c <_strtod_l+0xb0c>)
 800a6e8:	402a      	ands	r2, r5
 800a6ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a6ee:	f04f 31ff 	mov.w	r1, #4294967295
 800a6f2:	d816      	bhi.n	800a722 <_strtod_l+0x892>
 800a6f4:	0d12      	lsrs	r2, r2, #20
 800a6f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a6fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fe:	4298      	cmp	r0, r3
 800a700:	d142      	bne.n	800a788 <_strtod_l+0x8f8>
 800a702:	4ba7      	ldr	r3, [pc, #668]	; (800a9a0 <_strtod_l+0xb10>)
 800a704:	429d      	cmp	r5, r3
 800a706:	d102      	bne.n	800a70e <_strtod_l+0x87e>
 800a708:	3001      	adds	r0, #1
 800a70a:	f43f addf 	beq.w	800a2cc <_strtod_l+0x43c>
 800a70e:	4ba3      	ldr	r3, [pc, #652]	; (800a99c <_strtod_l+0xb0c>)
 800a710:	402b      	ands	r3, r5
 800a712:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a716:	f04f 0a00 	mov.w	sl, #0
 800a71a:	e7a0      	b.n	800a65e <_strtod_l+0x7ce>
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295
 800a720:	e7ed      	b.n	800a6fe <_strtod_l+0x86e>
 800a722:	460b      	mov	r3, r1
 800a724:	e7eb      	b.n	800a6fe <_strtod_l+0x86e>
 800a726:	bb7b      	cbnz	r3, 800a788 <_strtod_l+0x8f8>
 800a728:	f1ba 0f00 	cmp.w	sl, #0
 800a72c:	d12c      	bne.n	800a788 <_strtod_l+0x8f8>
 800a72e:	9904      	ldr	r1, [sp, #16]
 800a730:	4a9a      	ldr	r2, [pc, #616]	; (800a99c <_strtod_l+0xb0c>)
 800a732:	465b      	mov	r3, fp
 800a734:	b1f1      	cbz	r1, 800a774 <_strtod_l+0x8e4>
 800a736:	ea02 010b 	and.w	r1, r2, fp
 800a73a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a73e:	dc19      	bgt.n	800a774 <_strtod_l+0x8e4>
 800a740:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a744:	f77f ae5b 	ble.w	800a3fe <_strtod_l+0x56e>
 800a748:	4a96      	ldr	r2, [pc, #600]	; (800a9a4 <_strtod_l+0xb14>)
 800a74a:	2300      	movs	r3, #0
 800a74c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a750:	4650      	mov	r0, sl
 800a752:	4659      	mov	r1, fp
 800a754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a758:	f7f5 ff4e 	bl	80005f8 <__aeabi_dmul>
 800a75c:	4682      	mov	sl, r0
 800a75e:	468b      	mov	fp, r1
 800a760:	2900      	cmp	r1, #0
 800a762:	f47f adbe 	bne.w	800a2e2 <_strtod_l+0x452>
 800a766:	2800      	cmp	r0, #0
 800a768:	f47f adbb 	bne.w	800a2e2 <_strtod_l+0x452>
 800a76c:	2322      	movs	r3, #34	; 0x22
 800a76e:	f8c9 3000 	str.w	r3, [r9]
 800a772:	e5b6      	b.n	800a2e2 <_strtod_l+0x452>
 800a774:	4013      	ands	r3, r2
 800a776:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a77a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a77e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a782:	f04f 3aff 	mov.w	sl, #4294967295
 800a786:	e76a      	b.n	800a65e <_strtod_l+0x7ce>
 800a788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78a:	b193      	cbz	r3, 800a7b2 <_strtod_l+0x922>
 800a78c:	422b      	tst	r3, r5
 800a78e:	f43f af66 	beq.w	800a65e <_strtod_l+0x7ce>
 800a792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a794:	9a04      	ldr	r2, [sp, #16]
 800a796:	4650      	mov	r0, sl
 800a798:	4659      	mov	r1, fp
 800a79a:	b173      	cbz	r3, 800a7ba <_strtod_l+0x92a>
 800a79c:	f7ff fb5c 	bl	8009e58 <sulp>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7a8:	f7f5 fd70 	bl	800028c <__adddf3>
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	468b      	mov	fp, r1
 800a7b0:	e755      	b.n	800a65e <_strtod_l+0x7ce>
 800a7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7b4:	ea13 0f0a 	tst.w	r3, sl
 800a7b8:	e7e9      	b.n	800a78e <_strtod_l+0x8fe>
 800a7ba:	f7ff fb4d 	bl	8009e58 <sulp>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7c6:	f7f5 fd5f 	bl	8000288 <__aeabi_dsub>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	468b      	mov	fp, r1
 800a7d2:	f7f6 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	f47f ae11 	bne.w	800a3fe <_strtod_l+0x56e>
 800a7dc:	e73f      	b.n	800a65e <_strtod_l+0x7ce>
 800a7de:	4641      	mov	r1, r8
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f002 f9b0 	bl	800cb46 <__ratio>
 800a7e6:	ec57 6b10 	vmov	r6, r7, d0
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7f0:	ee10 0a10 	vmov	r0, s0
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	f7f6 f97b 	bl	8000af0 <__aeabi_dcmple>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d077      	beq.n	800a8ee <_strtod_l+0xa5e>
 800a7fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a800:	2b00      	cmp	r3, #0
 800a802:	d04a      	beq.n	800a89a <_strtod_l+0xa0a>
 800a804:	4b68      	ldr	r3, [pc, #416]	; (800a9a8 <_strtod_l+0xb18>)
 800a806:	2200      	movs	r2, #0
 800a808:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a80c:	4f66      	ldr	r7, [pc, #408]	; (800a9a8 <_strtod_l+0xb18>)
 800a80e:	2600      	movs	r6, #0
 800a810:	4b62      	ldr	r3, [pc, #392]	; (800a99c <_strtod_l+0xb0c>)
 800a812:	402b      	ands	r3, r5
 800a814:	930f      	str	r3, [sp, #60]	; 0x3c
 800a816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a818:	4b64      	ldr	r3, [pc, #400]	; (800a9ac <_strtod_l+0xb1c>)
 800a81a:	429a      	cmp	r2, r3
 800a81c:	f040 80ce 	bne.w	800a9bc <_strtod_l+0xb2c>
 800a820:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a824:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a828:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a82c:	ec4b ab10 	vmov	d0, sl, fp
 800a830:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a834:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a838:	f002 f8c0 	bl	800c9bc <__ulp>
 800a83c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a840:	ec53 2b10 	vmov	r2, r3, d0
 800a844:	f7f5 fed8 	bl	80005f8 <__aeabi_dmul>
 800a848:	4652      	mov	r2, sl
 800a84a:	465b      	mov	r3, fp
 800a84c:	f7f5 fd1e 	bl	800028c <__adddf3>
 800a850:	460b      	mov	r3, r1
 800a852:	4952      	ldr	r1, [pc, #328]	; (800a99c <_strtod_l+0xb0c>)
 800a854:	4a56      	ldr	r2, [pc, #344]	; (800a9b0 <_strtod_l+0xb20>)
 800a856:	4019      	ands	r1, r3
 800a858:	4291      	cmp	r1, r2
 800a85a:	4682      	mov	sl, r0
 800a85c:	d95b      	bls.n	800a916 <_strtod_l+0xa86>
 800a85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a860:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a864:	4293      	cmp	r3, r2
 800a866:	d103      	bne.n	800a870 <_strtod_l+0x9e0>
 800a868:	9b08      	ldr	r3, [sp, #32]
 800a86a:	3301      	adds	r3, #1
 800a86c:	f43f ad2e 	beq.w	800a2cc <_strtod_l+0x43c>
 800a870:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a9a0 <_strtod_l+0xb10>
 800a874:	f04f 3aff 	mov.w	sl, #4294967295
 800a878:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a87a:	4648      	mov	r0, r9
 800a87c:	f001 fe06 	bl	800c48c <_Bfree>
 800a880:	9905      	ldr	r1, [sp, #20]
 800a882:	4648      	mov	r0, r9
 800a884:	f001 fe02 	bl	800c48c <_Bfree>
 800a888:	4641      	mov	r1, r8
 800a88a:	4648      	mov	r0, r9
 800a88c:	f001 fdfe 	bl	800c48c <_Bfree>
 800a890:	4621      	mov	r1, r4
 800a892:	4648      	mov	r0, r9
 800a894:	f001 fdfa 	bl	800c48c <_Bfree>
 800a898:	e619      	b.n	800a4ce <_strtod_l+0x63e>
 800a89a:	f1ba 0f00 	cmp.w	sl, #0
 800a89e:	d11a      	bne.n	800a8d6 <_strtod_l+0xa46>
 800a8a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8a4:	b9eb      	cbnz	r3, 800a8e2 <_strtod_l+0xa52>
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	4b3f      	ldr	r3, [pc, #252]	; (800a9a8 <_strtod_l+0xb18>)
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	f7f6 f915 	bl	8000adc <__aeabi_dcmplt>
 800a8b2:	b9c8      	cbnz	r0, 800a8e8 <_strtod_l+0xa58>
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4b3e      	ldr	r3, [pc, #248]	; (800a9b4 <_strtod_l+0xb24>)
 800a8bc:	f7f5 fe9c 	bl	80005f8 <__aeabi_dmul>
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	460f      	mov	r7, r1
 800a8c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a8c8:	9618      	str	r6, [sp, #96]	; 0x60
 800a8ca:	9319      	str	r3, [sp, #100]	; 0x64
 800a8cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a8d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a8d4:	e79c      	b.n	800a810 <_strtod_l+0x980>
 800a8d6:	f1ba 0f01 	cmp.w	sl, #1
 800a8da:	d102      	bne.n	800a8e2 <_strtod_l+0xa52>
 800a8dc:	2d00      	cmp	r5, #0
 800a8de:	f43f ad8e 	beq.w	800a3fe <_strtod_l+0x56e>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	4b34      	ldr	r3, [pc, #208]	; (800a9b8 <_strtod_l+0xb28>)
 800a8e6:	e78f      	b.n	800a808 <_strtod_l+0x978>
 800a8e8:	2600      	movs	r6, #0
 800a8ea:	4f32      	ldr	r7, [pc, #200]	; (800a9b4 <_strtod_l+0xb24>)
 800a8ec:	e7ea      	b.n	800a8c4 <_strtod_l+0xa34>
 800a8ee:	4b31      	ldr	r3, [pc, #196]	; (800a9b4 <_strtod_l+0xb24>)
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f7f5 fe7f 	bl	80005f8 <__aeabi_dmul>
 800a8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	460f      	mov	r7, r1
 800a900:	b933      	cbnz	r3, 800a910 <_strtod_l+0xa80>
 800a902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a906:	9010      	str	r0, [sp, #64]	; 0x40
 800a908:	9311      	str	r3, [sp, #68]	; 0x44
 800a90a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a90e:	e7df      	b.n	800a8d0 <_strtod_l+0xa40>
 800a910:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a914:	e7f9      	b.n	800a90a <_strtod_l+0xa7a>
 800a916:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a91a:	9b04      	ldr	r3, [sp, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1ab      	bne.n	800a878 <_strtod_l+0x9e8>
 800a920:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a924:	0d1b      	lsrs	r3, r3, #20
 800a926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a928:	051b      	lsls	r3, r3, #20
 800a92a:	429a      	cmp	r2, r3
 800a92c:	465d      	mov	r5, fp
 800a92e:	d1a3      	bne.n	800a878 <_strtod_l+0x9e8>
 800a930:	4639      	mov	r1, r7
 800a932:	4630      	mov	r0, r6
 800a934:	f7f6 f910 	bl	8000b58 <__aeabi_d2iz>
 800a938:	f7f5 fdf4 	bl	8000524 <__aeabi_i2d>
 800a93c:	460b      	mov	r3, r1
 800a93e:	4602      	mov	r2, r0
 800a940:	4639      	mov	r1, r7
 800a942:	4630      	mov	r0, r6
 800a944:	f7f5 fca0 	bl	8000288 <__aeabi_dsub>
 800a948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a94a:	4606      	mov	r6, r0
 800a94c:	460f      	mov	r7, r1
 800a94e:	b933      	cbnz	r3, 800a95e <_strtod_l+0xace>
 800a950:	f1ba 0f00 	cmp.w	sl, #0
 800a954:	d103      	bne.n	800a95e <_strtod_l+0xace>
 800a956:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a95a:	2d00      	cmp	r5, #0
 800a95c:	d06d      	beq.n	800aa3a <_strtod_l+0xbaa>
 800a95e:	a30a      	add	r3, pc, #40	; (adr r3, 800a988 <_strtod_l+0xaf8>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	4630      	mov	r0, r6
 800a966:	4639      	mov	r1, r7
 800a968:	f7f6 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	f47f acb8 	bne.w	800a2e2 <_strtod_l+0x452>
 800a972:	a307      	add	r3, pc, #28	; (adr r3, 800a990 <_strtod_l+0xb00>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	4630      	mov	r0, r6
 800a97a:	4639      	mov	r1, r7
 800a97c:	f7f6 f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 800a980:	2800      	cmp	r0, #0
 800a982:	f43f af79 	beq.w	800a878 <_strtod_l+0x9e8>
 800a986:	e4ac      	b.n	800a2e2 <_strtod_l+0x452>
 800a988:	94a03595 	.word	0x94a03595
 800a98c:	3fdfffff 	.word	0x3fdfffff
 800a990:	35afe535 	.word	0x35afe535
 800a994:	3fe00000 	.word	0x3fe00000
 800a998:	000fffff 	.word	0x000fffff
 800a99c:	7ff00000 	.word	0x7ff00000
 800a9a0:	7fefffff 	.word	0x7fefffff
 800a9a4:	39500000 	.word	0x39500000
 800a9a8:	3ff00000 	.word	0x3ff00000
 800a9ac:	7fe00000 	.word	0x7fe00000
 800a9b0:	7c9fffff 	.word	0x7c9fffff
 800a9b4:	3fe00000 	.word	0x3fe00000
 800a9b8:	bff00000 	.word	0xbff00000
 800a9bc:	9b04      	ldr	r3, [sp, #16]
 800a9be:	b333      	cbz	r3, 800aa0e <_strtod_l+0xb7e>
 800a9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9c6:	d822      	bhi.n	800aa0e <_strtod_l+0xb7e>
 800a9c8:	a327      	add	r3, pc, #156	; (adr r3, 800aa68 <_strtod_l+0xbd8>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f6 f88d 	bl	8000af0 <__aeabi_dcmple>
 800a9d6:	b1a0      	cbz	r0, 800aa02 <_strtod_l+0xb72>
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f7f6 f8e4 	bl	8000ba8 <__aeabi_d2uiz>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	bf08      	it	eq
 800a9e4:	2001      	moveq	r0, #1
 800a9e6:	f7f5 fd8d 	bl	8000504 <__aeabi_ui2d>
 800a9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	bb03      	cbnz	r3, 800aa34 <_strtod_l+0xba4>
 800a9f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9f6:	9012      	str	r0, [sp, #72]	; 0x48
 800a9f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a9fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a9fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa06:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aa0a:	1a9b      	subs	r3, r3, r2
 800aa0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa0e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800aa12:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800aa16:	f001 ffd1 	bl	800c9bc <__ulp>
 800aa1a:	4650      	mov	r0, sl
 800aa1c:	ec53 2b10 	vmov	r2, r3, d0
 800aa20:	4659      	mov	r1, fp
 800aa22:	f7f5 fde9 	bl	80005f8 <__aeabi_dmul>
 800aa26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa2a:	f7f5 fc2f 	bl	800028c <__adddf3>
 800aa2e:	4682      	mov	sl, r0
 800aa30:	468b      	mov	fp, r1
 800aa32:	e772      	b.n	800a91a <_strtod_l+0xa8a>
 800aa34:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800aa38:	e7df      	b.n	800a9fa <_strtod_l+0xb6a>
 800aa3a:	a30d      	add	r3, pc, #52	; (adr r3, 800aa70 <_strtod_l+0xbe0>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f6 f84c 	bl	8000adc <__aeabi_dcmplt>
 800aa44:	e79c      	b.n	800a980 <_strtod_l+0xaf0>
 800aa46:	2300      	movs	r3, #0
 800aa48:	930d      	str	r3, [sp, #52]	; 0x34
 800aa4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	f7ff ba61 	b.w	8009f16 <_strtod_l+0x86>
 800aa54:	2b65      	cmp	r3, #101	; 0x65
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	f43f ab4e 	beq.w	800a0fa <_strtod_l+0x26a>
 800aa5e:	2101      	movs	r1, #1
 800aa60:	4614      	mov	r4, r2
 800aa62:	9104      	str	r1, [sp, #16]
 800aa64:	f7ff bacb 	b.w	8009ffe <_strtod_l+0x16e>
 800aa68:	ffc00000 	.word	0xffc00000
 800aa6c:	41dfffff 	.word	0x41dfffff
 800aa70:	94a03595 	.word	0x94a03595
 800aa74:	3fcfffff 	.word	0x3fcfffff

0800aa78 <_strtod_r>:
 800aa78:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <_strtod_r+0x18>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	b410      	push	{r4}
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	4c04      	ldr	r4, [pc, #16]	; (800aa94 <_strtod_r+0x1c>)
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bf08      	it	eq
 800aa86:	4623      	moveq	r3, r4
 800aa88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8c:	f7ff ba00 	b.w	8009e90 <_strtod_l>
 800aa90:	2000000c 	.word	0x2000000c
 800aa94:	20000070 	.word	0x20000070

0800aa98 <_strtol_l.isra.0>:
 800aa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	4689      	mov	r9, r1
 800aaa0:	4692      	mov	sl, r2
 800aaa2:	461e      	mov	r6, r3
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	463d      	mov	r5, r7
 800aaa8:	9808      	ldr	r0, [sp, #32]
 800aaaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaae:	f001 fc27 	bl	800c300 <__locale_ctype_ptr_l>
 800aab2:	4420      	add	r0, r4
 800aab4:	7843      	ldrb	r3, [r0, #1]
 800aab6:	f013 0308 	ands.w	r3, r3, #8
 800aaba:	d132      	bne.n	800ab22 <_strtol_l.isra.0+0x8a>
 800aabc:	2c2d      	cmp	r4, #45	; 0x2d
 800aabe:	d132      	bne.n	800ab26 <_strtol_l.isra.0+0x8e>
 800aac0:	787c      	ldrb	r4, [r7, #1]
 800aac2:	1cbd      	adds	r5, r7, #2
 800aac4:	2201      	movs	r2, #1
 800aac6:	2e00      	cmp	r6, #0
 800aac8:	d05d      	beq.n	800ab86 <_strtol_l.isra.0+0xee>
 800aaca:	2e10      	cmp	r6, #16
 800aacc:	d109      	bne.n	800aae2 <_strtol_l.isra.0+0x4a>
 800aace:	2c30      	cmp	r4, #48	; 0x30
 800aad0:	d107      	bne.n	800aae2 <_strtol_l.isra.0+0x4a>
 800aad2:	782b      	ldrb	r3, [r5, #0]
 800aad4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aad8:	2b58      	cmp	r3, #88	; 0x58
 800aada:	d14f      	bne.n	800ab7c <_strtol_l.isra.0+0xe4>
 800aadc:	786c      	ldrb	r4, [r5, #1]
 800aade:	2610      	movs	r6, #16
 800aae0:	3502      	adds	r5, #2
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	bf14      	ite	ne
 800aae6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aaea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aaee:	2700      	movs	r7, #0
 800aaf0:	fbb1 fcf6 	udiv	ip, r1, r6
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aafa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aafe:	2b09      	cmp	r3, #9
 800ab00:	d817      	bhi.n	800ab32 <_strtol_l.isra.0+0x9a>
 800ab02:	461c      	mov	r4, r3
 800ab04:	42a6      	cmp	r6, r4
 800ab06:	dd23      	ble.n	800ab50 <_strtol_l.isra.0+0xb8>
 800ab08:	1c7b      	adds	r3, r7, #1
 800ab0a:	d007      	beq.n	800ab1c <_strtol_l.isra.0+0x84>
 800ab0c:	4584      	cmp	ip, r0
 800ab0e:	d31c      	bcc.n	800ab4a <_strtol_l.isra.0+0xb2>
 800ab10:	d101      	bne.n	800ab16 <_strtol_l.isra.0+0x7e>
 800ab12:	45a6      	cmp	lr, r4
 800ab14:	db19      	blt.n	800ab4a <_strtol_l.isra.0+0xb2>
 800ab16:	fb00 4006 	mla	r0, r0, r6, r4
 800ab1a:	2701      	movs	r7, #1
 800ab1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab20:	e7eb      	b.n	800aafa <_strtol_l.isra.0+0x62>
 800ab22:	462f      	mov	r7, r5
 800ab24:	e7bf      	b.n	800aaa6 <_strtol_l.isra.0+0xe>
 800ab26:	2c2b      	cmp	r4, #43	; 0x2b
 800ab28:	bf04      	itt	eq
 800ab2a:	1cbd      	addeq	r5, r7, #2
 800ab2c:	787c      	ldrbeq	r4, [r7, #1]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	e7c9      	b.n	800aac6 <_strtol_l.isra.0+0x2e>
 800ab32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ab36:	2b19      	cmp	r3, #25
 800ab38:	d801      	bhi.n	800ab3e <_strtol_l.isra.0+0xa6>
 800ab3a:	3c37      	subs	r4, #55	; 0x37
 800ab3c:	e7e2      	b.n	800ab04 <_strtol_l.isra.0+0x6c>
 800ab3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ab42:	2b19      	cmp	r3, #25
 800ab44:	d804      	bhi.n	800ab50 <_strtol_l.isra.0+0xb8>
 800ab46:	3c57      	subs	r4, #87	; 0x57
 800ab48:	e7dc      	b.n	800ab04 <_strtol_l.isra.0+0x6c>
 800ab4a:	f04f 37ff 	mov.w	r7, #4294967295
 800ab4e:	e7e5      	b.n	800ab1c <_strtol_l.isra.0+0x84>
 800ab50:	1c7b      	adds	r3, r7, #1
 800ab52:	d108      	bne.n	800ab66 <_strtol_l.isra.0+0xce>
 800ab54:	2322      	movs	r3, #34	; 0x22
 800ab56:	f8c8 3000 	str.w	r3, [r8]
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	f1ba 0f00 	cmp.w	sl, #0
 800ab60:	d107      	bne.n	800ab72 <_strtol_l.isra.0+0xda>
 800ab62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab66:	b102      	cbz	r2, 800ab6a <_strtol_l.isra.0+0xd2>
 800ab68:	4240      	negs	r0, r0
 800ab6a:	f1ba 0f00 	cmp.w	sl, #0
 800ab6e:	d0f8      	beq.n	800ab62 <_strtol_l.isra.0+0xca>
 800ab70:	b10f      	cbz	r7, 800ab76 <_strtol_l.isra.0+0xde>
 800ab72:	f105 39ff 	add.w	r9, r5, #4294967295
 800ab76:	f8ca 9000 	str.w	r9, [sl]
 800ab7a:	e7f2      	b.n	800ab62 <_strtol_l.isra.0+0xca>
 800ab7c:	2430      	movs	r4, #48	; 0x30
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	d1af      	bne.n	800aae2 <_strtol_l.isra.0+0x4a>
 800ab82:	2608      	movs	r6, #8
 800ab84:	e7ad      	b.n	800aae2 <_strtol_l.isra.0+0x4a>
 800ab86:	2c30      	cmp	r4, #48	; 0x30
 800ab88:	d0a3      	beq.n	800aad2 <_strtol_l.isra.0+0x3a>
 800ab8a:	260a      	movs	r6, #10
 800ab8c:	e7a9      	b.n	800aae2 <_strtol_l.isra.0+0x4a>
	...

0800ab90 <_strtol_r>:
 800ab90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab92:	4c06      	ldr	r4, [pc, #24]	; (800abac <_strtol_r+0x1c>)
 800ab94:	4d06      	ldr	r5, [pc, #24]	; (800abb0 <_strtol_r+0x20>)
 800ab96:	6824      	ldr	r4, [r4, #0]
 800ab98:	6a24      	ldr	r4, [r4, #32]
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	bf08      	it	eq
 800ab9e:	462c      	moveq	r4, r5
 800aba0:	9400      	str	r4, [sp, #0]
 800aba2:	f7ff ff79 	bl	800aa98 <_strtol_l.isra.0>
 800aba6:	b003      	add	sp, #12
 800aba8:	bd30      	pop	{r4, r5, pc}
 800abaa:	bf00      	nop
 800abac:	2000000c 	.word	0x2000000c
 800abb0:	20000070 	.word	0x20000070

0800abb4 <__swbuf_r>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	460e      	mov	r6, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	4605      	mov	r5, r0
 800abbc:	b118      	cbz	r0, 800abc6 <__swbuf_r+0x12>
 800abbe:	6983      	ldr	r3, [r0, #24]
 800abc0:	b90b      	cbnz	r3, 800abc6 <__swbuf_r+0x12>
 800abc2:	f000 ffed 	bl	800bba0 <__sinit>
 800abc6:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <__swbuf_r+0x98>)
 800abc8:	429c      	cmp	r4, r3
 800abca:	d12a      	bne.n	800ac22 <__swbuf_r+0x6e>
 800abcc:	686c      	ldr	r4, [r5, #4]
 800abce:	69a3      	ldr	r3, [r4, #24]
 800abd0:	60a3      	str	r3, [r4, #8]
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	071a      	lsls	r2, r3, #28
 800abd6:	d52e      	bpl.n	800ac36 <__swbuf_r+0x82>
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	b363      	cbz	r3, 800ac36 <__swbuf_r+0x82>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	6820      	ldr	r0, [r4, #0]
 800abe0:	1ac0      	subs	r0, r0, r3
 800abe2:	6963      	ldr	r3, [r4, #20]
 800abe4:	b2f6      	uxtb	r6, r6
 800abe6:	4283      	cmp	r3, r0
 800abe8:	4637      	mov	r7, r6
 800abea:	dc04      	bgt.n	800abf6 <__swbuf_r+0x42>
 800abec:	4621      	mov	r1, r4
 800abee:	4628      	mov	r0, r5
 800abf0:	f000 ff6c 	bl	800bacc <_fflush_r>
 800abf4:	bb28      	cbnz	r0, 800ac42 <__swbuf_r+0x8e>
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	60a3      	str	r3, [r4, #8]
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	6022      	str	r2, [r4, #0]
 800ac02:	701e      	strb	r6, [r3, #0]
 800ac04:	6963      	ldr	r3, [r4, #20]
 800ac06:	3001      	adds	r0, #1
 800ac08:	4283      	cmp	r3, r0
 800ac0a:	d004      	beq.n	800ac16 <__swbuf_r+0x62>
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	07db      	lsls	r3, r3, #31
 800ac10:	d519      	bpl.n	800ac46 <__swbuf_r+0x92>
 800ac12:	2e0a      	cmp	r6, #10
 800ac14:	d117      	bne.n	800ac46 <__swbuf_r+0x92>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f000 ff57 	bl	800bacc <_fflush_r>
 800ac1e:	b190      	cbz	r0, 800ac46 <__swbuf_r+0x92>
 800ac20:	e00f      	b.n	800ac42 <__swbuf_r+0x8e>
 800ac22:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <__swbuf_r+0x9c>)
 800ac24:	429c      	cmp	r4, r3
 800ac26:	d101      	bne.n	800ac2c <__swbuf_r+0x78>
 800ac28:	68ac      	ldr	r4, [r5, #8]
 800ac2a:	e7d0      	b.n	800abce <__swbuf_r+0x1a>
 800ac2c:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <__swbuf_r+0xa0>)
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	bf08      	it	eq
 800ac32:	68ec      	ldreq	r4, [r5, #12]
 800ac34:	e7cb      	b.n	800abce <__swbuf_r+0x1a>
 800ac36:	4621      	mov	r1, r4
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f000 f80d 	bl	800ac58 <__swsetup_r>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d0cc      	beq.n	800abdc <__swbuf_r+0x28>
 800ac42:	f04f 37ff 	mov.w	r7, #4294967295
 800ac46:	4638      	mov	r0, r7
 800ac48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800d920 	.word	0x0800d920
 800ac50:	0800d940 	.word	0x0800d940
 800ac54:	0800d900 	.word	0x0800d900

0800ac58 <__swsetup_r>:
 800ac58:	4b32      	ldr	r3, [pc, #200]	; (800ad24 <__swsetup_r+0xcc>)
 800ac5a:	b570      	push	{r4, r5, r6, lr}
 800ac5c:	681d      	ldr	r5, [r3, #0]
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	b125      	cbz	r5, 800ac6e <__swsetup_r+0x16>
 800ac64:	69ab      	ldr	r3, [r5, #24]
 800ac66:	b913      	cbnz	r3, 800ac6e <__swsetup_r+0x16>
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f000 ff99 	bl	800bba0 <__sinit>
 800ac6e:	4b2e      	ldr	r3, [pc, #184]	; (800ad28 <__swsetup_r+0xd0>)
 800ac70:	429c      	cmp	r4, r3
 800ac72:	d10f      	bne.n	800ac94 <__swsetup_r+0x3c>
 800ac74:	686c      	ldr	r4, [r5, #4]
 800ac76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	0715      	lsls	r5, r2, #28
 800ac7e:	d42c      	bmi.n	800acda <__swsetup_r+0x82>
 800ac80:	06d0      	lsls	r0, r2, #27
 800ac82:	d411      	bmi.n	800aca8 <__swsetup_r+0x50>
 800ac84:	2209      	movs	r2, #9
 800ac86:	6032      	str	r2, [r6, #0]
 800ac88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac92:	e03e      	b.n	800ad12 <__swsetup_r+0xba>
 800ac94:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <__swsetup_r+0xd4>)
 800ac96:	429c      	cmp	r4, r3
 800ac98:	d101      	bne.n	800ac9e <__swsetup_r+0x46>
 800ac9a:	68ac      	ldr	r4, [r5, #8]
 800ac9c:	e7eb      	b.n	800ac76 <__swsetup_r+0x1e>
 800ac9e:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <__swsetup_r+0xd8>)
 800aca0:	429c      	cmp	r4, r3
 800aca2:	bf08      	it	eq
 800aca4:	68ec      	ldreq	r4, [r5, #12]
 800aca6:	e7e6      	b.n	800ac76 <__swsetup_r+0x1e>
 800aca8:	0751      	lsls	r1, r2, #29
 800acaa:	d512      	bpl.n	800acd2 <__swsetup_r+0x7a>
 800acac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acae:	b141      	cbz	r1, 800acc2 <__swsetup_r+0x6a>
 800acb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb4:	4299      	cmp	r1, r3
 800acb6:	d002      	beq.n	800acbe <__swsetup_r+0x66>
 800acb8:	4630      	mov	r0, r6
 800acba:	f001 ffc1 	bl	800cc40 <_free_r>
 800acbe:	2300      	movs	r3, #0
 800acc0:	6363      	str	r3, [r4, #52]	; 0x34
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	2300      	movs	r3, #0
 800accc:	6063      	str	r3, [r4, #4]
 800acce:	6923      	ldr	r3, [r4, #16]
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f043 0308 	orr.w	r3, r3, #8
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	b94b      	cbnz	r3, 800acf2 <__swsetup_r+0x9a>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ace4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace8:	d003      	beq.n	800acf2 <__swsetup_r+0x9a>
 800acea:	4621      	mov	r1, r4
 800acec:	4630      	mov	r0, r6
 800acee:	f001 fb3f 	bl	800c370 <__smakebuf_r>
 800acf2:	89a2      	ldrh	r2, [r4, #12]
 800acf4:	f012 0301 	ands.w	r3, r2, #1
 800acf8:	d00c      	beq.n	800ad14 <__swsetup_r+0xbc>
 800acfa:	2300      	movs	r3, #0
 800acfc:	60a3      	str	r3, [r4, #8]
 800acfe:	6963      	ldr	r3, [r4, #20]
 800ad00:	425b      	negs	r3, r3
 800ad02:	61a3      	str	r3, [r4, #24]
 800ad04:	6923      	ldr	r3, [r4, #16]
 800ad06:	b953      	cbnz	r3, 800ad1e <__swsetup_r+0xc6>
 800ad08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ad10:	d1ba      	bne.n	800ac88 <__swsetup_r+0x30>
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	0792      	lsls	r2, r2, #30
 800ad16:	bf58      	it	pl
 800ad18:	6963      	ldrpl	r3, [r4, #20]
 800ad1a:	60a3      	str	r3, [r4, #8]
 800ad1c:	e7f2      	b.n	800ad04 <__swsetup_r+0xac>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	e7f7      	b.n	800ad12 <__swsetup_r+0xba>
 800ad22:	bf00      	nop
 800ad24:	2000000c 	.word	0x2000000c
 800ad28:	0800d920 	.word	0x0800d920
 800ad2c:	0800d940 	.word	0x0800d940
 800ad30:	0800d900 	.word	0x0800d900

0800ad34 <quorem>:
 800ad34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad38:	6903      	ldr	r3, [r0, #16]
 800ad3a:	690c      	ldr	r4, [r1, #16]
 800ad3c:	42a3      	cmp	r3, r4
 800ad3e:	4680      	mov	r8, r0
 800ad40:	f2c0 8082 	blt.w	800ae48 <quorem+0x114>
 800ad44:	3c01      	subs	r4, #1
 800ad46:	f101 0714 	add.w	r7, r1, #20
 800ad4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ad4e:	f100 0614 	add.w	r6, r0, #20
 800ad52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ad56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ad5a:	eb06 030c 	add.w	r3, r6, ip
 800ad5e:	3501      	adds	r5, #1
 800ad60:	eb07 090c 	add.w	r9, r7, ip
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	fbb0 f5f5 	udiv	r5, r0, r5
 800ad6a:	b395      	cbz	r5, 800add2 <quorem+0x9e>
 800ad6c:	f04f 0a00 	mov.w	sl, #0
 800ad70:	4638      	mov	r0, r7
 800ad72:	46b6      	mov	lr, r6
 800ad74:	46d3      	mov	fp, sl
 800ad76:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad7a:	b293      	uxth	r3, r2
 800ad7c:	fb05 a303 	mla	r3, r5, r3, sl
 800ad80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	ebab 0303 	sub.w	r3, fp, r3
 800ad8a:	0c12      	lsrs	r2, r2, #16
 800ad8c:	f8de b000 	ldr.w	fp, [lr]
 800ad90:	fb05 a202 	mla	r2, r5, r2, sl
 800ad94:	fa13 f38b 	uxtah	r3, r3, fp
 800ad98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ad9c:	fa1f fb82 	uxth.w	fp, r2
 800ada0:	f8de 2000 	ldr.w	r2, [lr]
 800ada4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ada8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adac:	b29b      	uxth	r3, r3
 800adae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adb2:	4581      	cmp	r9, r0
 800adb4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800adb8:	f84e 3b04 	str.w	r3, [lr], #4
 800adbc:	d2db      	bcs.n	800ad76 <quorem+0x42>
 800adbe:	f856 300c 	ldr.w	r3, [r6, ip]
 800adc2:	b933      	cbnz	r3, 800add2 <quorem+0x9e>
 800adc4:	9b01      	ldr	r3, [sp, #4]
 800adc6:	3b04      	subs	r3, #4
 800adc8:	429e      	cmp	r6, r3
 800adca:	461a      	mov	r2, r3
 800adcc:	d330      	bcc.n	800ae30 <quorem+0xfc>
 800adce:	f8c8 4010 	str.w	r4, [r8, #16]
 800add2:	4640      	mov	r0, r8
 800add4:	f001 fd7a 	bl	800c8cc <__mcmp>
 800add8:	2800      	cmp	r0, #0
 800adda:	db25      	blt.n	800ae28 <quorem+0xf4>
 800addc:	3501      	adds	r5, #1
 800adde:	4630      	mov	r0, r6
 800ade0:	f04f 0c00 	mov.w	ip, #0
 800ade4:	f857 2b04 	ldr.w	r2, [r7], #4
 800ade8:	f8d0 e000 	ldr.w	lr, [r0]
 800adec:	b293      	uxth	r3, r2
 800adee:	ebac 0303 	sub.w	r3, ip, r3
 800adf2:	0c12      	lsrs	r2, r2, #16
 800adf4:	fa13 f38e 	uxtah	r3, r3, lr
 800adf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800adfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae06:	45b9      	cmp	r9, r7
 800ae08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae0c:	f840 3b04 	str.w	r3, [r0], #4
 800ae10:	d2e8      	bcs.n	800ade4 <quorem+0xb0>
 800ae12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ae16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ae1a:	b92a      	cbnz	r2, 800ae28 <quorem+0xf4>
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	429e      	cmp	r6, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	d30b      	bcc.n	800ae3c <quorem+0x108>
 800ae24:	f8c8 4010 	str.w	r4, [r8, #16]
 800ae28:	4628      	mov	r0, r5
 800ae2a:	b003      	add	sp, #12
 800ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae30:	6812      	ldr	r2, [r2, #0]
 800ae32:	3b04      	subs	r3, #4
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	d1ca      	bne.n	800adce <quorem+0x9a>
 800ae38:	3c01      	subs	r4, #1
 800ae3a:	e7c5      	b.n	800adc8 <quorem+0x94>
 800ae3c:	6812      	ldr	r2, [r2, #0]
 800ae3e:	3b04      	subs	r3, #4
 800ae40:	2a00      	cmp	r2, #0
 800ae42:	d1ef      	bne.n	800ae24 <quorem+0xf0>
 800ae44:	3c01      	subs	r4, #1
 800ae46:	e7ea      	b.n	800ae1e <quorem+0xea>
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e7ee      	b.n	800ae2a <quorem+0xf6>
 800ae4c:	0000      	movs	r0, r0
	...

0800ae50 <_dtoa_r>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	ec57 6b10 	vmov	r6, r7, d0
 800ae58:	b097      	sub	sp, #92	; 0x5c
 800ae5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae5c:	9106      	str	r1, [sp, #24]
 800ae5e:	4604      	mov	r4, r0
 800ae60:	920b      	str	r2, [sp, #44]	; 0x2c
 800ae62:	9312      	str	r3, [sp, #72]	; 0x48
 800ae64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae68:	e9cd 6700 	strd	r6, r7, [sp]
 800ae6c:	b93d      	cbnz	r5, 800ae7e <_dtoa_r+0x2e>
 800ae6e:	2010      	movs	r0, #16
 800ae70:	f001 fabe 	bl	800c3f0 <malloc>
 800ae74:	6260      	str	r0, [r4, #36]	; 0x24
 800ae76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae7a:	6005      	str	r5, [r0, #0]
 800ae7c:	60c5      	str	r5, [r0, #12]
 800ae7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae80:	6819      	ldr	r1, [r3, #0]
 800ae82:	b151      	cbz	r1, 800ae9a <_dtoa_r+0x4a>
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	604a      	str	r2, [r1, #4]
 800ae88:	2301      	movs	r3, #1
 800ae8a:	4093      	lsls	r3, r2
 800ae8c:	608b      	str	r3, [r1, #8]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f001 fafc 	bl	800c48c <_Bfree>
 800ae94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae96:	2200      	movs	r2, #0
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	1e3b      	subs	r3, r7, #0
 800ae9c:	bfbb      	ittet	lt
 800ae9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aea2:	9301      	strlt	r3, [sp, #4]
 800aea4:	2300      	movge	r3, #0
 800aea6:	2201      	movlt	r2, #1
 800aea8:	bfac      	ite	ge
 800aeaa:	f8c8 3000 	strge.w	r3, [r8]
 800aeae:	f8c8 2000 	strlt.w	r2, [r8]
 800aeb2:	4baf      	ldr	r3, [pc, #700]	; (800b170 <_dtoa_r+0x320>)
 800aeb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aeb8:	ea33 0308 	bics.w	r3, r3, r8
 800aebc:	d114      	bne.n	800aee8 <_dtoa_r+0x98>
 800aebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aec0:	f242 730f 	movw	r3, #9999	; 0x270f
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	9b00      	ldr	r3, [sp, #0]
 800aec8:	b923      	cbnz	r3, 800aed4 <_dtoa_r+0x84>
 800aeca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800aece:	2800      	cmp	r0, #0
 800aed0:	f000 8542 	beq.w	800b958 <_dtoa_r+0xb08>
 800aed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b184 <_dtoa_r+0x334>
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 8544 	beq.w	800b968 <_dtoa_r+0xb18>
 800aee0:	f10b 0303 	add.w	r3, fp, #3
 800aee4:	f000 bd3e 	b.w	800b964 <_dtoa_r+0xb14>
 800aee8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aeec:	2200      	movs	r2, #0
 800aeee:	2300      	movs	r3, #0
 800aef0:	4630      	mov	r0, r6
 800aef2:	4639      	mov	r1, r7
 800aef4:	f7f5 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 800aef8:	4681      	mov	r9, r0
 800aefa:	b168      	cbz	r0, 800af18 <_dtoa_r+0xc8>
 800aefc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aefe:	2301      	movs	r3, #1
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 8524 	beq.w	800b952 <_dtoa_r+0xb02>
 800af0a:	4b9a      	ldr	r3, [pc, #616]	; (800b174 <_dtoa_r+0x324>)
 800af0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af0e:	f103 3bff 	add.w	fp, r3, #4294967295
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	f000 bd28 	b.w	800b968 <_dtoa_r+0xb18>
 800af18:	aa14      	add	r2, sp, #80	; 0x50
 800af1a:	a915      	add	r1, sp, #84	; 0x54
 800af1c:	ec47 6b10 	vmov	d0, r6, r7
 800af20:	4620      	mov	r0, r4
 800af22:	f001 fdc1 	bl	800caa8 <__d2b>
 800af26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800af2a:	9004      	str	r0, [sp, #16]
 800af2c:	2d00      	cmp	r5, #0
 800af2e:	d07c      	beq.n	800b02a <_dtoa_r+0x1da>
 800af30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800af38:	46b2      	mov	sl, r6
 800af3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800af3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800af46:	2200      	movs	r2, #0
 800af48:	4b8b      	ldr	r3, [pc, #556]	; (800b178 <_dtoa_r+0x328>)
 800af4a:	4650      	mov	r0, sl
 800af4c:	4659      	mov	r1, fp
 800af4e:	f7f5 f99b 	bl	8000288 <__aeabi_dsub>
 800af52:	a381      	add	r3, pc, #516	; (adr r3, 800b158 <_dtoa_r+0x308>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7f5 fb4e 	bl	80005f8 <__aeabi_dmul>
 800af5c:	a380      	add	r3, pc, #512	; (adr r3, 800b160 <_dtoa_r+0x310>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	f7f5 f993 	bl	800028c <__adddf3>
 800af66:	4606      	mov	r6, r0
 800af68:	4628      	mov	r0, r5
 800af6a:	460f      	mov	r7, r1
 800af6c:	f7f5 fada 	bl	8000524 <__aeabi_i2d>
 800af70:	a37d      	add	r3, pc, #500	; (adr r3, 800b168 <_dtoa_r+0x318>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 fb3f 	bl	80005f8 <__aeabi_dmul>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4630      	mov	r0, r6
 800af80:	4639      	mov	r1, r7
 800af82:	f7f5 f983 	bl	800028c <__adddf3>
 800af86:	4606      	mov	r6, r0
 800af88:	460f      	mov	r7, r1
 800af8a:	f7f5 fde5 	bl	8000b58 <__aeabi_d2iz>
 800af8e:	2200      	movs	r2, #0
 800af90:	4682      	mov	sl, r0
 800af92:	2300      	movs	r3, #0
 800af94:	4630      	mov	r0, r6
 800af96:	4639      	mov	r1, r7
 800af98:	f7f5 fda0 	bl	8000adc <__aeabi_dcmplt>
 800af9c:	b148      	cbz	r0, 800afb2 <_dtoa_r+0x162>
 800af9e:	4650      	mov	r0, sl
 800afa0:	f7f5 fac0 	bl	8000524 <__aeabi_i2d>
 800afa4:	4632      	mov	r2, r6
 800afa6:	463b      	mov	r3, r7
 800afa8:	f7f5 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800afac:	b908      	cbnz	r0, 800afb2 <_dtoa_r+0x162>
 800afae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afb2:	f1ba 0f16 	cmp.w	sl, #22
 800afb6:	d859      	bhi.n	800b06c <_dtoa_r+0x21c>
 800afb8:	4970      	ldr	r1, [pc, #448]	; (800b17c <_dtoa_r+0x32c>)
 800afba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800afbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc6:	f7f5 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d050      	beq.n	800b070 <_dtoa_r+0x220>
 800afce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afd2:	2300      	movs	r3, #0
 800afd4:	930f      	str	r3, [sp, #60]	; 0x3c
 800afd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afd8:	1b5d      	subs	r5, r3, r5
 800afda:	f1b5 0801 	subs.w	r8, r5, #1
 800afde:	bf49      	itett	mi
 800afe0:	f1c5 0301 	rsbmi	r3, r5, #1
 800afe4:	2300      	movpl	r3, #0
 800afe6:	9305      	strmi	r3, [sp, #20]
 800afe8:	f04f 0800 	movmi.w	r8, #0
 800afec:	bf58      	it	pl
 800afee:	9305      	strpl	r3, [sp, #20]
 800aff0:	f1ba 0f00 	cmp.w	sl, #0
 800aff4:	db3e      	blt.n	800b074 <_dtoa_r+0x224>
 800aff6:	2300      	movs	r3, #0
 800aff8:	44d0      	add	r8, sl
 800affa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800affe:	9307      	str	r3, [sp, #28]
 800b000:	9b06      	ldr	r3, [sp, #24]
 800b002:	2b09      	cmp	r3, #9
 800b004:	f200 8090 	bhi.w	800b128 <_dtoa_r+0x2d8>
 800b008:	2b05      	cmp	r3, #5
 800b00a:	bfc4      	itt	gt
 800b00c:	3b04      	subgt	r3, #4
 800b00e:	9306      	strgt	r3, [sp, #24]
 800b010:	9b06      	ldr	r3, [sp, #24]
 800b012:	f1a3 0302 	sub.w	r3, r3, #2
 800b016:	bfcc      	ite	gt
 800b018:	2500      	movgt	r5, #0
 800b01a:	2501      	movle	r5, #1
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	f200 808f 	bhi.w	800b140 <_dtoa_r+0x2f0>
 800b022:	e8df f003 	tbb	[pc, r3]
 800b026:	7f7d      	.short	0x7f7d
 800b028:	7131      	.short	0x7131
 800b02a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b02e:	441d      	add	r5, r3
 800b030:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b034:	2820      	cmp	r0, #32
 800b036:	dd13      	ble.n	800b060 <_dtoa_r+0x210>
 800b038:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	fa08 f800 	lsl.w	r8, r8, r0
 800b042:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b046:	fa23 f000 	lsr.w	r0, r3, r0
 800b04a:	ea48 0000 	orr.w	r0, r8, r0
 800b04e:	f7f5 fa59 	bl	8000504 <__aeabi_ui2d>
 800b052:	2301      	movs	r3, #1
 800b054:	4682      	mov	sl, r0
 800b056:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b05a:	3d01      	subs	r5, #1
 800b05c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b05e:	e772      	b.n	800af46 <_dtoa_r+0xf6>
 800b060:	9b00      	ldr	r3, [sp, #0]
 800b062:	f1c0 0020 	rsb	r0, r0, #32
 800b066:	fa03 f000 	lsl.w	r0, r3, r0
 800b06a:	e7f0      	b.n	800b04e <_dtoa_r+0x1fe>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e7b1      	b.n	800afd4 <_dtoa_r+0x184>
 800b070:	900f      	str	r0, [sp, #60]	; 0x3c
 800b072:	e7b0      	b.n	800afd6 <_dtoa_r+0x186>
 800b074:	9b05      	ldr	r3, [sp, #20]
 800b076:	eba3 030a 	sub.w	r3, r3, sl
 800b07a:	9305      	str	r3, [sp, #20]
 800b07c:	f1ca 0300 	rsb	r3, sl, #0
 800b080:	9307      	str	r3, [sp, #28]
 800b082:	2300      	movs	r3, #0
 800b084:	930e      	str	r3, [sp, #56]	; 0x38
 800b086:	e7bb      	b.n	800b000 <_dtoa_r+0x1b0>
 800b088:	2301      	movs	r3, #1
 800b08a:	930a      	str	r3, [sp, #40]	; 0x28
 800b08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dd59      	ble.n	800b146 <_dtoa_r+0x2f6>
 800b092:	9302      	str	r3, [sp, #8]
 800b094:	4699      	mov	r9, r3
 800b096:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b098:	2200      	movs	r2, #0
 800b09a:	6072      	str	r2, [r6, #4]
 800b09c:	2204      	movs	r2, #4
 800b09e:	f102 0014 	add.w	r0, r2, #20
 800b0a2:	4298      	cmp	r0, r3
 800b0a4:	6871      	ldr	r1, [r6, #4]
 800b0a6:	d953      	bls.n	800b150 <_dtoa_r+0x300>
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f001 f9bb 	bl	800c424 <_Balloc>
 800b0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0b0:	6030      	str	r0, [r6, #0]
 800b0b2:	f1b9 0f0e 	cmp.w	r9, #14
 800b0b6:	f8d3 b000 	ldr.w	fp, [r3]
 800b0ba:	f200 80e6 	bhi.w	800b28a <_dtoa_r+0x43a>
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	f000 80e3 	beq.w	800b28a <_dtoa_r+0x43a>
 800b0c4:	ed9d 7b00 	vldr	d7, [sp]
 800b0c8:	f1ba 0f00 	cmp.w	sl, #0
 800b0cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b0d0:	dd74      	ble.n	800b1bc <_dtoa_r+0x36c>
 800b0d2:	4a2a      	ldr	r2, [pc, #168]	; (800b17c <_dtoa_r+0x32c>)
 800b0d4:	f00a 030f 	and.w	r3, sl, #15
 800b0d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b0dc:	ed93 7b00 	vldr	d7, [r3]
 800b0e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b0e4:	06f0      	lsls	r0, r6, #27
 800b0e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b0ea:	d565      	bpl.n	800b1b8 <_dtoa_r+0x368>
 800b0ec:	4b24      	ldr	r3, [pc, #144]	; (800b180 <_dtoa_r+0x330>)
 800b0ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0f6:	f7f5 fba9 	bl	800084c <__aeabi_ddiv>
 800b0fa:	e9cd 0100 	strd	r0, r1, [sp]
 800b0fe:	f006 060f 	and.w	r6, r6, #15
 800b102:	2503      	movs	r5, #3
 800b104:	4f1e      	ldr	r7, [pc, #120]	; (800b180 <_dtoa_r+0x330>)
 800b106:	e04c      	b.n	800b1a2 <_dtoa_r+0x352>
 800b108:	2301      	movs	r3, #1
 800b10a:	930a      	str	r3, [sp, #40]	; 0x28
 800b10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10e:	4453      	add	r3, sl
 800b110:	f103 0901 	add.w	r9, r3, #1
 800b114:	9302      	str	r3, [sp, #8]
 800b116:	464b      	mov	r3, r9
 800b118:	2b01      	cmp	r3, #1
 800b11a:	bfb8      	it	lt
 800b11c:	2301      	movlt	r3, #1
 800b11e:	e7ba      	b.n	800b096 <_dtoa_r+0x246>
 800b120:	2300      	movs	r3, #0
 800b122:	e7b2      	b.n	800b08a <_dtoa_r+0x23a>
 800b124:	2300      	movs	r3, #0
 800b126:	e7f0      	b.n	800b10a <_dtoa_r+0x2ba>
 800b128:	2501      	movs	r5, #1
 800b12a:	2300      	movs	r3, #0
 800b12c:	9306      	str	r3, [sp, #24]
 800b12e:	950a      	str	r5, [sp, #40]	; 0x28
 800b130:	f04f 33ff 	mov.w	r3, #4294967295
 800b134:	9302      	str	r3, [sp, #8]
 800b136:	4699      	mov	r9, r3
 800b138:	2200      	movs	r2, #0
 800b13a:	2312      	movs	r3, #18
 800b13c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b13e:	e7aa      	b.n	800b096 <_dtoa_r+0x246>
 800b140:	2301      	movs	r3, #1
 800b142:	930a      	str	r3, [sp, #40]	; 0x28
 800b144:	e7f4      	b.n	800b130 <_dtoa_r+0x2e0>
 800b146:	2301      	movs	r3, #1
 800b148:	9302      	str	r3, [sp, #8]
 800b14a:	4699      	mov	r9, r3
 800b14c:	461a      	mov	r2, r3
 800b14e:	e7f5      	b.n	800b13c <_dtoa_r+0x2ec>
 800b150:	3101      	adds	r1, #1
 800b152:	6071      	str	r1, [r6, #4]
 800b154:	0052      	lsls	r2, r2, #1
 800b156:	e7a2      	b.n	800b09e <_dtoa_r+0x24e>
 800b158:	636f4361 	.word	0x636f4361
 800b15c:	3fd287a7 	.word	0x3fd287a7
 800b160:	8b60c8b3 	.word	0x8b60c8b3
 800b164:	3fc68a28 	.word	0x3fc68a28
 800b168:	509f79fb 	.word	0x509f79fb
 800b16c:	3fd34413 	.word	0x3fd34413
 800b170:	7ff00000 	.word	0x7ff00000
 800b174:	0800d871 	.word	0x0800d871
 800b178:	3ff80000 	.word	0x3ff80000
 800b17c:	0800d998 	.word	0x0800d998
 800b180:	0800d970 	.word	0x0800d970
 800b184:	0800d8f9 	.word	0x0800d8f9
 800b188:	07f1      	lsls	r1, r6, #31
 800b18a:	d508      	bpl.n	800b19e <_dtoa_r+0x34e>
 800b18c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b194:	f7f5 fa30 	bl	80005f8 <__aeabi_dmul>
 800b198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b19c:	3501      	adds	r5, #1
 800b19e:	1076      	asrs	r6, r6, #1
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	2e00      	cmp	r6, #0
 800b1a4:	d1f0      	bne.n	800b188 <_dtoa_r+0x338>
 800b1a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b1aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1ae:	f7f5 fb4d 	bl	800084c <__aeabi_ddiv>
 800b1b2:	e9cd 0100 	strd	r0, r1, [sp]
 800b1b6:	e01a      	b.n	800b1ee <_dtoa_r+0x39e>
 800b1b8:	2502      	movs	r5, #2
 800b1ba:	e7a3      	b.n	800b104 <_dtoa_r+0x2b4>
 800b1bc:	f000 80a0 	beq.w	800b300 <_dtoa_r+0x4b0>
 800b1c0:	f1ca 0600 	rsb	r6, sl, #0
 800b1c4:	4b9f      	ldr	r3, [pc, #636]	; (800b444 <_dtoa_r+0x5f4>)
 800b1c6:	4fa0      	ldr	r7, [pc, #640]	; (800b448 <_dtoa_r+0x5f8>)
 800b1c8:	f006 020f 	and.w	r2, r6, #15
 800b1cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b1d8:	f7f5 fa0e 	bl	80005f8 <__aeabi_dmul>
 800b1dc:	e9cd 0100 	strd	r0, r1, [sp]
 800b1e0:	1136      	asrs	r6, r6, #4
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	2502      	movs	r5, #2
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d17f      	bne.n	800b2ea <_dtoa_r+0x49a>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1e1      	bne.n	800b1b2 <_dtoa_r+0x362>
 800b1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 8087 	beq.w	800b304 <_dtoa_r+0x4b4>
 800b1f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	4b93      	ldr	r3, [pc, #588]	; (800b44c <_dtoa_r+0x5fc>)
 800b1fe:	4630      	mov	r0, r6
 800b200:	4639      	mov	r1, r7
 800b202:	f7f5 fc6b 	bl	8000adc <__aeabi_dcmplt>
 800b206:	2800      	cmp	r0, #0
 800b208:	d07c      	beq.n	800b304 <_dtoa_r+0x4b4>
 800b20a:	f1b9 0f00 	cmp.w	r9, #0
 800b20e:	d079      	beq.n	800b304 <_dtoa_r+0x4b4>
 800b210:	9b02      	ldr	r3, [sp, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	dd35      	ble.n	800b282 <_dtoa_r+0x432>
 800b216:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	4639      	mov	r1, r7
 800b21e:	2200      	movs	r2, #0
 800b220:	4b8b      	ldr	r3, [pc, #556]	; (800b450 <_dtoa_r+0x600>)
 800b222:	4630      	mov	r0, r6
 800b224:	f7f5 f9e8 	bl	80005f8 <__aeabi_dmul>
 800b228:	e9cd 0100 	strd	r0, r1, [sp]
 800b22c:	9f02      	ldr	r7, [sp, #8]
 800b22e:	3501      	adds	r5, #1
 800b230:	4628      	mov	r0, r5
 800b232:	f7f5 f977 	bl	8000524 <__aeabi_i2d>
 800b236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b23a:	f7f5 f9dd 	bl	80005f8 <__aeabi_dmul>
 800b23e:	2200      	movs	r2, #0
 800b240:	4b84      	ldr	r3, [pc, #528]	; (800b454 <_dtoa_r+0x604>)
 800b242:	f7f5 f823 	bl	800028c <__adddf3>
 800b246:	4605      	mov	r5, r0
 800b248:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b24c:	2f00      	cmp	r7, #0
 800b24e:	d15d      	bne.n	800b30c <_dtoa_r+0x4bc>
 800b250:	2200      	movs	r2, #0
 800b252:	4b81      	ldr	r3, [pc, #516]	; (800b458 <_dtoa_r+0x608>)
 800b254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b258:	f7f5 f816 	bl	8000288 <__aeabi_dsub>
 800b25c:	462a      	mov	r2, r5
 800b25e:	4633      	mov	r3, r6
 800b260:	e9cd 0100 	strd	r0, r1, [sp]
 800b264:	f7f5 fc58 	bl	8000b18 <__aeabi_dcmpgt>
 800b268:	2800      	cmp	r0, #0
 800b26a:	f040 8288 	bne.w	800b77e <_dtoa_r+0x92e>
 800b26e:	462a      	mov	r2, r5
 800b270:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b274:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b278:	f7f5 fc30 	bl	8000adc <__aeabi_dcmplt>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	f040 827c 	bne.w	800b77a <_dtoa_r+0x92a>
 800b282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b286:	e9cd 2300 	strd	r2, r3, [sp]
 800b28a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f2c0 8150 	blt.w	800b532 <_dtoa_r+0x6e2>
 800b292:	f1ba 0f0e 	cmp.w	sl, #14
 800b296:	f300 814c 	bgt.w	800b532 <_dtoa_r+0x6e2>
 800b29a:	4b6a      	ldr	r3, [pc, #424]	; (800b444 <_dtoa_r+0x5f4>)
 800b29c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b2a0:	ed93 7b00 	vldr	d7, [r3]
 800b2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2ac:	f280 80d8 	bge.w	800b460 <_dtoa_r+0x610>
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	f300 80d4 	bgt.w	800b460 <_dtoa_r+0x610>
 800b2b8:	f040 825e 	bne.w	800b778 <_dtoa_r+0x928>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4b66      	ldr	r3, [pc, #408]	; (800b458 <_dtoa_r+0x608>)
 800b2c0:	ec51 0b17 	vmov	r0, r1, d7
 800b2c4:	f7f5 f998 	bl	80005f8 <__aeabi_dmul>
 800b2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2cc:	f7f5 fc1a 	bl	8000b04 <__aeabi_dcmpge>
 800b2d0:	464f      	mov	r7, r9
 800b2d2:	464e      	mov	r6, r9
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f040 8234 	bne.w	800b742 <_dtoa_r+0x8f2>
 800b2da:	2331      	movs	r3, #49	; 0x31
 800b2dc:	f10b 0501 	add.w	r5, fp, #1
 800b2e0:	f88b 3000 	strb.w	r3, [fp]
 800b2e4:	f10a 0a01 	add.w	sl, sl, #1
 800b2e8:	e22f      	b.n	800b74a <_dtoa_r+0x8fa>
 800b2ea:	07f2      	lsls	r2, r6, #31
 800b2ec:	d505      	bpl.n	800b2fa <_dtoa_r+0x4aa>
 800b2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f2:	f7f5 f981 	bl	80005f8 <__aeabi_dmul>
 800b2f6:	3501      	adds	r5, #1
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	1076      	asrs	r6, r6, #1
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	e772      	b.n	800b1e6 <_dtoa_r+0x396>
 800b300:	2502      	movs	r5, #2
 800b302:	e774      	b.n	800b1ee <_dtoa_r+0x39e>
 800b304:	f8cd a020 	str.w	sl, [sp, #32]
 800b308:	464f      	mov	r7, r9
 800b30a:	e791      	b.n	800b230 <_dtoa_r+0x3e0>
 800b30c:	4b4d      	ldr	r3, [pc, #308]	; (800b444 <_dtoa_r+0x5f4>)
 800b30e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b312:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d047      	beq.n	800b3ac <_dtoa_r+0x55c>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	2000      	movs	r0, #0
 800b322:	494e      	ldr	r1, [pc, #312]	; (800b45c <_dtoa_r+0x60c>)
 800b324:	f7f5 fa92 	bl	800084c <__aeabi_ddiv>
 800b328:	462a      	mov	r2, r5
 800b32a:	4633      	mov	r3, r6
 800b32c:	f7f4 ffac 	bl	8000288 <__aeabi_dsub>
 800b330:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b334:	465d      	mov	r5, fp
 800b336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b33a:	f7f5 fc0d 	bl	8000b58 <__aeabi_d2iz>
 800b33e:	4606      	mov	r6, r0
 800b340:	f7f5 f8f0 	bl	8000524 <__aeabi_i2d>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b34c:	f7f4 ff9c 	bl	8000288 <__aeabi_dsub>
 800b350:	3630      	adds	r6, #48	; 0x30
 800b352:	f805 6b01 	strb.w	r6, [r5], #1
 800b356:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b35a:	e9cd 0100 	strd	r0, r1, [sp]
 800b35e:	f7f5 fbbd 	bl	8000adc <__aeabi_dcmplt>
 800b362:	2800      	cmp	r0, #0
 800b364:	d163      	bne.n	800b42e <_dtoa_r+0x5de>
 800b366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b36a:	2000      	movs	r0, #0
 800b36c:	4937      	ldr	r1, [pc, #220]	; (800b44c <_dtoa_r+0x5fc>)
 800b36e:	f7f4 ff8b 	bl	8000288 <__aeabi_dsub>
 800b372:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b376:	f7f5 fbb1 	bl	8000adc <__aeabi_dcmplt>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	f040 80b7 	bne.w	800b4ee <_dtoa_r+0x69e>
 800b380:	eba5 030b 	sub.w	r3, r5, fp
 800b384:	429f      	cmp	r7, r3
 800b386:	f77f af7c 	ble.w	800b282 <_dtoa_r+0x432>
 800b38a:	2200      	movs	r2, #0
 800b38c:	4b30      	ldr	r3, [pc, #192]	; (800b450 <_dtoa_r+0x600>)
 800b38e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	2200      	movs	r2, #0
 800b398:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b39c:	4b2c      	ldr	r3, [pc, #176]	; (800b450 <_dtoa_r+0x600>)
 800b39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3a2:	f7f5 f929 	bl	80005f8 <__aeabi_dmul>
 800b3a6:	e9cd 0100 	strd	r0, r1, [sp]
 800b3aa:	e7c4      	b.n	800b336 <_dtoa_r+0x4e6>
 800b3ac:	462a      	mov	r2, r5
 800b3ae:	4633      	mov	r3, r6
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b3b8:	eb0b 0507 	add.w	r5, fp, r7
 800b3bc:	465e      	mov	r6, fp
 800b3be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3c2:	f7f5 fbc9 	bl	8000b58 <__aeabi_d2iz>
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	f7f5 f8ac 	bl	8000524 <__aeabi_i2d>
 800b3cc:	3730      	adds	r7, #48	; 0x30
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3d6:	f7f4 ff57 	bl	8000288 <__aeabi_dsub>
 800b3da:	f806 7b01 	strb.w	r7, [r6], #1
 800b3de:	42ae      	cmp	r6, r5
 800b3e0:	e9cd 0100 	strd	r0, r1, [sp]
 800b3e4:	f04f 0200 	mov.w	r2, #0
 800b3e8:	d126      	bne.n	800b438 <_dtoa_r+0x5e8>
 800b3ea:	4b1c      	ldr	r3, [pc, #112]	; (800b45c <_dtoa_r+0x60c>)
 800b3ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3f0:	f7f4 ff4c 	bl	800028c <__adddf3>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3fc:	f7f5 fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 800b400:	2800      	cmp	r0, #0
 800b402:	d174      	bne.n	800b4ee <_dtoa_r+0x69e>
 800b404:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b408:	2000      	movs	r0, #0
 800b40a:	4914      	ldr	r1, [pc, #80]	; (800b45c <_dtoa_r+0x60c>)
 800b40c:	f7f4 ff3c 	bl	8000288 <__aeabi_dsub>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b418:	f7f5 fb60 	bl	8000adc <__aeabi_dcmplt>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f43f af30 	beq.w	800b282 <_dtoa_r+0x432>
 800b422:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b426:	2b30      	cmp	r3, #48	; 0x30
 800b428:	f105 32ff 	add.w	r2, r5, #4294967295
 800b42c:	d002      	beq.n	800b434 <_dtoa_r+0x5e4>
 800b42e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b432:	e04a      	b.n	800b4ca <_dtoa_r+0x67a>
 800b434:	4615      	mov	r5, r2
 800b436:	e7f4      	b.n	800b422 <_dtoa_r+0x5d2>
 800b438:	4b05      	ldr	r3, [pc, #20]	; (800b450 <_dtoa_r+0x600>)
 800b43a:	f7f5 f8dd 	bl	80005f8 <__aeabi_dmul>
 800b43e:	e9cd 0100 	strd	r0, r1, [sp]
 800b442:	e7bc      	b.n	800b3be <_dtoa_r+0x56e>
 800b444:	0800d998 	.word	0x0800d998
 800b448:	0800d970 	.word	0x0800d970
 800b44c:	3ff00000 	.word	0x3ff00000
 800b450:	40240000 	.word	0x40240000
 800b454:	401c0000 	.word	0x401c0000
 800b458:	40140000 	.word	0x40140000
 800b45c:	3fe00000 	.word	0x3fe00000
 800b460:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b464:	465d      	mov	r5, fp
 800b466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b46a:	4630      	mov	r0, r6
 800b46c:	4639      	mov	r1, r7
 800b46e:	f7f5 f9ed 	bl	800084c <__aeabi_ddiv>
 800b472:	f7f5 fb71 	bl	8000b58 <__aeabi_d2iz>
 800b476:	4680      	mov	r8, r0
 800b478:	f7f5 f854 	bl	8000524 <__aeabi_i2d>
 800b47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b480:	f7f5 f8ba 	bl	80005f8 <__aeabi_dmul>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b490:	f7f4 fefa 	bl	8000288 <__aeabi_dsub>
 800b494:	f805 6b01 	strb.w	r6, [r5], #1
 800b498:	eba5 060b 	sub.w	r6, r5, fp
 800b49c:	45b1      	cmp	r9, r6
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	d139      	bne.n	800b518 <_dtoa_r+0x6c8>
 800b4a4:	f7f4 fef2 	bl	800028c <__adddf3>
 800b4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	460f      	mov	r7, r1
 800b4b0:	f7f5 fb32 	bl	8000b18 <__aeabi_dcmpgt>
 800b4b4:	b9c8      	cbnz	r0, 800b4ea <_dtoa_r+0x69a>
 800b4b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	4639      	mov	r1, r7
 800b4be:	f7f5 fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4c2:	b110      	cbz	r0, 800b4ca <_dtoa_r+0x67a>
 800b4c4:	f018 0f01 	tst.w	r8, #1
 800b4c8:	d10f      	bne.n	800b4ea <_dtoa_r+0x69a>
 800b4ca:	9904      	ldr	r1, [sp, #16]
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 ffdd 	bl	800c48c <_Bfree>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4d6:	702b      	strb	r3, [r5, #0]
 800b4d8:	f10a 0301 	add.w	r3, sl, #1
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 8241 	beq.w	800b968 <_dtoa_r+0xb18>
 800b4e6:	601d      	str	r5, [r3, #0]
 800b4e8:	e23e      	b.n	800b968 <_dtoa_r+0xb18>
 800b4ea:	f8cd a020 	str.w	sl, [sp, #32]
 800b4ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4f2:	2a39      	cmp	r2, #57	; 0x39
 800b4f4:	f105 33ff 	add.w	r3, r5, #4294967295
 800b4f8:	d108      	bne.n	800b50c <_dtoa_r+0x6bc>
 800b4fa:	459b      	cmp	fp, r3
 800b4fc:	d10a      	bne.n	800b514 <_dtoa_r+0x6c4>
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	3301      	adds	r3, #1
 800b502:	9308      	str	r3, [sp, #32]
 800b504:	2330      	movs	r3, #48	; 0x30
 800b506:	f88b 3000 	strb.w	r3, [fp]
 800b50a:	465b      	mov	r3, fp
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	3201      	adds	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	e78c      	b.n	800b42e <_dtoa_r+0x5de>
 800b514:	461d      	mov	r5, r3
 800b516:	e7ea      	b.n	800b4ee <_dtoa_r+0x69e>
 800b518:	2200      	movs	r2, #0
 800b51a:	4b9b      	ldr	r3, [pc, #620]	; (800b788 <_dtoa_r+0x938>)
 800b51c:	f7f5 f86c 	bl	80005f8 <__aeabi_dmul>
 800b520:	2200      	movs	r2, #0
 800b522:	2300      	movs	r3, #0
 800b524:	4606      	mov	r6, r0
 800b526:	460f      	mov	r7, r1
 800b528:	f7f5 face 	bl	8000ac8 <__aeabi_dcmpeq>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d09a      	beq.n	800b466 <_dtoa_r+0x616>
 800b530:	e7cb      	b.n	800b4ca <_dtoa_r+0x67a>
 800b532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b534:	2a00      	cmp	r2, #0
 800b536:	f000 808b 	beq.w	800b650 <_dtoa_r+0x800>
 800b53a:	9a06      	ldr	r2, [sp, #24]
 800b53c:	2a01      	cmp	r2, #1
 800b53e:	dc6e      	bgt.n	800b61e <_dtoa_r+0x7ce>
 800b540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b542:	2a00      	cmp	r2, #0
 800b544:	d067      	beq.n	800b616 <_dtoa_r+0x7c6>
 800b546:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b54a:	9f07      	ldr	r7, [sp, #28]
 800b54c:	9d05      	ldr	r5, [sp, #20]
 800b54e:	9a05      	ldr	r2, [sp, #20]
 800b550:	2101      	movs	r1, #1
 800b552:	441a      	add	r2, r3
 800b554:	4620      	mov	r0, r4
 800b556:	9205      	str	r2, [sp, #20]
 800b558:	4498      	add	r8, r3
 800b55a:	f001 f875 	bl	800c648 <__i2b>
 800b55e:	4606      	mov	r6, r0
 800b560:	2d00      	cmp	r5, #0
 800b562:	dd0c      	ble.n	800b57e <_dtoa_r+0x72e>
 800b564:	f1b8 0f00 	cmp.w	r8, #0
 800b568:	dd09      	ble.n	800b57e <_dtoa_r+0x72e>
 800b56a:	4545      	cmp	r5, r8
 800b56c:	9a05      	ldr	r2, [sp, #20]
 800b56e:	462b      	mov	r3, r5
 800b570:	bfa8      	it	ge
 800b572:	4643      	movge	r3, r8
 800b574:	1ad2      	subs	r2, r2, r3
 800b576:	9205      	str	r2, [sp, #20]
 800b578:	1aed      	subs	r5, r5, r3
 800b57a:	eba8 0803 	sub.w	r8, r8, r3
 800b57e:	9b07      	ldr	r3, [sp, #28]
 800b580:	b1eb      	cbz	r3, 800b5be <_dtoa_r+0x76e>
 800b582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b584:	2b00      	cmp	r3, #0
 800b586:	d067      	beq.n	800b658 <_dtoa_r+0x808>
 800b588:	b18f      	cbz	r7, 800b5ae <_dtoa_r+0x75e>
 800b58a:	4631      	mov	r1, r6
 800b58c:	463a      	mov	r2, r7
 800b58e:	4620      	mov	r0, r4
 800b590:	f001 f8fa 	bl	800c788 <__pow5mult>
 800b594:	9a04      	ldr	r2, [sp, #16]
 800b596:	4601      	mov	r1, r0
 800b598:	4606      	mov	r6, r0
 800b59a:	4620      	mov	r0, r4
 800b59c:	f001 f85d 	bl	800c65a <__multiply>
 800b5a0:	9904      	ldr	r1, [sp, #16]
 800b5a2:	9008      	str	r0, [sp, #32]
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 ff71 	bl	800c48c <_Bfree>
 800b5aa:	9b08      	ldr	r3, [sp, #32]
 800b5ac:	9304      	str	r3, [sp, #16]
 800b5ae:	9b07      	ldr	r3, [sp, #28]
 800b5b0:	1bda      	subs	r2, r3, r7
 800b5b2:	d004      	beq.n	800b5be <_dtoa_r+0x76e>
 800b5b4:	9904      	ldr	r1, [sp, #16]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f001 f8e6 	bl	800c788 <__pow5mult>
 800b5bc:	9004      	str	r0, [sp, #16]
 800b5be:	2101      	movs	r1, #1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f001 f841 	bl	800c648 <__i2b>
 800b5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 81d0 	beq.w	800b970 <_dtoa_r+0xb20>
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f001 f8d7 	bl	800c788 <__pow5mult>
 800b5da:	9b06      	ldr	r3, [sp, #24]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	4607      	mov	r7, r0
 800b5e0:	dc40      	bgt.n	800b664 <_dtoa_r+0x814>
 800b5e2:	9b00      	ldr	r3, [sp, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d139      	bne.n	800b65c <_dtoa_r+0x80c>
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d136      	bne.n	800b660 <_dtoa_r+0x810>
 800b5f2:	9b01      	ldr	r3, [sp, #4]
 800b5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5f8:	0d1b      	lsrs	r3, r3, #20
 800b5fa:	051b      	lsls	r3, r3, #20
 800b5fc:	b12b      	cbz	r3, 800b60a <_dtoa_r+0x7ba>
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	3301      	adds	r3, #1
 800b602:	9305      	str	r3, [sp, #20]
 800b604:	f108 0801 	add.w	r8, r8, #1
 800b608:	2301      	movs	r3, #1
 800b60a:	9307      	str	r3, [sp, #28]
 800b60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d12a      	bne.n	800b668 <_dtoa_r+0x818>
 800b612:	2001      	movs	r0, #1
 800b614:	e030      	b.n	800b678 <_dtoa_r+0x828>
 800b616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b618:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b61c:	e795      	b.n	800b54a <_dtoa_r+0x6fa>
 800b61e:	9b07      	ldr	r3, [sp, #28]
 800b620:	f109 37ff 	add.w	r7, r9, #4294967295
 800b624:	42bb      	cmp	r3, r7
 800b626:	bfbf      	itttt	lt
 800b628:	9b07      	ldrlt	r3, [sp, #28]
 800b62a:	9707      	strlt	r7, [sp, #28]
 800b62c:	1afa      	sublt	r2, r7, r3
 800b62e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b630:	bfbb      	ittet	lt
 800b632:	189b      	addlt	r3, r3, r2
 800b634:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b636:	1bdf      	subge	r7, r3, r7
 800b638:	2700      	movlt	r7, #0
 800b63a:	f1b9 0f00 	cmp.w	r9, #0
 800b63e:	bfb5      	itete	lt
 800b640:	9b05      	ldrlt	r3, [sp, #20]
 800b642:	9d05      	ldrge	r5, [sp, #20]
 800b644:	eba3 0509 	sublt.w	r5, r3, r9
 800b648:	464b      	movge	r3, r9
 800b64a:	bfb8      	it	lt
 800b64c:	2300      	movlt	r3, #0
 800b64e:	e77e      	b.n	800b54e <_dtoa_r+0x6fe>
 800b650:	9f07      	ldr	r7, [sp, #28]
 800b652:	9d05      	ldr	r5, [sp, #20]
 800b654:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b656:	e783      	b.n	800b560 <_dtoa_r+0x710>
 800b658:	9a07      	ldr	r2, [sp, #28]
 800b65a:	e7ab      	b.n	800b5b4 <_dtoa_r+0x764>
 800b65c:	2300      	movs	r3, #0
 800b65e:	e7d4      	b.n	800b60a <_dtoa_r+0x7ba>
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	e7d2      	b.n	800b60a <_dtoa_r+0x7ba>
 800b664:	2300      	movs	r3, #0
 800b666:	9307      	str	r3, [sp, #28]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b66e:	6918      	ldr	r0, [r3, #16]
 800b670:	f000 ff9c 	bl	800c5ac <__hi0bits>
 800b674:	f1c0 0020 	rsb	r0, r0, #32
 800b678:	4440      	add	r0, r8
 800b67a:	f010 001f 	ands.w	r0, r0, #31
 800b67e:	d047      	beq.n	800b710 <_dtoa_r+0x8c0>
 800b680:	f1c0 0320 	rsb	r3, r0, #32
 800b684:	2b04      	cmp	r3, #4
 800b686:	dd3b      	ble.n	800b700 <_dtoa_r+0x8b0>
 800b688:	9b05      	ldr	r3, [sp, #20]
 800b68a:	f1c0 001c 	rsb	r0, r0, #28
 800b68e:	4403      	add	r3, r0
 800b690:	9305      	str	r3, [sp, #20]
 800b692:	4405      	add	r5, r0
 800b694:	4480      	add	r8, r0
 800b696:	9b05      	ldr	r3, [sp, #20]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dd05      	ble.n	800b6a8 <_dtoa_r+0x858>
 800b69c:	461a      	mov	r2, r3
 800b69e:	9904      	ldr	r1, [sp, #16]
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f001 f8bf 	bl	800c824 <__lshift>
 800b6a6:	9004      	str	r0, [sp, #16]
 800b6a8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ac:	dd05      	ble.n	800b6ba <_dtoa_r+0x86a>
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	4642      	mov	r2, r8
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f001 f8b6 	bl	800c824 <__lshift>
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6bc:	b353      	cbz	r3, 800b714 <_dtoa_r+0x8c4>
 800b6be:	4639      	mov	r1, r7
 800b6c0:	9804      	ldr	r0, [sp, #16]
 800b6c2:	f001 f903 	bl	800c8cc <__mcmp>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	da24      	bge.n	800b714 <_dtoa_r+0x8c4>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	220a      	movs	r2, #10
 800b6ce:	9904      	ldr	r1, [sp, #16]
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 fef2 	bl	800c4ba <__multadd>
 800b6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d8:	9004      	str	r0, [sp, #16]
 800b6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 814d 	beq.w	800b97e <_dtoa_r+0xb2e>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4631      	mov	r1, r6
 800b6e8:	220a      	movs	r2, #10
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f000 fee5 	bl	800c4ba <__multadd>
 800b6f0:	9b02      	ldr	r3, [sp, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	dc4f      	bgt.n	800b798 <_dtoa_r+0x948>
 800b6f8:	9b06      	ldr	r3, [sp, #24]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	dd4c      	ble.n	800b798 <_dtoa_r+0x948>
 800b6fe:	e011      	b.n	800b724 <_dtoa_r+0x8d4>
 800b700:	d0c9      	beq.n	800b696 <_dtoa_r+0x846>
 800b702:	9a05      	ldr	r2, [sp, #20]
 800b704:	331c      	adds	r3, #28
 800b706:	441a      	add	r2, r3
 800b708:	9205      	str	r2, [sp, #20]
 800b70a:	441d      	add	r5, r3
 800b70c:	4498      	add	r8, r3
 800b70e:	e7c2      	b.n	800b696 <_dtoa_r+0x846>
 800b710:	4603      	mov	r3, r0
 800b712:	e7f6      	b.n	800b702 <_dtoa_r+0x8b2>
 800b714:	f1b9 0f00 	cmp.w	r9, #0
 800b718:	dc38      	bgt.n	800b78c <_dtoa_r+0x93c>
 800b71a:	9b06      	ldr	r3, [sp, #24]
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	dd35      	ble.n	800b78c <_dtoa_r+0x93c>
 800b720:	f8cd 9008 	str.w	r9, [sp, #8]
 800b724:	9b02      	ldr	r3, [sp, #8]
 800b726:	b963      	cbnz	r3, 800b742 <_dtoa_r+0x8f2>
 800b728:	4639      	mov	r1, r7
 800b72a:	2205      	movs	r2, #5
 800b72c:	4620      	mov	r0, r4
 800b72e:	f000 fec4 	bl	800c4ba <__multadd>
 800b732:	4601      	mov	r1, r0
 800b734:	4607      	mov	r7, r0
 800b736:	9804      	ldr	r0, [sp, #16]
 800b738:	f001 f8c8 	bl	800c8cc <__mcmp>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f73f adcc 	bgt.w	800b2da <_dtoa_r+0x48a>
 800b742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b744:	465d      	mov	r5, fp
 800b746:	ea6f 0a03 	mvn.w	sl, r3
 800b74a:	f04f 0900 	mov.w	r9, #0
 800b74e:	4639      	mov	r1, r7
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fe9b 	bl	800c48c <_Bfree>
 800b756:	2e00      	cmp	r6, #0
 800b758:	f43f aeb7 	beq.w	800b4ca <_dtoa_r+0x67a>
 800b75c:	f1b9 0f00 	cmp.w	r9, #0
 800b760:	d005      	beq.n	800b76e <_dtoa_r+0x91e>
 800b762:	45b1      	cmp	r9, r6
 800b764:	d003      	beq.n	800b76e <_dtoa_r+0x91e>
 800b766:	4649      	mov	r1, r9
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 fe8f 	bl	800c48c <_Bfree>
 800b76e:	4631      	mov	r1, r6
 800b770:	4620      	mov	r0, r4
 800b772:	f000 fe8b 	bl	800c48c <_Bfree>
 800b776:	e6a8      	b.n	800b4ca <_dtoa_r+0x67a>
 800b778:	2700      	movs	r7, #0
 800b77a:	463e      	mov	r6, r7
 800b77c:	e7e1      	b.n	800b742 <_dtoa_r+0x8f2>
 800b77e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b782:	463e      	mov	r6, r7
 800b784:	e5a9      	b.n	800b2da <_dtoa_r+0x48a>
 800b786:	bf00      	nop
 800b788:	40240000 	.word	0x40240000
 800b78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b78e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 80fa 	beq.w	800b98c <_dtoa_r+0xb3c>
 800b798:	2d00      	cmp	r5, #0
 800b79a:	dd05      	ble.n	800b7a8 <_dtoa_r+0x958>
 800b79c:	4631      	mov	r1, r6
 800b79e:	462a      	mov	r2, r5
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f001 f83f 	bl	800c824 <__lshift>
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	9b07      	ldr	r3, [sp, #28]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d04c      	beq.n	800b848 <_dtoa_r+0x9f8>
 800b7ae:	6871      	ldr	r1, [r6, #4]
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 fe37 	bl	800c424 <_Balloc>
 800b7b6:	6932      	ldr	r2, [r6, #16]
 800b7b8:	3202      	adds	r2, #2
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	0092      	lsls	r2, r2, #2
 800b7be:	f106 010c 	add.w	r1, r6, #12
 800b7c2:	300c      	adds	r0, #12
 800b7c4:	f7fd fc54 	bl	8009070 <memcpy>
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f001 f829 	bl	800c824 <__lshift>
 800b7d2:	9b00      	ldr	r3, [sp, #0]
 800b7d4:	f8cd b014 	str.w	fp, [sp, #20]
 800b7d8:	f003 0301 	and.w	r3, r3, #1
 800b7dc:	46b1      	mov	r9, r6
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	9804      	ldr	r0, [sp, #16]
 800b7e6:	f7ff faa5 	bl	800ad34 <quorem>
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b7f2:	9804      	ldr	r0, [sp, #16]
 800b7f4:	f001 f86a 	bl	800c8cc <__mcmp>
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	9000      	str	r0, [sp, #0]
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	4620      	mov	r0, r4
 800b800:	f001 f87e 	bl	800c900 <__mdiff>
 800b804:	68c3      	ldr	r3, [r0, #12]
 800b806:	4602      	mov	r2, r0
 800b808:	bb03      	cbnz	r3, 800b84c <_dtoa_r+0x9fc>
 800b80a:	4601      	mov	r1, r0
 800b80c:	9008      	str	r0, [sp, #32]
 800b80e:	9804      	ldr	r0, [sp, #16]
 800b810:	f001 f85c 	bl	800c8cc <__mcmp>
 800b814:	9a08      	ldr	r2, [sp, #32]
 800b816:	4603      	mov	r3, r0
 800b818:	4611      	mov	r1, r2
 800b81a:	4620      	mov	r0, r4
 800b81c:	9308      	str	r3, [sp, #32]
 800b81e:	f000 fe35 	bl	800c48c <_Bfree>
 800b822:	9b08      	ldr	r3, [sp, #32]
 800b824:	b9a3      	cbnz	r3, 800b850 <_dtoa_r+0xa00>
 800b826:	9a06      	ldr	r2, [sp, #24]
 800b828:	b992      	cbnz	r2, 800b850 <_dtoa_r+0xa00>
 800b82a:	9a07      	ldr	r2, [sp, #28]
 800b82c:	b982      	cbnz	r2, 800b850 <_dtoa_r+0xa00>
 800b82e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b832:	d029      	beq.n	800b888 <_dtoa_r+0xa38>
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	dd01      	ble.n	800b83e <_dtoa_r+0x9ee>
 800b83a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b83e:	9b05      	ldr	r3, [sp, #20]
 800b840:	1c5d      	adds	r5, r3, #1
 800b842:	f883 8000 	strb.w	r8, [r3]
 800b846:	e782      	b.n	800b74e <_dtoa_r+0x8fe>
 800b848:	4630      	mov	r0, r6
 800b84a:	e7c2      	b.n	800b7d2 <_dtoa_r+0x982>
 800b84c:	2301      	movs	r3, #1
 800b84e:	e7e3      	b.n	800b818 <_dtoa_r+0x9c8>
 800b850:	9a00      	ldr	r2, [sp, #0]
 800b852:	2a00      	cmp	r2, #0
 800b854:	db04      	blt.n	800b860 <_dtoa_r+0xa10>
 800b856:	d125      	bne.n	800b8a4 <_dtoa_r+0xa54>
 800b858:	9a06      	ldr	r2, [sp, #24]
 800b85a:	bb1a      	cbnz	r2, 800b8a4 <_dtoa_r+0xa54>
 800b85c:	9a07      	ldr	r2, [sp, #28]
 800b85e:	bb0a      	cbnz	r2, 800b8a4 <_dtoa_r+0xa54>
 800b860:	2b00      	cmp	r3, #0
 800b862:	ddec      	ble.n	800b83e <_dtoa_r+0x9ee>
 800b864:	2201      	movs	r2, #1
 800b866:	9904      	ldr	r1, [sp, #16]
 800b868:	4620      	mov	r0, r4
 800b86a:	f000 ffdb 	bl	800c824 <__lshift>
 800b86e:	4639      	mov	r1, r7
 800b870:	9004      	str	r0, [sp, #16]
 800b872:	f001 f82b 	bl	800c8cc <__mcmp>
 800b876:	2800      	cmp	r0, #0
 800b878:	dc03      	bgt.n	800b882 <_dtoa_r+0xa32>
 800b87a:	d1e0      	bne.n	800b83e <_dtoa_r+0x9ee>
 800b87c:	f018 0f01 	tst.w	r8, #1
 800b880:	d0dd      	beq.n	800b83e <_dtoa_r+0x9ee>
 800b882:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b886:	d1d8      	bne.n	800b83a <_dtoa_r+0x9ea>
 800b888:	9b05      	ldr	r3, [sp, #20]
 800b88a:	9a05      	ldr	r2, [sp, #20]
 800b88c:	1c5d      	adds	r5, r3, #1
 800b88e:	2339      	movs	r3, #57	; 0x39
 800b890:	7013      	strb	r3, [r2, #0]
 800b892:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b896:	2b39      	cmp	r3, #57	; 0x39
 800b898:	f105 32ff 	add.w	r2, r5, #4294967295
 800b89c:	d04f      	beq.n	800b93e <_dtoa_r+0xaee>
 800b89e:	3301      	adds	r3, #1
 800b8a0:	7013      	strb	r3, [r2, #0]
 800b8a2:	e754      	b.n	800b74e <_dtoa_r+0x8fe>
 800b8a4:	9a05      	ldr	r2, [sp, #20]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f102 0501 	add.w	r5, r2, #1
 800b8ac:	dd06      	ble.n	800b8bc <_dtoa_r+0xa6c>
 800b8ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b8b2:	d0e9      	beq.n	800b888 <_dtoa_r+0xa38>
 800b8b4:	f108 0801 	add.w	r8, r8, #1
 800b8b8:	9b05      	ldr	r3, [sp, #20]
 800b8ba:	e7c2      	b.n	800b842 <_dtoa_r+0x9f2>
 800b8bc:	9a02      	ldr	r2, [sp, #8]
 800b8be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b8c2:	eba5 030b 	sub.w	r3, r5, fp
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d021      	beq.n	800b90e <_dtoa_r+0xabe>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	220a      	movs	r2, #10
 800b8ce:	9904      	ldr	r1, [sp, #16]
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 fdf2 	bl	800c4ba <__multadd>
 800b8d6:	45b1      	cmp	r9, r6
 800b8d8:	9004      	str	r0, [sp, #16]
 800b8da:	f04f 0300 	mov.w	r3, #0
 800b8de:	f04f 020a 	mov.w	r2, #10
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	d105      	bne.n	800b8f4 <_dtoa_r+0xaa4>
 800b8e8:	f000 fde7 	bl	800c4ba <__multadd>
 800b8ec:	4681      	mov	r9, r0
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	9505      	str	r5, [sp, #20]
 800b8f2:	e776      	b.n	800b7e2 <_dtoa_r+0x992>
 800b8f4:	f000 fde1 	bl	800c4ba <__multadd>
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	4681      	mov	r9, r0
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	220a      	movs	r2, #10
 800b900:	4620      	mov	r0, r4
 800b902:	f000 fdda 	bl	800c4ba <__multadd>
 800b906:	4606      	mov	r6, r0
 800b908:	e7f2      	b.n	800b8f0 <_dtoa_r+0xaa0>
 800b90a:	f04f 0900 	mov.w	r9, #0
 800b90e:	2201      	movs	r2, #1
 800b910:	9904      	ldr	r1, [sp, #16]
 800b912:	4620      	mov	r0, r4
 800b914:	f000 ff86 	bl	800c824 <__lshift>
 800b918:	4639      	mov	r1, r7
 800b91a:	9004      	str	r0, [sp, #16]
 800b91c:	f000 ffd6 	bl	800c8cc <__mcmp>
 800b920:	2800      	cmp	r0, #0
 800b922:	dcb6      	bgt.n	800b892 <_dtoa_r+0xa42>
 800b924:	d102      	bne.n	800b92c <_dtoa_r+0xadc>
 800b926:	f018 0f01 	tst.w	r8, #1
 800b92a:	d1b2      	bne.n	800b892 <_dtoa_r+0xa42>
 800b92c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b930:	2b30      	cmp	r3, #48	; 0x30
 800b932:	f105 32ff 	add.w	r2, r5, #4294967295
 800b936:	f47f af0a 	bne.w	800b74e <_dtoa_r+0x8fe>
 800b93a:	4615      	mov	r5, r2
 800b93c:	e7f6      	b.n	800b92c <_dtoa_r+0xadc>
 800b93e:	4593      	cmp	fp, r2
 800b940:	d105      	bne.n	800b94e <_dtoa_r+0xafe>
 800b942:	2331      	movs	r3, #49	; 0x31
 800b944:	f10a 0a01 	add.w	sl, sl, #1
 800b948:	f88b 3000 	strb.w	r3, [fp]
 800b94c:	e6ff      	b.n	800b74e <_dtoa_r+0x8fe>
 800b94e:	4615      	mov	r5, r2
 800b950:	e79f      	b.n	800b892 <_dtoa_r+0xa42>
 800b952:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b9b8 <_dtoa_r+0xb68>
 800b956:	e007      	b.n	800b968 <_dtoa_r+0xb18>
 800b958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b95a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b9bc <_dtoa_r+0xb6c>
 800b95e:	b11b      	cbz	r3, 800b968 <_dtoa_r+0xb18>
 800b960:	f10b 0308 	add.w	r3, fp, #8
 800b964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	4658      	mov	r0, fp
 800b96a:	b017      	add	sp, #92	; 0x5c
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b970:	9b06      	ldr	r3, [sp, #24]
 800b972:	2b01      	cmp	r3, #1
 800b974:	f77f ae35 	ble.w	800b5e2 <_dtoa_r+0x792>
 800b978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b97a:	9307      	str	r3, [sp, #28]
 800b97c:	e649      	b.n	800b612 <_dtoa_r+0x7c2>
 800b97e:	9b02      	ldr	r3, [sp, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	dc03      	bgt.n	800b98c <_dtoa_r+0xb3c>
 800b984:	9b06      	ldr	r3, [sp, #24]
 800b986:	2b02      	cmp	r3, #2
 800b988:	f73f aecc 	bgt.w	800b724 <_dtoa_r+0x8d4>
 800b98c:	465d      	mov	r5, fp
 800b98e:	4639      	mov	r1, r7
 800b990:	9804      	ldr	r0, [sp, #16]
 800b992:	f7ff f9cf 	bl	800ad34 <quorem>
 800b996:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b99a:	f805 8b01 	strb.w	r8, [r5], #1
 800b99e:	9a02      	ldr	r2, [sp, #8]
 800b9a0:	eba5 030b 	sub.w	r3, r5, fp
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	ddb0      	ble.n	800b90a <_dtoa_r+0xaba>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	220a      	movs	r2, #10
 800b9ac:	9904      	ldr	r1, [sp, #16]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fd83 	bl	800c4ba <__multadd>
 800b9b4:	9004      	str	r0, [sp, #16]
 800b9b6:	e7ea      	b.n	800b98e <_dtoa_r+0xb3e>
 800b9b8:	0800d870 	.word	0x0800d870
 800b9bc:	0800d8f0 	.word	0x0800d8f0

0800b9c0 <__sflush_r>:
 800b9c0:	898a      	ldrh	r2, [r1, #12]
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	0710      	lsls	r0, r2, #28
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	d458      	bmi.n	800ba80 <__sflush_r+0xc0>
 800b9ce:	684b      	ldr	r3, [r1, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	dc05      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dc02      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	d0f9      	beq.n	800b9da <__sflush_r+0x1a>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9ec:	682f      	ldr	r7, [r5, #0]
 800b9ee:	6a21      	ldr	r1, [r4, #32]
 800b9f0:	602b      	str	r3, [r5, #0]
 800b9f2:	d032      	beq.n	800ba5a <__sflush_r+0x9a>
 800b9f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	075a      	lsls	r2, r3, #29
 800b9fa:	d505      	bpl.n	800ba08 <__sflush_r+0x48>
 800b9fc:	6863      	ldr	r3, [r4, #4]
 800b9fe:	1ac0      	subs	r0, r0, r3
 800ba00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba02:	b10b      	cbz	r3, 800ba08 <__sflush_r+0x48>
 800ba04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba06:	1ac0      	subs	r0, r0, r3
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba0e:	6a21      	ldr	r1, [r4, #32]
 800ba10:	4628      	mov	r0, r5
 800ba12:	47b0      	blx	r6
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	d106      	bne.n	800ba28 <__sflush_r+0x68>
 800ba1a:	6829      	ldr	r1, [r5, #0]
 800ba1c:	291d      	cmp	r1, #29
 800ba1e:	d848      	bhi.n	800bab2 <__sflush_r+0xf2>
 800ba20:	4a29      	ldr	r2, [pc, #164]	; (800bac8 <__sflush_r+0x108>)
 800ba22:	40ca      	lsrs	r2, r1
 800ba24:	07d6      	lsls	r6, r2, #31
 800ba26:	d544      	bpl.n	800bab2 <__sflush_r+0xf2>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	6062      	str	r2, [r4, #4]
 800ba2c:	04d9      	lsls	r1, r3, #19
 800ba2e:	6922      	ldr	r2, [r4, #16]
 800ba30:	6022      	str	r2, [r4, #0]
 800ba32:	d504      	bpl.n	800ba3e <__sflush_r+0x7e>
 800ba34:	1c42      	adds	r2, r0, #1
 800ba36:	d101      	bne.n	800ba3c <__sflush_r+0x7c>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	b903      	cbnz	r3, 800ba3e <__sflush_r+0x7e>
 800ba3c:	6560      	str	r0, [r4, #84]	; 0x54
 800ba3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba40:	602f      	str	r7, [r5, #0]
 800ba42:	2900      	cmp	r1, #0
 800ba44:	d0c9      	beq.n	800b9da <__sflush_r+0x1a>
 800ba46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba4a:	4299      	cmp	r1, r3
 800ba4c:	d002      	beq.n	800ba54 <__sflush_r+0x94>
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f001 f8f6 	bl	800cc40 <_free_r>
 800ba54:	2000      	movs	r0, #0
 800ba56:	6360      	str	r0, [r4, #52]	; 0x34
 800ba58:	e7c0      	b.n	800b9dc <__sflush_r+0x1c>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b0      	blx	r6
 800ba60:	1c41      	adds	r1, r0, #1
 800ba62:	d1c8      	bne.n	800b9f6 <__sflush_r+0x36>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0c5      	beq.n	800b9f6 <__sflush_r+0x36>
 800ba6a:	2b1d      	cmp	r3, #29
 800ba6c:	d001      	beq.n	800ba72 <__sflush_r+0xb2>
 800ba6e:	2b16      	cmp	r3, #22
 800ba70:	d101      	bne.n	800ba76 <__sflush_r+0xb6>
 800ba72:	602f      	str	r7, [r5, #0]
 800ba74:	e7b1      	b.n	800b9da <__sflush_r+0x1a>
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	e7ad      	b.n	800b9dc <__sflush_r+0x1c>
 800ba80:	690f      	ldr	r7, [r1, #16]
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	d0a9      	beq.n	800b9da <__sflush_r+0x1a>
 800ba86:	0793      	lsls	r3, r2, #30
 800ba88:	680e      	ldr	r6, [r1, #0]
 800ba8a:	bf08      	it	eq
 800ba8c:	694b      	ldreq	r3, [r1, #20]
 800ba8e:	600f      	str	r7, [r1, #0]
 800ba90:	bf18      	it	ne
 800ba92:	2300      	movne	r3, #0
 800ba94:	eba6 0807 	sub.w	r8, r6, r7
 800ba98:	608b      	str	r3, [r1, #8]
 800ba9a:	f1b8 0f00 	cmp.w	r8, #0
 800ba9e:	dd9c      	ble.n	800b9da <__sflush_r+0x1a>
 800baa0:	4643      	mov	r3, r8
 800baa2:	463a      	mov	r2, r7
 800baa4:	6a21      	ldr	r1, [r4, #32]
 800baa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b0      	blx	r6
 800baac:	2800      	cmp	r0, #0
 800baae:	dc06      	bgt.n	800babe <__sflush_r+0xfe>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	e78e      	b.n	800b9dc <__sflush_r+0x1c>
 800babe:	4407      	add	r7, r0
 800bac0:	eba8 0800 	sub.w	r8, r8, r0
 800bac4:	e7e9      	b.n	800ba9a <__sflush_r+0xda>
 800bac6:	bf00      	nop
 800bac8:	20400001 	.word	0x20400001

0800bacc <_fflush_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	690b      	ldr	r3, [r1, #16]
 800bad0:	4605      	mov	r5, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	b1db      	cbz	r3, 800bb0e <_fflush_r+0x42>
 800bad6:	b118      	cbz	r0, 800bae0 <_fflush_r+0x14>
 800bad8:	6983      	ldr	r3, [r0, #24]
 800bada:	b90b      	cbnz	r3, 800bae0 <_fflush_r+0x14>
 800badc:	f000 f860 	bl	800bba0 <__sinit>
 800bae0:	4b0c      	ldr	r3, [pc, #48]	; (800bb14 <_fflush_r+0x48>)
 800bae2:	429c      	cmp	r4, r3
 800bae4:	d109      	bne.n	800bafa <_fflush_r+0x2e>
 800bae6:	686c      	ldr	r4, [r5, #4]
 800bae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baec:	b17b      	cbz	r3, 800bb0e <_fflush_r+0x42>
 800baee:	4621      	mov	r1, r4
 800baf0:	4628      	mov	r0, r5
 800baf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baf6:	f7ff bf63 	b.w	800b9c0 <__sflush_r>
 800bafa:	4b07      	ldr	r3, [pc, #28]	; (800bb18 <_fflush_r+0x4c>)
 800bafc:	429c      	cmp	r4, r3
 800bafe:	d101      	bne.n	800bb04 <_fflush_r+0x38>
 800bb00:	68ac      	ldr	r4, [r5, #8]
 800bb02:	e7f1      	b.n	800bae8 <_fflush_r+0x1c>
 800bb04:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <_fflush_r+0x50>)
 800bb06:	429c      	cmp	r4, r3
 800bb08:	bf08      	it	eq
 800bb0a:	68ec      	ldreq	r4, [r5, #12]
 800bb0c:	e7ec      	b.n	800bae8 <_fflush_r+0x1c>
 800bb0e:	2000      	movs	r0, #0
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
 800bb12:	bf00      	nop
 800bb14:	0800d920 	.word	0x0800d920
 800bb18:	0800d940 	.word	0x0800d940
 800bb1c:	0800d900 	.word	0x0800d900

0800bb20 <std>:
 800bb20:	2300      	movs	r3, #0
 800bb22:	b510      	push	{r4, lr}
 800bb24:	4604      	mov	r4, r0
 800bb26:	e9c0 3300 	strd	r3, r3, [r0]
 800bb2a:	6083      	str	r3, [r0, #8]
 800bb2c:	8181      	strh	r1, [r0, #12]
 800bb2e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb30:	81c2      	strh	r2, [r0, #14]
 800bb32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb36:	6183      	str	r3, [r0, #24]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	305c      	adds	r0, #92	; 0x5c
 800bb3e:	f7fd faa2 	bl	8009086 <memset>
 800bb42:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <std+0x38>)
 800bb44:	6263      	str	r3, [r4, #36]	; 0x24
 800bb46:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <std+0x3c>)
 800bb48:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb4a:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <std+0x40>)
 800bb4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb4e:	4b05      	ldr	r3, [pc, #20]	; (800bb64 <std+0x44>)
 800bb50:	6224      	str	r4, [r4, #32]
 800bb52:	6323      	str	r3, [r4, #48]	; 0x30
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	bf00      	nop
 800bb58:	0800d2d5 	.word	0x0800d2d5
 800bb5c:	0800d2f7 	.word	0x0800d2f7
 800bb60:	0800d32f 	.word	0x0800d32f
 800bb64:	0800d353 	.word	0x0800d353

0800bb68 <_cleanup_r>:
 800bb68:	4901      	ldr	r1, [pc, #4]	; (800bb70 <_cleanup_r+0x8>)
 800bb6a:	f000 b885 	b.w	800bc78 <_fwalk_reent>
 800bb6e:	bf00      	nop
 800bb70:	0800bacd 	.word	0x0800bacd

0800bb74 <__sfmoreglue>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	1e4a      	subs	r2, r1, #1
 800bb78:	2568      	movs	r5, #104	; 0x68
 800bb7a:	4355      	muls	r5, r2
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb82:	f001 f8ab 	bl	800ccdc <_malloc_r>
 800bb86:	4604      	mov	r4, r0
 800bb88:	b140      	cbz	r0, 800bb9c <__sfmoreglue+0x28>
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	e9c0 1600 	strd	r1, r6, [r0]
 800bb90:	300c      	adds	r0, #12
 800bb92:	60a0      	str	r0, [r4, #8]
 800bb94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb98:	f7fd fa75 	bl	8009086 <memset>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}

0800bba0 <__sinit>:
 800bba0:	6983      	ldr	r3, [r0, #24]
 800bba2:	b510      	push	{r4, lr}
 800bba4:	4604      	mov	r4, r0
 800bba6:	bb33      	cbnz	r3, 800bbf6 <__sinit+0x56>
 800bba8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bbac:	6503      	str	r3, [r0, #80]	; 0x50
 800bbae:	4b12      	ldr	r3, [pc, #72]	; (800bbf8 <__sinit+0x58>)
 800bbb0:	4a12      	ldr	r2, [pc, #72]	; (800bbfc <__sinit+0x5c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6282      	str	r2, [r0, #40]	; 0x28
 800bbb6:	4298      	cmp	r0, r3
 800bbb8:	bf04      	itt	eq
 800bbba:	2301      	moveq	r3, #1
 800bbbc:	6183      	streq	r3, [r0, #24]
 800bbbe:	f000 f81f 	bl	800bc00 <__sfp>
 800bbc2:	6060      	str	r0, [r4, #4]
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 f81b 	bl	800bc00 <__sfp>
 800bbca:	60a0      	str	r0, [r4, #8]
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f000 f817 	bl	800bc00 <__sfp>
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	60e0      	str	r0, [r4, #12]
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	6860      	ldr	r0, [r4, #4]
 800bbda:	f7ff ffa1 	bl	800bb20 <std>
 800bbde:	2201      	movs	r2, #1
 800bbe0:	2109      	movs	r1, #9
 800bbe2:	68a0      	ldr	r0, [r4, #8]
 800bbe4:	f7ff ff9c 	bl	800bb20 <std>
 800bbe8:	2202      	movs	r2, #2
 800bbea:	2112      	movs	r1, #18
 800bbec:	68e0      	ldr	r0, [r4, #12]
 800bbee:	f7ff ff97 	bl	800bb20 <std>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	61a3      	str	r3, [r4, #24]
 800bbf6:	bd10      	pop	{r4, pc}
 800bbf8:	0800d85c 	.word	0x0800d85c
 800bbfc:	0800bb69 	.word	0x0800bb69

0800bc00 <__sfp>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	4b1b      	ldr	r3, [pc, #108]	; (800bc70 <__sfp+0x70>)
 800bc04:	681e      	ldr	r6, [r3, #0]
 800bc06:	69b3      	ldr	r3, [r6, #24]
 800bc08:	4607      	mov	r7, r0
 800bc0a:	b913      	cbnz	r3, 800bc12 <__sfp+0x12>
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7ff ffc7 	bl	800bba0 <__sinit>
 800bc12:	3648      	adds	r6, #72	; 0x48
 800bc14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	d503      	bpl.n	800bc24 <__sfp+0x24>
 800bc1c:	6833      	ldr	r3, [r6, #0]
 800bc1e:	b133      	cbz	r3, 800bc2e <__sfp+0x2e>
 800bc20:	6836      	ldr	r6, [r6, #0]
 800bc22:	e7f7      	b.n	800bc14 <__sfp+0x14>
 800bc24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc28:	b16d      	cbz	r5, 800bc46 <__sfp+0x46>
 800bc2a:	3468      	adds	r4, #104	; 0x68
 800bc2c:	e7f4      	b.n	800bc18 <__sfp+0x18>
 800bc2e:	2104      	movs	r1, #4
 800bc30:	4638      	mov	r0, r7
 800bc32:	f7ff ff9f 	bl	800bb74 <__sfmoreglue>
 800bc36:	6030      	str	r0, [r6, #0]
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1f1      	bne.n	800bc20 <__sfp+0x20>
 800bc3c:	230c      	movs	r3, #12
 800bc3e:	603b      	str	r3, [r7, #0]
 800bc40:	4604      	mov	r4, r0
 800bc42:	4620      	mov	r0, r4
 800bc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc46:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <__sfp+0x74>)
 800bc48:	6665      	str	r5, [r4, #100]	; 0x64
 800bc4a:	e9c4 5500 	strd	r5, r5, [r4]
 800bc4e:	60a5      	str	r5, [r4, #8]
 800bc50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bc54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bc58:	2208      	movs	r2, #8
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc60:	f7fd fa11 	bl	8009086 <memset>
 800bc64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc6c:	e7e9      	b.n	800bc42 <__sfp+0x42>
 800bc6e:	bf00      	nop
 800bc70:	0800d85c 	.word	0x0800d85c
 800bc74:	ffff0001 	.word	0xffff0001

0800bc78 <_fwalk_reent>:
 800bc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	4689      	mov	r9, r1
 800bc80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc84:	2600      	movs	r6, #0
 800bc86:	b914      	cbnz	r4, 800bc8e <_fwalk_reent+0x16>
 800bc88:	4630      	mov	r0, r6
 800bc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bc92:	3f01      	subs	r7, #1
 800bc94:	d501      	bpl.n	800bc9a <_fwalk_reent+0x22>
 800bc96:	6824      	ldr	r4, [r4, #0]
 800bc98:	e7f5      	b.n	800bc86 <_fwalk_reent+0xe>
 800bc9a:	89ab      	ldrh	r3, [r5, #12]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d907      	bls.n	800bcb0 <_fwalk_reent+0x38>
 800bca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bca4:	3301      	adds	r3, #1
 800bca6:	d003      	beq.n	800bcb0 <_fwalk_reent+0x38>
 800bca8:	4629      	mov	r1, r5
 800bcaa:	4640      	mov	r0, r8
 800bcac:	47c8      	blx	r9
 800bcae:	4306      	orrs	r6, r0
 800bcb0:	3568      	adds	r5, #104	; 0x68
 800bcb2:	e7ee      	b.n	800bc92 <_fwalk_reent+0x1a>

0800bcb4 <rshift>:
 800bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb6:	6906      	ldr	r6, [r0, #16]
 800bcb8:	114b      	asrs	r3, r1, #5
 800bcba:	429e      	cmp	r6, r3
 800bcbc:	f100 0414 	add.w	r4, r0, #20
 800bcc0:	dd30      	ble.n	800bd24 <rshift+0x70>
 800bcc2:	f011 011f 	ands.w	r1, r1, #31
 800bcc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bcca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bcce:	d108      	bne.n	800bce2 <rshift+0x2e>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	42b2      	cmp	r2, r6
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	d211      	bcs.n	800bcfc <rshift+0x48>
 800bcd8:	f852 3b04 	ldr.w	r3, [r2], #4
 800bcdc:	f841 3b04 	str.w	r3, [r1], #4
 800bce0:	e7f7      	b.n	800bcd2 <rshift+0x1e>
 800bce2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800bce6:	f1c1 0c20 	rsb	ip, r1, #32
 800bcea:	40cd      	lsrs	r5, r1
 800bcec:	3204      	adds	r2, #4
 800bcee:	4623      	mov	r3, r4
 800bcf0:	42b2      	cmp	r2, r6
 800bcf2:	4617      	mov	r7, r2
 800bcf4:	d30c      	bcc.n	800bd10 <rshift+0x5c>
 800bcf6:	601d      	str	r5, [r3, #0]
 800bcf8:	b105      	cbz	r5, 800bcfc <rshift+0x48>
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	1b1a      	subs	r2, r3, r4
 800bcfe:	42a3      	cmp	r3, r4
 800bd00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd04:	bf08      	it	eq
 800bd06:	2300      	moveq	r3, #0
 800bd08:	6102      	str	r2, [r0, #16]
 800bd0a:	bf08      	it	eq
 800bd0c:	6143      	streq	r3, [r0, #20]
 800bd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd10:	683f      	ldr	r7, [r7, #0]
 800bd12:	fa07 f70c 	lsl.w	r7, r7, ip
 800bd16:	433d      	orrs	r5, r7
 800bd18:	f843 5b04 	str.w	r5, [r3], #4
 800bd1c:	f852 5b04 	ldr.w	r5, [r2], #4
 800bd20:	40cd      	lsrs	r5, r1
 800bd22:	e7e5      	b.n	800bcf0 <rshift+0x3c>
 800bd24:	4623      	mov	r3, r4
 800bd26:	e7e9      	b.n	800bcfc <rshift+0x48>

0800bd28 <__hexdig_fun>:
 800bd28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	d802      	bhi.n	800bd36 <__hexdig_fun+0xe>
 800bd30:	3820      	subs	r0, #32
 800bd32:	b2c0      	uxtb	r0, r0
 800bd34:	4770      	bx	lr
 800bd36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd3a:	2b05      	cmp	r3, #5
 800bd3c:	d801      	bhi.n	800bd42 <__hexdig_fun+0x1a>
 800bd3e:	3847      	subs	r0, #71	; 0x47
 800bd40:	e7f7      	b.n	800bd32 <__hexdig_fun+0xa>
 800bd42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd46:	2b05      	cmp	r3, #5
 800bd48:	d801      	bhi.n	800bd4e <__hexdig_fun+0x26>
 800bd4a:	3827      	subs	r0, #39	; 0x27
 800bd4c:	e7f1      	b.n	800bd32 <__hexdig_fun+0xa>
 800bd4e:	2000      	movs	r0, #0
 800bd50:	4770      	bx	lr

0800bd52 <__gethex>:
 800bd52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd56:	b08b      	sub	sp, #44	; 0x2c
 800bd58:	468a      	mov	sl, r1
 800bd5a:	9002      	str	r0, [sp, #8]
 800bd5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bd5e:	9306      	str	r3, [sp, #24]
 800bd60:	4690      	mov	r8, r2
 800bd62:	f000 fad0 	bl	800c306 <__localeconv_l>
 800bd66:	6803      	ldr	r3, [r0, #0]
 800bd68:	9303      	str	r3, [sp, #12]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7f4 fa30 	bl	80001d0 <strlen>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	9001      	str	r0, [sp, #4]
 800bd74:	4403      	add	r3, r0
 800bd76:	f04f 0b00 	mov.w	fp, #0
 800bd7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd7e:	9307      	str	r3, [sp, #28]
 800bd80:	f8da 3000 	ldr.w	r3, [sl]
 800bd84:	3302      	adds	r3, #2
 800bd86:	461f      	mov	r7, r3
 800bd88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd8c:	2830      	cmp	r0, #48	; 0x30
 800bd8e:	d06c      	beq.n	800be6a <__gethex+0x118>
 800bd90:	f7ff ffca 	bl	800bd28 <__hexdig_fun>
 800bd94:	4604      	mov	r4, r0
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d16a      	bne.n	800be70 <__gethex+0x11e>
 800bd9a:	9a01      	ldr	r2, [sp, #4]
 800bd9c:	9903      	ldr	r1, [sp, #12]
 800bd9e:	4638      	mov	r0, r7
 800bda0:	f001 fadb 	bl	800d35a <strncmp>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d166      	bne.n	800be76 <__gethex+0x124>
 800bda8:	9b01      	ldr	r3, [sp, #4]
 800bdaa:	5cf8      	ldrb	r0, [r7, r3]
 800bdac:	18fe      	adds	r6, r7, r3
 800bdae:	f7ff ffbb 	bl	800bd28 <__hexdig_fun>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d062      	beq.n	800be7c <__gethex+0x12a>
 800bdb6:	4633      	mov	r3, r6
 800bdb8:	7818      	ldrb	r0, [r3, #0]
 800bdba:	2830      	cmp	r0, #48	; 0x30
 800bdbc:	461f      	mov	r7, r3
 800bdbe:	f103 0301 	add.w	r3, r3, #1
 800bdc2:	d0f9      	beq.n	800bdb8 <__gethex+0x66>
 800bdc4:	f7ff ffb0 	bl	800bd28 <__hexdig_fun>
 800bdc8:	fab0 f580 	clz	r5, r0
 800bdcc:	096d      	lsrs	r5, r5, #5
 800bdce:	4634      	mov	r4, r6
 800bdd0:	f04f 0b01 	mov.w	fp, #1
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4616      	mov	r6, r2
 800bdd8:	3201      	adds	r2, #1
 800bdda:	7830      	ldrb	r0, [r6, #0]
 800bddc:	f7ff ffa4 	bl	800bd28 <__hexdig_fun>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d1f8      	bne.n	800bdd6 <__gethex+0x84>
 800bde4:	9a01      	ldr	r2, [sp, #4]
 800bde6:	9903      	ldr	r1, [sp, #12]
 800bde8:	4630      	mov	r0, r6
 800bdea:	f001 fab6 	bl	800d35a <strncmp>
 800bdee:	b950      	cbnz	r0, 800be06 <__gethex+0xb4>
 800bdf0:	b954      	cbnz	r4, 800be08 <__gethex+0xb6>
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	18f4      	adds	r4, r6, r3
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	7830      	ldrb	r0, [r6, #0]
 800bdfe:	f7ff ff93 	bl	800bd28 <__hexdig_fun>
 800be02:	2800      	cmp	r0, #0
 800be04:	d1f8      	bne.n	800bdf8 <__gethex+0xa6>
 800be06:	b10c      	cbz	r4, 800be0c <__gethex+0xba>
 800be08:	1ba4      	subs	r4, r4, r6
 800be0a:	00a4      	lsls	r4, r4, #2
 800be0c:	7833      	ldrb	r3, [r6, #0]
 800be0e:	2b50      	cmp	r3, #80	; 0x50
 800be10:	d001      	beq.n	800be16 <__gethex+0xc4>
 800be12:	2b70      	cmp	r3, #112	; 0x70
 800be14:	d140      	bne.n	800be98 <__gethex+0x146>
 800be16:	7873      	ldrb	r3, [r6, #1]
 800be18:	2b2b      	cmp	r3, #43	; 0x2b
 800be1a:	d031      	beq.n	800be80 <__gethex+0x12e>
 800be1c:	2b2d      	cmp	r3, #45	; 0x2d
 800be1e:	d033      	beq.n	800be88 <__gethex+0x136>
 800be20:	1c71      	adds	r1, r6, #1
 800be22:	f04f 0900 	mov.w	r9, #0
 800be26:	7808      	ldrb	r0, [r1, #0]
 800be28:	f7ff ff7e 	bl	800bd28 <__hexdig_fun>
 800be2c:	1e43      	subs	r3, r0, #1
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b18      	cmp	r3, #24
 800be32:	d831      	bhi.n	800be98 <__gethex+0x146>
 800be34:	f1a0 0210 	sub.w	r2, r0, #16
 800be38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be3c:	f7ff ff74 	bl	800bd28 <__hexdig_fun>
 800be40:	1e43      	subs	r3, r0, #1
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b18      	cmp	r3, #24
 800be46:	d922      	bls.n	800be8e <__gethex+0x13c>
 800be48:	f1b9 0f00 	cmp.w	r9, #0
 800be4c:	d000      	beq.n	800be50 <__gethex+0xfe>
 800be4e:	4252      	negs	r2, r2
 800be50:	4414      	add	r4, r2
 800be52:	f8ca 1000 	str.w	r1, [sl]
 800be56:	b30d      	cbz	r5, 800be9c <__gethex+0x14a>
 800be58:	f1bb 0f00 	cmp.w	fp, #0
 800be5c:	bf0c      	ite	eq
 800be5e:	2706      	moveq	r7, #6
 800be60:	2700      	movne	r7, #0
 800be62:	4638      	mov	r0, r7
 800be64:	b00b      	add	sp, #44	; 0x2c
 800be66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6a:	f10b 0b01 	add.w	fp, fp, #1
 800be6e:	e78a      	b.n	800bd86 <__gethex+0x34>
 800be70:	2500      	movs	r5, #0
 800be72:	462c      	mov	r4, r5
 800be74:	e7ae      	b.n	800bdd4 <__gethex+0x82>
 800be76:	463e      	mov	r6, r7
 800be78:	2501      	movs	r5, #1
 800be7a:	e7c7      	b.n	800be0c <__gethex+0xba>
 800be7c:	4604      	mov	r4, r0
 800be7e:	e7fb      	b.n	800be78 <__gethex+0x126>
 800be80:	f04f 0900 	mov.w	r9, #0
 800be84:	1cb1      	adds	r1, r6, #2
 800be86:	e7ce      	b.n	800be26 <__gethex+0xd4>
 800be88:	f04f 0901 	mov.w	r9, #1
 800be8c:	e7fa      	b.n	800be84 <__gethex+0x132>
 800be8e:	230a      	movs	r3, #10
 800be90:	fb03 0202 	mla	r2, r3, r2, r0
 800be94:	3a10      	subs	r2, #16
 800be96:	e7cf      	b.n	800be38 <__gethex+0xe6>
 800be98:	4631      	mov	r1, r6
 800be9a:	e7da      	b.n	800be52 <__gethex+0x100>
 800be9c:	1bf3      	subs	r3, r6, r7
 800be9e:	3b01      	subs	r3, #1
 800bea0:	4629      	mov	r1, r5
 800bea2:	2b07      	cmp	r3, #7
 800bea4:	dc49      	bgt.n	800bf3a <__gethex+0x1e8>
 800bea6:	9802      	ldr	r0, [sp, #8]
 800bea8:	f000 fabc 	bl	800c424 <_Balloc>
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	f100 0914 	add.w	r9, r0, #20
 800beb2:	f04f 0b00 	mov.w	fp, #0
 800beb6:	f1c3 0301 	rsb	r3, r3, #1
 800beba:	4605      	mov	r5, r0
 800bebc:	f8cd 9010 	str.w	r9, [sp, #16]
 800bec0:	46da      	mov	sl, fp
 800bec2:	9308      	str	r3, [sp, #32]
 800bec4:	42b7      	cmp	r7, r6
 800bec6:	d33b      	bcc.n	800bf40 <__gethex+0x1ee>
 800bec8:	9804      	ldr	r0, [sp, #16]
 800beca:	f840 ab04 	str.w	sl, [r0], #4
 800bece:	eba0 0009 	sub.w	r0, r0, r9
 800bed2:	1080      	asrs	r0, r0, #2
 800bed4:	6128      	str	r0, [r5, #16]
 800bed6:	0147      	lsls	r7, r0, #5
 800bed8:	4650      	mov	r0, sl
 800beda:	f000 fb67 	bl	800c5ac <__hi0bits>
 800bede:	f8d8 6000 	ldr.w	r6, [r8]
 800bee2:	1a3f      	subs	r7, r7, r0
 800bee4:	42b7      	cmp	r7, r6
 800bee6:	dd64      	ble.n	800bfb2 <__gethex+0x260>
 800bee8:	1bbf      	subs	r7, r7, r6
 800beea:	4639      	mov	r1, r7
 800beec:	4628      	mov	r0, r5
 800beee:	f000 fe77 	bl	800cbe0 <__any_on>
 800bef2:	4682      	mov	sl, r0
 800bef4:	b178      	cbz	r0, 800bf16 <__gethex+0x1c4>
 800bef6:	1e7b      	subs	r3, r7, #1
 800bef8:	1159      	asrs	r1, r3, #5
 800befa:	f003 021f 	and.w	r2, r3, #31
 800befe:	f04f 0a01 	mov.w	sl, #1
 800bf02:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf06:	fa0a f202 	lsl.w	r2, sl, r2
 800bf0a:	420a      	tst	r2, r1
 800bf0c:	d003      	beq.n	800bf16 <__gethex+0x1c4>
 800bf0e:	4553      	cmp	r3, sl
 800bf10:	dc46      	bgt.n	800bfa0 <__gethex+0x24e>
 800bf12:	f04f 0a02 	mov.w	sl, #2
 800bf16:	4639      	mov	r1, r7
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f7ff fecb 	bl	800bcb4 <rshift>
 800bf1e:	443c      	add	r4, r7
 800bf20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	da52      	bge.n	800bfce <__gethex+0x27c>
 800bf28:	4629      	mov	r1, r5
 800bf2a:	9802      	ldr	r0, [sp, #8]
 800bf2c:	f000 faae 	bl	800c48c <_Bfree>
 800bf30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf32:	2300      	movs	r3, #0
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	27a3      	movs	r7, #163	; 0xa3
 800bf38:	e793      	b.n	800be62 <__gethex+0x110>
 800bf3a:	3101      	adds	r1, #1
 800bf3c:	105b      	asrs	r3, r3, #1
 800bf3e:	e7b0      	b.n	800bea2 <__gethex+0x150>
 800bf40:	1e73      	subs	r3, r6, #1
 800bf42:	9305      	str	r3, [sp, #20]
 800bf44:	9a07      	ldr	r2, [sp, #28]
 800bf46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d018      	beq.n	800bf80 <__gethex+0x22e>
 800bf4e:	f1bb 0f20 	cmp.w	fp, #32
 800bf52:	d107      	bne.n	800bf64 <__gethex+0x212>
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	f8c3 a000 	str.w	sl, [r3]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	f04f 0a00 	mov.w	sl, #0
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	46d3      	mov	fp, sl
 800bf64:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf68:	f7ff fede 	bl	800bd28 <__hexdig_fun>
 800bf6c:	f000 000f 	and.w	r0, r0, #15
 800bf70:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf74:	ea4a 0a00 	orr.w	sl, sl, r0
 800bf78:	f10b 0b04 	add.w	fp, fp, #4
 800bf7c:	9b05      	ldr	r3, [sp, #20]
 800bf7e:	e00d      	b.n	800bf9c <__gethex+0x24a>
 800bf80:	9b05      	ldr	r3, [sp, #20]
 800bf82:	9a08      	ldr	r2, [sp, #32]
 800bf84:	4413      	add	r3, r2
 800bf86:	42bb      	cmp	r3, r7
 800bf88:	d3e1      	bcc.n	800bf4e <__gethex+0x1fc>
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	9a01      	ldr	r2, [sp, #4]
 800bf8e:	9903      	ldr	r1, [sp, #12]
 800bf90:	9309      	str	r3, [sp, #36]	; 0x24
 800bf92:	f001 f9e2 	bl	800d35a <strncmp>
 800bf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d1d8      	bne.n	800bf4e <__gethex+0x1fc>
 800bf9c:	461e      	mov	r6, r3
 800bf9e:	e791      	b.n	800bec4 <__gethex+0x172>
 800bfa0:	1eb9      	subs	r1, r7, #2
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	f000 fe1c 	bl	800cbe0 <__any_on>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d0b2      	beq.n	800bf12 <__gethex+0x1c0>
 800bfac:	f04f 0a03 	mov.w	sl, #3
 800bfb0:	e7b1      	b.n	800bf16 <__gethex+0x1c4>
 800bfb2:	da09      	bge.n	800bfc8 <__gethex+0x276>
 800bfb4:	1bf7      	subs	r7, r6, r7
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	463a      	mov	r2, r7
 800bfba:	9802      	ldr	r0, [sp, #8]
 800bfbc:	f000 fc32 	bl	800c824 <__lshift>
 800bfc0:	1be4      	subs	r4, r4, r7
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	f100 0914 	add.w	r9, r0, #20
 800bfc8:	f04f 0a00 	mov.w	sl, #0
 800bfcc:	e7a8      	b.n	800bf20 <__gethex+0x1ce>
 800bfce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bfd2:	42a0      	cmp	r0, r4
 800bfd4:	dd6a      	ble.n	800c0ac <__gethex+0x35a>
 800bfd6:	1b04      	subs	r4, r0, r4
 800bfd8:	42a6      	cmp	r6, r4
 800bfda:	dc2e      	bgt.n	800c03a <__gethex+0x2e8>
 800bfdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d022      	beq.n	800c02a <__gethex+0x2d8>
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	d024      	beq.n	800c032 <__gethex+0x2e0>
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d115      	bne.n	800c018 <__gethex+0x2c6>
 800bfec:	42a6      	cmp	r6, r4
 800bfee:	d113      	bne.n	800c018 <__gethex+0x2c6>
 800bff0:	2e01      	cmp	r6, #1
 800bff2:	dc0b      	bgt.n	800c00c <__gethex+0x2ba>
 800bff4:	9a06      	ldr	r2, [sp, #24]
 800bff6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bffa:	6013      	str	r3, [r2, #0]
 800bffc:	2301      	movs	r3, #1
 800bffe:	612b      	str	r3, [r5, #16]
 800c000:	f8c9 3000 	str.w	r3, [r9]
 800c004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c006:	2762      	movs	r7, #98	; 0x62
 800c008:	601d      	str	r5, [r3, #0]
 800c00a:	e72a      	b.n	800be62 <__gethex+0x110>
 800c00c:	1e71      	subs	r1, r6, #1
 800c00e:	4628      	mov	r0, r5
 800c010:	f000 fde6 	bl	800cbe0 <__any_on>
 800c014:	2800      	cmp	r0, #0
 800c016:	d1ed      	bne.n	800bff4 <__gethex+0x2a2>
 800c018:	4629      	mov	r1, r5
 800c01a:	9802      	ldr	r0, [sp, #8]
 800c01c:	f000 fa36 	bl	800c48c <_Bfree>
 800c020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c022:	2300      	movs	r3, #0
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	2750      	movs	r7, #80	; 0x50
 800c028:	e71b      	b.n	800be62 <__gethex+0x110>
 800c02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0e1      	beq.n	800bff4 <__gethex+0x2a2>
 800c030:	e7f2      	b.n	800c018 <__gethex+0x2c6>
 800c032:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1dd      	bne.n	800bff4 <__gethex+0x2a2>
 800c038:	e7ee      	b.n	800c018 <__gethex+0x2c6>
 800c03a:	1e67      	subs	r7, r4, #1
 800c03c:	f1ba 0f00 	cmp.w	sl, #0
 800c040:	d131      	bne.n	800c0a6 <__gethex+0x354>
 800c042:	b127      	cbz	r7, 800c04e <__gethex+0x2fc>
 800c044:	4639      	mov	r1, r7
 800c046:	4628      	mov	r0, r5
 800c048:	f000 fdca 	bl	800cbe0 <__any_on>
 800c04c:	4682      	mov	sl, r0
 800c04e:	117a      	asrs	r2, r7, #5
 800c050:	2301      	movs	r3, #1
 800c052:	f007 071f 	and.w	r7, r7, #31
 800c056:	fa03 f707 	lsl.w	r7, r3, r7
 800c05a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c05e:	4621      	mov	r1, r4
 800c060:	421f      	tst	r7, r3
 800c062:	4628      	mov	r0, r5
 800c064:	bf18      	it	ne
 800c066:	f04a 0a02 	orrne.w	sl, sl, #2
 800c06a:	1b36      	subs	r6, r6, r4
 800c06c:	f7ff fe22 	bl	800bcb4 <rshift>
 800c070:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c074:	2702      	movs	r7, #2
 800c076:	f1ba 0f00 	cmp.w	sl, #0
 800c07a:	d048      	beq.n	800c10e <__gethex+0x3bc>
 800c07c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c080:	2b02      	cmp	r3, #2
 800c082:	d015      	beq.n	800c0b0 <__gethex+0x35e>
 800c084:	2b03      	cmp	r3, #3
 800c086:	d017      	beq.n	800c0b8 <__gethex+0x366>
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d109      	bne.n	800c0a0 <__gethex+0x34e>
 800c08c:	f01a 0f02 	tst.w	sl, #2
 800c090:	d006      	beq.n	800c0a0 <__gethex+0x34e>
 800c092:	f8d9 3000 	ldr.w	r3, [r9]
 800c096:	ea4a 0a03 	orr.w	sl, sl, r3
 800c09a:	f01a 0f01 	tst.w	sl, #1
 800c09e:	d10e      	bne.n	800c0be <__gethex+0x36c>
 800c0a0:	f047 0710 	orr.w	r7, r7, #16
 800c0a4:	e033      	b.n	800c10e <__gethex+0x3bc>
 800c0a6:	f04f 0a01 	mov.w	sl, #1
 800c0aa:	e7d0      	b.n	800c04e <__gethex+0x2fc>
 800c0ac:	2701      	movs	r7, #1
 800c0ae:	e7e2      	b.n	800c076 <__gethex+0x324>
 800c0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0b2:	f1c3 0301 	rsb	r3, r3, #1
 800c0b6:	9315      	str	r3, [sp, #84]	; 0x54
 800c0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0f0      	beq.n	800c0a0 <__gethex+0x34e>
 800c0be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c0c2:	f105 0314 	add.w	r3, r5, #20
 800c0c6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c0ca:	eb03 010a 	add.w	r1, r3, sl
 800c0ce:	f04f 0c00 	mov.w	ip, #0
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c0dc:	d01c      	beq.n	800c118 <__gethex+0x3c6>
 800c0de:	3201      	adds	r2, #1
 800c0e0:	6002      	str	r2, [r0, #0]
 800c0e2:	2f02      	cmp	r7, #2
 800c0e4:	f105 0314 	add.w	r3, r5, #20
 800c0e8:	d138      	bne.n	800c15c <__gethex+0x40a>
 800c0ea:	f8d8 2000 	ldr.w	r2, [r8]
 800c0ee:	3a01      	subs	r2, #1
 800c0f0:	42b2      	cmp	r2, r6
 800c0f2:	d10a      	bne.n	800c10a <__gethex+0x3b8>
 800c0f4:	1171      	asrs	r1, r6, #5
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f006 061f 	and.w	r6, r6, #31
 800c0fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c100:	fa02 f606 	lsl.w	r6, r2, r6
 800c104:	421e      	tst	r6, r3
 800c106:	bf18      	it	ne
 800c108:	4617      	movne	r7, r2
 800c10a:	f047 0720 	orr.w	r7, r7, #32
 800c10e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c110:	601d      	str	r5, [r3, #0]
 800c112:	9b06      	ldr	r3, [sp, #24]
 800c114:	601c      	str	r4, [r3, #0]
 800c116:	e6a4      	b.n	800be62 <__gethex+0x110>
 800c118:	4299      	cmp	r1, r3
 800c11a:	f843 cc04 	str.w	ip, [r3, #-4]
 800c11e:	d8d8      	bhi.n	800c0d2 <__gethex+0x380>
 800c120:	68ab      	ldr	r3, [r5, #8]
 800c122:	4599      	cmp	r9, r3
 800c124:	db12      	blt.n	800c14c <__gethex+0x3fa>
 800c126:	6869      	ldr	r1, [r5, #4]
 800c128:	9802      	ldr	r0, [sp, #8]
 800c12a:	3101      	adds	r1, #1
 800c12c:	f000 f97a 	bl	800c424 <_Balloc>
 800c130:	692a      	ldr	r2, [r5, #16]
 800c132:	3202      	adds	r2, #2
 800c134:	f105 010c 	add.w	r1, r5, #12
 800c138:	4683      	mov	fp, r0
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	300c      	adds	r0, #12
 800c13e:	f7fc ff97 	bl	8009070 <memcpy>
 800c142:	4629      	mov	r1, r5
 800c144:	9802      	ldr	r0, [sp, #8]
 800c146:	f000 f9a1 	bl	800c48c <_Bfree>
 800c14a:	465d      	mov	r5, fp
 800c14c:	692b      	ldr	r3, [r5, #16]
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c154:	612a      	str	r2, [r5, #16]
 800c156:	2201      	movs	r2, #1
 800c158:	615a      	str	r2, [r3, #20]
 800c15a:	e7c2      	b.n	800c0e2 <__gethex+0x390>
 800c15c:	692a      	ldr	r2, [r5, #16]
 800c15e:	454a      	cmp	r2, r9
 800c160:	dd0b      	ble.n	800c17a <__gethex+0x428>
 800c162:	2101      	movs	r1, #1
 800c164:	4628      	mov	r0, r5
 800c166:	f7ff fda5 	bl	800bcb4 <rshift>
 800c16a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c16e:	3401      	adds	r4, #1
 800c170:	42a3      	cmp	r3, r4
 800c172:	f6ff aed9 	blt.w	800bf28 <__gethex+0x1d6>
 800c176:	2701      	movs	r7, #1
 800c178:	e7c7      	b.n	800c10a <__gethex+0x3b8>
 800c17a:	f016 061f 	ands.w	r6, r6, #31
 800c17e:	d0fa      	beq.n	800c176 <__gethex+0x424>
 800c180:	449a      	add	sl, r3
 800c182:	f1c6 0620 	rsb	r6, r6, #32
 800c186:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c18a:	f000 fa0f 	bl	800c5ac <__hi0bits>
 800c18e:	42b0      	cmp	r0, r6
 800c190:	dbe7      	blt.n	800c162 <__gethex+0x410>
 800c192:	e7f0      	b.n	800c176 <__gethex+0x424>

0800c194 <L_shift>:
 800c194:	f1c2 0208 	rsb	r2, r2, #8
 800c198:	0092      	lsls	r2, r2, #2
 800c19a:	b570      	push	{r4, r5, r6, lr}
 800c19c:	f1c2 0620 	rsb	r6, r2, #32
 800c1a0:	6843      	ldr	r3, [r0, #4]
 800c1a2:	6804      	ldr	r4, [r0, #0]
 800c1a4:	fa03 f506 	lsl.w	r5, r3, r6
 800c1a8:	432c      	orrs	r4, r5
 800c1aa:	40d3      	lsrs	r3, r2
 800c1ac:	6004      	str	r4, [r0, #0]
 800c1ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1b2:	4288      	cmp	r0, r1
 800c1b4:	d3f4      	bcc.n	800c1a0 <L_shift+0xc>
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}

0800c1b8 <__match>:
 800c1b8:	b530      	push	{r4, r5, lr}
 800c1ba:	6803      	ldr	r3, [r0, #0]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1c2:	b914      	cbnz	r4, 800c1ca <__match+0x12>
 800c1c4:	6003      	str	r3, [r0, #0]
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	bd30      	pop	{r4, r5, pc}
 800c1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1d2:	2d19      	cmp	r5, #25
 800c1d4:	bf98      	it	ls
 800c1d6:	3220      	addls	r2, #32
 800c1d8:	42a2      	cmp	r2, r4
 800c1da:	d0f0      	beq.n	800c1be <__match+0x6>
 800c1dc:	2000      	movs	r0, #0
 800c1de:	e7f3      	b.n	800c1c8 <__match+0x10>

0800c1e0 <__hexnan>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	680b      	ldr	r3, [r1, #0]
 800c1e6:	6801      	ldr	r1, [r0, #0]
 800c1e8:	115f      	asrs	r7, r3, #5
 800c1ea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c1ee:	f013 031f 	ands.w	r3, r3, #31
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	bf18      	it	ne
 800c1f6:	3704      	addne	r7, #4
 800c1f8:	2500      	movs	r5, #0
 800c1fa:	1f3e      	subs	r6, r7, #4
 800c1fc:	4682      	mov	sl, r0
 800c1fe:	4690      	mov	r8, r2
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	f847 5c04 	str.w	r5, [r7, #-4]
 800c206:	46b1      	mov	r9, r6
 800c208:	4634      	mov	r4, r6
 800c20a:	9502      	str	r5, [sp, #8]
 800c20c:	46ab      	mov	fp, r5
 800c20e:	784a      	ldrb	r2, [r1, #1]
 800c210:	1c4b      	adds	r3, r1, #1
 800c212:	9303      	str	r3, [sp, #12]
 800c214:	b342      	cbz	r2, 800c268 <__hexnan+0x88>
 800c216:	4610      	mov	r0, r2
 800c218:	9105      	str	r1, [sp, #20]
 800c21a:	9204      	str	r2, [sp, #16]
 800c21c:	f7ff fd84 	bl	800bd28 <__hexdig_fun>
 800c220:	2800      	cmp	r0, #0
 800c222:	d143      	bne.n	800c2ac <__hexnan+0xcc>
 800c224:	9a04      	ldr	r2, [sp, #16]
 800c226:	9905      	ldr	r1, [sp, #20]
 800c228:	2a20      	cmp	r2, #32
 800c22a:	d818      	bhi.n	800c25e <__hexnan+0x7e>
 800c22c:	9b02      	ldr	r3, [sp, #8]
 800c22e:	459b      	cmp	fp, r3
 800c230:	dd13      	ble.n	800c25a <__hexnan+0x7a>
 800c232:	454c      	cmp	r4, r9
 800c234:	d206      	bcs.n	800c244 <__hexnan+0x64>
 800c236:	2d07      	cmp	r5, #7
 800c238:	dc04      	bgt.n	800c244 <__hexnan+0x64>
 800c23a:	462a      	mov	r2, r5
 800c23c:	4649      	mov	r1, r9
 800c23e:	4620      	mov	r0, r4
 800c240:	f7ff ffa8 	bl	800c194 <L_shift>
 800c244:	4544      	cmp	r4, r8
 800c246:	d944      	bls.n	800c2d2 <__hexnan+0xf2>
 800c248:	2300      	movs	r3, #0
 800c24a:	f1a4 0904 	sub.w	r9, r4, #4
 800c24e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c252:	f8cd b008 	str.w	fp, [sp, #8]
 800c256:	464c      	mov	r4, r9
 800c258:	461d      	mov	r5, r3
 800c25a:	9903      	ldr	r1, [sp, #12]
 800c25c:	e7d7      	b.n	800c20e <__hexnan+0x2e>
 800c25e:	2a29      	cmp	r2, #41	; 0x29
 800c260:	d14a      	bne.n	800c2f8 <__hexnan+0x118>
 800c262:	3102      	adds	r1, #2
 800c264:	f8ca 1000 	str.w	r1, [sl]
 800c268:	f1bb 0f00 	cmp.w	fp, #0
 800c26c:	d044      	beq.n	800c2f8 <__hexnan+0x118>
 800c26e:	454c      	cmp	r4, r9
 800c270:	d206      	bcs.n	800c280 <__hexnan+0xa0>
 800c272:	2d07      	cmp	r5, #7
 800c274:	dc04      	bgt.n	800c280 <__hexnan+0xa0>
 800c276:	462a      	mov	r2, r5
 800c278:	4649      	mov	r1, r9
 800c27a:	4620      	mov	r0, r4
 800c27c:	f7ff ff8a 	bl	800c194 <L_shift>
 800c280:	4544      	cmp	r4, r8
 800c282:	d928      	bls.n	800c2d6 <__hexnan+0xf6>
 800c284:	4643      	mov	r3, r8
 800c286:	f854 2b04 	ldr.w	r2, [r4], #4
 800c28a:	f843 2b04 	str.w	r2, [r3], #4
 800c28e:	42a6      	cmp	r6, r4
 800c290:	d2f9      	bcs.n	800c286 <__hexnan+0xa6>
 800c292:	2200      	movs	r2, #0
 800c294:	f843 2b04 	str.w	r2, [r3], #4
 800c298:	429e      	cmp	r6, r3
 800c29a:	d2fb      	bcs.n	800c294 <__hexnan+0xb4>
 800c29c:	6833      	ldr	r3, [r6, #0]
 800c29e:	b91b      	cbnz	r3, 800c2a8 <__hexnan+0xc8>
 800c2a0:	4546      	cmp	r6, r8
 800c2a2:	d127      	bne.n	800c2f4 <__hexnan+0x114>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	6033      	str	r3, [r6, #0]
 800c2a8:	2005      	movs	r0, #5
 800c2aa:	e026      	b.n	800c2fa <__hexnan+0x11a>
 800c2ac:	3501      	adds	r5, #1
 800c2ae:	2d08      	cmp	r5, #8
 800c2b0:	f10b 0b01 	add.w	fp, fp, #1
 800c2b4:	dd06      	ble.n	800c2c4 <__hexnan+0xe4>
 800c2b6:	4544      	cmp	r4, r8
 800c2b8:	d9cf      	bls.n	800c25a <__hexnan+0x7a>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2c0:	2501      	movs	r5, #1
 800c2c2:	3c04      	subs	r4, #4
 800c2c4:	6822      	ldr	r2, [r4, #0]
 800c2c6:	f000 000f 	and.w	r0, r0, #15
 800c2ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c2ce:	6020      	str	r0, [r4, #0]
 800c2d0:	e7c3      	b.n	800c25a <__hexnan+0x7a>
 800c2d2:	2508      	movs	r5, #8
 800c2d4:	e7c1      	b.n	800c25a <__hexnan+0x7a>
 800c2d6:	9b01      	ldr	r3, [sp, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0df      	beq.n	800c29c <__hexnan+0xbc>
 800c2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e0:	f1c3 0320 	rsb	r3, r3, #32
 800c2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c2ec:	401a      	ands	r2, r3
 800c2ee:	f847 2c04 	str.w	r2, [r7, #-4]
 800c2f2:	e7d3      	b.n	800c29c <__hexnan+0xbc>
 800c2f4:	3e04      	subs	r6, #4
 800c2f6:	e7d1      	b.n	800c29c <__hexnan+0xbc>
 800c2f8:	2004      	movs	r0, #4
 800c2fa:	b007      	add	sp, #28
 800c2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c300 <__locale_ctype_ptr_l>:
 800c300:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c304:	4770      	bx	lr

0800c306 <__localeconv_l>:
 800c306:	30f0      	adds	r0, #240	; 0xf0
 800c308:	4770      	bx	lr
	...

0800c30c <_localeconv_r>:
 800c30c:	4b04      	ldr	r3, [pc, #16]	; (800c320 <_localeconv_r+0x14>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	6a18      	ldr	r0, [r3, #32]
 800c312:	4b04      	ldr	r3, [pc, #16]	; (800c324 <_localeconv_r+0x18>)
 800c314:	2800      	cmp	r0, #0
 800c316:	bf08      	it	eq
 800c318:	4618      	moveq	r0, r3
 800c31a:	30f0      	adds	r0, #240	; 0xf0
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	2000000c 	.word	0x2000000c
 800c324:	20000070 	.word	0x20000070

0800c328 <__swhatbuf_r>:
 800c328:	b570      	push	{r4, r5, r6, lr}
 800c32a:	460e      	mov	r6, r1
 800c32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c330:	2900      	cmp	r1, #0
 800c332:	b096      	sub	sp, #88	; 0x58
 800c334:	4614      	mov	r4, r2
 800c336:	461d      	mov	r5, r3
 800c338:	da07      	bge.n	800c34a <__swhatbuf_r+0x22>
 800c33a:	2300      	movs	r3, #0
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	89b3      	ldrh	r3, [r6, #12]
 800c340:	061a      	lsls	r2, r3, #24
 800c342:	d410      	bmi.n	800c366 <__swhatbuf_r+0x3e>
 800c344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c348:	e00e      	b.n	800c368 <__swhatbuf_r+0x40>
 800c34a:	466a      	mov	r2, sp
 800c34c:	f001 f846 	bl	800d3dc <_fstat_r>
 800c350:	2800      	cmp	r0, #0
 800c352:	dbf2      	blt.n	800c33a <__swhatbuf_r+0x12>
 800c354:	9a01      	ldr	r2, [sp, #4]
 800c356:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c35a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c35e:	425a      	negs	r2, r3
 800c360:	415a      	adcs	r2, r3
 800c362:	602a      	str	r2, [r5, #0]
 800c364:	e7ee      	b.n	800c344 <__swhatbuf_r+0x1c>
 800c366:	2340      	movs	r3, #64	; 0x40
 800c368:	2000      	movs	r0, #0
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	b016      	add	sp, #88	; 0x58
 800c36e:	bd70      	pop	{r4, r5, r6, pc}

0800c370 <__smakebuf_r>:
 800c370:	898b      	ldrh	r3, [r1, #12]
 800c372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c374:	079d      	lsls	r5, r3, #30
 800c376:	4606      	mov	r6, r0
 800c378:	460c      	mov	r4, r1
 800c37a:	d507      	bpl.n	800c38c <__smakebuf_r+0x1c>
 800c37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	6123      	str	r3, [r4, #16]
 800c384:	2301      	movs	r3, #1
 800c386:	6163      	str	r3, [r4, #20]
 800c388:	b002      	add	sp, #8
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
 800c38c:	ab01      	add	r3, sp, #4
 800c38e:	466a      	mov	r2, sp
 800c390:	f7ff ffca 	bl	800c328 <__swhatbuf_r>
 800c394:	9900      	ldr	r1, [sp, #0]
 800c396:	4605      	mov	r5, r0
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 fc9f 	bl	800ccdc <_malloc_r>
 800c39e:	b948      	cbnz	r0, 800c3b4 <__smakebuf_r+0x44>
 800c3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3a4:	059a      	lsls	r2, r3, #22
 800c3a6:	d4ef      	bmi.n	800c388 <__smakebuf_r+0x18>
 800c3a8:	f023 0303 	bic.w	r3, r3, #3
 800c3ac:	f043 0302 	orr.w	r3, r3, #2
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	e7e3      	b.n	800c37c <__smakebuf_r+0xc>
 800c3b4:	4b0d      	ldr	r3, [pc, #52]	; (800c3ec <__smakebuf_r+0x7c>)
 800c3b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	6020      	str	r0, [r4, #0]
 800c3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	9b00      	ldr	r3, [sp, #0]
 800c3c4:	6163      	str	r3, [r4, #20]
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	6120      	str	r0, [r4, #16]
 800c3ca:	b15b      	cbz	r3, 800c3e4 <__smakebuf_r+0x74>
 800c3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f001 f815 	bl	800d400 <_isatty_r>
 800c3d6:	b128      	cbz	r0, 800c3e4 <__smakebuf_r+0x74>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	f023 0303 	bic.w	r3, r3, #3
 800c3de:	f043 0301 	orr.w	r3, r3, #1
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	431d      	orrs	r5, r3
 800c3e8:	81a5      	strh	r5, [r4, #12]
 800c3ea:	e7cd      	b.n	800c388 <__smakebuf_r+0x18>
 800c3ec:	0800bb69 	.word	0x0800bb69

0800c3f0 <malloc>:
 800c3f0:	4b02      	ldr	r3, [pc, #8]	; (800c3fc <malloc+0xc>)
 800c3f2:	4601      	mov	r1, r0
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	f000 bc71 	b.w	800ccdc <_malloc_r>
 800c3fa:	bf00      	nop
 800c3fc:	2000000c 	.word	0x2000000c

0800c400 <__ascii_mbtowc>:
 800c400:	b082      	sub	sp, #8
 800c402:	b901      	cbnz	r1, 800c406 <__ascii_mbtowc+0x6>
 800c404:	a901      	add	r1, sp, #4
 800c406:	b142      	cbz	r2, 800c41a <__ascii_mbtowc+0x1a>
 800c408:	b14b      	cbz	r3, 800c41e <__ascii_mbtowc+0x1e>
 800c40a:	7813      	ldrb	r3, [r2, #0]
 800c40c:	600b      	str	r3, [r1, #0]
 800c40e:	7812      	ldrb	r2, [r2, #0]
 800c410:	1c10      	adds	r0, r2, #0
 800c412:	bf18      	it	ne
 800c414:	2001      	movne	r0, #1
 800c416:	b002      	add	sp, #8
 800c418:	4770      	bx	lr
 800c41a:	4610      	mov	r0, r2
 800c41c:	e7fb      	b.n	800c416 <__ascii_mbtowc+0x16>
 800c41e:	f06f 0001 	mvn.w	r0, #1
 800c422:	e7f8      	b.n	800c416 <__ascii_mbtowc+0x16>

0800c424 <_Balloc>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c428:	4604      	mov	r4, r0
 800c42a:	460e      	mov	r6, r1
 800c42c:	b93d      	cbnz	r5, 800c43e <_Balloc+0x1a>
 800c42e:	2010      	movs	r0, #16
 800c430:	f7ff ffde 	bl	800c3f0 <malloc>
 800c434:	6260      	str	r0, [r4, #36]	; 0x24
 800c436:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c43a:	6005      	str	r5, [r0, #0]
 800c43c:	60c5      	str	r5, [r0, #12]
 800c43e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c440:	68eb      	ldr	r3, [r5, #12]
 800c442:	b183      	cbz	r3, 800c466 <_Balloc+0x42>
 800c444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c44c:	b9b8      	cbnz	r0, 800c47e <_Balloc+0x5a>
 800c44e:	2101      	movs	r1, #1
 800c450:	fa01 f506 	lsl.w	r5, r1, r6
 800c454:	1d6a      	adds	r2, r5, #5
 800c456:	0092      	lsls	r2, r2, #2
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 fbe2 	bl	800cc22 <_calloc_r>
 800c45e:	b160      	cbz	r0, 800c47a <_Balloc+0x56>
 800c460:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c464:	e00e      	b.n	800c484 <_Balloc+0x60>
 800c466:	2221      	movs	r2, #33	; 0x21
 800c468:	2104      	movs	r1, #4
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 fbd9 	bl	800cc22 <_calloc_r>
 800c470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c472:	60e8      	str	r0, [r5, #12]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1e4      	bne.n	800c444 <_Balloc+0x20>
 800c47a:	2000      	movs	r0, #0
 800c47c:	bd70      	pop	{r4, r5, r6, pc}
 800c47e:	6802      	ldr	r2, [r0, #0]
 800c480:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c484:	2300      	movs	r3, #0
 800c486:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c48a:	e7f7      	b.n	800c47c <_Balloc+0x58>

0800c48c <_Bfree>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c490:	4606      	mov	r6, r0
 800c492:	460d      	mov	r5, r1
 800c494:	b93c      	cbnz	r4, 800c4a6 <_Bfree+0x1a>
 800c496:	2010      	movs	r0, #16
 800c498:	f7ff ffaa 	bl	800c3f0 <malloc>
 800c49c:	6270      	str	r0, [r6, #36]	; 0x24
 800c49e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4a2:	6004      	str	r4, [r0, #0]
 800c4a4:	60c4      	str	r4, [r0, #12]
 800c4a6:	b13d      	cbz	r5, 800c4b8 <_Bfree+0x2c>
 800c4a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c4aa:	686a      	ldr	r2, [r5, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4b2:	6029      	str	r1, [r5, #0]
 800c4b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c4b8:	bd70      	pop	{r4, r5, r6, pc}

0800c4ba <__multadd>:
 800c4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4be:	690d      	ldr	r5, [r1, #16]
 800c4c0:	461f      	mov	r7, r3
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	f101 0c14 	add.w	ip, r1, #20
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f8dc 0000 	ldr.w	r0, [ip]
 800c4d0:	b281      	uxth	r1, r0
 800c4d2:	fb02 7101 	mla	r1, r2, r1, r7
 800c4d6:	0c0f      	lsrs	r7, r1, #16
 800c4d8:	0c00      	lsrs	r0, r0, #16
 800c4da:	fb02 7000 	mla	r0, r2, r0, r7
 800c4de:	b289      	uxth	r1, r1
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c4e6:	429d      	cmp	r5, r3
 800c4e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c4ec:	f84c 1b04 	str.w	r1, [ip], #4
 800c4f0:	dcec      	bgt.n	800c4cc <__multadd+0x12>
 800c4f2:	b1d7      	cbz	r7, 800c52a <__multadd+0x70>
 800c4f4:	68a3      	ldr	r3, [r4, #8]
 800c4f6:	42ab      	cmp	r3, r5
 800c4f8:	dc12      	bgt.n	800c520 <__multadd+0x66>
 800c4fa:	6861      	ldr	r1, [r4, #4]
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	3101      	adds	r1, #1
 800c500:	f7ff ff90 	bl	800c424 <_Balloc>
 800c504:	6922      	ldr	r2, [r4, #16]
 800c506:	3202      	adds	r2, #2
 800c508:	f104 010c 	add.w	r1, r4, #12
 800c50c:	4680      	mov	r8, r0
 800c50e:	0092      	lsls	r2, r2, #2
 800c510:	300c      	adds	r0, #12
 800c512:	f7fc fdad 	bl	8009070 <memcpy>
 800c516:	4621      	mov	r1, r4
 800c518:	4630      	mov	r0, r6
 800c51a:	f7ff ffb7 	bl	800c48c <_Bfree>
 800c51e:	4644      	mov	r4, r8
 800c520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c524:	3501      	adds	r5, #1
 800c526:	615f      	str	r7, [r3, #20]
 800c528:	6125      	str	r5, [r4, #16]
 800c52a:	4620      	mov	r0, r4
 800c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c530 <__s2b>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	460c      	mov	r4, r1
 800c536:	4615      	mov	r5, r2
 800c538:	461f      	mov	r7, r3
 800c53a:	2209      	movs	r2, #9
 800c53c:	3308      	adds	r3, #8
 800c53e:	4606      	mov	r6, r0
 800c540:	fb93 f3f2 	sdiv	r3, r3, r2
 800c544:	2100      	movs	r1, #0
 800c546:	2201      	movs	r2, #1
 800c548:	429a      	cmp	r2, r3
 800c54a:	db20      	blt.n	800c58e <__s2b+0x5e>
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7ff ff69 	bl	800c424 <_Balloc>
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	6143      	str	r3, [r0, #20]
 800c556:	2d09      	cmp	r5, #9
 800c558:	f04f 0301 	mov.w	r3, #1
 800c55c:	6103      	str	r3, [r0, #16]
 800c55e:	dd19      	ble.n	800c594 <__s2b+0x64>
 800c560:	f104 0809 	add.w	r8, r4, #9
 800c564:	46c1      	mov	r9, r8
 800c566:	442c      	add	r4, r5
 800c568:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c56c:	4601      	mov	r1, r0
 800c56e:	3b30      	subs	r3, #48	; 0x30
 800c570:	220a      	movs	r2, #10
 800c572:	4630      	mov	r0, r6
 800c574:	f7ff ffa1 	bl	800c4ba <__multadd>
 800c578:	45a1      	cmp	r9, r4
 800c57a:	d1f5      	bne.n	800c568 <__s2b+0x38>
 800c57c:	eb08 0405 	add.w	r4, r8, r5
 800c580:	3c08      	subs	r4, #8
 800c582:	1b2d      	subs	r5, r5, r4
 800c584:	1963      	adds	r3, r4, r5
 800c586:	42bb      	cmp	r3, r7
 800c588:	db07      	blt.n	800c59a <__s2b+0x6a>
 800c58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c58e:	0052      	lsls	r2, r2, #1
 800c590:	3101      	adds	r1, #1
 800c592:	e7d9      	b.n	800c548 <__s2b+0x18>
 800c594:	340a      	adds	r4, #10
 800c596:	2509      	movs	r5, #9
 800c598:	e7f3      	b.n	800c582 <__s2b+0x52>
 800c59a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c59e:	4601      	mov	r1, r0
 800c5a0:	3b30      	subs	r3, #48	; 0x30
 800c5a2:	220a      	movs	r2, #10
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff ff88 	bl	800c4ba <__multadd>
 800c5aa:	e7eb      	b.n	800c584 <__s2b+0x54>

0800c5ac <__hi0bits>:
 800c5ac:	0c02      	lsrs	r2, r0, #16
 800c5ae:	0412      	lsls	r2, r2, #16
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	b9b2      	cbnz	r2, 800c5e2 <__hi0bits+0x36>
 800c5b4:	0403      	lsls	r3, r0, #16
 800c5b6:	2010      	movs	r0, #16
 800c5b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c5bc:	bf04      	itt	eq
 800c5be:	021b      	lsleq	r3, r3, #8
 800c5c0:	3008      	addeq	r0, #8
 800c5c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c5c6:	bf04      	itt	eq
 800c5c8:	011b      	lsleq	r3, r3, #4
 800c5ca:	3004      	addeq	r0, #4
 800c5cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c5d0:	bf04      	itt	eq
 800c5d2:	009b      	lsleq	r3, r3, #2
 800c5d4:	3002      	addeq	r0, #2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	db06      	blt.n	800c5e8 <__hi0bits+0x3c>
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	d503      	bpl.n	800c5e6 <__hi0bits+0x3a>
 800c5de:	3001      	adds	r0, #1
 800c5e0:	4770      	bx	lr
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e7e8      	b.n	800c5b8 <__hi0bits+0xc>
 800c5e6:	2020      	movs	r0, #32
 800c5e8:	4770      	bx	lr

0800c5ea <__lo0bits>:
 800c5ea:	6803      	ldr	r3, [r0, #0]
 800c5ec:	f013 0207 	ands.w	r2, r3, #7
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	d00b      	beq.n	800c60c <__lo0bits+0x22>
 800c5f4:	07da      	lsls	r2, r3, #31
 800c5f6:	d423      	bmi.n	800c640 <__lo0bits+0x56>
 800c5f8:	0798      	lsls	r0, r3, #30
 800c5fa:	bf49      	itett	mi
 800c5fc:	085b      	lsrmi	r3, r3, #1
 800c5fe:	089b      	lsrpl	r3, r3, #2
 800c600:	2001      	movmi	r0, #1
 800c602:	600b      	strmi	r3, [r1, #0]
 800c604:	bf5c      	itt	pl
 800c606:	600b      	strpl	r3, [r1, #0]
 800c608:	2002      	movpl	r0, #2
 800c60a:	4770      	bx	lr
 800c60c:	b298      	uxth	r0, r3
 800c60e:	b9a8      	cbnz	r0, 800c63c <__lo0bits+0x52>
 800c610:	0c1b      	lsrs	r3, r3, #16
 800c612:	2010      	movs	r0, #16
 800c614:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c618:	bf04      	itt	eq
 800c61a:	0a1b      	lsreq	r3, r3, #8
 800c61c:	3008      	addeq	r0, #8
 800c61e:	071a      	lsls	r2, r3, #28
 800c620:	bf04      	itt	eq
 800c622:	091b      	lsreq	r3, r3, #4
 800c624:	3004      	addeq	r0, #4
 800c626:	079a      	lsls	r2, r3, #30
 800c628:	bf04      	itt	eq
 800c62a:	089b      	lsreq	r3, r3, #2
 800c62c:	3002      	addeq	r0, #2
 800c62e:	07da      	lsls	r2, r3, #31
 800c630:	d402      	bmi.n	800c638 <__lo0bits+0x4e>
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	d006      	beq.n	800c644 <__lo0bits+0x5a>
 800c636:	3001      	adds	r0, #1
 800c638:	600b      	str	r3, [r1, #0]
 800c63a:	4770      	bx	lr
 800c63c:	4610      	mov	r0, r2
 800c63e:	e7e9      	b.n	800c614 <__lo0bits+0x2a>
 800c640:	2000      	movs	r0, #0
 800c642:	4770      	bx	lr
 800c644:	2020      	movs	r0, #32
 800c646:	4770      	bx	lr

0800c648 <__i2b>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	460c      	mov	r4, r1
 800c64c:	2101      	movs	r1, #1
 800c64e:	f7ff fee9 	bl	800c424 <_Balloc>
 800c652:	2201      	movs	r2, #1
 800c654:	6144      	str	r4, [r0, #20]
 800c656:	6102      	str	r2, [r0, #16]
 800c658:	bd10      	pop	{r4, pc}

0800c65a <__multiply>:
 800c65a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65e:	4614      	mov	r4, r2
 800c660:	690a      	ldr	r2, [r1, #16]
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	429a      	cmp	r2, r3
 800c666:	bfb8      	it	lt
 800c668:	460b      	movlt	r3, r1
 800c66a:	4688      	mov	r8, r1
 800c66c:	bfbc      	itt	lt
 800c66e:	46a0      	movlt	r8, r4
 800c670:	461c      	movlt	r4, r3
 800c672:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c676:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c67e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c682:	eb07 0609 	add.w	r6, r7, r9
 800c686:	42b3      	cmp	r3, r6
 800c688:	bfb8      	it	lt
 800c68a:	3101      	addlt	r1, #1
 800c68c:	f7ff feca 	bl	800c424 <_Balloc>
 800c690:	f100 0514 	add.w	r5, r0, #20
 800c694:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c698:	462b      	mov	r3, r5
 800c69a:	2200      	movs	r2, #0
 800c69c:	4573      	cmp	r3, lr
 800c69e:	d316      	bcc.n	800c6ce <__multiply+0x74>
 800c6a0:	f104 0214 	add.w	r2, r4, #20
 800c6a4:	f108 0114 	add.w	r1, r8, #20
 800c6a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c6ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	9b00      	ldr	r3, [sp, #0]
 800c6b4:	9201      	str	r2, [sp, #4]
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d80c      	bhi.n	800c6d4 <__multiply+0x7a>
 800c6ba:	2e00      	cmp	r6, #0
 800c6bc:	dd03      	ble.n	800c6c6 <__multiply+0x6c>
 800c6be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d05d      	beq.n	800c782 <__multiply+0x128>
 800c6c6:	6106      	str	r6, [r0, #16]
 800c6c8:	b003      	add	sp, #12
 800c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ce:	f843 2b04 	str.w	r2, [r3], #4
 800c6d2:	e7e3      	b.n	800c69c <__multiply+0x42>
 800c6d4:	f8b2 b000 	ldrh.w	fp, [r2]
 800c6d8:	f1bb 0f00 	cmp.w	fp, #0
 800c6dc:	d023      	beq.n	800c726 <__multiply+0xcc>
 800c6de:	4689      	mov	r9, r1
 800c6e0:	46ac      	mov	ip, r5
 800c6e2:	f04f 0800 	mov.w	r8, #0
 800c6e6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c6ea:	f8dc a000 	ldr.w	sl, [ip]
 800c6ee:	b2a3      	uxth	r3, r4
 800c6f0:	fa1f fa8a 	uxth.w	sl, sl
 800c6f4:	fb0b a303 	mla	r3, fp, r3, sl
 800c6f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c6fc:	f8dc 4000 	ldr.w	r4, [ip]
 800c700:	4443      	add	r3, r8
 800c702:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c706:	fb0b 840a 	mla	r4, fp, sl, r8
 800c70a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c70e:	46e2      	mov	sl, ip
 800c710:	b29b      	uxth	r3, r3
 800c712:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c716:	454f      	cmp	r7, r9
 800c718:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c71c:	f84a 3b04 	str.w	r3, [sl], #4
 800c720:	d82b      	bhi.n	800c77a <__multiply+0x120>
 800c722:	f8cc 8004 	str.w	r8, [ip, #4]
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c72c:	3204      	adds	r2, #4
 800c72e:	f1ba 0f00 	cmp.w	sl, #0
 800c732:	d020      	beq.n	800c776 <__multiply+0x11c>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	4689      	mov	r9, r1
 800c738:	46a8      	mov	r8, r5
 800c73a:	f04f 0b00 	mov.w	fp, #0
 800c73e:	f8b9 c000 	ldrh.w	ip, [r9]
 800c742:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c746:	fb0a 440c 	mla	r4, sl, ip, r4
 800c74a:	445c      	add	r4, fp
 800c74c:	46c4      	mov	ip, r8
 800c74e:	b29b      	uxth	r3, r3
 800c750:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c754:	f84c 3b04 	str.w	r3, [ip], #4
 800c758:	f859 3b04 	ldr.w	r3, [r9], #4
 800c75c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c760:	0c1b      	lsrs	r3, r3, #16
 800c762:	fb0a b303 	mla	r3, sl, r3, fp
 800c766:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c76a:	454f      	cmp	r7, r9
 800c76c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c770:	d805      	bhi.n	800c77e <__multiply+0x124>
 800c772:	f8c8 3004 	str.w	r3, [r8, #4]
 800c776:	3504      	adds	r5, #4
 800c778:	e79b      	b.n	800c6b2 <__multiply+0x58>
 800c77a:	46d4      	mov	ip, sl
 800c77c:	e7b3      	b.n	800c6e6 <__multiply+0x8c>
 800c77e:	46e0      	mov	r8, ip
 800c780:	e7dd      	b.n	800c73e <__multiply+0xe4>
 800c782:	3e01      	subs	r6, #1
 800c784:	e799      	b.n	800c6ba <__multiply+0x60>
	...

0800c788 <__pow5mult>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	4615      	mov	r5, r2
 800c78e:	f012 0203 	ands.w	r2, r2, #3
 800c792:	4606      	mov	r6, r0
 800c794:	460f      	mov	r7, r1
 800c796:	d007      	beq.n	800c7a8 <__pow5mult+0x20>
 800c798:	3a01      	subs	r2, #1
 800c79a:	4c21      	ldr	r4, [pc, #132]	; (800c820 <__pow5mult+0x98>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7a2:	f7ff fe8a 	bl	800c4ba <__multadd>
 800c7a6:	4607      	mov	r7, r0
 800c7a8:	10ad      	asrs	r5, r5, #2
 800c7aa:	d035      	beq.n	800c818 <__pow5mult+0x90>
 800c7ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7ae:	b93c      	cbnz	r4, 800c7c0 <__pow5mult+0x38>
 800c7b0:	2010      	movs	r0, #16
 800c7b2:	f7ff fe1d 	bl	800c3f0 <malloc>
 800c7b6:	6270      	str	r0, [r6, #36]	; 0x24
 800c7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7bc:	6004      	str	r4, [r0, #0]
 800c7be:	60c4      	str	r4, [r0, #12]
 800c7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7c8:	b94c      	cbnz	r4, 800c7de <__pow5mult+0x56>
 800c7ca:	f240 2171 	movw	r1, #625	; 0x271
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f7ff ff3a 	bl	800c648 <__i2b>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7da:	4604      	mov	r4, r0
 800c7dc:	6003      	str	r3, [r0, #0]
 800c7de:	f04f 0800 	mov.w	r8, #0
 800c7e2:	07eb      	lsls	r3, r5, #31
 800c7e4:	d50a      	bpl.n	800c7fc <__pow5mult+0x74>
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	4622      	mov	r2, r4
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7ff ff35 	bl	800c65a <__multiply>
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	4681      	mov	r9, r0
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7ff fe49 	bl	800c48c <_Bfree>
 800c7fa:	464f      	mov	r7, r9
 800c7fc:	106d      	asrs	r5, r5, #1
 800c7fe:	d00b      	beq.n	800c818 <__pow5mult+0x90>
 800c800:	6820      	ldr	r0, [r4, #0]
 800c802:	b938      	cbnz	r0, 800c814 <__pow5mult+0x8c>
 800c804:	4622      	mov	r2, r4
 800c806:	4621      	mov	r1, r4
 800c808:	4630      	mov	r0, r6
 800c80a:	f7ff ff26 	bl	800c65a <__multiply>
 800c80e:	6020      	str	r0, [r4, #0]
 800c810:	f8c0 8000 	str.w	r8, [r0]
 800c814:	4604      	mov	r4, r0
 800c816:	e7e4      	b.n	800c7e2 <__pow5mult+0x5a>
 800c818:	4638      	mov	r0, r7
 800c81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c81e:	bf00      	nop
 800c820:	0800da60 	.word	0x0800da60

0800c824 <__lshift>:
 800c824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c828:	460c      	mov	r4, r1
 800c82a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	6849      	ldr	r1, [r1, #4]
 800c832:	eb0a 0903 	add.w	r9, sl, r3
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	4607      	mov	r7, r0
 800c83a:	4616      	mov	r6, r2
 800c83c:	f109 0501 	add.w	r5, r9, #1
 800c840:	42ab      	cmp	r3, r5
 800c842:	db32      	blt.n	800c8aa <__lshift+0x86>
 800c844:	4638      	mov	r0, r7
 800c846:	f7ff fded 	bl	800c424 <_Balloc>
 800c84a:	2300      	movs	r3, #0
 800c84c:	4680      	mov	r8, r0
 800c84e:	f100 0114 	add.w	r1, r0, #20
 800c852:	461a      	mov	r2, r3
 800c854:	4553      	cmp	r3, sl
 800c856:	db2b      	blt.n	800c8b0 <__lshift+0x8c>
 800c858:	6920      	ldr	r0, [r4, #16]
 800c85a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c85e:	f104 0314 	add.w	r3, r4, #20
 800c862:	f016 021f 	ands.w	r2, r6, #31
 800c866:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c86a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c86e:	d025      	beq.n	800c8bc <__lshift+0x98>
 800c870:	f1c2 0e20 	rsb	lr, r2, #32
 800c874:	2000      	movs	r0, #0
 800c876:	681e      	ldr	r6, [r3, #0]
 800c878:	468a      	mov	sl, r1
 800c87a:	4096      	lsls	r6, r2
 800c87c:	4330      	orrs	r0, r6
 800c87e:	f84a 0b04 	str.w	r0, [sl], #4
 800c882:	f853 0b04 	ldr.w	r0, [r3], #4
 800c886:	459c      	cmp	ip, r3
 800c888:	fa20 f00e 	lsr.w	r0, r0, lr
 800c88c:	d814      	bhi.n	800c8b8 <__lshift+0x94>
 800c88e:	6048      	str	r0, [r1, #4]
 800c890:	b108      	cbz	r0, 800c896 <__lshift+0x72>
 800c892:	f109 0502 	add.w	r5, r9, #2
 800c896:	3d01      	subs	r5, #1
 800c898:	4638      	mov	r0, r7
 800c89a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c89e:	4621      	mov	r1, r4
 800c8a0:	f7ff fdf4 	bl	800c48c <_Bfree>
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8aa:	3101      	adds	r1, #1
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	e7c7      	b.n	800c840 <__lshift+0x1c>
 800c8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	e7cd      	b.n	800c854 <__lshift+0x30>
 800c8b8:	4651      	mov	r1, sl
 800c8ba:	e7dc      	b.n	800c876 <__lshift+0x52>
 800c8bc:	3904      	subs	r1, #4
 800c8be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8c6:	459c      	cmp	ip, r3
 800c8c8:	d8f9      	bhi.n	800c8be <__lshift+0x9a>
 800c8ca:	e7e4      	b.n	800c896 <__lshift+0x72>

0800c8cc <__mcmp>:
 800c8cc:	6903      	ldr	r3, [r0, #16]
 800c8ce:	690a      	ldr	r2, [r1, #16]
 800c8d0:	1a9b      	subs	r3, r3, r2
 800c8d2:	b530      	push	{r4, r5, lr}
 800c8d4:	d10c      	bne.n	800c8f0 <__mcmp+0x24>
 800c8d6:	0092      	lsls	r2, r2, #2
 800c8d8:	3014      	adds	r0, #20
 800c8da:	3114      	adds	r1, #20
 800c8dc:	1884      	adds	r4, r0, r2
 800c8de:	4411      	add	r1, r2
 800c8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8e8:	4295      	cmp	r5, r2
 800c8ea:	d003      	beq.n	800c8f4 <__mcmp+0x28>
 800c8ec:	d305      	bcc.n	800c8fa <__mcmp+0x2e>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	bd30      	pop	{r4, r5, pc}
 800c8f4:	42a0      	cmp	r0, r4
 800c8f6:	d3f3      	bcc.n	800c8e0 <__mcmp+0x14>
 800c8f8:	e7fa      	b.n	800c8f0 <__mcmp+0x24>
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fe:	e7f7      	b.n	800c8f0 <__mcmp+0x24>

0800c900 <__mdiff>:
 800c900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c904:	460d      	mov	r5, r1
 800c906:	4607      	mov	r7, r0
 800c908:	4611      	mov	r1, r2
 800c90a:	4628      	mov	r0, r5
 800c90c:	4614      	mov	r4, r2
 800c90e:	f7ff ffdd 	bl	800c8cc <__mcmp>
 800c912:	1e06      	subs	r6, r0, #0
 800c914:	d108      	bne.n	800c928 <__mdiff+0x28>
 800c916:	4631      	mov	r1, r6
 800c918:	4638      	mov	r0, r7
 800c91a:	f7ff fd83 	bl	800c424 <_Balloc>
 800c91e:	2301      	movs	r3, #1
 800c920:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c928:	bfa4      	itt	ge
 800c92a:	4623      	movge	r3, r4
 800c92c:	462c      	movge	r4, r5
 800c92e:	4638      	mov	r0, r7
 800c930:	6861      	ldr	r1, [r4, #4]
 800c932:	bfa6      	itte	ge
 800c934:	461d      	movge	r5, r3
 800c936:	2600      	movge	r6, #0
 800c938:	2601      	movlt	r6, #1
 800c93a:	f7ff fd73 	bl	800c424 <_Balloc>
 800c93e:	692b      	ldr	r3, [r5, #16]
 800c940:	60c6      	str	r6, [r0, #12]
 800c942:	6926      	ldr	r6, [r4, #16]
 800c944:	f105 0914 	add.w	r9, r5, #20
 800c948:	f104 0214 	add.w	r2, r4, #20
 800c94c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c950:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c954:	f100 0514 	add.w	r5, r0, #20
 800c958:	f04f 0e00 	mov.w	lr, #0
 800c95c:	f852 ab04 	ldr.w	sl, [r2], #4
 800c960:	f859 4b04 	ldr.w	r4, [r9], #4
 800c964:	fa1e f18a 	uxtah	r1, lr, sl
 800c968:	b2a3      	uxth	r3, r4
 800c96a:	1ac9      	subs	r1, r1, r3
 800c96c:	0c23      	lsrs	r3, r4, #16
 800c96e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c972:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c976:	b289      	uxth	r1, r1
 800c978:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c97c:	45c8      	cmp	r8, r9
 800c97e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c982:	4694      	mov	ip, r2
 800c984:	f845 3b04 	str.w	r3, [r5], #4
 800c988:	d8e8      	bhi.n	800c95c <__mdiff+0x5c>
 800c98a:	45bc      	cmp	ip, r7
 800c98c:	d304      	bcc.n	800c998 <__mdiff+0x98>
 800c98e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c992:	b183      	cbz	r3, 800c9b6 <__mdiff+0xb6>
 800c994:	6106      	str	r6, [r0, #16]
 800c996:	e7c5      	b.n	800c924 <__mdiff+0x24>
 800c998:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c99c:	fa1e f381 	uxtah	r3, lr, r1
 800c9a0:	141a      	asrs	r2, r3, #16
 800c9a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c9b0:	f845 3b04 	str.w	r3, [r5], #4
 800c9b4:	e7e9      	b.n	800c98a <__mdiff+0x8a>
 800c9b6:	3e01      	subs	r6, #1
 800c9b8:	e7e9      	b.n	800c98e <__mdiff+0x8e>
	...

0800c9bc <__ulp>:
 800c9bc:	4b12      	ldr	r3, [pc, #72]	; (800ca08 <__ulp+0x4c>)
 800c9be:	ee10 2a90 	vmov	r2, s1
 800c9c2:	401a      	ands	r2, r3
 800c9c4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	dd04      	ble.n	800c9d6 <__ulp+0x1a>
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	ec41 0b10 	vmov	d0, r0, r1
 800c9d4:	4770      	bx	lr
 800c9d6:	425b      	negs	r3, r3
 800c9d8:	151b      	asrs	r3, r3, #20
 800c9da:	2b13      	cmp	r3, #19
 800c9dc:	f04f 0000 	mov.w	r0, #0
 800c9e0:	f04f 0100 	mov.w	r1, #0
 800c9e4:	dc04      	bgt.n	800c9f0 <__ulp+0x34>
 800c9e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c9ea:	fa42 f103 	asr.w	r1, r2, r3
 800c9ee:	e7ef      	b.n	800c9d0 <__ulp+0x14>
 800c9f0:	3b14      	subs	r3, #20
 800c9f2:	2b1e      	cmp	r3, #30
 800c9f4:	f04f 0201 	mov.w	r2, #1
 800c9f8:	bfda      	itte	le
 800c9fa:	f1c3 031f 	rsble	r3, r3, #31
 800c9fe:	fa02 f303 	lslle.w	r3, r2, r3
 800ca02:	4613      	movgt	r3, r2
 800ca04:	4618      	mov	r0, r3
 800ca06:	e7e3      	b.n	800c9d0 <__ulp+0x14>
 800ca08:	7ff00000 	.word	0x7ff00000

0800ca0c <__b2d>:
 800ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0e:	6905      	ldr	r5, [r0, #16]
 800ca10:	f100 0714 	add.w	r7, r0, #20
 800ca14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ca18:	1f2e      	subs	r6, r5, #4
 800ca1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f7ff fdc4 	bl	800c5ac <__hi0bits>
 800ca24:	f1c0 0320 	rsb	r3, r0, #32
 800ca28:	280a      	cmp	r0, #10
 800ca2a:	600b      	str	r3, [r1, #0]
 800ca2c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800caa4 <__b2d+0x98>
 800ca30:	dc14      	bgt.n	800ca5c <__b2d+0x50>
 800ca32:	f1c0 0e0b 	rsb	lr, r0, #11
 800ca36:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca3a:	42b7      	cmp	r7, r6
 800ca3c:	ea41 030c 	orr.w	r3, r1, ip
 800ca40:	bf34      	ite	cc
 800ca42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca46:	2100      	movcs	r1, #0
 800ca48:	3015      	adds	r0, #21
 800ca4a:	fa04 f000 	lsl.w	r0, r4, r0
 800ca4e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca52:	ea40 0201 	orr.w	r2, r0, r1
 800ca56:	ec43 2b10 	vmov	d0, r2, r3
 800ca5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca5c:	42b7      	cmp	r7, r6
 800ca5e:	bf3a      	itte	cc
 800ca60:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca68:	2100      	movcs	r1, #0
 800ca6a:	380b      	subs	r0, #11
 800ca6c:	d015      	beq.n	800ca9a <__b2d+0x8e>
 800ca6e:	4084      	lsls	r4, r0
 800ca70:	f1c0 0520 	rsb	r5, r0, #32
 800ca74:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ca78:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ca7c:	42be      	cmp	r6, r7
 800ca7e:	fa21 fc05 	lsr.w	ip, r1, r5
 800ca82:	ea44 030c 	orr.w	r3, r4, ip
 800ca86:	bf8c      	ite	hi
 800ca88:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ca8c:	2400      	movls	r4, #0
 800ca8e:	fa01 f000 	lsl.w	r0, r1, r0
 800ca92:	40ec      	lsrs	r4, r5
 800ca94:	ea40 0204 	orr.w	r2, r0, r4
 800ca98:	e7dd      	b.n	800ca56 <__b2d+0x4a>
 800ca9a:	ea44 030c 	orr.w	r3, r4, ip
 800ca9e:	460a      	mov	r2, r1
 800caa0:	e7d9      	b.n	800ca56 <__b2d+0x4a>
 800caa2:	bf00      	nop
 800caa4:	3ff00000 	.word	0x3ff00000

0800caa8 <__d2b>:
 800caa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caac:	460e      	mov	r6, r1
 800caae:	2101      	movs	r1, #1
 800cab0:	ec59 8b10 	vmov	r8, r9, d0
 800cab4:	4615      	mov	r5, r2
 800cab6:	f7ff fcb5 	bl	800c424 <_Balloc>
 800caba:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cabe:	4607      	mov	r7, r0
 800cac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cac4:	bb34      	cbnz	r4, 800cb14 <__d2b+0x6c>
 800cac6:	9301      	str	r3, [sp, #4]
 800cac8:	f1b8 0300 	subs.w	r3, r8, #0
 800cacc:	d027      	beq.n	800cb1e <__d2b+0x76>
 800cace:	a802      	add	r0, sp, #8
 800cad0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cad4:	f7ff fd89 	bl	800c5ea <__lo0bits>
 800cad8:	9900      	ldr	r1, [sp, #0]
 800cada:	b1f0      	cbz	r0, 800cb1a <__d2b+0x72>
 800cadc:	9a01      	ldr	r2, [sp, #4]
 800cade:	f1c0 0320 	rsb	r3, r0, #32
 800cae2:	fa02 f303 	lsl.w	r3, r2, r3
 800cae6:	430b      	orrs	r3, r1
 800cae8:	40c2      	lsrs	r2, r0
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	9201      	str	r2, [sp, #4]
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	61bb      	str	r3, [r7, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	bf14      	ite	ne
 800caf6:	2102      	movne	r1, #2
 800caf8:	2101      	moveq	r1, #1
 800cafa:	6139      	str	r1, [r7, #16]
 800cafc:	b1c4      	cbz	r4, 800cb30 <__d2b+0x88>
 800cafe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cb02:	4404      	add	r4, r0
 800cb04:	6034      	str	r4, [r6, #0]
 800cb06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb0a:	6028      	str	r0, [r5, #0]
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	b003      	add	sp, #12
 800cb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb18:	e7d5      	b.n	800cac6 <__d2b+0x1e>
 800cb1a:	6179      	str	r1, [r7, #20]
 800cb1c:	e7e7      	b.n	800caee <__d2b+0x46>
 800cb1e:	a801      	add	r0, sp, #4
 800cb20:	f7ff fd63 	bl	800c5ea <__lo0bits>
 800cb24:	9b01      	ldr	r3, [sp, #4]
 800cb26:	617b      	str	r3, [r7, #20]
 800cb28:	2101      	movs	r1, #1
 800cb2a:	6139      	str	r1, [r7, #16]
 800cb2c:	3020      	adds	r0, #32
 800cb2e:	e7e5      	b.n	800cafc <__d2b+0x54>
 800cb30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cb34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb38:	6030      	str	r0, [r6, #0]
 800cb3a:	6918      	ldr	r0, [r3, #16]
 800cb3c:	f7ff fd36 	bl	800c5ac <__hi0bits>
 800cb40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cb44:	e7e1      	b.n	800cb0a <__d2b+0x62>

0800cb46 <__ratio>:
 800cb46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4a:	4688      	mov	r8, r1
 800cb4c:	4669      	mov	r1, sp
 800cb4e:	4681      	mov	r9, r0
 800cb50:	f7ff ff5c 	bl	800ca0c <__b2d>
 800cb54:	a901      	add	r1, sp, #4
 800cb56:	4640      	mov	r0, r8
 800cb58:	ec57 6b10 	vmov	r6, r7, d0
 800cb5c:	f7ff ff56 	bl	800ca0c <__b2d>
 800cb60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb68:	eba3 0c02 	sub.w	ip, r3, r2
 800cb6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb70:	1a9b      	subs	r3, r3, r2
 800cb72:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb76:	ec5b ab10 	vmov	sl, fp, d0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bfce      	itee	gt
 800cb7e:	463a      	movgt	r2, r7
 800cb80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb84:	465a      	movle	r2, fp
 800cb86:	4659      	mov	r1, fp
 800cb88:	463d      	mov	r5, r7
 800cb8a:	bfd4      	ite	le
 800cb8c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800cb90:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800cb94:	4630      	mov	r0, r6
 800cb96:	ee10 2a10 	vmov	r2, s0
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	f7f3 fe55 	bl	800084c <__aeabi_ddiv>
 800cba2:	ec41 0b10 	vmov	d0, r0, r1
 800cba6:	b003      	add	sp, #12
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbac <__copybits>:
 800cbac:	3901      	subs	r1, #1
 800cbae:	b510      	push	{r4, lr}
 800cbb0:	1149      	asrs	r1, r1, #5
 800cbb2:	6914      	ldr	r4, [r2, #16]
 800cbb4:	3101      	adds	r1, #1
 800cbb6:	f102 0314 	add.w	r3, r2, #20
 800cbba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cbbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbc2:	42a3      	cmp	r3, r4
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	d303      	bcc.n	800cbd0 <__copybits+0x24>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	428a      	cmp	r2, r1
 800cbcc:	d305      	bcc.n	800cbda <__copybits+0x2e>
 800cbce:	bd10      	pop	{r4, pc}
 800cbd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbd4:	f840 2b04 	str.w	r2, [r0], #4
 800cbd8:	e7f3      	b.n	800cbc2 <__copybits+0x16>
 800cbda:	f842 3b04 	str.w	r3, [r2], #4
 800cbde:	e7f4      	b.n	800cbca <__copybits+0x1e>

0800cbe0 <__any_on>:
 800cbe0:	f100 0214 	add.w	r2, r0, #20
 800cbe4:	6900      	ldr	r0, [r0, #16]
 800cbe6:	114b      	asrs	r3, r1, #5
 800cbe8:	4298      	cmp	r0, r3
 800cbea:	b510      	push	{r4, lr}
 800cbec:	db11      	blt.n	800cc12 <__any_on+0x32>
 800cbee:	dd0a      	ble.n	800cc06 <__any_on+0x26>
 800cbf0:	f011 011f 	ands.w	r1, r1, #31
 800cbf4:	d007      	beq.n	800cc06 <__any_on+0x26>
 800cbf6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbfa:	fa24 f001 	lsr.w	r0, r4, r1
 800cbfe:	fa00 f101 	lsl.w	r1, r0, r1
 800cc02:	428c      	cmp	r4, r1
 800cc04:	d10b      	bne.n	800cc1e <__any_on+0x3e>
 800cc06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d803      	bhi.n	800cc16 <__any_on+0x36>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	bd10      	pop	{r4, pc}
 800cc12:	4603      	mov	r3, r0
 800cc14:	e7f7      	b.n	800cc06 <__any_on+0x26>
 800cc16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	d0f5      	beq.n	800cc0a <__any_on+0x2a>
 800cc1e:	2001      	movs	r0, #1
 800cc20:	e7f6      	b.n	800cc10 <__any_on+0x30>

0800cc22 <_calloc_r>:
 800cc22:	b538      	push	{r3, r4, r5, lr}
 800cc24:	fb02 f401 	mul.w	r4, r2, r1
 800cc28:	4621      	mov	r1, r4
 800cc2a:	f000 f857 	bl	800ccdc <_malloc_r>
 800cc2e:	4605      	mov	r5, r0
 800cc30:	b118      	cbz	r0, 800cc3a <_calloc_r+0x18>
 800cc32:	4622      	mov	r2, r4
 800cc34:	2100      	movs	r1, #0
 800cc36:	f7fc fa26 	bl	8009086 <memset>
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800cc40 <_free_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4605      	mov	r5, r0
 800cc44:	2900      	cmp	r1, #0
 800cc46:	d045      	beq.n	800ccd4 <_free_r+0x94>
 800cc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc4c:	1f0c      	subs	r4, r1, #4
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	bfb8      	it	lt
 800cc52:	18e4      	addlt	r4, r4, r3
 800cc54:	f000 fc0f 	bl	800d476 <__malloc_lock>
 800cc58:	4a1f      	ldr	r2, [pc, #124]	; (800ccd8 <_free_r+0x98>)
 800cc5a:	6813      	ldr	r3, [r2, #0]
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	b933      	cbnz	r3, 800cc6e <_free_r+0x2e>
 800cc60:	6063      	str	r3, [r4, #4]
 800cc62:	6014      	str	r4, [r2, #0]
 800cc64:	4628      	mov	r0, r5
 800cc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc6a:	f000 bc05 	b.w	800d478 <__malloc_unlock>
 800cc6e:	42a3      	cmp	r3, r4
 800cc70:	d90c      	bls.n	800cc8c <_free_r+0x4c>
 800cc72:	6821      	ldr	r1, [r4, #0]
 800cc74:	1862      	adds	r2, r4, r1
 800cc76:	4293      	cmp	r3, r2
 800cc78:	bf04      	itt	eq
 800cc7a:	681a      	ldreq	r2, [r3, #0]
 800cc7c:	685b      	ldreq	r3, [r3, #4]
 800cc7e:	6063      	str	r3, [r4, #4]
 800cc80:	bf04      	itt	eq
 800cc82:	1852      	addeq	r2, r2, r1
 800cc84:	6022      	streq	r2, [r4, #0]
 800cc86:	6004      	str	r4, [r0, #0]
 800cc88:	e7ec      	b.n	800cc64 <_free_r+0x24>
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	b10a      	cbz	r2, 800cc94 <_free_r+0x54>
 800cc90:	42a2      	cmp	r2, r4
 800cc92:	d9fa      	bls.n	800cc8a <_free_r+0x4a>
 800cc94:	6819      	ldr	r1, [r3, #0]
 800cc96:	1858      	adds	r0, r3, r1
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d10b      	bne.n	800ccb4 <_free_r+0x74>
 800cc9c:	6820      	ldr	r0, [r4, #0]
 800cc9e:	4401      	add	r1, r0
 800cca0:	1858      	adds	r0, r3, r1
 800cca2:	4282      	cmp	r2, r0
 800cca4:	6019      	str	r1, [r3, #0]
 800cca6:	d1dd      	bne.n	800cc64 <_free_r+0x24>
 800cca8:	6810      	ldr	r0, [r2, #0]
 800ccaa:	6852      	ldr	r2, [r2, #4]
 800ccac:	605a      	str	r2, [r3, #4]
 800ccae:	4401      	add	r1, r0
 800ccb0:	6019      	str	r1, [r3, #0]
 800ccb2:	e7d7      	b.n	800cc64 <_free_r+0x24>
 800ccb4:	d902      	bls.n	800ccbc <_free_r+0x7c>
 800ccb6:	230c      	movs	r3, #12
 800ccb8:	602b      	str	r3, [r5, #0]
 800ccba:	e7d3      	b.n	800cc64 <_free_r+0x24>
 800ccbc:	6820      	ldr	r0, [r4, #0]
 800ccbe:	1821      	adds	r1, r4, r0
 800ccc0:	428a      	cmp	r2, r1
 800ccc2:	bf04      	itt	eq
 800ccc4:	6811      	ldreq	r1, [r2, #0]
 800ccc6:	6852      	ldreq	r2, [r2, #4]
 800ccc8:	6062      	str	r2, [r4, #4]
 800ccca:	bf04      	itt	eq
 800cccc:	1809      	addeq	r1, r1, r0
 800ccce:	6021      	streq	r1, [r4, #0]
 800ccd0:	605c      	str	r4, [r3, #4]
 800ccd2:	e7c7      	b.n	800cc64 <_free_r+0x24>
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20000200 	.word	0x20000200

0800ccdc <_malloc_r>:
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	1ccd      	adds	r5, r1, #3
 800cce0:	f025 0503 	bic.w	r5, r5, #3
 800cce4:	3508      	adds	r5, #8
 800cce6:	2d0c      	cmp	r5, #12
 800cce8:	bf38      	it	cc
 800ccea:	250c      	movcc	r5, #12
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	4606      	mov	r6, r0
 800ccf0:	db01      	blt.n	800ccf6 <_malloc_r+0x1a>
 800ccf2:	42a9      	cmp	r1, r5
 800ccf4:	d903      	bls.n	800ccfe <_malloc_r+0x22>
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	6033      	str	r3, [r6, #0]
 800ccfa:	2000      	movs	r0, #0
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	f000 fbba 	bl	800d476 <__malloc_lock>
 800cd02:	4a21      	ldr	r2, [pc, #132]	; (800cd88 <_malloc_r+0xac>)
 800cd04:	6814      	ldr	r4, [r2, #0]
 800cd06:	4621      	mov	r1, r4
 800cd08:	b991      	cbnz	r1, 800cd30 <_malloc_r+0x54>
 800cd0a:	4c20      	ldr	r4, [pc, #128]	; (800cd8c <_malloc_r+0xb0>)
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	b91b      	cbnz	r3, 800cd18 <_malloc_r+0x3c>
 800cd10:	4630      	mov	r0, r6
 800cd12:	f000 facf 	bl	800d2b4 <_sbrk_r>
 800cd16:	6020      	str	r0, [r4, #0]
 800cd18:	4629      	mov	r1, r5
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	f000 faca 	bl	800d2b4 <_sbrk_r>
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	d124      	bne.n	800cd6e <_malloc_r+0x92>
 800cd24:	230c      	movs	r3, #12
 800cd26:	6033      	str	r3, [r6, #0]
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f000 fba5 	bl	800d478 <__malloc_unlock>
 800cd2e:	e7e4      	b.n	800ccfa <_malloc_r+0x1e>
 800cd30:	680b      	ldr	r3, [r1, #0]
 800cd32:	1b5b      	subs	r3, r3, r5
 800cd34:	d418      	bmi.n	800cd68 <_malloc_r+0x8c>
 800cd36:	2b0b      	cmp	r3, #11
 800cd38:	d90f      	bls.n	800cd5a <_malloc_r+0x7e>
 800cd3a:	600b      	str	r3, [r1, #0]
 800cd3c:	50cd      	str	r5, [r1, r3]
 800cd3e:	18cc      	adds	r4, r1, r3
 800cd40:	4630      	mov	r0, r6
 800cd42:	f000 fb99 	bl	800d478 <__malloc_unlock>
 800cd46:	f104 000b 	add.w	r0, r4, #11
 800cd4a:	1d23      	adds	r3, r4, #4
 800cd4c:	f020 0007 	bic.w	r0, r0, #7
 800cd50:	1ac3      	subs	r3, r0, r3
 800cd52:	d0d3      	beq.n	800ccfc <_malloc_r+0x20>
 800cd54:	425a      	negs	r2, r3
 800cd56:	50e2      	str	r2, [r4, r3]
 800cd58:	e7d0      	b.n	800ccfc <_malloc_r+0x20>
 800cd5a:	428c      	cmp	r4, r1
 800cd5c:	684b      	ldr	r3, [r1, #4]
 800cd5e:	bf16      	itet	ne
 800cd60:	6063      	strne	r3, [r4, #4]
 800cd62:	6013      	streq	r3, [r2, #0]
 800cd64:	460c      	movne	r4, r1
 800cd66:	e7eb      	b.n	800cd40 <_malloc_r+0x64>
 800cd68:	460c      	mov	r4, r1
 800cd6a:	6849      	ldr	r1, [r1, #4]
 800cd6c:	e7cc      	b.n	800cd08 <_malloc_r+0x2c>
 800cd6e:	1cc4      	adds	r4, r0, #3
 800cd70:	f024 0403 	bic.w	r4, r4, #3
 800cd74:	42a0      	cmp	r0, r4
 800cd76:	d005      	beq.n	800cd84 <_malloc_r+0xa8>
 800cd78:	1a21      	subs	r1, r4, r0
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f000 fa9a 	bl	800d2b4 <_sbrk_r>
 800cd80:	3001      	adds	r0, #1
 800cd82:	d0cf      	beq.n	800cd24 <_malloc_r+0x48>
 800cd84:	6025      	str	r5, [r4, #0]
 800cd86:	e7db      	b.n	800cd40 <_malloc_r+0x64>
 800cd88:	20000200 	.word	0x20000200
 800cd8c:	20000204 	.word	0x20000204

0800cd90 <__ssputs_r>:
 800cd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd94:	688e      	ldr	r6, [r1, #8]
 800cd96:	429e      	cmp	r6, r3
 800cd98:	4682      	mov	sl, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	4690      	mov	r8, r2
 800cd9e:	4699      	mov	r9, r3
 800cda0:	d837      	bhi.n	800ce12 <__ssputs_r+0x82>
 800cda2:	898a      	ldrh	r2, [r1, #12]
 800cda4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cda8:	d031      	beq.n	800ce0e <__ssputs_r+0x7e>
 800cdaa:	6825      	ldr	r5, [r4, #0]
 800cdac:	6909      	ldr	r1, [r1, #16]
 800cdae:	1a6f      	subs	r7, r5, r1
 800cdb0:	6965      	ldr	r5, [r4, #20]
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdb8:	fb95 f5f3 	sdiv	r5, r5, r3
 800cdbc:	f109 0301 	add.w	r3, r9, #1
 800cdc0:	443b      	add	r3, r7
 800cdc2:	429d      	cmp	r5, r3
 800cdc4:	bf38      	it	cc
 800cdc6:	461d      	movcc	r5, r3
 800cdc8:	0553      	lsls	r3, r2, #21
 800cdca:	d530      	bpl.n	800ce2e <__ssputs_r+0x9e>
 800cdcc:	4629      	mov	r1, r5
 800cdce:	f7ff ff85 	bl	800ccdc <_malloc_r>
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	b950      	cbnz	r0, 800cdec <__ssputs_r+0x5c>
 800cdd6:	230c      	movs	r3, #12
 800cdd8:	f8ca 3000 	str.w	r3, [sl]
 800cddc:	89a3      	ldrh	r3, [r4, #12]
 800cdde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	f04f 30ff 	mov.w	r0, #4294967295
 800cde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdec:	463a      	mov	r2, r7
 800cdee:	6921      	ldr	r1, [r4, #16]
 800cdf0:	f7fc f93e 	bl	8009070 <memcpy>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfe:	81a3      	strh	r3, [r4, #12]
 800ce00:	6126      	str	r6, [r4, #16]
 800ce02:	6165      	str	r5, [r4, #20]
 800ce04:	443e      	add	r6, r7
 800ce06:	1bed      	subs	r5, r5, r7
 800ce08:	6026      	str	r6, [r4, #0]
 800ce0a:	60a5      	str	r5, [r4, #8]
 800ce0c:	464e      	mov	r6, r9
 800ce0e:	454e      	cmp	r6, r9
 800ce10:	d900      	bls.n	800ce14 <__ssputs_r+0x84>
 800ce12:	464e      	mov	r6, r9
 800ce14:	4632      	mov	r2, r6
 800ce16:	4641      	mov	r1, r8
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	f000 fb13 	bl	800d444 <memmove>
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	1b9b      	subs	r3, r3, r6
 800ce22:	60a3      	str	r3, [r4, #8]
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	441e      	add	r6, r3
 800ce28:	6026      	str	r6, [r4, #0]
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e7dc      	b.n	800cde8 <__ssputs_r+0x58>
 800ce2e:	462a      	mov	r2, r5
 800ce30:	f000 fb23 	bl	800d47a <_realloc_r>
 800ce34:	4606      	mov	r6, r0
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d1e2      	bne.n	800ce00 <__ssputs_r+0x70>
 800ce3a:	6921      	ldr	r1, [r4, #16]
 800ce3c:	4650      	mov	r0, sl
 800ce3e:	f7ff feff 	bl	800cc40 <_free_r>
 800ce42:	e7c8      	b.n	800cdd6 <__ssputs_r+0x46>

0800ce44 <_svfiprintf_r>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	461d      	mov	r5, r3
 800ce4a:	898b      	ldrh	r3, [r1, #12]
 800ce4c:	061f      	lsls	r7, r3, #24
 800ce4e:	b09d      	sub	sp, #116	; 0x74
 800ce50:	4680      	mov	r8, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	4616      	mov	r6, r2
 800ce56:	d50f      	bpl.n	800ce78 <_svfiprintf_r+0x34>
 800ce58:	690b      	ldr	r3, [r1, #16]
 800ce5a:	b96b      	cbnz	r3, 800ce78 <_svfiprintf_r+0x34>
 800ce5c:	2140      	movs	r1, #64	; 0x40
 800ce5e:	f7ff ff3d 	bl	800ccdc <_malloc_r>
 800ce62:	6020      	str	r0, [r4, #0]
 800ce64:	6120      	str	r0, [r4, #16]
 800ce66:	b928      	cbnz	r0, 800ce74 <_svfiprintf_r+0x30>
 800ce68:	230c      	movs	r3, #12
 800ce6a:	f8c8 3000 	str.w	r3, [r8]
 800ce6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce72:	e0c8      	b.n	800d006 <_svfiprintf_r+0x1c2>
 800ce74:	2340      	movs	r3, #64	; 0x40
 800ce76:	6163      	str	r3, [r4, #20]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7c:	2320      	movs	r3, #32
 800ce7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce82:	2330      	movs	r3, #48	; 0x30
 800ce84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce88:	9503      	str	r5, [sp, #12]
 800ce8a:	f04f 0b01 	mov.w	fp, #1
 800ce8e:	4637      	mov	r7, r6
 800ce90:	463d      	mov	r5, r7
 800ce92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ce96:	b10b      	cbz	r3, 800ce9c <_svfiprintf_r+0x58>
 800ce98:	2b25      	cmp	r3, #37	; 0x25
 800ce9a:	d13e      	bne.n	800cf1a <_svfiprintf_r+0xd6>
 800ce9c:	ebb7 0a06 	subs.w	sl, r7, r6
 800cea0:	d00b      	beq.n	800ceba <_svfiprintf_r+0x76>
 800cea2:	4653      	mov	r3, sl
 800cea4:	4632      	mov	r2, r6
 800cea6:	4621      	mov	r1, r4
 800cea8:	4640      	mov	r0, r8
 800ceaa:	f7ff ff71 	bl	800cd90 <__ssputs_r>
 800ceae:	3001      	adds	r0, #1
 800ceb0:	f000 80a4 	beq.w	800cffc <_svfiprintf_r+0x1b8>
 800ceb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb6:	4453      	add	r3, sl
 800ceb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceba:	783b      	ldrb	r3, [r7, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 809d 	beq.w	800cffc <_svfiprintf_r+0x1b8>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295
 800cec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cecc:	9304      	str	r3, [sp, #16]
 800cece:	9307      	str	r3, [sp, #28]
 800ced0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ced4:	931a      	str	r3, [sp, #104]	; 0x68
 800ced6:	462f      	mov	r7, r5
 800ced8:	2205      	movs	r2, #5
 800ceda:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cede:	4850      	ldr	r0, [pc, #320]	; (800d020 <_svfiprintf_r+0x1dc>)
 800cee0:	f7f3 f97e 	bl	80001e0 <memchr>
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	b9d0      	cbnz	r0, 800cf1e <_svfiprintf_r+0xda>
 800cee8:	06d9      	lsls	r1, r3, #27
 800ceea:	bf44      	itt	mi
 800ceec:	2220      	movmi	r2, #32
 800ceee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cef2:	071a      	lsls	r2, r3, #28
 800cef4:	bf44      	itt	mi
 800cef6:	222b      	movmi	r2, #43	; 0x2b
 800cef8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cefc:	782a      	ldrb	r2, [r5, #0]
 800cefe:	2a2a      	cmp	r2, #42	; 0x2a
 800cf00:	d015      	beq.n	800cf2e <_svfiprintf_r+0xea>
 800cf02:	9a07      	ldr	r2, [sp, #28]
 800cf04:	462f      	mov	r7, r5
 800cf06:	2000      	movs	r0, #0
 800cf08:	250a      	movs	r5, #10
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf10:	3b30      	subs	r3, #48	; 0x30
 800cf12:	2b09      	cmp	r3, #9
 800cf14:	d94d      	bls.n	800cfb2 <_svfiprintf_r+0x16e>
 800cf16:	b1b8      	cbz	r0, 800cf48 <_svfiprintf_r+0x104>
 800cf18:	e00f      	b.n	800cf3a <_svfiprintf_r+0xf6>
 800cf1a:	462f      	mov	r7, r5
 800cf1c:	e7b8      	b.n	800ce90 <_svfiprintf_r+0x4c>
 800cf1e:	4a40      	ldr	r2, [pc, #256]	; (800d020 <_svfiprintf_r+0x1dc>)
 800cf20:	1a80      	subs	r0, r0, r2
 800cf22:	fa0b f000 	lsl.w	r0, fp, r0
 800cf26:	4318      	orrs	r0, r3
 800cf28:	9004      	str	r0, [sp, #16]
 800cf2a:	463d      	mov	r5, r7
 800cf2c:	e7d3      	b.n	800ced6 <_svfiprintf_r+0x92>
 800cf2e:	9a03      	ldr	r2, [sp, #12]
 800cf30:	1d11      	adds	r1, r2, #4
 800cf32:	6812      	ldr	r2, [r2, #0]
 800cf34:	9103      	str	r1, [sp, #12]
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	db01      	blt.n	800cf3e <_svfiprintf_r+0xfa>
 800cf3a:	9207      	str	r2, [sp, #28]
 800cf3c:	e004      	b.n	800cf48 <_svfiprintf_r+0x104>
 800cf3e:	4252      	negs	r2, r2
 800cf40:	f043 0302 	orr.w	r3, r3, #2
 800cf44:	9207      	str	r2, [sp, #28]
 800cf46:	9304      	str	r3, [sp, #16]
 800cf48:	783b      	ldrb	r3, [r7, #0]
 800cf4a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf4c:	d10c      	bne.n	800cf68 <_svfiprintf_r+0x124>
 800cf4e:	787b      	ldrb	r3, [r7, #1]
 800cf50:	2b2a      	cmp	r3, #42	; 0x2a
 800cf52:	d133      	bne.n	800cfbc <_svfiprintf_r+0x178>
 800cf54:	9b03      	ldr	r3, [sp, #12]
 800cf56:	1d1a      	adds	r2, r3, #4
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	9203      	str	r2, [sp, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	bfb8      	it	lt
 800cf60:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf64:	3702      	adds	r7, #2
 800cf66:	9305      	str	r3, [sp, #20]
 800cf68:	4d2e      	ldr	r5, [pc, #184]	; (800d024 <_svfiprintf_r+0x1e0>)
 800cf6a:	7839      	ldrb	r1, [r7, #0]
 800cf6c:	2203      	movs	r2, #3
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f7f3 f936 	bl	80001e0 <memchr>
 800cf74:	b138      	cbz	r0, 800cf86 <_svfiprintf_r+0x142>
 800cf76:	2340      	movs	r3, #64	; 0x40
 800cf78:	1b40      	subs	r0, r0, r5
 800cf7a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf7e:	9b04      	ldr	r3, [sp, #16]
 800cf80:	4303      	orrs	r3, r0
 800cf82:	3701      	adds	r7, #1
 800cf84:	9304      	str	r3, [sp, #16]
 800cf86:	7839      	ldrb	r1, [r7, #0]
 800cf88:	4827      	ldr	r0, [pc, #156]	; (800d028 <_svfiprintf_r+0x1e4>)
 800cf8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf8e:	2206      	movs	r2, #6
 800cf90:	1c7e      	adds	r6, r7, #1
 800cf92:	f7f3 f925 	bl	80001e0 <memchr>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d038      	beq.n	800d00c <_svfiprintf_r+0x1c8>
 800cf9a:	4b24      	ldr	r3, [pc, #144]	; (800d02c <_svfiprintf_r+0x1e8>)
 800cf9c:	bb13      	cbnz	r3, 800cfe4 <_svfiprintf_r+0x1a0>
 800cf9e:	9b03      	ldr	r3, [sp, #12]
 800cfa0:	3307      	adds	r3, #7
 800cfa2:	f023 0307 	bic.w	r3, r3, #7
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	9303      	str	r3, [sp, #12]
 800cfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfac:	444b      	add	r3, r9
 800cfae:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb0:	e76d      	b.n	800ce8e <_svfiprintf_r+0x4a>
 800cfb2:	fb05 3202 	mla	r2, r5, r2, r3
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	460f      	mov	r7, r1
 800cfba:	e7a6      	b.n	800cf0a <_svfiprintf_r+0xc6>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	3701      	adds	r7, #1
 800cfc0:	9305      	str	r3, [sp, #20]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	250a      	movs	r5, #10
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfcc:	3a30      	subs	r2, #48	; 0x30
 800cfce:	2a09      	cmp	r2, #9
 800cfd0:	d903      	bls.n	800cfda <_svfiprintf_r+0x196>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0c8      	beq.n	800cf68 <_svfiprintf_r+0x124>
 800cfd6:	9105      	str	r1, [sp, #20]
 800cfd8:	e7c6      	b.n	800cf68 <_svfiprintf_r+0x124>
 800cfda:	fb05 2101 	mla	r1, r5, r1, r2
 800cfde:	2301      	movs	r3, #1
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	e7f0      	b.n	800cfc6 <_svfiprintf_r+0x182>
 800cfe4:	ab03      	add	r3, sp, #12
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	4622      	mov	r2, r4
 800cfea:	4b11      	ldr	r3, [pc, #68]	; (800d030 <_svfiprintf_r+0x1ec>)
 800cfec:	a904      	add	r1, sp, #16
 800cfee:	4640      	mov	r0, r8
 800cff0:	f7fc f8e6 	bl	80091c0 <_printf_float>
 800cff4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cff8:	4681      	mov	r9, r0
 800cffa:	d1d6      	bne.n	800cfaa <_svfiprintf_r+0x166>
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	065b      	lsls	r3, r3, #25
 800d000:	f53f af35 	bmi.w	800ce6e <_svfiprintf_r+0x2a>
 800d004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d006:	b01d      	add	sp, #116	; 0x74
 800d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00c:	ab03      	add	r3, sp, #12
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	4622      	mov	r2, r4
 800d012:	4b07      	ldr	r3, [pc, #28]	; (800d030 <_svfiprintf_r+0x1ec>)
 800d014:	a904      	add	r1, sp, #16
 800d016:	4640      	mov	r0, r8
 800d018:	f7fc fb88 	bl	800972c <_printf_i>
 800d01c:	e7ea      	b.n	800cff4 <_svfiprintf_r+0x1b0>
 800d01e:	bf00      	nop
 800d020:	0800da6c 	.word	0x0800da6c
 800d024:	0800da72 	.word	0x0800da72
 800d028:	0800da76 	.word	0x0800da76
 800d02c:	080091c1 	.word	0x080091c1
 800d030:	0800cd91 	.word	0x0800cd91

0800d034 <__sfputc_r>:
 800d034:	6893      	ldr	r3, [r2, #8]
 800d036:	3b01      	subs	r3, #1
 800d038:	2b00      	cmp	r3, #0
 800d03a:	b410      	push	{r4}
 800d03c:	6093      	str	r3, [r2, #8]
 800d03e:	da08      	bge.n	800d052 <__sfputc_r+0x1e>
 800d040:	6994      	ldr	r4, [r2, #24]
 800d042:	42a3      	cmp	r3, r4
 800d044:	db01      	blt.n	800d04a <__sfputc_r+0x16>
 800d046:	290a      	cmp	r1, #10
 800d048:	d103      	bne.n	800d052 <__sfputc_r+0x1e>
 800d04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d04e:	f7fd bdb1 	b.w	800abb4 <__swbuf_r>
 800d052:	6813      	ldr	r3, [r2, #0]
 800d054:	1c58      	adds	r0, r3, #1
 800d056:	6010      	str	r0, [r2, #0]
 800d058:	7019      	strb	r1, [r3, #0]
 800d05a:	4608      	mov	r0, r1
 800d05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <__sfputs_r>:
 800d062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d064:	4606      	mov	r6, r0
 800d066:	460f      	mov	r7, r1
 800d068:	4614      	mov	r4, r2
 800d06a:	18d5      	adds	r5, r2, r3
 800d06c:	42ac      	cmp	r4, r5
 800d06e:	d101      	bne.n	800d074 <__sfputs_r+0x12>
 800d070:	2000      	movs	r0, #0
 800d072:	e007      	b.n	800d084 <__sfputs_r+0x22>
 800d074:	463a      	mov	r2, r7
 800d076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07a:	4630      	mov	r0, r6
 800d07c:	f7ff ffda 	bl	800d034 <__sfputc_r>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d1f3      	bne.n	800d06c <__sfputs_r+0xa>
 800d084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d088 <_vfiprintf_r>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	460c      	mov	r4, r1
 800d08e:	b09d      	sub	sp, #116	; 0x74
 800d090:	4617      	mov	r7, r2
 800d092:	461d      	mov	r5, r3
 800d094:	4606      	mov	r6, r0
 800d096:	b118      	cbz	r0, 800d0a0 <_vfiprintf_r+0x18>
 800d098:	6983      	ldr	r3, [r0, #24]
 800d09a:	b90b      	cbnz	r3, 800d0a0 <_vfiprintf_r+0x18>
 800d09c:	f7fe fd80 	bl	800bba0 <__sinit>
 800d0a0:	4b7c      	ldr	r3, [pc, #496]	; (800d294 <_vfiprintf_r+0x20c>)
 800d0a2:	429c      	cmp	r4, r3
 800d0a4:	d158      	bne.n	800d158 <_vfiprintf_r+0xd0>
 800d0a6:	6874      	ldr	r4, [r6, #4]
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	0718      	lsls	r0, r3, #28
 800d0ac:	d55e      	bpl.n	800d16c <_vfiprintf_r+0xe4>
 800d0ae:	6923      	ldr	r3, [r4, #16]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d05b      	beq.n	800d16c <_vfiprintf_r+0xe4>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b8:	2320      	movs	r3, #32
 800d0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0be:	2330      	movs	r3, #48	; 0x30
 800d0c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0c4:	9503      	str	r5, [sp, #12]
 800d0c6:	f04f 0b01 	mov.w	fp, #1
 800d0ca:	46b8      	mov	r8, r7
 800d0cc:	4645      	mov	r5, r8
 800d0ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d0d2:	b10b      	cbz	r3, 800d0d8 <_vfiprintf_r+0x50>
 800d0d4:	2b25      	cmp	r3, #37	; 0x25
 800d0d6:	d154      	bne.n	800d182 <_vfiprintf_r+0xfa>
 800d0d8:	ebb8 0a07 	subs.w	sl, r8, r7
 800d0dc:	d00b      	beq.n	800d0f6 <_vfiprintf_r+0x6e>
 800d0de:	4653      	mov	r3, sl
 800d0e0:	463a      	mov	r2, r7
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	f7ff ffbc 	bl	800d062 <__sfputs_r>
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	f000 80c2 	beq.w	800d274 <_vfiprintf_r+0x1ec>
 800d0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f2:	4453      	add	r3, sl
 800d0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f6:	f898 3000 	ldrb.w	r3, [r8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 80ba 	beq.w	800d274 <_vfiprintf_r+0x1ec>
 800d100:	2300      	movs	r3, #0
 800d102:	f04f 32ff 	mov.w	r2, #4294967295
 800d106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d10a:	9304      	str	r3, [sp, #16]
 800d10c:	9307      	str	r3, [sp, #28]
 800d10e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d112:	931a      	str	r3, [sp, #104]	; 0x68
 800d114:	46a8      	mov	r8, r5
 800d116:	2205      	movs	r2, #5
 800d118:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d11c:	485e      	ldr	r0, [pc, #376]	; (800d298 <_vfiprintf_r+0x210>)
 800d11e:	f7f3 f85f 	bl	80001e0 <memchr>
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	bb78      	cbnz	r0, 800d186 <_vfiprintf_r+0xfe>
 800d126:	06d9      	lsls	r1, r3, #27
 800d128:	bf44      	itt	mi
 800d12a:	2220      	movmi	r2, #32
 800d12c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d130:	071a      	lsls	r2, r3, #28
 800d132:	bf44      	itt	mi
 800d134:	222b      	movmi	r2, #43	; 0x2b
 800d136:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d13a:	782a      	ldrb	r2, [r5, #0]
 800d13c:	2a2a      	cmp	r2, #42	; 0x2a
 800d13e:	d02a      	beq.n	800d196 <_vfiprintf_r+0x10e>
 800d140:	9a07      	ldr	r2, [sp, #28]
 800d142:	46a8      	mov	r8, r5
 800d144:	2000      	movs	r0, #0
 800d146:	250a      	movs	r5, #10
 800d148:	4641      	mov	r1, r8
 800d14a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d14e:	3b30      	subs	r3, #48	; 0x30
 800d150:	2b09      	cmp	r3, #9
 800d152:	d969      	bls.n	800d228 <_vfiprintf_r+0x1a0>
 800d154:	b360      	cbz	r0, 800d1b0 <_vfiprintf_r+0x128>
 800d156:	e024      	b.n	800d1a2 <_vfiprintf_r+0x11a>
 800d158:	4b50      	ldr	r3, [pc, #320]	; (800d29c <_vfiprintf_r+0x214>)
 800d15a:	429c      	cmp	r4, r3
 800d15c:	d101      	bne.n	800d162 <_vfiprintf_r+0xda>
 800d15e:	68b4      	ldr	r4, [r6, #8]
 800d160:	e7a2      	b.n	800d0a8 <_vfiprintf_r+0x20>
 800d162:	4b4f      	ldr	r3, [pc, #316]	; (800d2a0 <_vfiprintf_r+0x218>)
 800d164:	429c      	cmp	r4, r3
 800d166:	bf08      	it	eq
 800d168:	68f4      	ldreq	r4, [r6, #12]
 800d16a:	e79d      	b.n	800d0a8 <_vfiprintf_r+0x20>
 800d16c:	4621      	mov	r1, r4
 800d16e:	4630      	mov	r0, r6
 800d170:	f7fd fd72 	bl	800ac58 <__swsetup_r>
 800d174:	2800      	cmp	r0, #0
 800d176:	d09d      	beq.n	800d0b4 <_vfiprintf_r+0x2c>
 800d178:	f04f 30ff 	mov.w	r0, #4294967295
 800d17c:	b01d      	add	sp, #116	; 0x74
 800d17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d182:	46a8      	mov	r8, r5
 800d184:	e7a2      	b.n	800d0cc <_vfiprintf_r+0x44>
 800d186:	4a44      	ldr	r2, [pc, #272]	; (800d298 <_vfiprintf_r+0x210>)
 800d188:	1a80      	subs	r0, r0, r2
 800d18a:	fa0b f000 	lsl.w	r0, fp, r0
 800d18e:	4318      	orrs	r0, r3
 800d190:	9004      	str	r0, [sp, #16]
 800d192:	4645      	mov	r5, r8
 800d194:	e7be      	b.n	800d114 <_vfiprintf_r+0x8c>
 800d196:	9a03      	ldr	r2, [sp, #12]
 800d198:	1d11      	adds	r1, r2, #4
 800d19a:	6812      	ldr	r2, [r2, #0]
 800d19c:	9103      	str	r1, [sp, #12]
 800d19e:	2a00      	cmp	r2, #0
 800d1a0:	db01      	blt.n	800d1a6 <_vfiprintf_r+0x11e>
 800d1a2:	9207      	str	r2, [sp, #28]
 800d1a4:	e004      	b.n	800d1b0 <_vfiprintf_r+0x128>
 800d1a6:	4252      	negs	r2, r2
 800d1a8:	f043 0302 	orr.w	r3, r3, #2
 800d1ac:	9207      	str	r2, [sp, #28]
 800d1ae:	9304      	str	r3, [sp, #16]
 800d1b0:	f898 3000 	ldrb.w	r3, [r8]
 800d1b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d1b6:	d10e      	bne.n	800d1d6 <_vfiprintf_r+0x14e>
 800d1b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800d1be:	d138      	bne.n	800d232 <_vfiprintf_r+0x1aa>
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	1d1a      	adds	r2, r3, #4
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	9203      	str	r2, [sp, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	bfb8      	it	lt
 800d1cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1d0:	f108 0802 	add.w	r8, r8, #2
 800d1d4:	9305      	str	r3, [sp, #20]
 800d1d6:	4d33      	ldr	r5, [pc, #204]	; (800d2a4 <_vfiprintf_r+0x21c>)
 800d1d8:	f898 1000 	ldrb.w	r1, [r8]
 800d1dc:	2203      	movs	r2, #3
 800d1de:	4628      	mov	r0, r5
 800d1e0:	f7f2 fffe 	bl	80001e0 <memchr>
 800d1e4:	b140      	cbz	r0, 800d1f8 <_vfiprintf_r+0x170>
 800d1e6:	2340      	movs	r3, #64	; 0x40
 800d1e8:	1b40      	subs	r0, r0, r5
 800d1ea:	fa03 f000 	lsl.w	r0, r3, r0
 800d1ee:	9b04      	ldr	r3, [sp, #16]
 800d1f0:	4303      	orrs	r3, r0
 800d1f2:	f108 0801 	add.w	r8, r8, #1
 800d1f6:	9304      	str	r3, [sp, #16]
 800d1f8:	f898 1000 	ldrb.w	r1, [r8]
 800d1fc:	482a      	ldr	r0, [pc, #168]	; (800d2a8 <_vfiprintf_r+0x220>)
 800d1fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d202:	2206      	movs	r2, #6
 800d204:	f108 0701 	add.w	r7, r8, #1
 800d208:	f7f2 ffea 	bl	80001e0 <memchr>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d037      	beq.n	800d280 <_vfiprintf_r+0x1f8>
 800d210:	4b26      	ldr	r3, [pc, #152]	; (800d2ac <_vfiprintf_r+0x224>)
 800d212:	bb1b      	cbnz	r3, 800d25c <_vfiprintf_r+0x1d4>
 800d214:	9b03      	ldr	r3, [sp, #12]
 800d216:	3307      	adds	r3, #7
 800d218:	f023 0307 	bic.w	r3, r3, #7
 800d21c:	3308      	adds	r3, #8
 800d21e:	9303      	str	r3, [sp, #12]
 800d220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d222:	444b      	add	r3, r9
 800d224:	9309      	str	r3, [sp, #36]	; 0x24
 800d226:	e750      	b.n	800d0ca <_vfiprintf_r+0x42>
 800d228:	fb05 3202 	mla	r2, r5, r2, r3
 800d22c:	2001      	movs	r0, #1
 800d22e:	4688      	mov	r8, r1
 800d230:	e78a      	b.n	800d148 <_vfiprintf_r+0xc0>
 800d232:	2300      	movs	r3, #0
 800d234:	f108 0801 	add.w	r8, r8, #1
 800d238:	9305      	str	r3, [sp, #20]
 800d23a:	4619      	mov	r1, r3
 800d23c:	250a      	movs	r5, #10
 800d23e:	4640      	mov	r0, r8
 800d240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d244:	3a30      	subs	r2, #48	; 0x30
 800d246:	2a09      	cmp	r2, #9
 800d248:	d903      	bls.n	800d252 <_vfiprintf_r+0x1ca>
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0c3      	beq.n	800d1d6 <_vfiprintf_r+0x14e>
 800d24e:	9105      	str	r1, [sp, #20]
 800d250:	e7c1      	b.n	800d1d6 <_vfiprintf_r+0x14e>
 800d252:	fb05 2101 	mla	r1, r5, r1, r2
 800d256:	2301      	movs	r3, #1
 800d258:	4680      	mov	r8, r0
 800d25a:	e7f0      	b.n	800d23e <_vfiprintf_r+0x1b6>
 800d25c:	ab03      	add	r3, sp, #12
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	4622      	mov	r2, r4
 800d262:	4b13      	ldr	r3, [pc, #76]	; (800d2b0 <_vfiprintf_r+0x228>)
 800d264:	a904      	add	r1, sp, #16
 800d266:	4630      	mov	r0, r6
 800d268:	f7fb ffaa 	bl	80091c0 <_printf_float>
 800d26c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d270:	4681      	mov	r9, r0
 800d272:	d1d5      	bne.n	800d220 <_vfiprintf_r+0x198>
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	065b      	lsls	r3, r3, #25
 800d278:	f53f af7e 	bmi.w	800d178 <_vfiprintf_r+0xf0>
 800d27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d27e:	e77d      	b.n	800d17c <_vfiprintf_r+0xf4>
 800d280:	ab03      	add	r3, sp, #12
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	4622      	mov	r2, r4
 800d286:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <_vfiprintf_r+0x228>)
 800d288:	a904      	add	r1, sp, #16
 800d28a:	4630      	mov	r0, r6
 800d28c:	f7fc fa4e 	bl	800972c <_printf_i>
 800d290:	e7ec      	b.n	800d26c <_vfiprintf_r+0x1e4>
 800d292:	bf00      	nop
 800d294:	0800d920 	.word	0x0800d920
 800d298:	0800da6c 	.word	0x0800da6c
 800d29c:	0800d940 	.word	0x0800d940
 800d2a0:	0800d900 	.word	0x0800d900
 800d2a4:	0800da72 	.word	0x0800da72
 800d2a8:	0800da76 	.word	0x0800da76
 800d2ac:	080091c1 	.word	0x080091c1
 800d2b0:	0800d063 	.word	0x0800d063

0800d2b4 <_sbrk_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	4c06      	ldr	r4, [pc, #24]	; (800d2d0 <_sbrk_r+0x1c>)
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	4608      	mov	r0, r1
 800d2be:	6023      	str	r3, [r4, #0]
 800d2c0:	f7f7 f8fc 	bl	80044bc <_sbrk>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_sbrk_r+0x1a>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_sbrk_r+0x1a>
 800d2cc:	602b      	str	r3, [r5, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	200144f8 	.word	0x200144f8

0800d2d4 <__sread>:
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2dc:	f000 f8f4 	bl	800d4c8 <_read_r>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	bfab      	itete	ge
 800d2e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d2e8:	181b      	addge	r3, r3, r0
 800d2ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2ee:	bfac      	ite	ge
 800d2f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2f2:	81a3      	strhlt	r3, [r4, #12]
 800d2f4:	bd10      	pop	{r4, pc}

0800d2f6 <__swrite>:
 800d2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2fa:	461f      	mov	r7, r3
 800d2fc:	898b      	ldrh	r3, [r1, #12]
 800d2fe:	05db      	lsls	r3, r3, #23
 800d300:	4605      	mov	r5, r0
 800d302:	460c      	mov	r4, r1
 800d304:	4616      	mov	r6, r2
 800d306:	d505      	bpl.n	800d314 <__swrite+0x1e>
 800d308:	2302      	movs	r3, #2
 800d30a:	2200      	movs	r2, #0
 800d30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d310:	f000 f886 	bl	800d420 <_lseek_r>
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d31a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d31e:	81a3      	strh	r3, [r4, #12]
 800d320:	4632      	mov	r2, r6
 800d322:	463b      	mov	r3, r7
 800d324:	4628      	mov	r0, r5
 800d326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d32a:	f000 b835 	b.w	800d398 <_write_r>

0800d32e <__sseek>:
 800d32e:	b510      	push	{r4, lr}
 800d330:	460c      	mov	r4, r1
 800d332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d336:	f000 f873 	bl	800d420 <_lseek_r>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	bf15      	itete	ne
 800d340:	6560      	strne	r0, [r4, #84]	; 0x54
 800d342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d34a:	81a3      	strheq	r3, [r4, #12]
 800d34c:	bf18      	it	ne
 800d34e:	81a3      	strhne	r3, [r4, #12]
 800d350:	bd10      	pop	{r4, pc}

0800d352 <__sclose>:
 800d352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d356:	f000 b831 	b.w	800d3bc <_close_r>

0800d35a <strncmp>:
 800d35a:	b510      	push	{r4, lr}
 800d35c:	b16a      	cbz	r2, 800d37a <strncmp+0x20>
 800d35e:	3901      	subs	r1, #1
 800d360:	1884      	adds	r4, r0, r2
 800d362:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d366:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d103      	bne.n	800d376 <strncmp+0x1c>
 800d36e:	42a0      	cmp	r0, r4
 800d370:	d001      	beq.n	800d376 <strncmp+0x1c>
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1f5      	bne.n	800d362 <strncmp+0x8>
 800d376:	1a98      	subs	r0, r3, r2
 800d378:	bd10      	pop	{r4, pc}
 800d37a:	4610      	mov	r0, r2
 800d37c:	e7fc      	b.n	800d378 <strncmp+0x1e>

0800d37e <__ascii_wctomb>:
 800d37e:	b149      	cbz	r1, 800d394 <__ascii_wctomb+0x16>
 800d380:	2aff      	cmp	r2, #255	; 0xff
 800d382:	bf85      	ittet	hi
 800d384:	238a      	movhi	r3, #138	; 0x8a
 800d386:	6003      	strhi	r3, [r0, #0]
 800d388:	700a      	strbls	r2, [r1, #0]
 800d38a:	f04f 30ff 	movhi.w	r0, #4294967295
 800d38e:	bf98      	it	ls
 800d390:	2001      	movls	r0, #1
 800d392:	4770      	bx	lr
 800d394:	4608      	mov	r0, r1
 800d396:	4770      	bx	lr

0800d398 <_write_r>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	4c07      	ldr	r4, [pc, #28]	; (800d3b8 <_write_r+0x20>)
 800d39c:	4605      	mov	r5, r0
 800d39e:	4608      	mov	r0, r1
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	6022      	str	r2, [r4, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f7f7 f837 	bl	800441a <_write>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d102      	bne.n	800d3b6 <_write_r+0x1e>
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	b103      	cbz	r3, 800d3b6 <_write_r+0x1e>
 800d3b4:	602b      	str	r3, [r5, #0]
 800d3b6:	bd38      	pop	{r3, r4, r5, pc}
 800d3b8:	200144f8 	.word	0x200144f8

0800d3bc <_close_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4c06      	ldr	r4, [pc, #24]	; (800d3d8 <_close_r+0x1c>)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	6023      	str	r3, [r4, #0]
 800d3c8:	f7f7 f843 	bl	8004452 <_close>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_close_r+0x1a>
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_close_r+0x1a>
 800d3d4:	602b      	str	r3, [r5, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	200144f8 	.word	0x200144f8

0800d3dc <_fstat_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4c07      	ldr	r4, [pc, #28]	; (800d3fc <_fstat_r+0x20>)
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	f7f7 f83e 	bl	800446a <_fstat>
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	d102      	bne.n	800d3f8 <_fstat_r+0x1c>
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	b103      	cbz	r3, 800d3f8 <_fstat_r+0x1c>
 800d3f6:	602b      	str	r3, [r5, #0]
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	bf00      	nop
 800d3fc:	200144f8 	.word	0x200144f8

0800d400 <_isatty_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4c06      	ldr	r4, [pc, #24]	; (800d41c <_isatty_r+0x1c>)
 800d404:	2300      	movs	r3, #0
 800d406:	4605      	mov	r5, r0
 800d408:	4608      	mov	r0, r1
 800d40a:	6023      	str	r3, [r4, #0]
 800d40c:	f7f7 f83d 	bl	800448a <_isatty>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_isatty_r+0x1a>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	b103      	cbz	r3, 800d41a <_isatty_r+0x1a>
 800d418:	602b      	str	r3, [r5, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	200144f8 	.word	0x200144f8

0800d420 <_lseek_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4c07      	ldr	r4, [pc, #28]	; (800d440 <_lseek_r+0x20>)
 800d424:	4605      	mov	r5, r0
 800d426:	4608      	mov	r0, r1
 800d428:	4611      	mov	r1, r2
 800d42a:	2200      	movs	r2, #0
 800d42c:	6022      	str	r2, [r4, #0]
 800d42e:	461a      	mov	r2, r3
 800d430:	f7f7 f836 	bl	80044a0 <_lseek>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d102      	bne.n	800d43e <_lseek_r+0x1e>
 800d438:	6823      	ldr	r3, [r4, #0]
 800d43a:	b103      	cbz	r3, 800d43e <_lseek_r+0x1e>
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
 800d440:	200144f8 	.word	0x200144f8

0800d444 <memmove>:
 800d444:	4288      	cmp	r0, r1
 800d446:	b510      	push	{r4, lr}
 800d448:	eb01 0302 	add.w	r3, r1, r2
 800d44c:	d807      	bhi.n	800d45e <memmove+0x1a>
 800d44e:	1e42      	subs	r2, r0, #1
 800d450:	4299      	cmp	r1, r3
 800d452:	d00a      	beq.n	800d46a <memmove+0x26>
 800d454:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d458:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d45c:	e7f8      	b.n	800d450 <memmove+0xc>
 800d45e:	4283      	cmp	r3, r0
 800d460:	d9f5      	bls.n	800d44e <memmove+0xa>
 800d462:	1881      	adds	r1, r0, r2
 800d464:	1ad2      	subs	r2, r2, r3
 800d466:	42d3      	cmn	r3, r2
 800d468:	d100      	bne.n	800d46c <memmove+0x28>
 800d46a:	bd10      	pop	{r4, pc}
 800d46c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d470:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d474:	e7f7      	b.n	800d466 <memmove+0x22>

0800d476 <__malloc_lock>:
 800d476:	4770      	bx	lr

0800d478 <__malloc_unlock>:
 800d478:	4770      	bx	lr

0800d47a <_realloc_r>:
 800d47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47c:	4607      	mov	r7, r0
 800d47e:	4614      	mov	r4, r2
 800d480:	460e      	mov	r6, r1
 800d482:	b921      	cbnz	r1, 800d48e <_realloc_r+0x14>
 800d484:	4611      	mov	r1, r2
 800d486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d48a:	f7ff bc27 	b.w	800ccdc <_malloc_r>
 800d48e:	b922      	cbnz	r2, 800d49a <_realloc_r+0x20>
 800d490:	f7ff fbd6 	bl	800cc40 <_free_r>
 800d494:	4625      	mov	r5, r4
 800d496:	4628      	mov	r0, r5
 800d498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d49a:	f000 f827 	bl	800d4ec <_malloc_usable_size_r>
 800d49e:	42a0      	cmp	r0, r4
 800d4a0:	d20f      	bcs.n	800d4c2 <_realloc_r+0x48>
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	f7ff fc19 	bl	800ccdc <_malloc_r>
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d0f2      	beq.n	800d496 <_realloc_r+0x1c>
 800d4b0:	4631      	mov	r1, r6
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	f7fb fddc 	bl	8009070 <memcpy>
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4638      	mov	r0, r7
 800d4bc:	f7ff fbc0 	bl	800cc40 <_free_r>
 800d4c0:	e7e9      	b.n	800d496 <_realloc_r+0x1c>
 800d4c2:	4635      	mov	r5, r6
 800d4c4:	e7e7      	b.n	800d496 <_realloc_r+0x1c>
	...

0800d4c8 <_read_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4c07      	ldr	r4, [pc, #28]	; (800d4e8 <_read_r+0x20>)
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	4608      	mov	r0, r1
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	6022      	str	r2, [r4, #0]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f7f6 ff82 	bl	80043e0 <_read>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d102      	bne.n	800d4e6 <_read_r+0x1e>
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	b103      	cbz	r3, 800d4e6 <_read_r+0x1e>
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	200144f8 	.word	0x200144f8

0800d4ec <_malloc_usable_size_r>:
 800d4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4f0:	1f18      	subs	r0, r3, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	bfbc      	itt	lt
 800d4f6:	580b      	ldrlt	r3, [r1, r0]
 800d4f8:	18c0      	addlt	r0, r0, r3
 800d4fa:	4770      	bx	lr

0800d4fc <_init>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	bf00      	nop
 800d500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d502:	bc08      	pop	{r3}
 800d504:	469e      	mov	lr, r3
 800d506:	4770      	bx	lr

0800d508 <_fini>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	bf00      	nop
 800d50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50e:	bc08      	pop	{r3}
 800d510:	469e      	mov	lr, r3
 800d512:	4770      	bx	lr
