
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08010570  08010570  00020570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010df0  08010df0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010df0  08010df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010df8  08010df8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010df8  08010df8  00020df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dfc  08010dfc  00020dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010e00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000120ac  200001e0  08010fe0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001228c  08010fe0  0003228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec86  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000578b  00000000  00000000  0004ee96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00054628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c80  00000000  00000000  00056540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000aa22  00000000  00000000  000581c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002920d  00000000  00000000  00062be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5f0a  00000000  00000000  0008bdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161cf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009498  00000000  00000000  00161d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010554 	.word	0x08010554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08010554 	.word	0x08010554

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <imu_read_byte>:

uint8_t initialized = 0;
Inertial inertial;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <imu_read_byte+0x54>)
 8001014:	f006 fd90 	bl	8007b38 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 8001018:	f107 010f 	add.w	r1, r7, #15
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	2201      	movs	r2, #1
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <imu_read_byte+0x58>)
 8001022:	f007 fc06 	bl	8008832 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 8001026:	f107 010e 	add.w	r1, r7, #14
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	2201      	movs	r2, #1
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <imu_read_byte+0x58>)
 8001030:	f007 fd3b 	bl	8008aaa <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <imu_read_byte+0x54>)
 800103c:	f006 fd7c 	bl	8007b38 <HAL_GPIO_WritePin>
#endif
	return val;
 8001040:	7bbb      	ldrb	r3, [r7, #14]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020400 	.word	0x40020400
 8001050:	20000500 	.word	0x20000500

08001054 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800106a:	b2db      	uxtb	r3, r3
 800106c:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <imu_write_byte+0x54>)
 8001076:	f006 fd5f 	bl	8007b38 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800107a:	f107 010f 	add.w	r1, r7, #15
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <imu_write_byte+0x58>)
 8001084:	f007 fbd5 	bl	8008832 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 8001088:	1db9      	adds	r1, r7, #6
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	2201      	movs	r2, #1
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <imu_write_byte+0x58>)
 8001090:	f007 fbcf 	bl	8008832 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <imu_write_byte+0x54>)
 800109c:	f006 fd4c 	bl	8007b38 <HAL_GPIO_WritePin>
#endif
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020400 	.word	0x40020400
 80010ac:	20000500 	.word	0x20000500

080010b0 <imu_init>:
 * @fn imu_init()
 * @brief 
 * 
 */
void imu_init()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	if(initialized == 0)
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <imu_init+0x54>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11d      	bne.n	80010fa <imu_init+0x4a>
	{
		printf("Starting SPI2 (IMU)\r\n");
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <imu_init+0x58>)
 80010c0:	f00a fd12 	bl	800bae8 <puts>
		uint8_t wai, ret;
		ret = imu_initialize(&wai);
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f826 	bl	8001118 <imu_initialize>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
		printf("who_am_i = %d\r\n", wai);
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	4619      	mov	r1, r3
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <imu_init+0x5c>)
 80010d6:	f00a fc81 	bl	800b9dc <iprintf>
		if(ret == 1)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d103      	bne.n	80010e8 <imu_init+0x38>
		{
			printf("SPI INIT COLLECT!\r\n");
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <imu_init+0x60>)
 80010e2:	f00a fd01 	bl	800bae8 <puts>
 80010e6:	e002      	b.n	80010ee <imu_init+0x3e>
		}
		else
		{
			printf("SPI INIT FAILURE x_x \r\n");
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <imu_init+0x64>)
 80010ea:	f00a fcfd 	bl	800bae8 <puts>
		}
		initialized = initialized + 1;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <imu_init+0x54>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <imu_init+0x54>)
 80010f8:	701a      	strb	r2, [r3, #0]
	}
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001fc 	.word	0x200001fc
 8001108:	08010570 	.word	0x08010570
 800110c:	08010588 	.word	0x08010588
 8001110:	08010598 	.word	0x08010598
 8001114:	080105ac 	.word	0x080105ac

08001118 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	4833      	ldr	r0, [pc, #204]	; (80011f4 <imu_initialize+0xdc>)
 8001128:	f006 fd06 	bl	8007b38 <HAL_GPIO_WritePin>
	uint8_t who_am_i, ret;
	ret = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

#if	INIT_ZERO
	inertial.linear = vector3_creation(0, 0, 0);
 8001130:	4c31      	ldr	r4, [pc, #196]	; (80011f8 <imu_initialize+0xe0>)
 8001132:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80011fc <imu_initialize+0xe4>
 8001136:	eddf 0a31 	vldr	s1, [pc, #196]	; 80011fc <imu_initialize+0xe4>
 800113a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80011fc <imu_initialize+0xe4>
 800113e:	f001 fd79 	bl	8002c34 <vector3_creation>
 8001142:	eef0 6a40 	vmov.f32	s13, s0
 8001146:	eeb0 7a60 	vmov.f32	s14, s1
 800114a:	eef0 7a41 	vmov.f32	s15, s2
 800114e:	edc4 6a00 	vstr	s13, [r4]
 8001152:	ed84 7a01 	vstr	s14, [r4, #4]
 8001156:	edc4 7a02 	vstr	s15, [r4, #8]
	inertial.angular = vector3_creation(0, 0, 0);
 800115a:	4c27      	ldr	r4, [pc, #156]	; (80011f8 <imu_initialize+0xe0>)
 800115c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80011fc <imu_initialize+0xe4>
 8001160:	eddf 0a26 	vldr	s1, [pc, #152]	; 80011fc <imu_initialize+0xe4>
 8001164:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80011fc <imu_initialize+0xe4>
 8001168:	f001 fd64 	bl	8002c34 <vector3_creation>
 800116c:	eef0 6a40 	vmov.f32	s13, s0
 8001170:	eeb0 7a60 	vmov.f32	s14, s1
 8001174:	eef0 7a41 	vmov.f32	s15, s2
 8001178:	edc4 6a03 	vstr	s13, [r4, #12]
 800117c:	ed84 7a04 	vstr	s14, [r4, #16]
 8001180:	edc4 7a05 	vstr	s15, [r4, #20]
#endif

	//! User Bank 0 を選択
	imu_write_byte(REG_BANK_SEL, 0x00);
 8001184:	2100      	movs	r1, #0
 8001186:	207f      	movs	r0, #127	; 0x7f
 8001188:	f7ff ff64 	bl	8001054 <imu_write_byte>
	who_am_i = imu_read_byte(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ff33 	bl	8000ff8 <imu_read_byte>
 8001192:	4603      	mov	r3, r0
 8001194:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7bba      	ldrb	r2, [r7, #14]
 800119a:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	2be0      	cmp	r3, #224	; 0xe0
 80011a0:	d11c      	bne.n	80011dc <imu_initialize+0xc4>
	{	// ICM-20648 is 0xE0
		ret = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
		//! PWR_MGMT_1 推奨値 1
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 80011a6:	2101      	movs	r1, #1
 80011a8:	2006      	movs	r0, #6
 80011aa:	f7ff ff53 	bl	8001054 <imu_write_byte>
		//! PWR_MGMt_2 推奨値 0
		// imu_write_byte(PWR_MGMT_2, 0x00);
		HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f004 febe 	bl	8005f30 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 80011b4:	2110      	movs	r1, #16
 80011b6:	2003      	movs	r0, #3
 80011b8:	f7ff ff4c 	bl	8001054 <imu_write_byte>
		 * 	10 : User Bank 2 : 加速度と角速度の値の設定ができる
		 * 	11 : User Bank 3 : I2C の設定が行える
		 * 
		 */
		//! User Bank 2 を選択
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 80011bc:	2120      	movs	r1, #32
 80011be:	207f      	movs	r0, #127	; 0x7f
 80011c0:	f7ff ff48 	bl	8001054 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 9     [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2000 [dps] & bypass ) -> 0b 0000 0110 -> 0x06
		imu_write_byte(0x01, 0x06);
 80011c4:	2106      	movs	r1, #6
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff44 	bl	8001054 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 4.5   [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2 [dps] & bypass ) -> 0b 0000 0000 -> 0x06
		imu_write_byte(0x14, 0x00);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2014      	movs	r0, #20
 80011d0:	f7ff ff40 	bl	8001054 <imu_write_byte>

		//! User Bank 0 に戻す
		imu_write_byte(REG_BANK_SEL, 0x00);
 80011d4:	2100      	movs	r1, #0
 80011d6:	207f      	movs	r0, #127	; 0x7f
 80011d8:	f7ff ff3c 	bl	8001054 <imu_write_byte>
	}
#if USE_NCS
	CS_SET;
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <imu_initialize+0xdc>)
 80011e4:	f006 fca8 	bl	8007b38 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020400 	.word	0x40020400
 80011f8:	20000200 	.word	0x20000200
 80011fc:	00000000 	.word	0x00000000

08001200 <imu_start>:

void imu_start()
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	/* imu_start */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <imu_stop>:

void imu_stop()
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
#if !USE_NCS
	CS_SET;
#endif
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	0000      	movs	r0, r0
	...

08001220 <imu_update_gyro>:
 * --- --- --- --- --- --- --- --- --- ---
 * @attention 値を代入したら外部参照変数を呼び出して値を取得することになる
 *
*/
void imu_update_gyro()
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
	float k_gyro;
	int16_t byte_data;
	float tmp;

	k_gyro = (GYRO_RANGE / (float) MAXDATA_RANGE);
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <imu_update_gyro+0x160>)
 8001228:	60fb      	str	r3, [r7, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800122a:	2033      	movs	r0, #51	; 0x33
 800122c:	f7ff fee4 	bl	8000ff8 <imu_read_byte>
 8001230:	4603      	mov	r3, r0
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21c      	sxth	r4, r3
 8001236:	2034      	movs	r0, #52	; 0x34
 8001238:	f7ff fede 	bl	8000ff8 <imu_read_byte>
 800123c:	4603      	mov	r3, r0
 800123e:	b21b      	sxth	r3, r3
 8001240:	4323      	orrs	r3, r4
 8001242:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001250:	ed97 7a03 	vldr	s14, [r7, #12]
 8001254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001258:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.x = low_pass_filter(tmp, inertial.angular.x, LPF_RATE);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <imu_update_gyro+0x164>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96c 	bl	8000548 <__aeabi_f2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001378 <imu_update_gyro+0x158>
 8001278:	ec43 2b11 	vmov	d1, r2, r3
 800127c:	ec45 4b10 	vmov	d0, r4, r5
 8001280:	f001 fca2 	bl	8002bc8 <low_pass_filter>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcac 	bl	8000be8 <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <imu_update_gyro+0x164>)
 8001294:	60d3      	str	r3, [r2, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 8001296:	2035      	movs	r0, #53	; 0x35
 8001298:	f7ff feae 	bl	8000ff8 <imu_read_byte>
 800129c:	4603      	mov	r3, r0
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21c      	sxth	r4, r3
 80012a2:	2036      	movs	r0, #54	; 0x36
 80012a4:	f7ff fea8 	bl	8000ff8 <imu_read_byte>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4323      	orrs	r3, r4
 80012ae:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80012b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.y = low_pass_filter(tmp, inertial.angular.y, LPF_RATE);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff f93d 	bl	8000548 <__aeabi_f2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <imu_update_gyro+0x164>)
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f936 	bl	8000548 <__aeabi_f2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001378 <imu_update_gyro+0x158>
 80012e4:	ec43 2b11 	vmov	d1, r2, r3
 80012e8:	ec45 4b10 	vmov	d0, r4, r5
 80012ec:	f001 fc6c 	bl	8002bc8 <low_pass_filter>
 80012f0:	ec53 2b10 	vmov	r2, r3, d0
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc76 	bl	8000be8 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <imu_update_gyro+0x164>)
 8001300:	6113      	str	r3, [r2, #16]

	byte_data = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 8001302:	2037      	movs	r0, #55	; 0x37
 8001304:	f7ff fe78 	bl	8000ff8 <imu_read_byte>
 8001308:	4603      	mov	r3, r0
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21c      	sxth	r4, r3
 800130e:	2038      	movs	r0, #56	; 0x38
 8001310:	f7ff fe72 	bl	8000ff8 <imu_read_byte>
 8001314:	4603      	mov	r3, r0
 8001316:	b21b      	sxth	r3, r3
 8001318:	4323      	orrs	r3, r4
 800131a:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 800131c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001328:	ed97 7a03 	vldr	s14, [r7, #12]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.z = low_pass_filter(tmp, inertial.angular.z, LPF_RATE);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4604      	mov	r4, r0
 800133c:	460d      	mov	r5, r1
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <imu_update_gyro+0x164>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f900 	bl	8000548 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001378 <imu_update_gyro+0x158>
 8001350:	ec43 2b11 	vmov	d1, r2, r3
 8001354:	ec45 4b10 	vmov	d0, r4, r5
 8001358:	f001 fc36 	bl	8002bc8 <low_pass_filter>
 800135c:	ec53 2b10 	vmov	r2, r3, d0
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4603      	mov	r3, r0
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <imu_update_gyro+0x164>)
 800136c:	6153      	str	r3, [r2, #20]
	 * 		float y;
	 * 		float z;
	 * } Vector3;
	 * 
	 */
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bdb0      	pop	{r4, r5, r7, pc}
 8001376:	bf00      	nop
 8001378:	40000000 	.word	0x40000000
 800137c:	3fd33333 	.word	0x3fd33333
 8001380:	3d7a0000 	.word	0x3d7a0000
 8001384:	20000200 	.word	0x20000200

08001388 <imu_read_yaw>:
 * @return float 
 * @attention [ degree ]
 * 
 */
float imu_read_yaw()
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	//! バイアス補正を加味した返り値（ inertial.angular.z はすでに LPF を通されている ）
	return inertial.angular.z - (BIAS_AVERAGE - TRUE_VALUE);
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <imu_read_yaw+0x20>)
 800138e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001392:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013ac <imu_read_yaw+0x24>
 8001396:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000200 	.word	0x20000200
 80013ac:	3e0a704c 	.word	0x3e0a704c

080013b0 <led_init>:

uint8_t current_value;
uint8_t current_rgb_value;

void led_init()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    current_value = 0b11;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <led_init+0x24>)
 80013b6:	2203      	movs	r2, #3
 80013b8:	701a      	strb	r2, [r3, #0]
    current_rgb_value = 0b111;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <led_init+0x28>)
 80013bc:	2207      	movs	r2, #7
 80013be:	701a      	strb	r2, [r3, #0]
    led_write_led(0b11, 0b11);
 80013c0:	2103      	movs	r1, #3
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f8ae 	bl	8001524 <led_write_led>
    led_write_rgb(0b111);
 80013c8:	2007      	movs	r0, #7
 80013ca:	f000 f86b 	bl	80014a4 <led_write_rgb>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000218 	.word	0x20000218
 80013d8:	20000219 	.word	0x20000219

080013dc <led_start>:

void led_start()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 80013e0:	2100      	movs	r1, #0
 80013e2:	2003      	movs	r0, #3
 80013e4:	f000 f89e 	bl	8001524 <led_write_led>
    led_write_rgb(0b000);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f85b 	bl	80014a4 <led_write_rgb>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <led_stop>:

void led_stop()
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f893 	bl	8001524 <led_write_led>
    led_write_rgb(0b100);
 80013fe:	2004      	movs	r0, #4
 8001400:	f000 f850 	bl	80014a4 <led_write_rgb>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <led_write_led1>:
{
    return current_rgb_value;
}

void led_write_led1(uint8_t value_)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = value_ << 1;
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
    led2_value = current_value & 0b01;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <led_write_led1+0x48>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <led_write_led1+0x4c>)
 8001436:	f006 fb7f 	bl	8007b38 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	4313      	orrs	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <led_write_led1+0x48>)
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000218 	.word	0x20000218
 8001454:	40020800 	.word	0x40020800

08001458 <led_write_led2>:

void led_write_led2(uint8_t value_)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = current_value & 0b10;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <led_write_led2+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	73fb      	strb	r3, [r7, #15]
    led2_value = value_ << 0;
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <led_write_led2+0x48>)
 8001484:	f006 fb58 	bl	8007b38 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	4313      	orrs	r3, r2
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <led_write_led2+0x44>)
 8001492:	701a      	strb	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000218 	.word	0x20000218
 80014a0:	40020400 	.word	0x40020400

080014a4 <led_write_rgb>:

void led_write_rgb(uint8_t rgb_)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (rgb_ & 0b100) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c4:	4814      	ldr	r0, [pc, #80]	; (8001518 <led_write_rgb+0x74>)
 80014c6:	f006 fb37 	bl	8007b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (rgb_ & 0b010) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <led_write_rgb+0x74>)
 80014e2:	f006 fb29 	bl	8007b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (rgb_ & 0b001) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <led_write_rgb+0x78>)
 80014fe:	f006 fb1b 	bl	8007b38 <HAL_GPIO_WritePin>
    current_rgb_value = rgb_ & 0b0111;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <led_write_rgb+0x7c>)
 800150c:	701a      	strb	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40020000 	.word	0x40020000
 800151c:	40020800 	.word	0x40020800
 8001520:	20000219 	.word	0x20000219

08001524 <led_write_led>:

void led_write_led(uint8_t mask_, uint8_t value_)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	460a      	mov	r2, r1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	4613      	mov	r3, r2
 8001532:	71bb      	strb	r3, [r7, #6]
    if(mask_ & 0b10)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <led_write_led+0x2c>
    {
        led_write_led1((0b10 & value_) >> 1);
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff5c 	bl	8001408 <led_write_led1>
    }
    if(mask_ & 0b01)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <led_write_led+0x44>
    {
        led_write_led2((0b01 & value_) >> 0);
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff78 	bl	8001458 <led_write_led2>
    }
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001574:	f000 f804 	bl	8001580 <rotary_set_playmode>
    rotary_set_value();
 8001578:	f000 f81a 	bl	80015b0 <rotary_set_value>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001584:	f000 f82c 	bl	80015e0 <rotary_read>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b01      	ldr	r3, [pc, #4]	; (8001594 <rotary_set_playmode+0x14>)
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000021a 	.word	0x2000021a

08001598 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    return playmode;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <rotary_read_playmode+0x14>)
 800159e:	781b      	ldrb	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000021a 	.word	0x2000021a

080015b0 <rotary_set_value>:

void rotary_set_value()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    value = rotary_read();
 80015b4:	f000 f814 	bl	80015e0 <rotary_read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <rotary_set_value+0x14>)
 80015be:	701a      	strb	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000021b 	.word	0x2000021b

080015c8 <rotary_read_value>:

uint8_t rotary_read_value()
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
    return value;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <rotary_read_value+0x14>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000021b 	.word	0x2000021b

080015e0 <rotary_read>:

uint8_t rotary_read()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 80015ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ee:	481f      	ldr	r0, [pc, #124]	; (800166c <rotary_read+0x8c>)
 80015f0:	f006 fa8a 	bl	8007b08 <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bf0c      	ite	eq
 80015fa:	2301      	moveq	r3, #1
 80015fc:	2300      	movne	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	b2da      	uxtb	r2, r3
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4413      	add	r3, r2
 8001606:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160c:	4817      	ldr	r0, [pc, #92]	; (800166c <rotary_read+0x8c>)
 800160e:	f006 fa7b 	bl	8007b08 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <rotary_read+0x3c>
 8001618:	2302      	movs	r3, #2
 800161a:	e000      	b.n	800161e <rotary_read+0x3e>
 800161c:	2300      	movs	r3, #0
 800161e:	b2da      	uxtb	r2, r3
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4413      	add	r3, r2
 8001624:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <rotary_read+0x90>)
 800162c:	f006 fa6c 	bl	8007b08 <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <rotary_read+0x5a>
 8001636:	2304      	movs	r3, #4
 8001638:	e000      	b.n	800163c <rotary_read+0x5c>
 800163a:	2300      	movs	r3, #0
 800163c:	b2da      	uxtb	r2, r3
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4413      	add	r3, r2
 8001642:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 8001644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <rotary_read+0x8c>)
 800164a:	f006 fa5d 	bl	8007b08 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <rotary_read+0x78>
 8001654:	2308      	movs	r3, #8
 8001656:	e000      	b.n	800165a <rotary_read+0x7a>
 8001658:	2300      	movs	r3, #0
 800165a:	b2da      	uxtb	r2, r3
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4413      	add	r3, r2
 8001660:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 8001662:	79fb      	ldrb	r3, [r7, #7]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020800 	.word	0x40020800
 8001670:	40020000 	.word	0x40020000

08001674 <rotary_print_playmode>:

void rotary_print_playmode()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	printf("playmode = ");
 8001678:	482e      	ldr	r0, [pc, #184]	; (8001734 <rotary_print_playmode+0xc0>)
 800167a:	f00a f9af 	bl	800b9dc <iprintf>
	switch(rotary_read_playmode())
 800167e:	f7ff ff8b 	bl	8001598 <rotary_read_playmode>
 8001682:	4603      	mov	r3, r0
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d84b      	bhi.n	8001720 <rotary_print_playmode+0xac>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <rotary_print_playmode+0x1c>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016d1 	.word	0x080016d1
 8001694:	080016d9 	.word	0x080016d9
 8001698:	080016e1 	.word	0x080016e1
 800169c:	080016e9 	.word	0x080016e9
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	080016f9 	.word	0x080016f9
 80016a8:	08001701 	.word	0x08001701
 80016ac:	08001709 	.word	0x08001709
 80016b0:	08001711 	.word	0x08001711
 80016b4:	08001721 	.word	0x08001721
 80016b8:	08001721 	.word	0x08001721
 80016bc:	08001721 	.word	0x08001721
 80016c0:	08001721 	.word	0x08001721
 80016c4:	08001721 	.word	0x08001721
 80016c8:	08001721 	.word	0x08001721
 80016cc:	08001719 	.word	0x08001719
	{
		case calibration:
			printf("calibration");
 80016d0:	4819      	ldr	r0, [pc, #100]	; (8001738 <rotary_print_playmode+0xc4>)
 80016d2:	f00a f983 	bl	800b9dc <iprintf>
			break;
 80016d6:	e027      	b.n	8001728 <rotary_print_playmode+0xb4>
		case search:
			printf("search");
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <rotary_print_playmode+0xc8>)
 80016da:	f00a f97f 	bl	800b9dc <iprintf>
			break;
 80016de:	e023      	b.n	8001728 <rotary_print_playmode+0xb4>
		case accel:
			printf("accel");
 80016e0:	4817      	ldr	r0, [pc, #92]	; (8001740 <rotary_print_playmode+0xcc>)
 80016e2:	f00a f97b 	bl	800b9dc <iprintf>
			break;
 80016e6:	e01f      	b.n	8001728 <rotary_print_playmode+0xb4>
		case max_enable:
			printf("max_enable");
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <rotary_print_playmode+0xd0>)
 80016ea:	f00a f977 	bl	800b9dc <iprintf>
			break;
 80016ee:	e01b      	b.n	8001728 <rotary_print_playmode+0xb4>
        case motor_free:
            printf("motor_free");
 80016f0:	4815      	ldr	r0, [pc, #84]	; (8001748 <rotary_print_playmode+0xd4>)
 80016f2:	f00a f973 	bl	800b9dc <iprintf>
            break;
 80016f6:	e017      	b.n	8001728 <rotary_print_playmode+0xb4>
		case tracer_tuning:
			printf("tracer_tuning");
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <rotary_print_playmode+0xd8>)
 80016fa:	f00a f96f 	bl	800b9dc <iprintf>
			break;
 80016fe:	e013      	b.n	8001728 <rotary_print_playmode+0xb4>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <rotary_print_playmode+0xdc>)
 8001702:	f00a f96b 	bl	800b9dc <iprintf>
			break;
 8001706:	e00f      	b.n	8001728 <rotary_print_playmode+0xb4>
        case velotrace_tuning_2:
            printf("velotrace_tuning_2");
 8001708:	4812      	ldr	r0, [pc, #72]	; (8001754 <rotary_print_playmode+0xe0>)
 800170a:	f00a f967 	bl	800b9dc <iprintf>
            break;
 800170e:	e00b      	b.n	8001728 <rotary_print_playmode+0xb4>
		case banquet:
			printf("banquet");
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <rotary_print_playmode+0xe4>)
 8001712:	f00a f963 	bl	800b9dc <iprintf>
			break;
 8001716:	e007      	b.n	8001728 <rotary_print_playmode+0xb4>
		case flash_print:
			printf("flash_print");
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <rotary_print_playmode+0xe8>)
 800171a:	f00a f95f 	bl	800b9dc <iprintf>
			break;
 800171e:	e003      	b.n	8001728 <rotary_print_playmode+0xb4>
		default:
			printf("unknown playmode...");
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <rotary_print_playmode+0xec>)
 8001722:	f00a f95b 	bl	800b9dc <iprintf>
			break;
 8001726:	bf00      	nop
	}
	printf("\r\n");
 8001728:	480e      	ldr	r0, [pc, #56]	; (8001764 <rotary_print_playmode+0xf0>)
 800172a:	f00a f9dd 	bl	800bae8 <puts>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	080105c4 	.word	0x080105c4
 8001738:	080105d0 	.word	0x080105d0
 800173c:	080105dc 	.word	0x080105dc
 8001740:	080105e4 	.word	0x080105e4
 8001744:	080105ec 	.word	0x080105ec
 8001748:	080105f8 	.word	0x080105f8
 800174c:	08010604 	.word	0x08010604
 8001750:	08010614 	.word	0x08010614
 8001754:	08010628 	.word	0x08010628
 8001758:	0801063c 	.word	0x0801063c
 800175c:	08010644 	.word	0x08010644
 8001760:	08010650 	.word	0x08010650
 8001764:	08010664 	.word	0x08010664

08001768 <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
    enter = 1;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <switch_set_enter+0x14>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	2000021c 	.word	0x2000021c

08001780 <switch_reset_enter>:

void switch_reset_enter()
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
    enter = 0;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <switch_reset_enter+0x14>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	2000021c 	.word	0x2000021c

08001798 <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    switch_reset_enter();
 800179c:	f7ff fff0 	bl	8001780 <switch_reset_enter>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
    return enter;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <switch_read_enter+0x14>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000021c 	.word	0x2000021c

080017bc <switch1_read>:

uint8_t switch1_read()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 80017c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <switch1_read+0x20>)
 80017c6:	f006 f99f 	bl	8007b08 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020800 	.word	0x40020800

080017e0 <switch2_read>:

uint8_t switch2_read()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 80017e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <switch2_read+0x20>)
 80017ea:	f006 f98d 	bl	8007b08 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40020800 	.word	0x40020800

08001804 <switch_read>:

uint8_t switch_read()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 800180e:	f7ff ffd5 	bl	80017bc <switch1_read>
 8001812:	4603      	mov	r3, r0
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4413      	add	r3, r2
 800181c:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 800181e:	f7ff ffdf 	bl	80017e0 <switch2_read>
 8001822:	4603      	mov	r3, r0
 8001824:	b2da      	uxtb	r2, r3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4413      	add	r3, r2
 800182a:	71fb      	strb	r3, [r7, #7]

    return value_;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <switch_enter>:

void switch_enter()
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800183a:	f7ff ffe3 	bl	8001804 <switch_read>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d102      	bne.n	800184a <switch_enter+0x14>
    {
        switch_reset_enter();
 8001844:	f7ff ff9c 	bl	8001780 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 8001848:	e006      	b.n	8001858 <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800184a:	f7ff ffdb 	bl	8001804 <switch_read>
 800184e:	4603      	mov	r3, r0
 8001850:	2b02      	cmp	r3, #2
 8001852:	d101      	bne.n	8001858 <switch_enter+0x22>
        switch_set_enter();
 8001854:	f7ff ff88 	bl	8001768 <switch_set_enter>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 800185c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001860:	b08e      	sub	sp, #56	; 0x38
 8001862:	af0a      	add	r7, sp, #40	; 0x28
 8001864:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 8001866:	482d      	ldr	r0, [pc, #180]	; (800191c <analog_array_print+0xc0>)
 8001868:	f00a f8b8 	bl	800b9dc <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3318      	adds	r3, #24
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	331c      	adds	r3, #28
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	331e      	adds	r3, #30
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	331a      	adds	r3, #26
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4603      	mov	r3, r0
 800188e:	4824      	ldr	r0, [pc, #144]	; (8001920 <analog_array_print+0xc4>)
 8001890:	f00a f8a4 	bl	800b9dc <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	469c      	mov	ip, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3304      	adds	r3, #4
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	469e      	mov	lr, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3308      	adds	r3, #8
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	4698      	mov	r8, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3310      	adds	r3, #16
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3314      	adds	r3, #20
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3316      	adds	r3, #22
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	461c      	mov	r4, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3312      	adds	r3, #18
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	461d      	mov	r5, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	330e      	adds	r3, #14
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461e      	mov	r6, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	330a      	adds	r3, #10
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3306      	adds	r3, #6
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3302      	adds	r3, #2
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	9308      	str	r3, [sp, #32]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	9307      	str	r3, [sp, #28]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	9306      	str	r3, [sp, #24]
 80018fa:	9605      	str	r6, [sp, #20]
 80018fc:	9504      	str	r5, [sp, #16]
 80018fe:	9403      	str	r4, [sp, #12]
 8001900:	9002      	str	r0, [sp, #8]
 8001902:	9101      	str	r1, [sp, #4]
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	4643      	mov	r3, r8
 8001908:	4672      	mov	r2, lr
 800190a:	4661      	mov	r1, ip
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <analog_array_print+0xc8>)
 800190e:	f00a f865 	bl	800b9dc <iprintf>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800191c:	08010668 	.word	0x08010668
 8001920:	08010670 	.word	0x08010670
 8001924:	08010688 	.word	0x08010688

08001928 <analog_d_print>:

	printf("average = %4.2f\r\n\r\n", sum_ / (float) size_);
}

void analog_d_print()
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
#if D_ANALOG
	analog_print_analogmode();
	analog_rate_array_print();
	// analog_array_print(analog);
#endif
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 800193c:	4806      	ldr	r0, [pc, #24]	; (8001958 <analog_print_max+0x20>)
 800193e:	f00a f84d 	bl	800b9dc <iprintf>
	printf("analog_print_max\r\n");
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <analog_print_max+0x24>)
 8001944:	f00a f8d0 	bl	800bae8 <puts>
	analog_array_print(analogmax);
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <analog_print_max+0x28>)
 800194a:	f7ff ff87 	bl	800185c <analog_array_print>
	printf(ESC_DEF);
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <analog_print_max+0x2c>)
 8001950:	f00a f844 	bl	800b9dc <iprintf>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	08010780 	.word	0x08010780
 800195c:	08010788 	.word	0x08010788
 8001960:	20000268 	.word	0x20000268
 8001964:	0801079c 	.word	0x0801079c

08001968 <analog_print_min>:

void analog_print_min()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 800196c:	4806      	ldr	r0, [pc, #24]	; (8001988 <analog_print_min+0x20>)
 800196e:	f00a f835 	bl	800b9dc <iprintf>
	printf("analog_print_min\r\n");
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <analog_print_min+0x24>)
 8001974:	f00a f8b8 	bl	800bae8 <puts>
	analog_array_print(analogmin);
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <analog_print_min+0x28>)
 800197a:	f7ff ff6f 	bl	800185c <analog_array_print>
	printf(ESC_DEF);
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <analog_print_min+0x2c>)
 8001980:	f00a f82c 	bl	800b9dc <iprintf>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	080107a4 	.word	0x080107a4
 800198c:	080107ac 	.word	0x080107ac
 8001990:	20000288 	.word	0x20000288
 8001994:	0801079c 	.word	0x0801079c

08001998 <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_to_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e014      	b.n	80019d2 <analog_set_on_flash+0x3a>
		#if D_ANALOG
		printf(ESC_MAG);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		printf(ESC_DEF);
		#endif
		*(analogmin_ + i) = analogmin[i];
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	490d      	ldr	r1, [pc, #52]	; (80019e8 <analog_set_on_flash+0x50>)
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019b8:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <analog_set_on_flash+0x54>)
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019ca:	801a      	strh	r2, [r3, #0]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d9e7      	bls.n	80019a8 <analog_set_on_flash+0x10>
		printf(ESC_GRE);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		printf(ESC_DEF);
		#endif
	}
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000288 	.word	0x20000288
 80019ec:	20000268 	.word	0x20000268

080019f0 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_from_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e014      	b.n	8001a2a <analog_set_from_flash+0x3a>
	{
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
		analogmin[i] = *(analogmin_ + i);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	8819      	ldrh	r1, [r3, #0]
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <analog_set_from_flash+0x50>)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	8819      	ldrh	r1, [r3, #0]
 8001a1c:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <analog_set_from_flash+0x54>)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d9e7      	bls.n	8001a00 <analog_set_from_flash+0x10>
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
	}
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000288 	.word	0x20000288
 8001a44:	20000268 	.word	0x20000268

08001a48 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <analog_set_calibrationsize+0x1c>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	7013      	strb	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	20000224 	.word	0x20000224

08001a68 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <analog_set_analogmode+0x1c>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	7013      	strb	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	200003e8 	.word	0x200003e8

08001a88 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	return analogmode;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <analog_read_analogmode+0x14>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200003e8 	.word	0x200003e8

08001aa0 <analog_calibration_start>:

void analog_calibration_start()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001aa6:	2010      	movs	r0, #16
 8001aa8:	f7ff ffde 	bl	8001a68 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	e00d      	b.n	8001ace <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <analog_calibration_start+0x48>)
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <analog_calibration_start+0x4c>)
 8001ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	3301      	adds	r3, #1
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d9ee      	bls.n	8001ab2 <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001ad4:	f7ff ff30 	bl	8001938 <analog_print_max>
	analog_print_min();
 8001ad8:	f7ff ff46 	bl	8001968 <analog_print_min>
	analog_sensor_start();
 8001adc:	f000 f83e 	bl	8001b5c <analog_sensor_start>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000268 	.word	0x20000268
 8001aec:	20000288 	.word	0x20000288

08001af0 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001af4:	2010      	movs	r0, #16
 8001af6:	f7ff ffb7 	bl	8001a68 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001afa:	f000 f829 	bl	8001b50 <analog_stop>
	analog_print_max();
 8001afe:	f7ff ff1b 	bl	8001938 <analog_print_max>
	analog_print_min();
 8001b02:	f7ff ff31 	bl	8001968 <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001b06:	4904      	ldr	r1, [pc, #16]	; (8001b18 <analog_calibration_stop+0x28>)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <analog_calibration_stop+0x2c>)
 8001b0a:	f7ff ff45 	bl	8001998 <analog_set_on_flash>
	flash_write();
 8001b0e:	f001 f835 	bl	8002b7c <flash_write>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000080a 	.word	0x2000080a
 8001b1c:	200007ea 	.word	0x200007ea

08001b20 <analog_init>:

void analog_init()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001b24:	2010      	movs	r0, #16
 8001b26:	f7ff ff8f 	bl	8001a48 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <analog_init+0x20>)
 8001b2c:	f004 fa24 	bl	8005f78 <HAL_ADC_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <analog_init+0x1a>
    {
        Error_Handler();
 8001b36:	f002 f911 	bl	8003d5c <Error_Handler>
    }
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000404 	.word	0x20000404

08001b44 <analog_start>:

void analog_start()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("analog_sensor_start()\r\n");
	#endif
	analog_sensor_start();
 8001b48:	f000 f808 	bl	8001b5c <analog_sensor_start>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <analog_stop>:

void analog_stop()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001b54:	f000 f81a 	bl	8001b8c <analog_sensor_stop>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <analog_sensor_start>:

void analog_sensor_start()
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
	#endif
    sensgettime = 0;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <analog_sensor_start+0x24>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001b66:	2210      	movs	r2, #16
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <analog_sensor_start+0x28>)
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <analog_sensor_start+0x2c>)
 8001b6c:	f004 fa48 	bl	8006000 <HAL_ADC_Start_DMA>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <analog_sensor_start+0x1e>
    {
        Error_Handler();
 8001b76:	f002 f8f1 	bl	8003d5c <Error_Handler>
    }
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000220 	.word	0x20000220
 8001b84:	20000228 	.word	0x20000228
 8001b88:	20000404 	.word	0x20000404

08001b8c <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <analog_sensor_stop+0x10>)
 8001b92:	f004 fb45 	bl	8006220 <HAL_ADC_Stop_DMA>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000404 	.word	0x20000404

08001ba0 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	uint16_t analog_before;
	//! 前の値を保存しておく
	analog_before = analograte[i];
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a2e      	ldr	r2, [pc, #184]	; (8001c68 <analog_sensor_get+0xc8>)
 8001bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb2:	81fb      	strh	r3, [r7, #14]
	//! 割合を取得する
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (float) (analogmax[i] - analogmin[i]);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <analog_sensor_get+0xcc>)
 8001bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <analog_sensor_get+0xd0>)
 8001bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bc6:	1acb      	subs	r3, r1, r3
 8001bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <analog_sensor_get+0xd4>)
 8001bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be0:	4619      	mov	r1, r3
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <analog_sensor_get+0xd0>)
 8001be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bea:	1acb      	subs	r3, r1, r3
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfe:	ee17 2a90 	vmov	r2, s15
 8001c02:	b291      	uxth	r1, r2
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <analog_sensor_get+0xc8>)
 8001c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(float)800, 500);
#endif
	//! ローパスフィルタに通す
	analograte[i] = low_pass_filter(analograte[i], analog_before, ANALOG_LPF_GAMMA);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <analog_sensor_get+0xc8>)
 8001c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc76 	bl	8000504 <__aeabi_ui2d>
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460d      	mov	r5, r1
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc70 	bl	8000504 <__aeabi_ui2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001c60 <analog_sensor_get+0xc0>
 8001c2c:	ec43 2b11 	vmov	d1, r2, r3
 8001c30:	ec45 4b10 	vmov	d0, r4, r5
 8001c34:	f000 ffc8 	bl	8002bc8 <low_pass_filter>
 8001c38:	ec53 2b10 	vmov	r2, r3, d0
 8001c3c:	79fc      	ldrb	r4, [r7, #7]
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ffb1 	bl	8000ba8 <__aeabi_d2uiz>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <analog_sensor_get+0xc8>)
 8001c4c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	return analograte[i];
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <analog_sensor_get+0xc8>)
 8001c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001c68:	200002a8 	.word	0x200002a8
 8001c6c:	20000248 	.word	0x20000248
 8001c70:	20000288 	.word	0x20000288
 8001c74:	20000268 	.word	0x20000268

08001c78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c80:	f000 f804 	bl	8001c8c <analog_get_and_sort>
#endif
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c8c:	b490      	push	{r4, r7}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <analog_get_and_sort+0x120>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d968      	bls.n	8001d6c <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001c9a:	4b44      	ldr	r3, [pc, #272]	; (8001dac <analog_get_and_sort+0x120>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	e05f      	b.n	8001d66 <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	71bb      	strb	r3, [r7, #6]
 8001caa:	e02d      	b.n	8001d08 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001cac:	2300      	movs	r3, #0
 8001cae:	717b      	strb	r3, [r7, #5]
 8001cb0:	e023      	b.n	8001cfa <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001cb2:	797b      	ldrb	r3, [r7, #5]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	493d      	ldr	r1, [pc, #244]	; (8001db0 <analog_get_and_sort+0x124>)
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cc2:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001cc4:	7978      	ldrb	r0, [r7, #5]
 8001cc6:	79f9      	ldrb	r1, [r7, #7]
 8001cc8:	797b      	ldrb	r3, [r7, #5]
 8001cca:	1e5a      	subs	r2, r3, #1
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4c38      	ldr	r4, [pc, #224]	; (8001db0 <analog_get_and_sort+0x124>)
 8001cd0:	0100      	lsls	r0, r0, #4
 8001cd2:	4401      	add	r1, r0
 8001cd4:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <analog_get_and_sort+0x124>)
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001ce4:	797a      	ldrb	r2, [r7, #5]
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	4931      	ldr	r1, [pc, #196]	; (8001db0 <analog_get_and_sort+0x124>)
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	4413      	add	r3, r2
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001cf4:	797b      	ldrb	r3, [r7, #5]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	717b      	strb	r3, [r7, #5]
 8001cfa:	797a      	ldrb	r2, [r7, #5]
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d8d7      	bhi.n	8001cb2 <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001d02:	79bb      	ldrb	r3, [r7, #6]
 8001d04:	3301      	adds	r3, #1
 8001d06:	71bb      	strb	r3, [r7, #6]
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d9ce      	bls.n	8001cac <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4927      	ldr	r1, [pc, #156]	; (8001db0 <analog_get_and_sort+0x124>)
 8001d14:	3240      	adds	r2, #64	; 0x40
 8001d16:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <analog_get_and_sort+0x128>)
 8001d1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <analog_get_and_sort+0x12c>)
 8001d24:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <analog_get_and_sort+0x128>)
 8001d2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	428a      	cmp	r2, r1
 8001d34:	bf38      	it	cc
 8001d36:	460a      	movcc	r2, r1
 8001d38:	b291      	uxth	r1, r2
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <analog_get_and_sort+0x12c>)
 8001d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <analog_get_and_sort+0x130>)
 8001d44:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <analog_get_and_sort+0x128>)
 8001d4c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	428a      	cmp	r2, r1
 8001d54:	bf28      	it	cs
 8001d56:	460a      	movcs	r2, r1
 8001d58:	b291      	uxth	r1, r2
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <analog_get_and_sort+0x130>)
 8001d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	3301      	adds	r3, #1
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d99c      	bls.n	8001ca6 <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	713b      	strb	r3, [r7, #4]
 8001d70:	e00f      	b.n	8001d92 <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001d72:	7939      	ldrb	r1, [r7, #4]
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <analog_get_and_sort+0x120>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	793b      	ldrb	r3, [r7, #4]
 8001d7a:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <analog_get_and_sort+0x134>)
 8001d7c:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d80:	490b      	ldr	r1, [pc, #44]	; (8001db0 <analog_get_and_sort+0x124>)
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	4413      	add	r3, r2
 8001d86:	4602      	mov	r2, r0
 8001d88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d8c:	793b      	ldrb	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	713b      	strb	r3, [r7, #4]
 8001d92:	793b      	ldrb	r3, [r7, #4]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d9ec      	bls.n	8001d72 <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <analog_get_and_sort+0x120>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4a03      	ldr	r2, [pc, #12]	; (8001dac <analog_get_and_sort+0x120>)
 8001da0:	6013      	str	r3, [r2, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc90      	pop	{r4, r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000220 	.word	0x20000220
 8001db0:	200002c8 	.word	0x200002c8
 8001db4:	20000248 	.word	0x20000248
 8001db8:	20000268 	.word	0x20000268
 8001dbc:	20000288 	.word	0x20000288
 8001dc0:	20000228 	.word	0x20000228

08001dc4 <course_init>:
float course_update_section_sampling_time_s;
float course_accel_max;
float __course_debug_target_speed__;

void course_init(unsigned short int samplingtime_ms)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
	imu_init();
 8001dce:	f7ff f96f 	bl	80010b0 <imu_init>
	course_state_count = 0;
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <course_init+0x24>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]
	course_set_update_section_freq_ms(samplingtime_ms);
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f88a 	bl	8001ef4 <course_set_update_section_freq_ms>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200003ea 	.word	0x200003ea

08001dec <course_start>:

void course_start()
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	/* course_start */
	course_state_count = 0;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <course_start+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
	course_accel_max = accel_max_calc(rotary_read_value());
 8001df6:	f7ff fbe7 	bl	80015c8 <rotary_read_value>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fd5b 	bl	80028b8 <accel_max_calc>
 8001e02:	eef0 7a40 	vmov.f32	s15, s0
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <course_start+0x50>)
 8001e08:	edc3 7a00 	vstr	s15, [r3]
	course_reset_section_degree();
 8001e0c:	f000 f89c 	bl	8001f48 <course_reset_section_degree>
	if(rotary_read_playmode() == search)
 8001e10:	f7ff fbc2 	bl	8001598 <rotary_read_playmode>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <course_start+0x32>
	{
		course_reset_flash();
 8001e1a:	f000 fd1d 	bl	8002858 <course_reset_flash>
	}
	if(rotary_read_playmode() == accel)
 8001e1e:	f7ff fbbb 	bl	8001598 <rotary_read_playmode>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d103      	bne.n	8001e30 <course_start+0x44>
	{
		//! 走る前に速度を計算して書き込んでからスタートする
		course_fixing_radius2speed();
 8001e28:	f000 f9ea 	bl	8002200 <course_fixing_radius2speed>
		flash_write();
 8001e2c:	f000 fea6 	bl	8002b7c <flash_write>
	}
	imu_start();
 8001e30:	f7ff f9e6 	bl	8001200 <imu_start>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200003ea 	.word	0x200003ea
 8001e3c:	200003fc 	.word	0x200003fc

08001e40 <course_stop>:

void course_stop()
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == accel)
 8001e44:	f7ff fba8 	bl	8001598 <rotary_read_playmode>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d004      	beq.n	8001e58 <course_stop+0x18>
 8001e4e:	f7ff fba3 	bl	8001598 <rotary_read_playmode>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d101      	bne.n	8001e5c <course_stop+0x1c>
	{
		flash_write();
 8001e58:	f000 fe90 	bl	8002b7c <flash_write>
	}
	imu_stop();
 8001e5c:	f7ff f9d7 	bl	800120e <imu_stop>
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	0000      	movs	r0, r0
	...

08001e68 <course_update_section_degree>:
 * 好きな時に course_section_degree をリセットする
 * course_update_section_degree() は course_update_section_sampling_time_s の周期で常に実行され続ける
 * 
 */
void course_update_section_degree()
{
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	float tmp;
	imu_update_gyro();
 8001e6e:	f7ff f9d7 	bl	8001220 <imu_update_gyro>
	#if D_COURSE_WHILE
	printf("imu_read_yaw() = %7.2lf, course_section_degree = %7.2lf\r\n", imu_read_yaw(), course_section_degree);
	#endif
	course_sampling_count = course_sampling_count + 1;
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <course_update_section_degree+0x80>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <course_update_section_degree+0x80>)
 8001e7c:	801a      	strh	r2, [r3, #0]
	tmp = course_section_degree + imu_read_yaw() * course_update_section_sampling_time_s;
 8001e7e:	f7ff fa83 	bl	8001388 <imu_read_yaw>
 8001e82:	eeb0 7a40 	vmov.f32	s14, s0
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <course_update_section_degree+0x84>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <course_update_section_degree+0x88>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	edc7 7a01 	vstr	s15, [r7, #4]
	course_section_degree = low_pass_filter(tmp, course_section_degree, 0);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fb52 	bl	8000548 <__aeabi_f2d>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <course_update_section_degree+0x88>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb4b 	bl	8000548 <__aeabi_f2d>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001ee0 <course_update_section_degree+0x78>
 8001eba:	ec43 2b11 	vmov	d1, r2, r3
 8001ebe:	ec45 4b10 	vmov	d0, r4, r5
 8001ec2:	f000 fe81 	bl	8002bc8 <low_pass_filter>
 8001ec6:	ec53 2b10 	vmov	r2, r3, d0
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fe8b 	bl	8000be8 <__aeabi_d2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <course_update_section_degree+0x88>)
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001ee8:	200003ec 	.word	0x200003ec
 8001eec:	200003f8 	.word	0x200003f8
 8001ef0:	200003f0 	.word	0x200003f0

08001ef4 <course_set_update_section_freq_ms>:

void course_set_update_section_freq_ms(unsigned short int samplingtime_ms)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
	course_update_section_sampling_time_s = samplingtime_ms / (float) 1000;
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f08:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001f24 <course_set_update_section_freq_ms+0x30>
 8001f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <course_set_update_section_freq_ms+0x34>)
 8001f12:	edc3 7a00 	vstr	s15, [r3]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	447a0000 	.word	0x447a0000
 8001f28:	200003f8 	.word	0x200003f8

08001f2c <course_read_section_degree>:

float course_read_section_degree()
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	return course_section_degree;
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <course_read_section_degree+0x18>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	ee07 3a90 	vmov	s15, r3
}
 8001f38:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	200003f0 	.word	0x200003f0

08001f48 <course_reset_section_degree>:

void course_reset_section_degree()
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	course_sampling_count = 0;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <course_reset_section_degree+0x1c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	801a      	strh	r2, [r3, #0]
	course_section_degree = 0;
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <course_reset_section_degree+0x20>)
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	200003ec 	.word	0x200003ec
 8001f68:	200003f0 	.word	0x200003f0

08001f6c <course_reset>:

void course_reset()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	course_reset_section_degree();
 8001f70:	f7ff ffea 	bl	8001f48 <course_reset_section_degree>
	section_length_reset();
 8001f74:	f002 f844 	bl	8004000 <section_length_reset>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <course_read_curvature_radius>:

float course_read_curvature_radius()
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	return course_section_radius;
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <course_read_curvature_radius+0x18>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	ee07 3a90 	vmov	s15, r3
}
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	200003f4 	.word	0x200003f4

08001f98 <course_read_state_count>:

uint16_t course_read_state_count()
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
    return course_state_count;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <course_read_state_count+0x14>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	200003ea 	.word	0x200003ea

08001fb0 <course_increment_state_count>:
{
	return course_sampling_count;
}

void course_increment_state_count()
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
    course_state_count++;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <course_increment_state_count+0x1c>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <course_increment_state_count+0x1c>)
 8001fbe:	801a      	strh	r2, [r3, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	200003ea 	.word	0x200003ea

08001fd0 <course_calclate_radius>:
 * course_reset()					// 角度と長さ情報をリセットする
 * の順に呼び出す必要がある
 * 
 */
void course_calclate_radius()
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
    float curvature_radius;
	float section_degree, section_length;
	float section_radian;

    //! 現在の区間長を取得する */
	section_length = section_length_read();
 8001fd6:	f002 f83b 	bl	8004050 <section_length_read>
 8001fda:	ed87 0a03 	vstr	s0, [r7, #12]
	//! 現在点を次の区間開始点に設定する
	section_length_set_buffer();
 8001fde:	f002 f86d 	bl	80040bc <section_length_set_buffer>
	//! 角度を取得する
	section_degree = course_read_section_degree();
 8001fe2:	f7ff ffa3 	bl	8001f2c <course_read_section_degree>
 8001fe6:	ed87 0a02 	vstr	s0, [r7, #8]

#if MODE_IMU_CALCLATE
	course_section_length = // course_section_length_from_imu
#endif

	section_radian = section_degree * M_PI / (float) 180;
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	f7fe faac 	bl	8000548 <__aeabi_f2d>
 8001ff0:	a315      	add	r3, pc, #84	; (adr r3, 8002048 <course_calclate_radius+0x78>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe faff 	bl	80005f8 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <course_calclate_radius+0x70>)
 8002008:	f7fe fc20 	bl	800084c <__aeabi_ddiv>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f7fe fde8 	bl	8000be8 <__aeabi_d2f>
 8002018:	4603      	mov	r3, r0
 800201a:	607b      	str	r3, [r7, #4]
	curvature_radius = section_length / (float) section_radian;
 800201c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002020:	ed97 7a01 	vldr	s14, [r7, #4]
 8002024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002028:	edc7 7a00 	vstr	s15, [r7]
	course_section_radius = curvature_radius;
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <course_calclate_radius+0x74>)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6013      	str	r3, [r2, #0]
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	f3af 8000 	nop.w
 8002040:	40668000 	.word	0x40668000
 8002044:	200003f4 	.word	0x200003f4
 8002048:	54442d18 	.word	0x54442d18
 800204c:	400921fb 	.word	0x400921fb

08002050 <course_state_function>:
 * 左センサを読んだら、あるいは、一定区間進んだら course_state_function() を実行するようにプログラムする
 * 探索か二次走行かは course_state_function() 関数内で判断する必要がある
 * 
 */
void course_state_function()
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
	PlayMode pm;
	pm = rotary_read_playmode();
 8002056:	f7ff fa9f 	bl	8001598 <rotary_read_playmode>
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	if(pm == search || pm == motor_free )
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d002      	beq.n	800206a <course_state_function+0x1a>
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d128      	bne.n	80020bc <course_state_function+0x6c>
	{
		flashbuffer.course_state_count_max = course_read_state_count();
 800206a:	f7ff ff95 	bl	8001f98 <course_read_state_count>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <course_state_function+0xa4>)
 8002074:	801a      	strh	r2, [r3, #0]
		course_calclate_radius();
 8002076:	f7ff ffab 	bl	8001fd0 <course_calclate_radius>
		flashbuffer.radius[course_state_count] = course_read_curvature_radius();
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <course_state_function+0xa8>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	461c      	mov	r4, r3
 8002080:	f7ff ff7c 	bl	8001f7c <course_read_curvature_radius>
 8002084:	eef0 7a40 	vmov.f32	s15, s0
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <course_state_function+0xa4>)
 800208a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	edc3 7a00 	vstr	s15, [r3]
		//! 区間長と区間角度と区間半径をリセット
		course_reset();
 8002098:	f7ff ff68 	bl	8001f6c <course_reset>
		//! マーカを読んだ場所の記録
		flashbuffer.marker[course_state_count] = length_read();
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <course_state_function+0xa8>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	461c      	mov	r4, r3
 80020a2:	f000 fe53 	bl	8002d4c <length_read>
 80020a6:	eef0 7a40 	vmov.f32	s15, s0
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <course_state_function+0xa4>)
 80020ac:	f504 533b 	add.w	r3, r4, #11968	; 0x2ec0
 80020b0:	3330      	adds	r3, #48	; 0x30
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3304      	adds	r3, #4
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	}
	if(pm == accel)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d111      	bne.n	80020e6 <course_state_function+0x96>
	{
		float fixed_velocity_target;
		// course_calclate_radius() を呼び出していないのでリセットする必要がある
		section_length_set_buffer();
 80020c2:	f001 fffb 	bl	80040bc <section_length_set_buffer>
		fixed_velocity_target = flashbuffer.speed[course_state_count];
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <course_state_function+0xa8>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <course_state_function+0xa4>)
 80020cc:	3310      	adds	r3, #16
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	603b      	str	r3, [r7, #0]
		__course_debug_target_speed__ = fixed_velocity_target;
 80020d8:	4a08      	ldr	r2, [pc, #32]	; (80020fc <course_state_function+0xac>)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6013      	str	r3, [r2, #0]
		velotrace_set_target_direct(fixed_velocity_target);
 80020de:	ed97 0a00 	vldr	s0, [r7]
 80020e2:	f003 fc9b 	bl	8005a1c <velotrace_set_target_direct>
	}
	course_increment_state_count();
 80020e6:	f7ff ff63 	bl	8001fb0 <course_increment_state_count>
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200007e8 	.word	0x200007e8
 80020f8:	200003ea 	.word	0x200003ea
 80020fc:	20000400 	.word	0x20000400

08002100 <course_d_print>:

void course_d_print()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
#if D_COURSE
	printf("__course_debug_target_speed__ = %2.5f\r\n", __course_debug_target_speed__);
#endif
	encoder_d_print();
 8002104:	f000 fc2c 	bl	8002960 <encoder_d_print>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <course_radius2speed>:

float course_radius2speed(float radius)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed;
	radius = fabs(radius);
 8002116:	edd7 7a01 	vldr	s15, [r7, #4]
 800211a:	eef0 7ae7 	vabs.f32	s15, s15
 800211e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(radius < 0.075f) speed = 1.000f;
 8002122:	edd7 7a01 	vldr	s15, [r7, #4]
 8002126:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80021e8 <course_radius2speed+0xdc>
 800212a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	d503      	bpl.n	800213c <course_radius2speed+0x30>
 8002134:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e04b      	b.n	80021d4 <course_radius2speed+0xc8>
    else if(radius < 0.125f) speed = 1.200f;
 800213c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002140:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d502      	bpl.n	8002154 <course_radius2speed+0x48>
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <course_radius2speed+0xe0>)
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e03f      	b.n	80021d4 <course_radius2speed+0xc8>
    else if(radius < 0.175f) speed = 1.500f;
 8002154:	edd7 7a01 	vldr	s15, [r7, #4]
 8002158:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80021f0 <course_radius2speed+0xe4>
 800215c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	d503      	bpl.n	800216e <course_radius2speed+0x62>
 8002166:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e032      	b.n	80021d4 <course_radius2speed+0xc8>
    else if(radius < 0.45f) speed = 2.00f;
 800216e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002172:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80021f4 <course_radius2speed+0xe8>
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d503      	bpl.n	8002188 <course_radius2speed+0x7c>
 8002180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e025      	b.n	80021d4 <course_radius2speed+0xc8>
    else if(radius < 0.8f) speed = 2.500f;
 8002188:	edd7 7a01 	vldr	s15, [r7, #4]
 800218c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021f8 <course_radius2speed+0xec>
 8002190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	d502      	bpl.n	80021a0 <course_radius2speed+0x94>
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <course_radius2speed+0xf0>)
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e019      	b.n	80021d4 <course_radius2speed+0xc8>
    else if(radius < 1.5f) speed = 2.500f;
 80021a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80021a4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80021a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	d502      	bpl.n	80021b8 <course_radius2speed+0xac>
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <course_radius2speed+0xf0>)
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e00d      	b.n	80021d4 <course_radius2speed+0xc8>
    else if(radius < 2.5f) speed = 2.500f;
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80021c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c8:	d502      	bpl.n	80021d0 <course_radius2speed+0xc4>
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <course_radius2speed+0xf0>)
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e001      	b.n	80021d4 <course_radius2speed+0xc8>
    else speed = 2.50f;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <course_radius2speed+0xf0>)
 80021d2:	60fb      	str	r3, [r7, #12]
	// speed = - (4238566523291511 * pow(radius, 5)) / (double) 633825300114114700748351602688 + (8582934509267735 * pow(radius, 4)) / (double) 77371252455336267181195264 - (1459060547913519 * pow(radius, 3)) / (double) 2361183241434822606848 + (2682365349594497 * pow(radius, 2)) / (double) 2305843009213693952 + (1737420468106149 * radius) / (double) 4503599627370496 + 7057670738269725 / (double) 8796093022208;
	return speed;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	ee07 3a90 	vmov	s15, r3
}
 80021da:	eeb0 0a67 	vmov.f32	s0, s15
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	3d99999a 	.word	0x3d99999a
 80021ec:	3f99999a 	.word	0x3f99999a
 80021f0:	3e333333 	.word	0x3e333333
 80021f4:	3ee66666 	.word	0x3ee66666
 80021f8:	3f4ccccd 	.word	0x3f4ccccd
 80021fc:	40200000 	.word	0x40200000

08002200 <course_fixing_radius2speed>:

void course_fixing_radius2speed()
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	f5ad 4d3b 	sub.w	sp, sp, #47872	; 0xbb00
 8002206:	b0ae      	sub	sp, #184	; 0xb8
 8002208:	af00      	add	r7, sp, #0
	float accel_length;
	uint16_t imax;
	imax = flashbuffer.course_state_count_max;
 800220a:	4bb3      	ldr	r3, [pc, #716]	; (80024d8 <course_fixing_radius2speed+0x2d8>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002212:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8002216:	8013      	strh	r3, [r2, #0]
	/* まず矩形グラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002218:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800221c:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002226:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 800222a:	8013      	strh	r3, [r2, #0]
 800222c:	e03a      	b.n	80022a4 <course_fixing_radius2speed+0xa4>
	{
		uint16_t index;
		index = imax - course_state_size;
 800222e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002232:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800223c:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002248:	f102 0286 	add.w	r2, r2, #134	; 0x86
 800224c:	8013      	strh	r3, [r2, #0]
		flashbuffer.speed[index] = course_radius2speed(flashbuffer.radius[index]);
 800224e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002252:	f103 0386 	add.w	r3, r3, #134	; 0x86
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	4a9f      	ldr	r2, [pc, #636]	; (80024d8 <course_fixing_radius2speed+0x2d8>)
 800225a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3304      	adds	r3, #4
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800226c:	f103 0386 	add.w	r3, r3, #134	; 0x86
 8002270:	881c      	ldrh	r4, [r3, #0]
 8002272:	eeb0 0a67 	vmov.f32	s0, s15
 8002276:	f7ff ff49 	bl	800210c <course_radius2speed>
 800227a:	eef0 7a40 	vmov.f32	s15, s0
 800227e:	4a96      	ldr	r2, [pc, #600]	; (80024d8 <course_fixing_radius2speed+0x2d8>)
 8002280:	f104 0310 	add.w	r3, r4, #16
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3304      	adds	r3, #4
 800228a:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800228e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002292:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	3b01      	subs	r3, #1
 800229a:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800229e:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 80022a2:	8013      	strh	r3, [r2, #0]
 80022a4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022a8:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1bd      	bne.n	800222e <course_fixing_radius2speed+0x2e>
	}

	float accel_glaph[COURSE_STATE_SIZE];
	float decel_glaph[COURSE_STATE_SIZE];

	accel_glaph[0] = 1;
 80022b2:	f507 43d7 	add.w	r3, r7, #27520	; 0x6b80
 80022b6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80022ba:	f6a3 53f4 	subw	r3, r3, #3572	; 0xdf4
 80022be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022c2:	601a      	str	r2, [r3, #0]
	decel_glaph[imax] = 20;
 80022c4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022c8:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 80022d2:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	4a80      	ldr	r2, [pc, #512]	; (80024dc <course_fixing_radius2speed+0x2dc>)
 80022dc:	601a      	str	r2, [r3, #0]

	accel_length = (float) COURSE_SAMPLING_LENGTH * course_accel_max;
 80022de:	4b80      	ldr	r3, [pc, #512]	; (80024e0 <course_fixing_radius2speed+0x2e0>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80024e4 <course_fixing_radius2speed+0x2e4>
 80022e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ec:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022f0:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80022f4:	edc3 7a00 	vstr	s15, [r3]

	/* 加速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80022f8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022fc:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002306:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 800230a:	8013      	strh	r3, [r2, #0]
 800230c:	e0cd      	b.n	80024aa <course_fixing_radius2speed+0x2aa>
	{
		uint16_t index;
		float v1, v2, vref;
		index = imax - course_state_size;
 800230e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002312:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800231c:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002328:	f102 0292 	add.w	r2, r2, #146	; 0x92
 800232c:	8013      	strh	r3, [r2, #0]
		v1 = accel_glaph[index];
 800232e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002332:	f103 0392 	add.w	r3, r3, #146	; 0x92
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 800233c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002340:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800234e:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8002352:	6013      	str	r3, [r2, #0]
		v2 = flashbuffer.speed[index + 1];
 8002354:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002358:	f103 0392 	add.w	r3, r3, #146	; 0x92
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <course_fixing_radius2speed+0x2d8>)
 8002362:	3310      	adds	r3, #16
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002370:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8002374:	6013      	str	r3, [r2, #0]
		if(v2 > v1)
 8002376:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800237a:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800237e:	ed93 7a00 	vldr	s14, [r3]
 8002382:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002386:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	dd5f      	ble.n	8002458 <course_fixing_radius2speed+0x258>
		{
			if(accel_length >= pow(v2 - v1, 2))
 8002398:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800239c:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	4604      	mov	r4, r0
 80023a8:	460d      	mov	r5, r1
 80023aa:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023ae:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80023b2:	ed93 7a00 	vldr	s14, [r3]
 80023b6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023ba:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c6:	ee17 0a90 	vmov	r0, s15
 80023ca:	f7fe f8bd 	bl	8000548 <__aeabi_f2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80024d0 <course_fixing_radius2speed+0x2d0>
 80023d6:	ec43 2b10 	vmov	d0, r2, r3
 80023da:	f00d f973 	bl	800f6c4 <pow>
 80023de:	ec53 2b10 	vmov	r2, r3, d0
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fe fb8d 	bl	8000b04 <__aeabi_dcmpge>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <course_fixing_radius2speed+0x206>
			{
				vref = v2;
 80023f0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023f4:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80023fe:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e032      	b.n	800246c <course_fixing_radius2speed+0x26c>
			}
			else
			{
				vref = sqrt(accel_length) + v1;
 8002406:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800240a:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	f7fe f89a 	bl	8000548 <__aeabi_f2d>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	ec43 2b10 	vmov	d0, r2, r3
 800241c:	f00d f9c2 	bl	800f7a4 <sqrt>
 8002420:	ec55 4b10 	vmov	r4, r5, d0
 8002424:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002428:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	f7fe f88b 	bl	8000548 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	f7fd ff27 	bl	800028c <__adddf3>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fbcf 	bl	8000be8 <__aeabi_d2f>
 800244a:	4603      	mov	r3, r0
 800244c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002450:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e009      	b.n	800246c <course_fixing_radius2speed+0x26c>
			}
		}
		else
		{
			vref = v2;
 8002458:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800245c:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002466:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 800246a:	6013      	str	r3, [r2, #0]
		}
		accel_glaph[index + 1] = vref;
 800246c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002470:	f103 0392 	add.w	r3, r3, #146	; 0x92
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 800247c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002480:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800248c:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002494:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002498:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024a4:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80024a8:	8013      	strh	r3, [r2, #0]
 80024aa:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024ae:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f47f af2a 	bne.w	800230e <course_fixing_radius2speed+0x10e>
		printf("course_fixing_radius2speed() > accel 加速グラフ\r\n");
		#endif
	}

	/* 減速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80024ba:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024be:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024c8:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 80024cc:	8013      	strh	r3, [r2, #0]
 80024ce:	e0cf      	b.n	8002670 <course_fixing_radius2speed+0x470>
 80024d0:	00000000 	.word	0x00000000
 80024d4:	40000000 	.word	0x40000000
 80024d8:	200007e8 	.word	0x200007e8
 80024dc:	41a00000 	.word	0x41a00000
 80024e0:	200003fc 	.word	0x200003fc
 80024e4:	3c23d70a 	.word	0x3c23d70a
	{
		uint16_t index;
		float v2, v3, vref;
		index = course_state_size;
 80024e8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024ec:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024f6:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 80024fa:	8013      	strh	r3, [r2, #0]
		v3 = decel_glaph[index];
 80024fc:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002500:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 800250a:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002518:	f102 0298 	add.w	r2, r2, #152	; 0x98
 800251c:	6013      	str	r3, [r2, #0]
		v2 = flashbuffer.speed[index - 1];
 800251e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002522:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	3b01      	subs	r3, #1
 800252a:	4a95      	ldr	r2, [pc, #596]	; (8002780 <course_fixing_radius2speed+0x580>)
 800252c:	3310      	adds	r3, #16
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3304      	adds	r3, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800253a:	f102 0294 	add.w	r2, r2, #148	; 0x94
 800253e:	6013      	str	r3, [r2, #0]
		if(v2 > v3)
 8002540:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002544:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002550:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	dd5f      	ble.n	8002622 <course_fixing_radius2speed+0x422>
		{
			if(accel_length >= pow(v3 - v2, 2))
 8002562:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002566:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	f7fd ffec 	bl	8000548 <__aeabi_f2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002578:	f103 0398 	add.w	r3, r3, #152	; 0x98
 800257c:	ed93 7a00 	vldr	s14, [r3]
 8002580:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002584:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002590:	ee17 0a90 	vmov	r0, s15
 8002594:	f7fd ffd8 	bl	8000548 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8002778 <course_fixing_radius2speed+0x578>
 80025a0:	ec43 2b10 	vmov	d0, r2, r3
 80025a4:	f00d f88e 	bl	800f6c4 <pow>
 80025a8:	ec53 2b10 	vmov	r2, r3, d0
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fe faa8 	bl	8000b04 <__aeabi_dcmpge>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <course_fixing_radius2speed+0x3d0>
			{
				vref = v2;
 80025ba:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025be:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80025c8:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e032      	b.n	8002636 <course_fixing_radius2speed+0x436>
			}
			else
			{
				vref = sqrt(accel_length) + v3;
 80025d0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025d4:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	f7fd ffb5 	bl	8000548 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ec43 2b10 	vmov	d0, r2, r3
 80025e6:	f00d f8dd 	bl	800f7a4 <sqrt>
 80025ea:	ec55 4b10 	vmov	r4, r5, d0
 80025ee:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025f2:	f103 0398 	add.w	r3, r3, #152	; 0x98
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f7fd ffa6 	bl	8000548 <__aeabi_f2d>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f7fd fe42 	bl	800028c <__adddf3>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe faea 	bl	8000be8 <__aeabi_d2f>
 8002614:	4603      	mov	r3, r0
 8002616:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800261a:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e009      	b.n	8002636 <course_fixing_radius2speed+0x436>
			}
		}
		else
		{
			vref = v2;
 8002622:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002626:	f103 0394 	add.w	r3, r3, #148	; 0x94
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002630:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8002634:	6013      	str	r3, [r2, #0]
		}
		decel_glaph[index - 1] = vref;
 8002636:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800263a:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	3b01      	subs	r3, #1
 8002642:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8002646:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002652:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800265a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800265e:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	3b01      	subs	r3, #1
 8002666:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800266a:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 800266e:	8013      	strh	r3, [r2, #0]
 8002670:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002674:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f47f af34 	bne.w	80024e8 <course_fixing_radius2speed+0x2e8>
		printf("course_fixing_radius2speed() > decel 減速グラフ\r\n");
		#endif
	}

	/* 加速方向と減速方向で遅い方の速度を速度値として記憶させる */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002680:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002684:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800268e:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 8002692:	8013      	strh	r3, [r2, #0]
 8002694:	e061      	b.n	800275a <course_fixing_radius2speed+0x55a>
	{
		uint16_t index;
		index = imax - course_state_size;
 8002696:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800269a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026a4:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026b0:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 80026b4:	8013      	strh	r3, [r2, #0]
		flashbuffer.speed[index] = (accel_glaph[index] > decel_glaph[index]) ? decel_glaph[index] : accel_glaph[index];
 80026b6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026ba:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 80026c4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80026c8:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	ed93 7a00 	vldr	s14, [r3]
 80026d4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026d8:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 80026e2:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f6:	dd0c      	ble.n	8002712 <course_fixing_radius2speed+0x512>
 80026f8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026fc:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8002706:	f6a2 32b4 	subw	r2, r2, #2996	; 0xbb4
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	e00d      	b.n	800272e <course_fixing_radius2speed+0x52e>
 8002712:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002716:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	f507 42d7 	add.w	r2, r7, #27520	; 0x6b80
 8002720:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002724:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002732:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	4911      	ldr	r1, [pc, #68]	; (8002780 <course_fixing_radius2speed+0x580>)
 800273a:	3210      	adds	r2, #16
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	440a      	add	r2, r1
 8002740:	3204      	adds	r2, #4
 8002742:	6013      	str	r3, [r2, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002744:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002748:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	3b01      	subs	r3, #1
 8002750:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002754:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 8002758:	8013      	strh	r3, [r2, #0]
 800275a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800275e:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d196      	bne.n	8002696 <course_fixing_radius2speed+0x496>
		#if D_COURSE
		printf("course_fixing_radius2speed() > speed 速度グラフ\r\n");
		printf("%4d, %7.3f, %7.3f\r\n", index, accel_glaph[index], decel_glaph[index]);
		#endif
	}
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	f507 473b 	add.w	r7, r7, #47872	; 0xbb00
 8002770:	37b8      	adds	r7, #184	; 0xb8
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	bf00      	nop
 8002778:	00000000 	.word	0x00000000
 800277c:	40000000 	.word	0x40000000
 8002780:	200007e8 	.word	0x200007e8

08002784 <course_print_flash>:

void course_print_flash()
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
	uint16_t course_state_size;
	course_state_size = COURSE_STATE_SIZE;
 800278a:	f241 7370 	movw	r3, #6000	; 0x1770
 800278e:	81fb      	strh	r3, [r7, #14]
	//! print flash contents
	while(switch_read_enter())
 8002790:	e054      	b.n	800283c <course_print_flash+0xb8>
	{
		if(course_state_size > 0)
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d04d      	beq.n	8002834 <course_print_flash+0xb0>
		{
			uint16_t index;
			float print_data;
			index = COURSE_STATE_SIZE - course_state_size;
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 800279e:	3310      	adds	r3, #16
 80027a0:	80fb      	strh	r3, [r7, #6]
			switch(rotary_read_value())
 80027a2:	f7fe ff11 	bl	80015c8 <rotary_read_value>
 80027a6:	4603      	mov	r3, r0
 80027a8:	3b0c      	subs	r3, #12
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d830      	bhi.n	8002810 <course_print_flash+0x8c>
 80027ae:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <course_print_flash+0x30>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	08002801 	.word	0x08002801
 80027b8:	080027eb 	.word	0x080027eb
 80027bc:	080027d7 	.word	0x080027d7
 80027c0:	080027c5 	.word	0x080027c5
			{
				case 15:
					print_data = flashbuffer.speed[index];
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4a22      	ldr	r2, [pc, #136]	; (8002850 <course_print_flash+0xcc>)
 80027c8:	3310      	adds	r3, #16
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60bb      	str	r3, [r7, #8]
					break;
 80027d4:	e01d      	b.n	8002812 <course_print_flash+0x8e>
				case 14:
					print_data = flashbuffer.radius[index];
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <course_print_flash+0xcc>)
 80027da:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60bb      	str	r3, [r7, #8]
					break;
 80027e8:	e013      	b.n	8002812 <course_print_flash+0x8e>
				case 13:
					print_data = flashbuffer.marker[index];
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <course_print_flash+0xcc>)
 80027ee:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80027f2:	3330      	adds	r3, #48	; 0x30
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60bb      	str	r3, [r7, #8]
					break;
 80027fe:	e008      	b.n	8002812 <course_print_flash+0x8e>
				case 12:
					print_data = flashbuffer.course_state_count_max;
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <course_print_flash+0xcc>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280c:	edc7 7a02 	vstr	s15, [r7, #8]
				default :
					break;
 8002810:	bf00      	nop
			}
			printf("%6d, %8lf\r\n", index, print_data);
 8002812:	88fc      	ldrh	r4, [r7, #6]
 8002814:	68b8      	ldr	r0, [r7, #8]
 8002816:	f7fd fe97 	bl	8000548 <__aeabi_f2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4621      	mov	r1, r4
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <course_print_flash+0xd0>)
 8002822:	f009 f8db 	bl	800b9dc <iprintf>
			course_state_size = course_state_size - 1;
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	3b01      	subs	r3, #1
 800282a:	81fb      	strh	r3, [r7, #14]
			HAL_Delay(100);
 800282c:	2064      	movs	r0, #100	; 0x64
 800282e:	f003 fb7f 	bl	8005f30 <HAL_Delay>
 8002832:	e003      	b.n	800283c <course_print_flash+0xb8>
		}
		else
		{
			HAL_Delay(1000);
 8002834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002838:	f003 fb7a 	bl	8005f30 <HAL_Delay>
	while(switch_read_enter())
 800283c:	f7fe ffb2 	bl	80017a4 <switch_read_enter>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1a5      	bne.n	8002792 <course_print_flash+0xe>
		}
	}
}
 8002846:	bf00      	nop
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	200007e8 	.word	0x200007e8
 8002854:	080107c0 	.word	0x080107c0

08002858 <course_reset_flash>:

void course_reset_flash()
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 800285e:	f241 7370 	movw	r3, #6000	; 0x1770
 8002862:	80fb      	strh	r3, [r7, #6]
 8002864:	e018      	b.n	8002898 <course_reset_flash+0x40>
	{
		uint16_t index;
		index = COURSE_STATE_SIZE - course_state_size;
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 800286c:	3310      	adds	r3, #16
 800286e:	80bb      	strh	r3, [r7, #4]
		flashbuffer.speed[index] = COURSE_SPEED_DEFAULT;
 8002870:	88bb      	ldrh	r3, [r7, #4]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <course_reset_flash+0x54>)
 8002874:	3310      	adds	r3, #16
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	3304      	adds	r3, #4
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <course_reset_flash+0x58>)
 800287e:	601a      	str	r2, [r3, #0]
		flashbuffer.radius[index] = COURSE_RADIUS_DEFAULT;
 8002880:	88bb      	ldrh	r3, [r7, #4]
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <course_reset_flash+0x54>)
 8002884:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <course_reset_flash+0x5c>)
 8002890:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	3b01      	subs	r3, #1
 8002896:	80fb      	strh	r3, [r7, #6]
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e3      	bne.n	8002866 <course_reset_flash+0xe>
	}
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	200007e8 	.word	0x200007e8
 80028b0:	3f7fbe77 	.word	0x3f7fbe77
 80028b4:	411fd70a 	.word	0x411fd70a

080028b8 <accel_max_calc>:

float accel_max_calc(uint8_t i)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	return ACCEL_MAX_MAX - ((ACCEL_STEP_SIZE - 1) - i) * (float) (ACCEL_MAX_MAX - ACCEL_MAX_MIN) / (float) (ACCEL_STEP_SIZE - 1);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f1c3 030f 	rsb	r3, r3, #15
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80028f8 <accel_max_calc+0x40>
 80028d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d8:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80028dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80028fc <accel_max_calc+0x44>
 80028e4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80028e8:	eeb0 0a67 	vmov.f32	s0, s15
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	3e428f5c 	.word	0x3e428f5c
 80028fc:	3e4ccccd 	.word	0x3e4ccccd

08002900 <encoder_length_left>:
    //! 単位は [ um ]
    return (float) encoder * (float) LENGTHPERPULSE;
}

float encoder_length_left()
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_left * (float) LENGTHPERPULSE;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <encoder_length_left+0x28>)
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002912:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800292c <encoder_length_left+0x2c>
 8002916:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800291a:	eeb0 0a67 	vmov.f32	s0, s15
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	200007dc 	.word	0x200007dc
 800292c:	41076bf7 	.word	0x41076bf7

08002930 <encoder_length_right>:

float encoder_length_right()
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_right * (float) LENGTHPERPULSE;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <encoder_length_right+0x28>)
 8002936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002942:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800295c <encoder_length_right+0x2c>
 8002946:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200007de 	.word	0x200007de
 800295c:	41076bf7 	.word	0x41076bf7

08002960 <encoder_d_print>:

void encoder_d_print()
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %f\r\n", encoder_left, encoder_right, encoder);
    #endif
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <encoder_set>:

/* only read tim10_update_values */
void encoder_set()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <encoder_set+0x58>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	b29b      	uxth	r3, r3
 800297a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800297e:	b29b      	uxth	r3, r3
 8002980:	b21a      	sxth	r2, r3
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <encoder_set+0x5c>)
 8002984:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <encoder_set+0x60>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	b29b      	uxth	r3, r3
 800298c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002990:	b29b      	uxth	r3, r3
 8002992:	b21a      	sxth	r2, r3
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <encoder_set+0x64>)
 8002996:	801a      	strh	r2, [r3, #0]
    //! 単位 [ cnt / sampling_time_s ]
    encoder = (encoder_left + encoder_right) / (float) 2;
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <encoder_set+0x5c>)
 800299a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <encoder_set+0x64>)
 80029a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a6:	4413      	add	r3, r2
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <encoder_set+0x68>)
 80029ba:	edc3 7a00 	vstr	s15, [r3]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 80029be:	f000 f84d 	bl	8002a5c <encoder_set_middle>
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	200007dc 	.word	0x200007dc
 80029d0:	40000400 	.word	0x40000400
 80029d4:	200007de 	.word	0x200007de
 80029d8:	200007e0 	.word	0x200007e0

080029dc <encoder_init>:

void encoder_init()
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
    encoder_left = 0;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <encoder_start+0x38>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <encoder_start+0x3c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <encoder_start+0x40>)
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

    encoder_set_middle();
 8002a04:	f000 f82a 	bl	8002a5c <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002a08:	213c      	movs	r1, #60	; 0x3c
 8002a0a:	4809      	ldr	r0, [pc, #36]	; (8002a30 <encoder_start+0x44>)
 8002a0c:	f006 ff4c 	bl	80098a8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002a10:	213c      	movs	r1, #60	; 0x3c
 8002a12:	4808      	ldr	r0, [pc, #32]	; (8002a34 <encoder_start+0x48>)
 8002a14:	f006 ff48 	bl	80098a8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8002a18:	4807      	ldr	r0, [pc, #28]	; (8002a38 <encoder_start+0x4c>)
 8002a1a:	f006 fc79 	bl	8009310 <HAL_TIM_Base_Start_IT>
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200007dc 	.word	0x200007dc
 8002a28:	200007de 	.word	0x200007de
 8002a2c:	200007e0 	.word	0x200007e0
 8002a30:	20000558 	.word	0x20000558
 8002a34:	200005a0 	.word	0x200005a0
 8002a38:	200006c0 	.word	0x200006c0

08002a3c <encoder_stop>:

void encoder_stop()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8002a40:	213c      	movs	r1, #60	; 0x3c
 8002a42:	4804      	ldr	r0, [pc, #16]	; (8002a54 <encoder_stop+0x18>)
 8002a44:	f006 ffbe 	bl	80099c4 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8002a48:	213c      	movs	r1, #60	; 0x3c
 8002a4a:	4803      	ldr	r0, [pc, #12]	; (8002a58 <encoder_stop+0x1c>)
 8002a4c:	f006 ffba 	bl	80099c4 <HAL_TIM_Encoder_Stop>
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000558 	.word	0x20000558
 8002a58:	200005a0 	.word	0x200005a0

08002a5c <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <encoder_set_middle+0x20>)
 8002a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <encoder_set_middle+0x24>)
 8002a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40000400 	.word	0x40000400

08002a84 <fixed_section_start>:
#include "fixed_section.h"

float fixed_section_speed_now;

void fixed_section_start()
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
    fixed_section_speed_now = flashbuffer.speed[0];
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <fixed_section_start+0x18>)
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <fixed_section_start+0x1c>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200007e8 	.word	0x200007e8
 8002aa0:	200007e4 	.word	0x200007e4

08002aa4 <fixed_section_main>:
 * @brief 一定距離ごとに course_state_function() を呼び出す関数
 * @attention
 * 
 */
void fixed_section_main()
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
    float fixed_length;
    //! 現在点の区間長を取得
    fixed_length = section_length_read();
 8002aaa:	f001 fad1 	bl	8004050 <section_length_read>
 8002aae:	ed87 0a01 	vstr	s0, [r7, #4]
    if(fixed_length >= COURSE_SAMPLING_LENGTH)
 8002ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ab6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ad4 <fixed_section_main+0x30>
 8002aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	da00      	bge.n	8002ac6 <fixed_section_main+0x22>
    {
        //! 現在点の区間長が閾値を超えた時
        course_state_function();
    }
}
 8002ac4:	e001      	b.n	8002aca <fixed_section_main+0x26>
        course_state_function();
 8002ac6:	f7ff fac3 	bl	8002050 <course_state_function>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	3c23d70a 	.word	0x3c23d70a

08002ad8 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8002ae2:	230b      	movs	r3, #11
 8002ae4:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002aea:	2302      	movs	r3, #2
 8002aec:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8002af2:	463a      	mov	r2, r7
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 fd47 	bl	800758c <HAL_FLASHEx_Erase>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8002b06:	b5b0      	push	{r4, r5, r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8002b12:	f004 fbd9 	bl	80072c8 <HAL_FLASH_Unlock>
	flash_erase();
 8002b16:	f7ff ffdf 	bl	8002ad8 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e011      	b.n	8002b44 <flash_writting+0x3e>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	461c      	mov	r4, r3
 8002b2a:	4615      	mov	r5, r2
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	462b      	mov	r3, r5
 8002b30:	6979      	ldr	r1, [r7, #20]
 8002b32:	2000      	movs	r0, #0
 8002b34:	f004 fb74 	bl	8007220 <HAL_FLASH_Program>
		data++;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3e7      	bcc.n	8002b20 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 8002b50:	f004 fbdc 	bl	800730c <HAL_FLASH_Lock>
#endif
}
 8002b54:	bf00      	nop
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bdb0      	pop	{r4, r5, r7, pc}

08002b5c <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	68b8      	ldr	r0, [r7, #8]
 8002b70:	f008 f8a4 	bl	800acbc <memcpy>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <flash_write>:

void flash_write()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <flash_write+0x14>)
 8002b82:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <flash_write+0x18>)
 8002b84:	4904      	ldr	r1, [pc, #16]	; (8002b98 <flash_write+0x1c>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffbd 	bl	8002b06 <flash_writting>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	080e0000 	.word	0x080e0000
 8002b94:	00011984 	.word	0x00011984
 8002b98:	200007e8 	.word	0x200007e8

08002b9c <flash_read>:

void flash_read()
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <flash_read+0x14>)
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <flash_read+0x18>)
 8002ba4:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <flash_read+0x1c>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ffd8 	bl	8002b5c <flash_reading>
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	080e0000 	.word	0x080e0000
 8002bb4:	00011984 	.word	0x00011984
 8002bb8:	200007e8 	.word	0x200007e8

08002bbc <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	flash_read();
 8002bc0:	f7ff ffec 	bl	8002b9c <flash_read>
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <low_pass_filter>:
#include "function.h"

double low_pass_filter(double val, double pre_val, double gamma)
{
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	ed87 0b04 	vstr	d0, [r7, #16]
 8002bd2:	ed87 1b02 	vstr	d1, [r7, #8]
 8002bd6:	ed87 2b00 	vstr	d2, [r7]
	return (double) (gamma * (double) pre_val
 8002bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002be2:	f7fd fd09 	bl	80005f8 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4614      	mov	r4, r2
 8002bec:	461d      	mov	r5, r3
			+ (double) (1 - gamma) * (double) val);
 8002bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	490e      	ldr	r1, [pc, #56]	; (8002c30 <low_pass_filter+0x68>)
 8002bf8:	f7fd fb46 	bl	8000288 <__aeabi_dsub>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c08:	f7fd fcf6 	bl	80005f8 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
	return (double) (gamma * (double) pre_val
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f7fd fb3a 	bl	800028c <__adddf3>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c20:	eeb0 0a47 	vmov.f32	s0, s14
 8002c24:	eef0 0a67 	vmov.f32	s1, s15
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	3ff00000 	.word	0x3ff00000

08002c34 <vector3_creation>:

    return vector_sum;
}

Vector3 vector3_creation(float x, float y, float z)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b08f      	sub	sp, #60	; 0x3c
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	ed87 0a07 	vstr	s0, [r7, #28]
 8002c3e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002c42:	ed87 1a05 	vstr	s2, [r7, #20]
    Vector3 new;
    new.x = x;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	623b      	str	r3, [r7, #32]
    new.y = y;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
    new.z = z;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
    return new;
 8002c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c56:	f107 0220 	add.w	r2, r7, #32
 8002c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	ee06 1a90 	vmov	s13, r1
 8002c6a:	ee07 2a10 	vmov	s14, r2
 8002c6e:	ee07 3a90 	vmov	s15, r3
}
 8002c72:	eeb0 0a66 	vmov.f32	s0, s13
 8002c76:	eef0 0a47 	vmov.f32	s1, s14
 8002c7a:	eeb0 1a67 	vmov.f32	s2, s15
 8002c7e:	373c      	adds	r7, #60	; 0x3c
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <length_set_sampling_time_ms>:
float velocity_left, velocity_right;
float length_update_sampling_time_s;
uint8_t length_started;

void length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
    length_update_sampling_time_s = samplingtime_ms / (float) 1000;
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c9c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002cb8 <length_set_sampling_time_ms+0x30>
 8002ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <length_set_sampling_time_ms+0x34>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	447a0000 	.word	0x447a0000
 8002cbc:	2001217c 	.word	0x2001217c

08002cc0 <length_init>:

void length_init(unsigned short int samplingtime_ms)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	80fb      	strh	r3, [r7, #6]
    length_started = 0;
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <length_init+0x24>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
    length_set_sampling_time_ms(samplingtime_ms);
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ffd8 	bl	8002c88 <length_set_sampling_time_ms>
    encoder_init();
 8002cd8:	f7ff fe80 	bl	80029dc <encoder_init>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20012180 	.word	0x20012180

08002ce8 <length_start>:

void length_start()
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
    if(0 >= length_started)
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <length_start+0x20>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <length_start+0x14>
    {
        length_reset();
 8002cf4:	f000 f816 	bl	8002d24 <length_reset>
        encoder_start();
 8002cf8:	f7ff fe78 	bl	80029ec <encoder_start>
    }
    length_started = 1;
 8002cfc:	4b02      	ldr	r3, [pc, #8]	; (8002d08 <length_start+0x20>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20012180 	.word	0x20012180

08002d0c <length_stop>:

void length_stop()
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
    encoder_stop();
 8002d10:	f7ff fe94 	bl	8002a3c <encoder_stop>
    length_started = 0;
 8002d14:	4b02      	ldr	r3, [pc, #8]	; (8002d20 <length_stop+0x14>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20012180 	.word	0x20012180

08002d24 <length_reset>:
{
    encoder_fin();
}

void length_reset()
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
    length_left = 0;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <length_reset+0x20>)
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <length_reset+0x24>)
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	2001216c 	.word	0x2001216c
 8002d48:	20012170 	.word	0x20012170

08002d4c <length_read>:

float length_read()
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	ed2d 8b02 	vpush	{d8}
 8002d52:	af00      	add	r7, sp, #0
    return (length_read_left() + length_read_right()) / 2;
 8002d54:	f000 f814 	bl	8002d80 <length_read_left>
 8002d58:	eeb0 8a40 	vmov.f32	s16, s0
 8002d5c:	f000 f81e 	bl	8002d9c <length_read_right>
 8002d60:	eef0 7a40 	vmov.f32	s15, s0
 8002d64:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002d68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002d6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d70:	eef0 7a66 	vmov.f32	s15, s13
}
 8002d74:	eeb0 0a67 	vmov.f32	s0, s15
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	ecbd 8b02 	vpop	{d8}
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <length_read_left>:

float length_read_left()
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
    return length_left;
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <length_read_left+0x18>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	ee07 3a90 	vmov	s15, r3
}
 8002d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	2001216c 	.word	0x2001216c

08002d9c <length_read_right>:

float length_read_right()
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
    return length_right;
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <length_read_right+0x18>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	ee07 3a90 	vmov	s15, r3
}
 8002da8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	20012170 	.word	0x20012170

08002db8 <velocity_read>:

float velocity_read()
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	ed2d 8b02 	vpush	{d8}
 8002dbe:	af00      	add	r7, sp, #0
    return (velocity_read_left() + velocity_read_right()) / 2;
 8002dc0:	f000 f814 	bl	8002dec <velocity_read_left>
 8002dc4:	eeb0 8a40 	vmov.f32	s16, s0
 8002dc8:	f000 f81e 	bl	8002e08 <velocity_read_right>
 8002dcc:	eef0 7a40 	vmov.f32	s15, s0
 8002dd0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002dd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ddc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002de0:	eeb0 0a67 	vmov.f32	s0, s15
 8002de4:	46bd      	mov	sp, r7
 8002de6:	ecbd 8b02 	vpop	{d8}
 8002dea:	bd80      	pop	{r7, pc}

08002dec <velocity_read_left>:

float velocity_read_left()
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
    return velocity_left;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <velocity_read_left+0x18>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	ee07 3a90 	vmov	s15, r3
}
 8002df8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	20012174 	.word	0x20012174

08002e08 <velocity_read_right>:

float velocity_read_right()
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
    return velocity_right;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <velocity_read_right+0x18>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	ee07 3a90 	vmov	s15, r3
}
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	20012178 	.word	0x20012178

08002e24 <length_update>:

//! エンコーダの値を読み、速度と距離を計算する
void length_update()
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
    float encoder_left, encoder_right;
    float sampling_time_s;
    sampling_time_s = length_update_sampling_time_s;
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <length_update+0x88>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
    //! エンコーダの値を読み、中央値に戻す
    encoder_set();
 8002e30:	f7ff fd9e 	bl	8002970 <encoder_set>
    encoder_left = encoder_length_left();
 8002e34:	f7ff fd64 	bl	8002900 <encoder_length_left>
 8002e38:	ed87 0a02 	vstr	s0, [r7, #8]
    encoder_right = encoder_length_right();
 8002e3c:	f7ff fd78 	bl	8002930 <encoder_length_right>
 8002e40:	ed87 0a01 	vstr	s0, [r7, #4]
    velocity_left = encoder_left * sampling_time_s;
 8002e44:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e48:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <length_update+0x8c>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]
    velocity_right = encoder_right * sampling_time_s;
 8002e56:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <length_update+0x90>)
 8002e64:	edc3 7a00 	vstr	s15, [r3]
    length_left += velocity_left * sampling_time_s;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <length_update+0x8c>)
 8002e6a:	ed93 7a00 	vldr	s14, [r3]
 8002e6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <length_update+0x94>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <length_update+0x94>)
 8002e82:	edc3 7a00 	vstr	s15, [r3]
    length_right += velocity_right * sampling_time_s;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <length_update+0x90>)
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <length_update+0x98>)
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <length_update+0x98>)
 8002ea0:	edc3 7a00 	vstr	s15, [r3]
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2001217c 	.word	0x2001217c
 8002eb0:	20012174 	.word	0x20012174
 8002eb4:	20012178 	.word	0x20012178
 8002eb8:	2001216c 	.word	0x2001216c
 8002ebc:	20012170 	.word	0x20012170

08002ec0 <length_d_print>:

void length_d_print()
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
    #if D_LENGTH
    printf("length = %10.2f, sampling_time_s = %8.6f\r\n", length_read(), length_update_sampling_time_s);
    //! printf("velocity = %10.2f\r\n", velocity_read());
    #endif
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8002ee2:	f002 f87b 	bl	8004fdc <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 8002ef0:	f002 f978 	bl	80051e4 <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 8002efe:	f001 ffa7 	bl	8004e50 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 8002f0c:	f002 f818 	bl	8004f40 <tim11_main>
	}
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40001000 	.word	0x40001000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800

08002f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f28:	f002 ff90 	bl	8005e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f2c:	f000 f964 	bl	80031f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f30:	f000 fd86 	bl	8003a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f34:	f000 fd64 	bl	8003a00 <MX_DMA_Init>
  MX_ADC1_Init();
 8002f38:	f000 f9c8 	bl	80032cc <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8002f3c:	f000 fd36 	bl	80039ac <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8002f40:	f000 fc5c 	bl	80037fc <MX_TIM6_Init>
  MX_TIM4_Init();
 8002f44:	f000 fbf6 	bl	8003734 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002f48:	f000 fb48 	bl	80035dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002f4c:	f000 fb9e 	bl	800368c <MX_TIM3_Init>
  MX_TIM10_Init();
 8002f50:	f000 fcc0 	bl	80038d4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002f54:	f000 fce2 	bl	800391c <MX_TIM11_Init>
  MX_SPI2_Init();
 8002f58:	f000 fb0a 	bl	8003570 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002f5c:	f000 fada 	bl	8003514 <MX_I2C1_Init>
  MX_TIM14_Init();
 8002f60:	f000 fd00 	bl	8003964 <MX_TIM14_Init>
  MX_TIM7_Init();
 8002f64:	f000 fc80 	bl	8003868 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8002f68:	48a1      	ldr	r0, [pc, #644]	; (80031f0 <main+0x2cc>)
 8002f6a:	f008 fd37 	bl	800b9dc <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8002f6e:	48a1      	ldr	r0, [pc, #644]	; (80031f4 <main+0x2d0>)
 8002f70:	f008 fdba 	bl	800bae8 <puts>

  main_init();
 8002f74:	f000 fe4e 	bl	8003c14 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 8002f78:	f000 feae 	bl	8003cd8 <main_print_while>

		if(switch_read_enter())
 8002f7c:	f7fe fc12 	bl	80017a4 <switch_read_enter>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 812c 	beq.w	80031e0 <main+0x2bc>
		{
			switch(rotary_read())
 8002f88:	f7fe fb2a 	bl	80015e0 <rotary_read>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	f200 8128 	bhi.w	80031e4 <main+0x2c0>
 8002f94:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <main+0x78>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fdd 	.word	0x08002fdd
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	08003035 	.word	0x08003035
 8002fa8:	0800304f 	.word	0x0800304f
 8002fac:	08003069 	.word	0x08003069
 8002fb0:	08003083 	.word	0x08003083
 8002fb4:	0800309d 	.word	0x0800309d
 8002fb8:	080030b7 	.word	0x080030b7
 8002fbc:	080030d1 	.word	0x080030d1
 8002fc0:	080030eb 	.word	0x080030eb
 8002fc4:	08003105 	.word	0x08003105
 8002fc8:	0800311f 	.word	0x0800311f
 8002fcc:	08003139 	.word	0x08003139
 8002fd0:	08003163 	.word	0x08003163
 8002fd4:	0800318d 	.word	0x0800318d
 8002fd8:	080031b7 	.word	0x080031b7
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8002fdc:	f7fe fadc 	bl	8001598 <rotary_read_playmode>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8002fe6:	f7fe fd5b 	bl	8001aa0 <analog_calibration_start>

            while(switch_read_enter())
 8002fea:	e001      	b.n	8002ff0 <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 8002fec:	f000 fea4 	bl	8003d38 <main_main>
            while(switch_read_enter())
 8002ff0:	f7fe fbd8 	bl	80017a4 <switch_read_enter>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f8      	bne.n	8002fec <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 8002ffa:	f7fe fd79 	bl	8001af0 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 8002ffe:	e0f2      	b.n	80031e6 <main+0x2c2>
            running_start();
 8003000:	f000 fe1f 	bl	8003c42 <running_start>
            while(switch_read_enter())
 8003004:	e001      	b.n	800300a <main+0xe6>
              main_main();
 8003006:	f000 fe97 	bl	8003d38 <main_main>
            while(switch_read_enter())
 800300a:	f7fe fbcb 	bl	80017a4 <switch_read_enter>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f8      	bne.n	8003006 <main+0xe2>
            running_stop();
 8003014:	f000 fe4a 	bl	8003cac <running_stop>
          break;	// case 0x00:
 8003018:	e0e5      	b.n	80031e6 <main+0x2c2>
        case 0x01:	// 1
          running_start();
 800301a:	f000 fe12 	bl	8003c42 <running_start>

          while (switch_read_enter())
 800301e:	e001      	b.n	8003024 <main+0x100>
          {
            main_main();
 8003020:	f000 fe8a 	bl	8003d38 <main_main>
          while (switch_read_enter())
 8003024:	f7fe fbbe 	bl	80017a4 <switch_read_enter>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f8      	bne.n	8003020 <main+0xfc>
          }

          running_stop();
 800302e:	f000 fe3d 	bl	8003cac <running_stop>
          break;
 8003032:	e0d8      	b.n	80031e6 <main+0x2c2>
        case 0x02:	// 2
          running_start();
 8003034:	f000 fe05 	bl	8003c42 <running_start>

          while(switch_read_enter())
 8003038:	e001      	b.n	800303e <main+0x11a>
          {
            main_main();
 800303a:	f000 fe7d 	bl	8003d38 <main_main>
          while(switch_read_enter())
 800303e:	f7fe fbb1 	bl	80017a4 <switch_read_enter>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f8      	bne.n	800303a <main+0x116>
          }

          running_stop();
 8003048:	f000 fe30 	bl	8003cac <running_stop>
          break;
 800304c:	e0cb      	b.n	80031e6 <main+0x2c2>
        case 0x03:	// 3
          running_start();
 800304e:	f000 fdf8 	bl	8003c42 <running_start>

          while(switch_read_enter())
 8003052:	e001      	b.n	8003058 <main+0x134>
          {
            main_main();
 8003054:	f000 fe70 	bl	8003d38 <main_main>
          while(switch_read_enter())
 8003058:	f7fe fba4 	bl	80017a4 <switch_read_enter>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f8      	bne.n	8003054 <main+0x130>
          }

          running_stop();
 8003062:	f000 fe23 	bl	8003cac <running_stop>
          break;
 8003066:	e0be      	b.n	80031e6 <main+0x2c2>
        case 0x04:	// 4
          running_start();
 8003068:	f000 fdeb 	bl	8003c42 <running_start>

          while(switch_read_enter())
 800306c:	e001      	b.n	8003072 <main+0x14e>
          {
            main_main();
 800306e:	f000 fe63 	bl	8003d38 <main_main>
          while(switch_read_enter())
 8003072:	f7fe fb97 	bl	80017a4 <switch_read_enter>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f8      	bne.n	800306e <main+0x14a>
          }

          running_stop();
 800307c:	f000 fe16 	bl	8003cac <running_stop>
          break;
 8003080:	e0b1      	b.n	80031e6 <main+0x2c2>
        case 0x05:	// 5
          running_start();
 8003082:	f000 fdde 	bl	8003c42 <running_start>

          while(switch_read_enter())
 8003086:	e001      	b.n	800308c <main+0x168>
          {
            main_main();
 8003088:	f000 fe56 	bl	8003d38 <main_main>
          while(switch_read_enter())
 800308c:	f7fe fb8a 	bl	80017a4 <switch_read_enter>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f8      	bne.n	8003088 <main+0x164>
          }

          running_stop();
 8003096:	f000 fe09 	bl	8003cac <running_stop>
          break;
 800309a:	e0a4      	b.n	80031e6 <main+0x2c2>
        case 0x06:	// 6
          running_start();
 800309c:	f000 fdd1 	bl	8003c42 <running_start>

          while(switch_read_enter())
 80030a0:	e001      	b.n	80030a6 <main+0x182>
          {
            main_main();
 80030a2:	f000 fe49 	bl	8003d38 <main_main>
          while(switch_read_enter())
 80030a6:	f7fe fb7d 	bl	80017a4 <switch_read_enter>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f8      	bne.n	80030a2 <main+0x17e>
          }

          running_stop();
 80030b0:	f000 fdfc 	bl	8003cac <running_stop>
          break;
 80030b4:	e097      	b.n	80031e6 <main+0x2c2>
        case 0x07:	// 7
          running_start();
 80030b6:	f000 fdc4 	bl	8003c42 <running_start>

          while(switch_read_enter())
 80030ba:	e001      	b.n	80030c0 <main+0x19c>
          {
            main_main();
 80030bc:	f000 fe3c 	bl	8003d38 <main_main>
          while(switch_read_enter())
 80030c0:	f7fe fb70 	bl	80017a4 <switch_read_enter>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f8      	bne.n	80030bc <main+0x198>
          }

          running_stop();
 80030ca:	f000 fdef 	bl	8003cac <running_stop>
          break;
 80030ce:	e08a      	b.n	80031e6 <main+0x2c2>
        case 0x08:	// 8
          running_start();
 80030d0:	f000 fdb7 	bl	8003c42 <running_start>

          while(switch_read_enter())
 80030d4:	e001      	b.n	80030da <main+0x1b6>
          {
            main_main();
 80030d6:	f000 fe2f 	bl	8003d38 <main_main>
          while(switch_read_enter())
 80030da:	f7fe fb63 	bl	80017a4 <switch_read_enter>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f8      	bne.n	80030d6 <main+0x1b2>
          }

          running_stop();
 80030e4:	f000 fde2 	bl	8003cac <running_stop>
          break;
 80030e8:	e07d      	b.n	80031e6 <main+0x2c2>
        case 0x09:	// 9
          running_start();
 80030ea:	f000 fdaa 	bl	8003c42 <running_start>

          while(switch_read_enter())
 80030ee:	e001      	b.n	80030f4 <main+0x1d0>
          {
            main_main();
 80030f0:	f000 fe22 	bl	8003d38 <main_main>
          while(switch_read_enter())
 80030f4:	f7fe fb56 	bl	80017a4 <switch_read_enter>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f8      	bne.n	80030f0 <main+0x1cc>
          }

          running_stop();
 80030fe:	f000 fdd5 	bl	8003cac <running_stop>
          break;
 8003102:	e070      	b.n	80031e6 <main+0x2c2>
        case 0x0A:	// A
          running_start();
 8003104:	f000 fd9d 	bl	8003c42 <running_start>

          while(switch_read_enter())
 8003108:	e001      	b.n	800310e <main+0x1ea>
          {
            main_main();
 800310a:	f000 fe15 	bl	8003d38 <main_main>
          while(switch_read_enter())
 800310e:	f7fe fb49 	bl	80017a4 <switch_read_enter>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f8      	bne.n	800310a <main+0x1e6>
          }

          running_stop();
 8003118:	f000 fdc8 	bl	8003cac <running_stop>
          break;
 800311c:	e063      	b.n	80031e6 <main+0x2c2>
        case 0x0B:	// B
          running_start();
 800311e:	f000 fd90 	bl	8003c42 <running_start>

          while(switch_read_enter())
 8003122:	e001      	b.n	8003128 <main+0x204>
          {
            main_main();
 8003124:	f000 fe08 	bl	8003d38 <main_main>
          while(switch_read_enter())
 8003128:	f7fe fb3c 	bl	80017a4 <switch_read_enter>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f8      	bne.n	8003124 <main+0x200>
          }

          running_stop();
 8003132:	f000 fdbb 	bl	8003cac <running_stop>
          break;
 8003136:	e056      	b.n	80031e6 <main+0x2c2>
        case 0x0C:	// C
          if(rotary_read_playmode() == flash_print)
 8003138:	f7fe fa2e 	bl	8001598 <rotary_read_playmode>
 800313c:	4603      	mov	r3, r0
 800313e:	2b0f      	cmp	r3, #15
 8003140:	d102      	bne.n	8003148 <main+0x224>
          {
            course_print_flash();
 8003142:	f7ff fb1f 	bl	8002784 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003146:	e04e      	b.n	80031e6 <main+0x2c2>
            running_start();
 8003148:	f000 fd7b 	bl	8003c42 <running_start>
            while(switch_read_enter())
 800314c:	e001      	b.n	8003152 <main+0x22e>
              main_main();
 800314e:	f000 fdf3 	bl	8003d38 <main_main>
            while(switch_read_enter())
 8003152:	f7fe fb27 	bl	80017a4 <switch_read_enter>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f8      	bne.n	800314e <main+0x22a>
            running_stop();
 800315c:	f000 fda6 	bl	8003cac <running_stop>
          break;
 8003160:	e041      	b.n	80031e6 <main+0x2c2>
        case 0x0D:	// D
          if(rotary_read_playmode() == flash_print)
 8003162:	f7fe fa19 	bl	8001598 <rotary_read_playmode>
 8003166:	4603      	mov	r3, r0
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d102      	bne.n	8003172 <main+0x24e>
          {
            course_print_flash();
 800316c:	f7ff fb0a 	bl	8002784 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003170:	e039      	b.n	80031e6 <main+0x2c2>
            running_start();
 8003172:	f000 fd66 	bl	8003c42 <running_start>
            while(switch_read_enter())
 8003176:	e001      	b.n	800317c <main+0x258>
              main_main();
 8003178:	f000 fdde 	bl	8003d38 <main_main>
            while(switch_read_enter())
 800317c:	f7fe fb12 	bl	80017a4 <switch_read_enter>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f8      	bne.n	8003178 <main+0x254>
            running_stop();
 8003186:	f000 fd91 	bl	8003cac <running_stop>
          break;
 800318a:	e02c      	b.n	80031e6 <main+0x2c2>
        case 0x0E:	// E
          if(rotary_read_playmode() == flash_print)
 800318c:	f7fe fa04 	bl	8001598 <rotary_read_playmode>
 8003190:	4603      	mov	r3, r0
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d102      	bne.n	800319c <main+0x278>
          {
            course_print_flash();
 8003196:	f7ff faf5 	bl	8002784 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 800319a:	e024      	b.n	80031e6 <main+0x2c2>
            running_start();
 800319c:	f000 fd51 	bl	8003c42 <running_start>
            while(switch_read_enter())
 80031a0:	e001      	b.n	80031a6 <main+0x282>
              main_main();
 80031a2:	f000 fdc9 	bl	8003d38 <main_main>
            while(switch_read_enter())
 80031a6:	f7fe fafd 	bl	80017a4 <switch_read_enter>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f8      	bne.n	80031a2 <main+0x27e>
            running_stop();
 80031b0:	f000 fd7c 	bl	8003cac <running_stop>
          break;
 80031b4:	e017      	b.n	80031e6 <main+0x2c2>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 80031b6:	f7fe f9ef 	bl	8001598 <rotary_read_playmode>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	d102      	bne.n	80031c6 <main+0x2a2>
          {
            course_print_flash();
 80031c0:	f7ff fae0 	bl	8002784 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80031c4:	e00f      	b.n	80031e6 <main+0x2c2>
            running_start();
 80031c6:	f000 fd3c 	bl	8003c42 <running_start>
            while(switch_read_enter())
 80031ca:	e001      	b.n	80031d0 <main+0x2ac>
              main_main();
 80031cc:	f000 fdb4 	bl	8003d38 <main_main>
            while(switch_read_enter())
 80031d0:	f7fe fae8 	bl	80017a4 <switch_read_enter>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f8      	bne.n	80031cc <main+0x2a8>
            running_stop();
 80031da:	f000 fd67 	bl	8003cac <running_stop>
          break;
 80031de:	e002      	b.n	80031e6 <main+0x2c2>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 80031e0:	bf00      	nop
 80031e2:	e000      	b.n	80031e6 <main+0x2c2>
          break;
 80031e4:	bf00      	nop
    HAL_Delay(500);
 80031e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031ea:	f002 fea1 	bl	8005f30 <HAL_Delay>
    main_print_while();
 80031ee:	e6c3      	b.n	8002f78 <main+0x54>
 80031f0:	080107cc 	.word	0x080107cc
 80031f4:	080107d4 	.word	0x080107d4

080031f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b094      	sub	sp, #80	; 0x50
 80031fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031fe:	f107 0320 	add.w	r3, r7, #32
 8003202:	2230      	movs	r2, #48	; 0x30
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f007 fd66 	bl	800acd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <SystemClock_Config+0xcc>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <SystemClock_Config+0xcc>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	6413      	str	r3, [r2, #64]	; 0x40
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <SystemClock_Config+0xcc>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <SystemClock_Config+0xd0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <SystemClock_Config+0xd0>)
 8003242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <SystemClock_Config+0xd0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003254:	2301      	movs	r3, #1
 8003256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003258:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800325e:	2302      	movs	r3, #2
 8003260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003268:	2308      	movs	r3, #8
 800326a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800326c:	23a8      	movs	r3, #168	; 0xa8
 800326e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003270:	2302      	movs	r3, #2
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003274:	2304      	movs	r3, #4
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003278:	f107 0320 	add.w	r3, r7, #32
 800327c:	4618      	mov	r0, r3
 800327e:	f004 fdb9 	bl	8007df4 <HAL_RCC_OscConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003288:	f000 fd68 	bl	8003d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800328c:	230f      	movs	r3, #15
 800328e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003290:	2302      	movs	r3, #2
 8003292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003298:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800329c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800329e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032a4:	f107 030c 	add.w	r3, r7, #12
 80032a8:	2105      	movs	r1, #5
 80032aa:	4618      	mov	r0, r3
 80032ac:	f005 f81a 	bl	80082e4 <HAL_RCC_ClockConfig>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80032b6:	f000 fd51 	bl	8003d5c <Error_Handler>
  }
}
 80032ba:	bf00      	nop
 80032bc:	3750      	adds	r7, #80	; 0x50
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000

080032cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032d2:	463b      	mov	r3, r7
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032de:	4b8a      	ldr	r3, [pc, #552]	; (8003508 <MX_ADC1_Init+0x23c>)
 80032e0:	4a8a      	ldr	r2, [pc, #552]	; (800350c <MX_ADC1_Init+0x240>)
 80032e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032e4:	4b88      	ldr	r3, [pc, #544]	; (8003508 <MX_ADC1_Init+0x23c>)
 80032e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032ec:	4b86      	ldr	r3, [pc, #536]	; (8003508 <MX_ADC1_Init+0x23c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80032f2:	4b85      	ldr	r3, [pc, #532]	; (8003508 <MX_ADC1_Init+0x23c>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80032f8:	4b83      	ldr	r3, [pc, #524]	; (8003508 <MX_ADC1_Init+0x23c>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032fe:	4b82      	ldr	r3, [pc, #520]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003306:	4b80      	ldr	r3, [pc, #512]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003308:	2200      	movs	r2, #0
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800330c:	4b7e      	ldr	r3, [pc, #504]	; (8003508 <MX_ADC1_Init+0x23c>)
 800330e:	4a80      	ldr	r2, [pc, #512]	; (8003510 <MX_ADC1_Init+0x244>)
 8003310:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8003318:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <MX_ADC1_Init+0x23c>)
 800331a:	2210      	movs	r2, #16
 800331c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003326:	4b78      	ldr	r3, [pc, #480]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003328:	2201      	movs	r2, #1
 800332a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800332c:	4876      	ldr	r0, [pc, #472]	; (8003508 <MX_ADC1_Init+0x23c>)
 800332e:	f002 fe23 	bl	8005f78 <HAL_ADC_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003338:	f000 fd10 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800333c:	2309      	movs	r3, #9
 800333e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003340:	2301      	movs	r3, #1
 8003342:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003344:	2303      	movs	r3, #3
 8003346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003348:	463b      	mov	r3, r7
 800334a:	4619      	mov	r1, r3
 800334c:	486e      	ldr	r0, [pc, #440]	; (8003508 <MX_ADC1_Init+0x23c>)
 800334e:	f002 ffd5 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003358:	f000 fd00 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800335c:	230a      	movs	r3, #10
 800335e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003360:	2302      	movs	r3, #2
 8003362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003364:	463b      	mov	r3, r7
 8003366:	4619      	mov	r1, r3
 8003368:	4867      	ldr	r0, [pc, #412]	; (8003508 <MX_ADC1_Init+0x23c>)
 800336a:	f002 ffc7 	bl	80062fc <HAL_ADC_ConfigChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003374:	f000 fcf2 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003378:	2308      	movs	r3, #8
 800337a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800337c:	2303      	movs	r3, #3
 800337e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003380:	463b      	mov	r3, r7
 8003382:	4619      	mov	r1, r3
 8003384:	4860      	ldr	r0, [pc, #384]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003386:	f002 ffb9 	bl	80062fc <HAL_ADC_ConfigChannel>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003390:	f000 fce4 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003394:	230b      	movs	r3, #11
 8003396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003398:	2304      	movs	r3, #4
 800339a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800339c:	463b      	mov	r3, r7
 800339e:	4619      	mov	r1, r3
 80033a0:	4859      	ldr	r0, [pc, #356]	; (8003508 <MX_ADC1_Init+0x23c>)
 80033a2:	f002 ffab 	bl	80062fc <HAL_ADC_ConfigChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80033ac:	f000 fcd6 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80033b0:	230f      	movs	r3, #15
 80033b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80033b4:	2305      	movs	r3, #5
 80033b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033b8:	463b      	mov	r3, r7
 80033ba:	4619      	mov	r1, r3
 80033bc:	4852      	ldr	r0, [pc, #328]	; (8003508 <MX_ADC1_Init+0x23c>)
 80033be:	f002 ff9d 	bl	80062fc <HAL_ADC_ConfigChannel>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80033c8:	f000 fcc8 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80033cc:	230c      	movs	r3, #12
 80033ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80033d0:	2306      	movs	r3, #6
 80033d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033d4:	463b      	mov	r3, r7
 80033d6:	4619      	mov	r1, r3
 80033d8:	484b      	ldr	r0, [pc, #300]	; (8003508 <MX_ADC1_Init+0x23c>)
 80033da:	f002 ff8f 	bl	80062fc <HAL_ADC_ConfigChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80033e4:	f000 fcba 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80033e8:	230e      	movs	r3, #14
 80033ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80033ec:	2307      	movs	r3, #7
 80033ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033f0:	463b      	mov	r3, r7
 80033f2:	4619      	mov	r1, r3
 80033f4:	4844      	ldr	r0, [pc, #272]	; (8003508 <MX_ADC1_Init+0x23c>)
 80033f6:	f002 ff81 	bl	80062fc <HAL_ADC_ConfigChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003400:	f000 fcac 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003404:	230d      	movs	r3, #13
 8003406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003408:	2308      	movs	r3, #8
 800340a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800340c:	463b      	mov	r3, r7
 800340e:	4619      	mov	r1, r3
 8003410:	483d      	ldr	r0, [pc, #244]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003412:	f002 ff73 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800341c:	f000 fc9e 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003420:	2307      	movs	r3, #7
 8003422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003424:	2309      	movs	r3, #9
 8003426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003428:	463b      	mov	r3, r7
 800342a:	4619      	mov	r1, r3
 800342c:	4836      	ldr	r0, [pc, #216]	; (8003508 <MX_ADC1_Init+0x23c>)
 800342e:	f002 ff65 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003438:	f000 fc90 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800343c:	2300      	movs	r3, #0
 800343e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003440:	230a      	movs	r3, #10
 8003442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003444:	463b      	mov	r3, r7
 8003446:	4619      	mov	r1, r3
 8003448:	482f      	ldr	r0, [pc, #188]	; (8003508 <MX_ADC1_Init+0x23c>)
 800344a:	f002 ff57 	bl	80062fc <HAL_ADC_ConfigChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8003454:	f000 fc82 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003458:	2306      	movs	r3, #6
 800345a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800345c:	230b      	movs	r3, #11
 800345e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003460:	463b      	mov	r3, r7
 8003462:	4619      	mov	r1, r3
 8003464:	4828      	ldr	r0, [pc, #160]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003466:	f002 ff49 	bl	80062fc <HAL_ADC_ConfigChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8003470:	f000 fc74 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003474:	2301      	movs	r3, #1
 8003476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003478:	230c      	movs	r3, #12
 800347a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800347c:	463b      	mov	r3, r7
 800347e:	4619      	mov	r1, r3
 8003480:	4821      	ldr	r0, [pc, #132]	; (8003508 <MX_ADC1_Init+0x23c>)
 8003482:	f002 ff3b 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800348c:	f000 fc66 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003490:	2305      	movs	r3, #5
 8003492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003494:	230d      	movs	r3, #13
 8003496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003498:	463b      	mov	r3, r7
 800349a:	4619      	mov	r1, r3
 800349c:	481a      	ldr	r0, [pc, #104]	; (8003508 <MX_ADC1_Init+0x23c>)
 800349e:	f002 ff2d 	bl	80062fc <HAL_ADC_ConfigChannel>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80034a8:	f000 fc58 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80034ac:	2302      	movs	r3, #2
 80034ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80034b0:	230e      	movs	r3, #14
 80034b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034b4:	463b      	mov	r3, r7
 80034b6:	4619      	mov	r1, r3
 80034b8:	4813      	ldr	r0, [pc, #76]	; (8003508 <MX_ADC1_Init+0x23c>)
 80034ba:	f002 ff1f 	bl	80062fc <HAL_ADC_ConfigChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80034c4:	f000 fc4a 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80034c8:	2304      	movs	r3, #4
 80034ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80034cc:	230f      	movs	r3, #15
 80034ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d0:	463b      	mov	r3, r7
 80034d2:	4619      	mov	r1, r3
 80034d4:	480c      	ldr	r0, [pc, #48]	; (8003508 <MX_ADC1_Init+0x23c>)
 80034d6:	f002 ff11 	bl	80062fc <HAL_ADC_ConfigChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 80034e0:	f000 fc3c 	bl	8003d5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80034e4:	2303      	movs	r3, #3
 80034e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 80034e8:	2310      	movs	r3, #16
 80034ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034ec:	463b      	mov	r3, r7
 80034ee:	4619      	mov	r1, r3
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_ADC1_Init+0x23c>)
 80034f2:	f002 ff03 	bl	80062fc <HAL_ADC_ConfigChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 80034fc:	f000 fc2e 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000404 	.word	0x20000404
 800350c:	40012000 	.word	0x40012000
 8003510:	0f000001 	.word	0x0f000001

08003514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <MX_I2C1_Init+0x50>)
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <MX_I2C1_Init+0x54>)
 800351c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <MX_I2C1_Init+0x50>)
 8003520:	4a12      	ldr	r2, [pc, #72]	; (800356c <MX_I2C1_Init+0x58>)
 8003522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <MX_I2C1_Init+0x50>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <MX_I2C1_Init+0x50>)
 800352c:	2200      	movs	r2, #0
 800352e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <MX_I2C1_Init+0x50>)
 8003532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003536:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <MX_I2C1_Init+0x50>)
 800353a:	2200      	movs	r2, #0
 800353c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <MX_I2C1_Init+0x50>)
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <MX_I2C1_Init+0x50>)
 8003546:	2200      	movs	r2, #0
 8003548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <MX_I2C1_Init+0x50>)
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003550:	4804      	ldr	r0, [pc, #16]	; (8003564 <MX_I2C1_Init+0x50>)
 8003552:	f004 fb0b 	bl	8007b6c <HAL_I2C_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800355c:	f000 fbfe 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200004ac 	.word	0x200004ac
 8003568:	40005400 	.word	0x40005400
 800356c:	000186a0 	.word	0x000186a0

08003570 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <MX_SPI2_Init+0x64>)
 8003576:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <MX_SPI2_Init+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <MX_SPI2_Init+0x64>)
 800357c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003580:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <MX_SPI2_Init+0x64>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <MX_SPI2_Init+0x64>)
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <MX_SPI2_Init+0x64>)
 8003590:	2202      	movs	r2, #2
 8003592:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <MX_SPI2_Init+0x64>)
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <MX_SPI2_Init+0x64>)
 800359c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <MX_SPI2_Init+0x64>)
 80035a4:	2228      	movs	r2, #40	; 0x28
 80035a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <MX_SPI2_Init+0x64>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <MX_SPI2_Init+0x64>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <MX_SPI2_Init+0x64>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_SPI2_Init+0x64>)
 80035bc:	220a      	movs	r2, #10
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035c0:	4804      	ldr	r0, [pc, #16]	; (80035d4 <MX_SPI2_Init+0x64>)
 80035c2:	f005 f8ad 	bl	8008720 <HAL_SPI_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80035cc:	f000 fbc6 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000500 	.word	0x20000500
 80035d8:	40003800 	.word	0x40003800

080035dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	; 0x30
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f007 fb74 	bl	800acd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <MX_TIM1_Init+0xa8>)
 80035fa:	4a23      	ldr	r2, [pc, #140]	; (8003688 <MX_TIM1_Init+0xac>)
 80035fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <MX_TIM1_Init+0xa8>)
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003604:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <MX_TIM1_Init+0xa8>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <MX_TIM1_Init+0xa8>)
 800360c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003610:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <MX_TIM1_Init+0xa8>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <MX_TIM1_Init+0xa8>)
 800361a:	2200      	movs	r2, #0
 800361c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <MX_TIM1_Init+0xa8>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003624:	2303      	movs	r3, #3
 8003626:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800363c:	2301      	movs	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003640:	2300      	movs	r3, #0
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003648:	f107 030c 	add.w	r3, r7, #12
 800364c:	4619      	mov	r1, r3
 800364e:	480d      	ldr	r0, [pc, #52]	; (8003684 <MX_TIM1_Init+0xa8>)
 8003650:	f006 f884 	bl	800975c <HAL_TIM_Encoder_Init>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800365a:	f000 fb7f 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4806      	ldr	r0, [pc, #24]	; (8003684 <MX_TIM1_Init+0xa8>)
 800366c:	f006 feaa 	bl	800a3c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003676:	f000 fb71 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800367a:	bf00      	nop
 800367c:	3730      	adds	r7, #48	; 0x30
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000558 	.word	0x20000558
 8003688:	40010000 	.word	0x40010000

0800368c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	; 0x30
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f007 fb1c 	bl	800acd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <MX_TIM3_Init+0xa0>)
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <MX_TIM3_Init+0xa4>)
 80036ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <MX_TIM3_Init+0xa0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <MX_TIM3_Init+0xa0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <MX_TIM3_Init+0xa0>)
 80036bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c2:	4b1a      	ldr	r3, [pc, #104]	; (800372c <MX_TIM3_Init+0xa0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <MX_TIM3_Init+0xa0>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036ce:	2303      	movs	r3, #3
 80036d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036e6:	2301      	movs	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <MX_TIM3_Init+0xa0>)
 80036fa:	f006 f82f 	bl	800975c <HAL_TIM_Encoder_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003704:	f000 fb2a 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <MX_TIM3_Init+0xa0>)
 8003716:	f006 fe55 	bl	800a3c4 <HAL_TIMEx_MasterConfigSynchronization>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003720:	f000 fb1c 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	3730      	adds	r7, #48	; 0x30
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200005a0 	.word	0x200005a0
 8003730:	40000400 	.word	0x40000400

08003734 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373a:	f107 0320 	add.w	r3, r7, #32
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	60da      	str	r2, [r3, #12]
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	615a      	str	r2, [r3, #20]
 8003754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <MX_TIM4_Init+0xc0>)
 8003758:	4a27      	ldr	r2, [pc, #156]	; (80037f8 <MX_TIM4_Init+0xc4>)
 800375a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <MX_TIM4_Init+0xc0>)
 800375e:	2202      	movs	r2, #2
 8003760:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <MX_TIM4_Init+0xc0>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <MX_TIM4_Init+0xc0>)
 800376a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800376e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <MX_TIM4_Init+0xc0>)
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003776:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <MX_TIM4_Init+0xc0>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800377c:	481d      	ldr	r0, [pc, #116]	; (80037f4 <MX_TIM4_Init+0xc0>)
 800377e:	f005 fe66 	bl	800944e <HAL_TIM_PWM_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003788:	f000 fae8 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003790:	2300      	movs	r3, #0
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003794:	f107 0320 	add.w	r3, r7, #32
 8003798:	4619      	mov	r1, r3
 800379a:	4816      	ldr	r0, [pc, #88]	; (80037f4 <MX_TIM4_Init+0xc0>)
 800379c:	f006 fe12 	bl	800a3c4 <HAL_TIMEx_MasterConfigSynchronization>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80037a6:	f000 fad9 	bl	8003d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037aa:	2360      	movs	r3, #96	; 0x60
 80037ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	2200      	movs	r2, #0
 80037be:	4619      	mov	r1, r3
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <MX_TIM4_Init+0xc0>)
 80037c2:	f006 fa9f 	bl	8009d04 <HAL_TIM_PWM_ConfigChannel>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80037cc:	f000 fac6 	bl	8003d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2204      	movs	r2, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4807      	ldr	r0, [pc, #28]	; (80037f4 <MX_TIM4_Init+0xc0>)
 80037d8:	f006 fa94 	bl	8009d04 <HAL_TIM_PWM_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80037e2:	f000 fabb 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80037e6:	4803      	ldr	r0, [pc, #12]	; (80037f4 <MX_TIM4_Init+0xc0>)
 80037e8:	f001 f8f2 	bl	80049d0 <HAL_TIM_MspPostInit>

}
 80037ec:	bf00      	nop
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200005e8 	.word	0x200005e8
 80037f8:	40000800 	.word	0x40000800

080037fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003802:	463b      	mov	r3, r7
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <MX_TIM6_Init+0x64>)
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <MX_TIM6_Init+0x68>)
 800380e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <MX_TIM6_Init+0x64>)
 8003812:	2204      	movs	r2, #4
 8003814:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <MX_TIM6_Init+0x64>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 800381c:	4b10      	ldr	r3, [pc, #64]	; (8003860 <MX_TIM6_Init+0x64>)
 800381e:	f248 323f 	movw	r2, #33599	; 0x833f
 8003822:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <MX_TIM6_Init+0x64>)
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800382a:	480d      	ldr	r0, [pc, #52]	; (8003860 <MX_TIM6_Init+0x64>)
 800382c:	f005 fd20 	bl	8009270 <HAL_TIM_Base_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003836:	f000 fa91 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003842:	463b      	mov	r3, r7
 8003844:	4619      	mov	r1, r3
 8003846:	4806      	ldr	r0, [pc, #24]	; (8003860 <MX_TIM6_Init+0x64>)
 8003848:	f006 fdbc 	bl	800a3c4 <HAL_TIMEx_MasterConfigSynchronization>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003852:	f000 fa83 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000630 	.word	0x20000630
 8003864:	40001000 	.word	0x40001000

08003868 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800386e:	463b      	mov	r3, r7
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <MX_TIM7_Init+0x64>)
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <MX_TIM7_Init+0x68>)
 800387a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <MX_TIM7_Init+0x64>)
 800387e:	2204      	movs	r2, #4
 8003880:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <MX_TIM7_Init+0x64>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <MX_TIM7_Init+0x64>)
 800388a:	f248 323f 	movw	r2, #33599	; 0x833f
 800388e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_TIM7_Init+0x64>)
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003896:	480d      	ldr	r0, [pc, #52]	; (80038cc <MX_TIM7_Init+0x64>)
 8003898:	f005 fcea 	bl	8009270 <HAL_TIM_Base_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80038a2:	f000 fa5b 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80038ae:	463b      	mov	r3, r7
 80038b0:	4619      	mov	r1, r3
 80038b2:	4806      	ldr	r0, [pc, #24]	; (80038cc <MX_TIM7_Init+0x64>)
 80038b4:	f006 fd86 	bl	800a3c4 <HAL_TIMEx_MasterConfigSynchronization>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80038be:	f000 fa4d 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000678 	.word	0x20000678
 80038d0:	40001400 	.word	0x40001400

080038d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <MX_TIM10_Init+0x40>)
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <MX_TIM10_Init+0x44>)
 80038dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <MX_TIM10_Init+0x40>)
 80038e0:	2204      	movs	r2, #4
 80038e2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <MX_TIM10_Init+0x40>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <MX_TIM10_Init+0x40>)
 80038ec:	f248 323f 	movw	r2, #33599	; 0x833f
 80038f0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <MX_TIM10_Init+0x40>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <MX_TIM10_Init+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038fe:	4805      	ldr	r0, [pc, #20]	; (8003914 <MX_TIM10_Init+0x40>)
 8003900:	f005 fcb6 	bl	8009270 <HAL_TIM_Base_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800390a:	f000 fa27 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200006c0 	.word	0x200006c0
 8003918:	40014400 	.word	0x40014400

0800391c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <MX_TIM11_Init+0x40>)
 8003922:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <MX_TIM11_Init+0x44>)
 8003924:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <MX_TIM11_Init+0x40>)
 8003928:	2204      	movs	r2, #4
 800392a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <MX_TIM11_Init+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <MX_TIM11_Init+0x40>)
 8003934:	f248 323f 	movw	r2, #33599	; 0x833f
 8003938:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <MX_TIM11_Init+0x40>)
 800393c:	2200      	movs	r2, #0
 800393e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <MX_TIM11_Init+0x40>)
 8003942:	2200      	movs	r2, #0
 8003944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003946:	4805      	ldr	r0, [pc, #20]	; (800395c <MX_TIM11_Init+0x40>)
 8003948:	f005 fc92 	bl	8009270 <HAL_TIM_Base_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003952:	f000 fa03 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000708 	.word	0x20000708
 8003960:	40014800 	.word	0x40014800

08003964 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <MX_TIM14_Init+0x40>)
 800396a:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <MX_TIM14_Init+0x44>)
 800396c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <MX_TIM14_Init+0x40>)
 8003970:	2204      	movs	r2, #4
 8003972:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <MX_TIM14_Init+0x40>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <MX_TIM14_Init+0x40>)
 800397c:	f248 323f 	movw	r2, #33599	; 0x833f
 8003980:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <MX_TIM14_Init+0x40>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <MX_TIM14_Init+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800398e:	4805      	ldr	r0, [pc, #20]	; (80039a4 <MX_TIM14_Init+0x40>)
 8003990:	f005 fc6e 	bl	8009270 <HAL_TIM_Base_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800399a:	f000 f9df 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000750 	.word	0x20000750
 80039a8:	40002000 	.word	0x40002000

080039ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <MX_USART6_UART_Init+0x50>)
 80039b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039d2:	220c      	movs	r2, #12
 80039d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80039e2:	4805      	ldr	r0, [pc, #20]	; (80039f8 <MX_USART6_UART_Init+0x4c>)
 80039e4:	f006 fd7e 	bl	800a4e4 <HAL_UART_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80039ee:	f000 f9b5 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000798 	.word	0x20000798
 80039fc:	40011400 	.word	0x40011400

08003a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <MX_DMA_Init+0x3c>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <MX_DMA_Init+0x3c>)
 8003a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a14:	6313      	str	r3, [r2, #48]	; 0x30
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <MX_DMA_Init+0x3c>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003a22:	2200      	movs	r2, #0
 8003a24:	2100      	movs	r1, #0
 8003a26:	2038      	movs	r0, #56	; 0x38
 8003a28:	f002 ffe3 	bl	80069f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a2c:	2038      	movs	r0, #56	; 0x38
 8003a2e:	f002 fffc 	bl	8006a2a <HAL_NVIC_EnableIRQ>

}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800

08003a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	4b69      	ldr	r3, [pc, #420]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a68      	ldr	r2, [pc, #416]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a60:	f043 0304 	orr.w	r3, r3, #4
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b66      	ldr	r3, [pc, #408]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9e:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b51      	ldr	r3, [pc, #324]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4b4d      	ldr	r3, [pc, #308]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a4c      	ldr	r2, [pc, #304]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <MX_GPIO_Init+0x1c0>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8003ae8:	4846      	ldr	r0, [pc, #280]	; (8003c04 <MX_GPIO_Init+0x1c4>)
 8003aea:	f004 f825 	bl	8007b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8003aee:	2200      	movs	r2, #0
 8003af0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003af4:	4844      	ldr	r0, [pc, #272]	; (8003c08 <MX_GPIO_Init+0x1c8>)
 8003af6:	f004 f81f 	bl	8007b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8003afa:	2200      	movs	r2, #0
 8003afc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003b00:	4842      	ldr	r0, [pc, #264]	; (8003c0c <MX_GPIO_Init+0x1cc>)
 8003b02:	f004 f819 	bl	8007b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2104      	movs	r1, #4
 8003b0a:	4841      	ldr	r0, [pc, #260]	; (8003c10 <MX_GPIO_Init+0x1d0>)
 8003b0c:	f004 f814 	bl	8007b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8003b10:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b16:	2301      	movs	r3, #1
 8003b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	4619      	mov	r1, r3
 8003b28:	4836      	ldr	r0, [pc, #216]	; (8003c04 <MX_GPIO_Init+0x1c4>)
 8003b2a:	f003 fe51 	bl	80077d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8003b2e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003b32:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4619      	mov	r1, r3
 8003b42:	4830      	ldr	r0, [pc, #192]	; (8003c04 <MX_GPIO_Init+0x1c4>)
 8003b44:	f003 fe44 	bl	80077d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8003b48:	f640 0304 	movw	r3, #2052	; 0x804
 8003b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	482a      	ldr	r0, [pc, #168]	; (8003c08 <MX_GPIO_Init+0x1c8>)
 8003b5e:	f003 fe37 	bl	80077d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8003b62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	2300      	movs	r3, #0
 8003b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4823      	ldr	r0, [pc, #140]	; (8003c08 <MX_GPIO_Init+0x1c8>)
 8003b7c:	f003 fe28 	bl	80077d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8003b80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	481c      	ldr	r0, [pc, #112]	; (8003c0c <MX_GPIO_Init+0x1cc>)
 8003b9a:	f003 fe19 	bl	80077d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8003b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4816      	ldr	r0, [pc, #88]	; (8003c0c <MX_GPIO_Init+0x1cc>)
 8003bb4:	f003 fe0c 	bl	80077d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <MX_GPIO_Init+0x1cc>)
 8003bd6:	f003 fdfb 	bl	80077d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bde:	2301      	movs	r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4807      	ldr	r0, [pc, #28]	; (8003c10 <MX_GPIO_Init+0x1d0>)
 8003bf2:	f003 fded 	bl	80077d0 <HAL_GPIO_Init>

}
 8003bf6:	bf00      	nop
 8003bf8:	3728      	adds	r7, #40	; 0x28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40020800 	.word	0x40020800
 8003c08:	40020400 	.word	0x40020400
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	40020c00 	.word	0x40020c00

08003c14 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  #if USE_LED
  led_init();
 8003c18:	f7fd fbca 	bl	80013b0 <led_init>
  #endif
  flash_init();
 8003c1c:	f7fe ffce 	bl	8002bbc <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8003c20:	f001 f980 	bl	8004f24 <tim11_init>
  /* encoder_init */
  tim10_init();
 8003c24:	f001 f8aa 	bl	8004d7c <tim10_init>
  /* tim7 */
  tim7_init();
 8003c28:	f001 fa96 	bl	8005158 <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8003c2c:	f001 f994 	bl	8004f58 <tim6_init>
  /* imu のバイアス補正のための初期�? */
  if(rotary_read_playmode() == motor_free)
 8003c30:	f7fd fcb2 	bl	8001598 <rotary_read_playmode>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d101      	bne.n	8003c3e <main_init+0x2a>
    imu_revision_init();
 8003c3a:	f000 f981 	bl	8003f40 <imu_revision_init>
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <running_start>:

void running_start()
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	af00      	add	r7, sp, #0
  #if USE_LED
  led_start();
 8003c46:	f7fd fbc9 	bl	80013dc <led_start>
  #endif
  HAL_Delay(1000);
 8003c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c4e:	f002 f96f 	bl	8005f30 <HAL_Delay>
  led_write_rgb(0b100);
 8003c52:	2004      	movs	r0, #4
 8003c54:	f7fd fc26 	bl	80014a4 <led_write_rgb>
  HAL_Delay(1000);
 8003c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c5c:	f002 f968 	bl	8005f30 <HAL_Delay>
  led_write_led(0b01, 0b01);
 8003c60:	2101      	movs	r1, #1
 8003c62:	2001      	movs	r0, #1
 8003c64:	f7fd fc5e 	bl	8001524 <led_write_led>
  HAL_Delay(1000);
 8003c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c6c:	f002 f960 	bl	8005f30 <HAL_Delay>
  led_write_led(0b10, 0b10);
 8003c70:	2102      	movs	r1, #2
 8003c72:	2002      	movs	r0, #2
 8003c74:	f7fd fc56 	bl	8001524 <led_write_led>
  HAL_Delay(1000);
 8003c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c7c:	f002 f958 	bl	8005f30 <HAL_Delay>
  led_write_led(0b11, 0b00);
 8003c80:	2100      	movs	r1, #0
 8003c82:	2003      	movs	r0, #3
 8003c84:	f7fd fc4e 	bl	8001524 <led_write_led>
  led_write_rgb(0b010);
 8003c88:	2002      	movs	r0, #2
 8003c8a:	f7fd fc0b 	bl	80014a4 <led_write_rgb>
  #if D_TIM7
  printf("main.c > running_start() > ");
  #endif
  tim7_start();
 8003c8e:	f001 fa73 	bl	8005178 <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8003c92:	f001 f89d 	bl	8004dd0 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8003c96:	f001 f971 	bl	8004f7c <tim6_start>
  /* imu のバイアス補正のための準備 */
  if(rotary_read_playmode() == motor_free)
 8003c9a:	f7fd fc7d 	bl	8001598 <rotary_read_playmode>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d101      	bne.n	8003ca8 <running_start+0x66>
    imu_revision_start();
 8003ca4:	f000 f954 	bl	8003f50 <imu_revision_start>
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}

08003cac <running_stop>:

void running_stop()
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  #if USE_LED
  led_stop();
 8003cb0:	f7fd fb9f 	bl	80013f2 <led_stop>
  #endif
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8003cb4:	f001 f97a 	bl	8004fac <tim6_stop>
  /* tim7 */
  tim7_stop();
 8003cb8:	f001 fa86 	bl	80051c8 <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8003cbc:	f001 f8b6 	bl	8004e2c <tim10_stop>
  /* imu バイアス補正のための終�? */
  if(rotary_read_playmode() == motor_free)
 8003cc0:	f7fd fc6a 	bl	8001598 <rotary_read_playmode>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d101      	bne.n	8003cce <running_stop+0x22>
    imu_revision_stop();
 8003cca:	f000 f951 	bl	8003f70 <imu_revision_stop>
  led_write_rgb(0b001);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7fd fbe8 	bl	80014a4 <led_write_rgb>
}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <main_print_while>:

void main_print_while()
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
	printf("////////////////////////////// WHILE //////////////////////////////\n\r");
 8003cdc:	4815      	ldr	r0, [pc, #84]	; (8003d34 <main_print_while+0x5c>)
 8003cde:	f007 fe7d 	bl	800b9dc <iprintf>
  rotary_print_playmode();
 8003ce2:	f7fd fcc7 	bl	8001674 <rotary_print_playmode>
	print_rotary_value();
 8003ce6:	f000 f91d 	bl	8003f24 <print_rotary_value>
  if(rotary_read() < 4)
 8003cea:	f7fd fc79 	bl	80015e0 <rotary_read>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d804      	bhi.n	8003cfe <main_print_while+0x26>
  {
    led_write_led(0b11, 0b10);
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	2003      	movs	r0, #3
 8003cf8:	f7fd fc14 	bl	8001524 <led_write_led>
  }
  else
  {
    led_write_led(0b11, 0b00);
  }
}
 8003cfc:	e017      	b.n	8003d2e <main_print_while+0x56>
  else if(rotary_read() < 8)
 8003cfe:	f7fd fc6f 	bl	80015e0 <rotary_read>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b07      	cmp	r3, #7
 8003d06:	d804      	bhi.n	8003d12 <main_print_while+0x3a>
    led_write_led(0b11, 0b01);
 8003d08:	2101      	movs	r1, #1
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	f7fd fc0a 	bl	8001524 <led_write_led>
}
 8003d10:	e00d      	b.n	8003d2e <main_print_while+0x56>
  else if(rotary_read() == 15)
 8003d12:	f7fd fc65 	bl	80015e0 <rotary_read>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d104      	bne.n	8003d26 <main_print_while+0x4e>
    led_write_led(0b11, 0b11);
 8003d1c:	2103      	movs	r1, #3
 8003d1e:	2003      	movs	r0, #3
 8003d20:	f7fd fc00 	bl	8001524 <led_write_led>
}
 8003d24:	e003      	b.n	8003d2e <main_print_while+0x56>
    led_write_led(0b11, 0b00);
 8003d26:	2100      	movs	r1, #0
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f7fd fbfb 	bl	8001524 <led_write_led>
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	080107f4 	.word	0x080107f4

08003d38 <main_main>:

void main_main()
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  main_d_print();
 8003d3c:	f000 f802 	bl	8003d44 <main_d_print>
	tim7_main();
	#endif
	#if D_TIM6_WHILE
	tim6_main();
	#endif
}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <main_d_print>:

void main_d_print()
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  revision_print();
 8003d48:	f000 f918 	bl	8003f7c <revision_print>
  tim10_d_print();
 8003d4c:	f001 f8dc 	bl	8004f08 <tim10_d_print>
  tim7_d_print();
 8003d50:	f001 fb38 	bl	80053c4 <tim7_d_print>
  tim6_d_print();
 8003d54:	f001 f9fa 	bl	800514c <tim6_d_print>
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d60:	b672      	cpsid	i
}
 8003d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003d64:	e7fe      	b.n	8003d64 <Error_Handler+0x8>

08003d66 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f000 f826 	bl	8003dbc <motor_enable>
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <motor_start>:

void motor_start()
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4806      	ldr	r0, [pc, #24]	; (8003d94 <motor_start+0x20>)
 8003d7c:	f005 fbb6 	bl	80094ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003d80:	2104      	movs	r1, #4
 8003d82:	4804      	ldr	r0, [pc, #16]	; (8003d94 <motor_start+0x20>)
 8003d84:	f005 fbb2 	bl	80094ec <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f000 f817 	bl	8003dbc <motor_enable>
#endif
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200005e8 	.word	0x200005e8

08003d98 <motor_stop>:

void motor_stop()
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f000 f80d 	bl	8003dbc <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8003da2:	2104      	movs	r1, #4
 8003da4:	4804      	ldr	r0, [pc, #16]	; (8003db8 <motor_stop+0x20>)
 8003da6:	f005 fc69 	bl	800967c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003daa:	2100      	movs	r1, #0
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <motor_stop+0x20>)
 8003dae:	f005 fc65 	bl	800967c <HAL_TIM_PWM_Stop>
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200005e8 	.word	0x200005e8

08003dbc <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <motor_enable+0x28>)
 8003dd6:	701a      	strb	r2, [r3, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20012181 	.word	0x20012181

08003de8 <motor_read_enable>:

char motor_read_enable()
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
    return enable;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <motor_read_enable+0x14>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20012181 	.word	0x20012181

08003e00 <motor_set>:

void motor_set(float motor_left_, float motor_right_)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e0a:	edc7 0a00 	vstr	s1, [r7]
    if(motor_left_ < 0)
 8003e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	d50b      	bpl.n	8003e34 <motor_set+0x34>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2104      	movs	r1, #4
 8003e20:	4831      	ldr	r0, [pc, #196]	; (8003ee8 <motor_set+0xe8>)
 8003e22:	f003 fe89 	bl	8007b38 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8003e26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e2a:	eef1 7a67 	vneg.f32	s15, s15
 8003e2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e32:	e004      	b.n	8003e3e <motor_set+0x3e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003e34:	2201      	movs	r2, #1
 8003e36:	2104      	movs	r1, #4
 8003e38:	482b      	ldr	r0, [pc, #172]	; (8003ee8 <motor_set+0xe8>)
 8003e3a:	f003 fe7d 	bl	8007b38 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8003e3e:	edd7 7a00 	vldr	s15, [r7]
 8003e42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4a:	d50c      	bpl.n	8003e66 <motor_set+0x66>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e52:	4826      	ldr	r0, [pc, #152]	; (8003eec <motor_set+0xec>)
 8003e54:	f003 fe70 	bl	8007b38 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8003e58:	edd7 7a00 	vldr	s15, [r7]
 8003e5c:	eef1 7a67 	vneg.f32	s15, s15
 8003e60:	edc7 7a00 	vstr	s15, [r7]
 8003e64:	e005      	b.n	8003e72 <motor_set+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003e66:	2200      	movs	r2, #0
 8003e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e6c:	481f      	ldr	r0, [pc, #124]	; (8003eec <motor_set+0xec>)
 8003e6e:	f003 fe63 	bl	8007b38 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8003e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e76:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003ef0 <motor_set+0xf0>
 8003e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e82:	dd01      	ble.n	8003e88 <motor_set+0x88>
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <motor_set+0xf4>)
 8003e86:	e000      	b.n	8003e8a <motor_set+0x8a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	607b      	str	r3, [r7, #4]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8003e8c:	edd7 7a00 	vldr	s15, [r7]
 8003e90:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003ef0 <motor_set+0xf0>
 8003e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9c:	dd01      	ble.n	8003ea2 <motor_set+0xa2>
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <motor_set+0xf4>)
 8003ea0:	e000      	b.n	8003ea4 <motor_set+0xa4>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	603b      	str	r3, [r7, #0]

    if(!enable)
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <motor_set+0xf8>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <motor_set+0xba>
    {
        motor_left_ = 0;
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	607b      	str	r3, [r7, #4]
        motor_right_ = 0;
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	603b      	str	r3, [r7, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <motor_set+0xfc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec6:	ee17 2a90 	vmov	r2, s15
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <motor_set+0xfc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	edd7 7a00 	vldr	s15, [r7]
 8003ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed8:	ee17 2a90 	vmov	r2, s15
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40020c00 	.word	0x40020c00
 8003eec:	40020800 	.word	0x40020800
 8003ef0:	447a0000 	.word	0x447a0000
 8003ef4:	447a0000 	.word	0x447a0000
 8003ef8:	20012181 	.word	0x20012181
 8003efc:	200005e8 	.word	0x200005e8

08003f00 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003f08:	1d39      	adds	r1, r7, #4
 8003f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4803      	ldr	r0, [pc, #12]	; (8003f20 <__io_putchar+0x20>)
 8003f12:	f006 fb34 	bl	800a57e <HAL_UART_Transmit>
	return ch;
 8003f16:	687b      	ldr	r3, [r7, #4]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000798 	.word	0x20000798

08003f24 <print_rotary_value>:

void print_rotary_value()
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8003f28:	f7fd fb4e 	bl	80015c8 <rotary_read_value>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <print_rotary_value+0x18>)
 8003f32:	f007 fd53 	bl	800b9dc <iprintf>
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	0801083c 	.word	0x0801083c

08003f40 <imu_revision_init>:
unsigned int imu_revision_count;
float imu_revision_sum;
float imu_revision_average;

void imu_revision_init()
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
    //! course_init() されていることが前提で空関数
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <imu_revision_start>:

void imu_revision_start()
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
    imu_revision_count = 1;
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <imu_revision_start+0x1c>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
    course_start();
 8003f5a:	f7fd ff47 	bl	8001dec <course_start>
    HAL_Delay(5000);
 8003f5e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f62:	f001 ffe5 	bl	8005f30 <HAL_Delay>
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20012184 	.word	0x20012184

08003f70 <imu_revision_stop>:

void imu_revision_stop()
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
    course_stop();
 8003f74:	f7fd ff64 	bl	8001e40 <course_stop>
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <revision_print>:
        imu_revision_count = imu_revision_count + 1;
	}
}

void revision_print()
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
    #if IMU_REVISION
    imu_revision_print();
    #endif
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <section_length_set_sampling_time_ms>:
//! update 周期
float samplingtime_s;

//! update 周期を設定する
void section_length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
    samplingtime_s = samplingtime_ms / (float) 1000;
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003fbc <section_length_set_sampling_time_ms+0x30>
 8003fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <section_length_set_sampling_time_ms+0x34>)
 8003faa:	edc3 7a00 	vstr	s15, [r3]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	447a0000 	.word	0x447a0000
 8003fc0:	20012198 	.word	0x20012198

08003fc4 <section_length_init>:

void section_length_init(unsigned short int samplingtime_ms)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
    section_length_set_sampling_time_ms(samplingtime_ms);
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ffdb 	bl	8003f8c <section_length_set_sampling_time_ms>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <section_length_start>:

void section_length_start()
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	af00      	add	r7, sp, #0
    section_length_reset();
 8003fe2:	f000 f80d 	bl	8004000 <section_length_reset>
    section_length_buffer_reset();
 8003fe6:	f000 f81f 	bl	8004028 <section_length_buffer_reset>
    length_start();
 8003fea:	f7fe fe7d 	bl	8002ce8 <length_start>
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <section_length_stop>:

void section_length_stop()
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	af00      	add	r7, sp, #0
    length_stop();
 8003ff6:	f7fe fe89 	bl	8002d0c <length_stop>
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <section_length_reset>:
{
    length_fin();
}

void section_length_reset()
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
    section_length_right = 0;
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <section_length_reset+0x20>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
    section_length_left = 0;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <section_length_reset+0x24>)
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2001218c 	.word	0x2001218c
 8004024:	20012188 	.word	0x20012188

08004028 <section_length_buffer_reset>:

void section_length_buffer_reset()
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = 0;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <section_length_buffer_reset+0x20>)
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
    section_length_buffer_global_right = 0;
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <section_length_buffer_reset+0x24>)
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20012190 	.word	0x20012190
 800404c:	20012194 	.word	0x20012194

08004050 <section_length_read>:

//! 現在点区間長を返す
float section_length_read()
{
 8004050:	b580      	push	{r7, lr}
 8004052:	ed2d 8b02 	vpush	{d8}
 8004056:	af00      	add	r7, sp, #0
    return (section_length_read_left() + section_length_read_right()) / 2;
 8004058:	f000 f814 	bl	8004084 <section_length_read_left>
 800405c:	eeb0 8a40 	vmov.f32	s16, s0
 8004060:	f000 f81e 	bl	80040a0 <section_length_read_right>
 8004064:	eef0 7a40 	vmov.f32	s15, s0
 8004068:	ee78 7a27 	vadd.f32	s15, s16, s15
 800406c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004070:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004074:	eef0 7a66 	vmov.f32	s15, s13
}
 8004078:	eeb0 0a67 	vmov.f32	s0, s15
 800407c:	46bd      	mov	sp, r7
 800407e:	ecbd 8b02 	vpop	{d8}
 8004082:	bd80      	pop	{r7, pc}

08004084 <section_length_read_left>:

float section_length_read_left()
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
    return section_length_left;
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <section_length_read_left+0x18>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	ee07 3a90 	vmov	s15, r3
}
 8004090:	eeb0 0a67 	vmov.f32	s0, s15
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20012188 	.word	0x20012188

080040a0 <section_length_read_right>:

float section_length_read_right()
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
    return section_length_right;
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <section_length_read_right+0x18>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	ee07 3a90 	vmov	s15, r3
}
 80040ac:	eeb0 0a67 	vmov.f32	s0, s15
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	2001218c 	.word	0x2001218c

080040bc <section_length_set_buffer>:
 * }
 * 
 */
//! 区間開始点を現在点の世界長にする
void section_length_set_buffer()
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = length_read_left();
 80040c0:	f7fe fe5e 	bl	8002d80 <length_read_left>
 80040c4:	eef0 7a40 	vmov.f32	s15, s0
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <section_length_set_buffer+0x34>)
 80040ca:	edc3 7a00 	vstr	s15, [r3]
    section_length_buffer_global_right = length_read_right();
 80040ce:	f7fe fe65 	bl	8002d9c <length_read_right>
 80040d2:	eef0 7a40 	vmov.f32	s15, s0
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <section_length_set_buffer+0x38>)
 80040d8:	edc3 7a00 	vstr	s15, [r3]
    section_length_left = 0;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <section_length_set_buffer+0x3c>)
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
    section_length_right = 0;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <section_length_set_buffer+0x40>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20012190 	.word	0x20012190
 80040f4:	20012194 	.word	0x20012194
 80040f8:	20012188 	.word	0x20012188
 80040fc:	2001218c 	.word	0x2001218c

08004100 <section_length_update>:

void section_length_update()
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
    //! 区間開始点から現在点の区間長を計算
    section_length_left = length_read_left() - section_length_buffer_global_left;
 8004104:	f7fe fe3c 	bl	8002d80 <length_read_left>
 8004108:	eeb0 7a40 	vmov.f32	s14, s0
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <section_length_update+0x38>)
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <section_length_update+0x3c>)
 8004118:	edc3 7a00 	vstr	s15, [r3]
    section_length_right = length_read_right() - section_length_buffer_global_right;
 800411c:	f7fe fe3e 	bl	8002d9c <length_read_right>
 8004120:	eeb0 7a40 	vmov.f32	s14, s0
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <section_length_update+0x40>)
 8004126:	edd3 7a00 	vldr	s15, [r3]
 800412a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <section_length_update+0x44>)
 8004130:	edc3 7a00 	vstr	s15, [r3]
}
 8004134:	bf00      	nop
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20012190 	.word	0x20012190
 800413c:	20012188 	.word	0x20012188
 8004140:	20012194 	.word	0x20012194
 8004144:	2001218c 	.word	0x2001218c

08004148 <section_length_d_print>:

void section_length_d_print()
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
    #if D_SECTION_LENGTH
    printf("section_length = %10.2f\r\n", section_length_read());
    #endif
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate, markerstate_volatile;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 8004162:	2104      	movs	r1, #4
 8004164:	4810      	ldr	r0, [pc, #64]	; (80041a8 <sidesensor_read+0x50>)
 8004166:	f003 fccf 	bl	8007b08 <HAL_GPIO_ReadPin>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	b2da      	uxtb	r2, r3
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	4413      	add	r3, r2
 800417c:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 800417e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004182:	4809      	ldr	r0, [pc, #36]	; (80041a8 <sidesensor_read+0x50>)
 8004184:	f003 fcc0 	bl	8007b08 <HAL_GPIO_ReadPin>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <sidesensor_read+0x3a>
 800418e:	2302      	movs	r3, #2
 8004190:	e000      	b.n	8004194 <sidesensor_read+0x3c>
 8004192:	2300      	movs	r3, #0
 8004194:	b2da      	uxtb	r2, r3
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	4413      	add	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]

    return subsens;
 800419c:	79fb      	ldrb	r3, [r7, #7]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40020400 	.word	0x40020400

080041ac <sidesensor_init>:

void sidesensor_init()
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
	/* sidesensor_init */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <sidesensor_start>:

void sidesensor_start()
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
    marker = 0;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <sidesensor_start+0x34>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <sidesensor_start+0x38>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <sidesensor_start+0x3c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <sidesensor_start+0x40>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
	markerstate = none;
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <sidesensor_start+0x44>)
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = none;
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <sidesensor_start+0x48>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2001219d 	.word	0x2001219d
 80041f4:	2001219c 	.word	0x2001219c
 80041f8:	2001219e 	.word	0x2001219e
 80041fc:	2001219f 	.word	0x2001219f
 8004200:	200121a0 	.word	0x200121a0
 8004204:	200121a1 	.word	0x200121a1

08004208 <sidesensor_stop>:

void sidesensor_stop()
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
	return markerstate;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <sidesensor_read_markerstate+0x14>)
 800421e:	781b      	ldrb	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	200121a0 	.word	0x200121a0

08004230 <sidesensor_read_markerstate_volatile>:

SideSensorState sidesensor_read_markerstate_volatile()
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
	return markerstate_volatile;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <sidesensor_read_markerstate_volatile+0x14>)
 8004236:	781b      	ldrb	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	200121a1 	.word	0x200121a1

08004248 <sidesensor_right>:

void sidesensor_right()
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 800424c:	4b0f      	ldr	r3, [pc, #60]	; (800428c <sidesensor_right+0x44>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <sidesensor_right+0x1a>
    {
        // start
		markerstate_volatile = straight;
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <sidesensor_right+0x48>)
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
		markerstate = straight;
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <sidesensor_right+0x4c>)
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e009      	b.n	8004276 <sidesensor_right+0x2e>
    }
    else if(rightmarkercount == 2 - 1)
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <sidesensor_right+0x44>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d105      	bne.n	8004276 <sidesensor_right+0x2e>
    {
        // stop
		markerstate_volatile = stop;
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <sidesensor_right+0x48>)
 800426c:	2203      	movs	r2, #3
 800426e:	701a      	strb	r2, [r3, #0]
		markerstate = stop;
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <sidesensor_right+0x4c>)
 8004272:	2203      	movs	r2, #3
 8004274:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <sidesensor_right+0x44>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4b03      	ldr	r3, [pc, #12]	; (800428c <sidesensor_right+0x44>)
 8004280:	701a      	strb	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2001219f 	.word	0x2001219f
 8004290:	200121a1 	.word	0x200121a1
 8004294:	200121a0 	.word	0x200121a0

08004298 <sidesensor_left>:

void sidesensor_left()
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <sidesensor_left+0x1c>)
 800429e:	2204      	movs	r2, #4
 80042a0:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = curve;
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <sidesensor_left+0x20>)
 80042a4:	2204      	movs	r2, #4
 80042a6:	701a      	strb	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	200121a0 	.word	0x200121a0
 80042b8:	200121a1 	.word	0x200121a1

080042bc <sidesensor_cross>:

void sidesensor_cross()
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <sidesensor_cross+0x1c>)
 80042c2:	2205      	movs	r2, #5
 80042c4:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = cross;
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <sidesensor_cross+0x20>)
 80042c8:	2205      	movs	r2, #5
 80042ca:	701a      	strb	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	200121a0 	.word	0x200121a0
 80042dc:	200121a1 	.word	0x200121a1

080042e0 <sidesensor_main>:
	markerstate = straight;
	markerstate_volatile = straight;
}

void sidesensor_main()
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 80042e6:	f7ff ff37 	bl	8004158 <sidesensor_read>
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
	markerstate_volatile = none;
 80042ee:	4b28      	ldr	r3, [pc, #160]	; (8004390 <sidesensor_main+0xb0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]

	if(subsens != subsensbuf)
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <sidesensor_main+0xb4>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	79fa      	ldrb	r2, [r7, #7]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d044      	beq.n	8004388 <sidesensor_main+0xa8>
	{
		subsensbuf = subsens;
 80042fe:	4a25      	ldr	r2, [pc, #148]	; (8004394 <sidesensor_main+0xb4>)
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8004304:	79fa      	ldrb	r2, [r7, #7]
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <sidesensor_main+0xb8>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <sidesensor_main+0xbc>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4413      	add	r3, r2
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <sidesensor_main+0xbc>)
 800431c:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d12b      	bne.n	800437c <sidesensor_main+0x9c>
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <sidesensor_main+0xb8>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d027      	beq.n	800437c <sidesensor_main+0x9c>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <sidesensor_main+0xbc>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8004336:	4b19      	ldr	r3, [pc, #100]	; (800439c <sidesensor_main+0xbc>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	109b      	asrs	r3, r3, #2
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8004344:	797b      	ldrb	r3, [r7, #5]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10e      	bne.n	8004368 <sidesensor_main+0x88>
			{
				if (first == 0b01)
 800434a:	79bb      	ldrb	r3, [r7, #6]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <sidesensor_main+0x76>
				{
					// right -> start / stop
                    sidesensor_right();
 8004350:	f7ff ff7a 	bl	8004248 <sidesensor_right>
 8004354:	e00a      	b.n	800436c <sidesensor_main+0x8c>
				}
				else if (first == 0b10)
 8004356:	79bb      	ldrb	r3, [r7, #6]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d102      	bne.n	8004362 <sidesensor_main+0x82>
				{
					// left -> curve
                    sidesensor_left();
 800435c:	f7ff ff9c 	bl	8004298 <sidesensor_left>
 8004360:	e004      	b.n	800436c <sidesensor_main+0x8c>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8004362:	f7ff ffab 	bl	80042bc <sidesensor_cross>
 8004366:	e001      	b.n	800436c <sidesensor_main+0x8c>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8004368:	f7ff ffa8 	bl	80042bc <sidesensor_cross>
			}
			sidedeltacount = 0;
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <sidesensor_main+0xb8>)
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <sidesensor_main+0xbc>)
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
		{
 8004378:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 800437a:	e005      	b.n	8004388 <sidesensor_main+0xa8>
			sidedeltacount++;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <sidesensor_main+0xb8>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <sidesensor_main+0xb8>)
 8004386:	701a      	strb	r2, [r3, #0]
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200121a1 	.word	0x200121a1
 8004394:	2001219c 	.word	0x2001219c
 8004398:	2001219e 	.word	0x2001219e
 800439c:	2001219d 	.word	0x2001219d

080043a0 <slow_start>:
    /* slow_init */
    slow_started = 0;
}

void slow_start()
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
    /* slow_start */

    /* 初期設定されている値を一旦保存する */
    PID *slow_default_pid_pointer;
    slow_default_pid_pointer = velotrace_read_values();
 80043a6:	f001 fc37 	bl	8005c18 <velotrace_read_values>
 80043aa:	6078      	str	r0, [r7, #4]
    slow_default_pid.target = slow_default_pid_pointer -> target;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <slow_start+0x80>)
 80043b2:	6013      	str	r3, [r2, #0]
    slow_default_pid_pointer = tracer_read_values();
 80043b4:	f001 f9e6 	bl	8005784 <tracer_read_values>
 80043b8:	6078      	str	r0, [r7, #4]
    slow_default_pid.kp = slow_default_pid_pointer->kp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <slow_start+0x80>)
 80043c0:	6053      	str	r3, [r2, #4]
    slow_default_pid.ki = slow_default_pid_pointer->ki;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <slow_start+0x80>)
 80043c8:	6093      	str	r3, [r2, #8]
    slow_default_pid.kd = slow_default_pid_pointer->kd;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4a14      	ldr	r2, [pc, #80]	; (8004420 <slow_start+0x80>)
 80043d0:	60d3      	str	r3, [r2, #12]

    /* slow 実行時の PID パラメータ */
    slow_pid.target = SLOW_VELOTRACE_TARGET;
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <slow_start+0x84>)
 80043d4:	4a14      	ldr	r2, [pc, #80]	; (8004428 <slow_start+0x88>)
 80043d6:	601a      	str	r2, [r3, #0]
    slow_pid.kp = SLOW_TRACE_KP;
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <slow_start+0x84>)
 80043da:	4a14      	ldr	r2, [pc, #80]	; (800442c <slow_start+0x8c>)
 80043dc:	605a      	str	r2, [r3, #4]
    slow_pid.ki = SLOW_TRACE_KI;
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <slow_start+0x84>)
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
    slow_pid.kd = SLOW_TRACE_KD;
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <slow_start+0x84>)
 80043e8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80043ec:	60da      	str	r2, [r3, #12]

    /* 初期化 */
    length_start();
 80043ee:	f7fe fc7b 	bl	8002ce8 <length_start>
    tracer_start();
 80043f2:	f001 f86f 	bl	80054d4 <tracer_start>
    velotrace_start();
 80043f6:	f001 fa65 	bl	80058c4 <velotrace_start>
    slowinglength = 0;
 80043fa:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <slow_start+0x90>)
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
    slow_enable = 1;
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <slow_start+0x94>)
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
    //! スロースタートを始めたタイミングでの世界長を取り出す
    slow_start_point_global_length = length_read();
 8004408:	f7fe fca0 	bl	8002d4c <length_read>
 800440c:	eef0 7a40 	vmov.f32	s15, s0
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <slow_start+0x98>)
 8004412:	edc3 7a00 	vstr	s15, [r3]
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200121b4 	.word	0x200121b4
 8004424:	200121a4 	.word	0x200121a4
 8004428:	3e99999a 	.word	0x3e99999a
 800442c:	40400000 	.word	0x40400000
 8004430:	200121c4 	.word	0x200121c4
 8004434:	200121c8 	.word	0x200121c8
 8004438:	200121cc 	.word	0x200121cc

0800443c <slow_print_default_pid>:
{
    return sigmoid(x, SLOW_SIGMOID_A, SLOW_LENGTH / 2);
}

void slow_print_default_pid()
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
#if D_SLOW
    // printf("slow > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", slow_default_pid.kp, slow_default_pid.ki, slow_default_pid.kd);
    printf("slow > target = %7.2f\r\n", slow_default_pid.target);
#endif
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_MspInit+0x54>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <HAL_MspInit+0x54>)
 800445c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004460:	6453      	str	r3, [r2, #68]	; 0x44
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <HAL_MspInit+0x54>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_MspInit+0x54>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_MspInit+0x54>)
 8004478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447c:	6413      	str	r3, [r2, #64]	; 0x40
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HAL_MspInit+0x54>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800448a:	2200      	movs	r2, #0
 800448c:	210f      	movs	r1, #15
 800448e:	f06f 0003 	mvn.w	r0, #3
 8004492:	f002 faae 	bl	80069f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800

080044a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 031c 	add.w	r3, r7, #28
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a49      	ldr	r2, [pc, #292]	; (80045e8 <HAL_ADC_MspInit+0x144>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	f040 808c 	bne.w	80045e0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_ADC_MspInit+0x148>)
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	4a46      	ldr	r2, [pc, #280]	; (80045ec <HAL_ADC_MspInit+0x148>)
 80044d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d6:	6453      	str	r3, [r2, #68]	; 0x44
 80044d8:	4b44      	ldr	r3, [pc, #272]	; (80045ec <HAL_ADC_MspInit+0x148>)
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	4b40      	ldr	r3, [pc, #256]	; (80045ec <HAL_ADC_MspInit+0x148>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a3f      	ldr	r2, [pc, #252]	; (80045ec <HAL_ADC_MspInit+0x148>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	6313      	str	r3, [r2, #48]	; 0x30
 80044f4:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_ADC_MspInit+0x148>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	4b39      	ldr	r3, [pc, #228]	; (80045ec <HAL_ADC_MspInit+0x148>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	4a38      	ldr	r2, [pc, #224]	; (80045ec <HAL_ADC_MspInit+0x148>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6313      	str	r3, [r2, #48]	; 0x30
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_ADC_MspInit+0x148>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_ADC_MspInit+0x148>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	4a31      	ldr	r2, [pc, #196]	; (80045ec <HAL_ADC_MspInit+0x148>)
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	6313      	str	r3, [r2, #48]	; 0x30
 800452c:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <HAL_ADC_MspInit+0x148>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004538:	233f      	movs	r3, #63	; 0x3f
 800453a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800453c:	2303      	movs	r3, #3
 800453e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004544:	f107 031c 	add.w	r3, r7, #28
 8004548:	4619      	mov	r1, r3
 800454a:	4829      	ldr	r0, [pc, #164]	; (80045f0 <HAL_ADC_MspInit+0x14c>)
 800454c:	f003 f940 	bl	80077d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004550:	23ff      	movs	r3, #255	; 0xff
 8004552:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004554:	2303      	movs	r3, #3
 8004556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455c:	f107 031c 	add.w	r3, r7, #28
 8004560:	4619      	mov	r1, r3
 8004562:	4824      	ldr	r0, [pc, #144]	; (80045f4 <HAL_ADC_MspInit+0x150>)
 8004564:	f003 f934 	bl	80077d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004568:	2303      	movs	r3, #3
 800456a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800456c:	2303      	movs	r3, #3
 800456e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004574:	f107 031c 	add.w	r3, r7, #28
 8004578:	4619      	mov	r1, r3
 800457a:	481f      	ldr	r0, [pc, #124]	; (80045f8 <HAL_ADC_MspInit+0x154>)
 800457c:	f003 f928 	bl	80077d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_ADC_MspInit+0x158>)
 8004582:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_ADC_MspInit+0x15c>)
 8004584:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_ADC_MspInit+0x158>)
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <HAL_ADC_MspInit+0x158>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_ADC_MspInit+0x158>)
 8004594:	2200      	movs	r2, #0
 8004596:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_ADC_MspInit+0x158>)
 800459a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800459e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045a0:	4b16      	ldr	r3, [pc, #88]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80045b0:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80045b8:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80045c4:	480d      	ldr	r0, [pc, #52]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045c6:	f002 fa4b 	bl	8006a60 <HAL_DMA_Init>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80045d0:	f7ff fbc4 	bl	8003d5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <HAL_ADC_MspInit+0x158>)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045e0:	bf00      	nop
 80045e2:	3730      	adds	r7, #48	; 0x30
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40012000 	.word	0x40012000
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40020800 	.word	0x40020800
 80045f4:	40020000 	.word	0x40020000
 80045f8:	40020400 	.word	0x40020400
 80045fc:	2000044c 	.word	0x2000044c
 8004600:	40026410 	.word	0x40026410

08004604 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_I2C_MspInit+0x84>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d12c      	bne.n	8004680 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	4b18      	ldr	r3, [pc, #96]	; (800468c <HAL_I2C_MspInit+0x88>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_I2C_MspInit+0x88>)
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	6313      	str	r3, [r2, #48]	; 0x30
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <HAL_I2C_MspInit+0x88>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004648:	2312      	movs	r3, #18
 800464a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800464c:	2301      	movs	r3, #1
 800464e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004654:	2304      	movs	r3, #4
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4619      	mov	r1, r3
 800465e:	480c      	ldr	r0, [pc, #48]	; (8004690 <HAL_I2C_MspInit+0x8c>)
 8004660:	f003 f8b6 	bl	80077d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	4b08      	ldr	r3, [pc, #32]	; (800468c <HAL_I2C_MspInit+0x88>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <HAL_I2C_MspInit+0x88>)
 800466e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004672:	6413      	str	r3, [r2, #64]	; 0x40
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_I2C_MspInit+0x88>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004680:	bf00      	nop
 8004682:	3728      	adds	r7, #40	; 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40005400 	.word	0x40005400
 800468c:	40023800 	.word	0x40023800
 8004690:	40020400 	.word	0x40020400

08004694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_SPI_MspInit+0x84>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d12c      	bne.n	8004710 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80046ee:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80046f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	2302      	movs	r3, #2
 80046f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046fc:	2303      	movs	r3, #3
 80046fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004700:	2305      	movs	r3, #5
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004704:	f107 0314 	add.w	r3, r7, #20
 8004708:	4619      	mov	r1, r3
 800470a:	4805      	ldr	r0, [pc, #20]	; (8004720 <HAL_SPI_MspInit+0x8c>)
 800470c:	f003 f860 	bl	80077d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004710:	bf00      	nop
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40003800 	.word	0x40003800
 800471c:	40023800 	.word	0x40023800
 8004720:	40020400 	.word	0x40020400

08004724 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	; 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 031c 	add.w	r3, r7, #28
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a3e      	ldr	r2, [pc, #248]	; (800483c <HAL_TIM_Encoder_MspInit+0x118>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d13d      	bne.n	80047c2 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	4b3d      	ldr	r3, [pc, #244]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	4a3c      	ldr	r2, [pc, #240]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6453      	str	r3, [r2, #68]	; 0x44
 8004756:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	4a35      	ldr	r2, [pc, #212]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	6313      	str	r3, [r2, #48]	; 0x30
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 800477e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004784:	2302      	movs	r3, #2
 8004786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478c:	2300      	movs	r3, #0
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004790:	2301      	movs	r3, #1
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	4619      	mov	r1, r3
 800479a:	482a      	ldr	r0, [pc, #168]	; (8004844 <HAL_TIM_Encoder_MspInit+0x120>)
 800479c:	f003 f818 	bl	80077d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2101      	movs	r1, #1
 80047a4:	2019      	movs	r0, #25
 80047a6:	f002 f924 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80047aa:	2019      	movs	r0, #25
 80047ac:	f002 f93d 	bl	8006a2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2101      	movs	r1, #1
 80047b4:	201a      	movs	r0, #26
 80047b6:	f002 f91c 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80047ba:	201a      	movs	r0, #26
 80047bc:	f002 f935 	bl	8006a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80047c0:	e038      	b.n	8004834 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM3)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a20      	ldr	r2, [pc, #128]	; (8004848 <HAL_TIM_Encoder_MspInit+0x124>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d133      	bne.n	8004834 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	6413      	str	r3, [r2, #64]	; 0x40
 80047dc:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	6313      	str	r3, [r2, #48]	; 0x30
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_TIM_Encoder_MspInit+0x11c>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8004804:	2330      	movs	r3, #48	; 0x30
 8004806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004808:	2302      	movs	r3, #2
 800480a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004810:	2300      	movs	r3, #0
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004814:	2302      	movs	r3, #2
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004818:	f107 031c 	add.w	r3, r7, #28
 800481c:	4619      	mov	r1, r3
 800481e:	480b      	ldr	r0, [pc, #44]	; (800484c <HAL_TIM_Encoder_MspInit+0x128>)
 8004820:	f002 ffd6 	bl	80077d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004824:	2200      	movs	r2, #0
 8004826:	2101      	movs	r1, #1
 8004828:	201d      	movs	r0, #29
 800482a:	f002 f8e2 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800482e:	201d      	movs	r0, #29
 8004830:	f002 f8fb 	bl	8006a2a <HAL_NVIC_EnableIRQ>
}
 8004834:	bf00      	nop
 8004836:	3730      	adds	r7, #48	; 0x30
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40010000 	.word	0x40010000
 8004840:	40023800 	.word	0x40023800
 8004844:	40020000 	.word	0x40020000
 8004848:	40000400 	.word	0x40000400
 800484c:	40020400 	.word	0x40020400

08004850 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <HAL_TIM_PWM_MspInit+0x48>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d115      	bne.n	800488e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <HAL_TIM_PWM_MspInit+0x4c>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	4a0c      	ldr	r2, [pc, #48]	; (800489c <HAL_TIM_PWM_MspInit+0x4c>)
 800486c:	f043 0304 	orr.w	r3, r3, #4
 8004870:	6413      	str	r3, [r2, #64]	; 0x40
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <HAL_TIM_PWM_MspInit+0x4c>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800487e:	2200      	movs	r2, #0
 8004880:	2101      	movs	r1, #1
 8004882:	201e      	movs	r0, #30
 8004884:	f002 f8b5 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004888:	201e      	movs	r0, #30
 800488a:	f002 f8ce 	bl	8006a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40000800 	.word	0x40000800
 800489c:	40023800 	.word	0x40023800

080048a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a42      	ldr	r2, [pc, #264]	; (80049b8 <HAL_TIM_Base_MspInit+0x118>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d116      	bne.n	80048e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	4b41      	ldr	r3, [pc, #260]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	4a40      	ldr	r2, [pc, #256]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 80048bc:	f043 0310 	orr.w	r3, r3, #16
 80048c0:	6413      	str	r3, [r2, #64]	; 0x40
 80048c2:	4b3e      	ldr	r3, [pc, #248]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2101      	movs	r1, #1
 80048d2:	2036      	movs	r0, #54	; 0x36
 80048d4:	f002 f88d 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048d8:	2036      	movs	r0, #54	; 0x36
 80048da:	f002 f8a6 	bl	8006a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80048de:	e066      	b.n	80049ae <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <HAL_TIM_Base_MspInit+0x120>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d116      	bne.n	8004918 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	4a32      	ldr	r2, [pc, #200]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 80048f4:	f043 0320 	orr.w	r3, r3, #32
 80048f8:	6413      	str	r3, [r2, #64]	; 0x40
 80048fa:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	61bb      	str	r3, [r7, #24]
 8004904:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004906:	2200      	movs	r2, #0
 8004908:	2101      	movs	r1, #1
 800490a:	2037      	movs	r0, #55	; 0x37
 800490c:	f002 f871 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004910:	2037      	movs	r0, #55	; 0x37
 8004912:	f002 f88a 	bl	8006a2a <HAL_NVIC_EnableIRQ>
}
 8004916:	e04a      	b.n	80049ae <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a29      	ldr	r2, [pc, #164]	; (80049c4 <HAL_TIM_Base_MspInit+0x124>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d116      	bne.n	8004950 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	4b25      	ldr	r3, [pc, #148]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	4a24      	ldr	r2, [pc, #144]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 800492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004930:	6453      	str	r3, [r2, #68]	; 0x44
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	2101      	movs	r1, #1
 8004942:	2019      	movs	r0, #25
 8004944:	f002 f855 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004948:	2019      	movs	r0, #25
 800494a:	f002 f86e 	bl	8006a2a <HAL_NVIC_EnableIRQ>
}
 800494e:	e02e      	b.n	80049ae <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_TIM_Base_MspInit+0x128>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d116      	bne.n	8004988 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	4b17      	ldr	r3, [pc, #92]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	4a16      	ldr	r2, [pc, #88]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 8004964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004968:	6453      	str	r3, [r2, #68]	; 0x44
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8004976:	2200      	movs	r2, #0
 8004978:	2101      	movs	r1, #1
 800497a:	201a      	movs	r0, #26
 800497c:	f002 f839 	bl	80069f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004980:	201a      	movs	r0, #26
 8004982:	f002 f852 	bl	8006a2a <HAL_NVIC_EnableIRQ>
}
 8004986:	e012      	b.n	80049ae <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0f      	ldr	r2, [pc, #60]	; (80049cc <HAL_TIM_Base_MspInit+0x12c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10d      	bne.n	80049ae <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	4a08      	ldr	r2, [pc, #32]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <HAL_TIM_Base_MspInit+0x11c>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
}
 80049ae:	bf00      	nop
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40001000 	.word	0x40001000
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40001400 	.word	0x40001400
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800
 80049cc:	40002000 	.word	0x40002000

080049d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_TIM_MspPostInit+0x68>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d11d      	bne.n	8004a2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <HAL_TIM_MspPostInit+0x6c>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <HAL_TIM_MspPostInit+0x6c>)
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_TIM_MspPostInit+0x6c>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8004a0e:	23c0      	movs	r3, #192	; 0xc0
 8004a10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a12:	2302      	movs	r3, #2
 8004a14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a22:	f107 030c 	add.w	r3, r7, #12
 8004a26:	4619      	mov	r1, r3
 8004a28:	4805      	ldr	r0, [pc, #20]	; (8004a40 <HAL_TIM_MspPostInit+0x70>)
 8004a2a:	f002 fed1 	bl	80077d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004a2e:	bf00      	nop
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40020400 	.word	0x40020400

08004a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_UART_MspInit+0x84>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d12b      	bne.n	8004abe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_UART_MspInit+0x88>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_UART_MspInit+0x88>)
 8004a70:	f043 0320 	orr.w	r3, r3, #32
 8004a74:	6453      	str	r3, [r2, #68]	; 0x44
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_UART_MspInit+0x88>)
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_UART_MspInit+0x88>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	4a10      	ldr	r2, [pc, #64]	; (8004acc <HAL_UART_MspInit+0x88>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6313      	str	r3, [r2, #48]	; 0x30
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <HAL_UART_MspInit+0x88>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a9e:	23c0      	movs	r3, #192	; 0xc0
 8004aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004aae:	2308      	movs	r3, #8
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab2:	f107 0314 	add.w	r3, r7, #20
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <HAL_UART_MspInit+0x8c>)
 8004aba:	f002 fe89 	bl	80077d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004abe:	bf00      	nop
 8004ac0:	3728      	adds	r7, #40	; 0x28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40011400 	.word	0x40011400
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40020800 	.word	0x40020800

08004ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ad8:	e7fe      	b.n	8004ad8 <NMI_Handler+0x4>

08004ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ada:	b480      	push	{r7}
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ade:	e7fe      	b.n	8004ade <HardFault_Handler+0x4>

08004ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ae4:	e7fe      	b.n	8004ae4 <MemManage_Handler+0x4>

08004ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aea:	e7fe      	b.n	8004aea <BusFault_Handler+0x4>

08004aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004af0:	e7fe      	b.n	8004af0 <UsageFault_Handler+0x4>

08004af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004af2:	b480      	push	{r7}
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b20:	f001 f9e6 	bl	8005ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b24:	bf00      	nop
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b2c:	4803      	ldr	r0, [pc, #12]	; (8004b3c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004b2e:	f004 ffe0 	bl	8009af2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004b32:	4803      	ldr	r0, [pc, #12]	; (8004b40 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004b34:	f004 ffdd 	bl	8009af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000558 	.word	0x20000558
 8004b40:	200006c0 	.word	0x200006c0

08004b44 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b48:	4803      	ldr	r0, [pc, #12]	; (8004b58 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004b4a:	f004 ffd2 	bl	8009af2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004b4e:	4803      	ldr	r0, [pc, #12]	; (8004b5c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004b50:	f004 ffcf 	bl	8009af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000558 	.word	0x20000558
 8004b5c:	20000708 	.word	0x20000708

08004b60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b64:	4802      	ldr	r0, [pc, #8]	; (8004b70 <TIM3_IRQHandler+0x10>)
 8004b66:	f004 ffc4 	bl	8009af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200005a0 	.word	0x200005a0

08004b74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004b78:	4802      	ldr	r0, [pc, #8]	; (8004b84 <TIM4_IRQHandler+0x10>)
 8004b7a:	f004 ffba 	bl	8009af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	200005e8 	.word	0x200005e8

08004b88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <TIM6_DAC_IRQHandler+0x10>)
 8004b8e:	f004 ffb0 	bl	8009af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000630 	.word	0x20000630

08004b9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <TIM7_IRQHandler+0x10>)
 8004ba2:	f004 ffa6 	bl	8009af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000678 	.word	0x20000678

08004bb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004bb4:	4802      	ldr	r0, [pc, #8]	; (8004bc0 <DMA2_Stream0_IRQHandler+0x10>)
 8004bb6:	f002 f8c9 	bl	8006d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	2000044c 	.word	0x2000044c

08004bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
	return 1;
 8004bc8:	2301      	movs	r3, #1
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <_kill>:

int _kill(int pid, int sig)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004bde:	f006 f843 	bl	800ac68 <__errno>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2216      	movs	r2, #22
 8004be6:	601a      	str	r2, [r3, #0]
	return -1;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <_exit>:

void _exit (int status)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ffe7 	bl	8004bd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c06:	e7fe      	b.n	8004c06 <_exit+0x12>

08004c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e00a      	b.n	8004c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c1a:	f3af 8000 	nop.w
 8004c1e:	4601      	mov	r1, r0
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	60ba      	str	r2, [r7, #8]
 8004c26:	b2ca      	uxtb	r2, r1
 8004c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	dbf0      	blt.n	8004c1a <_read+0x12>
	}

return len;
 8004c38:	687b      	ldr	r3, [r7, #4]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e009      	b.n	8004c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	60ba      	str	r2, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff f94f 	bl	8003f00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	3301      	adds	r3, #1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	dbf1      	blt.n	8004c54 <_write+0x12>
	}
	return len;
 8004c70:	687b      	ldr	r3, [r7, #4]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_close>:

int _close(int file)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
	return -1;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <_isatty>:

int _isatty(int file)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8004cba:	2301      	movs	r3, #1
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <_sbrk+0x5c>)
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <_sbrk+0x60>)
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <_sbrk+0x64>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d00:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <_sbrk+0x64>)
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <_sbrk+0x68>)
 8004d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <_sbrk+0x64>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d207      	bcs.n	8004d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d14:	f005 ffa8 	bl	800ac68 <__errno>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	220c      	movs	r2, #12
 8004d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	e009      	b.n	8004d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <_sbrk+0x64>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <_sbrk+0x64>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <_sbrk+0x64>)
 8004d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20020000 	.word	0x20020000
 8004d44:	00000400 	.word	0x00000400
 8004d48:	200121d0 	.word	0x200121d0
 8004d4c:	20012290 	.word	0x20012290

08004d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <SystemInit+0x28>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <SystemInit+0x28>)
 8004d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <SystemInit+0x28>)
 8004d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d6a:	609a      	str	r2, [r3, #8]
#endif
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <tim10_init>:
float tim10_samplingtime_s;
uint32_t __debug_tim10_count__, __debug_tim10_count_2__;

/* only use in main.c */
void tim10_init()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
	tim10_samplingtime_s = TIM10_TIME_MS / (float) 1000;
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <tim10_init+0x44>)
 8004d82:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <tim10_init+0x48>)
 8004d84:	601a      	str	r2, [r3, #0]
	samplingtime_ms = TIM10_TIME_MS;
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <tim10_init+0x4c>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
	length_init(samplingtime_ms);
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <tim10_init+0x4c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fd ff94 	bl	8002cc0 <length_init>
	section_length_init(samplingtime_ms);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <tim10_init+0x4c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff f910 	bl	8003fc4 <section_length_init>
	course_init(samplingtime_ms);
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <tim10_init+0x4c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd f80a 	bl	8001dc4 <course_init>
	velotrace_init(1);
 8004db0:	2001      	movs	r0, #1
 8004db2:	f000 fd71 	bl	8005898 <velotrace_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8004db6:	4805      	ldr	r0, [pc, #20]	; (8004dcc <tim10_init+0x50>)
 8004db8:	f004 fb1a 	bl	80093f0 <HAL_TIM_Base_Stop_IT>
}
 8004dbc:	bf00      	nop
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200121e0 	.word	0x200121e0
 8004dc4:	3a83126f 	.word	0x3a83126f
 8004dc8:	200121dc 	.word	0x200121dc
 8004dcc:	200006c0 	.word	0x200006c0

08004dd0 <tim10_start>:

void tim10_start()
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
	tim10_left = 0;
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <tim10_start+0x48>)
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
	tim10_right = 0;
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <tim10_start+0x4c>)
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
	__debug_tim10_count__ = 0;
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <tim10_start+0x50>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
	__debug_tim10_count_2__ = 0;
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <tim10_start+0x54>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
	course_start();
 8004df0:	f7fc fffc 	bl	8001dec <course_start>
	length_start();
 8004df4:	f7fd ff78 	bl	8002ce8 <length_start>
	section_length_start();
 8004df8:	f7ff f8f1 	bl	8003fde <section_length_start>
	velotrace_start();
 8004dfc:	f000 fd62 	bl	80058c4 <velotrace_start>
	slow_start(velotrace_read_values());
 8004e00:	f000 ff0a 	bl	8005c18 <velotrace_read_values>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff faca 	bl	80043a0 <slow_start>
	HAL_TIM_Base_Start_IT(&htim10);
 8004e0c:	4806      	ldr	r0, [pc, #24]	; (8004e28 <tim10_start+0x58>)
 8004e0e:	f004 fa7f 	bl	8009310 <HAL_TIM_Base_Start_IT>
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200121d4 	.word	0x200121d4
 8004e1c:	200121d8 	.word	0x200121d8
 8004e20:	200121e4 	.word	0x200121e4
 8004e24:	200121e8 	.word	0x200121e8
 8004e28:	200006c0 	.word	0x200006c0

08004e2c <tim10_stop>:

void tim10_stop()
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8004e30:	4806      	ldr	r0, [pc, #24]	; (8004e4c <tim10_stop+0x20>)
 8004e32:	f004 fadd 	bl	80093f0 <HAL_TIM_Base_Stop_IT>
	velotrace_stop();
 8004e36:	f000 fde3 	bl	8005a00 <velotrace_stop>
	section_length_stop();
 8004e3a:	f7ff f8da 	bl	8003ff2 <section_length_stop>
	length_stop();
 8004e3e:	f7fd ff65 	bl	8002d0c <length_stop>
	course_stop();
 8004e42:	f7fc fffd 	bl	8001e40 <course_stop>
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	200006c0 	.word	0x200006c0

08004e50 <tim10_main>:
	section_length_fin();
	HAL_TIM_Base_Stop_IT(&htim10);
}

void tim10_main()
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
	PlayMode rrpm;
	//! 角度をアップデートし続ける
	course_update_section_degree();
 8004e56:	f7fd f807 	bl	8001e68 <course_update_section_degree>
	//! 長さをアップデートし続ける
	length_update();
 8004e5a:	f7fd ffe3 	bl	8002e24 <length_update>
	//! 区間長をアップデートし続ける
	section_length_update();
 8004e5e:	f7ff f94f 	bl	8004100 <section_length_update>
	//! 速度制御の指令値をアップデートし続ける
	tim10_update_values();
 8004e62:	f000 f81b 	bl	8004e9c <tim10_update_values>
	rrpm = rotary_read_playmode();
 8004e66:	f7fc fb97 	bl	8001598 <rotary_read_playmode>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
	__debug_tim10_count_2__ = __debug_tim10_count_2__ + 1;
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <tim10_main+0x48>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <tim10_main+0x48>)
 8004e76:	6013      	str	r3, [r2, #0]
			course_state_function();
			__debug_tim10_count__ = __debug_tim10_count__ + 1;
		}
	}
#endif
	if(rotary_read_playmode() == velotrace_tuning_2)
 8004e78:	f7fc fb8e 	bl	8001598 <rotary_read_playmode>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b07      	cmp	r3, #7
 8004e80:	d106      	bne.n	8004e90 <tim10_main+0x40>
	{
		if(virtual_marker_read_markerstate() == straight)
 8004e82:	f000 ff99 	bl	8005db8 <virtual_marker_read_markerstate>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <tim10_main+0x40>
		{
			velotrace_gain_tuning();
 8004e8c:	f000 ff44 	bl	8005d18 <velotrace_gain_tuning>
		}
	}
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200121e8 	.word	0x200121e8

08004e9c <tim10_update_values>:

//! tim10_main でのみ呼び出されるべき関数
//! 速度制御の指令値を更新する
void tim10_update_values()
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
	{
		slow_main();
	}
#endif

	tim10_left  = velotrace_solve(velocity_read());
 8004ea0:	f7fd ff8a 	bl	8002db8 <velocity_read>
 8004ea4:	eef0 7a40 	vmov.f32	s15, s0
 8004ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8004eac:	f000 febe 	bl	8005c2c <velotrace_solve>
 8004eb0:	eef0 7a40 	vmov.f32	s15, s0
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <tim10_update_values+0x2c>)
 8004eb6:	edc3 7a00 	vstr	s15, [r3]
	tim10_right = tim10_left;
 8004eba:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <tim10_update_values+0x2c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a03      	ldr	r2, [pc, #12]	; (8004ecc <tim10_update_values+0x30>)
 8004ec0:	6013      	str	r3, [r2, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200121d4 	.word	0x200121d4
 8004ecc:	200121d8 	.word	0x200121d8

08004ed0 <tim10_read_left>:

float tim10_read_left()
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
	return tim10_left;
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <tim10_read_left+0x18>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	ee07 3a90 	vmov	s15, r3
}
 8004edc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	200121d4 	.word	0x200121d4

08004eec <tim10_read_right>:

float tim10_read_right()
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
	return tim10_right;
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <tim10_read_right+0x18>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	ee07 3a90 	vmov	s15, r3
}
 8004ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	200121d8 	.word	0x200121d8

08004f08 <tim10_d_print>:

void tim10_d_print()
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
#if D_TIM10
	// printf("tim10_left = %f, tim10_right = %f\r\n", tim10_left, tim10_right);
	printf("__debug_tim10_count  __ = %16ld\r\n__debug_tim10_count_2__ = %16ld\r\n", __debug_tim10_count__, __debug_tim10_count_2__);
#endif
	length_d_print();
 8004f0c:	f7fd ffd8 	bl	8002ec0 <length_d_print>
	course_d_print();
 8004f10:	f7fd f8f6 	bl	8002100 <course_d_print>
	velotrace_print_values();
 8004f14:	f000 fef8 	bl	8005d08 <velotrace_print_values>
	section_length_d_print();
 8004f18:	f7ff f916 	bl	8004148 <section_length_d_print>
	slow_print_default_pid();
 8004f1c:	f7ff fa8e 	bl	800443c <slow_print_default_pid>
}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
    switch_init();
 8004f28:	f7fc fc36 	bl	8001798 <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8004f2c:	4803      	ldr	r0, [pc, #12]	; (8004f3c <tim11_init+0x18>)
 8004f2e:	f004 f9ef 	bl	8009310 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8004f32:	f7fc fb1d 	bl	8001570 <rotary_init>
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000708 	.word	0x20000708

08004f40 <tim11_main>:

void tim11_main()
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
    //! 1ms
    time_update_ms(1);
 8004f44:	2001      	movs	r0, #1
 8004f46:	f000 fa65 	bl	8005414 <time_update_ms>
    switch_enter();
 8004f4a:	f7fc fc74 	bl	8001836 <switch_enter>
    rotary_set_value();
 8004f4e:	f7fc fb2f 	bl	80015b0 <rotary_set_value>
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <tim6_init>:

SideSensorState tim6_markerstate_before;
uint8_t debug_num;

void tim6_init()
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
    motor_init();
 8004f5c:	f7fe ff03 	bl	8003d66 <motor_init>
    virtual_marker_init();
 8004f60:	f000 fefa 	bl	8005d58 <virtual_marker_init>
    HAL_TIM_Base_Stop_IT(&htim6);
 8004f64:	4803      	ldr	r0, [pc, #12]	; (8004f74 <tim6_init+0x1c>)
 8004f66:	f004 fa43 	bl	80093f0 <HAL_TIM_Base_Stop_IT>
    debug_num = 0;
 8004f6a:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <tim6_init+0x20>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000630 	.word	0x20000630
 8004f78:	200121ed 	.word	0x200121ed

08004f7c <tim6_start>:

void tim6_start()
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
#if D_TIM6
    leftmotor = 0;
    rightmotor = 0;
#endif
    virtual_marker_start();
 8004f80:	f000 fef0 	bl	8005d64 <virtual_marker_start>
    fixed_section_start();
 8004f84:	f7fd fd7e 	bl	8002a84 <fixed_section_start>
    motor_start();
 8004f88:	f7fe fef4 	bl	8003d74 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <tim6_start+0x28>)
 8004f8e:	f004 f9bf 	bl	8009310 <HAL_TIM_Base_Start_IT>
    debug_num += 0b1;
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <tim6_start+0x2c>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	3301      	adds	r3, #1
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <tim6_start+0x2c>)
 8004f9c:	701a      	strb	r2, [r3, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000630 	.word	0x20000630
 8004fa8:	200121ed 	.word	0x200121ed

08004fac <tim6_stop>:

void tim6_stop()
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
    motor_stop();
 8004fb0:	f7fe fef2 	bl	8003d98 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8004fb4:	4807      	ldr	r0, [pc, #28]	; (8004fd4 <tim6_stop+0x28>)
 8004fb6:	f004 fa1b 	bl	80093f0 <HAL_TIM_Base_Stop_IT>
    course_stop();
 8004fba:	f7fc ff41 	bl	8001e40 <course_stop>
    virtual_marker_stop();
 8004fbe:	f000 fee1 	bl	8005d84 <virtual_marker_stop>
    debug_num += 0b10;
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <tim6_stop+0x2c>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <tim6_stop+0x2c>)
 8004fcc:	701a      	strb	r2, [r3, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000630 	.word	0x20000630
 8004fd8:	200121ed 	.word	0x200121ed

08004fdc <tim6_main>:

void tim6_main()
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	ed2d 8b02 	vpush	{d8}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
    #endif
    SideSensorState markerstate;
    SideSensorState markerstate_volatile;
    PlayMode playmode;

    playmode = rotary_read_playmode();
 8004fe6:	f7fc fad7 	bl	8001598 <rotary_read_playmode>
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]

    //! コース状態の把握
    //! ここ以降 virtual_marker_read_markerstate() / virtual_marker_read_markerstate_volatile() で読みだせる
    virtual_marker_main();
 8004fee:	f000 fec1 	bl	8005d74 <virtual_marker_main>
    //! 格納されるのは直前のマーカの状態であり、区間中はリセットされないことに注意すべし！
    markerstate = virtual_marker_read_markerstate();
 8004ff2:	f000 fee1 	bl	8005db8 <virtual_marker_read_markerstate>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	71bb      	strb	r3, [r7, #6]
    //! 格納されるのは現在マーカを読んだか読んでないか、次に virtual_marker_main() が来た時に変化することに注意
    markerstate_volatile = virtual_marker_read_markerstate_volatile();
 8004ffa:	f000 fee9 	bl	8005dd0 <virtual_marker_read_markerstate_volatile>
 8004ffe:	4603      	mov	r3, r0
 8005000:	717b      	strb	r3, [r7, #5]

    debug_num = 0;
 8005002:	4b4f      	ldr	r3, [pc, #316]	; (8005140 <tim6_main+0x164>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
    debug_num += 0b100;
 8005008:	4b4d      	ldr	r3, [pc, #308]	; (8005140 <tim6_main+0x164>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	3304      	adds	r3, #4
 800500e:	b2da      	uxtb	r2, r3
 8005010:	4b4b      	ldr	r3, [pc, #300]	; (8005140 <tim6_main+0x164>)
 8005012:	701a      	strb	r2, [r3, #0]
    if(motor_read_enable() && playmode != motor_free)
 8005014:	f7fe fee8 	bl	8003de8 <motor_read_enable>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d05e      	beq.n	80050dc <tim6_main+0x100>
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d05b      	beq.n	80050dc <tim6_main+0x100>
    {
        #if !(TRACER_TUNING || VELOTRACE_TUNING)
        switch(playmode)
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	2b05      	cmp	r3, #5
 8005028:	d002      	beq.n	8005030 <tim6_main+0x54>
 800502a:	2b06      	cmp	r3, #6
 800502c:	d01b      	beq.n	8005066 <tim6_main+0x8a>
 800502e:	e035      	b.n	800509c <tim6_main+0xc0>
        {
            case tracer_tuning:
                leftmotor   = 0 + tim7_read_left();
 8005030:	f000 f9ac 	bl	800538c <tim7_read_left>
 8005034:	eef0 7a40 	vmov.f32	s15, s0
 8005038:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005144 <tim6_main+0x168>
 800503c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005040:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = 0 + tim7_read_right();
 8005044:	f000 f9b0 	bl	80053a8 <tim7_read_right>
 8005048:	eef0 7a40 	vmov.f32	s15, s0
 800504c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005144 <tim6_main+0x168>
 8005050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005054:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b1000;
 8005058:	4b39      	ldr	r3, [pc, #228]	; (8005140 <tim6_main+0x164>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	b2da      	uxtb	r2, r3
 8005060:	4b37      	ldr	r3, [pc, #220]	; (8005140 <tim6_main+0x164>)
 8005062:	701a      	strb	r2, [r3, #0]
                break;
 8005064:	e039      	b.n	80050da <tim6_main+0xfe>
            case velotrace_tuning:
                leftmotor   = tim10_read_left() + 0;
 8005066:	f7ff ff33 	bl	8004ed0 <tim10_read_left>
 800506a:	eef0 7a40 	vmov.f32	s15, s0
 800506e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005144 <tim6_main+0x168>
 8005072:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005076:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + 0;
 800507a:	f7ff ff37 	bl	8004eec <tim10_read_right>
 800507e:	eef0 7a40 	vmov.f32	s15, s0
 8005082:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005144 <tim6_main+0x168>
 8005086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800508a:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b10000;
 800508e:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <tim6_main+0x164>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	3310      	adds	r3, #16
 8005094:	b2da      	uxtb	r2, r3
 8005096:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <tim6_main+0x164>)
 8005098:	701a      	strb	r2, [r3, #0]
                break;
 800509a:	e01e      	b.n	80050da <tim6_main+0xfe>
            default:
                leftmotor   = tim10_read_left() + tim7_read_left();
 800509c:	f7ff ff18 	bl	8004ed0 <tim10_read_left>
 80050a0:	eeb0 8a40 	vmov.f32	s16, s0
 80050a4:	f000 f972 	bl	800538c <tim7_read_left>
 80050a8:	eef0 7a40 	vmov.f32	s15, s0
 80050ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80050b0:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + tim7_read_right();
 80050b4:	f7ff ff1a 	bl	8004eec <tim10_read_right>
 80050b8:	eeb0 8a40 	vmov.f32	s16, s0
 80050bc:	f000 f974 	bl	80053a8 <tim7_read_right>
 80050c0:	eef0 7a40 	vmov.f32	s15, s0
 80050c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80050c8:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b100000;
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <tim6_main+0x164>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	3320      	adds	r3, #32
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <tim6_main+0x164>)
 80050d6:	701a      	strb	r2, [r3, #0]
                break;
 80050d8:	bf00      	nop
        switch(playmode)
 80050da:	e00b      	b.n	80050f4 <tim6_main+0x118>
        #endif
		#endif	/* !(TRACER_TUNING || VELOTRACE_TUNING) */
    }
    else
    {
        leftmotor = 0;
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
        rightmotor = 0;
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	60bb      	str	r3, [r7, #8]
        debug_num += 0b1000000;
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <tim6_main+0x164>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	3340      	adds	r3, #64	; 0x40
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	4b13      	ldr	r3, [pc, #76]	; (8005140 <tim6_main+0x164>)
 80050f2:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#else
    //! 距離が COURSE_SAMPLING_LENGTH になっていたら course_state_function() を実行する関数
    fixed_section_main();
 80050f4:	f7fd fcd6 	bl	8002aa4 <fixed_section_main>
#endif

    switch(markerstate)
 80050f8:	79bb      	ldrb	r3, [r7, #6]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d10a      	bne.n	8005114 <tim6_main+0x138>
    {
        case stop:
            switch_reset_enter();
 80050fe:	f7fc fb3f 	bl	8001780 <switch_reset_enter>
            tim6_stop();
 8005102:	f7ff ff53 	bl	8004fac <tim6_stop>
            motor_set(0, 0);
 8005106:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005144 <tim6_main+0x168>
 800510a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005144 <tim6_main+0x168>
 800510e:	f7fe fe77 	bl	8003e00 <motor_set>
            break;
 8005112:	e00c      	b.n	800512e <tim6_main+0x152>
        default:
            debug_num += 0b10000000;
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <tim6_main+0x164>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	3b80      	subs	r3, #128	; 0x80
 800511a:	b2da      	uxtb	r2, r3
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <tim6_main+0x164>)
 800511e:	701a      	strb	r2, [r3, #0]
            motor_set(leftmotor, rightmotor);
 8005120:	edd7 0a02 	vldr	s1, [r7, #8]
 8005124:	ed97 0a03 	vldr	s0, [r7, #12]
 8005128:	f7fe fe6a 	bl	8003e00 <motor_set>
            break;
 800512c:	bf00      	nop
    }

    tim6_markerstate_before = markerstate;
 800512e:	4a06      	ldr	r2, [pc, #24]	; (8005148 <tim6_main+0x16c>)
 8005130:	79bb      	ldrb	r3, [r7, #6]
 8005132:	7013      	strb	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	ecbd 8b02 	vpop	{d8}
 800513e:	bd80      	pop	{r7, pc}
 8005140:	200121ed 	.word	0x200121ed
 8005144:	00000000 	.word	0x00000000
 8005148:	200121ec 	.word	0x200121ec

0800514c <tim6_d_print>:

void tim6_d_print()
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
    printf("tim6.c > debug_num = ");
    print_bin(debug_num);
    printf("\r\n");
    printf("tim6.c > tim6_d_print() > motor_enable = %1d, leftmotor = %5.3f, rightmotor = %5.3f\r\n", motor_read_enable(), leftmotor, rightmotor); 
    #endif
    virtual_marker_d_print();
 8005150:	f000 fe4a 	bl	8005de8 <virtual_marker_d_print>
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}

08005158 <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
    #endif
    analog_init();
 800515c:	f7fc fce0 	bl	8001b20 <analog_init>
    tracer_init(TIM7_TIME_MS);
 8005160:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005164:	f000 f99a 	bl	800549c <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 8005168:	4802      	ldr	r0, [pc, #8]	; (8005174 <tim7_init+0x1c>)
 800516a:	f004 f941 	bl	80093f0 <HAL_TIM_Base_Stop_IT>
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000678 	.word	0x20000678

08005178 <tim7_start>:

void tim7_start()
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
    #endif
    tim7_set_emergency(0);
 800517c:	2000      	movs	r0, #0
 800517e:	f000 f8f5 	bl	800536c <tim7_set_emergency>
    tim7_left = 0;
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <tim7_start+0x3c>)
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
    tim7_right = 0;
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <tim7_start+0x40>)
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8005192:	490a      	ldr	r1, [pc, #40]	; (80051bc <tim7_start+0x44>)
 8005194:	480a      	ldr	r0, [pc, #40]	; (80051c0 <tim7_start+0x48>)
 8005196:	f7fc fc2b 	bl	80019f0 <analog_set_from_flash>
    analog_set_analogmode(analogmode_short);
 800519a:	200c      	movs	r0, #12
 800519c:	f7fc fc64 	bl	8001a68 <analog_set_analogmode>

    analog_start();
 80051a0:	f7fc fcd0 	bl	8001b44 <analog_start>
    tracer_start();
 80051a4:	f000 f996 	bl	80054d4 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 80051a8:	4806      	ldr	r0, [pc, #24]	; (80051c4 <tim7_start+0x4c>)
 80051aa:	f004 f8b1 	bl	8009310 <HAL_TIM_Base_Start_IT>
}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200121f0 	.word	0x200121f0
 80051b8:	200121f4 	.word	0x200121f4
 80051bc:	2000080a 	.word	0x2000080a
 80051c0:	200007ea 	.word	0x200007ea
 80051c4:	20000678 	.word	0x20000678

080051c8 <tim7_stop>:

void tim7_stop()
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 80051cc:	4804      	ldr	r0, [pc, #16]	; (80051e0 <tim7_stop+0x18>)
 80051ce:	f004 f90f 	bl	80093f0 <HAL_TIM_Base_Stop_IT>
    tracer_stop();
 80051d2:	f000 f9c7 	bl	8005564 <tracer_stop>
    analog_stop();
 80051d6:	f7fc fcbb 	bl	8001b50 <analog_stop>
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000678 	.word	0x20000678

080051e4 <tim7_main>:

void tim7_main()
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 80051ea:	f000 f819 	bl	8005220 <tim7_read_direction>
 80051ee:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("direction = %5d\r\n", direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fad1 	bl	8005798 <tracer_solve>
 80051f6:	eef0 7a40 	vmov.f32	s15, s0
 80051fa:	4b07      	ldr	r3, [pc, #28]	; (8005218 <tim7_main+0x34>)
 80051fc:	edc3 7a00 	vstr	s15, [r3]
    tim7_right  = - tim7_left;
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <tim7_main+0x34>)
 8005202:	edd3 7a00 	vldr	s15, [r3]
 8005206:	eef1 7a67 	vneg.f32	s15, s15
 800520a:	4b04      	ldr	r3, [pc, #16]	; (800521c <tim7_main+0x38>)
 800520c:	edc3 7a00 	vstr	s15, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200121f0 	.word	0x200121f0
 800521c:	200121f4 	.word	0x200121f4

08005220 <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 8005220:	b590      	push	{r4, r7, lr}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
    uint16_t short_middle;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	81fb      	strh	r3, [r7, #14]
    analogr = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	81bb      	strh	r3, [r7, #12]

    switch(analog_read_analogmode())
 800522e:	f7fc fc2b 	bl	8001a88 <analog_read_analogmode>
 8005232:	4603      	mov	r3, r0
 8005234:	2b10      	cmp	r3, #16
 8005236:	d834      	bhi.n	80052a2 <tim7_read_direction+0x82>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <tim7_read_direction+0x20>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	080052a3 	.word	0x080052a3
 8005244:	080052a3 	.word	0x080052a3
 8005248:	080052a3 	.word	0x080052a3
 800524c:	080052a3 	.word	0x080052a3
 8005250:	0800528f 	.word	0x0800528f
 8005254:	080052a3 	.word	0x080052a3
 8005258:	080052a3 	.word	0x080052a3
 800525c:	080052a3 	.word	0x080052a3
 8005260:	080052a3 	.word	0x080052a3
 8005264:	080052a3 	.word	0x080052a3
 8005268:	080052a3 	.word	0x080052a3
 800526c:	080052a3 	.word	0x080052a3
 8005270:	08005285 	.word	0x08005285
 8005274:	080052a3 	.word	0x080052a3
 8005278:	080052a3 	.word	0x080052a3
 800527c:	080052a3 	.word	0x080052a3
 8005280:	08005299 	.word	0x08005299
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 8005284:	230c      	movs	r3, #12
 8005286:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	723b      	strb	r3, [r7, #8]
            break;
 800528c:	e00a      	b.n	80052a4 <tim7_read_direction+0x84>
        case analogmode_long:
            i_count = 4;
 800528e:	2304      	movs	r3, #4
 8005290:	727b      	strb	r3, [r7, #9]
            i_start = 12;
 8005292:	230c      	movs	r3, #12
 8005294:	723b      	strb	r3, [r7, #8]
            break;
 8005296:	e005      	b.n	80052a4 <tim7_read_direction+0x84>
        case analogmode_all:
            i_count = 16;
 8005298:	2310      	movs	r3, #16
 800529a:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	723b      	strb	r3, [r7, #8]
            break;
 80052a0:	e000      	b.n	80052a4 <tim7_read_direction+0x84>
        default:
            /* unknown analogmode ... x_x */
            break;
 80052a2:	bf00      	nop
    }

    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 80052a4:	7a3b      	ldrb	r3, [r7, #8]
 80052a6:	71fb      	strb	r3, [r7, #7]
 80052a8:	e022      	b.n	80052f0 <tim7_read_direction+0xd0>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <tim7_read_direction+0xaa>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fc fc71 	bl	8001ba0 <analog_sensor_get>
 80052be:	4603      	mov	r3, r0
 80052c0:	461a      	mov	r2, r3
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	4413      	add	r3, r2
 80052c6:	81fb      	strh	r3, [r7, #14]
 80052c8:	e008      	b.n	80052dc <tim7_read_direction+0xbc>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fc fc67 	bl	8001ba0 <analog_sensor_get>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	89bb      	ldrh	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	81bb      	strh	r3, [r7, #12]
        }
        if(i < SHORT_MIDDLE_SENSOR)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d803      	bhi.n	80052ea <tim7_read_direction+0xca>
        {
            short_middle = analogl + analogr;
 80052e2:	89fa      	ldrh	r2, [r7, #14]
 80052e4:	89bb      	ldrh	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	817b      	strh	r3, [r7, #10]
    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	3301      	adds	r3, #1
 80052ee:	71fb      	strb	r3, [r7, #7]
 80052f0:	79fa      	ldrb	r2, [r7, #7]
 80052f2:	7a79      	ldrb	r1, [r7, #9]
 80052f4:	7a3b      	ldrb	r3, [r7, #8]
 80052f6:	440b      	add	r3, r1
 80052f8:	429a      	cmp	r2, r3
 80052fa:	dbd6      	blt.n	80052aa <tim7_read_direction+0x8a>
    {
    	// tim7_main_emergency();
    }

    //if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR && virtual_marker_read_markerstate() == cross)
    if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR)
 80052fc:	897b      	ldrh	r3, [r7, #10]
 80052fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005302:	4293      	cmp	r3, r2
 8005304:	d824      	bhi.n	8005350 <tim7_read_direction+0x130>
    {
        /* 交差判定 */
        analogl = 3 * (analog_sensor_get(12) + analog_sensor_get(14));
 8005306:	200c      	movs	r0, #12
 8005308:	f7fc fc4a 	bl	8001ba0 <analog_sensor_get>
 800530c:	4603      	mov	r3, r0
 800530e:	461c      	mov	r4, r3
 8005310:	200e      	movs	r0, #14
 8005312:	f7fc fc45 	bl	8001ba0 <analog_sensor_get>
 8005316:	4603      	mov	r3, r0
 8005318:	4423      	add	r3, r4
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	0052      	lsls	r2, r2, #1
 8005320:	4413      	add	r3, r2
 8005322:	81fb      	strh	r3, [r7, #14]
        analogr = 3 * (analog_sensor_get(13) + analog_sensor_get(15));
 8005324:	200d      	movs	r0, #13
 8005326:	f7fc fc3b 	bl	8001ba0 <analog_sensor_get>
 800532a:	4603      	mov	r3, r0
 800532c:	461c      	mov	r4, r3
 800532e:	200f      	movs	r0, #15
 8005330:	f7fc fc36 	bl	8001ba0 <analog_sensor_get>
 8005334:	4603      	mov	r3, r0
 8005336:	4423      	add	r3, r4
 8005338:	b29b      	uxth	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	0052      	lsls	r2, r2, #1
 800533e:	4413      	add	r3, r2
 8005340:	81bb      	strh	r3, [r7, #12]
        /* 長い方のゲイン値にする */
        tim7_tracer_set_gain_long();
 8005342:	f000 f84d 	bl	80053e0 <tim7_tracer_set_gain_long>
        led_write_led(0b11, 0b10);
 8005346:	2102      	movs	r1, #2
 8005348:	2003      	movs	r0, #3
 800534a:	f7fc f8eb 	bl	8001524 <led_write_led>
 800534e:	e005      	b.n	800535c <tim7_read_direction+0x13c>
    }
    else
    {
        /* その他判定 */
        /* 短い方のゲイン値にする（戻すって言った方が正しいかも） */
        tim7_tracer_set_gain_short();
 8005350:	f000 f840 	bl	80053d4 <tim7_tracer_set_gain_short>
        led_write_led(0b11, 0b01);
 8005354:	2101      	movs	r1, #1
 8005356:	2003      	movs	r0, #3
 8005358:	f7fc f8e4 	bl	8001524 <led_write_led>
#if D_TIM7_WHILE
	printf("tim7.c > tim7_main() > ");
	printf("analogl = %5d, analogr = %5d\r\n", analogl, analogr);
#endif

    return analogl - analogr;
 800535c:	89fa      	ldrh	r2, [r7, #14]
 800535e:	89bb      	ldrh	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bd90      	pop	{r4, r7, pc}
 800536a:	bf00      	nop

0800536c <tim7_set_emergency>:
{
	switch_reset_enter();
}

void tim7_set_emergency(char emergency_)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <tim7_set_emergency+0x1c>)
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	7013      	strb	r3, [r2, #0]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	200121f8 	.word	0x200121f8

0800538c <tim7_read_left>:
{
    return tim7_emergency;
}

float tim7_read_left()
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <tim7_read_left+0x18>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	ee07 3a90 	vmov	s15, r3
}
 8005398:	eeb0 0a67 	vmov.f32	s0, s15
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	200121f0 	.word	0x200121f0

080053a8 <tim7_read_right>:

float tim7_read_right()
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <tim7_read_right+0x18>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	ee07 3a90 	vmov	s15, r3
}
 80053b4:	eeb0 0a67 	vmov.f32	s0, s15
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	200121f4 	.word	0x200121f4

080053c4 <tim7_d_print>:

void tim7_d_print()
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
#if D_TIM7
    printf("tim7_left = %f, tim7_right = %f\r\n", tim7_left, tim7_right);
#endif
    analog_d_print();
 80053c8:	f7fc faae 	bl	8001928 <analog_d_print>
    tracer_print_values();
 80053cc:	f000 fa5c 	bl	8005888 <tracer_print_values>
}
 80053d0:	bf00      	nop
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <tim7_tracer_set_gain_short>:

void tim7_tracer_set_gain_short()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
    tracer_set_gain_default();
 80053d8:	f000 f9a6 	bl	8005728 <tracer_set_gain_default>
}
 80053dc:	bf00      	nop
 80053de:	bd80      	pop	{r7, pc}

080053e0 <tim7_tracer_set_gain_long>:

void tim7_tracer_set_gain_long()
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
    float kp, ki, kd;
    kp = TIM7_LONG_KP;
 80053e6:	4b09      	ldr	r3, [pc, #36]	; (800540c <tim7_tracer_set_gain_long+0x2c>)
 80053e8:	60fb      	str	r3, [r7, #12]
    ki = TIM7_LONG_KI;
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	60bb      	str	r3, [r7, #8]
    kd = TIM7_LONG_KD;
 80053f0:	4b07      	ldr	r3, [pc, #28]	; (8005410 <tim7_tracer_set_gain_long+0x30>)
 80053f2:	607b      	str	r3, [r7, #4]
    tracer_set_gain_direct(kp, ki, kd);
 80053f4:	ed97 1a01 	vldr	s2, [r7, #4]
 80053f8:	edd7 0a02 	vldr	s1, [r7, #8]
 80053fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8005400:	f000 f8ec 	bl	80055dc <tracer_set_gain_direct>
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	3e4ccccd 	.word	0x3e4ccccd
 8005410:	3b9374bc 	.word	0x3b9374bc

08005414 <time_update_ms>:
 * @fn time_update_ms()
 * @brief 1 ms 周期で呼び出される割り込み内で実行する必要がある
 * 
 */
void time_update_ms(unsigned short int step)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	80fb      	strh	r3, [r7, #6]
    /**
     * @brief time_ms が 1 時間（ 3600,000 ミリ秒 ）を超えた時にゼロに戻す
     * 
     */
    time_countup(&time_ms, step, 6300000);
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <time_update_ms+0x30>)
 8005422:	4619      	mov	r1, r3
 8005424:	4808      	ldr	r0, [pc, #32]	; (8005448 <time_update_ms+0x34>)
 8005426:	f000 f813 	bl	8005450 <time_countup>
    time_origin = time_ms * 1000;
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <time_update_ms+0x34>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	4a05      	ldr	r2, [pc, #20]	; (800544c <time_update_ms+0x38>)
 8005438:	6013      	str	r3, [r2, #0]
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	00602160 	.word	0x00602160
 8005448:	200121fc 	.word	0x200121fc
 800544c:	20012200 	.word	0x20012200

08005450 <time_countup>:
    time_ms = 0;
    time_origin = 0;
}

void time_countup(unsigned int *_time, unsigned short int step, unsigned int _time_max)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	460b      	mov	r3, r1
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	817b      	strh	r3, [r7, #10]
    if(*_time + step >= _time_max)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	897b      	ldrh	r3, [r7, #10]
 8005464:	4413      	add	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d809      	bhi.n	8005480 <time_countup+0x30>
    {
        *_time = 0;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
        time_reset_count = time_reset_count + 1;
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <time_countup+0x48>)
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <time_countup+0x48>)
 800547c:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        *_time = *_time + step;
    }
}
 800547e:	e005      	b.n	800548c <time_countup+0x3c>
        *_time = *_time + step;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	897b      	ldrh	r3, [r7, #10]
 8005486:	441a      	add	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	601a      	str	r2, [r3, #0]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	20012204 	.word	0x20012204

0800549c <tracer_init>:
PID tracer_pid;
PID tracer_default;
uint8_t tracer_started;

void tracer_init(float samplingtime_ms)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_started = 0;
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <tracer_init+0x30>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
    tracer_sampling_time_ms = samplingtime_ms;
 80054ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80054b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b4:	ee17 3a90 	vmov	r3, s15
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <tracer_init+0x34>)
 80054bc:	801a      	strh	r2, [r3, #0]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20012234 	.word	0x20012234
 80054d0:	20012210 	.word	0x20012210

080054d4 <tracer_start>:

void tracer_start()
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
    if(tracer_started <= 0)
 80054da:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <tracer_start+0x84>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d133      	bne.n	800554a <tracer_start+0x76>
    {
        float kp, ki, kd;
        tracer_s_error = 0;
 80054e2:	4b1e      	ldr	r3, [pc, #120]	; (800555c <tracer_start+0x88>)
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
        tracer_before_error = 0;
 80054ea:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <tracer_start+0x8c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
        kp = tracer_calc_gain_kp(rotary_read_value());
 80054f0:	f7fc f86a 	bl	80015c8 <rotary_read_value>
 80054f4:	4603      	mov	r3, r0
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f8ad 	bl	8005658 <tracer_calc_gain_kp>
 80054fe:	ed87 0a03 	vstr	s0, [r7, #12]
        ki = tracer_calc_gain_ki(rotary_read_value());
 8005502:	f7fc f861 	bl	80015c8 <rotary_read_value>
 8005506:	4603      	mov	r3, r0
 8005508:	b29b      	uxth	r3, r3
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f8c6 	bl	800569c <tracer_calc_gain_ki>
 8005510:	ed87 0a02 	vstr	s0, [r7, #8]
        kd = tracer_calc_gain_kd(rotary_read_value());
 8005514:	f7fc f858 	bl	80015c8 <rotary_read_value>
 8005518:	4603      	mov	r3, r0
 800551a:	b29b      	uxth	r3, r3
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f8df 	bl	80056e0 <tracer_calc_gain_kd>
 8005522:	ed87 0a01 	vstr	s0, [r7, #4]
        tracer_set_default_now_gain(kp, ki, kd);
 8005526:	ed97 1a01 	vldr	s2, [r7, #4]
 800552a:	edd7 0a02 	vldr	s1, [r7, #8]
 800552e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005532:	f000 f909 	bl	8005748 <tracer_set_default_now_gain>
        tracer_set_target_zero();
 8005536:	f000 f86b 	bl	8005610 <tracer_set_target_zero>
        tracer_set_gain_direct(kp, ki, kd);
 800553a:	ed97 1a01 	vldr	s2, [r7, #4]
 800553e:	edd7 0a02 	vldr	s1, [r7, #8]
 8005542:	ed97 0a03 	vldr	s0, [r7, #12]
 8005546:	f000 f849 	bl	80055dc <tracer_set_gain_direct>
    #if D_TRACER
        printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", kp, ki, kd);
        print_pid(&tracer_pid);
    #endif
    }
    tracer_started = 1;
 800554a:	4b03      	ldr	r3, [pc, #12]	; (8005558 <tracer_start+0x84>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20012234 	.word	0x20012234
 800555c:	20012208 	.word	0x20012208
 8005560:	2001220c 	.word	0x2001220c

08005564 <tracer_stop>:

void tracer_stop()
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
    tracer_set_gain_zero();
 8005568:	f000 f860 	bl	800562c <tracer_set_gain_zero>
    tracer_started = 0;
 800556c:	4b02      	ldr	r3, [pc, #8]	; (8005578 <tracer_stop+0x14>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20012234 	.word	0x20012234

0800557c <tracer_set_gain_kp_direct>:
{
    tracer_set_gain_kd_direct(tracer_calc_gain_kd(i));
}

void tracer_set_gain_kp_direct(float kp)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kp = kp;
 8005586:	4a04      	ldr	r2, [pc, #16]	; (8005598 <tracer_set_gain_kp_direct+0x1c>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6053      	str	r3, [r2, #4]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	20012214 	.word	0x20012214

0800559c <tracer_set_gain_ki_direct>:

void tracer_set_gain_ki_direct(float ki)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.ki = ki;
 80055a6:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <tracer_set_gain_ki_direct+0x1c>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6093      	str	r3, [r2, #8]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	20012214 	.word	0x20012214

080055bc <tracer_set_gain_kd_direct>:

void tracer_set_gain_kd_direct(float kd)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kd = kd;
 80055c6:	4a04      	ldr	r2, [pc, #16]	; (80055d8 <tracer_set_gain_kd_direct+0x1c>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60d3      	str	r3, [r2, #12]
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	20012214 	.word	0x20012214

080055dc <tracer_set_gain_direct>:

void tracer_set_gain_direct(float kp, float ki, float kd)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80055e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80055ea:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_set_gain_kp_direct(kp);
 80055ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80055f2:	f7ff ffc3 	bl	800557c <tracer_set_gain_kp_direct>
    tracer_set_gain_ki_direct(ki);
 80055f6:	ed97 0a02 	vldr	s0, [r7, #8]
 80055fa:	f7ff ffcf 	bl	800559c <tracer_set_gain_ki_direct>
    tracer_set_gain_kd_direct(kd);
 80055fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8005602:	f7ff ffdb 	bl	80055bc <tracer_set_gain_kd_direct>
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <tracer_set_target_zero>:

/* kp ki kd set zero */
void tracer_set_target_zero()
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <tracer_set_target_zero+0x18>)
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20012214 	.word	0x20012214

0800562c <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <tracer_set_gain_zero+0x28>)
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	605a      	str	r2, [r3, #4]
    tracer_pid.ki = 0;
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <tracer_set_gain_zero+0x28>)
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	609a      	str	r2, [r3, #8]
    tracer_pid.kd = 0;
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <tracer_set_gain_zero+0x28>)
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	60da      	str	r2, [r3, #12]
}
 8005648:	bf00      	nop
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20012214 	.word	0x20012214

08005658 <tracer_calc_gain_kp>:

/* calclate pid values from rotary value */
float tracer_calc_gain_kp(unsigned short int i)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KP_MAX - TRACER_KP_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	f1c3 030f 	rsb	r3, r3, #15
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005670:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005698 <tracer_calc_gain_kp+0x40>
 8005674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005678:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800567c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005684:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005688:	eeb0 0a67 	vmov.f32	s0, s15
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	00000000 	.word	0x00000000

0800569c <tracer_calc_gain_ki>:

float tracer_calc_gain_ki(unsigned short int i)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KI_MAX - TRACER_KI_MIN) / (float) (TRACER_STEP_SIZE - 1);
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	f1c3 030f 	rsb	r3, r3, #15
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80056dc <tracer_calc_gain_ki+0x40>
 80056b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056bc:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80056c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056c4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80056dc <tracer_calc_gain_ki+0x40>
 80056c8:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80056cc:	eeb0 0a67 	vmov.f32	s0, s15
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	00000000 	.word	0x00000000

080056e0 <tracer_calc_gain_kd>:

float tracer_calc_gain_kd(unsigned short int i)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KD_MAX - TRACER_KD_MIN) / (float) (TRACER_STEP_SIZE - 1);
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	f1c3 030f 	rsb	r3, r3, #15
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005720 <tracer_calc_gain_kd+0x40>
 80056fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005700:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005708:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005724 <tracer_calc_gain_kd+0x44>
 800570c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005710:	eeb0 0a67 	vmov.f32	s0, s15
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	00000000 	.word	0x00000000
 8005724:	3c656042 	.word	0x3c656042

08005728 <tracer_set_gain_default>:

/* set default */
void tracer_set_gain_default()
{
 8005728:	b490      	push	{r4, r7}
 800572a:	af00      	add	r7, sp, #0
    tracer_pid = tracer_default;
 800572c:	4a04      	ldr	r2, [pc, #16]	; (8005740 <tracer_set_gain_default+0x18>)
 800572e:	4b05      	ldr	r3, [pc, #20]	; (8005744 <tracer_set_gain_default+0x1c>)
 8005730:	4614      	mov	r4, r2
 8005732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	bc90      	pop	{r4, r7}
 800573e:	4770      	bx	lr
 8005740:	20012214 	.word	0x20012214
 8005744:	20012224 	.word	0x20012224

08005748 <tracer_set_default_now_gain>:

void tracer_set_default_now_gain(float kp, float ki, float kd)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005752:	edc7 0a02 	vstr	s1, [r7, #8]
 8005756:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_default.target = 0;
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <tracer_set_default_now_gain+0x38>)
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    tracer_default.kp = kp;
 8005762:	4a07      	ldr	r2, [pc, #28]	; (8005780 <tracer_set_default_now_gain+0x38>)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6053      	str	r3, [r2, #4]
    tracer_default.ki = ki;
 8005768:	4a05      	ldr	r2, [pc, #20]	; (8005780 <tracer_set_default_now_gain+0x38>)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6093      	str	r3, [r2, #8]
    tracer_default.kd = kd;
 800576e:	4a04      	ldr	r2, [pc, #16]	; (8005780 <tracer_set_default_now_gain+0x38>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60d3      	str	r3, [r2, #12]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20012224 	.word	0x20012224

08005784 <tracer_read_values>:
    tracer_pid.ki = _pid->ki;
    tracer_pid.kd = _pid->kd;
}

PID* tracer_read_values()
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
    return &tracer_pid;
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <tracer_read_values+0x10>)
}
 800578a:	4618      	mov	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	20012214 	.word	0x20012214

08005798 <tracer_solve>:

float tracer_solve(int reference_)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_ - tracer_pid.target;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057aa:	4b32      	ldr	r3, [pc, #200]	; (8005874 <tracer_solve+0xdc>)
 80057ac:	edd3 7a00 	vldr	s15, [r3]
 80057b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b8:	ee17 3a90 	vmov	r3, s15
 80057bc:	617b      	str	r3, [r7, #20]

    d_error = (error - tracer_before_error) / (float) (tracer_sampling_time_ms / (float) 1000);
 80057be:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <tracer_solve+0xe0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057ce:	4b2b      	ldr	r3, [pc, #172]	; (800587c <tracer_solve+0xe4>)
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057da:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8005880 <tracer_solve+0xe8>
 80057de:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80057e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e6:	edc7 7a04 	vstr	s15, [r7, #16]
    tracer_s_error += error * (float) (tracer_sampling_time_ms / (float) 1000);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057f4:	4b21      	ldr	r3, [pc, #132]	; (800587c <tracer_solve+0xe4>)
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005800:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8005880 <tracer_solve+0xe8>
 8005804:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <tracer_solve+0xec>)
 800580e:	edd3 7a00 	vldr	s15, [r3]
 8005812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005816:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <tracer_solve+0xec>)
 8005818:	edc3 7a00 	vstr	s15, [r3]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 800581c:	4b15      	ldr	r3, [pc, #84]	; (8005874 <tracer_solve+0xdc>)
 800581e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005830:	4b10      	ldr	r3, [pc, #64]	; (8005874 <tracer_solve+0xdc>)
 8005832:	edd3 6a02 	vldr	s13, [r3, #8]
 8005836:	4b13      	ldr	r3, [pc, #76]	; (8005884 <tracer_solve+0xec>)
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <tracer_solve+0xdc>)
 8005846:	edd3 6a03 	vldr	s13, [r3, #12]
 800584a:	edd7 7a04 	vldr	s15, [r7, #16]
 800584e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005856:	edc7 7a03 	vstr	s15, [r7, #12]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 800585a:	4a07      	ldr	r2, [pc, #28]	; (8005878 <tracer_solve+0xe0>)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	6013      	str	r3, [r2, #0]

    return result;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	ee07 3a90 	vmov	s15, r3
}
 8005866:	eeb0 0a67 	vmov.f32	s0, s15
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20012214 	.word	0x20012214
 8005878:	2001220c 	.word	0x2001220c
 800587c:	20012210 	.word	0x20012210
 8005880:	447a0000 	.word	0x447a0000
 8005884:	20012208 	.word	0x20012208

08005888 <tracer_print_values>:

void tracer_print_values()
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
#if D_TRACER
    printf("trac > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
#endif
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <velotrace_init>:
PID velotrace_pid;
uint8_t velotrace_started;

/* pre setting */
void velotrace_init(uint16_t samplingtime_ms)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	80fb      	strh	r3, [r7, #6]
    velotrace_started = 0;
 80058a2:	4b06      	ldr	r3, [pc, #24]	; (80058bc <velotrace_init+0x24>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
    velotrace_sampling_time_ms = samplingtime_ms;
 80058a8:	4a05      	ldr	r2, [pc, #20]	; (80058c0 <velotrace_init+0x28>)
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	8013      	strh	r3, [r2, #0]
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20012254 	.word	0x20012254
 80058c0:	20012240 	.word	0x20012240

080058c4 <velotrace_start>:

void velotrace_start()
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
    if(velotrace_started <= 0)
 80058ca:	4b47      	ldr	r3, [pc, #284]	; (80059e8 <velotrace_start+0x124>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 8082 	bne.w	80059d8 <velotrace_start+0x114>
    {
        float target, kp, ki, kd;
        #if D_VELOTRACE
        printf("velotrace_sampling_time_ms = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
        #endif
        velotrace_s_error = 0;
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <velotrace_start+0x128>)
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
        velotrace_before_error = 0;
 80058dc:	4b44      	ldr	r3, [pc, #272]	; (80059f0 <velotrace_start+0x12c>)
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
        velotrace_gain_tuning_time_ms = 0;
 80058e4:	4b43      	ldr	r3, [pc, #268]	; (80059f4 <velotrace_start+0x130>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	801a      	strh	r2, [r3, #0]
        switch(rotary_read_playmode())
 80058ea:	f7fb fe55 	bl	8001598 <rotary_read_playmode>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b07      	cmp	r3, #7
 80058f2:	d033      	beq.n	800595c <velotrace_start+0x98>
 80058f4:	2b07      	cmp	r3, #7
 80058f6:	dc56      	bgt.n	80059a6 <velotrace_start+0xe2>
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	dc02      	bgt.n	8005902 <velotrace_start+0x3e>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dc03      	bgt.n	8005908 <velotrace_start+0x44>
 8005900:	e051      	b.n	80059a6 <velotrace_start+0xe2>
 8005902:	2b06      	cmp	r3, #6
 8005904:	d00b      	beq.n	800591e <velotrace_start+0x5a>
 8005906:	e04e      	b.n	80059a6 <velotrace_start+0xe2>
                target = velotrace_calc_target(rotary_read_value());
                kp = velotrace_calc_gain_kp(rotary_read_value());
                ki = velotrace_calc_gain_ki(rotary_read_value());
                kd = velotrace_calc_gain_kd(rotary_read_value());
                */
                target = 1;
 8005908:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800590c:	60fb      	str	r3, [r7, #12]
                kp = 1000;
 800590e:	4b3a      	ldr	r3, [pc, #232]	; (80059f8 <velotrace_start+0x134>)
 8005910:	60bb      	str	r3, [r7, #8]
                ki = 100;
 8005912:	4b3a      	ldr	r3, [pc, #232]	; (80059fc <velotrace_start+0x138>)
 8005914:	607b      	str	r3, [r7, #4]
                kd = 0;
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	603b      	str	r3, [r7, #0]
                break;
 800591c:	e050      	b.n	80059c0 <velotrace_start+0xfc>
            case velotrace_tuning:
                target = 0;
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 8005924:	f7fb fe50 	bl	80015c8 <rotary_read_value>
 8005928:	4603      	mov	r3, r0
 800592a:	b29b      	uxth	r3, r3
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f909 	bl	8005b44 <velotrace_calc_gain_kp>
 8005932:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 8005936:	f7fb fe47 	bl	80015c8 <rotary_read_value>
 800593a:	4603      	mov	r3, r0
 800593c:	b29b      	uxth	r3, r3
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f924 	bl	8005b8c <velotrace_calc_gain_ki>
 8005944:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 8005948:	f7fb fe3e 	bl	80015c8 <rotary_read_value>
 800594c:	4603      	mov	r3, r0
 800594e:	b29b      	uxth	r3, r3
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f93f 	bl	8005bd4 <velotrace_calc_gain_kd>
 8005956:	ed87 0a00 	vstr	s0, [r7]
                break;
 800595a:	e031      	b.n	80059c0 <velotrace_start+0xfc>
            case velotrace_tuning_2:
                target = velotrace_calc_target(rotary_read_value());
 800595c:	f7fb fe34 	bl	80015c8 <rotary_read_value>
 8005960:	4603      	mov	r3, r0
 8005962:	b29b      	uxth	r3, r3
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f8cf 	bl	8005b08 <velotrace_calc_target>
 800596a:	ed87 0a03 	vstr	s0, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 800596e:	f7fb fe2b 	bl	80015c8 <rotary_read_value>
 8005972:	4603      	mov	r3, r0
 8005974:	b29b      	uxth	r3, r3
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f8e4 	bl	8005b44 <velotrace_calc_gain_kp>
 800597c:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 8005980:	f7fb fe22 	bl	80015c8 <rotary_read_value>
 8005984:	4603      	mov	r3, r0
 8005986:	b29b      	uxth	r3, r3
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f8ff 	bl	8005b8c <velotrace_calc_gain_ki>
 800598e:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 8005992:	f7fb fe19 	bl	80015c8 <rotary_read_value>
 8005996:	4603      	mov	r3, r0
 8005998:	b29b      	uxth	r3, r3
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f91a 	bl	8005bd4 <velotrace_calc_gain_kd>
 80059a0:	ed87 0a00 	vstr	s0, [r7]
                break;
 80059a4:	e00c      	b.n	80059c0 <velotrace_start+0xfc>
            case tracer_tuning:
            default:
                target = 0;
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
                kp = 0;
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
                ki = 0;
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	607b      	str	r3, [r7, #4]
                kd = 0;
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	603b      	str	r3, [r7, #0]
                break;
 80059be:	bf00      	nop
        }
        velotrace_set_target_direct(target);
 80059c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80059c4:	f000 f82a 	bl	8005a1c <velotrace_set_target_direct>
        velotrace_set_gain_direct(kp, ki, kd);
 80059c8:	ed97 1a00 	vldr	s2, [r7]
 80059cc:	edd7 0a01 	vldr	s1, [r7, #4]
 80059d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80059d4:	f000 f862 	bl	8005a9c <velotrace_set_gain_direct>
    }
    velotrace_started = 1;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <velotrace_start+0x124>)
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20012254 	.word	0x20012254
 80059ec:	20012238 	.word	0x20012238
 80059f0:	2001223c 	.word	0x2001223c
 80059f4:	20012242 	.word	0x20012242
 80059f8:	447a0000 	.word	0x447a0000
 80059fc:	42c80000 	.word	0x42c80000

08005a00 <velotrace_stop>:

void velotrace_stop()
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 8005a04:	f000 f864 	bl	8005ad0 <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 8005a08:	f000 f86c 	bl	8005ae4 <velotrace_set_gain_zero>
    velotrace_started = 0;
 8005a0c:	4b02      	ldr	r3, [pc, #8]	; (8005a18 <velotrace_stop+0x18>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20012254 	.word	0x20012254

08005a1c <velotrace_set_target_direct>:
{
    velotrace_pid.target = velotrace_calc_target(i);
}

void velotrace_set_target_direct(float target)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.target = target;
 8005a26:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <velotrace_set_target_direct+0x1c>)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6013      	str	r3, [r2, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	20012244 	.word	0x20012244

08005a3c <velotrace_set_gain_kp_direct>:
{
    velotrace_set_gain_kd_direct(velotrace_calc_gain_kd(i));
}

void velotrace_set_gain_kp_direct(float kp)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kp = kp;
 8005a46:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <velotrace_set_gain_kp_direct+0x1c>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6053      	str	r3, [r2, #4]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20012244 	.word	0x20012244

08005a5c <velotrace_set_gain_ki_direct>:

void velotrace_set_gain_ki_direct(float ki)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.ki = ki;
 8005a66:	4a04      	ldr	r2, [pc, #16]	; (8005a78 <velotrace_set_gain_ki_direct+0x1c>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6093      	str	r3, [r2, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20012244 	.word	0x20012244

08005a7c <velotrace_set_gain_kd_direct>:

void velotrace_set_gain_kd_direct(float kd)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kd = kd;
 8005a86:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <velotrace_set_gain_kd_direct+0x1c>)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60d3      	str	r3, [r2, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20012244 	.word	0x20012244

08005a9c <velotrace_set_gain_direct>:

void velotrace_set_gain_direct(float kp, float ki, float kd)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8005aa6:	edc7 0a02 	vstr	s1, [r7, #8]
 8005aaa:	ed87 1a01 	vstr	s2, [r7, #4]
    velotrace_set_gain_kp_direct(kp);
 8005aae:	ed97 0a03 	vldr	s0, [r7, #12]
 8005ab2:	f7ff ffc3 	bl	8005a3c <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(ki);
 8005ab6:	ed97 0a02 	vldr	s0, [r7, #8]
 8005aba:	f7ff ffcf 	bl	8005a5c <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(kd);
 8005abe:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ac2:	f7ff ffdb 	bl	8005a7c <velotrace_set_gain_kd_direct>
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <velotrace_set_target_zero>:

/* target kp ki kd set zero */
void velotrace_set_target_zero()
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
    velotrace_set_target_direct(0);
 8005ad4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005ae0 <velotrace_set_target_zero+0x10>
 8005ad8:	f7ff ffa0 	bl	8005a1c <velotrace_set_target_direct>
}
 8005adc:	bf00      	nop
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	00000000 	.word	0x00000000

08005ae4 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
    velotrace_set_gain_kp_direct(0);
 8005ae8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005b04 <velotrace_set_gain_zero+0x20>
 8005aec:	f7ff ffa6 	bl	8005a3c <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(0);
 8005af0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8005b04 <velotrace_set_gain_zero+0x20>
 8005af4:	f7ff ffb2 	bl	8005a5c <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(0);
 8005af8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005b04 <velotrace_set_gain_zero+0x20>
 8005afc:	f7ff ffbe 	bl	8005a7c <velotrace_set_gain_kd_direct>
}
 8005b00:	bf00      	nop
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	00000000 	.word	0x00000000

08005b08 <velotrace_calc_target>:

/* calclate pid values from rotary value */
float velotrace_calc_target(unsigned short int i)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	f1c3 030f 	rsb	r3, r3, #15
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005b24:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b2c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005b30:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005b34:	eeb0 0a67 	vmov.f32	s0, s15
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <velotrace_calc_gain_kp>:

float velotrace_calc_gain_kp(unsigned short int i)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	f1c3 030f 	rsb	r3, r3, #15
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b5c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005b84 <velotrace_calc_gain_kp+0x40>
 8005b60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b64:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b6c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005b88 <velotrace_calc_gain_kp+0x44>
 8005b70:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005b74:	eeb0 0a67 	vmov.f32	s0, s15
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	00000000 	.word	0x00000000
 8005b88:	447a0000 	.word	0x447a0000

08005b8c <velotrace_calc_gain_ki>:

float velotrace_calc_gain_ki(unsigned short int i)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	f1c3 030f 	rsb	r3, r3, #15
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005bcc <velotrace_calc_gain_ki+0x40>
 8005ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bac:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bb4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005bd0 <velotrace_calc_gain_ki+0x44>
 8005bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	00000000 	.word	0x00000000
 8005bd0:	42c80000 	.word	0x42c80000

08005bd4 <velotrace_calc_gain_kd>:

float velotrace_calc_gain_kd(unsigned short int i)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	f1c3 030f 	rsb	r3, r3, #15
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005c14 <velotrace_calc_gain_kd+0x40>
 8005bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bf4:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bfc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005c14 <velotrace_calc_gain_kd+0x40>
 8005c00:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005c04:	eeb0 0a67 	vmov.f32	s0, s15
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	00000000 	.word	0x00000000

08005c18 <velotrace_read_values>:
    velotrace_pid.ki = _pid->ki;
    velotrace_pid.kd = _pid->kd;
}

PID* velotrace_read_values()
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
    return &velotrace_pid;
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <velotrace_read_values+0x10>)
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20012244 	.word	0x20012244

08005c2c <velotrace_solve>:

float velotrace_solve(float reference_)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	ed87 0a01 	vstr	s0, [r7, #4]
    float error;
    float d_error;
    float result;

    error = reference_ - velotrace_pid.target;
 8005c36:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <velotrace_solve+0xc8>)
 8005c38:	edd3 7a00 	vldr	s15, [r3]
 8005c3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c44:	edc7 7a05 	vstr	s15, [r7, #20]

    d_error = (error - velotrace_before_error) / (float) (velotrace_sampling_time_ms / (float) 1000);
 8005c48:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <velotrace_solve+0xcc>)
 8005c4a:	edd3 7a00 	vldr	s15, [r3]
 8005c4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c52:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c56:	4b29      	ldr	r3, [pc, #164]	; (8005cfc <velotrace_solve+0xd0>)
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c62:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8005d00 <velotrace_solve+0xd4>
 8005c66:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6e:	edc7 7a04 	vstr	s15, [r7, #16]
    velotrace_s_error += error * (float) (velotrace_sampling_time_ms / (float) 1000);
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <velotrace_solve+0xd0>)
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c7e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005d00 <velotrace_solve+0xd4>
 8005c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c8e:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <velotrace_solve+0xd8>)
 8005c90:	edd3 7a00 	vldr	s15, [r3]
 8005c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <velotrace_solve+0xd8>)
 8005c9a:	edc3 7a00 	vstr	s15, [r3]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 8005c9e:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <velotrace_solve+0xc8>)
 8005ca0:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <velotrace_solve+0xc8>)
 8005cae:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <velotrace_solve+0xd8>)
 8005cb4:	edd3 7a00 	vldr	s15, [r3]
 8005cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <velotrace_solve+0xc8>)
 8005cc2:	edd3 6a03 	vldr	s13, [r3, #12]
 8005cc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cd2:	eef1 7a67 	vneg.f32	s15, s15
 8005cd6:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8005cda:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <velotrace_solve+0xcc>)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	6013      	str	r3, [r2, #0]

    return result;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	ee07 3a90 	vmov	s15, r3
}
 8005ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20012244 	.word	0x20012244
 8005cf8:	2001223c 	.word	0x2001223c
 8005cfc:	20012240 	.word	0x20012240
 8005d00:	447a0000 	.word	0x447a0000
 8005d04:	20012238 	.word	0x20012238

08005d08 <velotrace_print_values>:

void velotrace_print_values()
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
#if D_VELOTRACE
	printf("velo > target = %5.3f\r\n", velotrace_read_target());
	//! printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_calc_gain_kp(rotary_read_value()), velotrace_calc_gain_ki(rotary_read_value()), velotrace_calc_gain_kd(rotary_read_value()));
#endif
}
 8005d0c:	bf00      	nop
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <velotrace_gain_tuning>:

void velotrace_gain_tuning()
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
    //! 右センサを読んでからの時間を格納する
    velotrace_gain_tuning_time_ms += velotrace_sampling_time_ms;
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <velotrace_gain_tuning+0x34>)
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <velotrace_gain_tuning+0x38>)
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	4413      	add	r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <velotrace_gain_tuning+0x34>)
 8005d2a:	801a      	strh	r2, [r3, #0]
    //! 停止時間になったら
    if(velotrace_gain_tuning_time_ms >= VELOTRACE_GAIN_TUNING_STOP_TIME_MS)
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <velotrace_gain_tuning+0x34>)
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d903      	bls.n	8005d40 <velotrace_gain_tuning+0x28>
    {
        //! 速度の目標値をゼロにする
        velotrace_pid.target = 0;
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <velotrace_gain_tuning+0x3c>)
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
    }
}
 8005d40:	bf00      	nop
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20012242 	.word	0x20012242
 8005d50:	20012240 	.word	0x20012240
 8005d54:	20012244 	.word	0x20012244

08005d58 <virtual_marker_init>:
#include "virtual_marker.h"

SideSensorState virtual_marker_state, virtual_marker_state_volatile;

void virtual_marker_init()
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
    sidesensor_init();
 8005d5c:	f7fe fa26 	bl	80041ac <sidesensor_init>
}
 8005d60:	bf00      	nop
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <virtual_marker_start>:

void virtual_marker_start()
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
    sidesensor_start();
 8005d68:	f7fe fa28 	bl	80041bc <sidesensor_start>
    virtual_marker_set();
 8005d6c:	f000 f810 	bl	8005d90 <virtual_marker_set>
}
 8005d70:	bf00      	nop
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <virtual_marker_main>:

void virtual_marker_main()
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
    /* virtual_main */
    sidesensor_main();
 8005d78:	f7fe fab2 	bl	80042e0 <sidesensor_main>
    virtual_marker_set();
 8005d7c:	f000 f808 	bl	8005d90 <virtual_marker_set>
}
 8005d80:	bf00      	nop
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <virtual_marker_stop>:

void virtual_marker_stop()
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
    sidesensor_stop();
 8005d88:	f7fe fa3e 	bl	8004208 <sidesensor_stop>
}
 8005d8c:	bf00      	nop
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <virtual_marker_set>:

void virtual_marker_set()
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
    virtual_marker_state = sidesensor_read_markerstate();
 8005d94:	f7fe fa40 	bl	8004218 <sidesensor_read_markerstate>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <virtual_marker_set+0x20>)
 8005d9e:	701a      	strb	r2, [r3, #0]
    virtual_marker_state_volatile = sidesensor_read_markerstate_volatile();
 8005da0:	f7fe fa46 	bl	8004230 <sidesensor_read_markerstate_volatile>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	4b02      	ldr	r3, [pc, #8]	; (8005db4 <virtual_marker_set+0x24>)
 8005daa:	701a      	strb	r2, [r3, #0]
}
 8005dac:	bf00      	nop
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20012255 	.word	0x20012255
 8005db4:	20012256 	.word	0x20012256

08005db8 <virtual_marker_read_markerstate>:

SideSensorState virtual_marker_read_markerstate()
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
    return virtual_marker_state;
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <virtual_marker_read_markerstate+0x14>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20012255 	.word	0x20012255

08005dd0 <virtual_marker_read_markerstate_volatile>:

SideSensorState virtual_marker_read_markerstate_volatile()
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
    if(course_read_section_degree() / course_read_sampling_count() >= THRESHOLD_YAW_CURVE_OR_STRAIGHT)
    {
        virtual_marker_state_volatile = curve;
    }
    */
    return virtual_marker_state_volatile;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <virtual_marker_read_markerstate_volatile+0x14>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20012256 	.word	0x20012256

08005de8 <virtual_marker_d_print>:

void virtual_marker_d_print()
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0

}
 8005dec:	bf00      	nop
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005dfe:	e003      	b.n	8005e08 <LoopCopyDataInit>

08005e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e06:	3104      	adds	r1, #4

08005e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e08:	480b      	ldr	r0, [pc, #44]	; (8005e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005e10:	d3f6      	bcc.n	8005e00 <CopyDataInit>
  ldr  r2, =_sbss
 8005e12:	4a0b      	ldr	r2, [pc, #44]	; (8005e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005e14:	e002      	b.n	8005e1c <LoopFillZerobss>

08005e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005e18:	f842 3b04 	str.w	r3, [r2], #4

08005e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e20:	d3f9      	bcc.n	8005e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e22:	f7fe ff95 	bl	8004d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e26:	f004 ff25 	bl	800ac74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e2a:	f7fd f87b 	bl	8002f24 <main>
  bx  lr    
 8005e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005e30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005e34:	08010e00 	.word	0x08010e00
  ldr  r0, =_sdata
 8005e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e3c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005e40:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005e44:	2001228c 	.word	0x2001228c

08005e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e48:	e7fe      	b.n	8005e48 <ADC_IRQHandler>
	...

08005e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <HAL_Init+0x40>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <HAL_Init+0x40>)
 8005e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_Init+0x40>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <HAL_Init+0x40>)
 8005e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <HAL_Init+0x40>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <HAL_Init+0x40>)
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e74:	2003      	movs	r0, #3
 8005e76:	f000 fdb1 	bl	80069dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f000 f808 	bl	8005e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e80:	f7fe fae4 	bl	800444c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40023c00 	.word	0x40023c00

08005e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_InitTick+0x54>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <HAL_InitTick+0x58>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fdc9 	bl	8006a46 <HAL_SYSTICK_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e00e      	b.n	8005edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b0f      	cmp	r3, #15
 8005ec2:	d80a      	bhi.n	8005eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	f000 fd91 	bl	80069f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ed0:	4a06      	ldr	r2, [pc, #24]	; (8005eec <HAL_InitTick+0x5c>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000000 	.word	0x20000000
 8005ee8:	20000008 	.word	0x20000008
 8005eec:	20000004 	.word	0x20000004

08005ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_IncTick+0x20>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_IncTick+0x24>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4413      	add	r3, r2
 8005f00:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <HAL_IncTick+0x24>)
 8005f02:	6013      	str	r3, [r2, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000008 	.word	0x20000008
 8005f14:	20012258 	.word	0x20012258

08005f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f1c:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <HAL_GetTick+0x14>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20012258 	.word	0x20012258

08005f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f38:	f7ff ffee 	bl	8005f18 <HAL_GetTick>
 8005f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d005      	beq.n	8005f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <HAL_Delay+0x44>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f56:	bf00      	nop
 8005f58:	f7ff ffde 	bl	8005f18 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d8f7      	bhi.n	8005f58 <HAL_Delay+0x28>
  {
  }
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000008 	.word	0x20000008

08005f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e033      	b.n	8005ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fe fa84 	bl	80044a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d118      	bne.n	8005fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005fbe:	f023 0302 	bic.w	r3, r3, #2
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fab8 	bl	8006540 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	f043 0201 	orr.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8005fe6:	e001      	b.n	8005fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_ADC_Start_DMA+0x1e>
 800601a:	2302      	movs	r3, #2
 800601c:	e0e9      	b.n	80061f2 <HAL_ADC_Start_DMA+0x1f2>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d018      	beq.n	8006066 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006044:	4b6d      	ldr	r3, [pc, #436]	; (80061fc <HAL_ADC_Start_DMA+0x1fc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6d      	ldr	r2, [pc, #436]	; (8006200 <HAL_ADC_Start_DMA+0x200>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	0c9a      	lsrs	r2, r3, #18
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006058:	e002      	b.n	8006060 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3b01      	subs	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f9      	bne.n	800605a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006074:	d107      	bne.n	8006086 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006084:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 80a1 	bne.w	80061d8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d106      	bne.n	80060e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	f023 0206 	bic.w	r2, r3, #6
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44
 80060e2:	e002      	b.n	80060ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060f2:	4b44      	ldr	r3, [pc, #272]	; (8006204 <HAL_ADC_Start_DMA+0x204>)
 80060f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	4a43      	ldr	r2, [pc, #268]	; (8006208 <HAL_ADC_Start_DMA+0x208>)
 80060fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	4a42      	ldr	r2, [pc, #264]	; (800620c <HAL_ADC_Start_DMA+0x20c>)
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	4a41      	ldr	r2, [pc, #260]	; (8006210 <HAL_ADC_Start_DMA+0x210>)
 800610c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006116:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006126:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006136:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	334c      	adds	r3, #76	; 0x4c
 8006142:	4619      	mov	r1, r3
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f000 fd38 	bl	8006bbc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2b00      	cmp	r3, #0
 8006156:	d12a      	bne.n	80061ae <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <HAL_ADC_Start_DMA+0x214>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d015      	beq.n	800618e <HAL_ADC_Start_DMA+0x18e>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <HAL_ADC_Start_DMA+0x218>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d105      	bne.n	8006178 <HAL_ADC_Start_DMA+0x178>
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <HAL_ADC_Start_DMA+0x204>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a27      	ldr	r2, [pc, #156]	; (800621c <HAL_ADC_Start_DMA+0x21c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d136      	bne.n	80061f0 <HAL_ADC_Start_DMA+0x1f0>
 8006182:	4b20      	ldr	r3, [pc, #128]	; (8006204 <HAL_ADC_Start_DMA+0x204>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b00      	cmp	r3, #0
 800618c:	d130      	bne.n	80061f0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d129      	bne.n	80061f0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	e020      	b.n	80061f0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a18      	ldr	r2, [pc, #96]	; (8006214 <HAL_ADC_Start_DMA+0x214>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d11b      	bne.n	80061f0 <HAL_ADC_Start_DMA+0x1f0>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d114      	bne.n	80061f0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	e00b      	b.n	80061f0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	f043 0210 	orr.w	r2, r3, #16
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	f043 0201 	orr.w	r2, r3, #1
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000000 	.word	0x20000000
 8006200:	431bde83 	.word	0x431bde83
 8006204:	40012300 	.word	0x40012300
 8006208:	08006739 	.word	0x08006739
 800620c:	080067f3 	.word	0x080067f3
 8006210:	0800680f 	.word	0x0800680f
 8006214:	40012000 	.word	0x40012000
 8006218:	40012100 	.word	0x40012100
 800621c:	40012200 	.word	0x40012200

08006220 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_ADC_Stop_DMA+0x1a>
 8006236:	2302      	movs	r3, #2
 8006238:	e048      	b.n	80062cc <HAL_ADC_Stop_DMA+0xac>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d130      	bne.n	80062c2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800626e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d10f      	bne.n	800629e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fcf2 	bl	8006c6c <HAL_DMA_Abort>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80062ac:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	f043 0201 	orr.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_ADC_ConfigChannel+0x1c>
 8006314:	2302      	movs	r3, #2
 8006316:	e105      	b.n	8006524 <HAL_ADC_ConfigChannel+0x228>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b09      	cmp	r3, #9
 8006326:	d925      	bls.n	8006374 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68d9      	ldr	r1, [r3, #12]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	3b1e      	subs	r3, #30
 800633e:	2207      	movs	r2, #7
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	43da      	mvns	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	400a      	ands	r2, r1
 800634c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68d9      	ldr	r1, [r3, #12]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	4618      	mov	r0, r3
 8006360:	4603      	mov	r3, r0
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	4403      	add	r3, r0
 8006366:	3b1e      	subs	r3, #30
 8006368:	409a      	lsls	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	e022      	b.n	80063ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6919      	ldr	r1, [r3, #16]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	461a      	mov	r2, r3
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	2207      	movs	r2, #7
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43da      	mvns	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	400a      	ands	r2, r1
 8006396:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6919      	ldr	r1, [r3, #16]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4618      	mov	r0, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4403      	add	r3, r0
 80063b0:	409a      	lsls	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b06      	cmp	r3, #6
 80063c0:	d824      	bhi.n	800640c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	3b05      	subs	r3, #5
 80063d4:	221f      	movs	r2, #31
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43da      	mvns	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	400a      	ands	r2, r1
 80063e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	4618      	mov	r0, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	3b05      	subs	r3, #5
 80063fe:	fa00 f203 	lsl.w	r2, r0, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	635a      	str	r2, [r3, #52]	; 0x34
 800640a:	e04c      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b0c      	cmp	r3, #12
 8006412:	d824      	bhi.n	800645e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	3b23      	subs	r3, #35	; 0x23
 8006426:	221f      	movs	r2, #31
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	43da      	mvns	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	400a      	ands	r2, r1
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	4618      	mov	r0, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	3b23      	subs	r3, #35	; 0x23
 8006450:	fa00 f203 	lsl.w	r2, r0, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
 800645c:	e023      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	3b41      	subs	r3, #65	; 0x41
 8006470:	221f      	movs	r2, #31
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	43da      	mvns	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	400a      	ands	r2, r1
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	4618      	mov	r0, r3
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	3b41      	subs	r3, #65	; 0x41
 800649a:	fa00 f203 	lsl.w	r2, r0, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064a6:	4b22      	ldr	r3, [pc, #136]	; (8006530 <HAL_ADC_ConfigChannel+0x234>)
 80064a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a21      	ldr	r2, [pc, #132]	; (8006534 <HAL_ADC_ConfigChannel+0x238>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d109      	bne.n	80064c8 <HAL_ADC_ConfigChannel+0x1cc>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b12      	cmp	r3, #18
 80064ba:	d105      	bne.n	80064c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <HAL_ADC_ConfigChannel+0x238>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d123      	bne.n	800651a <HAL_ADC_ConfigChannel+0x21e>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d003      	beq.n	80064e2 <HAL_ADC_ConfigChannel+0x1e6>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b11      	cmp	r3, #17
 80064e0:	d11b      	bne.n	800651a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d111      	bne.n	800651a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80064f6:	4b10      	ldr	r3, [pc, #64]	; (8006538 <HAL_ADC_ConfigChannel+0x23c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a10      	ldr	r2, [pc, #64]	; (800653c <HAL_ADC_ConfigChannel+0x240>)
 80064fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006500:	0c9a      	lsrs	r2, r3, #18
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800650c:	e002      	b.n	8006514 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3b01      	subs	r3, #1
 8006512:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f9      	bne.n	800650e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40012300 	.word	0x40012300
 8006534:	40012000 	.word	0x40012000
 8006538:	20000000 	.word	0x20000000
 800653c:	431bde83 	.word	0x431bde83

08006540 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006548:	4b79      	ldr	r3, [pc, #484]	; (8006730 <ADC_Init+0x1f0>)
 800654a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	431a      	orrs	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6859      	ldr	r1, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	021a      	lsls	r2, r3, #8
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6899      	ldr	r1, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d2:	4a58      	ldr	r2, [pc, #352]	; (8006734 <ADC_Init+0x1f4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d022      	beq.n	800661e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6899      	ldr	r1, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6899      	ldr	r1, [r3, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	609a      	str	r2, [r3, #8]
 800661c:	e00f      	b.n	800663e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800662c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800663c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0202 	bic.w	r2, r2, #2
 800664c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6899      	ldr	r1, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7e1b      	ldrb	r3, [r3, #24]
 8006658:	005a      	lsls	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01b      	beq.n	80066a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800668a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6859      	ldr	r1, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	3b01      	subs	r3, #1
 8006698:	035a      	lsls	r2, r3, #13
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
 80066a2:	e007      	b.n	80066b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	051a      	lsls	r2, r3, #20
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6899      	ldr	r1, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066f6:	025a      	lsls	r2, r3, #9
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6899      	ldr	r1, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	029a      	lsls	r2, r3, #10
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	609a      	str	r2, [r3, #8]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40012300 	.word	0x40012300
 8006734:	0f000001 	.word	0x0f000001

08006738 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800674e:	2b00      	cmp	r3, #0
 8006750:	d13c      	bne.n	80067cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d12b      	bne.n	80067c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006770:	2b00      	cmp	r3, #0
 8006772:	d127      	bne.n	80067c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800678c:	2b00      	cmp	r3, #0
 800678e:	d119      	bne.n	80067c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0220 	bic.w	r2, r2, #32
 800679e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d105      	bne.n	80067c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f043 0201 	orr.w	r2, r3, #1
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7fb fa57 	bl	8001c78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80067ca:	e00e      	b.n	80067ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fd85 	bl	80062e8 <HAL_ADC_ErrorCallback>
}
 80067de:	e004      	b.n	80067ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7ff fd67 	bl	80062d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006806:	bf00      	nop
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2240      	movs	r2, #64	; 0x40
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	f043 0204 	orr.w	r2, r3, #4
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff fd5a 	bl	80062e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <__NVIC_SetPriorityGrouping+0x44>)
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006858:	4013      	ands	r3, r2
 800685a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800686c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800686e:	4a04      	ldr	r2, [pc, #16]	; (8006880 <__NVIC_SetPriorityGrouping+0x44>)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	60d3      	str	r3, [r2, #12]
}
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	e000ed00 	.word	0xe000ed00

08006884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <__NVIC_GetPriorityGrouping+0x18>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	0a1b      	lsrs	r3, r3, #8
 800688e:	f003 0307 	and.w	r3, r3, #7
}
 8006892:	4618      	mov	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	e000ed00 	.word	0xe000ed00

080068a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	db0b      	blt.n	80068ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	f003 021f 	and.w	r2, r3, #31
 80068b8:	4907      	ldr	r1, [pc, #28]	; (80068d8 <__NVIC_EnableIRQ+0x38>)
 80068ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	2001      	movs	r0, #1
 80068c2:	fa00 f202 	lsl.w	r2, r0, r2
 80068c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	e000e100 	.word	0xe000e100

080068dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	6039      	str	r1, [r7, #0]
 80068e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	db0a      	blt.n	8006906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	490c      	ldr	r1, [pc, #48]	; (8006928 <__NVIC_SetPriority+0x4c>)
 80068f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fa:	0112      	lsls	r2, r2, #4
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	440b      	add	r3, r1
 8006900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006904:	e00a      	b.n	800691c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4908      	ldr	r1, [pc, #32]	; (800692c <__NVIC_SetPriority+0x50>)
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	3b04      	subs	r3, #4
 8006914:	0112      	lsls	r2, r2, #4
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	440b      	add	r3, r1
 800691a:	761a      	strb	r2, [r3, #24]
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	e000e100 	.word	0xe000e100
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006930:	b480      	push	{r7}
 8006932:	b089      	sub	sp, #36	; 0x24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f1c3 0307 	rsb	r3, r3, #7
 800694a:	2b04      	cmp	r3, #4
 800694c:	bf28      	it	cs
 800694e:	2304      	movcs	r3, #4
 8006950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3304      	adds	r3, #4
 8006956:	2b06      	cmp	r3, #6
 8006958:	d902      	bls.n	8006960 <NVIC_EncodePriority+0x30>
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	3b03      	subs	r3, #3
 800695e:	e000      	b.n	8006962 <NVIC_EncodePriority+0x32>
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006964:	f04f 32ff 	mov.w	r2, #4294967295
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43da      	mvns	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	401a      	ands	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006978:	f04f 31ff 	mov.w	r1, #4294967295
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	fa01 f303 	lsl.w	r3, r1, r3
 8006982:	43d9      	mvns	r1, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006988:	4313      	orrs	r3, r2
         );
}
 800698a:	4618      	mov	r0, r3
 800698c:	3724      	adds	r7, #36	; 0x24
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069a8:	d301      	bcc.n	80069ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069aa:	2301      	movs	r3, #1
 80069ac:	e00f      	b.n	80069ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <SysTick_Config+0x40>)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069b6:	210f      	movs	r1, #15
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	f7ff ff8e 	bl	80068dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <SysTick_Config+0x40>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069c6:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <SysTick_Config+0x40>)
 80069c8:	2207      	movs	r2, #7
 80069ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	e000e010 	.word	0xe000e010

080069dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ff29 	bl	800683c <__NVIC_SetPriorityGrouping>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b086      	sub	sp, #24
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	4603      	mov	r3, r0
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a04:	f7ff ff3e 	bl	8006884 <__NVIC_GetPriorityGrouping>
 8006a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	6978      	ldr	r0, [r7, #20]
 8006a10:	f7ff ff8e 	bl	8006930 <NVIC_EncodePriority>
 8006a14:	4602      	mov	r2, r0
 8006a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff ff5d 	bl	80068dc <__NVIC_SetPriority>
}
 8006a22:	bf00      	nop
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	4603      	mov	r3, r0
 8006a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff ff31 	bl	80068a0 <__NVIC_EnableIRQ>
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff ffa2 	bl	8006998 <SysTick_Config>
 8006a54:	4603      	mov	r3, r0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a6c:	f7ff fa54 	bl	8005f18 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e099      	b.n	8006bb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0201 	bic.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a9c:	e00f      	b.n	8006abe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a9e:	f7ff fa3b 	bl	8005f18 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d908      	bls.n	8006abe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e078      	b.n	8006bb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e8      	bne.n	8006a9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4b38      	ldr	r3, [pc, #224]	; (8006bb8 <HAL_DMA_Init+0x158>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d107      	bne.n	8006b28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	4313      	orrs	r3, r2
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d117      	bne.n	8006b82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fadf 	bl	8007128 <DMA_CheckFifoParam>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2240      	movs	r2, #64	; 0x40
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e016      	b.n	8006bb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa96 	bl	80070bc <DMA_CalcBaseAndBitshift>
 8006b90:	4603      	mov	r3, r0
 8006b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	223f      	movs	r2, #63	; 0x3f
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	f010803f 	.word	0xf010803f

08006bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_DMA_Start_IT+0x26>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e040      	b.n	8006c64 <HAL_DMA_Start_IT+0xa8>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d12f      	bne.n	8006c56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fa28 	bl	8007060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c14:	223f      	movs	r2, #63	; 0x3f
 8006c16:	409a      	lsls	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0216 	orr.w	r2, r2, #22
 8006c2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0208 	orr.w	r2, r2, #8
 8006c42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e005      	b.n	8006c62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c7a:	f7ff f94d 	bl	8005f18 <HAL_GetTick>
 8006c7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d008      	beq.n	8006c9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2280      	movs	r2, #128	; 0x80
 8006c90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e052      	b.n	8006d44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0216 	bic.w	r2, r2, #22
 8006cac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695a      	ldr	r2, [r3, #20]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_DMA_Abort+0x62>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0208 	bic.w	r2, r2, #8
 8006cdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cee:	e013      	b.n	8006d18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cf0:	f7ff f912 	bl	8005f18 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b05      	cmp	r3, #5
 8006cfc:	d90c      	bls.n	8006d18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2203      	movs	r2, #3
 8006d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e015      	b.n	8006d44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e4      	bne.n	8006cf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2a:	223f      	movs	r2, #63	; 0x3f
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d58:	4b8e      	ldr	r3, [pc, #568]	; (8006f94 <HAL_DMA_IRQHandler+0x248>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a8e      	ldr	r2, [pc, #568]	; (8006f98 <HAL_DMA_IRQHandler+0x24c>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	0a9b      	lsrs	r3, r3, #10
 8006d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	2208      	movs	r2, #8
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01a      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d013      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0204 	bic.w	r2, r2, #4
 8006d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da4:	2208      	movs	r2, #8
 8006da6:	409a      	lsls	r2, r3
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	f043 0201 	orr.w	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d012      	beq.n	8006dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	2201      	movs	r2, #1
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	f043 0202 	orr.w	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	2204      	movs	r2, #4
 8006df4:	409a      	lsls	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d012      	beq.n	8006e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e10:	2204      	movs	r2, #4
 8006e12:	409a      	lsls	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1c:	f043 0204 	orr.w	r2, r3, #4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e28:	2210      	movs	r2, #16
 8006e2a:	409a      	lsls	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d043      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d03c      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	2210      	movs	r2, #16
 8006e48:	409a      	lsls	r2, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d018      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d108      	bne.n	8006e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d024      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	e01f      	b.n	8006ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01b      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
 8006e8c:	e016      	b.n	8006ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0208 	bic.w	r2, r2, #8
 8006eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 808f 	beq.w	8006fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8087 	beq.w	8006fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	409a      	lsls	r2, r3
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d136      	bne.n	8006f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0216 	bic.w	r2, r2, #22
 8006f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <HAL_DMA_IRQHandler+0x1da>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0208 	bic.w	r2, r2, #8
 8006f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3a:	223f      	movs	r2, #63	; 0x3f
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d07e      	beq.n	8007058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
        }
        return;
 8006f62:	e079      	b.n	8007058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01d      	beq.n	8006fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10d      	bne.n	8006f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d031      	beq.n	8006fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	e02c      	b.n	8006fec <HAL_DMA_IRQHandler+0x2a0>
 8006f92:	bf00      	nop
 8006f94:	20000000 	.word	0x20000000
 8006f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d023      	beq.n	8006fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
 8006fac:	e01e      	b.n	8006fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10f      	bne.n	8006fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0210 	bic.w	r2, r2, #16
 8006fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d032      	beq.n	800705a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d022      	beq.n	8007046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2205      	movs	r2, #5
 8007004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0201 	bic.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3301      	adds	r3, #1
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	429a      	cmp	r2, r3
 8007022:	d307      	bcc.n	8007034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f2      	bne.n	8007018 <HAL_DMA_IRQHandler+0x2cc>
 8007032:	e000      	b.n	8007036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
 8007056:	e000      	b.n	800705a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007058:	bf00      	nop
    }
  }
}
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800707c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d108      	bne.n	80070a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800709e:	e007      	b.n	80070b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
}
 80070b0:	bf00      	nop
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	3b10      	subs	r3, #16
 80070cc:	4a14      	ldr	r2, [pc, #80]	; (8007120 <DMA_CalcBaseAndBitshift+0x64>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	091b      	lsrs	r3, r3, #4
 80070d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070d6:	4a13      	ldr	r2, [pc, #76]	; (8007124 <DMA_CalcBaseAndBitshift+0x68>)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d909      	bls.n	80070fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	659a      	str	r2, [r3, #88]	; 0x58
 80070fc:	e007      	b.n	800710e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	aaaaaaab 	.word	0xaaaaaaab
 8007124:	08010908 	.word	0x08010908

08007128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d11f      	bne.n	8007182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d856      	bhi.n	80071f6 <DMA_CheckFifoParam+0xce>
 8007148:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <DMA_CheckFifoParam+0x28>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	08007161 	.word	0x08007161
 8007154:	08007173 	.word	0x08007173
 8007158:	08007161 	.word	0x08007161
 800715c:	080071f7 	.word	0x080071f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d046      	beq.n	80071fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007170:	e043      	b.n	80071fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800717a:	d140      	bne.n	80071fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007180:	e03d      	b.n	80071fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718a:	d121      	bne.n	80071d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d837      	bhi.n	8007202 <DMA_CheckFifoParam+0xda>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <DMA_CheckFifoParam+0x70>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071a9 	.word	0x080071a9
 800719c:	080071af 	.word	0x080071af
 80071a0:	080071a9 	.word	0x080071a9
 80071a4:	080071c1 	.word	0x080071c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
      break;
 80071ac:	e030      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d025      	beq.n	8007206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071be:	e022      	b.n	8007206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071c8:	d11f      	bne.n	800720a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071ce:	e01c      	b.n	800720a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d903      	bls.n	80071de <DMA_CheckFifoParam+0xb6>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d003      	beq.n	80071e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071dc:	e018      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e015      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
      break;
 80071f4:	e00b      	b.n	800720e <DMA_CheckFifoParam+0xe6>
      break;
 80071f6:	bf00      	nop
 80071f8:	e00a      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 80071fa:	bf00      	nop
 80071fc:	e008      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 80071fe:	bf00      	nop
 8007200:	e006      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 8007202:	bf00      	nop
 8007204:	e004      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;   
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <DMA_CheckFifoParam+0xe8>
      break;
 800720e:	bf00      	nop
    }
  } 
  
  return status; 
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop

08007220 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007232:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <HAL_FLASH_Program+0xa0>)
 8007234:	7e1b      	ldrb	r3, [r3, #24]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_FLASH_Program+0x1e>
 800723a:	2302      	movs	r3, #2
 800723c:	e03b      	b.n	80072b6 <HAL_FLASH_Program+0x96>
 800723e:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <HAL_FLASH_Program+0xa0>)
 8007240:	2201      	movs	r2, #1
 8007242:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007248:	f000 f870 	bl	800732c <FLASH_WaitForLastOperation>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d12b      	bne.n	80072ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d105      	bne.n	8007268 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800725c:	783b      	ldrb	r3, [r7, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	68b8      	ldr	r0, [r7, #8]
 8007262:	f000 f91b 	bl	800749c <FLASH_Program_Byte>
 8007266:	e016      	b.n	8007296 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d105      	bne.n	800727a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800726e:	883b      	ldrh	r3, [r7, #0]
 8007270:	4619      	mov	r1, r3
 8007272:	68b8      	ldr	r0, [r7, #8]
 8007274:	f000 f8ee 	bl	8007454 <FLASH_Program_HalfWord>
 8007278:	e00d      	b.n	8007296 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d105      	bne.n	800728c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	68b8      	ldr	r0, [r7, #8]
 8007286:	f000 f8c3 	bl	8007410 <FLASH_Program_Word>
 800728a:	e004      	b.n	8007296 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800728c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007290:	68b8      	ldr	r0, [r7, #8]
 8007292:	f000 f88b 	bl	80073ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007296:	f24c 3050 	movw	r0, #50000	; 0xc350
 800729a:	f000 f847 	bl	800732c <FLASH_WaitForLastOperation>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <HAL_FLASH_Program+0xa4>)
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	4a07      	ldr	r2, [pc, #28]	; (80072c4 <HAL_FLASH_Program+0xa4>)
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <HAL_FLASH_Program+0xa0>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	2001225c 	.word	0x2001225c
 80072c4:	40023c00 	.word	0x40023c00

080072c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <HAL_FLASH_Unlock+0x38>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da0b      	bge.n	80072f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <HAL_FLASH_Unlock+0x38>)
 80072dc:	4a09      	ldr	r2, [pc, #36]	; (8007304 <HAL_FLASH_Unlock+0x3c>)
 80072de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <HAL_FLASH_Unlock+0x38>)
 80072e2:	4a09      	ldr	r2, [pc, #36]	; (8007308 <HAL_FLASH_Unlock+0x40>)
 80072e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_FLASH_Unlock+0x38>)
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da01      	bge.n	80072f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80072f2:	79fb      	ldrb	r3, [r7, #7]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40023c00 	.word	0x40023c00
 8007304:	45670123 	.word	0x45670123
 8007308:	cdef89ab 	.word	0xcdef89ab

0800730c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <HAL_FLASH_Lock+0x1c>)
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	4a04      	ldr	r2, [pc, #16]	; (8007328 <HAL_FLASH_Lock+0x1c>)
 8007316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800731a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40023c00 	.word	0x40023c00

0800732c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007338:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <FLASH_WaitForLastOperation+0x78>)
 800733a:	2200      	movs	r2, #0
 800733c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800733e:	f7fe fdeb 	bl	8005f18 <HAL_GetTick>
 8007342:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007344:	e010      	b.n	8007368 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d00c      	beq.n	8007368 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <FLASH_WaitForLastOperation+0x38>
 8007354:	f7fe fde0 	bl	8005f18 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d201      	bcs.n	8007368 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e019      	b.n	800739c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <FLASH_WaitForLastOperation+0x7c>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e8      	bne.n	8007346 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <FLASH_WaitForLastOperation+0x7c>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007380:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <FLASH_WaitForLastOperation+0x7c>)
 8007382:	2201      	movs	r2, #1
 8007384:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007386:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <FLASH_WaitForLastOperation+0x7c>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007392:	f000 f8a5 	bl	80074e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
  
}  
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	2001225c 	.word	0x2001225c
 80073a8:	40023c00 	.word	0x40023c00

080073ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80073b8:	4b14      	ldr	r3, [pc, #80]	; (800740c <FLASH_Program_DoubleWord+0x60>)
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	4a13      	ldr	r2, [pc, #76]	; (800740c <FLASH_Program_DoubleWord+0x60>)
 80073be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80073c4:	4b11      	ldr	r3, [pc, #68]	; (800740c <FLASH_Program_DoubleWord+0x60>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	4a10      	ldr	r2, [pc, #64]	; (800740c <FLASH_Program_DoubleWord+0x60>)
 80073ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80073d0:	4b0e      	ldr	r3, [pc, #56]	; (800740c <FLASH_Program_DoubleWord+0x60>)
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	4a0d      	ldr	r2, [pc, #52]	; (800740c <FLASH_Program_DoubleWord+0x60>)
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80073e2:	f3bf 8f6f 	isb	sy
}
 80073e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80073e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	f04f 0300 	mov.w	r3, #0
 80073f4:	000a      	movs	r2, r1
 80073f6:	2300      	movs	r3, #0
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	3104      	adds	r1, #4
 80073fc:	4613      	mov	r3, r2
 80073fe:	600b      	str	r3, [r1, #0]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40023c00 	.word	0x40023c00

08007410 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800741a:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <FLASH_Program_Word+0x40>)
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <FLASH_Program_Word+0x40>)
 8007420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007424:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <FLASH_Program_Word+0x40>)
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	4a09      	ldr	r2, [pc, #36]	; (8007450 <FLASH_Program_Word+0x40>)
 800742c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007430:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <FLASH_Program_Word+0x40>)
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	4a06      	ldr	r2, [pc, #24]	; (8007450 <FLASH_Program_Word+0x40>)
 8007438:	f043 0301 	orr.w	r3, r3, #1
 800743c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40023c00 	.word	0x40023c00

08007454 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007460:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <FLASH_Program_HalfWord+0x44>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <FLASH_Program_HalfWord+0x44>)
 8007466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <FLASH_Program_HalfWord+0x44>)
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	4a09      	ldr	r2, [pc, #36]	; (8007498 <FLASH_Program_HalfWord+0x44>)
 8007472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <FLASH_Program_HalfWord+0x44>)
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	4a06      	ldr	r2, [pc, #24]	; (8007498 <FLASH_Program_HalfWord+0x44>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	887a      	ldrh	r2, [r7, #2]
 8007488:	801a      	strh	r2, [r3, #0]
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40023c00 	.word	0x40023c00

0800749c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <FLASH_Program_Byte+0x40>)
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	4a0b      	ldr	r2, [pc, #44]	; (80074dc <FLASH_Program_Byte+0x40>)
 80074ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <FLASH_Program_Byte+0x40>)
 80074b6:	4a09      	ldr	r2, [pc, #36]	; (80074dc <FLASH_Program_Byte+0x40>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <FLASH_Program_Byte+0x40>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	4a06      	ldr	r2, [pc, #24]	; (80074dc <FLASH_Program_Byte+0x40>)
 80074c2:	f043 0301 	orr.w	r3, r3, #1
 80074c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	701a      	strb	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40023c00 	.word	0x40023c00

080074e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80074e4:	4b27      	ldr	r3, [pc, #156]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0310 	and.w	r3, r3, #16
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d008      	beq.n	8007502 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80074f0:	4b25      	ldr	r3, [pc, #148]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f043 0310 	orr.w	r3, r3, #16
 80074f8:	4a23      	ldr	r2, [pc, #140]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 80074fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80074fc:	4b21      	ldr	r3, [pc, #132]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 80074fe:	2210      	movs	r2, #16
 8007500:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007502:	4b20      	ldr	r3, [pc, #128]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800750e:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f043 0308 	orr.w	r3, r3, #8
 8007516:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 8007518:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800751a:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 800751c:	2220      	movs	r2, #32
 800751e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007520:	4b18      	ldr	r3, [pc, #96]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d008      	beq.n	800753e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800752c:	4b16      	ldr	r3, [pc, #88]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f043 0304 	orr.w	r3, r3, #4
 8007534:	4a14      	ldr	r2, [pc, #80]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 8007536:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007538:	4b12      	ldr	r3, [pc, #72]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800753e:	4b11      	ldr	r3, [pc, #68]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f043 0302 	orr.w	r3, r3, #2
 8007552:	4a0d      	ldr	r2, [pc, #52]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 8007554:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 8007558:	2280      	movs	r2, #128	; 0x80
 800755a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800755c:	4b09      	ldr	r3, [pc, #36]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f043 0320 	orr.w	r3, r3, #32
 8007570:	4a05      	ldr	r2, [pc, #20]	; (8007588 <FLASH_SetErrorCode+0xa8>)
 8007572:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007574:	4b03      	ldr	r3, [pc, #12]	; (8007584 <FLASH_SetErrorCode+0xa4>)
 8007576:	2202      	movs	r2, #2
 8007578:	60da      	str	r2, [r3, #12]
  }
}
 800757a:	bf00      	nop
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40023c00 	.word	0x40023c00
 8007588:	2001225c 	.word	0x2001225c

0800758c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800759e:	4b31      	ldr	r3, [pc, #196]	; (8007664 <HAL_FLASHEx_Erase+0xd8>)
 80075a0:	7e1b      	ldrb	r3, [r3, #24]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_FLASHEx_Erase+0x1e>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e058      	b.n	800765c <HAL_FLASHEx_Erase+0xd0>
 80075aa:	4b2e      	ldr	r3, [pc, #184]	; (8007664 <HAL_FLASHEx_Erase+0xd8>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80075b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80075b4:	f7ff feba 	bl	800732c <FLASH_WaitForLastOperation>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d148      	bne.n	8007654 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	f04f 32ff 	mov.w	r2, #4294967295
 80075c8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d115      	bne.n	80075fe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f000 f844 	bl	800766c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80075e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80075e8:	f7ff fea0 	bl	800732c <FLASH_WaitForLastOperation>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80075f0:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <HAL_FLASHEx_Erase+0xdc>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <HAL_FLASHEx_Erase+0xdc>)
 80075f6:	f023 0304 	bic.w	r3, r3, #4
 80075fa:	6113      	str	r3, [r2, #16]
 80075fc:	e028      	b.n	8007650 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	e01c      	b.n	8007640 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	4619      	mov	r1, r3
 800760e:	68b8      	ldr	r0, [r7, #8]
 8007610:	f000 f850 	bl	80076b4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007614:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007618:	f7ff fe88 	bl	800732c <FLASH_WaitForLastOperation>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007620:	4b11      	ldr	r3, [pc, #68]	; (8007668 <HAL_FLASHEx_Erase+0xdc>)
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	4a10      	ldr	r2, [pc, #64]	; (8007668 <HAL_FLASHEx_Erase+0xdc>)
 8007626:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800762a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	601a      	str	r2, [r3, #0]
          break;
 8007638:	e00a      	b.n	8007650 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	3301      	adds	r3, #1
 800763e:	60bb      	str	r3, [r7, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	4413      	add	r3, r2
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	d3da      	bcc.n	8007606 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007650:	f000 f878 	bl	8007744 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007654:	4b03      	ldr	r3, [pc, #12]	; (8007664 <HAL_FLASHEx_Erase+0xd8>)
 8007656:	2200      	movs	r2, #0
 8007658:	761a      	strb	r2, [r3, #24]

  return status;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	2001225c 	.word	0x2001225c
 8007668:	40023c00 	.word	0x40023c00

0800766c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	6039      	str	r1, [r7, #0]
 8007676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <FLASH_MassErase+0x44>)
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	4a0c      	ldr	r2, [pc, #48]	; (80076b0 <FLASH_MassErase+0x44>)
 800767e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007682:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007684:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <FLASH_MassErase+0x44>)
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	4a09      	ldr	r2, [pc, #36]	; (80076b0 <FLASH_MassErase+0x44>)
 800768a:	f043 0304 	orr.w	r3, r3, #4
 800768e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <FLASH_MassErase+0x44>)
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	4313      	orrs	r3, r2
 800769a:	4a05      	ldr	r2, [pc, #20]	; (80076b0 <FLASH_MassErase+0x44>)
 800769c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a0:	6113      	str	r3, [r2, #16]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40023c00 	.word	0x40023c00

080076b4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	e010      	b.n	80076f2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d103      	bne.n	80076de <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80076d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e009      	b.n	80076f2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d103      	bne.n	80076ec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80076e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e002      	b.n	80076f2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80076ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80076f0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80076f2:	4b13      	ldr	r3, [pc, #76]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	4a12      	ldr	r2, [pc, #72]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 80076f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80076fe:	4b10      	ldr	r3, [pc, #64]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	490f      	ldr	r1, [pc, #60]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800770a:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	4a0c      	ldr	r2, [pc, #48]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 8007710:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007716:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4313      	orrs	r3, r2
 8007720:	4a07      	ldr	r2, [pc, #28]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 8007722:	f043 0302 	orr.w	r3, r3, #2
 8007726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	4a04      	ldr	r2, [pc, #16]	; (8007740 <FLASH_Erase_Sector+0x8c>)
 800772e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007732:	6113      	str	r3, [r2, #16]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	40023c00 	.word	0x40023c00

08007744 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007748:	4b20      	ldr	r3, [pc, #128]	; (80077cc <FLASH_FlushCaches+0x88>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007750:	2b00      	cmp	r3, #0
 8007752:	d017      	beq.n	8007784 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007754:	4b1d      	ldr	r3, [pc, #116]	; (80077cc <FLASH_FlushCaches+0x88>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1c      	ldr	r2, [pc, #112]	; (80077cc <FLASH_FlushCaches+0x88>)
 800775a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800775e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007760:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <FLASH_FlushCaches+0x88>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <FLASH_FlushCaches+0x88>)
 8007766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	4b17      	ldr	r3, [pc, #92]	; (80077cc <FLASH_FlushCaches+0x88>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a16      	ldr	r2, [pc, #88]	; (80077cc <FLASH_FlushCaches+0x88>)
 8007772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007776:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007778:	4b14      	ldr	r3, [pc, #80]	; (80077cc <FLASH_FlushCaches+0x88>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a13      	ldr	r2, [pc, #76]	; (80077cc <FLASH_FlushCaches+0x88>)
 800777e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007782:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <FLASH_FlushCaches+0x88>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778c:	2b00      	cmp	r3, #0
 800778e:	d017      	beq.n	80077c0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <FLASH_FlushCaches+0x88>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a0d      	ldr	r2, [pc, #52]	; (80077cc <FLASH_FlushCaches+0x88>)
 8007796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <FLASH_FlushCaches+0x88>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <FLASH_FlushCaches+0x88>)
 80077a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	4b08      	ldr	r3, [pc, #32]	; (80077cc <FLASH_FlushCaches+0x88>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a07      	ldr	r2, [pc, #28]	; (80077cc <FLASH_FlushCaches+0x88>)
 80077ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077b2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <FLASH_FlushCaches+0x88>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a04      	ldr	r2, [pc, #16]	; (80077cc <FLASH_FlushCaches+0x88>)
 80077ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077be:	6013      	str	r3, [r2, #0]
  }
}
 80077c0:	bf00      	nop
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40023c00 	.word	0x40023c00

080077d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	; 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	e16b      	b.n	8007ac4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077ec:	2201      	movs	r2, #1
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4013      	ands	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	f040 815a 	bne.w	8007abe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b01      	cmp	r3, #1
 8007814:	d005      	beq.n	8007822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800781e:	2b02      	cmp	r3, #2
 8007820:	d130      	bne.n	8007884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	2203      	movs	r2, #3
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	43db      	mvns	r3, r3
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	4013      	ands	r3, r2
 8007838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	4313      	orrs	r3, r2
 800784a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007858:	2201      	movs	r2, #1
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	4013      	ands	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	091b      	lsrs	r3, r3, #4
 800786e:	f003 0201 	and.w	r2, r3, #1
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	4313      	orrs	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b03      	cmp	r3, #3
 800788e:	d017      	beq.n	80078c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	2203      	movs	r2, #3
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4013      	ands	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d123      	bne.n	8007914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	08da      	lsrs	r2, r3, #3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3208      	adds	r2, #8
 80078d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	220f      	movs	r2, #15
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	43db      	mvns	r3, r3
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	4013      	ands	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4313      	orrs	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	08da      	lsrs	r2, r3, #3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3208      	adds	r2, #8
 800790e:	69b9      	ldr	r1, [r7, #24]
 8007910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	2203      	movs	r2, #3
 8007920:	fa02 f303 	lsl.w	r3, r2, r3
 8007924:	43db      	mvns	r3, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4013      	ands	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f003 0203 	and.w	r2, r3, #3
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4313      	orrs	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80b4 	beq.w	8007abe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	4b60      	ldr	r3, [pc, #384]	; (8007adc <HAL_GPIO_Init+0x30c>)
 800795c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795e:	4a5f      	ldr	r2, [pc, #380]	; (8007adc <HAL_GPIO_Init+0x30c>)
 8007960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007964:	6453      	str	r3, [r2, #68]	; 0x44
 8007966:	4b5d      	ldr	r3, [pc, #372]	; (8007adc <HAL_GPIO_Init+0x30c>)
 8007968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007972:	4a5b      	ldr	r2, [pc, #364]	; (8007ae0 <HAL_GPIO_Init+0x310>)
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	089b      	lsrs	r3, r3, #2
 8007978:	3302      	adds	r3, #2
 800797a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	220f      	movs	r2, #15
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a52      	ldr	r2, [pc, #328]	; (8007ae4 <HAL_GPIO_Init+0x314>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d02b      	beq.n	80079f6 <HAL_GPIO_Init+0x226>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a51      	ldr	r2, [pc, #324]	; (8007ae8 <HAL_GPIO_Init+0x318>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d025      	beq.n	80079f2 <HAL_GPIO_Init+0x222>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a50      	ldr	r2, [pc, #320]	; (8007aec <HAL_GPIO_Init+0x31c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01f      	beq.n	80079ee <HAL_GPIO_Init+0x21e>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a4f      	ldr	r2, [pc, #316]	; (8007af0 <HAL_GPIO_Init+0x320>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d019      	beq.n	80079ea <HAL_GPIO_Init+0x21a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a4e      	ldr	r2, [pc, #312]	; (8007af4 <HAL_GPIO_Init+0x324>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <HAL_GPIO_Init+0x216>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a4d      	ldr	r2, [pc, #308]	; (8007af8 <HAL_GPIO_Init+0x328>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00d      	beq.n	80079e2 <HAL_GPIO_Init+0x212>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a4c      	ldr	r2, [pc, #304]	; (8007afc <HAL_GPIO_Init+0x32c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d007      	beq.n	80079de <HAL_GPIO_Init+0x20e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a4b      	ldr	r2, [pc, #300]	; (8007b00 <HAL_GPIO_Init+0x330>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <HAL_GPIO_Init+0x20a>
 80079d6:	2307      	movs	r3, #7
 80079d8:	e00e      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079da:	2308      	movs	r3, #8
 80079dc:	e00c      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079de:	2306      	movs	r3, #6
 80079e0:	e00a      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079e2:	2305      	movs	r3, #5
 80079e4:	e008      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079e6:	2304      	movs	r3, #4
 80079e8:	e006      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079ea:	2303      	movs	r3, #3
 80079ec:	e004      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079ee:	2302      	movs	r3, #2
 80079f0:	e002      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <HAL_GPIO_Init+0x228>
 80079f6:	2300      	movs	r3, #0
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	f002 0203 	and.w	r2, r2, #3
 80079fe:	0092      	lsls	r2, r2, #2
 8007a00:	4093      	lsls	r3, r2
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a08:	4935      	ldr	r1, [pc, #212]	; (8007ae0 <HAL_GPIO_Init+0x310>)
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	089b      	lsrs	r3, r3, #2
 8007a0e:	3302      	adds	r3, #2
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a16:	4b3b      	ldr	r3, [pc, #236]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4013      	ands	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a3a:	4a32      	ldr	r2, [pc, #200]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007a40:	4b30      	ldr	r3, [pc, #192]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a64:	4a27      	ldr	r2, [pc, #156]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a6a:	4b26      	ldr	r3, [pc, #152]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	43db      	mvns	r3, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4013      	ands	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a94:	4b1b      	ldr	r3, [pc, #108]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ab8:	4a12      	ldr	r2, [pc, #72]	; (8007b04 <HAL_GPIO_Init+0x334>)
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	f67f ae90 	bls.w	80077ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	3724      	adds	r7, #36	; 0x24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40023800 	.word	0x40023800
 8007ae0:	40013800 	.word	0x40013800
 8007ae4:	40020000 	.word	0x40020000
 8007ae8:	40020400 	.word	0x40020400
 8007aec:	40020800 	.word	0x40020800
 8007af0:	40020c00 	.word	0x40020c00
 8007af4:	40021000 	.word	0x40021000
 8007af8:	40021400 	.word	0x40021400
 8007afc:	40021800 	.word	0x40021800
 8007b00:	40021c00 	.word	0x40021c00
 8007b04:	40013c00 	.word	0x40013c00

08007b08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	887b      	ldrh	r3, [r7, #2]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b20:	2301      	movs	r3, #1
 8007b22:	73fb      	strb	r3, [r7, #15]
 8007b24:	e001      	b.n	8007b2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
 8007b44:	4613      	mov	r3, r2
 8007b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b48:	787b      	ldrb	r3, [r7, #1]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b4e:	887a      	ldrh	r2, [r7, #2]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b54:	e003      	b.n	8007b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b56:	887b      	ldrh	r3, [r7, #2]
 8007b58:	041a      	lsls	r2, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	619a      	str	r2, [r3, #24]
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e12b      	b.n	8007dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fc fd36 	bl	8004604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2224      	movs	r2, #36	; 0x24
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007bd0:	f000 fd7e 	bl	80086d0 <HAL_RCC_GetPCLK1Freq>
 8007bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	4a81      	ldr	r2, [pc, #516]	; (8007de0 <HAL_I2C_Init+0x274>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d807      	bhi.n	8007bf0 <HAL_I2C_Init+0x84>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4a80      	ldr	r2, [pc, #512]	; (8007de4 <HAL_I2C_Init+0x278>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	bf94      	ite	ls
 8007be8:	2301      	movls	r3, #1
 8007bea:	2300      	movhi	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	e006      	b.n	8007bfe <HAL_I2C_Init+0x92>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4a7d      	ldr	r2, [pc, #500]	; (8007de8 <HAL_I2C_Init+0x27c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	bf94      	ite	ls
 8007bf8:	2301      	movls	r3, #1
 8007bfa:	2300      	movhi	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e0e7      	b.n	8007dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a78      	ldr	r2, [pc, #480]	; (8007dec <HAL_I2C_Init+0x280>)
 8007c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0e:	0c9b      	lsrs	r3, r3, #18
 8007c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4a6a      	ldr	r2, [pc, #424]	; (8007de0 <HAL_I2C_Init+0x274>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d802      	bhi.n	8007c40 <HAL_I2C_Init+0xd4>
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	e009      	b.n	8007c54 <HAL_I2C_Init+0xe8>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	4a69      	ldr	r2, [pc, #420]	; (8007df0 <HAL_I2C_Init+0x284>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	099b      	lsrs	r3, r3, #6
 8007c52:	3301      	adds	r3, #1
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	495c      	ldr	r1, [pc, #368]	; (8007de0 <HAL_I2C_Init+0x274>)
 8007c70:	428b      	cmp	r3, r1
 8007c72:	d819      	bhi.n	8007ca8 <HAL_I2C_Init+0x13c>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1e59      	subs	r1, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c82:	1c59      	adds	r1, r3, #1
 8007c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c88:	400b      	ands	r3, r1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_I2C_Init+0x138>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1e59      	subs	r1, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca2:	e051      	b.n	8007d48 <HAL_I2C_Init+0x1dc>
 8007ca4:	2304      	movs	r3, #4
 8007ca6:	e04f      	b.n	8007d48 <HAL_I2C_Init+0x1dc>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d111      	bne.n	8007cd4 <HAL_I2C_Init+0x168>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	1e58      	subs	r0, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6859      	ldr	r1, [r3, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	440b      	add	r3, r1
 8007cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf0c      	ite	eq
 8007ccc:	2301      	moveq	r3, #1
 8007cce:	2300      	movne	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	e012      	b.n	8007cfa <HAL_I2C_Init+0x18e>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	1e58      	subs	r0, r3, #1
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6859      	ldr	r1, [r3, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	0099      	lsls	r1, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cea:	3301      	adds	r3, #1
 8007cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2301      	moveq	r3, #1
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <HAL_I2C_Init+0x196>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e022      	b.n	8007d48 <HAL_I2C_Init+0x1dc>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10e      	bne.n	8007d28 <HAL_I2C_Init+0x1bc>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	1e58      	subs	r0, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6859      	ldr	r1, [r3, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	440b      	add	r3, r1
 8007d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d26:	e00f      	b.n	8007d48 <HAL_I2C_Init+0x1dc>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	1e58      	subs	r0, r3, #1
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6859      	ldr	r1, [r3, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	0099      	lsls	r1, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d3e:	3301      	adds	r3, #1
 8007d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	6809      	ldr	r1, [r1, #0]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6911      	ldr	r1, [r2, #16]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	68d2      	ldr	r2, [r2, #12]
 8007d82:	4311      	orrs	r1, r2
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	695a      	ldr	r2, [r3, #20]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0201 	orr.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	000186a0 	.word	0x000186a0
 8007de4:	001e847f 	.word	0x001e847f
 8007de8:	003d08ff 	.word	0x003d08ff
 8007dec:	431bde83 	.word	0x431bde83
 8007df0:	10624dd3 	.word	0x10624dd3

08007df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e267      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d075      	beq.n	8007efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e12:	4b88      	ldr	r3, [pc, #544]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 030c 	and.w	r3, r3, #12
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d00c      	beq.n	8007e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e1e:	4b85      	ldr	r3, [pc, #532]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d112      	bne.n	8007e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e2a:	4b82      	ldr	r3, [pc, #520]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e36:	d10b      	bne.n	8007e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e38:	4b7e      	ldr	r3, [pc, #504]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d05b      	beq.n	8007efc <HAL_RCC_OscConfig+0x108>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d157      	bne.n	8007efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e242      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e58:	d106      	bne.n	8007e68 <HAL_RCC_OscConfig+0x74>
 8007e5a:	4b76      	ldr	r3, [pc, #472]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a75      	ldr	r2, [pc, #468]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	e01d      	b.n	8007ea4 <HAL_RCC_OscConfig+0xb0>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e70:	d10c      	bne.n	8007e8c <HAL_RCC_OscConfig+0x98>
 8007e72:	4b70      	ldr	r3, [pc, #448]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a6f      	ldr	r2, [pc, #444]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	4b6d      	ldr	r3, [pc, #436]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a6c      	ldr	r2, [pc, #432]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	e00b      	b.n	8007ea4 <HAL_RCC_OscConfig+0xb0>
 8007e8c:	4b69      	ldr	r3, [pc, #420]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a68      	ldr	r2, [pc, #416]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	4b66      	ldr	r3, [pc, #408]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a65      	ldr	r2, [pc, #404]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d013      	beq.n	8007ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eac:	f7fe f834 	bl	8005f18 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eb4:	f7fe f830 	bl	8005f18 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b64      	cmp	r3, #100	; 0x64
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e207      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ec6:	4b5b      	ldr	r3, [pc, #364]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0f0      	beq.n	8007eb4 <HAL_RCC_OscConfig+0xc0>
 8007ed2:	e014      	b.n	8007efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ed4:	f7fe f820 	bl	8005f18 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eda:	e008      	b.n	8007eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007edc:	f7fe f81c 	bl	8005f18 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	2b64      	cmp	r3, #100	; 0x64
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e1f3      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eee:	4b51      	ldr	r3, [pc, #324]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1f0      	bne.n	8007edc <HAL_RCC_OscConfig+0xe8>
 8007efa:	e000      	b.n	8007efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d063      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f0a:	4b4a      	ldr	r3, [pc, #296]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 030c 	and.w	r3, r3, #12
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f16:	4b47      	ldr	r3, [pc, #284]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d11c      	bne.n	8007f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f22:	4b44      	ldr	r3, [pc, #272]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d116      	bne.n	8007f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f2e:	4b41      	ldr	r3, [pc, #260]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d005      	beq.n	8007f46 <HAL_RCC_OscConfig+0x152>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d001      	beq.n	8007f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e1c7      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f46:	4b3b      	ldr	r3, [pc, #236]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	4937      	ldr	r1, [pc, #220]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f5a:	e03a      	b.n	8007fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d020      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f64:	4b34      	ldr	r3, [pc, #208]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6a:	f7fd ffd5 	bl	8005f18 <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f72:	f7fd ffd1 	bl	8005f18 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e1a8      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f84:	4b2b      	ldr	r3, [pc, #172]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0f0      	beq.n	8007f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f90:	4b28      	ldr	r3, [pc, #160]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	4925      	ldr	r1, [pc, #148]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	600b      	str	r3, [r1, #0]
 8007fa4:	e015      	b.n	8007fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <HAL_RCC_OscConfig+0x244>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fd ffb4 	bl	8005f18 <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fb4:	f7fd ffb0 	bl	8005f18 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e187      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fc6:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f0      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d036      	beq.n	800804c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d016      	beq.n	8008014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fe6:	4b15      	ldr	r3, [pc, #84]	; (800803c <HAL_RCC_OscConfig+0x248>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fec:	f7fd ff94 	bl	8005f18 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ff4:	f7fd ff90 	bl	8005f18 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e167      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <HAL_RCC_OscConfig+0x240>)
 8008008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f0      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x200>
 8008012:	e01b      	b.n	800804c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <HAL_RCC_OscConfig+0x248>)
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800801a:	f7fd ff7d 	bl	8005f18 <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008020:	e00e      	b.n	8008040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008022:	f7fd ff79 	bl	8005f18 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d907      	bls.n	8008040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e150      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
 8008034:	40023800 	.word	0x40023800
 8008038:	42470000 	.word	0x42470000
 800803c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008040:	4b88      	ldr	r3, [pc, #544]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1ea      	bne.n	8008022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8097 	beq.w	8008188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800805a:	2300      	movs	r3, #0
 800805c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800805e:	4b81      	ldr	r3, [pc, #516]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10f      	bne.n	800808a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800806a:	2300      	movs	r3, #0
 800806c:	60bb      	str	r3, [r7, #8]
 800806e:	4b7d      	ldr	r3, [pc, #500]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	4a7c      	ldr	r2, [pc, #496]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008078:	6413      	str	r3, [r2, #64]	; 0x40
 800807a:	4b7a      	ldr	r3, [pc, #488]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008082:	60bb      	str	r3, [r7, #8]
 8008084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008086:	2301      	movs	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800808a:	4b77      	ldr	r3, [pc, #476]	; (8008268 <HAL_RCC_OscConfig+0x474>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008092:	2b00      	cmp	r3, #0
 8008094:	d118      	bne.n	80080c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008096:	4b74      	ldr	r3, [pc, #464]	; (8008268 <HAL_RCC_OscConfig+0x474>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a73      	ldr	r2, [pc, #460]	; (8008268 <HAL_RCC_OscConfig+0x474>)
 800809c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080a2:	f7fd ff39 	bl	8005f18 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080aa:	f7fd ff35 	bl	8005f18 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e10c      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080bc:	4b6a      	ldr	r3, [pc, #424]	; (8008268 <HAL_RCC_OscConfig+0x474>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d106      	bne.n	80080de <HAL_RCC_OscConfig+0x2ea>
 80080d0:	4b64      	ldr	r3, [pc, #400]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d4:	4a63      	ldr	r2, [pc, #396]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80080d6:	f043 0301 	orr.w	r3, r3, #1
 80080da:	6713      	str	r3, [r2, #112]	; 0x70
 80080dc:	e01c      	b.n	8008118 <HAL_RCC_OscConfig+0x324>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	d10c      	bne.n	8008100 <HAL_RCC_OscConfig+0x30c>
 80080e6:	4b5f      	ldr	r3, [pc, #380]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	4a5e      	ldr	r2, [pc, #376]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80080ec:	f043 0304 	orr.w	r3, r3, #4
 80080f0:	6713      	str	r3, [r2, #112]	; 0x70
 80080f2:	4b5c      	ldr	r3, [pc, #368]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f6:	4a5b      	ldr	r2, [pc, #364]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80080f8:	f043 0301 	orr.w	r3, r3, #1
 80080fc:	6713      	str	r3, [r2, #112]	; 0x70
 80080fe:	e00b      	b.n	8008118 <HAL_RCC_OscConfig+0x324>
 8008100:	4b58      	ldr	r3, [pc, #352]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	4a57      	ldr	r2, [pc, #348]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008106:	f023 0301 	bic.w	r3, r3, #1
 800810a:	6713      	str	r3, [r2, #112]	; 0x70
 800810c:	4b55      	ldr	r3, [pc, #340]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 800810e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008110:	4a54      	ldr	r2, [pc, #336]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008112:	f023 0304 	bic.w	r3, r3, #4
 8008116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d015      	beq.n	800814c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008120:	f7fd fefa 	bl	8005f18 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008126:	e00a      	b.n	800813e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008128:	f7fd fef6 	bl	8005f18 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	f241 3288 	movw	r2, #5000	; 0x1388
 8008136:	4293      	cmp	r3, r2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e0cb      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800813e:	4b49      	ldr	r3, [pc, #292]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0ee      	beq.n	8008128 <HAL_RCC_OscConfig+0x334>
 800814a:	e014      	b.n	8008176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800814c:	f7fd fee4 	bl	8005f18 <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008152:	e00a      	b.n	800816a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008154:	f7fd fee0 	bl	8005f18 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008162:	4293      	cmp	r3, r2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e0b5      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800816a:	4b3e      	ldr	r3, [pc, #248]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1ee      	bne.n	8008154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d105      	bne.n	8008188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800817c:	4b39      	ldr	r3, [pc, #228]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	4a38      	ldr	r2, [pc, #224]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80a1 	beq.w	80082d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008192:	4b34      	ldr	r3, [pc, #208]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f003 030c 	and.w	r3, r3, #12
 800819a:	2b08      	cmp	r3, #8
 800819c:	d05c      	beq.n	8008258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d141      	bne.n	800822a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a6:	4b31      	ldr	r3, [pc, #196]	; (800826c <HAL_RCC_OscConfig+0x478>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ac:	f7fd feb4 	bl	8005f18 <HAL_GetTick>
 80081b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b4:	f7fd feb0 	bl	8005f18 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e087      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c6:	4b27      	ldr	r3, [pc, #156]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f0      	bne.n	80081b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69da      	ldr	r2, [r3, #28]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	019b      	lsls	r3, r3, #6
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	3b01      	subs	r3, #1
 80081ec:	041b      	lsls	r3, r3, #16
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	491b      	ldr	r1, [pc, #108]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081fc:	4b1b      	ldr	r3, [pc, #108]	; (800826c <HAL_RCC_OscConfig+0x478>)
 80081fe:	2201      	movs	r2, #1
 8008200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008202:	f7fd fe89 	bl	8005f18 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800820a:	f7fd fe85 	bl	8005f18 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e05c      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0f0      	beq.n	800820a <HAL_RCC_OscConfig+0x416>
 8008228:	e054      	b.n	80082d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800822a:	4b10      	ldr	r3, [pc, #64]	; (800826c <HAL_RCC_OscConfig+0x478>)
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008230:	f7fd fe72 	bl	8005f18 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008238:	f7fd fe6e 	bl	8005f18 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e045      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800824a:	4b06      	ldr	r3, [pc, #24]	; (8008264 <HAL_RCC_OscConfig+0x470>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1f0      	bne.n	8008238 <HAL_RCC_OscConfig+0x444>
 8008256:	e03d      	b.n	80082d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d107      	bne.n	8008270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e038      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
 8008264:	40023800 	.word	0x40023800
 8008268:	40007000 	.word	0x40007000
 800826c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008270:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <HAL_RCC_OscConfig+0x4ec>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d028      	beq.n	80082d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008288:	429a      	cmp	r2, r3
 800828a:	d121      	bne.n	80082d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d11a      	bne.n	80082d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082a0:	4013      	ands	r3, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d111      	bne.n	80082d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	085b      	lsrs	r3, r3, #1
 80082b8:	3b01      	subs	r3, #1
 80082ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082bc:	429a      	cmp	r2, r3
 80082be:	d107      	bne.n	80082d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d001      	beq.n	80082d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	40023800 	.word	0x40023800

080082e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0cc      	b.n	8008492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082f8:	4b68      	ldr	r3, [pc, #416]	; (800849c <HAL_RCC_ClockConfig+0x1b8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d90c      	bls.n	8008320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008306:	4b65      	ldr	r3, [pc, #404]	; (800849c <HAL_RCC_ClockConfig+0x1b8>)
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800830e:	4b63      	ldr	r3, [pc, #396]	; (800849c <HAL_RCC_ClockConfig+0x1b8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d001      	beq.n	8008320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e0b8      	b.n	8008492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d020      	beq.n	800836e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008338:	4b59      	ldr	r3, [pc, #356]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	4a58      	ldr	r2, [pc, #352]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 800833e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008350:	4b53      	ldr	r3, [pc, #332]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	4a52      	ldr	r2, [pc, #328]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800835a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800835c:	4b50      	ldr	r3, [pc, #320]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	494d      	ldr	r1, [pc, #308]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 800836a:	4313      	orrs	r3, r2
 800836c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d044      	beq.n	8008404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d107      	bne.n	8008392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008382:	4b47      	ldr	r3, [pc, #284]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d119      	bne.n	80083c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e07f      	b.n	8008492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d003      	beq.n	80083a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d107      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083a2:	4b3f      	ldr	r3, [pc, #252]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e06f      	b.n	8008492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083b2:	4b3b      	ldr	r3, [pc, #236]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e067      	b.n	8008492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083c2:	4b37      	ldr	r3, [pc, #220]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f023 0203 	bic.w	r2, r3, #3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	4934      	ldr	r1, [pc, #208]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083d4:	f7fd fda0 	bl	8005f18 <HAL_GetTick>
 80083d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083da:	e00a      	b.n	80083f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083dc:	f7fd fd9c 	bl	8005f18 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e04f      	b.n	8008492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f2:	4b2b      	ldr	r3, [pc, #172]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 020c 	and.w	r2, r3, #12
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	429a      	cmp	r2, r3
 8008402:	d1eb      	bne.n	80083dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008404:	4b25      	ldr	r3, [pc, #148]	; (800849c <HAL_RCC_ClockConfig+0x1b8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d20c      	bcs.n	800842c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008412:	4b22      	ldr	r3, [pc, #136]	; (800849c <HAL_RCC_ClockConfig+0x1b8>)
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	b2d2      	uxtb	r2, r2
 8008418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800841a:	4b20      	ldr	r3, [pc, #128]	; (800849c <HAL_RCC_ClockConfig+0x1b8>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d001      	beq.n	800842c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e032      	b.n	8008492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008438:	4b19      	ldr	r3, [pc, #100]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	4916      	ldr	r1, [pc, #88]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	4313      	orrs	r3, r2
 8008448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0308 	and.w	r3, r3, #8
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008456:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	490e      	ldr	r1, [pc, #56]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008466:	4313      	orrs	r3, r2
 8008468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800846a:	f000 f821 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 800846e:	4602      	mov	r2, r0
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <HAL_RCC_ClockConfig+0x1bc>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	091b      	lsrs	r3, r3, #4
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	490a      	ldr	r1, [pc, #40]	; (80084a4 <HAL_RCC_ClockConfig+0x1c0>)
 800847c:	5ccb      	ldrb	r3, [r1, r3]
 800847e:	fa22 f303 	lsr.w	r3, r2, r3
 8008482:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008486:	4b09      	ldr	r3, [pc, #36]	; (80084ac <HAL_RCC_ClockConfig+0x1c8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4618      	mov	r0, r3
 800848c:	f7fd fd00 	bl	8005e90 <HAL_InitTick>

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40023c00 	.word	0x40023c00
 80084a0:	40023800 	.word	0x40023800
 80084a4:	080108f0 	.word	0x080108f0
 80084a8:	20000000 	.word	0x20000000
 80084ac:	20000004 	.word	0x20000004

080084b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b4:	b094      	sub	sp, #80	; 0x50
 80084b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	647b      	str	r3, [r7, #68]	; 0x44
 80084bc:	2300      	movs	r3, #0
 80084be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084c0:	2300      	movs	r3, #0
 80084c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084c8:	4b79      	ldr	r3, [pc, #484]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 030c 	and.w	r3, r3, #12
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d00d      	beq.n	80084f0 <HAL_RCC_GetSysClockFreq+0x40>
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	f200 80e1 	bhi.w	800869c <HAL_RCC_GetSysClockFreq+0x1ec>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0x34>
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d003      	beq.n	80084ea <HAL_RCC_GetSysClockFreq+0x3a>
 80084e2:	e0db      	b.n	800869c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084e4:	4b73      	ldr	r3, [pc, #460]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80084e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80084e8:	e0db      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084ea:	4b72      	ldr	r3, [pc, #456]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80084ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80084ee:	e0d8      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084f0:	4b6f      	ldr	r3, [pc, #444]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084fa:	4b6d      	ldr	r3, [pc, #436]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d063      	beq.n	80085ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008506:	4b6a      	ldr	r3, [pc, #424]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	099b      	lsrs	r3, r3, #6
 800850c:	2200      	movs	r2, #0
 800850e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008510:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008518:	633b      	str	r3, [r7, #48]	; 0x30
 800851a:	2300      	movs	r3, #0
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
 800851e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008522:	4622      	mov	r2, r4
 8008524:	462b      	mov	r3, r5
 8008526:	f04f 0000 	mov.w	r0, #0
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	0159      	lsls	r1, r3, #5
 8008530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008534:	0150      	lsls	r0, r2, #5
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4621      	mov	r1, r4
 800853c:	1a51      	subs	r1, r2, r1
 800853e:	6139      	str	r1, [r7, #16]
 8008540:	4629      	mov	r1, r5
 8008542:	eb63 0301 	sbc.w	r3, r3, r1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008554:	4659      	mov	r1, fp
 8008556:	018b      	lsls	r3, r1, #6
 8008558:	4651      	mov	r1, sl
 800855a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800855e:	4651      	mov	r1, sl
 8008560:	018a      	lsls	r2, r1, #6
 8008562:	4651      	mov	r1, sl
 8008564:	ebb2 0801 	subs.w	r8, r2, r1
 8008568:	4659      	mov	r1, fp
 800856a:	eb63 0901 	sbc.w	r9, r3, r1
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800857a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800857e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008582:	4690      	mov	r8, r2
 8008584:	4699      	mov	r9, r3
 8008586:	4623      	mov	r3, r4
 8008588:	eb18 0303 	adds.w	r3, r8, r3
 800858c:	60bb      	str	r3, [r7, #8]
 800858e:	462b      	mov	r3, r5
 8008590:	eb49 0303 	adc.w	r3, r9, r3
 8008594:	60fb      	str	r3, [r7, #12]
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80085a2:	4629      	mov	r1, r5
 80085a4:	028b      	lsls	r3, r1, #10
 80085a6:	4621      	mov	r1, r4
 80085a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085ac:	4621      	mov	r1, r4
 80085ae:	028a      	lsls	r2, r1, #10
 80085b0:	4610      	mov	r0, r2
 80085b2:	4619      	mov	r1, r3
 80085b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b6:	2200      	movs	r2, #0
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085c0:	f7f8 fb62 	bl	8000c88 <__aeabi_uldivmod>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4613      	mov	r3, r2
 80085ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085cc:	e058      	b.n	8008680 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ce:	4b38      	ldr	r3, [pc, #224]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	099b      	lsrs	r3, r3, #6
 80085d4:	2200      	movs	r2, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	4611      	mov	r1, r2
 80085da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085de:	623b      	str	r3, [r7, #32]
 80085e0:	2300      	movs	r3, #0
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
 80085e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80085e8:	4642      	mov	r2, r8
 80085ea:	464b      	mov	r3, r9
 80085ec:	f04f 0000 	mov.w	r0, #0
 80085f0:	f04f 0100 	mov.w	r1, #0
 80085f4:	0159      	lsls	r1, r3, #5
 80085f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085fa:	0150      	lsls	r0, r2, #5
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4641      	mov	r1, r8
 8008602:	ebb2 0a01 	subs.w	sl, r2, r1
 8008606:	4649      	mov	r1, r9
 8008608:	eb63 0b01 	sbc.w	fp, r3, r1
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008618:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800861c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008620:	ebb2 040a 	subs.w	r4, r2, sl
 8008624:	eb63 050b 	sbc.w	r5, r3, fp
 8008628:	f04f 0200 	mov.w	r2, #0
 800862c:	f04f 0300 	mov.w	r3, #0
 8008630:	00eb      	lsls	r3, r5, #3
 8008632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008636:	00e2      	lsls	r2, r4, #3
 8008638:	4614      	mov	r4, r2
 800863a:	461d      	mov	r5, r3
 800863c:	4643      	mov	r3, r8
 800863e:	18e3      	adds	r3, r4, r3
 8008640:	603b      	str	r3, [r7, #0]
 8008642:	464b      	mov	r3, r9
 8008644:	eb45 0303 	adc.w	r3, r5, r3
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008656:	4629      	mov	r1, r5
 8008658:	028b      	lsls	r3, r1, #10
 800865a:	4621      	mov	r1, r4
 800865c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008660:	4621      	mov	r1, r4
 8008662:	028a      	lsls	r2, r1, #10
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866a:	2200      	movs	r2, #0
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	61fa      	str	r2, [r7, #28]
 8008670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008674:	f7f8 fb08 	bl	8000c88 <__aeabi_uldivmod>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4613      	mov	r3, r2
 800867e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	0c1b      	lsrs	r3, r3, #16
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	3301      	adds	r3, #1
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008690:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008694:	fbb2 f3f3 	udiv	r3, r2, r3
 8008698:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800869a:	e002      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800869e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80086a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3750      	adds	r7, #80	; 0x50
 80086a8:	46bd      	mov	sp, r7
 80086aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ae:	bf00      	nop
 80086b0:	40023800 	.word	0x40023800
 80086b4:	00f42400 	.word	0x00f42400

080086b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086bc:	4b03      	ldr	r3, [pc, #12]	; (80086cc <HAL_RCC_GetHCLKFreq+0x14>)
 80086be:	681b      	ldr	r3, [r3, #0]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	20000000 	.word	0x20000000

080086d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086d4:	f7ff fff0 	bl	80086b8 <HAL_RCC_GetHCLKFreq>
 80086d8:	4602      	mov	r2, r0
 80086da:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	0a9b      	lsrs	r3, r3, #10
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	4903      	ldr	r1, [pc, #12]	; (80086f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086e6:	5ccb      	ldrb	r3, [r1, r3]
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	40023800 	.word	0x40023800
 80086f4:	08010900 	.word	0x08010900

080086f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086fc:	f7ff ffdc 	bl	80086b8 <HAL_RCC_GetHCLKFreq>
 8008700:	4602      	mov	r2, r0
 8008702:	4b05      	ldr	r3, [pc, #20]	; (8008718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	0b5b      	lsrs	r3, r3, #13
 8008708:	f003 0307 	and.w	r3, r3, #7
 800870c:	4903      	ldr	r1, [pc, #12]	; (800871c <HAL_RCC_GetPCLK2Freq+0x24>)
 800870e:	5ccb      	ldrb	r3, [r1, r3]
 8008710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008714:	4618      	mov	r0, r3
 8008716:	bd80      	pop	{r7, pc}
 8008718:	40023800 	.word	0x40023800
 800871c:	08010900 	.word	0x08010900

08008720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e07b      	b.n	800882a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d108      	bne.n	800874c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008742:	d009      	beq.n	8008758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	61da      	str	r2, [r3, #28]
 800874a:	e005      	b.n	8008758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d106      	bne.n	8008778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7fb ff8e 	bl	8004694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800878e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087aa:	431a      	orrs	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	431a      	orrs	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087c8:	431a      	orrs	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087dc:	ea42 0103 	orr.w	r1, r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	0c1b      	lsrs	r3, r3, #16
 80087f6:	f003 0104 	and.w	r1, r3, #4
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	f003 0210 	and.w	r2, r3, #16
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008818:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b088      	sub	sp, #32
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	603b      	str	r3, [r7, #0]
 800883e:	4613      	mov	r3, r2
 8008840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <HAL_SPI_Transmit+0x22>
 8008850:	2302      	movs	r3, #2
 8008852:	e126      	b.n	8008aa2 <HAL_SPI_Transmit+0x270>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800885c:	f7fd fb5c 	bl	8005f18 <HAL_GetTick>
 8008860:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b01      	cmp	r3, #1
 8008870:	d002      	beq.n	8008878 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008872:	2302      	movs	r3, #2
 8008874:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008876:	e10b      	b.n	8008a90 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <HAL_SPI_Transmit+0x52>
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008888:	e102      	b.n	8008a90 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2203      	movs	r2, #3
 800888e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	88fa      	ldrh	r2, [r7, #6]
 80088a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088d0:	d10f      	bne.n	80088f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	d007      	beq.n	8008910 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800890e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008918:	d14b      	bne.n	80089b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <HAL_SPI_Transmit+0xf6>
 8008922:	8afb      	ldrh	r3, [r7, #22]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d13e      	bne.n	80089a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892c:	881a      	ldrh	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	1c9a      	adds	r2, r3, #2
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800894c:	e02b      	b.n	80089a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b02      	cmp	r3, #2
 800895a:	d112      	bne.n	8008982 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	881a      	ldrh	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	1c9a      	adds	r2, r3, #2
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008976:	b29b      	uxth	r3, r3
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008980:	e011      	b.n	80089a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008982:	f7fd fac9 	bl	8005f18 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d803      	bhi.n	800899a <HAL_SPI_Transmit+0x168>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d102      	bne.n	80089a0 <HAL_SPI_Transmit+0x16e>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089a4:	e074      	b.n	8008a90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1ce      	bne.n	800894e <HAL_SPI_Transmit+0x11c>
 80089b0:	e04c      	b.n	8008a4c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_SPI_Transmit+0x18e>
 80089ba:	8afb      	ldrh	r3, [r7, #22]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d140      	bne.n	8008a42 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	7812      	ldrb	r2, [r2, #0]
 80089cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089dc:	b29b      	uxth	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80089e6:	e02c      	b.n	8008a42 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d113      	bne.n	8008a1e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	330c      	adds	r3, #12
 8008a00:	7812      	ldrb	r2, [r2, #0]
 8008a02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a1c:	e011      	b.n	8008a42 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a1e:	f7fd fa7b 	bl	8005f18 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d803      	bhi.n	8008a36 <HAL_SPI_Transmit+0x204>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d102      	bne.n	8008a3c <HAL_SPI_Transmit+0x20a>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a40:	e026      	b.n	8008a90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1cd      	bne.n	80089e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fbcb 	bl	80091ec <SPI_EndRxTxTransaction>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	77fb      	strb	r3, [r7, #31]
 8008a8c:	e000      	b.n	8008a90 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3720      	adds	r7, #32
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b088      	sub	sp, #32
 8008aae:	af02      	add	r7, sp, #8
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ac6:	d112      	bne.n	8008aee <HAL_SPI_Receive+0x44>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10e      	bne.n	8008aee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	68b9      	ldr	r1, [r7, #8]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f8f1 	bl	8008ccc <HAL_SPI_TransmitReceive>
 8008aea:	4603      	mov	r3, r0
 8008aec:	e0ea      	b.n	8008cc4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_SPI_Receive+0x52>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e0e3      	b.n	8008cc4 <HAL_SPI_Receive+0x21a>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b04:	f7fd fa08 	bl	8005f18 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d002      	beq.n	8008b1c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b16:	2302      	movs	r3, #2
 8008b18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b1a:	e0ca      	b.n	8008cb2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <HAL_SPI_Receive+0x7e>
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b2c:	e0c1      	b.n	8008cb2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2204      	movs	r2, #4
 8008b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	88fa      	ldrh	r2, [r7, #6]
 8008b46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	88fa      	ldrh	r2, [r7, #6]
 8008b4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b74:	d10f      	bne.n	8008b96 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d007      	beq.n	8008bb4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d162      	bne.n	8008c82 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008bbc:	e02e      	b.n	8008c1c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d115      	bne.n	8008bf8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f103 020c 	add.w	r2, r3, #12
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bf6:	e011      	b.n	8008c1c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bf8:	f7fd f98e 	bl	8005f18 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d803      	bhi.n	8008c10 <HAL_SPI_Receive+0x166>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0e:	d102      	bne.n	8008c16 <HAL_SPI_Receive+0x16c>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d102      	bne.n	8008c1c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c1a:	e04a      	b.n	8008cb2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1cb      	bne.n	8008bbe <HAL_SPI_Receive+0x114>
 8008c26:	e031      	b.n	8008c8c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d113      	bne.n	8008c5e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	b292      	uxth	r2, r2
 8008c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	1c9a      	adds	r2, r3, #2
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c5c:	e011      	b.n	8008c82 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c5e:	f7fd f95b 	bl	8005f18 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d803      	bhi.n	8008c76 <HAL_SPI_Receive+0x1cc>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d102      	bne.n	8008c7c <HAL_SPI_Receive+0x1d2>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c80:	e017      	b.n	8008cb2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1cd      	bne.n	8008c28 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fa45 	bl	8009120 <SPI_EndRxTransaction>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]
 8008cae:	e000      	b.n	8008cb2 <HAL_SPI_Receive+0x208>
  }

error :
 8008cb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	; 0x30
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_SPI_TransmitReceive+0x26>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e18a      	b.n	8009008 <HAL_SPI_TransmitReceive+0x33c>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cfa:	f7fd f90d 	bl	8005f18 <HAL_GetTick>
 8008cfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d10:	887b      	ldrh	r3, [r7, #2]
 8008d12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d00f      	beq.n	8008d3c <HAL_SPI_TransmitReceive+0x70>
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d22:	d107      	bne.n	8008d34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d103      	bne.n	8008d34 <HAL_SPI_TransmitReceive+0x68>
 8008d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d003      	beq.n	8008d3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d34:	2302      	movs	r3, #2
 8008d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d3a:	e15b      	b.n	8008ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_SPI_TransmitReceive+0x82>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_SPI_TransmitReceive+0x82>
 8008d48:	887b      	ldrh	r3, [r7, #2]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d103      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d54:	e14e      	b.n	8008ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d003      	beq.n	8008d6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2205      	movs	r2, #5
 8008d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	887a      	ldrh	r2, [r7, #2]
 8008d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	887a      	ldrh	r2, [r7, #2]
 8008d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	887a      	ldrh	r2, [r7, #2]
 8008d8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	887a      	ldrh	r2, [r7, #2]
 8008d92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008daa:	2b40      	cmp	r3, #64	; 0x40
 8008dac:	d007      	beq.n	8008dbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dc6:	d178      	bne.n	8008eba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <HAL_SPI_TransmitReceive+0x10a>
 8008dd0:	8b7b      	ldrh	r3, [r7, #26]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d166      	bne.n	8008ea4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dda:	881a      	ldrh	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	1c9a      	adds	r2, r3, #2
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dfa:	e053      	b.n	8008ea4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d11b      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x176>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d016      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0x176>
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d113      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1e:	881a      	ldrh	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	1c9a      	adds	r2, r3, #2
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d119      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x1b8>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d014      	beq.n	8008e84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	b292      	uxth	r2, r2
 8008e66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	1c9a      	adds	r2, r3, #2
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e80:	2301      	movs	r3, #1
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e84:	f7fd f848 	bl	8005f18 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d807      	bhi.n	8008ea4 <HAL_SPI_TransmitReceive+0x1d8>
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d003      	beq.n	8008ea4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ea2:	e0a7      	b.n	8008ff4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1a6      	bne.n	8008dfc <HAL_SPI_TransmitReceive+0x130>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1a1      	bne.n	8008dfc <HAL_SPI_TransmitReceive+0x130>
 8008eb8:	e07c      	b.n	8008fb4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_SPI_TransmitReceive+0x1fc>
 8008ec2:	8b7b      	ldrh	r3, [r7, #26]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d16b      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	330c      	adds	r3, #12
 8008ed2:	7812      	ldrb	r2, [r2, #0]
 8008ed4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eee:	e057      	b.n	8008fa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d11c      	bne.n	8008f38 <HAL_SPI_TransmitReceive+0x26c>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d017      	beq.n	8008f38 <HAL_SPI_TransmitReceive+0x26c>
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d114      	bne.n	8008f38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	330c      	adds	r3, #12
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d119      	bne.n	8008f7a <HAL_SPI_TransmitReceive+0x2ae>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d014      	beq.n	8008f7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f76:	2301      	movs	r3, #1
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f7a:	f7fc ffcd 	bl	8005f18 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d803      	bhi.n	8008f92 <HAL_SPI_TransmitReceive+0x2c6>
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d102      	bne.n	8008f98 <HAL_SPI_TransmitReceive+0x2cc>
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d103      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f9e:	e029      	b.n	8008ff4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1a2      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x224>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d19d      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f917 	bl	80091ec <SPI_EndRxTxTransaction>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008fd0:	e010      	b.n	8008ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10b      	bne.n	8008ff2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	e000      	b.n	8008ff4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ff2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009008:	4618      	mov	r0, r3
 800900a:	3730      	adds	r7, #48	; 0x30
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	4613      	mov	r3, r2
 800901e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009020:	f7fc ff7a 	bl	8005f18 <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	4413      	add	r3, r2
 800902e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009030:	f7fc ff72 	bl	8005f18 <HAL_GetTick>
 8009034:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009036:	4b39      	ldr	r3, [pc, #228]	; (800911c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	015b      	lsls	r3, r3, #5
 800903c:	0d1b      	lsrs	r3, r3, #20
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	fb02 f303 	mul.w	r3, r2, r3
 8009044:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009046:	e054      	b.n	80090f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d050      	beq.n	80090f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009050:	f7fc ff62 	bl	8005f18 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	69fa      	ldr	r2, [r7, #28]
 800905c:	429a      	cmp	r2, r3
 800905e:	d902      	bls.n	8009066 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d13d      	bne.n	80090e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800907e:	d111      	bne.n	80090a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009088:	d004      	beq.n	8009094 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009092:	d107      	bne.n	80090a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ac:	d10f      	bne.n	80090ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e017      	b.n	8009112 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4013      	ands	r3, r2
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	429a      	cmp	r2, r3
 8009100:	bf0c      	ite	eq
 8009102:	2301      	moveq	r3, #1
 8009104:	2300      	movne	r3, #0
 8009106:	b2db      	uxtb	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	429a      	cmp	r2, r3
 800910e:	d19b      	bne.n	8009048 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000000 	.word	0x20000000

08009120 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af02      	add	r7, sp, #8
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009134:	d111      	bne.n	800915a <SPI_EndRxTransaction+0x3a>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800913e:	d004      	beq.n	800914a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009148:	d107      	bne.n	800915a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009158:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009162:	d12a      	bne.n	80091ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916c:	d012      	beq.n	8009194 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2200      	movs	r2, #0
 8009176:	2180      	movs	r1, #128	; 0x80
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff ff49 	bl	8009010 <SPI_WaitFlagStateUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d02d      	beq.n	80091e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009188:	f043 0220 	orr.w	r2, r3, #32
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e026      	b.n	80091e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2200      	movs	r2, #0
 800919c:	2101      	movs	r1, #1
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7ff ff36 	bl	8009010 <SPI_WaitFlagStateUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01a      	beq.n	80091e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ae:	f043 0220 	orr.w	r2, r3, #32
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e013      	b.n	80091e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2200      	movs	r2, #0
 80091c2:	2101      	movs	r1, #1
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff ff23 	bl	8009010 <SPI_WaitFlagStateUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d007      	beq.n	80091e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d4:	f043 0220 	orr.w	r2, r3, #32
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e000      	b.n	80091e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091f8:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <SPI_EndRxTxTransaction+0x7c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1b      	ldr	r2, [pc, #108]	; (800926c <SPI_EndRxTxTransaction+0x80>)
 80091fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009202:	0d5b      	lsrs	r3, r3, #21
 8009204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009208:	fb02 f303 	mul.w	r3, r2, r3
 800920c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009216:	d112      	bne.n	800923e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2200      	movs	r2, #0
 8009220:	2180      	movs	r1, #128	; 0x80
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff fef4 	bl	8009010 <SPI_WaitFlagStateUntilTimeout>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d016      	beq.n	800925c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009232:	f043 0220 	orr.w	r2, r3, #32
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e00f      	b.n	800925e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00a      	beq.n	800925a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	3b01      	subs	r3, #1
 8009248:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009254:	2b80      	cmp	r3, #128	; 0x80
 8009256:	d0f2      	beq.n	800923e <SPI_EndRxTxTransaction+0x52>
 8009258:	e000      	b.n	800925c <SPI_EndRxTxTransaction+0x70>
        break;
 800925a:	bf00      	nop
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000000 	.word	0x20000000
 800926c:	165e9f81 	.word	0x165e9f81

08009270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e041      	b.n	8009306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7fb fb02 	bl	80048a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f000 fe12 	bl	8009ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b01      	cmp	r3, #1
 8009322:	d001      	beq.n	8009328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e04e      	b.n	80093c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0201 	orr.w	r2, r2, #1
 800933e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a23      	ldr	r2, [pc, #140]	; (80093d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d022      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x80>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009352:	d01d      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x80>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1f      	ldr	r2, [pc, #124]	; (80093d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d018      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x80>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1e      	ldr	r2, [pc, #120]	; (80093dc <HAL_TIM_Base_Start_IT+0xcc>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d013      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x80>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1c      	ldr	r2, [pc, #112]	; (80093e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00e      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x80>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a1b      	ldr	r2, [pc, #108]	; (80093e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d009      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x80>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a19      	ldr	r2, [pc, #100]	; (80093e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d004      	beq.n	8009390 <HAL_TIM_Base_Start_IT+0x80>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a18      	ldr	r2, [pc, #96]	; (80093ec <HAL_TIM_Base_Start_IT+0xdc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d111      	bne.n	80093b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b06      	cmp	r3, #6
 80093a0:	d010      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0201 	orr.w	r2, r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b2:	e007      	b.n	80093c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40010000 	.word	0x40010000
 80093d8:	40000400 	.word	0x40000400
 80093dc:	40000800 	.word	0x40000800
 80093e0:	40000c00 	.word	0x40000c00
 80093e4:	40010400 	.word	0x40010400
 80093e8:	40014000 	.word	0x40014000
 80093ec:	40001800 	.word	0x40001800

080093f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0201 	bic.w	r2, r2, #1
 8009406:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6a1a      	ldr	r2, [r3, #32]
 800940e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009412:	4013      	ands	r3, r2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10f      	bne.n	8009438 <HAL_TIM_Base_Stop_IT+0x48>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6a1a      	ldr	r2, [r3, #32]
 800941e:	f240 4344 	movw	r3, #1092	; 0x444
 8009422:	4013      	ands	r3, r2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d107      	bne.n	8009438 <HAL_TIM_Base_Stop_IT+0x48>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0201 	bic.w	r2, r2, #1
 8009436:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e041      	b.n	80094e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d106      	bne.n	800947a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7fb f9eb 	bl	8004850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2202      	movs	r2, #2
 800947e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3304      	adds	r3, #4
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f000 fd23 	bl	8009ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <HAL_TIM_PWM_Start+0x24>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b01      	cmp	r3, #1
 8009506:	bf14      	ite	ne
 8009508:	2301      	movne	r3, #1
 800950a:	2300      	moveq	r3, #0
 800950c:	b2db      	uxtb	r3, r3
 800950e:	e022      	b.n	8009556 <HAL_TIM_PWM_Start+0x6a>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b04      	cmp	r3, #4
 8009514:	d109      	bne.n	800952a <HAL_TIM_PWM_Start+0x3e>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b01      	cmp	r3, #1
 8009520:	bf14      	ite	ne
 8009522:	2301      	movne	r3, #1
 8009524:	2300      	moveq	r3, #0
 8009526:	b2db      	uxtb	r3, r3
 8009528:	e015      	b.n	8009556 <HAL_TIM_PWM_Start+0x6a>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b08      	cmp	r3, #8
 800952e:	d109      	bne.n	8009544 <HAL_TIM_PWM_Start+0x58>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b01      	cmp	r3, #1
 800953a:	bf14      	ite	ne
 800953c:	2301      	movne	r3, #1
 800953e:	2300      	moveq	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	e008      	b.n	8009556 <HAL_TIM_PWM_Start+0x6a>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b01      	cmp	r3, #1
 800954e:	bf14      	ite	ne
 8009550:	2301      	movne	r3, #1
 8009552:	2300      	moveq	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e07c      	b.n	8009658 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <HAL_TIM_PWM_Start+0x82>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800956c:	e013      	b.n	8009596 <HAL_TIM_PWM_Start+0xaa>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b04      	cmp	r3, #4
 8009572:	d104      	bne.n	800957e <HAL_TIM_PWM_Start+0x92>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2202      	movs	r2, #2
 8009578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800957c:	e00b      	b.n	8009596 <HAL_TIM_PWM_Start+0xaa>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b08      	cmp	r3, #8
 8009582:	d104      	bne.n	800958e <HAL_TIM_PWM_Start+0xa2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800958c:	e003      	b.n	8009596 <HAL_TIM_PWM_Start+0xaa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2201      	movs	r2, #1
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 feea 	bl	800a378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a2d      	ldr	r2, [pc, #180]	; (8009660 <HAL_TIM_PWM_Start+0x174>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d004      	beq.n	80095b8 <HAL_TIM_PWM_Start+0xcc>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a2c      	ldr	r2, [pc, #176]	; (8009664 <HAL_TIM_PWM_Start+0x178>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d101      	bne.n	80095bc <HAL_TIM_PWM_Start+0xd0>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <HAL_TIM_PWM_Start+0xd2>
 80095bc:	2300      	movs	r3, #0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d007      	beq.n	80095d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a22      	ldr	r2, [pc, #136]	; (8009660 <HAL_TIM_PWM_Start+0x174>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d022      	beq.n	8009622 <HAL_TIM_PWM_Start+0x136>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e4:	d01d      	beq.n	8009622 <HAL_TIM_PWM_Start+0x136>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a1f      	ldr	r2, [pc, #124]	; (8009668 <HAL_TIM_PWM_Start+0x17c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d018      	beq.n	8009622 <HAL_TIM_PWM_Start+0x136>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a1d      	ldr	r2, [pc, #116]	; (800966c <HAL_TIM_PWM_Start+0x180>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d013      	beq.n	8009622 <HAL_TIM_PWM_Start+0x136>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a1c      	ldr	r2, [pc, #112]	; (8009670 <HAL_TIM_PWM_Start+0x184>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00e      	beq.n	8009622 <HAL_TIM_PWM_Start+0x136>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a16      	ldr	r2, [pc, #88]	; (8009664 <HAL_TIM_PWM_Start+0x178>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d009      	beq.n	8009622 <HAL_TIM_PWM_Start+0x136>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a18      	ldr	r2, [pc, #96]	; (8009674 <HAL_TIM_PWM_Start+0x188>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d004      	beq.n	8009622 <HAL_TIM_PWM_Start+0x136>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a16      	ldr	r2, [pc, #88]	; (8009678 <HAL_TIM_PWM_Start+0x18c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d111      	bne.n	8009646 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b06      	cmp	r3, #6
 8009632:	d010      	beq.n	8009656 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0201 	orr.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009644:	e007      	b.n	8009656 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0201 	orr.w	r2, r2, #1
 8009654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	40010000 	.word	0x40010000
 8009664:	40010400 	.word	0x40010400
 8009668:	40000400 	.word	0x40000400
 800966c:	40000800 	.word	0x40000800
 8009670:	40000c00 	.word	0x40000c00
 8009674:	40014000 	.word	0x40014000
 8009678:	40001800 	.word	0x40001800

0800967c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2200      	movs	r2, #0
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fe72 	bl	800a378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a2e      	ldr	r2, [pc, #184]	; (8009754 <HAL_TIM_PWM_Stop+0xd8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d004      	beq.n	80096a8 <HAL_TIM_PWM_Stop+0x2c>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a2d      	ldr	r2, [pc, #180]	; (8009758 <HAL_TIM_PWM_Stop+0xdc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d101      	bne.n	80096ac <HAL_TIM_PWM_Stop+0x30>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <HAL_TIM_PWM_Stop+0x32>
 80096ac:	2300      	movs	r3, #0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d017      	beq.n	80096e2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a1a      	ldr	r2, [r3, #32]
 80096b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80096bc:	4013      	ands	r3, r2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10f      	bne.n	80096e2 <HAL_TIM_PWM_Stop+0x66>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a1a      	ldr	r2, [r3, #32]
 80096c8:	f240 4344 	movw	r3, #1092	; 0x444
 80096cc:	4013      	ands	r3, r2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d107      	bne.n	80096e2 <HAL_TIM_PWM_Stop+0x66>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a1a      	ldr	r2, [r3, #32]
 80096e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80096ec:	4013      	ands	r3, r2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10f      	bne.n	8009712 <HAL_TIM_PWM_Stop+0x96>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6a1a      	ldr	r2, [r3, #32]
 80096f8:	f240 4344 	movw	r3, #1092	; 0x444
 80096fc:	4013      	ands	r3, r2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d107      	bne.n	8009712 <HAL_TIM_PWM_Stop+0x96>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0201 	bic.w	r2, r2, #1
 8009710:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <HAL_TIM_PWM_Stop+0xa6>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009720:	e013      	b.n	800974a <HAL_TIM_PWM_Stop+0xce>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b04      	cmp	r3, #4
 8009726:	d104      	bne.n	8009732 <HAL_TIM_PWM_Stop+0xb6>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009730:	e00b      	b.n	800974a <HAL_TIM_PWM_Stop+0xce>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b08      	cmp	r3, #8
 8009736:	d104      	bne.n	8009742 <HAL_TIM_PWM_Stop+0xc6>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009740:	e003      	b.n	800974a <HAL_TIM_PWM_Stop+0xce>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400

0800975c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e097      	b.n	80098a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d106      	bne.n	800978a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fa ffcd 	bl	8004724 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2202      	movs	r2, #2
 800978e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6812      	ldr	r2, [r2, #0]
 800979c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097a0:	f023 0307 	bic.w	r3, r3, #7
 80097a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f000 fb91 	bl	8009ed8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	4313      	orrs	r3, r2
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80097fc:	f023 030c 	bic.w	r3, r3, #12
 8009800:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800980c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	4313      	orrs	r3, r2
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	4313      	orrs	r3, r2
 800981e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	011a      	lsls	r2, r3, #4
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	031b      	lsls	r3, r3, #12
 800982c:	4313      	orrs	r3, r2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800983a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009842:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	4313      	orrs	r3, r2
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d110      	bne.n	80098fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d102      	bne.n	80098e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80098de:	7b7b      	ldrb	r3, [r7, #13]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d001      	beq.n	80098e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e069      	b.n	80099bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098f8:	e031      	b.n	800995e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d110      	bne.n	8009922 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d102      	bne.n	800990c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009906:	7b3b      	ldrb	r3, [r7, #12]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d001      	beq.n	8009910 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e055      	b.n	80099bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009920:	e01d      	b.n	800995e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d108      	bne.n	800993a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d105      	bne.n	800993a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800992e:	7b7b      	ldrb	r3, [r7, #13]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d102      	bne.n	800993a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009934:	7b3b      	ldrb	r3, [r7, #12]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d001      	beq.n	800993e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e03e      	b.n	80099bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2202      	movs	r2, #2
 8009942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2202      	movs	r2, #2
 8009952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2202      	movs	r2, #2
 800995a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_TIM_Encoder_Start+0xc4>
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b04      	cmp	r3, #4
 8009968:	d008      	beq.n	800997c <HAL_TIM_Encoder_Start+0xd4>
 800996a:	e00f      	b.n	800998c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2201      	movs	r2, #1
 8009972:	2100      	movs	r1, #0
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fcff 	bl	800a378 <TIM_CCxChannelCmd>
      break;
 800997a:	e016      	b.n	80099aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2201      	movs	r2, #1
 8009982:	2104      	movs	r1, #4
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fcf7 	bl	800a378 <TIM_CCxChannelCmd>
      break;
 800998a:	e00e      	b.n	80099aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2201      	movs	r2, #1
 8009992:	2100      	movs	r1, #0
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fcef 	bl	800a378 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2201      	movs	r2, #1
 80099a0:	2104      	movs	r1, #4
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 fce8 	bl	800a378 <TIM_CCxChannelCmd>
      break;
 80099a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f042 0201 	orr.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_TIM_Encoder_Stop+0x18>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d008      	beq.n	80099ec <HAL_TIM_Encoder_Stop+0x28>
 80099da:	e00f      	b.n	80099fc <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2200      	movs	r2, #0
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fcc7 	bl	800a378 <TIM_CCxChannelCmd>
      break;
 80099ea:	e016      	b.n	8009a1a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2200      	movs	r2, #0
 80099f2:	2104      	movs	r1, #4
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 fcbf 	bl	800a378 <TIM_CCxChannelCmd>
      break;
 80099fa:	e00e      	b.n	8009a1a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2200      	movs	r2, #0
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fcb7 	bl	800a378 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2104      	movs	r1, #4
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fcb0 	bl	800a378 <TIM_CCxChannelCmd>
      break;
 8009a18:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6a1a      	ldr	r2, [r3, #32]
 8009a20:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a24:	4013      	ands	r3, r2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10f      	bne.n	8009a4a <HAL_TIM_Encoder_Stop+0x86>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6a1a      	ldr	r2, [r3, #32]
 8009a30:	f240 4344 	movw	r3, #1092	; 0x444
 8009a34:	4013      	ands	r3, r2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d107      	bne.n	8009a4a <HAL_TIM_Encoder_Stop+0x86>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 0201 	bic.w	r2, r2, #1
 8009a48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <HAL_TIM_Encoder_Stop+0x92>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d138      	bne.n	8009ac8 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <HAL_TIM_Encoder_Stop+0xa2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a64:	e013      	b.n	8009a8e <HAL_TIM_Encoder_Stop+0xca>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d104      	bne.n	8009a76 <HAL_TIM_Encoder_Stop+0xb2>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a74:	e00b      	b.n	8009a8e <HAL_TIM_Encoder_Stop+0xca>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d104      	bne.n	8009a86 <HAL_TIM_Encoder_Stop+0xc2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a84:	e003      	b.n	8009a8e <HAL_TIM_Encoder_Stop+0xca>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d104      	bne.n	8009a9e <HAL_TIM_Encoder_Stop+0xda>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a9c:	e024      	b.n	8009ae8 <HAL_TIM_Encoder_Stop+0x124>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d104      	bne.n	8009aae <HAL_TIM_Encoder_Stop+0xea>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aac:	e01c      	b.n	8009ae8 <HAL_TIM_Encoder_Stop+0x124>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_Encoder_Stop+0xfa>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009abc:	e014      	b.n	8009ae8 <HAL_TIM_Encoder_Stop+0x124>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ac6:	e00f      	b.n	8009ae8 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d122      	bne.n	8009b4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d11b      	bne.n	8009b4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f06f 0202 	mvn.w	r2, #2
 8009b1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	f003 0303 	and.w	r3, r3, #3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f9b1 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 8009b3a:	e005      	b.n	8009b48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f9a3 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f9b4 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b04      	cmp	r3, #4
 8009b5a:	d122      	bne.n	8009ba2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d11b      	bne.n	8009ba2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f06f 0204 	mvn.w	r2, #4
 8009b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f987 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 8009b8e:	e005      	b.n	8009b9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f979 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f98a 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d122      	bne.n	8009bf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f003 0308 	and.w	r3, r3, #8
 8009bba:	2b08      	cmp	r3, #8
 8009bbc:	d11b      	bne.n	8009bf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f06f 0208 	mvn.w	r2, #8
 8009bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2204      	movs	r2, #4
 8009bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	f003 0303 	and.w	r3, r3, #3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f95d 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 8009be2:	e005      	b.n	8009bf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f94f 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f960 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	f003 0310 	and.w	r3, r3, #16
 8009c00:	2b10      	cmp	r3, #16
 8009c02:	d122      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	f003 0310 	and.w	r3, r3, #16
 8009c0e:	2b10      	cmp	r3, #16
 8009c10:	d11b      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f06f 0210 	mvn.w	r2, #16
 8009c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2208      	movs	r2, #8
 8009c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f933 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 8009c36:	e005      	b.n	8009c44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f925 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f936 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d10e      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d107      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f06f 0201 	mvn.w	r2, #1
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7f9 f92d 	bl	8002ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c80:	2b80      	cmp	r3, #128	; 0x80
 8009c82:	d10e      	bne.n	8009ca2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8e:	2b80      	cmp	r3, #128	; 0x80
 8009c90:	d107      	bne.n	8009ca2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fc17 	bl	800a4d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	d10e      	bne.n	8009cce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cba:	2b40      	cmp	r3, #64	; 0x40
 8009cbc:	d107      	bne.n	8009cce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f8fb 	bl	8009ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f003 0320 	and.w	r3, r3, #32
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d10e      	bne.n	8009cfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f003 0320 	and.w	r3, r3, #32
 8009ce6:	2b20      	cmp	r3, #32
 8009ce8:	d107      	bne.n	8009cfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f06f 0220 	mvn.w	r2, #32
 8009cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fbe1 	bl	800a4bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e0ae      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b0c      	cmp	r3, #12
 8009d2e:	f200 809f 	bhi.w	8009e70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d6d 	.word	0x08009d6d
 8009d3c:	08009e71 	.word	0x08009e71
 8009d40:	08009e71 	.word	0x08009e71
 8009d44:	08009e71 	.word	0x08009e71
 8009d48:	08009dad 	.word	0x08009dad
 8009d4c:	08009e71 	.word	0x08009e71
 8009d50:	08009e71 	.word	0x08009e71
 8009d54:	08009e71 	.word	0x08009e71
 8009d58:	08009def 	.word	0x08009def
 8009d5c:	08009e71 	.word	0x08009e71
 8009d60:	08009e71 	.word	0x08009e71
 8009d64:	08009e71 	.word	0x08009e71
 8009d68:	08009e2f 	.word	0x08009e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 f950 	bl	800a018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699a      	ldr	r2, [r3, #24]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0208 	orr.w	r2, r2, #8
 8009d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f022 0204 	bic.w	r2, r2, #4
 8009d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6999      	ldr	r1, [r3, #24]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	691a      	ldr	r2, [r3, #16]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	619a      	str	r2, [r3, #24]
      break;
 8009daa:	e064      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68b9      	ldr	r1, [r7, #8]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f9a0 	bl	800a0f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	699a      	ldr	r2, [r3, #24]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6999      	ldr	r1, [r3, #24]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	021a      	lsls	r2, r3, #8
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	619a      	str	r2, [r3, #24]
      break;
 8009dec:	e043      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f9f5 	bl	800a1e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69da      	ldr	r2, [r3, #28]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0208 	orr.w	r2, r2, #8
 8009e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69da      	ldr	r2, [r3, #28]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0204 	bic.w	r2, r2, #4
 8009e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69d9      	ldr	r1, [r3, #28]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	61da      	str	r2, [r3, #28]
      break;
 8009e2c:	e023      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fa49 	bl	800a2cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69da      	ldr	r2, [r3, #28]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69da      	ldr	r2, [r3, #28]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69d9      	ldr	r1, [r3, #28]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	021a      	lsls	r2, r3, #8
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	61da      	str	r2, [r3, #28]
      break;
 8009e6e:	e002      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	75fb      	strb	r3, [r7, #23]
      break;
 8009e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a40      	ldr	r2, [pc, #256]	; (8009fec <TIM_Base_SetConfig+0x114>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d013      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef6:	d00f      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a3d      	ldr	r2, [pc, #244]	; (8009ff0 <TIM_Base_SetConfig+0x118>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00b      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a3c      	ldr	r2, [pc, #240]	; (8009ff4 <TIM_Base_SetConfig+0x11c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d007      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a3b      	ldr	r2, [pc, #236]	; (8009ff8 <TIM_Base_SetConfig+0x120>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a3a      	ldr	r2, [pc, #232]	; (8009ffc <TIM_Base_SetConfig+0x124>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d108      	bne.n	8009f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a2f      	ldr	r2, [pc, #188]	; (8009fec <TIM_Base_SetConfig+0x114>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d02b      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f38:	d027      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a2c      	ldr	r2, [pc, #176]	; (8009ff0 <TIM_Base_SetConfig+0x118>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d023      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a2b      	ldr	r2, [pc, #172]	; (8009ff4 <TIM_Base_SetConfig+0x11c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d01f      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a2a      	ldr	r2, [pc, #168]	; (8009ff8 <TIM_Base_SetConfig+0x120>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d01b      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a29      	ldr	r2, [pc, #164]	; (8009ffc <TIM_Base_SetConfig+0x124>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d017      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a28      	ldr	r2, [pc, #160]	; (800a000 <TIM_Base_SetConfig+0x128>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d013      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a27      	ldr	r2, [pc, #156]	; (800a004 <TIM_Base_SetConfig+0x12c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00f      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a26      	ldr	r2, [pc, #152]	; (800a008 <TIM_Base_SetConfig+0x130>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d00b      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a25      	ldr	r2, [pc, #148]	; (800a00c <TIM_Base_SetConfig+0x134>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d007      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a24      	ldr	r2, [pc, #144]	; (800a010 <TIM_Base_SetConfig+0x138>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d003      	beq.n	8009f8a <TIM_Base_SetConfig+0xb2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a23      	ldr	r2, [pc, #140]	; (800a014 <TIM_Base_SetConfig+0x13c>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d108      	bne.n	8009f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <TIM_Base_SetConfig+0x114>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d003      	beq.n	8009fd0 <TIM_Base_SetConfig+0xf8>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a0c      	ldr	r2, [pc, #48]	; (8009ffc <TIM_Base_SetConfig+0x124>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d103      	bne.n	8009fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	615a      	str	r2, [r3, #20]
}
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40010000 	.word	0x40010000
 8009ff0:	40000400 	.word	0x40000400
 8009ff4:	40000800 	.word	0x40000800
 8009ff8:	40000c00 	.word	0x40000c00
 8009ffc:	40010400 	.word	0x40010400
 800a000:	40014000 	.word	0x40014000
 800a004:	40014400 	.word	0x40014400
 800a008:	40014800 	.word	0x40014800
 800a00c:	40001800 	.word	0x40001800
 800a010:	40001c00 	.word	0x40001c00
 800a014:	40002000 	.word	0x40002000

0800a018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	f023 0201 	bic.w	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f023 0302 	bic.w	r3, r3, #2
 800a060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a20      	ldr	r2, [pc, #128]	; (800a0f0 <TIM_OC1_SetConfig+0xd8>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d003      	beq.n	800a07c <TIM_OC1_SetConfig+0x64>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a1f      	ldr	r2, [pc, #124]	; (800a0f4 <TIM_OC1_SetConfig+0xdc>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d10c      	bne.n	800a096 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f023 0308 	bic.w	r3, r3, #8
 800a082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f023 0304 	bic.w	r3, r3, #4
 800a094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a15      	ldr	r2, [pc, #84]	; (800a0f0 <TIM_OC1_SetConfig+0xd8>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d003      	beq.n	800a0a6 <TIM_OC1_SetConfig+0x8e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a14      	ldr	r2, [pc, #80]	; (800a0f4 <TIM_OC1_SetConfig+0xdc>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d111      	bne.n	800a0ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	621a      	str	r2, [r3, #32]
}
 800a0e4:	bf00      	nop
 800a0e6:	371c      	adds	r7, #28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	40010000 	.word	0x40010000
 800a0f4:	40010400 	.word	0x40010400

0800a0f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	f023 0210 	bic.w	r2, r3, #16
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	021b      	lsls	r3, r3, #8
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f023 0320 	bic.w	r3, r3, #32
 800a142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	011b      	lsls	r3, r3, #4
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a22      	ldr	r2, [pc, #136]	; (800a1dc <TIM_OC2_SetConfig+0xe4>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d003      	beq.n	800a160 <TIM_OC2_SetConfig+0x68>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a21      	ldr	r2, [pc, #132]	; (800a1e0 <TIM_OC2_SetConfig+0xe8>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d10d      	bne.n	800a17c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4313      	orrs	r3, r2
 800a172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a17a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a17      	ldr	r2, [pc, #92]	; (800a1dc <TIM_OC2_SetConfig+0xe4>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_OC2_SetConfig+0x94>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a16      	ldr	r2, [pc, #88]	; (800a1e0 <TIM_OC2_SetConfig+0xe8>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d113      	bne.n	800a1b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a19a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	621a      	str	r2, [r3, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	40010000 	.word	0x40010000
 800a1e0:	40010400 	.word	0x40010400

0800a1e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0303 	bic.w	r3, r3, #3
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a22c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <TIM_OC3_SetConfig+0xe0>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d003      	beq.n	800a24a <TIM_OC3_SetConfig+0x66>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a20      	ldr	r2, [pc, #128]	; (800a2c8 <TIM_OC3_SetConfig+0xe4>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d10d      	bne.n	800a266 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <TIM_OC3_SetConfig+0xe0>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d003      	beq.n	800a276 <TIM_OC3_SetConfig+0x92>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <TIM_OC3_SetConfig+0xe4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d113      	bne.n	800a29e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a27c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	011b      	lsls	r3, r3, #4
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4313      	orrs	r3, r2
 800a290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	621a      	str	r2, [r3, #32]
}
 800a2b8:	bf00      	nop
 800a2ba:	371c      	adds	r7, #28
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	40010000 	.word	0x40010000
 800a2c8:	40010400 	.word	0x40010400

0800a2cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	031b      	lsls	r3, r3, #12
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a12      	ldr	r2, [pc, #72]	; (800a370 <TIM_OC4_SetConfig+0xa4>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d003      	beq.n	800a334 <TIM_OC4_SetConfig+0x68>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a11      	ldr	r2, [pc, #68]	; (800a374 <TIM_OC4_SetConfig+0xa8>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d109      	bne.n	800a348 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a33a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	019b      	lsls	r3, r3, #6
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	4313      	orrs	r3, r2
 800a346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	40010000 	.word	0x40010000
 800a374:	40010400 	.word	0x40010400

0800a378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f003 031f 	and.w	r3, r3, #31
 800a38a:	2201      	movs	r2, #1
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a1a      	ldr	r2, [r3, #32]
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	43db      	mvns	r3, r3
 800a39a:	401a      	ands	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6a1a      	ldr	r2, [r3, #32]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	f003 031f 	and.w	r3, r3, #31
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	621a      	str	r2, [r3, #32]
}
 800a3b6:	bf00      	nop
 800a3b8:	371c      	adds	r7, #28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e05a      	b.n	800a492 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a21      	ldr	r2, [pc, #132]	; (800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d022      	beq.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a428:	d01d      	beq.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a1d      	ldr	r2, [pc, #116]	; (800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d018      	beq.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a1b      	ldr	r2, [pc, #108]	; (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d013      	beq.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a1a      	ldr	r2, [pc, #104]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d00e      	beq.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a18      	ldr	r2, [pc, #96]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d009      	beq.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a17      	ldr	r2, [pc, #92]	; (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d004      	beq.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a15      	ldr	r2, [pc, #84]	; (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d10c      	bne.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a46c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	4313      	orrs	r3, r2
 800a476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40010000 	.word	0x40010000
 800a4a4:	40000400 	.word	0x40000400
 800a4a8:	40000800 	.word	0x40000800
 800a4ac:	40000c00 	.word	0x40000c00
 800a4b0:	40010400 	.word	0x40010400
 800a4b4:	40014000 	.word	0x40014000
 800a4b8:	40001800 	.word	0x40001800

0800a4bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e03f      	b.n	800a576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7fa fa9a 	bl	8004a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2224      	movs	r2, #36	; 0x24
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f929 	bl	800a780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	691a      	ldr	r2, [r3, #16]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a53c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	695a      	ldr	r2, [r3, #20]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a54c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68da      	ldr	r2, [r3, #12]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a55c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2220      	movs	r2, #32
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2220      	movs	r2, #32
 800a570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b08a      	sub	sp, #40	; 0x28
 800a582:	af02      	add	r7, sp, #8
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	60b9      	str	r1, [r7, #8]
 800a588:	603b      	str	r3, [r7, #0]
 800a58a:	4613      	mov	r3, r2
 800a58c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a58e:	2300      	movs	r3, #0
 800a590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b20      	cmp	r3, #32
 800a59c:	d17c      	bne.n	800a698 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <HAL_UART_Transmit+0x2c>
 800a5a4:	88fb      	ldrh	r3, [r7, #6]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e075      	b.n	800a69a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d101      	bne.n	800a5bc <HAL_UART_Transmit+0x3e>
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	e06e      	b.n	800a69a <HAL_UART_Transmit+0x11c>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2221      	movs	r2, #33	; 0x21
 800a5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5d2:	f7fb fca1 	bl	8005f18 <HAL_GetTick>
 800a5d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	88fa      	ldrh	r2, [r7, #6]
 800a5dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	88fa      	ldrh	r2, [r7, #6]
 800a5e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ec:	d108      	bne.n	800a600 <HAL_UART_Transmit+0x82>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d104      	bne.n	800a600 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	61bb      	str	r3, [r7, #24]
 800a5fe:	e003      	b.n	800a608 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a610:	e02a      	b.n	800a668 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2200      	movs	r2, #0
 800a61a:	2180      	movs	r1, #128	; 0x80
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 f840 	bl	800a6a2 <UART_WaitOnFlagUntilTimeout>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e036      	b.n	800a69a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	3302      	adds	r3, #2
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	e007      	b.n	800a65a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	781a      	ldrb	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	3301      	adds	r3, #1
 800a658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a65e:	b29b      	uxth	r3, r3
 800a660:	3b01      	subs	r3, #1
 800a662:	b29a      	uxth	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1cf      	bne.n	800a612 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2200      	movs	r2, #0
 800a67a:	2140      	movs	r1, #64	; 0x40
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f810 	bl	800a6a2 <UART_WaitOnFlagUntilTimeout>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e006      	b.n	800a69a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	e000      	b.n	800a69a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a698:	2302      	movs	r3, #2
  }
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3720      	adds	r7, #32
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b090      	sub	sp, #64	; 0x40
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	60f8      	str	r0, [r7, #12]
 800a6aa:	60b9      	str	r1, [r7, #8]
 800a6ac:	603b      	str	r3, [r7, #0]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6b2:	e050      	b.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ba:	d04c      	beq.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d007      	beq.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6c2:	f7fb fc29 	bl	8005f18 <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d241      	bcs.n	800a756 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	330c      	adds	r3, #12
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	330c      	adds	r3, #12
 800a6f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6f2:	637a      	str	r2, [r7, #52]	; 0x34
 800a6f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e5      	bne.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3314      	adds	r3, #20
 800a70c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	613b      	str	r3, [r7, #16]
   return(result);
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f023 0301 	bic.w	r3, r3, #1
 800a71c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3314      	adds	r3, #20
 800a724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a726:	623a      	str	r2, [r7, #32]
 800a728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72a:	69f9      	ldr	r1, [r7, #28]
 800a72c:	6a3a      	ldr	r2, [r7, #32]
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	61bb      	str	r3, [r7, #24]
   return(result);
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e5      	bne.n	800a706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2220      	movs	r2, #32
 800a746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e00f      	b.n	800a776 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4013      	ands	r3, r2
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	bf0c      	ite	eq
 800a766:	2301      	moveq	r3, #1
 800a768:	2300      	movne	r3, #0
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	461a      	mov	r2, r3
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	429a      	cmp	r2, r3
 800a772:	d09f      	beq.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3740      	adds	r7, #64	; 0x40
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a784:	b0c0      	sub	sp, #256	; 0x100
 800a786:	af00      	add	r7, sp, #0
 800a788:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a79c:	68d9      	ldr	r1, [r3, #12]
 800a79e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	ea40 0301 	orr.w	r3, r0, r1
 800a7a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7d8:	f021 010c 	bic.w	r1, r1, #12
 800a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7fa:	6999      	ldr	r1, [r3, #24]
 800a7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	ea40 0301 	orr.w	r3, r0, r1
 800a806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	4b8f      	ldr	r3, [pc, #572]	; (800aa4c <UART_SetConfig+0x2cc>)
 800a810:	429a      	cmp	r2, r3
 800a812:	d005      	beq.n	800a820 <UART_SetConfig+0xa0>
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4b8d      	ldr	r3, [pc, #564]	; (800aa50 <UART_SetConfig+0x2d0>)
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d104      	bne.n	800a82a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a820:	f7fd ff6a 	bl	80086f8 <HAL_RCC_GetPCLK2Freq>
 800a824:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a828:	e003      	b.n	800a832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a82a:	f7fd ff51 	bl	80086d0 <HAL_RCC_GetPCLK1Freq>
 800a82e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a83c:	f040 810c 	bne.w	800aa58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a844:	2200      	movs	r2, #0
 800a846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a84a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a84e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a852:	4622      	mov	r2, r4
 800a854:	462b      	mov	r3, r5
 800a856:	1891      	adds	r1, r2, r2
 800a858:	65b9      	str	r1, [r7, #88]	; 0x58
 800a85a:	415b      	adcs	r3, r3
 800a85c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a85e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a862:	4621      	mov	r1, r4
 800a864:	eb12 0801 	adds.w	r8, r2, r1
 800a868:	4629      	mov	r1, r5
 800a86a:	eb43 0901 	adc.w	r9, r3, r1
 800a86e:	f04f 0200 	mov.w	r2, #0
 800a872:	f04f 0300 	mov.w	r3, #0
 800a876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a87a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a87e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a882:	4690      	mov	r8, r2
 800a884:	4699      	mov	r9, r3
 800a886:	4623      	mov	r3, r4
 800a888:	eb18 0303 	adds.w	r3, r8, r3
 800a88c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a890:	462b      	mov	r3, r5
 800a892:	eb49 0303 	adc.w	r3, r9, r3
 800a896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a8aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	18db      	adds	r3, r3, r3
 800a8b2:	653b      	str	r3, [r7, #80]	; 0x50
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	eb42 0303 	adc.w	r3, r2, r3
 800a8ba:	657b      	str	r3, [r7, #84]	; 0x54
 800a8bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a8c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8c4:	f7f6 f9e0 	bl	8000c88 <__aeabi_uldivmod>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4b61      	ldr	r3, [pc, #388]	; (800aa54 <UART_SetConfig+0x2d4>)
 800a8ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a8d2:	095b      	lsrs	r3, r3, #5
 800a8d4:	011c      	lsls	r4, r3, #4
 800a8d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a8e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a8e8:	4642      	mov	r2, r8
 800a8ea:	464b      	mov	r3, r9
 800a8ec:	1891      	adds	r1, r2, r2
 800a8ee:	64b9      	str	r1, [r7, #72]	; 0x48
 800a8f0:	415b      	adcs	r3, r3
 800a8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	eb12 0a01 	adds.w	sl, r2, r1
 800a8fe:	4649      	mov	r1, r9
 800a900:	eb43 0b01 	adc.w	fp, r3, r1
 800a904:	f04f 0200 	mov.w	r2, #0
 800a908:	f04f 0300 	mov.w	r3, #0
 800a90c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a918:	4692      	mov	sl, r2
 800a91a:	469b      	mov	fp, r3
 800a91c:	4643      	mov	r3, r8
 800a91e:	eb1a 0303 	adds.w	r3, sl, r3
 800a922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a926:	464b      	mov	r3, r9
 800a928:	eb4b 0303 	adc.w	r3, fp, r3
 800a92c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a93c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a944:	460b      	mov	r3, r1
 800a946:	18db      	adds	r3, r3, r3
 800a948:	643b      	str	r3, [r7, #64]	; 0x40
 800a94a:	4613      	mov	r3, r2
 800a94c:	eb42 0303 	adc.w	r3, r2, r3
 800a950:	647b      	str	r3, [r7, #68]	; 0x44
 800a952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a95a:	f7f6 f995 	bl	8000c88 <__aeabi_uldivmod>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	4611      	mov	r1, r2
 800a964:	4b3b      	ldr	r3, [pc, #236]	; (800aa54 <UART_SetConfig+0x2d4>)
 800a966:	fba3 2301 	umull	r2, r3, r3, r1
 800a96a:	095b      	lsrs	r3, r3, #5
 800a96c:	2264      	movs	r2, #100	; 0x64
 800a96e:	fb02 f303 	mul.w	r3, r2, r3
 800a972:	1acb      	subs	r3, r1, r3
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a97a:	4b36      	ldr	r3, [pc, #216]	; (800aa54 <UART_SetConfig+0x2d4>)
 800a97c:	fba3 2302 	umull	r2, r3, r3, r2
 800a980:	095b      	lsrs	r3, r3, #5
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a988:	441c      	add	r4, r3
 800a98a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a98e:	2200      	movs	r2, #0
 800a990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a994:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a99c:	4642      	mov	r2, r8
 800a99e:	464b      	mov	r3, r9
 800a9a0:	1891      	adds	r1, r2, r2
 800a9a2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a9a4:	415b      	adcs	r3, r3
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a9ac:	4641      	mov	r1, r8
 800a9ae:	1851      	adds	r1, r2, r1
 800a9b0:	6339      	str	r1, [r7, #48]	; 0x30
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	414b      	adcs	r3, r1
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9b8:	f04f 0200 	mov.w	r2, #0
 800a9bc:	f04f 0300 	mov.w	r3, #0
 800a9c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a9c4:	4659      	mov	r1, fp
 800a9c6:	00cb      	lsls	r3, r1, #3
 800a9c8:	4651      	mov	r1, sl
 800a9ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9ce:	4651      	mov	r1, sl
 800a9d0:	00ca      	lsls	r2, r1, #3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4642      	mov	r2, r8
 800a9da:	189b      	adds	r3, r3, r2
 800a9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9e0:	464b      	mov	r3, r9
 800a9e2:	460a      	mov	r2, r1
 800a9e4:	eb42 0303 	adc.w	r3, r2, r3
 800a9e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a9fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa00:	460b      	mov	r3, r1
 800aa02:	18db      	adds	r3, r3, r3
 800aa04:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa06:	4613      	mov	r3, r2
 800aa08:	eb42 0303 	adc.w	r3, r2, r3
 800aa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa16:	f7f6 f937 	bl	8000c88 <__aeabi_uldivmod>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	; (800aa54 <UART_SetConfig+0x2d4>)
 800aa20:	fba3 1302 	umull	r1, r3, r3, r2
 800aa24:	095b      	lsrs	r3, r3, #5
 800aa26:	2164      	movs	r1, #100	; 0x64
 800aa28:	fb01 f303 	mul.w	r3, r1, r3
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	3332      	adds	r3, #50	; 0x32
 800aa32:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <UART_SetConfig+0x2d4>)
 800aa34:	fba2 2303 	umull	r2, r3, r2, r3
 800aa38:	095b      	lsrs	r3, r3, #5
 800aa3a:	f003 0207 	and.w	r2, r3, #7
 800aa3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4422      	add	r2, r4
 800aa46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa48:	e105      	b.n	800ac56 <UART_SetConfig+0x4d6>
 800aa4a:	bf00      	nop
 800aa4c:	40011000 	.word	0x40011000
 800aa50:	40011400 	.word	0x40011400
 800aa54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa6a:	4642      	mov	r2, r8
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	1891      	adds	r1, r2, r2
 800aa70:	6239      	str	r1, [r7, #32]
 800aa72:	415b      	adcs	r3, r3
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
 800aa76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	1854      	adds	r4, r2, r1
 800aa7e:	4649      	mov	r1, r9
 800aa80:	eb43 0501 	adc.w	r5, r3, r1
 800aa84:	f04f 0200 	mov.w	r2, #0
 800aa88:	f04f 0300 	mov.w	r3, #0
 800aa8c:	00eb      	lsls	r3, r5, #3
 800aa8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa92:	00e2      	lsls	r2, r4, #3
 800aa94:	4614      	mov	r4, r2
 800aa96:	461d      	mov	r5, r3
 800aa98:	4643      	mov	r3, r8
 800aa9a:	18e3      	adds	r3, r4, r3
 800aa9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	eb45 0303 	adc.w	r3, r5, r3
 800aaa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aaaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aaba:	f04f 0200 	mov.w	r2, #0
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aac6:	4629      	mov	r1, r5
 800aac8:	008b      	lsls	r3, r1, #2
 800aaca:	4621      	mov	r1, r4
 800aacc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aad0:	4621      	mov	r1, r4
 800aad2:	008a      	lsls	r2, r1, #2
 800aad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aad8:	f7f6 f8d6 	bl	8000c88 <__aeabi_uldivmod>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4b60      	ldr	r3, [pc, #384]	; (800ac64 <UART_SetConfig+0x4e4>)
 800aae2:	fba3 2302 	umull	r2, r3, r3, r2
 800aae6:	095b      	lsrs	r3, r3, #5
 800aae8:	011c      	lsls	r4, r3, #4
 800aaea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aaf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aaf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aafc:	4642      	mov	r2, r8
 800aafe:	464b      	mov	r3, r9
 800ab00:	1891      	adds	r1, r2, r2
 800ab02:	61b9      	str	r1, [r7, #24]
 800ab04:	415b      	adcs	r3, r3
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab0c:	4641      	mov	r1, r8
 800ab0e:	1851      	adds	r1, r2, r1
 800ab10:	6139      	str	r1, [r7, #16]
 800ab12:	4649      	mov	r1, r9
 800ab14:	414b      	adcs	r3, r1
 800ab16:	617b      	str	r3, [r7, #20]
 800ab18:	f04f 0200 	mov.w	r2, #0
 800ab1c:	f04f 0300 	mov.w	r3, #0
 800ab20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab24:	4659      	mov	r1, fp
 800ab26:	00cb      	lsls	r3, r1, #3
 800ab28:	4651      	mov	r1, sl
 800ab2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab2e:	4651      	mov	r1, sl
 800ab30:	00ca      	lsls	r2, r1, #3
 800ab32:	4610      	mov	r0, r2
 800ab34:	4619      	mov	r1, r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	4642      	mov	r2, r8
 800ab3a:	189b      	adds	r3, r3, r2
 800ab3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab40:	464b      	mov	r3, r9
 800ab42:	460a      	mov	r2, r1
 800ab44:	eb42 0303 	adc.w	r3, r2, r3
 800ab48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab56:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab58:	f04f 0200 	mov.w	r2, #0
 800ab5c:	f04f 0300 	mov.w	r3, #0
 800ab60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab64:	4649      	mov	r1, r9
 800ab66:	008b      	lsls	r3, r1, #2
 800ab68:	4641      	mov	r1, r8
 800ab6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab6e:	4641      	mov	r1, r8
 800ab70:	008a      	lsls	r2, r1, #2
 800ab72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab76:	f7f6 f887 	bl	8000c88 <__aeabi_uldivmod>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4b39      	ldr	r3, [pc, #228]	; (800ac64 <UART_SetConfig+0x4e4>)
 800ab80:	fba3 1302 	umull	r1, r3, r3, r2
 800ab84:	095b      	lsrs	r3, r3, #5
 800ab86:	2164      	movs	r1, #100	; 0x64
 800ab88:	fb01 f303 	mul.w	r3, r1, r3
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	011b      	lsls	r3, r3, #4
 800ab90:	3332      	adds	r3, #50	; 0x32
 800ab92:	4a34      	ldr	r2, [pc, #208]	; (800ac64 <UART_SetConfig+0x4e4>)
 800ab94:	fba2 2303 	umull	r2, r3, r2, r3
 800ab98:	095b      	lsrs	r3, r3, #5
 800ab9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab9e:	441c      	add	r4, r3
 800aba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aba4:	2200      	movs	r2, #0
 800aba6:	673b      	str	r3, [r7, #112]	; 0x70
 800aba8:	677a      	str	r2, [r7, #116]	; 0x74
 800abaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800abae:	4642      	mov	r2, r8
 800abb0:	464b      	mov	r3, r9
 800abb2:	1891      	adds	r1, r2, r2
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	415b      	adcs	r3, r3
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abbe:	4641      	mov	r1, r8
 800abc0:	1851      	adds	r1, r2, r1
 800abc2:	6039      	str	r1, [r7, #0]
 800abc4:	4649      	mov	r1, r9
 800abc6:	414b      	adcs	r3, r1
 800abc8:	607b      	str	r3, [r7, #4]
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	f04f 0300 	mov.w	r3, #0
 800abd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abd6:	4659      	mov	r1, fp
 800abd8:	00cb      	lsls	r3, r1, #3
 800abda:	4651      	mov	r1, sl
 800abdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abe0:	4651      	mov	r1, sl
 800abe2:	00ca      	lsls	r2, r1, #3
 800abe4:	4610      	mov	r0, r2
 800abe6:	4619      	mov	r1, r3
 800abe8:	4603      	mov	r3, r0
 800abea:	4642      	mov	r2, r8
 800abec:	189b      	adds	r3, r3, r2
 800abee:	66bb      	str	r3, [r7, #104]	; 0x68
 800abf0:	464b      	mov	r3, r9
 800abf2:	460a      	mov	r2, r1
 800abf4:	eb42 0303 	adc.w	r3, r2, r3
 800abf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	663b      	str	r3, [r7, #96]	; 0x60
 800ac04:	667a      	str	r2, [r7, #100]	; 0x64
 800ac06:	f04f 0200 	mov.w	r2, #0
 800ac0a:	f04f 0300 	mov.w	r3, #0
 800ac0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac12:	4649      	mov	r1, r9
 800ac14:	008b      	lsls	r3, r1, #2
 800ac16:	4641      	mov	r1, r8
 800ac18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	008a      	lsls	r2, r1, #2
 800ac20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac24:	f7f6 f830 	bl	8000c88 <__aeabi_uldivmod>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <UART_SetConfig+0x4e4>)
 800ac2e:	fba3 1302 	umull	r1, r3, r3, r2
 800ac32:	095b      	lsrs	r3, r3, #5
 800ac34:	2164      	movs	r1, #100	; 0x64
 800ac36:	fb01 f303 	mul.w	r3, r1, r3
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	011b      	lsls	r3, r3, #4
 800ac3e:	3332      	adds	r3, #50	; 0x32
 800ac40:	4a08      	ldr	r2, [pc, #32]	; (800ac64 <UART_SetConfig+0x4e4>)
 800ac42:	fba2 2303 	umull	r2, r3, r2, r3
 800ac46:	095b      	lsrs	r3, r3, #5
 800ac48:	f003 020f 	and.w	r2, r3, #15
 800ac4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4422      	add	r2, r4
 800ac54:	609a      	str	r2, [r3, #8]
}
 800ac56:	bf00      	nop
 800ac58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac62:	bf00      	nop
 800ac64:	51eb851f 	.word	0x51eb851f

0800ac68 <__errno>:
 800ac68:	4b01      	ldr	r3, [pc, #4]	; (800ac70 <__errno+0x8>)
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	2000000c 	.word	0x2000000c

0800ac74 <__libc_init_array>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	4d0d      	ldr	r5, [pc, #52]	; (800acac <__libc_init_array+0x38>)
 800ac78:	4c0d      	ldr	r4, [pc, #52]	; (800acb0 <__libc_init_array+0x3c>)
 800ac7a:	1b64      	subs	r4, r4, r5
 800ac7c:	10a4      	asrs	r4, r4, #2
 800ac7e:	2600      	movs	r6, #0
 800ac80:	42a6      	cmp	r6, r4
 800ac82:	d109      	bne.n	800ac98 <__libc_init_array+0x24>
 800ac84:	4d0b      	ldr	r5, [pc, #44]	; (800acb4 <__libc_init_array+0x40>)
 800ac86:	4c0c      	ldr	r4, [pc, #48]	; (800acb8 <__libc_init_array+0x44>)
 800ac88:	f005 fc64 	bl	8010554 <_init>
 800ac8c:	1b64      	subs	r4, r4, r5
 800ac8e:	10a4      	asrs	r4, r4, #2
 800ac90:	2600      	movs	r6, #0
 800ac92:	42a6      	cmp	r6, r4
 800ac94:	d105      	bne.n	800aca2 <__libc_init_array+0x2e>
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9c:	4798      	blx	r3
 800ac9e:	3601      	adds	r6, #1
 800aca0:	e7ee      	b.n	800ac80 <__libc_init_array+0xc>
 800aca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca6:	4798      	blx	r3
 800aca8:	3601      	adds	r6, #1
 800acaa:	e7f2      	b.n	800ac92 <__libc_init_array+0x1e>
 800acac:	08010df8 	.word	0x08010df8
 800acb0:	08010df8 	.word	0x08010df8
 800acb4:	08010df8 	.word	0x08010df8
 800acb8:	08010dfc 	.word	0x08010dfc

0800acbc <memcpy>:
 800acbc:	440a      	add	r2, r1
 800acbe:	4291      	cmp	r1, r2
 800acc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800acc4:	d100      	bne.n	800acc8 <memcpy+0xc>
 800acc6:	4770      	bx	lr
 800acc8:	b510      	push	{r4, lr}
 800acca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acd2:	4291      	cmp	r1, r2
 800acd4:	d1f9      	bne.n	800acca <memcpy+0xe>
 800acd6:	bd10      	pop	{r4, pc}

0800acd8 <memset>:
 800acd8:	4402      	add	r2, r0
 800acda:	4603      	mov	r3, r0
 800acdc:	4293      	cmp	r3, r2
 800acde:	d100      	bne.n	800ace2 <memset+0xa>
 800ace0:	4770      	bx	lr
 800ace2:	f803 1b01 	strb.w	r1, [r3], #1
 800ace6:	e7f9      	b.n	800acdc <memset+0x4>

0800ace8 <__cvt>:
 800ace8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	ec55 4b10 	vmov	r4, r5, d0
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	460e      	mov	r6, r1
 800acf4:	4619      	mov	r1, r3
 800acf6:	462b      	mov	r3, r5
 800acf8:	bfbb      	ittet	lt
 800acfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800acfe:	461d      	movlt	r5, r3
 800ad00:	2300      	movge	r3, #0
 800ad02:	232d      	movlt	r3, #45	; 0x2d
 800ad04:	700b      	strb	r3, [r1, #0]
 800ad06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad0c:	4691      	mov	r9, r2
 800ad0e:	f023 0820 	bic.w	r8, r3, #32
 800ad12:	bfbc      	itt	lt
 800ad14:	4622      	movlt	r2, r4
 800ad16:	4614      	movlt	r4, r2
 800ad18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad1c:	d005      	beq.n	800ad2a <__cvt+0x42>
 800ad1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad22:	d100      	bne.n	800ad26 <__cvt+0x3e>
 800ad24:	3601      	adds	r6, #1
 800ad26:	2102      	movs	r1, #2
 800ad28:	e000      	b.n	800ad2c <__cvt+0x44>
 800ad2a:	2103      	movs	r1, #3
 800ad2c:	ab03      	add	r3, sp, #12
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	ab02      	add	r3, sp, #8
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	ec45 4b10 	vmov	d0, r4, r5
 800ad38:	4653      	mov	r3, sl
 800ad3a:	4632      	mov	r2, r6
 800ad3c:	f001 fefc 	bl	800cb38 <_dtoa_r>
 800ad40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad44:	4607      	mov	r7, r0
 800ad46:	d102      	bne.n	800ad4e <__cvt+0x66>
 800ad48:	f019 0f01 	tst.w	r9, #1
 800ad4c:	d022      	beq.n	800ad94 <__cvt+0xac>
 800ad4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad52:	eb07 0906 	add.w	r9, r7, r6
 800ad56:	d110      	bne.n	800ad7a <__cvt+0x92>
 800ad58:	783b      	ldrb	r3, [r7, #0]
 800ad5a:	2b30      	cmp	r3, #48	; 0x30
 800ad5c:	d10a      	bne.n	800ad74 <__cvt+0x8c>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2300      	movs	r3, #0
 800ad62:	4620      	mov	r0, r4
 800ad64:	4629      	mov	r1, r5
 800ad66:	f7f5 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad6a:	b918      	cbnz	r0, 800ad74 <__cvt+0x8c>
 800ad6c:	f1c6 0601 	rsb	r6, r6, #1
 800ad70:	f8ca 6000 	str.w	r6, [sl]
 800ad74:	f8da 3000 	ldr.w	r3, [sl]
 800ad78:	4499      	add	r9, r3
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad86:	b108      	cbz	r0, 800ad8c <__cvt+0xa4>
 800ad88:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad8c:	2230      	movs	r2, #48	; 0x30
 800ad8e:	9b03      	ldr	r3, [sp, #12]
 800ad90:	454b      	cmp	r3, r9
 800ad92:	d307      	bcc.n	800ada4 <__cvt+0xbc>
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad98:	1bdb      	subs	r3, r3, r7
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	b004      	add	sp, #16
 800ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada4:	1c59      	adds	r1, r3, #1
 800ada6:	9103      	str	r1, [sp, #12]
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	e7f0      	b.n	800ad8e <__cvt+0xa6>

0800adac <__exponent>:
 800adac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adae:	4603      	mov	r3, r0
 800adb0:	2900      	cmp	r1, #0
 800adb2:	bfb8      	it	lt
 800adb4:	4249      	neglt	r1, r1
 800adb6:	f803 2b02 	strb.w	r2, [r3], #2
 800adba:	bfb4      	ite	lt
 800adbc:	222d      	movlt	r2, #45	; 0x2d
 800adbe:	222b      	movge	r2, #43	; 0x2b
 800adc0:	2909      	cmp	r1, #9
 800adc2:	7042      	strb	r2, [r0, #1]
 800adc4:	dd2a      	ble.n	800ae1c <__exponent+0x70>
 800adc6:	f10d 0407 	add.w	r4, sp, #7
 800adca:	46a4      	mov	ip, r4
 800adcc:	270a      	movs	r7, #10
 800adce:	46a6      	mov	lr, r4
 800add0:	460a      	mov	r2, r1
 800add2:	fb91 f6f7 	sdiv	r6, r1, r7
 800add6:	fb07 1516 	mls	r5, r7, r6, r1
 800adda:	3530      	adds	r5, #48	; 0x30
 800addc:	2a63      	cmp	r2, #99	; 0x63
 800adde:	f104 34ff 	add.w	r4, r4, #4294967295
 800ade2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ade6:	4631      	mov	r1, r6
 800ade8:	dcf1      	bgt.n	800adce <__exponent+0x22>
 800adea:	3130      	adds	r1, #48	; 0x30
 800adec:	f1ae 0502 	sub.w	r5, lr, #2
 800adf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800adf4:	1c44      	adds	r4, r0, #1
 800adf6:	4629      	mov	r1, r5
 800adf8:	4561      	cmp	r1, ip
 800adfa:	d30a      	bcc.n	800ae12 <__exponent+0x66>
 800adfc:	f10d 0209 	add.w	r2, sp, #9
 800ae00:	eba2 020e 	sub.w	r2, r2, lr
 800ae04:	4565      	cmp	r5, ip
 800ae06:	bf88      	it	hi
 800ae08:	2200      	movhi	r2, #0
 800ae0a:	4413      	add	r3, r2
 800ae0c:	1a18      	subs	r0, r3, r0
 800ae0e:	b003      	add	sp, #12
 800ae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae16:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae1a:	e7ed      	b.n	800adf8 <__exponent+0x4c>
 800ae1c:	2330      	movs	r3, #48	; 0x30
 800ae1e:	3130      	adds	r1, #48	; 0x30
 800ae20:	7083      	strb	r3, [r0, #2]
 800ae22:	70c1      	strb	r1, [r0, #3]
 800ae24:	1d03      	adds	r3, r0, #4
 800ae26:	e7f1      	b.n	800ae0c <__exponent+0x60>

0800ae28 <_printf_float>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ed2d 8b02 	vpush	{d8}
 800ae30:	b08d      	sub	sp, #52	; 0x34
 800ae32:	460c      	mov	r4, r1
 800ae34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae38:	4616      	mov	r6, r2
 800ae3a:	461f      	mov	r7, r3
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	f003 f98f 	bl	800e160 <_localeconv_r>
 800ae42:	f8d0 a000 	ldr.w	sl, [r0]
 800ae46:	4650      	mov	r0, sl
 800ae48:	f7f5 f9c2 	bl	80001d0 <strlen>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	9305      	str	r3, [sp, #20]
 800ae54:	f8d8 3000 	ldr.w	r3, [r8]
 800ae58:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae5c:	3307      	adds	r3, #7
 800ae5e:	f023 0307 	bic.w	r3, r3, #7
 800ae62:	f103 0208 	add.w	r2, r3, #8
 800ae66:	f8c8 2000 	str.w	r2, [r8]
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae7a:	9307      	str	r3, [sp, #28]
 800ae7c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae80:	ee08 0a10 	vmov	s16, r0
 800ae84:	4b9f      	ldr	r3, [pc, #636]	; (800b104 <_printf_float+0x2dc>)
 800ae86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8e:	f7f5 fe4d 	bl	8000b2c <__aeabi_dcmpun>
 800ae92:	bb88      	cbnz	r0, 800aef8 <_printf_float+0xd0>
 800ae94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae98:	4b9a      	ldr	r3, [pc, #616]	; (800b104 <_printf_float+0x2dc>)
 800ae9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9e:	f7f5 fe27 	bl	8000af0 <__aeabi_dcmple>
 800aea2:	bb48      	cbnz	r0, 800aef8 <_printf_float+0xd0>
 800aea4:	2200      	movs	r2, #0
 800aea6:	2300      	movs	r3, #0
 800aea8:	4640      	mov	r0, r8
 800aeaa:	4649      	mov	r1, r9
 800aeac:	f7f5 fe16 	bl	8000adc <__aeabi_dcmplt>
 800aeb0:	b110      	cbz	r0, 800aeb8 <_printf_float+0x90>
 800aeb2:	232d      	movs	r3, #45	; 0x2d
 800aeb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeb8:	4b93      	ldr	r3, [pc, #588]	; (800b108 <_printf_float+0x2e0>)
 800aeba:	4894      	ldr	r0, [pc, #592]	; (800b10c <_printf_float+0x2e4>)
 800aebc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aec0:	bf94      	ite	ls
 800aec2:	4698      	movls	r8, r3
 800aec4:	4680      	movhi	r8, r0
 800aec6:	2303      	movs	r3, #3
 800aec8:	6123      	str	r3, [r4, #16]
 800aeca:	9b05      	ldr	r3, [sp, #20]
 800aecc:	f023 0204 	bic.w	r2, r3, #4
 800aed0:	6022      	str	r2, [r4, #0]
 800aed2:	f04f 0900 	mov.w	r9, #0
 800aed6:	9700      	str	r7, [sp, #0]
 800aed8:	4633      	mov	r3, r6
 800aeda:	aa0b      	add	r2, sp, #44	; 0x2c
 800aedc:	4621      	mov	r1, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	f000 f9d8 	bl	800b294 <_printf_common>
 800aee4:	3001      	adds	r0, #1
 800aee6:	f040 8090 	bne.w	800b00a <_printf_float+0x1e2>
 800aeea:	f04f 30ff 	mov.w	r0, #4294967295
 800aeee:	b00d      	add	sp, #52	; 0x34
 800aef0:	ecbd 8b02 	vpop	{d8}
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	4642      	mov	r2, r8
 800aefa:	464b      	mov	r3, r9
 800aefc:	4640      	mov	r0, r8
 800aefe:	4649      	mov	r1, r9
 800af00:	f7f5 fe14 	bl	8000b2c <__aeabi_dcmpun>
 800af04:	b140      	cbz	r0, 800af18 <_printf_float+0xf0>
 800af06:	464b      	mov	r3, r9
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bfbc      	itt	lt
 800af0c:	232d      	movlt	r3, #45	; 0x2d
 800af0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af12:	487f      	ldr	r0, [pc, #508]	; (800b110 <_printf_float+0x2e8>)
 800af14:	4b7f      	ldr	r3, [pc, #508]	; (800b114 <_printf_float+0x2ec>)
 800af16:	e7d1      	b.n	800aebc <_printf_float+0x94>
 800af18:	6863      	ldr	r3, [r4, #4]
 800af1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af1e:	9206      	str	r2, [sp, #24]
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	d13f      	bne.n	800afa4 <_printf_float+0x17c>
 800af24:	2306      	movs	r3, #6
 800af26:	6063      	str	r3, [r4, #4]
 800af28:	9b05      	ldr	r3, [sp, #20]
 800af2a:	6861      	ldr	r1, [r4, #4]
 800af2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af30:	2300      	movs	r3, #0
 800af32:	9303      	str	r3, [sp, #12]
 800af34:	ab0a      	add	r3, sp, #40	; 0x28
 800af36:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af3a:	ab09      	add	r3, sp, #36	; 0x24
 800af3c:	ec49 8b10 	vmov	d0, r8, r9
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	6022      	str	r2, [r4, #0]
 800af44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af48:	4628      	mov	r0, r5
 800af4a:	f7ff fecd 	bl	800ace8 <__cvt>
 800af4e:	9b06      	ldr	r3, [sp, #24]
 800af50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af52:	2b47      	cmp	r3, #71	; 0x47
 800af54:	4680      	mov	r8, r0
 800af56:	d108      	bne.n	800af6a <_printf_float+0x142>
 800af58:	1cc8      	adds	r0, r1, #3
 800af5a:	db02      	blt.n	800af62 <_printf_float+0x13a>
 800af5c:	6863      	ldr	r3, [r4, #4]
 800af5e:	4299      	cmp	r1, r3
 800af60:	dd41      	ble.n	800afe6 <_printf_float+0x1be>
 800af62:	f1ab 0b02 	sub.w	fp, fp, #2
 800af66:	fa5f fb8b 	uxtb.w	fp, fp
 800af6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af6e:	d820      	bhi.n	800afb2 <_printf_float+0x18a>
 800af70:	3901      	subs	r1, #1
 800af72:	465a      	mov	r2, fp
 800af74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af78:	9109      	str	r1, [sp, #36]	; 0x24
 800af7a:	f7ff ff17 	bl	800adac <__exponent>
 800af7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af80:	1813      	adds	r3, r2, r0
 800af82:	2a01      	cmp	r2, #1
 800af84:	4681      	mov	r9, r0
 800af86:	6123      	str	r3, [r4, #16]
 800af88:	dc02      	bgt.n	800af90 <_printf_float+0x168>
 800af8a:	6822      	ldr	r2, [r4, #0]
 800af8c:	07d2      	lsls	r2, r2, #31
 800af8e:	d501      	bpl.n	800af94 <_printf_float+0x16c>
 800af90:	3301      	adds	r3, #1
 800af92:	6123      	str	r3, [r4, #16]
 800af94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d09c      	beq.n	800aed6 <_printf_float+0xae>
 800af9c:	232d      	movs	r3, #45	; 0x2d
 800af9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afa2:	e798      	b.n	800aed6 <_printf_float+0xae>
 800afa4:	9a06      	ldr	r2, [sp, #24]
 800afa6:	2a47      	cmp	r2, #71	; 0x47
 800afa8:	d1be      	bne.n	800af28 <_printf_float+0x100>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1bc      	bne.n	800af28 <_printf_float+0x100>
 800afae:	2301      	movs	r3, #1
 800afb0:	e7b9      	b.n	800af26 <_printf_float+0xfe>
 800afb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800afb6:	d118      	bne.n	800afea <_printf_float+0x1c2>
 800afb8:	2900      	cmp	r1, #0
 800afba:	6863      	ldr	r3, [r4, #4]
 800afbc:	dd0b      	ble.n	800afd6 <_printf_float+0x1ae>
 800afbe:	6121      	str	r1, [r4, #16]
 800afc0:	b913      	cbnz	r3, 800afc8 <_printf_float+0x1a0>
 800afc2:	6822      	ldr	r2, [r4, #0]
 800afc4:	07d0      	lsls	r0, r2, #31
 800afc6:	d502      	bpl.n	800afce <_printf_float+0x1a6>
 800afc8:	3301      	adds	r3, #1
 800afca:	440b      	add	r3, r1
 800afcc:	6123      	str	r3, [r4, #16]
 800afce:	65a1      	str	r1, [r4, #88]	; 0x58
 800afd0:	f04f 0900 	mov.w	r9, #0
 800afd4:	e7de      	b.n	800af94 <_printf_float+0x16c>
 800afd6:	b913      	cbnz	r3, 800afde <_printf_float+0x1b6>
 800afd8:	6822      	ldr	r2, [r4, #0]
 800afda:	07d2      	lsls	r2, r2, #31
 800afdc:	d501      	bpl.n	800afe2 <_printf_float+0x1ba>
 800afde:	3302      	adds	r3, #2
 800afe0:	e7f4      	b.n	800afcc <_printf_float+0x1a4>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e7f2      	b.n	800afcc <_printf_float+0x1a4>
 800afe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800afea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afec:	4299      	cmp	r1, r3
 800afee:	db05      	blt.n	800affc <_printf_float+0x1d4>
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	6121      	str	r1, [r4, #16]
 800aff4:	07d8      	lsls	r0, r3, #31
 800aff6:	d5ea      	bpl.n	800afce <_printf_float+0x1a6>
 800aff8:	1c4b      	adds	r3, r1, #1
 800affa:	e7e7      	b.n	800afcc <_printf_float+0x1a4>
 800affc:	2900      	cmp	r1, #0
 800affe:	bfd4      	ite	le
 800b000:	f1c1 0202 	rsble	r2, r1, #2
 800b004:	2201      	movgt	r2, #1
 800b006:	4413      	add	r3, r2
 800b008:	e7e0      	b.n	800afcc <_printf_float+0x1a4>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	055a      	lsls	r2, r3, #21
 800b00e:	d407      	bmi.n	800b020 <_printf_float+0x1f8>
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	4642      	mov	r2, r8
 800b014:	4631      	mov	r1, r6
 800b016:	4628      	mov	r0, r5
 800b018:	47b8      	blx	r7
 800b01a:	3001      	adds	r0, #1
 800b01c:	d12c      	bne.n	800b078 <_printf_float+0x250>
 800b01e:	e764      	b.n	800aeea <_printf_float+0xc2>
 800b020:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b024:	f240 80e0 	bls.w	800b1e8 <_printf_float+0x3c0>
 800b028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b02c:	2200      	movs	r2, #0
 800b02e:	2300      	movs	r3, #0
 800b030:	f7f5 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b034:	2800      	cmp	r0, #0
 800b036:	d034      	beq.n	800b0a2 <_printf_float+0x27a>
 800b038:	4a37      	ldr	r2, [pc, #220]	; (800b118 <_printf_float+0x2f0>)
 800b03a:	2301      	movs	r3, #1
 800b03c:	4631      	mov	r1, r6
 800b03e:	4628      	mov	r0, r5
 800b040:	47b8      	blx	r7
 800b042:	3001      	adds	r0, #1
 800b044:	f43f af51 	beq.w	800aeea <_printf_float+0xc2>
 800b048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b04c:	429a      	cmp	r2, r3
 800b04e:	db02      	blt.n	800b056 <_printf_float+0x22e>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	07d8      	lsls	r0, r3, #31
 800b054:	d510      	bpl.n	800b078 <_printf_float+0x250>
 800b056:	ee18 3a10 	vmov	r3, s16
 800b05a:	4652      	mov	r2, sl
 800b05c:	4631      	mov	r1, r6
 800b05e:	4628      	mov	r0, r5
 800b060:	47b8      	blx	r7
 800b062:	3001      	adds	r0, #1
 800b064:	f43f af41 	beq.w	800aeea <_printf_float+0xc2>
 800b068:	f04f 0800 	mov.w	r8, #0
 800b06c:	f104 091a 	add.w	r9, r4, #26
 800b070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b072:	3b01      	subs	r3, #1
 800b074:	4543      	cmp	r3, r8
 800b076:	dc09      	bgt.n	800b08c <_printf_float+0x264>
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	079b      	lsls	r3, r3, #30
 800b07c:	f100 8105 	bmi.w	800b28a <_printf_float+0x462>
 800b080:	68e0      	ldr	r0, [r4, #12]
 800b082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b084:	4298      	cmp	r0, r3
 800b086:	bfb8      	it	lt
 800b088:	4618      	movlt	r0, r3
 800b08a:	e730      	b.n	800aeee <_printf_float+0xc6>
 800b08c:	2301      	movs	r3, #1
 800b08e:	464a      	mov	r2, r9
 800b090:	4631      	mov	r1, r6
 800b092:	4628      	mov	r0, r5
 800b094:	47b8      	blx	r7
 800b096:	3001      	adds	r0, #1
 800b098:	f43f af27 	beq.w	800aeea <_printf_float+0xc2>
 800b09c:	f108 0801 	add.w	r8, r8, #1
 800b0a0:	e7e6      	b.n	800b070 <_printf_float+0x248>
 800b0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dc39      	bgt.n	800b11c <_printf_float+0x2f4>
 800b0a8:	4a1b      	ldr	r2, [pc, #108]	; (800b118 <_printf_float+0x2f0>)
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	f43f af19 	beq.w	800aeea <_printf_float+0xc2>
 800b0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	d102      	bne.n	800b0c6 <_printf_float+0x29e>
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	07d9      	lsls	r1, r3, #31
 800b0c4:	d5d8      	bpl.n	800b078 <_printf_float+0x250>
 800b0c6:	ee18 3a10 	vmov	r3, s16
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	47b8      	blx	r7
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	f43f af09 	beq.w	800aeea <_printf_float+0xc2>
 800b0d8:	f04f 0900 	mov.w	r9, #0
 800b0dc:	f104 0a1a 	add.w	sl, r4, #26
 800b0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e2:	425b      	negs	r3, r3
 800b0e4:	454b      	cmp	r3, r9
 800b0e6:	dc01      	bgt.n	800b0ec <_printf_float+0x2c4>
 800b0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ea:	e792      	b.n	800b012 <_printf_float+0x1ea>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	4652      	mov	r2, sl
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	47b8      	blx	r7
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	f43f aef7 	beq.w	800aeea <_printf_float+0xc2>
 800b0fc:	f109 0901 	add.w	r9, r9, #1
 800b100:	e7ee      	b.n	800b0e0 <_printf_float+0x2b8>
 800b102:	bf00      	nop
 800b104:	7fefffff 	.word	0x7fefffff
 800b108:	08010914 	.word	0x08010914
 800b10c:	08010918 	.word	0x08010918
 800b110:	08010920 	.word	0x08010920
 800b114:	0801091c 	.word	0x0801091c
 800b118:	08010924 	.word	0x08010924
 800b11c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b11e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b120:	429a      	cmp	r2, r3
 800b122:	bfa8      	it	ge
 800b124:	461a      	movge	r2, r3
 800b126:	2a00      	cmp	r2, #0
 800b128:	4691      	mov	r9, r2
 800b12a:	dc37      	bgt.n	800b19c <_printf_float+0x374>
 800b12c:	f04f 0b00 	mov.w	fp, #0
 800b130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b134:	f104 021a 	add.w	r2, r4, #26
 800b138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	eba3 0309 	sub.w	r3, r3, r9
 800b140:	455b      	cmp	r3, fp
 800b142:	dc33      	bgt.n	800b1ac <_printf_float+0x384>
 800b144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b148:	429a      	cmp	r2, r3
 800b14a:	db3b      	blt.n	800b1c4 <_printf_float+0x39c>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	07da      	lsls	r2, r3, #31
 800b150:	d438      	bmi.n	800b1c4 <_printf_float+0x39c>
 800b152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b154:	9a05      	ldr	r2, [sp, #20]
 800b156:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b158:	1a9a      	subs	r2, r3, r2
 800b15a:	eba3 0901 	sub.w	r9, r3, r1
 800b15e:	4591      	cmp	r9, r2
 800b160:	bfa8      	it	ge
 800b162:	4691      	movge	r9, r2
 800b164:	f1b9 0f00 	cmp.w	r9, #0
 800b168:	dc35      	bgt.n	800b1d6 <_printf_float+0x3ae>
 800b16a:	f04f 0800 	mov.w	r8, #0
 800b16e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b172:	f104 0a1a 	add.w	sl, r4, #26
 800b176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b17a:	1a9b      	subs	r3, r3, r2
 800b17c:	eba3 0309 	sub.w	r3, r3, r9
 800b180:	4543      	cmp	r3, r8
 800b182:	f77f af79 	ble.w	800b078 <_printf_float+0x250>
 800b186:	2301      	movs	r3, #1
 800b188:	4652      	mov	r2, sl
 800b18a:	4631      	mov	r1, r6
 800b18c:	4628      	mov	r0, r5
 800b18e:	47b8      	blx	r7
 800b190:	3001      	adds	r0, #1
 800b192:	f43f aeaa 	beq.w	800aeea <_printf_float+0xc2>
 800b196:	f108 0801 	add.w	r8, r8, #1
 800b19a:	e7ec      	b.n	800b176 <_printf_float+0x34e>
 800b19c:	4613      	mov	r3, r2
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d1c0      	bne.n	800b12c <_printf_float+0x304>
 800b1aa:	e69e      	b.n	800aeea <_printf_float+0xc2>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	9205      	str	r2, [sp, #20]
 800b1b4:	47b8      	blx	r7
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	f43f ae97 	beq.w	800aeea <_printf_float+0xc2>
 800b1bc:	9a05      	ldr	r2, [sp, #20]
 800b1be:	f10b 0b01 	add.w	fp, fp, #1
 800b1c2:	e7b9      	b.n	800b138 <_printf_float+0x310>
 800b1c4:	ee18 3a10 	vmov	r3, s16
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	47b8      	blx	r7
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d1be      	bne.n	800b152 <_printf_float+0x32a>
 800b1d4:	e689      	b.n	800aeea <_printf_float+0xc2>
 800b1d6:	9a05      	ldr	r2, [sp, #20]
 800b1d8:	464b      	mov	r3, r9
 800b1da:	4442      	add	r2, r8
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4628      	mov	r0, r5
 800b1e0:	47b8      	blx	r7
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	d1c1      	bne.n	800b16a <_printf_float+0x342>
 800b1e6:	e680      	b.n	800aeea <_printf_float+0xc2>
 800b1e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ea:	2a01      	cmp	r2, #1
 800b1ec:	dc01      	bgt.n	800b1f2 <_printf_float+0x3ca>
 800b1ee:	07db      	lsls	r3, r3, #31
 800b1f0:	d538      	bpl.n	800b264 <_printf_float+0x43c>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4642      	mov	r2, r8
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae74 	beq.w	800aeea <_printf_float+0xc2>
 800b202:	ee18 3a10 	vmov	r3, s16
 800b206:	4652      	mov	r2, sl
 800b208:	4631      	mov	r1, r6
 800b20a:	4628      	mov	r0, r5
 800b20c:	47b8      	blx	r7
 800b20e:	3001      	adds	r0, #1
 800b210:	f43f ae6b 	beq.w	800aeea <_printf_float+0xc2>
 800b214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b218:	2200      	movs	r2, #0
 800b21a:	2300      	movs	r3, #0
 800b21c:	f7f5 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 800b220:	b9d8      	cbnz	r0, 800b25a <_printf_float+0x432>
 800b222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b224:	f108 0201 	add.w	r2, r8, #1
 800b228:	3b01      	subs	r3, #1
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b8      	blx	r7
 800b230:	3001      	adds	r0, #1
 800b232:	d10e      	bne.n	800b252 <_printf_float+0x42a>
 800b234:	e659      	b.n	800aeea <_printf_float+0xc2>
 800b236:	2301      	movs	r3, #1
 800b238:	4652      	mov	r2, sl
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b8      	blx	r7
 800b240:	3001      	adds	r0, #1
 800b242:	f43f ae52 	beq.w	800aeea <_printf_float+0xc2>
 800b246:	f108 0801 	add.w	r8, r8, #1
 800b24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24c:	3b01      	subs	r3, #1
 800b24e:	4543      	cmp	r3, r8
 800b250:	dcf1      	bgt.n	800b236 <_printf_float+0x40e>
 800b252:	464b      	mov	r3, r9
 800b254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b258:	e6dc      	b.n	800b014 <_printf_float+0x1ec>
 800b25a:	f04f 0800 	mov.w	r8, #0
 800b25e:	f104 0a1a 	add.w	sl, r4, #26
 800b262:	e7f2      	b.n	800b24a <_printf_float+0x422>
 800b264:	2301      	movs	r3, #1
 800b266:	4642      	mov	r2, r8
 800b268:	e7df      	b.n	800b22a <_printf_float+0x402>
 800b26a:	2301      	movs	r3, #1
 800b26c:	464a      	mov	r2, r9
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f ae38 	beq.w	800aeea <_printf_float+0xc2>
 800b27a:	f108 0801 	add.w	r8, r8, #1
 800b27e:	68e3      	ldr	r3, [r4, #12]
 800b280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b282:	1a5b      	subs	r3, r3, r1
 800b284:	4543      	cmp	r3, r8
 800b286:	dcf0      	bgt.n	800b26a <_printf_float+0x442>
 800b288:	e6fa      	b.n	800b080 <_printf_float+0x258>
 800b28a:	f04f 0800 	mov.w	r8, #0
 800b28e:	f104 0919 	add.w	r9, r4, #25
 800b292:	e7f4      	b.n	800b27e <_printf_float+0x456>

0800b294 <_printf_common>:
 800b294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b298:	4616      	mov	r6, r2
 800b29a:	4699      	mov	r9, r3
 800b29c:	688a      	ldr	r2, [r1, #8]
 800b29e:	690b      	ldr	r3, [r1, #16]
 800b2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	bfb8      	it	lt
 800b2a8:	4613      	movlt	r3, r2
 800b2aa:	6033      	str	r3, [r6, #0]
 800b2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2b0:	4607      	mov	r7, r0
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	b10a      	cbz	r2, 800b2ba <_printf_common+0x26>
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	6033      	str	r3, [r6, #0]
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	0699      	lsls	r1, r3, #26
 800b2be:	bf42      	ittt	mi
 800b2c0:	6833      	ldrmi	r3, [r6, #0]
 800b2c2:	3302      	addmi	r3, #2
 800b2c4:	6033      	strmi	r3, [r6, #0]
 800b2c6:	6825      	ldr	r5, [r4, #0]
 800b2c8:	f015 0506 	ands.w	r5, r5, #6
 800b2cc:	d106      	bne.n	800b2dc <_printf_common+0x48>
 800b2ce:	f104 0a19 	add.w	sl, r4, #25
 800b2d2:	68e3      	ldr	r3, [r4, #12]
 800b2d4:	6832      	ldr	r2, [r6, #0]
 800b2d6:	1a9b      	subs	r3, r3, r2
 800b2d8:	42ab      	cmp	r3, r5
 800b2da:	dc26      	bgt.n	800b32a <_printf_common+0x96>
 800b2dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2e0:	1e13      	subs	r3, r2, #0
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	bf18      	it	ne
 800b2e6:	2301      	movne	r3, #1
 800b2e8:	0692      	lsls	r2, r2, #26
 800b2ea:	d42b      	bmi.n	800b344 <_printf_common+0xb0>
 800b2ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	47c0      	blx	r8
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	d01e      	beq.n	800b338 <_printf_common+0xa4>
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	68e5      	ldr	r5, [r4, #12]
 800b2fe:	6832      	ldr	r2, [r6, #0]
 800b300:	f003 0306 	and.w	r3, r3, #6
 800b304:	2b04      	cmp	r3, #4
 800b306:	bf08      	it	eq
 800b308:	1aad      	subeq	r5, r5, r2
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	6922      	ldr	r2, [r4, #16]
 800b30e:	bf0c      	ite	eq
 800b310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b314:	2500      	movne	r5, #0
 800b316:	4293      	cmp	r3, r2
 800b318:	bfc4      	itt	gt
 800b31a:	1a9b      	subgt	r3, r3, r2
 800b31c:	18ed      	addgt	r5, r5, r3
 800b31e:	2600      	movs	r6, #0
 800b320:	341a      	adds	r4, #26
 800b322:	42b5      	cmp	r5, r6
 800b324:	d11a      	bne.n	800b35c <_printf_common+0xc8>
 800b326:	2000      	movs	r0, #0
 800b328:	e008      	b.n	800b33c <_printf_common+0xa8>
 800b32a:	2301      	movs	r3, #1
 800b32c:	4652      	mov	r2, sl
 800b32e:	4649      	mov	r1, r9
 800b330:	4638      	mov	r0, r7
 800b332:	47c0      	blx	r8
 800b334:	3001      	adds	r0, #1
 800b336:	d103      	bne.n	800b340 <_printf_common+0xac>
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b340:	3501      	adds	r5, #1
 800b342:	e7c6      	b.n	800b2d2 <_printf_common+0x3e>
 800b344:	18e1      	adds	r1, r4, r3
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	2030      	movs	r0, #48	; 0x30
 800b34a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b34e:	4422      	add	r2, r4
 800b350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b358:	3302      	adds	r3, #2
 800b35a:	e7c7      	b.n	800b2ec <_printf_common+0x58>
 800b35c:	2301      	movs	r3, #1
 800b35e:	4622      	mov	r2, r4
 800b360:	4649      	mov	r1, r9
 800b362:	4638      	mov	r0, r7
 800b364:	47c0      	blx	r8
 800b366:	3001      	adds	r0, #1
 800b368:	d0e6      	beq.n	800b338 <_printf_common+0xa4>
 800b36a:	3601      	adds	r6, #1
 800b36c:	e7d9      	b.n	800b322 <_printf_common+0x8e>
	...

0800b370 <_printf_i>:
 800b370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b374:	7e0f      	ldrb	r7, [r1, #24]
 800b376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b378:	2f78      	cmp	r7, #120	; 0x78
 800b37a:	4691      	mov	r9, r2
 800b37c:	4680      	mov	r8, r0
 800b37e:	460c      	mov	r4, r1
 800b380:	469a      	mov	sl, r3
 800b382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b386:	d807      	bhi.n	800b398 <_printf_i+0x28>
 800b388:	2f62      	cmp	r7, #98	; 0x62
 800b38a:	d80a      	bhi.n	800b3a2 <_printf_i+0x32>
 800b38c:	2f00      	cmp	r7, #0
 800b38e:	f000 80d8 	beq.w	800b542 <_printf_i+0x1d2>
 800b392:	2f58      	cmp	r7, #88	; 0x58
 800b394:	f000 80a3 	beq.w	800b4de <_printf_i+0x16e>
 800b398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b39c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3a0:	e03a      	b.n	800b418 <_printf_i+0xa8>
 800b3a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3a6:	2b15      	cmp	r3, #21
 800b3a8:	d8f6      	bhi.n	800b398 <_printf_i+0x28>
 800b3aa:	a101      	add	r1, pc, #4	; (adr r1, 800b3b0 <_printf_i+0x40>)
 800b3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3b0:	0800b409 	.word	0x0800b409
 800b3b4:	0800b41d 	.word	0x0800b41d
 800b3b8:	0800b399 	.word	0x0800b399
 800b3bc:	0800b399 	.word	0x0800b399
 800b3c0:	0800b399 	.word	0x0800b399
 800b3c4:	0800b399 	.word	0x0800b399
 800b3c8:	0800b41d 	.word	0x0800b41d
 800b3cc:	0800b399 	.word	0x0800b399
 800b3d0:	0800b399 	.word	0x0800b399
 800b3d4:	0800b399 	.word	0x0800b399
 800b3d8:	0800b399 	.word	0x0800b399
 800b3dc:	0800b529 	.word	0x0800b529
 800b3e0:	0800b44d 	.word	0x0800b44d
 800b3e4:	0800b50b 	.word	0x0800b50b
 800b3e8:	0800b399 	.word	0x0800b399
 800b3ec:	0800b399 	.word	0x0800b399
 800b3f0:	0800b54b 	.word	0x0800b54b
 800b3f4:	0800b399 	.word	0x0800b399
 800b3f8:	0800b44d 	.word	0x0800b44d
 800b3fc:	0800b399 	.word	0x0800b399
 800b400:	0800b399 	.word	0x0800b399
 800b404:	0800b513 	.word	0x0800b513
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	1d1a      	adds	r2, r3, #4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	602a      	str	r2, [r5, #0]
 800b410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b418:	2301      	movs	r3, #1
 800b41a:	e0a3      	b.n	800b564 <_printf_i+0x1f4>
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	6829      	ldr	r1, [r5, #0]
 800b420:	0606      	lsls	r6, r0, #24
 800b422:	f101 0304 	add.w	r3, r1, #4
 800b426:	d50a      	bpl.n	800b43e <_printf_i+0xce>
 800b428:	680e      	ldr	r6, [r1, #0]
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	2e00      	cmp	r6, #0
 800b42e:	da03      	bge.n	800b438 <_printf_i+0xc8>
 800b430:	232d      	movs	r3, #45	; 0x2d
 800b432:	4276      	negs	r6, r6
 800b434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b438:	485e      	ldr	r0, [pc, #376]	; (800b5b4 <_printf_i+0x244>)
 800b43a:	230a      	movs	r3, #10
 800b43c:	e019      	b.n	800b472 <_printf_i+0x102>
 800b43e:	680e      	ldr	r6, [r1, #0]
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b446:	bf18      	it	ne
 800b448:	b236      	sxthne	r6, r6
 800b44a:	e7ef      	b.n	800b42c <_printf_i+0xbc>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	6820      	ldr	r0, [r4, #0]
 800b450:	1d19      	adds	r1, r3, #4
 800b452:	6029      	str	r1, [r5, #0]
 800b454:	0601      	lsls	r1, r0, #24
 800b456:	d501      	bpl.n	800b45c <_printf_i+0xec>
 800b458:	681e      	ldr	r6, [r3, #0]
 800b45a:	e002      	b.n	800b462 <_printf_i+0xf2>
 800b45c:	0646      	lsls	r6, r0, #25
 800b45e:	d5fb      	bpl.n	800b458 <_printf_i+0xe8>
 800b460:	881e      	ldrh	r6, [r3, #0]
 800b462:	4854      	ldr	r0, [pc, #336]	; (800b5b4 <_printf_i+0x244>)
 800b464:	2f6f      	cmp	r7, #111	; 0x6f
 800b466:	bf0c      	ite	eq
 800b468:	2308      	moveq	r3, #8
 800b46a:	230a      	movne	r3, #10
 800b46c:	2100      	movs	r1, #0
 800b46e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b472:	6865      	ldr	r5, [r4, #4]
 800b474:	60a5      	str	r5, [r4, #8]
 800b476:	2d00      	cmp	r5, #0
 800b478:	bfa2      	ittt	ge
 800b47a:	6821      	ldrge	r1, [r4, #0]
 800b47c:	f021 0104 	bicge.w	r1, r1, #4
 800b480:	6021      	strge	r1, [r4, #0]
 800b482:	b90e      	cbnz	r6, 800b488 <_printf_i+0x118>
 800b484:	2d00      	cmp	r5, #0
 800b486:	d04d      	beq.n	800b524 <_printf_i+0x1b4>
 800b488:	4615      	mov	r5, r2
 800b48a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b48e:	fb03 6711 	mls	r7, r3, r1, r6
 800b492:	5dc7      	ldrb	r7, [r0, r7]
 800b494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b498:	4637      	mov	r7, r6
 800b49a:	42bb      	cmp	r3, r7
 800b49c:	460e      	mov	r6, r1
 800b49e:	d9f4      	bls.n	800b48a <_printf_i+0x11a>
 800b4a0:	2b08      	cmp	r3, #8
 800b4a2:	d10b      	bne.n	800b4bc <_printf_i+0x14c>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	07de      	lsls	r6, r3, #31
 800b4a8:	d508      	bpl.n	800b4bc <_printf_i+0x14c>
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	4299      	cmp	r1, r3
 800b4b0:	bfde      	ittt	le
 800b4b2:	2330      	movle	r3, #48	; 0x30
 800b4b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4bc:	1b52      	subs	r2, r2, r5
 800b4be:	6122      	str	r2, [r4, #16]
 800b4c0:	f8cd a000 	str.w	sl, [sp]
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	aa03      	add	r2, sp, #12
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f7ff fee2 	bl	800b294 <_printf_common>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d14c      	bne.n	800b56e <_printf_i+0x1fe>
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	b004      	add	sp, #16
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4de:	4835      	ldr	r0, [pc, #212]	; (800b5b4 <_printf_i+0x244>)
 800b4e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4e4:	6829      	ldr	r1, [r5, #0]
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4ec:	6029      	str	r1, [r5, #0]
 800b4ee:	061d      	lsls	r5, r3, #24
 800b4f0:	d514      	bpl.n	800b51c <_printf_i+0x1ac>
 800b4f2:	07df      	lsls	r7, r3, #31
 800b4f4:	bf44      	itt	mi
 800b4f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b4fa:	6023      	strmi	r3, [r4, #0]
 800b4fc:	b91e      	cbnz	r6, 800b506 <_printf_i+0x196>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	f023 0320 	bic.w	r3, r3, #32
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	2310      	movs	r3, #16
 800b508:	e7b0      	b.n	800b46c <_printf_i+0xfc>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	f043 0320 	orr.w	r3, r3, #32
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	2378      	movs	r3, #120	; 0x78
 800b514:	4828      	ldr	r0, [pc, #160]	; (800b5b8 <_printf_i+0x248>)
 800b516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b51a:	e7e3      	b.n	800b4e4 <_printf_i+0x174>
 800b51c:	0659      	lsls	r1, r3, #25
 800b51e:	bf48      	it	mi
 800b520:	b2b6      	uxthmi	r6, r6
 800b522:	e7e6      	b.n	800b4f2 <_printf_i+0x182>
 800b524:	4615      	mov	r5, r2
 800b526:	e7bb      	b.n	800b4a0 <_printf_i+0x130>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	6826      	ldr	r6, [r4, #0]
 800b52c:	6961      	ldr	r1, [r4, #20]
 800b52e:	1d18      	adds	r0, r3, #4
 800b530:	6028      	str	r0, [r5, #0]
 800b532:	0635      	lsls	r5, r6, #24
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	d501      	bpl.n	800b53c <_printf_i+0x1cc>
 800b538:	6019      	str	r1, [r3, #0]
 800b53a:	e002      	b.n	800b542 <_printf_i+0x1d2>
 800b53c:	0670      	lsls	r0, r6, #25
 800b53e:	d5fb      	bpl.n	800b538 <_printf_i+0x1c8>
 800b540:	8019      	strh	r1, [r3, #0]
 800b542:	2300      	movs	r3, #0
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	4615      	mov	r5, r2
 800b548:	e7ba      	b.n	800b4c0 <_printf_i+0x150>
 800b54a:	682b      	ldr	r3, [r5, #0]
 800b54c:	1d1a      	adds	r2, r3, #4
 800b54e:	602a      	str	r2, [r5, #0]
 800b550:	681d      	ldr	r5, [r3, #0]
 800b552:	6862      	ldr	r2, [r4, #4]
 800b554:	2100      	movs	r1, #0
 800b556:	4628      	mov	r0, r5
 800b558:	f7f4 fe42 	bl	80001e0 <memchr>
 800b55c:	b108      	cbz	r0, 800b562 <_printf_i+0x1f2>
 800b55e:	1b40      	subs	r0, r0, r5
 800b560:	6060      	str	r0, [r4, #4]
 800b562:	6863      	ldr	r3, [r4, #4]
 800b564:	6123      	str	r3, [r4, #16]
 800b566:	2300      	movs	r3, #0
 800b568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b56c:	e7a8      	b.n	800b4c0 <_printf_i+0x150>
 800b56e:	6923      	ldr	r3, [r4, #16]
 800b570:	462a      	mov	r2, r5
 800b572:	4649      	mov	r1, r9
 800b574:	4640      	mov	r0, r8
 800b576:	47d0      	blx	sl
 800b578:	3001      	adds	r0, #1
 800b57a:	d0ab      	beq.n	800b4d4 <_printf_i+0x164>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	079b      	lsls	r3, r3, #30
 800b580:	d413      	bmi.n	800b5aa <_printf_i+0x23a>
 800b582:	68e0      	ldr	r0, [r4, #12]
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	4298      	cmp	r0, r3
 800b588:	bfb8      	it	lt
 800b58a:	4618      	movlt	r0, r3
 800b58c:	e7a4      	b.n	800b4d8 <_printf_i+0x168>
 800b58e:	2301      	movs	r3, #1
 800b590:	4632      	mov	r2, r6
 800b592:	4649      	mov	r1, r9
 800b594:	4640      	mov	r0, r8
 800b596:	47d0      	blx	sl
 800b598:	3001      	adds	r0, #1
 800b59a:	d09b      	beq.n	800b4d4 <_printf_i+0x164>
 800b59c:	3501      	adds	r5, #1
 800b59e:	68e3      	ldr	r3, [r4, #12]
 800b5a0:	9903      	ldr	r1, [sp, #12]
 800b5a2:	1a5b      	subs	r3, r3, r1
 800b5a4:	42ab      	cmp	r3, r5
 800b5a6:	dcf2      	bgt.n	800b58e <_printf_i+0x21e>
 800b5a8:	e7eb      	b.n	800b582 <_printf_i+0x212>
 800b5aa:	2500      	movs	r5, #0
 800b5ac:	f104 0619 	add.w	r6, r4, #25
 800b5b0:	e7f5      	b.n	800b59e <_printf_i+0x22e>
 800b5b2:	bf00      	nop
 800b5b4:	08010926 	.word	0x08010926
 800b5b8:	08010937 	.word	0x08010937

0800b5bc <_scanf_float>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	b087      	sub	sp, #28
 800b5c2:	4617      	mov	r7, r2
 800b5c4:	9303      	str	r3, [sp, #12]
 800b5c6:	688b      	ldr	r3, [r1, #8]
 800b5c8:	1e5a      	subs	r2, r3, #1
 800b5ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5ce:	bf83      	ittte	hi
 800b5d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b5d4:	195b      	addhi	r3, r3, r5
 800b5d6:	9302      	strhi	r3, [sp, #8]
 800b5d8:	2300      	movls	r3, #0
 800b5da:	bf86      	itte	hi
 800b5dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5e0:	608b      	strhi	r3, [r1, #8]
 800b5e2:	9302      	strls	r3, [sp, #8]
 800b5e4:	680b      	ldr	r3, [r1, #0]
 800b5e6:	468b      	mov	fp, r1
 800b5e8:	2500      	movs	r5, #0
 800b5ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b5ee:	f84b 3b1c 	str.w	r3, [fp], #28
 800b5f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5f6:	4680      	mov	r8, r0
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	465e      	mov	r6, fp
 800b5fc:	46aa      	mov	sl, r5
 800b5fe:	46a9      	mov	r9, r5
 800b600:	9501      	str	r5, [sp, #4]
 800b602:	68a2      	ldr	r2, [r4, #8]
 800b604:	b152      	cbz	r2, 800b61c <_scanf_float+0x60>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b4e      	cmp	r3, #78	; 0x4e
 800b60c:	d864      	bhi.n	800b6d8 <_scanf_float+0x11c>
 800b60e:	2b40      	cmp	r3, #64	; 0x40
 800b610:	d83c      	bhi.n	800b68c <_scanf_float+0xd0>
 800b612:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b616:	b2c8      	uxtb	r0, r1
 800b618:	280e      	cmp	r0, #14
 800b61a:	d93a      	bls.n	800b692 <_scanf_float+0xd6>
 800b61c:	f1b9 0f00 	cmp.w	r9, #0
 800b620:	d003      	beq.n	800b62a <_scanf_float+0x6e>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b62e:	f1ba 0f01 	cmp.w	sl, #1
 800b632:	f200 8113 	bhi.w	800b85c <_scanf_float+0x2a0>
 800b636:	455e      	cmp	r6, fp
 800b638:	f200 8105 	bhi.w	800b846 <_scanf_float+0x28a>
 800b63c:	2501      	movs	r5, #1
 800b63e:	4628      	mov	r0, r5
 800b640:	b007      	add	sp, #28
 800b642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b646:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b64a:	2a0d      	cmp	r2, #13
 800b64c:	d8e6      	bhi.n	800b61c <_scanf_float+0x60>
 800b64e:	a101      	add	r1, pc, #4	; (adr r1, 800b654 <_scanf_float+0x98>)
 800b650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b654:	0800b793 	.word	0x0800b793
 800b658:	0800b61d 	.word	0x0800b61d
 800b65c:	0800b61d 	.word	0x0800b61d
 800b660:	0800b61d 	.word	0x0800b61d
 800b664:	0800b7f3 	.word	0x0800b7f3
 800b668:	0800b7cb 	.word	0x0800b7cb
 800b66c:	0800b61d 	.word	0x0800b61d
 800b670:	0800b61d 	.word	0x0800b61d
 800b674:	0800b7a1 	.word	0x0800b7a1
 800b678:	0800b61d 	.word	0x0800b61d
 800b67c:	0800b61d 	.word	0x0800b61d
 800b680:	0800b61d 	.word	0x0800b61d
 800b684:	0800b61d 	.word	0x0800b61d
 800b688:	0800b759 	.word	0x0800b759
 800b68c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b690:	e7db      	b.n	800b64a <_scanf_float+0x8e>
 800b692:	290e      	cmp	r1, #14
 800b694:	d8c2      	bhi.n	800b61c <_scanf_float+0x60>
 800b696:	a001      	add	r0, pc, #4	; (adr r0, 800b69c <_scanf_float+0xe0>)
 800b698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b69c:	0800b74b 	.word	0x0800b74b
 800b6a0:	0800b61d 	.word	0x0800b61d
 800b6a4:	0800b74b 	.word	0x0800b74b
 800b6a8:	0800b7df 	.word	0x0800b7df
 800b6ac:	0800b61d 	.word	0x0800b61d
 800b6b0:	0800b6f9 	.word	0x0800b6f9
 800b6b4:	0800b735 	.word	0x0800b735
 800b6b8:	0800b735 	.word	0x0800b735
 800b6bc:	0800b735 	.word	0x0800b735
 800b6c0:	0800b735 	.word	0x0800b735
 800b6c4:	0800b735 	.word	0x0800b735
 800b6c8:	0800b735 	.word	0x0800b735
 800b6cc:	0800b735 	.word	0x0800b735
 800b6d0:	0800b735 	.word	0x0800b735
 800b6d4:	0800b735 	.word	0x0800b735
 800b6d8:	2b6e      	cmp	r3, #110	; 0x6e
 800b6da:	d809      	bhi.n	800b6f0 <_scanf_float+0x134>
 800b6dc:	2b60      	cmp	r3, #96	; 0x60
 800b6de:	d8b2      	bhi.n	800b646 <_scanf_float+0x8a>
 800b6e0:	2b54      	cmp	r3, #84	; 0x54
 800b6e2:	d077      	beq.n	800b7d4 <_scanf_float+0x218>
 800b6e4:	2b59      	cmp	r3, #89	; 0x59
 800b6e6:	d199      	bne.n	800b61c <_scanf_float+0x60>
 800b6e8:	2d07      	cmp	r5, #7
 800b6ea:	d197      	bne.n	800b61c <_scanf_float+0x60>
 800b6ec:	2508      	movs	r5, #8
 800b6ee:	e029      	b.n	800b744 <_scanf_float+0x188>
 800b6f0:	2b74      	cmp	r3, #116	; 0x74
 800b6f2:	d06f      	beq.n	800b7d4 <_scanf_float+0x218>
 800b6f4:	2b79      	cmp	r3, #121	; 0x79
 800b6f6:	e7f6      	b.n	800b6e6 <_scanf_float+0x12a>
 800b6f8:	6821      	ldr	r1, [r4, #0]
 800b6fa:	05c8      	lsls	r0, r1, #23
 800b6fc:	d51a      	bpl.n	800b734 <_scanf_float+0x178>
 800b6fe:	9b02      	ldr	r3, [sp, #8]
 800b700:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b704:	6021      	str	r1, [r4, #0]
 800b706:	f109 0901 	add.w	r9, r9, #1
 800b70a:	b11b      	cbz	r3, 800b714 <_scanf_float+0x158>
 800b70c:	3b01      	subs	r3, #1
 800b70e:	3201      	adds	r2, #1
 800b710:	9302      	str	r3, [sp, #8]
 800b712:	60a2      	str	r2, [r4, #8]
 800b714:	68a3      	ldr	r3, [r4, #8]
 800b716:	3b01      	subs	r3, #1
 800b718:	60a3      	str	r3, [r4, #8]
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	3301      	adds	r3, #1
 800b71e:	6123      	str	r3, [r4, #16]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	3b01      	subs	r3, #1
 800b724:	2b00      	cmp	r3, #0
 800b726:	607b      	str	r3, [r7, #4]
 800b728:	f340 8084 	ble.w	800b834 <_scanf_float+0x278>
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	3301      	adds	r3, #1
 800b730:	603b      	str	r3, [r7, #0]
 800b732:	e766      	b.n	800b602 <_scanf_float+0x46>
 800b734:	eb1a 0f05 	cmn.w	sl, r5
 800b738:	f47f af70 	bne.w	800b61c <_scanf_float+0x60>
 800b73c:	6822      	ldr	r2, [r4, #0]
 800b73e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b742:	6022      	str	r2, [r4, #0]
 800b744:	f806 3b01 	strb.w	r3, [r6], #1
 800b748:	e7e4      	b.n	800b714 <_scanf_float+0x158>
 800b74a:	6822      	ldr	r2, [r4, #0]
 800b74c:	0610      	lsls	r0, r2, #24
 800b74e:	f57f af65 	bpl.w	800b61c <_scanf_float+0x60>
 800b752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b756:	e7f4      	b.n	800b742 <_scanf_float+0x186>
 800b758:	f1ba 0f00 	cmp.w	sl, #0
 800b75c:	d10e      	bne.n	800b77c <_scanf_float+0x1c0>
 800b75e:	f1b9 0f00 	cmp.w	r9, #0
 800b762:	d10e      	bne.n	800b782 <_scanf_float+0x1c6>
 800b764:	6822      	ldr	r2, [r4, #0]
 800b766:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b76a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b76e:	d108      	bne.n	800b782 <_scanf_float+0x1c6>
 800b770:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b774:	6022      	str	r2, [r4, #0]
 800b776:	f04f 0a01 	mov.w	sl, #1
 800b77a:	e7e3      	b.n	800b744 <_scanf_float+0x188>
 800b77c:	f1ba 0f02 	cmp.w	sl, #2
 800b780:	d055      	beq.n	800b82e <_scanf_float+0x272>
 800b782:	2d01      	cmp	r5, #1
 800b784:	d002      	beq.n	800b78c <_scanf_float+0x1d0>
 800b786:	2d04      	cmp	r5, #4
 800b788:	f47f af48 	bne.w	800b61c <_scanf_float+0x60>
 800b78c:	3501      	adds	r5, #1
 800b78e:	b2ed      	uxtb	r5, r5
 800b790:	e7d8      	b.n	800b744 <_scanf_float+0x188>
 800b792:	f1ba 0f01 	cmp.w	sl, #1
 800b796:	f47f af41 	bne.w	800b61c <_scanf_float+0x60>
 800b79a:	f04f 0a02 	mov.w	sl, #2
 800b79e:	e7d1      	b.n	800b744 <_scanf_float+0x188>
 800b7a0:	b97d      	cbnz	r5, 800b7c2 <_scanf_float+0x206>
 800b7a2:	f1b9 0f00 	cmp.w	r9, #0
 800b7a6:	f47f af3c 	bne.w	800b622 <_scanf_float+0x66>
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b7b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b7b4:	f47f af39 	bne.w	800b62a <_scanf_float+0x6e>
 800b7b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b7bc:	6022      	str	r2, [r4, #0]
 800b7be:	2501      	movs	r5, #1
 800b7c0:	e7c0      	b.n	800b744 <_scanf_float+0x188>
 800b7c2:	2d03      	cmp	r5, #3
 800b7c4:	d0e2      	beq.n	800b78c <_scanf_float+0x1d0>
 800b7c6:	2d05      	cmp	r5, #5
 800b7c8:	e7de      	b.n	800b788 <_scanf_float+0x1cc>
 800b7ca:	2d02      	cmp	r5, #2
 800b7cc:	f47f af26 	bne.w	800b61c <_scanf_float+0x60>
 800b7d0:	2503      	movs	r5, #3
 800b7d2:	e7b7      	b.n	800b744 <_scanf_float+0x188>
 800b7d4:	2d06      	cmp	r5, #6
 800b7d6:	f47f af21 	bne.w	800b61c <_scanf_float+0x60>
 800b7da:	2507      	movs	r5, #7
 800b7dc:	e7b2      	b.n	800b744 <_scanf_float+0x188>
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	0591      	lsls	r1, r2, #22
 800b7e2:	f57f af1b 	bpl.w	800b61c <_scanf_float+0x60>
 800b7e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b7ea:	6022      	str	r2, [r4, #0]
 800b7ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7f0:	e7a8      	b.n	800b744 <_scanf_float+0x188>
 800b7f2:	6822      	ldr	r2, [r4, #0]
 800b7f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b7f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b7fc:	d006      	beq.n	800b80c <_scanf_float+0x250>
 800b7fe:	0550      	lsls	r0, r2, #21
 800b800:	f57f af0c 	bpl.w	800b61c <_scanf_float+0x60>
 800b804:	f1b9 0f00 	cmp.w	r9, #0
 800b808:	f43f af0f 	beq.w	800b62a <_scanf_float+0x6e>
 800b80c:	0591      	lsls	r1, r2, #22
 800b80e:	bf58      	it	pl
 800b810:	9901      	ldrpl	r1, [sp, #4]
 800b812:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b816:	bf58      	it	pl
 800b818:	eba9 0101 	subpl.w	r1, r9, r1
 800b81c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b820:	bf58      	it	pl
 800b822:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b826:	6022      	str	r2, [r4, #0]
 800b828:	f04f 0900 	mov.w	r9, #0
 800b82c:	e78a      	b.n	800b744 <_scanf_float+0x188>
 800b82e:	f04f 0a03 	mov.w	sl, #3
 800b832:	e787      	b.n	800b744 <_scanf_float+0x188>
 800b834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b838:	4639      	mov	r1, r7
 800b83a:	4640      	mov	r0, r8
 800b83c:	4798      	blx	r3
 800b83e:	2800      	cmp	r0, #0
 800b840:	f43f aedf 	beq.w	800b602 <_scanf_float+0x46>
 800b844:	e6ea      	b.n	800b61c <_scanf_float+0x60>
 800b846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b84a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b84e:	463a      	mov	r2, r7
 800b850:	4640      	mov	r0, r8
 800b852:	4798      	blx	r3
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	3b01      	subs	r3, #1
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	e6ec      	b.n	800b636 <_scanf_float+0x7a>
 800b85c:	1e6b      	subs	r3, r5, #1
 800b85e:	2b06      	cmp	r3, #6
 800b860:	d825      	bhi.n	800b8ae <_scanf_float+0x2f2>
 800b862:	2d02      	cmp	r5, #2
 800b864:	d836      	bhi.n	800b8d4 <_scanf_float+0x318>
 800b866:	455e      	cmp	r6, fp
 800b868:	f67f aee8 	bls.w	800b63c <_scanf_float+0x80>
 800b86c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b870:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b874:	463a      	mov	r2, r7
 800b876:	4640      	mov	r0, r8
 800b878:	4798      	blx	r3
 800b87a:	6923      	ldr	r3, [r4, #16]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	6123      	str	r3, [r4, #16]
 800b880:	e7f1      	b.n	800b866 <_scanf_float+0x2aa>
 800b882:	9802      	ldr	r0, [sp, #8]
 800b884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b888:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b88c:	9002      	str	r0, [sp, #8]
 800b88e:	463a      	mov	r2, r7
 800b890:	4640      	mov	r0, r8
 800b892:	4798      	blx	r3
 800b894:	6923      	ldr	r3, [r4, #16]
 800b896:	3b01      	subs	r3, #1
 800b898:	6123      	str	r3, [r4, #16]
 800b89a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b89e:	fa5f fa8a 	uxtb.w	sl, sl
 800b8a2:	f1ba 0f02 	cmp.w	sl, #2
 800b8a6:	d1ec      	bne.n	800b882 <_scanf_float+0x2c6>
 800b8a8:	3d03      	subs	r5, #3
 800b8aa:	b2ed      	uxtb	r5, r5
 800b8ac:	1b76      	subs	r6, r6, r5
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	05da      	lsls	r2, r3, #23
 800b8b2:	d52f      	bpl.n	800b914 <_scanf_float+0x358>
 800b8b4:	055b      	lsls	r3, r3, #21
 800b8b6:	d510      	bpl.n	800b8da <_scanf_float+0x31e>
 800b8b8:	455e      	cmp	r6, fp
 800b8ba:	f67f aebf 	bls.w	800b63c <_scanf_float+0x80>
 800b8be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8c6:	463a      	mov	r2, r7
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4798      	blx	r3
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	6123      	str	r3, [r4, #16]
 800b8d2:	e7f1      	b.n	800b8b8 <_scanf_float+0x2fc>
 800b8d4:	46aa      	mov	sl, r5
 800b8d6:	9602      	str	r6, [sp, #8]
 800b8d8:	e7df      	b.n	800b89a <_scanf_float+0x2de>
 800b8da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	2965      	cmp	r1, #101	; 0x65
 800b8e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8e6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	d00c      	beq.n	800b908 <_scanf_float+0x34c>
 800b8ee:	2945      	cmp	r1, #69	; 0x45
 800b8f0:	d00a      	beq.n	800b908 <_scanf_float+0x34c>
 800b8f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8f6:	463a      	mov	r2, r7
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4798      	blx	r3
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b902:	3b01      	subs	r3, #1
 800b904:	1eb5      	subs	r5, r6, #2
 800b906:	6123      	str	r3, [r4, #16]
 800b908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b90c:	463a      	mov	r2, r7
 800b90e:	4640      	mov	r0, r8
 800b910:	4798      	blx	r3
 800b912:	462e      	mov	r6, r5
 800b914:	6825      	ldr	r5, [r4, #0]
 800b916:	f015 0510 	ands.w	r5, r5, #16
 800b91a:	d159      	bne.n	800b9d0 <_scanf_float+0x414>
 800b91c:	7035      	strb	r5, [r6, #0]
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b928:	d11b      	bne.n	800b962 <_scanf_float+0x3a6>
 800b92a:	9b01      	ldr	r3, [sp, #4]
 800b92c:	454b      	cmp	r3, r9
 800b92e:	eba3 0209 	sub.w	r2, r3, r9
 800b932:	d123      	bne.n	800b97c <_scanf_float+0x3c0>
 800b934:	2200      	movs	r2, #0
 800b936:	4659      	mov	r1, fp
 800b938:	4640      	mov	r0, r8
 800b93a:	f000 ff27 	bl	800c78c <_strtod_r>
 800b93e:	6822      	ldr	r2, [r4, #0]
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	f012 0f02 	tst.w	r2, #2
 800b946:	ec57 6b10 	vmov	r6, r7, d0
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	d021      	beq.n	800b992 <_scanf_float+0x3d6>
 800b94e:	9903      	ldr	r1, [sp, #12]
 800b950:	1d1a      	adds	r2, r3, #4
 800b952:	600a      	str	r2, [r1, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	e9c3 6700 	strd	r6, r7, [r3]
 800b95a:	68e3      	ldr	r3, [r4, #12]
 800b95c:	3301      	adds	r3, #1
 800b95e:	60e3      	str	r3, [r4, #12]
 800b960:	e66d      	b.n	800b63e <_scanf_float+0x82>
 800b962:	9b04      	ldr	r3, [sp, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d0e5      	beq.n	800b934 <_scanf_float+0x378>
 800b968:	9905      	ldr	r1, [sp, #20]
 800b96a:	230a      	movs	r3, #10
 800b96c:	462a      	mov	r2, r5
 800b96e:	3101      	adds	r1, #1
 800b970:	4640      	mov	r0, r8
 800b972:	f000 ff93 	bl	800c89c <_strtol_r>
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	9e05      	ldr	r6, [sp, #20]
 800b97a:	1ac2      	subs	r2, r0, r3
 800b97c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b980:	429e      	cmp	r6, r3
 800b982:	bf28      	it	cs
 800b984:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b988:	4912      	ldr	r1, [pc, #72]	; (800b9d4 <_scanf_float+0x418>)
 800b98a:	4630      	mov	r0, r6
 800b98c:	f000 f8ba 	bl	800bb04 <siprintf>
 800b990:	e7d0      	b.n	800b934 <_scanf_float+0x378>
 800b992:	9903      	ldr	r1, [sp, #12]
 800b994:	f012 0f04 	tst.w	r2, #4
 800b998:	f103 0204 	add.w	r2, r3, #4
 800b99c:	600a      	str	r2, [r1, #0]
 800b99e:	d1d9      	bne.n	800b954 <_scanf_float+0x398>
 800b9a0:	f8d3 8000 	ldr.w	r8, [r3]
 800b9a4:	ee10 2a10 	vmov	r2, s0
 800b9a8:	ee10 0a10 	vmov	r0, s0
 800b9ac:	463b      	mov	r3, r7
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	f7f5 f8bc 	bl	8000b2c <__aeabi_dcmpun>
 800b9b4:	b128      	cbz	r0, 800b9c2 <_scanf_float+0x406>
 800b9b6:	4808      	ldr	r0, [pc, #32]	; (800b9d8 <_scanf_float+0x41c>)
 800b9b8:	f000 f89e 	bl	800baf8 <nanf>
 800b9bc:	ed88 0a00 	vstr	s0, [r8]
 800b9c0:	e7cb      	b.n	800b95a <_scanf_float+0x39e>
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	f7f5 f90f 	bl	8000be8 <__aeabi_d2f>
 800b9ca:	f8c8 0000 	str.w	r0, [r8]
 800b9ce:	e7c4      	b.n	800b95a <_scanf_float+0x39e>
 800b9d0:	2500      	movs	r5, #0
 800b9d2:	e634      	b.n	800b63e <_scanf_float+0x82>
 800b9d4:	08010948 	.word	0x08010948
 800b9d8:	08010db8 	.word	0x08010db8

0800b9dc <iprintf>:
 800b9dc:	b40f      	push	{r0, r1, r2, r3}
 800b9de:	4b0a      	ldr	r3, [pc, #40]	; (800ba08 <iprintf+0x2c>)
 800b9e0:	b513      	push	{r0, r1, r4, lr}
 800b9e2:	681c      	ldr	r4, [r3, #0]
 800b9e4:	b124      	cbz	r4, 800b9f0 <iprintf+0x14>
 800b9e6:	69a3      	ldr	r3, [r4, #24]
 800b9e8:	b913      	cbnz	r3, 800b9f0 <iprintf+0x14>
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f001 ffac 	bl	800d948 <__sinit>
 800b9f0:	ab05      	add	r3, sp, #20
 800b9f2:	9a04      	ldr	r2, [sp, #16]
 800b9f4:	68a1      	ldr	r1, [r4, #8]
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f003 fb75 	bl	800f0e8 <_vfiprintf_r>
 800b9fe:	b002      	add	sp, #8
 800ba00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba04:	b004      	add	sp, #16
 800ba06:	4770      	bx	lr
 800ba08:	2000000c 	.word	0x2000000c

0800ba0c <_puts_r>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	460e      	mov	r6, r1
 800ba10:	4605      	mov	r5, r0
 800ba12:	b118      	cbz	r0, 800ba1c <_puts_r+0x10>
 800ba14:	6983      	ldr	r3, [r0, #24]
 800ba16:	b90b      	cbnz	r3, 800ba1c <_puts_r+0x10>
 800ba18:	f001 ff96 	bl	800d948 <__sinit>
 800ba1c:	69ab      	ldr	r3, [r5, #24]
 800ba1e:	68ac      	ldr	r4, [r5, #8]
 800ba20:	b913      	cbnz	r3, 800ba28 <_puts_r+0x1c>
 800ba22:	4628      	mov	r0, r5
 800ba24:	f001 ff90 	bl	800d948 <__sinit>
 800ba28:	4b2c      	ldr	r3, [pc, #176]	; (800badc <_puts_r+0xd0>)
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d120      	bne.n	800ba70 <_puts_r+0x64>
 800ba2e:	686c      	ldr	r4, [r5, #4]
 800ba30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba32:	07db      	lsls	r3, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_puts_r+0x36>
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	0598      	lsls	r0, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_puts_r+0x36>
 800ba3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba3e:	f002 fb94 	bl	800e16a <__retarget_lock_acquire_recursive>
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	0719      	lsls	r1, r3, #28
 800ba46:	d51d      	bpl.n	800ba84 <_puts_r+0x78>
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	b1db      	cbz	r3, 800ba84 <_puts_r+0x78>
 800ba4c:	3e01      	subs	r6, #1
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba54:	3b01      	subs	r3, #1
 800ba56:	60a3      	str	r3, [r4, #8]
 800ba58:	bb39      	cbnz	r1, 800baaa <_puts_r+0x9e>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da38      	bge.n	800bad0 <_puts_r+0xc4>
 800ba5e:	4622      	mov	r2, r4
 800ba60:	210a      	movs	r1, #10
 800ba62:	4628      	mov	r0, r5
 800ba64:	f000 ff1c 	bl	800c8a0 <__swbuf_r>
 800ba68:	3001      	adds	r0, #1
 800ba6a:	d011      	beq.n	800ba90 <_puts_r+0x84>
 800ba6c:	250a      	movs	r5, #10
 800ba6e:	e011      	b.n	800ba94 <_puts_r+0x88>
 800ba70:	4b1b      	ldr	r3, [pc, #108]	; (800bae0 <_puts_r+0xd4>)
 800ba72:	429c      	cmp	r4, r3
 800ba74:	d101      	bne.n	800ba7a <_puts_r+0x6e>
 800ba76:	68ac      	ldr	r4, [r5, #8]
 800ba78:	e7da      	b.n	800ba30 <_puts_r+0x24>
 800ba7a:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <_puts_r+0xd8>)
 800ba7c:	429c      	cmp	r4, r3
 800ba7e:	bf08      	it	eq
 800ba80:	68ec      	ldreq	r4, [r5, #12]
 800ba82:	e7d5      	b.n	800ba30 <_puts_r+0x24>
 800ba84:	4621      	mov	r1, r4
 800ba86:	4628      	mov	r0, r5
 800ba88:	f000 ff5c 	bl	800c944 <__swsetup_r>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d0dd      	beq.n	800ba4c <_puts_r+0x40>
 800ba90:	f04f 35ff 	mov.w	r5, #4294967295
 800ba94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba96:	07da      	lsls	r2, r3, #31
 800ba98:	d405      	bmi.n	800baa6 <_puts_r+0x9a>
 800ba9a:	89a3      	ldrh	r3, [r4, #12]
 800ba9c:	059b      	lsls	r3, r3, #22
 800ba9e:	d402      	bmi.n	800baa6 <_puts_r+0x9a>
 800baa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baa2:	f002 fb63 	bl	800e16c <__retarget_lock_release_recursive>
 800baa6:	4628      	mov	r0, r5
 800baa8:	bd70      	pop	{r4, r5, r6, pc}
 800baaa:	2b00      	cmp	r3, #0
 800baac:	da04      	bge.n	800bab8 <_puts_r+0xac>
 800baae:	69a2      	ldr	r2, [r4, #24]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	dc06      	bgt.n	800bac2 <_puts_r+0xb6>
 800bab4:	290a      	cmp	r1, #10
 800bab6:	d004      	beq.n	800bac2 <_puts_r+0xb6>
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	6022      	str	r2, [r4, #0]
 800babe:	7019      	strb	r1, [r3, #0]
 800bac0:	e7c5      	b.n	800ba4e <_puts_r+0x42>
 800bac2:	4622      	mov	r2, r4
 800bac4:	4628      	mov	r0, r5
 800bac6:	f000 feeb 	bl	800c8a0 <__swbuf_r>
 800baca:	3001      	adds	r0, #1
 800bacc:	d1bf      	bne.n	800ba4e <_puts_r+0x42>
 800bace:	e7df      	b.n	800ba90 <_puts_r+0x84>
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	250a      	movs	r5, #10
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	6022      	str	r2, [r4, #0]
 800bad8:	701d      	strb	r5, [r3, #0]
 800bada:	e7db      	b.n	800ba94 <_puts_r+0x88>
 800badc:	08010b54 	.word	0x08010b54
 800bae0:	08010b74 	.word	0x08010b74
 800bae4:	08010b34 	.word	0x08010b34

0800bae8 <puts>:
 800bae8:	4b02      	ldr	r3, [pc, #8]	; (800baf4 <puts+0xc>)
 800baea:	4601      	mov	r1, r0
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	f7ff bf8d 	b.w	800ba0c <_puts_r>
 800baf2:	bf00      	nop
 800baf4:	2000000c 	.word	0x2000000c

0800baf8 <nanf>:
 800baf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bb00 <nanf+0x8>
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	7fc00000 	.word	0x7fc00000

0800bb04 <siprintf>:
 800bb04:	b40e      	push	{r1, r2, r3}
 800bb06:	b500      	push	{lr}
 800bb08:	b09c      	sub	sp, #112	; 0x70
 800bb0a:	ab1d      	add	r3, sp, #116	; 0x74
 800bb0c:	9002      	str	r0, [sp, #8]
 800bb0e:	9006      	str	r0, [sp, #24]
 800bb10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb14:	4809      	ldr	r0, [pc, #36]	; (800bb3c <siprintf+0x38>)
 800bb16:	9107      	str	r1, [sp, #28]
 800bb18:	9104      	str	r1, [sp, #16]
 800bb1a:	4909      	ldr	r1, [pc, #36]	; (800bb40 <siprintf+0x3c>)
 800bb1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb20:	9105      	str	r1, [sp, #20]
 800bb22:	6800      	ldr	r0, [r0, #0]
 800bb24:	9301      	str	r3, [sp, #4]
 800bb26:	a902      	add	r1, sp, #8
 800bb28:	f003 f9b4 	bl	800ee94 <_svfiprintf_r>
 800bb2c:	9b02      	ldr	r3, [sp, #8]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	b01c      	add	sp, #112	; 0x70
 800bb34:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb38:	b003      	add	sp, #12
 800bb3a:	4770      	bx	lr
 800bb3c:	2000000c 	.word	0x2000000c
 800bb40:	ffff0208 	.word	0xffff0208

0800bb44 <sulp>:
 800bb44:	b570      	push	{r4, r5, r6, lr}
 800bb46:	4604      	mov	r4, r0
 800bb48:	460d      	mov	r5, r1
 800bb4a:	ec45 4b10 	vmov	d0, r4, r5
 800bb4e:	4616      	mov	r6, r2
 800bb50:	f002 fefe 	bl	800e950 <__ulp>
 800bb54:	ec51 0b10 	vmov	r0, r1, d0
 800bb58:	b17e      	cbz	r6, 800bb7a <sulp+0x36>
 800bb5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bb5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dd09      	ble.n	800bb7a <sulp+0x36>
 800bb66:	051b      	lsls	r3, r3, #20
 800bb68:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bb6c:	2400      	movs	r4, #0
 800bb6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bb72:	4622      	mov	r2, r4
 800bb74:	462b      	mov	r3, r5
 800bb76:	f7f4 fd3f 	bl	80005f8 <__aeabi_dmul>
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}
 800bb7c:	0000      	movs	r0, r0
	...

0800bb80 <_strtod_l>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	ed2d 8b02 	vpush	{d8}
 800bb88:	b09d      	sub	sp, #116	; 0x74
 800bb8a:	461f      	mov	r7, r3
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9318      	str	r3, [sp, #96]	; 0x60
 800bb90:	4ba2      	ldr	r3, [pc, #648]	; (800be1c <_strtod_l+0x29c>)
 800bb92:	9213      	str	r2, [sp, #76]	; 0x4c
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	9305      	str	r3, [sp, #20]
 800bb98:	4604      	mov	r4, r0
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	4688      	mov	r8, r1
 800bb9e:	f7f4 fb17 	bl	80001d0 <strlen>
 800bba2:	f04f 0a00 	mov.w	sl, #0
 800bba6:	4605      	mov	r5, r0
 800bba8:	f04f 0b00 	mov.w	fp, #0
 800bbac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bbb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbb2:	781a      	ldrb	r2, [r3, #0]
 800bbb4:	2a2b      	cmp	r2, #43	; 0x2b
 800bbb6:	d04e      	beq.n	800bc56 <_strtod_l+0xd6>
 800bbb8:	d83b      	bhi.n	800bc32 <_strtod_l+0xb2>
 800bbba:	2a0d      	cmp	r2, #13
 800bbbc:	d834      	bhi.n	800bc28 <_strtod_l+0xa8>
 800bbbe:	2a08      	cmp	r2, #8
 800bbc0:	d834      	bhi.n	800bc2c <_strtod_l+0xac>
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	d03e      	beq.n	800bc44 <_strtod_l+0xc4>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	930a      	str	r3, [sp, #40]	; 0x28
 800bbca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bbcc:	7833      	ldrb	r3, [r6, #0]
 800bbce:	2b30      	cmp	r3, #48	; 0x30
 800bbd0:	f040 80b0 	bne.w	800bd34 <_strtod_l+0x1b4>
 800bbd4:	7873      	ldrb	r3, [r6, #1]
 800bbd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbda:	2b58      	cmp	r3, #88	; 0x58
 800bbdc:	d168      	bne.n	800bcb0 <_strtod_l+0x130>
 800bbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	ab18      	add	r3, sp, #96	; 0x60
 800bbe4:	9702      	str	r7, [sp, #8]
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	4a8d      	ldr	r2, [pc, #564]	; (800be20 <_strtod_l+0x2a0>)
 800bbea:	ab19      	add	r3, sp, #100	; 0x64
 800bbec:	a917      	add	r1, sp, #92	; 0x5c
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f001 ffae 	bl	800db50 <__gethex>
 800bbf4:	f010 0707 	ands.w	r7, r0, #7
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	d005      	beq.n	800bc08 <_strtod_l+0x88>
 800bbfc:	2f06      	cmp	r7, #6
 800bbfe:	d12c      	bne.n	800bc5a <_strtod_l+0xda>
 800bc00:	3601      	adds	r6, #1
 800bc02:	2300      	movs	r3, #0
 800bc04:	9617      	str	r6, [sp, #92]	; 0x5c
 800bc06:	930a      	str	r3, [sp, #40]	; 0x28
 800bc08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f040 8590 	bne.w	800c730 <_strtod_l+0xbb0>
 800bc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc12:	b1eb      	cbz	r3, 800bc50 <_strtod_l+0xd0>
 800bc14:	4652      	mov	r2, sl
 800bc16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc1a:	ec43 2b10 	vmov	d0, r2, r3
 800bc1e:	b01d      	add	sp, #116	; 0x74
 800bc20:	ecbd 8b02 	vpop	{d8}
 800bc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc28:	2a20      	cmp	r2, #32
 800bc2a:	d1cc      	bne.n	800bbc6 <_strtod_l+0x46>
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc30:	e7be      	b.n	800bbb0 <_strtod_l+0x30>
 800bc32:	2a2d      	cmp	r2, #45	; 0x2d
 800bc34:	d1c7      	bne.n	800bbc6 <_strtod_l+0x46>
 800bc36:	2201      	movs	r2, #1
 800bc38:	920a      	str	r2, [sp, #40]	; 0x28
 800bc3a:	1c5a      	adds	r2, r3, #1
 800bc3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc3e:	785b      	ldrb	r3, [r3, #1]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1c2      	bne.n	800bbca <_strtod_l+0x4a>
 800bc44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f040 856e 	bne.w	800c72c <_strtod_l+0xbac>
 800bc50:	4652      	mov	r2, sl
 800bc52:	465b      	mov	r3, fp
 800bc54:	e7e1      	b.n	800bc1a <_strtod_l+0x9a>
 800bc56:	2200      	movs	r2, #0
 800bc58:	e7ee      	b.n	800bc38 <_strtod_l+0xb8>
 800bc5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc5c:	b13a      	cbz	r2, 800bc6e <_strtod_l+0xee>
 800bc5e:	2135      	movs	r1, #53	; 0x35
 800bc60:	a81a      	add	r0, sp, #104	; 0x68
 800bc62:	f002 ff80 	bl	800eb66 <__copybits>
 800bc66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f002 fb3f 	bl	800e2ec <_Bfree>
 800bc6e:	3f01      	subs	r7, #1
 800bc70:	2f04      	cmp	r7, #4
 800bc72:	d806      	bhi.n	800bc82 <_strtod_l+0x102>
 800bc74:	e8df f007 	tbb	[pc, r7]
 800bc78:	1714030a 	.word	0x1714030a
 800bc7c:	0a          	.byte	0x0a
 800bc7d:	00          	.byte	0x00
 800bc7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bc82:	0728      	lsls	r0, r5, #28
 800bc84:	d5c0      	bpl.n	800bc08 <_strtod_l+0x88>
 800bc86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bc8a:	e7bd      	b.n	800bc08 <_strtod_l+0x88>
 800bc8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bc90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bc92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bc9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bc9e:	e7f0      	b.n	800bc82 <_strtod_l+0x102>
 800bca0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800be24 <_strtod_l+0x2a4>
 800bca4:	e7ed      	b.n	800bc82 <_strtod_l+0x102>
 800bca6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bcaa:	f04f 3aff 	mov.w	sl, #4294967295
 800bcae:	e7e8      	b.n	800bc82 <_strtod_l+0x102>
 800bcb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bcb6:	785b      	ldrb	r3, [r3, #1]
 800bcb8:	2b30      	cmp	r3, #48	; 0x30
 800bcba:	d0f9      	beq.n	800bcb0 <_strtod_l+0x130>
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d0a3      	beq.n	800bc08 <_strtod_l+0x88>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	f04f 0900 	mov.w	r9, #0
 800bcc6:	9304      	str	r3, [sp, #16]
 800bcc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcca:	9308      	str	r3, [sp, #32]
 800bccc:	f8cd 901c 	str.w	r9, [sp, #28]
 800bcd0:	464f      	mov	r7, r9
 800bcd2:	220a      	movs	r2, #10
 800bcd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bcd6:	7806      	ldrb	r6, [r0, #0]
 800bcd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bcdc:	b2d9      	uxtb	r1, r3
 800bcde:	2909      	cmp	r1, #9
 800bce0:	d92a      	bls.n	800bd38 <_strtod_l+0x1b8>
 800bce2:	9905      	ldr	r1, [sp, #20]
 800bce4:	462a      	mov	r2, r5
 800bce6:	f003 fb8a 	bl	800f3fe <strncmp>
 800bcea:	b398      	cbz	r0, 800bd54 <_strtod_l+0x1d4>
 800bcec:	2000      	movs	r0, #0
 800bcee:	4632      	mov	r2, r6
 800bcf0:	463d      	mov	r5, r7
 800bcf2:	9005      	str	r0, [sp, #20]
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2a65      	cmp	r2, #101	; 0x65
 800bcf8:	d001      	beq.n	800bcfe <_strtod_l+0x17e>
 800bcfa:	2a45      	cmp	r2, #69	; 0x45
 800bcfc:	d118      	bne.n	800bd30 <_strtod_l+0x1b0>
 800bcfe:	b91d      	cbnz	r5, 800bd08 <_strtod_l+0x188>
 800bd00:	9a04      	ldr	r2, [sp, #16]
 800bd02:	4302      	orrs	r2, r0
 800bd04:	d09e      	beq.n	800bc44 <_strtod_l+0xc4>
 800bd06:	2500      	movs	r5, #0
 800bd08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bd0c:	f108 0201 	add.w	r2, r8, #1
 800bd10:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd12:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bd16:	2a2b      	cmp	r2, #43	; 0x2b
 800bd18:	d075      	beq.n	800be06 <_strtod_l+0x286>
 800bd1a:	2a2d      	cmp	r2, #45	; 0x2d
 800bd1c:	d07b      	beq.n	800be16 <_strtod_l+0x296>
 800bd1e:	f04f 0c00 	mov.w	ip, #0
 800bd22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bd26:	2909      	cmp	r1, #9
 800bd28:	f240 8082 	bls.w	800be30 <_strtod_l+0x2b0>
 800bd2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bd30:	2600      	movs	r6, #0
 800bd32:	e09d      	b.n	800be70 <_strtod_l+0x2f0>
 800bd34:	2300      	movs	r3, #0
 800bd36:	e7c4      	b.n	800bcc2 <_strtod_l+0x142>
 800bd38:	2f08      	cmp	r7, #8
 800bd3a:	bfd8      	it	le
 800bd3c:	9907      	ldrle	r1, [sp, #28]
 800bd3e:	f100 0001 	add.w	r0, r0, #1
 800bd42:	bfda      	itte	le
 800bd44:	fb02 3301 	mlale	r3, r2, r1, r3
 800bd48:	9307      	strle	r3, [sp, #28]
 800bd4a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bd4e:	3701      	adds	r7, #1
 800bd50:	9017      	str	r0, [sp, #92]	; 0x5c
 800bd52:	e7bf      	b.n	800bcd4 <_strtod_l+0x154>
 800bd54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd56:	195a      	adds	r2, r3, r5
 800bd58:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd5a:	5d5a      	ldrb	r2, [r3, r5]
 800bd5c:	2f00      	cmp	r7, #0
 800bd5e:	d037      	beq.n	800bdd0 <_strtod_l+0x250>
 800bd60:	9005      	str	r0, [sp, #20]
 800bd62:	463d      	mov	r5, r7
 800bd64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bd68:	2b09      	cmp	r3, #9
 800bd6a:	d912      	bls.n	800bd92 <_strtod_l+0x212>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e7c2      	b.n	800bcf6 <_strtod_l+0x176>
 800bd70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd76:	785a      	ldrb	r2, [r3, #1]
 800bd78:	3001      	adds	r0, #1
 800bd7a:	2a30      	cmp	r2, #48	; 0x30
 800bd7c:	d0f8      	beq.n	800bd70 <_strtod_l+0x1f0>
 800bd7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bd82:	2b08      	cmp	r3, #8
 800bd84:	f200 84d9 	bhi.w	800c73a <_strtod_l+0xbba>
 800bd88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd8a:	9005      	str	r0, [sp, #20]
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	9308      	str	r3, [sp, #32]
 800bd90:	4605      	mov	r5, r0
 800bd92:	3a30      	subs	r2, #48	; 0x30
 800bd94:	f100 0301 	add.w	r3, r0, #1
 800bd98:	d014      	beq.n	800bdc4 <_strtod_l+0x244>
 800bd9a:	9905      	ldr	r1, [sp, #20]
 800bd9c:	4419      	add	r1, r3
 800bd9e:	9105      	str	r1, [sp, #20]
 800bda0:	462b      	mov	r3, r5
 800bda2:	eb00 0e05 	add.w	lr, r0, r5
 800bda6:	210a      	movs	r1, #10
 800bda8:	4573      	cmp	r3, lr
 800bdaa:	d113      	bne.n	800bdd4 <_strtod_l+0x254>
 800bdac:	182b      	adds	r3, r5, r0
 800bdae:	2b08      	cmp	r3, #8
 800bdb0:	f105 0501 	add.w	r5, r5, #1
 800bdb4:	4405      	add	r5, r0
 800bdb6:	dc1c      	bgt.n	800bdf2 <_strtod_l+0x272>
 800bdb8:	9907      	ldr	r1, [sp, #28]
 800bdba:	230a      	movs	r3, #10
 800bdbc:	fb03 2301 	mla	r3, r3, r1, r2
 800bdc0:	9307      	str	r3, [sp, #28]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bdc6:	1c51      	adds	r1, r2, #1
 800bdc8:	9117      	str	r1, [sp, #92]	; 0x5c
 800bdca:	7852      	ldrb	r2, [r2, #1]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	e7c9      	b.n	800bd64 <_strtod_l+0x1e4>
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	e7d2      	b.n	800bd7a <_strtod_l+0x1fa>
 800bdd4:	2b08      	cmp	r3, #8
 800bdd6:	dc04      	bgt.n	800bde2 <_strtod_l+0x262>
 800bdd8:	9e07      	ldr	r6, [sp, #28]
 800bdda:	434e      	muls	r6, r1
 800bddc:	9607      	str	r6, [sp, #28]
 800bdde:	3301      	adds	r3, #1
 800bde0:	e7e2      	b.n	800bda8 <_strtod_l+0x228>
 800bde2:	f103 0c01 	add.w	ip, r3, #1
 800bde6:	f1bc 0f10 	cmp.w	ip, #16
 800bdea:	bfd8      	it	le
 800bdec:	fb01 f909 	mulle.w	r9, r1, r9
 800bdf0:	e7f5      	b.n	800bdde <_strtod_l+0x25e>
 800bdf2:	2d10      	cmp	r5, #16
 800bdf4:	bfdc      	itt	le
 800bdf6:	230a      	movle	r3, #10
 800bdf8:	fb03 2909 	mlale	r9, r3, r9, r2
 800bdfc:	e7e1      	b.n	800bdc2 <_strtod_l+0x242>
 800bdfe:	2300      	movs	r3, #0
 800be00:	9305      	str	r3, [sp, #20]
 800be02:	2301      	movs	r3, #1
 800be04:	e77c      	b.n	800bd00 <_strtod_l+0x180>
 800be06:	f04f 0c00 	mov.w	ip, #0
 800be0a:	f108 0202 	add.w	r2, r8, #2
 800be0e:	9217      	str	r2, [sp, #92]	; 0x5c
 800be10:	f898 2002 	ldrb.w	r2, [r8, #2]
 800be14:	e785      	b.n	800bd22 <_strtod_l+0x1a2>
 800be16:	f04f 0c01 	mov.w	ip, #1
 800be1a:	e7f6      	b.n	800be0a <_strtod_l+0x28a>
 800be1c:	08010bfc 	.word	0x08010bfc
 800be20:	08010950 	.word	0x08010950
 800be24:	7ff00000 	.word	0x7ff00000
 800be28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be2a:	1c51      	adds	r1, r2, #1
 800be2c:	9117      	str	r1, [sp, #92]	; 0x5c
 800be2e:	7852      	ldrb	r2, [r2, #1]
 800be30:	2a30      	cmp	r2, #48	; 0x30
 800be32:	d0f9      	beq.n	800be28 <_strtod_l+0x2a8>
 800be34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800be38:	2908      	cmp	r1, #8
 800be3a:	f63f af79 	bhi.w	800bd30 <_strtod_l+0x1b0>
 800be3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800be42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be44:	9206      	str	r2, [sp, #24]
 800be46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be48:	1c51      	adds	r1, r2, #1
 800be4a:	9117      	str	r1, [sp, #92]	; 0x5c
 800be4c:	7852      	ldrb	r2, [r2, #1]
 800be4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800be52:	2e09      	cmp	r6, #9
 800be54:	d937      	bls.n	800bec6 <_strtod_l+0x346>
 800be56:	9e06      	ldr	r6, [sp, #24]
 800be58:	1b89      	subs	r1, r1, r6
 800be5a:	2908      	cmp	r1, #8
 800be5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800be60:	dc02      	bgt.n	800be68 <_strtod_l+0x2e8>
 800be62:	4576      	cmp	r6, lr
 800be64:	bfa8      	it	ge
 800be66:	4676      	movge	r6, lr
 800be68:	f1bc 0f00 	cmp.w	ip, #0
 800be6c:	d000      	beq.n	800be70 <_strtod_l+0x2f0>
 800be6e:	4276      	negs	r6, r6
 800be70:	2d00      	cmp	r5, #0
 800be72:	d14d      	bne.n	800bf10 <_strtod_l+0x390>
 800be74:	9904      	ldr	r1, [sp, #16]
 800be76:	4301      	orrs	r1, r0
 800be78:	f47f aec6 	bne.w	800bc08 <_strtod_l+0x88>
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f47f aee1 	bne.w	800bc44 <_strtod_l+0xc4>
 800be82:	2a69      	cmp	r2, #105	; 0x69
 800be84:	d027      	beq.n	800bed6 <_strtod_l+0x356>
 800be86:	dc24      	bgt.n	800bed2 <_strtod_l+0x352>
 800be88:	2a49      	cmp	r2, #73	; 0x49
 800be8a:	d024      	beq.n	800bed6 <_strtod_l+0x356>
 800be8c:	2a4e      	cmp	r2, #78	; 0x4e
 800be8e:	f47f aed9 	bne.w	800bc44 <_strtod_l+0xc4>
 800be92:	499f      	ldr	r1, [pc, #636]	; (800c110 <_strtod_l+0x590>)
 800be94:	a817      	add	r0, sp, #92	; 0x5c
 800be96:	f002 f8b3 	bl	800e000 <__match>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	f43f aed2 	beq.w	800bc44 <_strtod_l+0xc4>
 800bea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b28      	cmp	r3, #40	; 0x28
 800bea6:	d12d      	bne.n	800bf04 <_strtod_l+0x384>
 800bea8:	499a      	ldr	r1, [pc, #616]	; (800c114 <_strtod_l+0x594>)
 800beaa:	aa1a      	add	r2, sp, #104	; 0x68
 800beac:	a817      	add	r0, sp, #92	; 0x5c
 800beae:	f002 f8bb 	bl	800e028 <__hexnan>
 800beb2:	2805      	cmp	r0, #5
 800beb4:	d126      	bne.n	800bf04 <_strtod_l+0x384>
 800beb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800beb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bebc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bec0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bec4:	e6a0      	b.n	800bc08 <_strtod_l+0x88>
 800bec6:	210a      	movs	r1, #10
 800bec8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800becc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bed0:	e7b9      	b.n	800be46 <_strtod_l+0x2c6>
 800bed2:	2a6e      	cmp	r2, #110	; 0x6e
 800bed4:	e7db      	b.n	800be8e <_strtod_l+0x30e>
 800bed6:	4990      	ldr	r1, [pc, #576]	; (800c118 <_strtod_l+0x598>)
 800bed8:	a817      	add	r0, sp, #92	; 0x5c
 800beda:	f002 f891 	bl	800e000 <__match>
 800bede:	2800      	cmp	r0, #0
 800bee0:	f43f aeb0 	beq.w	800bc44 <_strtod_l+0xc4>
 800bee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bee6:	498d      	ldr	r1, [pc, #564]	; (800c11c <_strtod_l+0x59c>)
 800bee8:	3b01      	subs	r3, #1
 800beea:	a817      	add	r0, sp, #92	; 0x5c
 800beec:	9317      	str	r3, [sp, #92]	; 0x5c
 800beee:	f002 f887 	bl	800e000 <__match>
 800bef2:	b910      	cbnz	r0, 800befa <_strtod_l+0x37a>
 800bef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bef6:	3301      	adds	r3, #1
 800bef8:	9317      	str	r3, [sp, #92]	; 0x5c
 800befa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c12c <_strtod_l+0x5ac>
 800befe:	f04f 0a00 	mov.w	sl, #0
 800bf02:	e681      	b.n	800bc08 <_strtod_l+0x88>
 800bf04:	4886      	ldr	r0, [pc, #536]	; (800c120 <_strtod_l+0x5a0>)
 800bf06:	f003 fa1f 	bl	800f348 <nan>
 800bf0a:	ec5b ab10 	vmov	sl, fp, d0
 800bf0e:	e67b      	b.n	800bc08 <_strtod_l+0x88>
 800bf10:	9b05      	ldr	r3, [sp, #20]
 800bf12:	9807      	ldr	r0, [sp, #28]
 800bf14:	1af3      	subs	r3, r6, r3
 800bf16:	2f00      	cmp	r7, #0
 800bf18:	bf08      	it	eq
 800bf1a:	462f      	moveq	r7, r5
 800bf1c:	2d10      	cmp	r5, #16
 800bf1e:	9306      	str	r3, [sp, #24]
 800bf20:	46a8      	mov	r8, r5
 800bf22:	bfa8      	it	ge
 800bf24:	f04f 0810 	movge.w	r8, #16
 800bf28:	f7f4 faec 	bl	8000504 <__aeabi_ui2d>
 800bf2c:	2d09      	cmp	r5, #9
 800bf2e:	4682      	mov	sl, r0
 800bf30:	468b      	mov	fp, r1
 800bf32:	dd13      	ble.n	800bf5c <_strtod_l+0x3dc>
 800bf34:	4b7b      	ldr	r3, [pc, #492]	; (800c124 <_strtod_l+0x5a4>)
 800bf36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bf3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bf3e:	f7f4 fb5b 	bl	80005f8 <__aeabi_dmul>
 800bf42:	4682      	mov	sl, r0
 800bf44:	4648      	mov	r0, r9
 800bf46:	468b      	mov	fp, r1
 800bf48:	f7f4 fadc 	bl	8000504 <__aeabi_ui2d>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	460b      	mov	r3, r1
 800bf50:	4650      	mov	r0, sl
 800bf52:	4659      	mov	r1, fp
 800bf54:	f7f4 f99a 	bl	800028c <__adddf3>
 800bf58:	4682      	mov	sl, r0
 800bf5a:	468b      	mov	fp, r1
 800bf5c:	2d0f      	cmp	r5, #15
 800bf5e:	dc38      	bgt.n	800bfd2 <_strtod_l+0x452>
 800bf60:	9b06      	ldr	r3, [sp, #24]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f43f ae50 	beq.w	800bc08 <_strtod_l+0x88>
 800bf68:	dd24      	ble.n	800bfb4 <_strtod_l+0x434>
 800bf6a:	2b16      	cmp	r3, #22
 800bf6c:	dc0b      	bgt.n	800bf86 <_strtod_l+0x406>
 800bf6e:	496d      	ldr	r1, [pc, #436]	; (800c124 <_strtod_l+0x5a4>)
 800bf70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf78:	4652      	mov	r2, sl
 800bf7a:	465b      	mov	r3, fp
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	4682      	mov	sl, r0
 800bf82:	468b      	mov	fp, r1
 800bf84:	e640      	b.n	800bc08 <_strtod_l+0x88>
 800bf86:	9a06      	ldr	r2, [sp, #24]
 800bf88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	db20      	blt.n	800bfd2 <_strtod_l+0x452>
 800bf90:	4c64      	ldr	r4, [pc, #400]	; (800c124 <_strtod_l+0x5a4>)
 800bf92:	f1c5 050f 	rsb	r5, r5, #15
 800bf96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bf9a:	4652      	mov	r2, sl
 800bf9c:	465b      	mov	r3, fp
 800bf9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa2:	f7f4 fb29 	bl	80005f8 <__aeabi_dmul>
 800bfa6:	9b06      	ldr	r3, [sp, #24]
 800bfa8:	1b5d      	subs	r5, r3, r5
 800bfaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bfae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bfb2:	e7e3      	b.n	800bf7c <_strtod_l+0x3fc>
 800bfb4:	9b06      	ldr	r3, [sp, #24]
 800bfb6:	3316      	adds	r3, #22
 800bfb8:	db0b      	blt.n	800bfd2 <_strtod_l+0x452>
 800bfba:	9b05      	ldr	r3, [sp, #20]
 800bfbc:	1b9e      	subs	r6, r3, r6
 800bfbe:	4b59      	ldr	r3, [pc, #356]	; (800c124 <_strtod_l+0x5a4>)
 800bfc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bfc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bfc8:	4650      	mov	r0, sl
 800bfca:	4659      	mov	r1, fp
 800bfcc:	f7f4 fc3e 	bl	800084c <__aeabi_ddiv>
 800bfd0:	e7d6      	b.n	800bf80 <_strtod_l+0x400>
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	eba5 0808 	sub.w	r8, r5, r8
 800bfd8:	4498      	add	r8, r3
 800bfda:	f1b8 0f00 	cmp.w	r8, #0
 800bfde:	dd74      	ble.n	800c0ca <_strtod_l+0x54a>
 800bfe0:	f018 030f 	ands.w	r3, r8, #15
 800bfe4:	d00a      	beq.n	800bffc <_strtod_l+0x47c>
 800bfe6:	494f      	ldr	r1, [pc, #316]	; (800c124 <_strtod_l+0x5a4>)
 800bfe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bfec:	4652      	mov	r2, sl
 800bfee:	465b      	mov	r3, fp
 800bff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bff4:	f7f4 fb00 	bl	80005f8 <__aeabi_dmul>
 800bff8:	4682      	mov	sl, r0
 800bffa:	468b      	mov	fp, r1
 800bffc:	f038 080f 	bics.w	r8, r8, #15
 800c000:	d04f      	beq.n	800c0a2 <_strtod_l+0x522>
 800c002:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c006:	dd22      	ble.n	800c04e <_strtod_l+0x4ce>
 800c008:	2500      	movs	r5, #0
 800c00a:	462e      	mov	r6, r5
 800c00c:	9507      	str	r5, [sp, #28]
 800c00e:	9505      	str	r5, [sp, #20]
 800c010:	2322      	movs	r3, #34	; 0x22
 800c012:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c12c <_strtod_l+0x5ac>
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	f04f 0a00 	mov.w	sl, #0
 800c01c:	9b07      	ldr	r3, [sp, #28]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f43f adf2 	beq.w	800bc08 <_strtod_l+0x88>
 800c024:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c026:	4620      	mov	r0, r4
 800c028:	f002 f960 	bl	800e2ec <_Bfree>
 800c02c:	9905      	ldr	r1, [sp, #20]
 800c02e:	4620      	mov	r0, r4
 800c030:	f002 f95c 	bl	800e2ec <_Bfree>
 800c034:	4631      	mov	r1, r6
 800c036:	4620      	mov	r0, r4
 800c038:	f002 f958 	bl	800e2ec <_Bfree>
 800c03c:	9907      	ldr	r1, [sp, #28]
 800c03e:	4620      	mov	r0, r4
 800c040:	f002 f954 	bl	800e2ec <_Bfree>
 800c044:	4629      	mov	r1, r5
 800c046:	4620      	mov	r0, r4
 800c048:	f002 f950 	bl	800e2ec <_Bfree>
 800c04c:	e5dc      	b.n	800bc08 <_strtod_l+0x88>
 800c04e:	4b36      	ldr	r3, [pc, #216]	; (800c128 <_strtod_l+0x5a8>)
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	2300      	movs	r3, #0
 800c054:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c058:	4650      	mov	r0, sl
 800c05a:	4659      	mov	r1, fp
 800c05c:	4699      	mov	r9, r3
 800c05e:	f1b8 0f01 	cmp.w	r8, #1
 800c062:	dc21      	bgt.n	800c0a8 <_strtod_l+0x528>
 800c064:	b10b      	cbz	r3, 800c06a <_strtod_l+0x4ea>
 800c066:	4682      	mov	sl, r0
 800c068:	468b      	mov	fp, r1
 800c06a:	4b2f      	ldr	r3, [pc, #188]	; (800c128 <_strtod_l+0x5a8>)
 800c06c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c070:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c074:	4652      	mov	r2, sl
 800c076:	465b      	mov	r3, fp
 800c078:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c07c:	f7f4 fabc 	bl	80005f8 <__aeabi_dmul>
 800c080:	4b2a      	ldr	r3, [pc, #168]	; (800c12c <_strtod_l+0x5ac>)
 800c082:	460a      	mov	r2, r1
 800c084:	400b      	ands	r3, r1
 800c086:	492a      	ldr	r1, [pc, #168]	; (800c130 <_strtod_l+0x5b0>)
 800c088:	428b      	cmp	r3, r1
 800c08a:	4682      	mov	sl, r0
 800c08c:	d8bc      	bhi.n	800c008 <_strtod_l+0x488>
 800c08e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c092:	428b      	cmp	r3, r1
 800c094:	bf86      	itte	hi
 800c096:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c134 <_strtod_l+0x5b4>
 800c09a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c09e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	9304      	str	r3, [sp, #16]
 800c0a6:	e084      	b.n	800c1b2 <_strtod_l+0x632>
 800c0a8:	f018 0f01 	tst.w	r8, #1
 800c0ac:	d005      	beq.n	800c0ba <_strtod_l+0x53a>
 800c0ae:	9b04      	ldr	r3, [sp, #16]
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f7f4 faa0 	bl	80005f8 <__aeabi_dmul>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	9a04      	ldr	r2, [sp, #16]
 800c0bc:	3208      	adds	r2, #8
 800c0be:	f109 0901 	add.w	r9, r9, #1
 800c0c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c0c6:	9204      	str	r2, [sp, #16]
 800c0c8:	e7c9      	b.n	800c05e <_strtod_l+0x4de>
 800c0ca:	d0ea      	beq.n	800c0a2 <_strtod_l+0x522>
 800c0cc:	f1c8 0800 	rsb	r8, r8, #0
 800c0d0:	f018 020f 	ands.w	r2, r8, #15
 800c0d4:	d00a      	beq.n	800c0ec <_strtod_l+0x56c>
 800c0d6:	4b13      	ldr	r3, [pc, #76]	; (800c124 <_strtod_l+0x5a4>)
 800c0d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0dc:	4650      	mov	r0, sl
 800c0de:	4659      	mov	r1, fp
 800c0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e4:	f7f4 fbb2 	bl	800084c <__aeabi_ddiv>
 800c0e8:	4682      	mov	sl, r0
 800c0ea:	468b      	mov	fp, r1
 800c0ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c0f0:	d0d7      	beq.n	800c0a2 <_strtod_l+0x522>
 800c0f2:	f1b8 0f1f 	cmp.w	r8, #31
 800c0f6:	dd1f      	ble.n	800c138 <_strtod_l+0x5b8>
 800c0f8:	2500      	movs	r5, #0
 800c0fa:	462e      	mov	r6, r5
 800c0fc:	9507      	str	r5, [sp, #28]
 800c0fe:	9505      	str	r5, [sp, #20]
 800c100:	2322      	movs	r3, #34	; 0x22
 800c102:	f04f 0a00 	mov.w	sl, #0
 800c106:	f04f 0b00 	mov.w	fp, #0
 800c10a:	6023      	str	r3, [r4, #0]
 800c10c:	e786      	b.n	800c01c <_strtod_l+0x49c>
 800c10e:	bf00      	nop
 800c110:	08010921 	.word	0x08010921
 800c114:	08010964 	.word	0x08010964
 800c118:	08010919 	.word	0x08010919
 800c11c:	08010aa4 	.word	0x08010aa4
 800c120:	08010db8 	.word	0x08010db8
 800c124:	08010c98 	.word	0x08010c98
 800c128:	08010c70 	.word	0x08010c70
 800c12c:	7ff00000 	.word	0x7ff00000
 800c130:	7ca00000 	.word	0x7ca00000
 800c134:	7fefffff 	.word	0x7fefffff
 800c138:	f018 0310 	ands.w	r3, r8, #16
 800c13c:	bf18      	it	ne
 800c13e:	236a      	movne	r3, #106	; 0x6a
 800c140:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c4f0 <_strtod_l+0x970>
 800c144:	9304      	str	r3, [sp, #16]
 800c146:	4650      	mov	r0, sl
 800c148:	4659      	mov	r1, fp
 800c14a:	2300      	movs	r3, #0
 800c14c:	f018 0f01 	tst.w	r8, #1
 800c150:	d004      	beq.n	800c15c <_strtod_l+0x5dc>
 800c152:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c156:	f7f4 fa4f 	bl	80005f8 <__aeabi_dmul>
 800c15a:	2301      	movs	r3, #1
 800c15c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c160:	f109 0908 	add.w	r9, r9, #8
 800c164:	d1f2      	bne.n	800c14c <_strtod_l+0x5cc>
 800c166:	b10b      	cbz	r3, 800c16c <_strtod_l+0x5ec>
 800c168:	4682      	mov	sl, r0
 800c16a:	468b      	mov	fp, r1
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	b1c3      	cbz	r3, 800c1a2 <_strtod_l+0x622>
 800c170:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c174:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c178:	2b00      	cmp	r3, #0
 800c17a:	4659      	mov	r1, fp
 800c17c:	dd11      	ble.n	800c1a2 <_strtod_l+0x622>
 800c17e:	2b1f      	cmp	r3, #31
 800c180:	f340 8124 	ble.w	800c3cc <_strtod_l+0x84c>
 800c184:	2b34      	cmp	r3, #52	; 0x34
 800c186:	bfde      	ittt	le
 800c188:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c18c:	f04f 33ff 	movle.w	r3, #4294967295
 800c190:	fa03 f202 	lslle.w	r2, r3, r2
 800c194:	f04f 0a00 	mov.w	sl, #0
 800c198:	bfcc      	ite	gt
 800c19a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c19e:	ea02 0b01 	andle.w	fp, r2, r1
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4650      	mov	r0, sl
 800c1a8:	4659      	mov	r1, fp
 800c1aa:	f7f4 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d1a2      	bne.n	800c0f8 <_strtod_l+0x578>
 800c1b2:	9b07      	ldr	r3, [sp, #28]
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	9908      	ldr	r1, [sp, #32]
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	463a      	mov	r2, r7
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f002 f8fd 	bl	800e3bc <__s2b>
 800c1c2:	9007      	str	r0, [sp, #28]
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	f43f af1f 	beq.w	800c008 <_strtod_l+0x488>
 800c1ca:	9b05      	ldr	r3, [sp, #20]
 800c1cc:	1b9e      	subs	r6, r3, r6
 800c1ce:	9b06      	ldr	r3, [sp, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	bfb4      	ite	lt
 800c1d4:	4633      	movlt	r3, r6
 800c1d6:	2300      	movge	r3, #0
 800c1d8:	930c      	str	r3, [sp, #48]	; 0x30
 800c1da:	9b06      	ldr	r3, [sp, #24]
 800c1dc:	2500      	movs	r5, #0
 800c1de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c1e2:	9312      	str	r3, [sp, #72]	; 0x48
 800c1e4:	462e      	mov	r6, r5
 800c1e6:	9b07      	ldr	r3, [sp, #28]
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	6859      	ldr	r1, [r3, #4]
 800c1ec:	f002 f83e 	bl	800e26c <_Balloc>
 800c1f0:	9005      	str	r0, [sp, #20]
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	f43f af0c 	beq.w	800c010 <_strtod_l+0x490>
 800c1f8:	9b07      	ldr	r3, [sp, #28]
 800c1fa:	691a      	ldr	r2, [r3, #16]
 800c1fc:	3202      	adds	r2, #2
 800c1fe:	f103 010c 	add.w	r1, r3, #12
 800c202:	0092      	lsls	r2, r2, #2
 800c204:	300c      	adds	r0, #12
 800c206:	f7fe fd59 	bl	800acbc <memcpy>
 800c20a:	ec4b ab10 	vmov	d0, sl, fp
 800c20e:	aa1a      	add	r2, sp, #104	; 0x68
 800c210:	a919      	add	r1, sp, #100	; 0x64
 800c212:	4620      	mov	r0, r4
 800c214:	f002 fc18 	bl	800ea48 <__d2b>
 800c218:	ec4b ab18 	vmov	d8, sl, fp
 800c21c:	9018      	str	r0, [sp, #96]	; 0x60
 800c21e:	2800      	cmp	r0, #0
 800c220:	f43f aef6 	beq.w	800c010 <_strtod_l+0x490>
 800c224:	2101      	movs	r1, #1
 800c226:	4620      	mov	r0, r4
 800c228:	f002 f962 	bl	800e4f0 <__i2b>
 800c22c:	4606      	mov	r6, r0
 800c22e:	2800      	cmp	r0, #0
 800c230:	f43f aeee 	beq.w	800c010 <_strtod_l+0x490>
 800c234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c236:	9904      	ldr	r1, [sp, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	bfab      	itete	ge
 800c23c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c23e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c240:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c242:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c246:	bfac      	ite	ge
 800c248:	eb03 0902 	addge.w	r9, r3, r2
 800c24c:	1ad7      	sublt	r7, r2, r3
 800c24e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c250:	eba3 0801 	sub.w	r8, r3, r1
 800c254:	4490      	add	r8, r2
 800c256:	4ba1      	ldr	r3, [pc, #644]	; (800c4dc <_strtod_l+0x95c>)
 800c258:	f108 38ff 	add.w	r8, r8, #4294967295
 800c25c:	4598      	cmp	r8, r3
 800c25e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c262:	f280 80c7 	bge.w	800c3f4 <_strtod_l+0x874>
 800c266:	eba3 0308 	sub.w	r3, r3, r8
 800c26a:	2b1f      	cmp	r3, #31
 800c26c:	eba2 0203 	sub.w	r2, r2, r3
 800c270:	f04f 0101 	mov.w	r1, #1
 800c274:	f300 80b1 	bgt.w	800c3da <_strtod_l+0x85a>
 800c278:	fa01 f303 	lsl.w	r3, r1, r3
 800c27c:	930d      	str	r3, [sp, #52]	; 0x34
 800c27e:	2300      	movs	r3, #0
 800c280:	9308      	str	r3, [sp, #32]
 800c282:	eb09 0802 	add.w	r8, r9, r2
 800c286:	9b04      	ldr	r3, [sp, #16]
 800c288:	45c1      	cmp	r9, r8
 800c28a:	4417      	add	r7, r2
 800c28c:	441f      	add	r7, r3
 800c28e:	464b      	mov	r3, r9
 800c290:	bfa8      	it	ge
 800c292:	4643      	movge	r3, r8
 800c294:	42bb      	cmp	r3, r7
 800c296:	bfa8      	it	ge
 800c298:	463b      	movge	r3, r7
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	bfc2      	ittt	gt
 800c29e:	eba8 0803 	subgt.w	r8, r8, r3
 800c2a2:	1aff      	subgt	r7, r7, r3
 800c2a4:	eba9 0903 	subgt.w	r9, r9, r3
 800c2a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	dd17      	ble.n	800c2de <_strtod_l+0x75e>
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f002 f9dc 	bl	800e670 <__pow5mult>
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	f43f aea8 	beq.w	800c010 <_strtod_l+0x490>
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f002 f929 	bl	800e51c <__multiply>
 800c2ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	f43f ae9f 	beq.w	800c010 <_strtod_l+0x490>
 800c2d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f002 f809 	bl	800e2ec <_Bfree>
 800c2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2dc:	9318      	str	r3, [sp, #96]	; 0x60
 800c2de:	f1b8 0f00 	cmp.w	r8, #0
 800c2e2:	f300 808c 	bgt.w	800c3fe <_strtod_l+0x87e>
 800c2e6:	9b06      	ldr	r3, [sp, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dd08      	ble.n	800c2fe <_strtod_l+0x77e>
 800c2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2ee:	9905      	ldr	r1, [sp, #20]
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f002 f9bd 	bl	800e670 <__pow5mult>
 800c2f6:	9005      	str	r0, [sp, #20]
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	f43f ae89 	beq.w	800c010 <_strtod_l+0x490>
 800c2fe:	2f00      	cmp	r7, #0
 800c300:	dd08      	ble.n	800c314 <_strtod_l+0x794>
 800c302:	9905      	ldr	r1, [sp, #20]
 800c304:	463a      	mov	r2, r7
 800c306:	4620      	mov	r0, r4
 800c308:	f002 fa0c 	bl	800e724 <__lshift>
 800c30c:	9005      	str	r0, [sp, #20]
 800c30e:	2800      	cmp	r0, #0
 800c310:	f43f ae7e 	beq.w	800c010 <_strtod_l+0x490>
 800c314:	f1b9 0f00 	cmp.w	r9, #0
 800c318:	dd08      	ble.n	800c32c <_strtod_l+0x7ac>
 800c31a:	4631      	mov	r1, r6
 800c31c:	464a      	mov	r2, r9
 800c31e:	4620      	mov	r0, r4
 800c320:	f002 fa00 	bl	800e724 <__lshift>
 800c324:	4606      	mov	r6, r0
 800c326:	2800      	cmp	r0, #0
 800c328:	f43f ae72 	beq.w	800c010 <_strtod_l+0x490>
 800c32c:	9a05      	ldr	r2, [sp, #20]
 800c32e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c330:	4620      	mov	r0, r4
 800c332:	f002 fa83 	bl	800e83c <__mdiff>
 800c336:	4605      	mov	r5, r0
 800c338:	2800      	cmp	r0, #0
 800c33a:	f43f ae69 	beq.w	800c010 <_strtod_l+0x490>
 800c33e:	68c3      	ldr	r3, [r0, #12]
 800c340:	930b      	str	r3, [sp, #44]	; 0x2c
 800c342:	2300      	movs	r3, #0
 800c344:	60c3      	str	r3, [r0, #12]
 800c346:	4631      	mov	r1, r6
 800c348:	f002 fa5c 	bl	800e804 <__mcmp>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	da60      	bge.n	800c412 <_strtod_l+0x892>
 800c350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c352:	ea53 030a 	orrs.w	r3, r3, sl
 800c356:	f040 8082 	bne.w	800c45e <_strtod_l+0x8de>
 800c35a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d17d      	bne.n	800c45e <_strtod_l+0x8de>
 800c362:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c366:	0d1b      	lsrs	r3, r3, #20
 800c368:	051b      	lsls	r3, r3, #20
 800c36a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c36e:	d976      	bls.n	800c45e <_strtod_l+0x8de>
 800c370:	696b      	ldr	r3, [r5, #20]
 800c372:	b913      	cbnz	r3, 800c37a <_strtod_l+0x7fa>
 800c374:	692b      	ldr	r3, [r5, #16]
 800c376:	2b01      	cmp	r3, #1
 800c378:	dd71      	ble.n	800c45e <_strtod_l+0x8de>
 800c37a:	4629      	mov	r1, r5
 800c37c:	2201      	movs	r2, #1
 800c37e:	4620      	mov	r0, r4
 800c380:	f002 f9d0 	bl	800e724 <__lshift>
 800c384:	4631      	mov	r1, r6
 800c386:	4605      	mov	r5, r0
 800c388:	f002 fa3c 	bl	800e804 <__mcmp>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	dd66      	ble.n	800c45e <_strtod_l+0x8de>
 800c390:	9904      	ldr	r1, [sp, #16]
 800c392:	4a53      	ldr	r2, [pc, #332]	; (800c4e0 <_strtod_l+0x960>)
 800c394:	465b      	mov	r3, fp
 800c396:	2900      	cmp	r1, #0
 800c398:	f000 8081 	beq.w	800c49e <_strtod_l+0x91e>
 800c39c:	ea02 010b 	and.w	r1, r2, fp
 800c3a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c3a4:	dc7b      	bgt.n	800c49e <_strtod_l+0x91e>
 800c3a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c3aa:	f77f aea9 	ble.w	800c100 <_strtod_l+0x580>
 800c3ae:	4b4d      	ldr	r3, [pc, #308]	; (800c4e4 <_strtod_l+0x964>)
 800c3b0:	4650      	mov	r0, sl
 800c3b2:	4659      	mov	r1, fp
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f7f4 f91f 	bl	80005f8 <__aeabi_dmul>
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4303      	orrs	r3, r0
 800c3be:	bf08      	it	eq
 800c3c0:	2322      	moveq	r3, #34	; 0x22
 800c3c2:	4682      	mov	sl, r0
 800c3c4:	468b      	mov	fp, r1
 800c3c6:	bf08      	it	eq
 800c3c8:	6023      	streq	r3, [r4, #0]
 800c3ca:	e62b      	b.n	800c024 <_strtod_l+0x4a4>
 800c3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	ea03 0a0a 	and.w	sl, r3, sl
 800c3d8:	e6e3      	b.n	800c1a2 <_strtod_l+0x622>
 800c3da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c3de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c3e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c3e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c3ea:	fa01 f308 	lsl.w	r3, r1, r8
 800c3ee:	9308      	str	r3, [sp, #32]
 800c3f0:	910d      	str	r1, [sp, #52]	; 0x34
 800c3f2:	e746      	b.n	800c282 <_strtod_l+0x702>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9308      	str	r3, [sp, #32]
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	930d      	str	r3, [sp, #52]	; 0x34
 800c3fc:	e741      	b.n	800c282 <_strtod_l+0x702>
 800c3fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c400:	4642      	mov	r2, r8
 800c402:	4620      	mov	r0, r4
 800c404:	f002 f98e 	bl	800e724 <__lshift>
 800c408:	9018      	str	r0, [sp, #96]	; 0x60
 800c40a:	2800      	cmp	r0, #0
 800c40c:	f47f af6b 	bne.w	800c2e6 <_strtod_l+0x766>
 800c410:	e5fe      	b.n	800c010 <_strtod_l+0x490>
 800c412:	465f      	mov	r7, fp
 800c414:	d16e      	bne.n	800c4f4 <_strtod_l+0x974>
 800c416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c418:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c41c:	b342      	cbz	r2, 800c470 <_strtod_l+0x8f0>
 800c41e:	4a32      	ldr	r2, [pc, #200]	; (800c4e8 <_strtod_l+0x968>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d128      	bne.n	800c476 <_strtod_l+0x8f6>
 800c424:	9b04      	ldr	r3, [sp, #16]
 800c426:	4651      	mov	r1, sl
 800c428:	b1eb      	cbz	r3, 800c466 <_strtod_l+0x8e6>
 800c42a:	4b2d      	ldr	r3, [pc, #180]	; (800c4e0 <_strtod_l+0x960>)
 800c42c:	403b      	ands	r3, r7
 800c42e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c432:	f04f 32ff 	mov.w	r2, #4294967295
 800c436:	d819      	bhi.n	800c46c <_strtod_l+0x8ec>
 800c438:	0d1b      	lsrs	r3, r3, #20
 800c43a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c43e:	fa02 f303 	lsl.w	r3, r2, r3
 800c442:	4299      	cmp	r1, r3
 800c444:	d117      	bne.n	800c476 <_strtod_l+0x8f6>
 800c446:	4b29      	ldr	r3, [pc, #164]	; (800c4ec <_strtod_l+0x96c>)
 800c448:	429f      	cmp	r7, r3
 800c44a:	d102      	bne.n	800c452 <_strtod_l+0x8d2>
 800c44c:	3101      	adds	r1, #1
 800c44e:	f43f addf 	beq.w	800c010 <_strtod_l+0x490>
 800c452:	4b23      	ldr	r3, [pc, #140]	; (800c4e0 <_strtod_l+0x960>)
 800c454:	403b      	ands	r3, r7
 800c456:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c45a:	f04f 0a00 	mov.w	sl, #0
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1a4      	bne.n	800c3ae <_strtod_l+0x82e>
 800c464:	e5de      	b.n	800c024 <_strtod_l+0x4a4>
 800c466:	f04f 33ff 	mov.w	r3, #4294967295
 800c46a:	e7ea      	b.n	800c442 <_strtod_l+0x8c2>
 800c46c:	4613      	mov	r3, r2
 800c46e:	e7e8      	b.n	800c442 <_strtod_l+0x8c2>
 800c470:	ea53 030a 	orrs.w	r3, r3, sl
 800c474:	d08c      	beq.n	800c390 <_strtod_l+0x810>
 800c476:	9b08      	ldr	r3, [sp, #32]
 800c478:	b1db      	cbz	r3, 800c4b2 <_strtod_l+0x932>
 800c47a:	423b      	tst	r3, r7
 800c47c:	d0ef      	beq.n	800c45e <_strtod_l+0x8de>
 800c47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c480:	9a04      	ldr	r2, [sp, #16]
 800c482:	4650      	mov	r0, sl
 800c484:	4659      	mov	r1, fp
 800c486:	b1c3      	cbz	r3, 800c4ba <_strtod_l+0x93a>
 800c488:	f7ff fb5c 	bl	800bb44 <sulp>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	ec51 0b18 	vmov	r0, r1, d8
 800c494:	f7f3 fefa 	bl	800028c <__adddf3>
 800c498:	4682      	mov	sl, r0
 800c49a:	468b      	mov	fp, r1
 800c49c:	e7df      	b.n	800c45e <_strtod_l+0x8de>
 800c49e:	4013      	ands	r3, r2
 800c4a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c4a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c4a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c4ac:	f04f 3aff 	mov.w	sl, #4294967295
 800c4b0:	e7d5      	b.n	800c45e <_strtod_l+0x8de>
 800c4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4b4:	ea13 0f0a 	tst.w	r3, sl
 800c4b8:	e7e0      	b.n	800c47c <_strtod_l+0x8fc>
 800c4ba:	f7ff fb43 	bl	800bb44 <sulp>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	ec51 0b18 	vmov	r0, r1, d8
 800c4c6:	f7f3 fedf 	bl	8000288 <__aeabi_dsub>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4682      	mov	sl, r0
 800c4d0:	468b      	mov	fp, r1
 800c4d2:	f7f4 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d0c1      	beq.n	800c45e <_strtod_l+0x8de>
 800c4da:	e611      	b.n	800c100 <_strtod_l+0x580>
 800c4dc:	fffffc02 	.word	0xfffffc02
 800c4e0:	7ff00000 	.word	0x7ff00000
 800c4e4:	39500000 	.word	0x39500000
 800c4e8:	000fffff 	.word	0x000fffff
 800c4ec:	7fefffff 	.word	0x7fefffff
 800c4f0:	08010978 	.word	0x08010978
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f002 fb02 	bl	800eb00 <__ratio>
 800c4fc:	ec59 8b10 	vmov	r8, r9, d0
 800c500:	ee10 0a10 	vmov	r0, s0
 800c504:	2200      	movs	r2, #0
 800c506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c50a:	4649      	mov	r1, r9
 800c50c:	f7f4 faf0 	bl	8000af0 <__aeabi_dcmple>
 800c510:	2800      	cmp	r0, #0
 800c512:	d07a      	beq.n	800c60a <_strtod_l+0xa8a>
 800c514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c516:	2b00      	cmp	r3, #0
 800c518:	d04a      	beq.n	800c5b0 <_strtod_l+0xa30>
 800c51a:	4b95      	ldr	r3, [pc, #596]	; (800c770 <_strtod_l+0xbf0>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c522:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c770 <_strtod_l+0xbf0>
 800c526:	f04f 0800 	mov.w	r8, #0
 800c52a:	4b92      	ldr	r3, [pc, #584]	; (800c774 <_strtod_l+0xbf4>)
 800c52c:	403b      	ands	r3, r7
 800c52e:	930d      	str	r3, [sp, #52]	; 0x34
 800c530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c532:	4b91      	ldr	r3, [pc, #580]	; (800c778 <_strtod_l+0xbf8>)
 800c534:	429a      	cmp	r2, r3
 800c536:	f040 80b0 	bne.w	800c69a <_strtod_l+0xb1a>
 800c53a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c53e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c542:	ec4b ab10 	vmov	d0, sl, fp
 800c546:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c54a:	f002 fa01 	bl	800e950 <__ulp>
 800c54e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c552:	ec53 2b10 	vmov	r2, r3, d0
 800c556:	f7f4 f84f 	bl	80005f8 <__aeabi_dmul>
 800c55a:	4652      	mov	r2, sl
 800c55c:	465b      	mov	r3, fp
 800c55e:	f7f3 fe95 	bl	800028c <__adddf3>
 800c562:	460b      	mov	r3, r1
 800c564:	4983      	ldr	r1, [pc, #524]	; (800c774 <_strtod_l+0xbf4>)
 800c566:	4a85      	ldr	r2, [pc, #532]	; (800c77c <_strtod_l+0xbfc>)
 800c568:	4019      	ands	r1, r3
 800c56a:	4291      	cmp	r1, r2
 800c56c:	4682      	mov	sl, r0
 800c56e:	d960      	bls.n	800c632 <_strtod_l+0xab2>
 800c570:	ee18 3a90 	vmov	r3, s17
 800c574:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c578:	4293      	cmp	r3, r2
 800c57a:	d104      	bne.n	800c586 <_strtod_l+0xa06>
 800c57c:	ee18 3a10 	vmov	r3, s16
 800c580:	3301      	adds	r3, #1
 800c582:	f43f ad45 	beq.w	800c010 <_strtod_l+0x490>
 800c586:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c788 <_strtod_l+0xc08>
 800c58a:	f04f 3aff 	mov.w	sl, #4294967295
 800c58e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c590:	4620      	mov	r0, r4
 800c592:	f001 feab 	bl	800e2ec <_Bfree>
 800c596:	9905      	ldr	r1, [sp, #20]
 800c598:	4620      	mov	r0, r4
 800c59a:	f001 fea7 	bl	800e2ec <_Bfree>
 800c59e:	4631      	mov	r1, r6
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f001 fea3 	bl	800e2ec <_Bfree>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f001 fe9f 	bl	800e2ec <_Bfree>
 800c5ae:	e61a      	b.n	800c1e6 <_strtod_l+0x666>
 800c5b0:	f1ba 0f00 	cmp.w	sl, #0
 800c5b4:	d11b      	bne.n	800c5ee <_strtod_l+0xa6e>
 800c5b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5ba:	b9f3      	cbnz	r3, 800c5fa <_strtod_l+0xa7a>
 800c5bc:	4b6c      	ldr	r3, [pc, #432]	; (800c770 <_strtod_l+0xbf0>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f7f4 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800c5c8:	b9d0      	cbnz	r0, 800c600 <_strtod_l+0xa80>
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	4b6c      	ldr	r3, [pc, #432]	; (800c780 <_strtod_l+0xc00>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f7f4 f811 	bl	80005f8 <__aeabi_dmul>
 800c5d6:	4680      	mov	r8, r0
 800c5d8:	4689      	mov	r9, r1
 800c5da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c5de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c5e2:	9315      	str	r3, [sp, #84]	; 0x54
 800c5e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c5e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c5ec:	e79d      	b.n	800c52a <_strtod_l+0x9aa>
 800c5ee:	f1ba 0f01 	cmp.w	sl, #1
 800c5f2:	d102      	bne.n	800c5fa <_strtod_l+0xa7a>
 800c5f4:	2f00      	cmp	r7, #0
 800c5f6:	f43f ad83 	beq.w	800c100 <_strtod_l+0x580>
 800c5fa:	4b62      	ldr	r3, [pc, #392]	; (800c784 <_strtod_l+0xc04>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	e78e      	b.n	800c51e <_strtod_l+0x99e>
 800c600:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c780 <_strtod_l+0xc00>
 800c604:	f04f 0800 	mov.w	r8, #0
 800c608:	e7e7      	b.n	800c5da <_strtod_l+0xa5a>
 800c60a:	4b5d      	ldr	r3, [pc, #372]	; (800c780 <_strtod_l+0xc00>)
 800c60c:	4640      	mov	r0, r8
 800c60e:	4649      	mov	r1, r9
 800c610:	2200      	movs	r2, #0
 800c612:	f7f3 fff1 	bl	80005f8 <__aeabi_dmul>
 800c616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c618:	4680      	mov	r8, r0
 800c61a:	4689      	mov	r9, r1
 800c61c:	b933      	cbnz	r3, 800c62c <_strtod_l+0xaac>
 800c61e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c622:	900e      	str	r0, [sp, #56]	; 0x38
 800c624:	930f      	str	r3, [sp, #60]	; 0x3c
 800c626:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c62a:	e7dd      	b.n	800c5e8 <_strtod_l+0xa68>
 800c62c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c630:	e7f9      	b.n	800c626 <_strtod_l+0xaa6>
 800c632:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c636:	9b04      	ldr	r3, [sp, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1a8      	bne.n	800c58e <_strtod_l+0xa0e>
 800c63c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c642:	0d1b      	lsrs	r3, r3, #20
 800c644:	051b      	lsls	r3, r3, #20
 800c646:	429a      	cmp	r2, r3
 800c648:	d1a1      	bne.n	800c58e <_strtod_l+0xa0e>
 800c64a:	4640      	mov	r0, r8
 800c64c:	4649      	mov	r1, r9
 800c64e:	f7f4 fb33 	bl	8000cb8 <__aeabi_d2lz>
 800c652:	f7f3 ffa3 	bl	800059c <__aeabi_l2d>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4640      	mov	r0, r8
 800c65c:	4649      	mov	r1, r9
 800c65e:	f7f3 fe13 	bl	8000288 <__aeabi_dsub>
 800c662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c668:	ea43 030a 	orr.w	r3, r3, sl
 800c66c:	4313      	orrs	r3, r2
 800c66e:	4680      	mov	r8, r0
 800c670:	4689      	mov	r9, r1
 800c672:	d055      	beq.n	800c720 <_strtod_l+0xba0>
 800c674:	a336      	add	r3, pc, #216	; (adr r3, 800c750 <_strtod_l+0xbd0>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f4 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f47f acd0 	bne.w	800c024 <_strtod_l+0x4a4>
 800c684:	a334      	add	r3, pc, #208	; (adr r3, 800c758 <_strtod_l+0xbd8>)
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	4640      	mov	r0, r8
 800c68c:	4649      	mov	r1, r9
 800c68e:	f7f4 fa43 	bl	8000b18 <__aeabi_dcmpgt>
 800c692:	2800      	cmp	r0, #0
 800c694:	f43f af7b 	beq.w	800c58e <_strtod_l+0xa0e>
 800c698:	e4c4      	b.n	800c024 <_strtod_l+0x4a4>
 800c69a:	9b04      	ldr	r3, [sp, #16]
 800c69c:	b333      	cbz	r3, 800c6ec <_strtod_l+0xb6c>
 800c69e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c6a4:	d822      	bhi.n	800c6ec <_strtod_l+0xb6c>
 800c6a6:	a32e      	add	r3, pc, #184	; (adr r3, 800c760 <_strtod_l+0xbe0>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	4640      	mov	r0, r8
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	f7f4 fa1e 	bl	8000af0 <__aeabi_dcmple>
 800c6b4:	b1a0      	cbz	r0, 800c6e0 <_strtod_l+0xb60>
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	f7f4 fa75 	bl	8000ba8 <__aeabi_d2uiz>
 800c6be:	2801      	cmp	r0, #1
 800c6c0:	bf38      	it	cc
 800c6c2:	2001      	movcc	r0, #1
 800c6c4:	f7f3 ff1e 	bl	8000504 <__aeabi_ui2d>
 800c6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6ca:	4680      	mov	r8, r0
 800c6cc:	4689      	mov	r9, r1
 800c6ce:	bb23      	cbnz	r3, 800c71a <_strtod_l+0xb9a>
 800c6d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6d4:	9010      	str	r0, [sp, #64]	; 0x40
 800c6d6:	9311      	str	r3, [sp, #68]	; 0x44
 800c6d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c6e8:	1a9b      	subs	r3, r3, r2
 800c6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6f0:	eeb0 0a48 	vmov.f32	s0, s16
 800c6f4:	eef0 0a68 	vmov.f32	s1, s17
 800c6f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6fc:	f002 f928 	bl	800e950 <__ulp>
 800c700:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c704:	ec53 2b10 	vmov	r2, r3, d0
 800c708:	f7f3 ff76 	bl	80005f8 <__aeabi_dmul>
 800c70c:	ec53 2b18 	vmov	r2, r3, d8
 800c710:	f7f3 fdbc 	bl	800028c <__adddf3>
 800c714:	4682      	mov	sl, r0
 800c716:	468b      	mov	fp, r1
 800c718:	e78d      	b.n	800c636 <_strtod_l+0xab6>
 800c71a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c71e:	e7db      	b.n	800c6d8 <_strtod_l+0xb58>
 800c720:	a311      	add	r3, pc, #68	; (adr r3, 800c768 <_strtod_l+0xbe8>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f4 f9d9 	bl	8000adc <__aeabi_dcmplt>
 800c72a:	e7b2      	b.n	800c692 <_strtod_l+0xb12>
 800c72c:	2300      	movs	r3, #0
 800c72e:	930a      	str	r3, [sp, #40]	; 0x28
 800c730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	f7ff ba6b 	b.w	800bc10 <_strtod_l+0x90>
 800c73a:	2a65      	cmp	r2, #101	; 0x65
 800c73c:	f43f ab5f 	beq.w	800bdfe <_strtod_l+0x27e>
 800c740:	2a45      	cmp	r2, #69	; 0x45
 800c742:	f43f ab5c 	beq.w	800bdfe <_strtod_l+0x27e>
 800c746:	2301      	movs	r3, #1
 800c748:	f7ff bb94 	b.w	800be74 <_strtod_l+0x2f4>
 800c74c:	f3af 8000 	nop.w
 800c750:	94a03595 	.word	0x94a03595
 800c754:	3fdfffff 	.word	0x3fdfffff
 800c758:	35afe535 	.word	0x35afe535
 800c75c:	3fe00000 	.word	0x3fe00000
 800c760:	ffc00000 	.word	0xffc00000
 800c764:	41dfffff 	.word	0x41dfffff
 800c768:	94a03595 	.word	0x94a03595
 800c76c:	3fcfffff 	.word	0x3fcfffff
 800c770:	3ff00000 	.word	0x3ff00000
 800c774:	7ff00000 	.word	0x7ff00000
 800c778:	7fe00000 	.word	0x7fe00000
 800c77c:	7c9fffff 	.word	0x7c9fffff
 800c780:	3fe00000 	.word	0x3fe00000
 800c784:	bff00000 	.word	0xbff00000
 800c788:	7fefffff 	.word	0x7fefffff

0800c78c <_strtod_r>:
 800c78c:	4b01      	ldr	r3, [pc, #4]	; (800c794 <_strtod_r+0x8>)
 800c78e:	f7ff b9f7 	b.w	800bb80 <_strtod_l>
 800c792:	bf00      	nop
 800c794:	20000074 	.word	0x20000074

0800c798 <_strtol_l.constprop.0>:
 800c798:	2b01      	cmp	r3, #1
 800c79a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c79e:	d001      	beq.n	800c7a4 <_strtol_l.constprop.0+0xc>
 800c7a0:	2b24      	cmp	r3, #36	; 0x24
 800c7a2:	d906      	bls.n	800c7b2 <_strtol_l.constprop.0+0x1a>
 800c7a4:	f7fe fa60 	bl	800ac68 <__errno>
 800c7a8:	2316      	movs	r3, #22
 800c7aa:	6003      	str	r3, [r0, #0]
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c898 <_strtol_l.constprop.0+0x100>
 800c7b6:	460d      	mov	r5, r1
 800c7b8:	462e      	mov	r6, r5
 800c7ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c7c2:	f017 0708 	ands.w	r7, r7, #8
 800c7c6:	d1f7      	bne.n	800c7b8 <_strtol_l.constprop.0+0x20>
 800c7c8:	2c2d      	cmp	r4, #45	; 0x2d
 800c7ca:	d132      	bne.n	800c832 <_strtol_l.constprop.0+0x9a>
 800c7cc:	782c      	ldrb	r4, [r5, #0]
 800c7ce:	2701      	movs	r7, #1
 800c7d0:	1cb5      	adds	r5, r6, #2
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d05b      	beq.n	800c88e <_strtol_l.constprop.0+0xf6>
 800c7d6:	2b10      	cmp	r3, #16
 800c7d8:	d109      	bne.n	800c7ee <_strtol_l.constprop.0+0x56>
 800c7da:	2c30      	cmp	r4, #48	; 0x30
 800c7dc:	d107      	bne.n	800c7ee <_strtol_l.constprop.0+0x56>
 800c7de:	782c      	ldrb	r4, [r5, #0]
 800c7e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c7e4:	2c58      	cmp	r4, #88	; 0x58
 800c7e6:	d14d      	bne.n	800c884 <_strtol_l.constprop.0+0xec>
 800c7e8:	786c      	ldrb	r4, [r5, #1]
 800c7ea:	2310      	movs	r3, #16
 800c7ec:	3502      	adds	r5, #2
 800c7ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c7f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7f6:	f04f 0c00 	mov.w	ip, #0
 800c7fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800c7fe:	4666      	mov	r6, ip
 800c800:	fb03 8a19 	mls	sl, r3, r9, r8
 800c804:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c808:	f1be 0f09 	cmp.w	lr, #9
 800c80c:	d816      	bhi.n	800c83c <_strtol_l.constprop.0+0xa4>
 800c80e:	4674      	mov	r4, lr
 800c810:	42a3      	cmp	r3, r4
 800c812:	dd24      	ble.n	800c85e <_strtol_l.constprop.0+0xc6>
 800c814:	f1bc 0f00 	cmp.w	ip, #0
 800c818:	db1e      	blt.n	800c858 <_strtol_l.constprop.0+0xc0>
 800c81a:	45b1      	cmp	r9, r6
 800c81c:	d31c      	bcc.n	800c858 <_strtol_l.constprop.0+0xc0>
 800c81e:	d101      	bne.n	800c824 <_strtol_l.constprop.0+0x8c>
 800c820:	45a2      	cmp	sl, r4
 800c822:	db19      	blt.n	800c858 <_strtol_l.constprop.0+0xc0>
 800c824:	fb06 4603 	mla	r6, r6, r3, r4
 800c828:	f04f 0c01 	mov.w	ip, #1
 800c82c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c830:	e7e8      	b.n	800c804 <_strtol_l.constprop.0+0x6c>
 800c832:	2c2b      	cmp	r4, #43	; 0x2b
 800c834:	bf04      	itt	eq
 800c836:	782c      	ldrbeq	r4, [r5, #0]
 800c838:	1cb5      	addeq	r5, r6, #2
 800c83a:	e7ca      	b.n	800c7d2 <_strtol_l.constprop.0+0x3a>
 800c83c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c840:	f1be 0f19 	cmp.w	lr, #25
 800c844:	d801      	bhi.n	800c84a <_strtol_l.constprop.0+0xb2>
 800c846:	3c37      	subs	r4, #55	; 0x37
 800c848:	e7e2      	b.n	800c810 <_strtol_l.constprop.0+0x78>
 800c84a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c84e:	f1be 0f19 	cmp.w	lr, #25
 800c852:	d804      	bhi.n	800c85e <_strtol_l.constprop.0+0xc6>
 800c854:	3c57      	subs	r4, #87	; 0x57
 800c856:	e7db      	b.n	800c810 <_strtol_l.constprop.0+0x78>
 800c858:	f04f 3cff 	mov.w	ip, #4294967295
 800c85c:	e7e6      	b.n	800c82c <_strtol_l.constprop.0+0x94>
 800c85e:	f1bc 0f00 	cmp.w	ip, #0
 800c862:	da05      	bge.n	800c870 <_strtol_l.constprop.0+0xd8>
 800c864:	2322      	movs	r3, #34	; 0x22
 800c866:	6003      	str	r3, [r0, #0]
 800c868:	4646      	mov	r6, r8
 800c86a:	b942      	cbnz	r2, 800c87e <_strtol_l.constprop.0+0xe6>
 800c86c:	4630      	mov	r0, r6
 800c86e:	e79e      	b.n	800c7ae <_strtol_l.constprop.0+0x16>
 800c870:	b107      	cbz	r7, 800c874 <_strtol_l.constprop.0+0xdc>
 800c872:	4276      	negs	r6, r6
 800c874:	2a00      	cmp	r2, #0
 800c876:	d0f9      	beq.n	800c86c <_strtol_l.constprop.0+0xd4>
 800c878:	f1bc 0f00 	cmp.w	ip, #0
 800c87c:	d000      	beq.n	800c880 <_strtol_l.constprop.0+0xe8>
 800c87e:	1e69      	subs	r1, r5, #1
 800c880:	6011      	str	r1, [r2, #0]
 800c882:	e7f3      	b.n	800c86c <_strtol_l.constprop.0+0xd4>
 800c884:	2430      	movs	r4, #48	; 0x30
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1b1      	bne.n	800c7ee <_strtol_l.constprop.0+0x56>
 800c88a:	2308      	movs	r3, #8
 800c88c:	e7af      	b.n	800c7ee <_strtol_l.constprop.0+0x56>
 800c88e:	2c30      	cmp	r4, #48	; 0x30
 800c890:	d0a5      	beq.n	800c7de <_strtol_l.constprop.0+0x46>
 800c892:	230a      	movs	r3, #10
 800c894:	e7ab      	b.n	800c7ee <_strtol_l.constprop.0+0x56>
 800c896:	bf00      	nop
 800c898:	080109a1 	.word	0x080109a1

0800c89c <_strtol_r>:
 800c89c:	f7ff bf7c 	b.w	800c798 <_strtol_l.constprop.0>

0800c8a0 <__swbuf_r>:
 800c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a2:	460e      	mov	r6, r1
 800c8a4:	4614      	mov	r4, r2
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	b118      	cbz	r0, 800c8b2 <__swbuf_r+0x12>
 800c8aa:	6983      	ldr	r3, [r0, #24]
 800c8ac:	b90b      	cbnz	r3, 800c8b2 <__swbuf_r+0x12>
 800c8ae:	f001 f84b 	bl	800d948 <__sinit>
 800c8b2:	4b21      	ldr	r3, [pc, #132]	; (800c938 <__swbuf_r+0x98>)
 800c8b4:	429c      	cmp	r4, r3
 800c8b6:	d12b      	bne.n	800c910 <__swbuf_r+0x70>
 800c8b8:	686c      	ldr	r4, [r5, #4]
 800c8ba:	69a3      	ldr	r3, [r4, #24]
 800c8bc:	60a3      	str	r3, [r4, #8]
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	071a      	lsls	r2, r3, #28
 800c8c2:	d52f      	bpl.n	800c924 <__swbuf_r+0x84>
 800c8c4:	6923      	ldr	r3, [r4, #16]
 800c8c6:	b36b      	cbz	r3, 800c924 <__swbuf_r+0x84>
 800c8c8:	6923      	ldr	r3, [r4, #16]
 800c8ca:	6820      	ldr	r0, [r4, #0]
 800c8cc:	1ac0      	subs	r0, r0, r3
 800c8ce:	6963      	ldr	r3, [r4, #20]
 800c8d0:	b2f6      	uxtb	r6, r6
 800c8d2:	4283      	cmp	r3, r0
 800c8d4:	4637      	mov	r7, r6
 800c8d6:	dc04      	bgt.n	800c8e2 <__swbuf_r+0x42>
 800c8d8:	4621      	mov	r1, r4
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f000 ffa0 	bl	800d820 <_fflush_r>
 800c8e0:	bb30      	cbnz	r0, 800c930 <__swbuf_r+0x90>
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	60a3      	str	r3, [r4, #8]
 800c8e8:	6823      	ldr	r3, [r4, #0]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	6022      	str	r2, [r4, #0]
 800c8ee:	701e      	strb	r6, [r3, #0]
 800c8f0:	6963      	ldr	r3, [r4, #20]
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	4283      	cmp	r3, r0
 800c8f6:	d004      	beq.n	800c902 <__swbuf_r+0x62>
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	07db      	lsls	r3, r3, #31
 800c8fc:	d506      	bpl.n	800c90c <__swbuf_r+0x6c>
 800c8fe:	2e0a      	cmp	r6, #10
 800c900:	d104      	bne.n	800c90c <__swbuf_r+0x6c>
 800c902:	4621      	mov	r1, r4
 800c904:	4628      	mov	r0, r5
 800c906:	f000 ff8b 	bl	800d820 <_fflush_r>
 800c90a:	b988      	cbnz	r0, 800c930 <__swbuf_r+0x90>
 800c90c:	4638      	mov	r0, r7
 800c90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c910:	4b0a      	ldr	r3, [pc, #40]	; (800c93c <__swbuf_r+0x9c>)
 800c912:	429c      	cmp	r4, r3
 800c914:	d101      	bne.n	800c91a <__swbuf_r+0x7a>
 800c916:	68ac      	ldr	r4, [r5, #8]
 800c918:	e7cf      	b.n	800c8ba <__swbuf_r+0x1a>
 800c91a:	4b09      	ldr	r3, [pc, #36]	; (800c940 <__swbuf_r+0xa0>)
 800c91c:	429c      	cmp	r4, r3
 800c91e:	bf08      	it	eq
 800c920:	68ec      	ldreq	r4, [r5, #12]
 800c922:	e7ca      	b.n	800c8ba <__swbuf_r+0x1a>
 800c924:	4621      	mov	r1, r4
 800c926:	4628      	mov	r0, r5
 800c928:	f000 f80c 	bl	800c944 <__swsetup_r>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d0cb      	beq.n	800c8c8 <__swbuf_r+0x28>
 800c930:	f04f 37ff 	mov.w	r7, #4294967295
 800c934:	e7ea      	b.n	800c90c <__swbuf_r+0x6c>
 800c936:	bf00      	nop
 800c938:	08010b54 	.word	0x08010b54
 800c93c:	08010b74 	.word	0x08010b74
 800c940:	08010b34 	.word	0x08010b34

0800c944 <__swsetup_r>:
 800c944:	4b32      	ldr	r3, [pc, #200]	; (800ca10 <__swsetup_r+0xcc>)
 800c946:	b570      	push	{r4, r5, r6, lr}
 800c948:	681d      	ldr	r5, [r3, #0]
 800c94a:	4606      	mov	r6, r0
 800c94c:	460c      	mov	r4, r1
 800c94e:	b125      	cbz	r5, 800c95a <__swsetup_r+0x16>
 800c950:	69ab      	ldr	r3, [r5, #24]
 800c952:	b913      	cbnz	r3, 800c95a <__swsetup_r+0x16>
 800c954:	4628      	mov	r0, r5
 800c956:	f000 fff7 	bl	800d948 <__sinit>
 800c95a:	4b2e      	ldr	r3, [pc, #184]	; (800ca14 <__swsetup_r+0xd0>)
 800c95c:	429c      	cmp	r4, r3
 800c95e:	d10f      	bne.n	800c980 <__swsetup_r+0x3c>
 800c960:	686c      	ldr	r4, [r5, #4]
 800c962:	89a3      	ldrh	r3, [r4, #12]
 800c964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c968:	0719      	lsls	r1, r3, #28
 800c96a:	d42c      	bmi.n	800c9c6 <__swsetup_r+0x82>
 800c96c:	06dd      	lsls	r5, r3, #27
 800c96e:	d411      	bmi.n	800c994 <__swsetup_r+0x50>
 800c970:	2309      	movs	r3, #9
 800c972:	6033      	str	r3, [r6, #0]
 800c974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c978:	81a3      	strh	r3, [r4, #12]
 800c97a:	f04f 30ff 	mov.w	r0, #4294967295
 800c97e:	e03e      	b.n	800c9fe <__swsetup_r+0xba>
 800c980:	4b25      	ldr	r3, [pc, #148]	; (800ca18 <__swsetup_r+0xd4>)
 800c982:	429c      	cmp	r4, r3
 800c984:	d101      	bne.n	800c98a <__swsetup_r+0x46>
 800c986:	68ac      	ldr	r4, [r5, #8]
 800c988:	e7eb      	b.n	800c962 <__swsetup_r+0x1e>
 800c98a:	4b24      	ldr	r3, [pc, #144]	; (800ca1c <__swsetup_r+0xd8>)
 800c98c:	429c      	cmp	r4, r3
 800c98e:	bf08      	it	eq
 800c990:	68ec      	ldreq	r4, [r5, #12]
 800c992:	e7e6      	b.n	800c962 <__swsetup_r+0x1e>
 800c994:	0758      	lsls	r0, r3, #29
 800c996:	d512      	bpl.n	800c9be <__swsetup_r+0x7a>
 800c998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c99a:	b141      	cbz	r1, 800c9ae <__swsetup_r+0x6a>
 800c99c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9a0:	4299      	cmp	r1, r3
 800c9a2:	d002      	beq.n	800c9aa <__swsetup_r+0x66>
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f002 f939 	bl	800ec1c <_free_r>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	6363      	str	r3, [r4, #52]	; 0x34
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9b4:	81a3      	strh	r3, [r4, #12]
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	6063      	str	r3, [r4, #4]
 800c9ba:	6923      	ldr	r3, [r4, #16]
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f043 0308 	orr.w	r3, r3, #8
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	b94b      	cbnz	r3, 800c9de <__swsetup_r+0x9a>
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d4:	d003      	beq.n	800c9de <__swsetup_r+0x9a>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f001 fbed 	bl	800e1b8 <__smakebuf_r>
 800c9de:	89a0      	ldrh	r0, [r4, #12]
 800c9e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9e4:	f010 0301 	ands.w	r3, r0, #1
 800c9e8:	d00a      	beq.n	800ca00 <__swsetup_r+0xbc>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	60a3      	str	r3, [r4, #8]
 800c9ee:	6963      	ldr	r3, [r4, #20]
 800c9f0:	425b      	negs	r3, r3
 800c9f2:	61a3      	str	r3, [r4, #24]
 800c9f4:	6923      	ldr	r3, [r4, #16]
 800c9f6:	b943      	cbnz	r3, 800ca0a <__swsetup_r+0xc6>
 800c9f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9fc:	d1ba      	bne.n	800c974 <__swsetup_r+0x30>
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	0781      	lsls	r1, r0, #30
 800ca02:	bf58      	it	pl
 800ca04:	6963      	ldrpl	r3, [r4, #20]
 800ca06:	60a3      	str	r3, [r4, #8]
 800ca08:	e7f4      	b.n	800c9f4 <__swsetup_r+0xb0>
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	e7f7      	b.n	800c9fe <__swsetup_r+0xba>
 800ca0e:	bf00      	nop
 800ca10:	2000000c 	.word	0x2000000c
 800ca14:	08010b54 	.word	0x08010b54
 800ca18:	08010b74 	.word	0x08010b74
 800ca1c:	08010b34 	.word	0x08010b34

0800ca20 <quorem>:
 800ca20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	6903      	ldr	r3, [r0, #16]
 800ca26:	690c      	ldr	r4, [r1, #16]
 800ca28:	42a3      	cmp	r3, r4
 800ca2a:	4607      	mov	r7, r0
 800ca2c:	f2c0 8081 	blt.w	800cb32 <quorem+0x112>
 800ca30:	3c01      	subs	r4, #1
 800ca32:	f101 0814 	add.w	r8, r1, #20
 800ca36:	f100 0514 	add.w	r5, r0, #20
 800ca3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca54:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca58:	d331      	bcc.n	800cabe <quorem+0x9e>
 800ca5a:	f04f 0e00 	mov.w	lr, #0
 800ca5e:	4640      	mov	r0, r8
 800ca60:	46ac      	mov	ip, r5
 800ca62:	46f2      	mov	sl, lr
 800ca64:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca68:	b293      	uxth	r3, r2
 800ca6a:	fb06 e303 	mla	r3, r6, r3, lr
 800ca6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	ebaa 0303 	sub.w	r3, sl, r3
 800ca78:	f8dc a000 	ldr.w	sl, [ip]
 800ca7c:	0c12      	lsrs	r2, r2, #16
 800ca7e:	fa13 f38a 	uxtah	r3, r3, sl
 800ca82:	fb06 e202 	mla	r2, r6, r2, lr
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	9b00      	ldr	r3, [sp, #0]
 800ca8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca8e:	b292      	uxth	r2, r2
 800ca90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ca94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca98:	f8bd 3000 	ldrh.w	r3, [sp]
 800ca9c:	4581      	cmp	r9, r0
 800ca9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caa2:	f84c 3b04 	str.w	r3, [ip], #4
 800caa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800caaa:	d2db      	bcs.n	800ca64 <quorem+0x44>
 800caac:	f855 300b 	ldr.w	r3, [r5, fp]
 800cab0:	b92b      	cbnz	r3, 800cabe <quorem+0x9e>
 800cab2:	9b01      	ldr	r3, [sp, #4]
 800cab4:	3b04      	subs	r3, #4
 800cab6:	429d      	cmp	r5, r3
 800cab8:	461a      	mov	r2, r3
 800caba:	d32e      	bcc.n	800cb1a <quorem+0xfa>
 800cabc:	613c      	str	r4, [r7, #16]
 800cabe:	4638      	mov	r0, r7
 800cac0:	f001 fea0 	bl	800e804 <__mcmp>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	db24      	blt.n	800cb12 <quorem+0xf2>
 800cac8:	3601      	adds	r6, #1
 800caca:	4628      	mov	r0, r5
 800cacc:	f04f 0c00 	mov.w	ip, #0
 800cad0:	f858 2b04 	ldr.w	r2, [r8], #4
 800cad4:	f8d0 e000 	ldr.w	lr, [r0]
 800cad8:	b293      	uxth	r3, r2
 800cada:	ebac 0303 	sub.w	r3, ip, r3
 800cade:	0c12      	lsrs	r2, r2, #16
 800cae0:	fa13 f38e 	uxtah	r3, r3, lr
 800cae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800caec:	b29b      	uxth	r3, r3
 800caee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caf2:	45c1      	cmp	r9, r8
 800caf4:	f840 3b04 	str.w	r3, [r0], #4
 800caf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cafc:	d2e8      	bcs.n	800cad0 <quorem+0xb0>
 800cafe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb06:	b922      	cbnz	r2, 800cb12 <quorem+0xf2>
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	429d      	cmp	r5, r3
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	d30a      	bcc.n	800cb26 <quorem+0x106>
 800cb10:	613c      	str	r4, [r7, #16]
 800cb12:	4630      	mov	r0, r6
 800cb14:	b003      	add	sp, #12
 800cb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1a:	6812      	ldr	r2, [r2, #0]
 800cb1c:	3b04      	subs	r3, #4
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	d1cc      	bne.n	800cabc <quorem+0x9c>
 800cb22:	3c01      	subs	r4, #1
 800cb24:	e7c7      	b.n	800cab6 <quorem+0x96>
 800cb26:	6812      	ldr	r2, [r2, #0]
 800cb28:	3b04      	subs	r3, #4
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	d1f0      	bne.n	800cb10 <quorem+0xf0>
 800cb2e:	3c01      	subs	r4, #1
 800cb30:	e7eb      	b.n	800cb0a <quorem+0xea>
 800cb32:	2000      	movs	r0, #0
 800cb34:	e7ee      	b.n	800cb14 <quorem+0xf4>
	...

0800cb38 <_dtoa_r>:
 800cb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	ed2d 8b04 	vpush	{d8-d9}
 800cb40:	ec57 6b10 	vmov	r6, r7, d0
 800cb44:	b093      	sub	sp, #76	; 0x4c
 800cb46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb4c:	9106      	str	r1, [sp, #24]
 800cb4e:	ee10 aa10 	vmov	sl, s0
 800cb52:	4604      	mov	r4, r0
 800cb54:	9209      	str	r2, [sp, #36]	; 0x24
 800cb56:	930c      	str	r3, [sp, #48]	; 0x30
 800cb58:	46bb      	mov	fp, r7
 800cb5a:	b975      	cbnz	r5, 800cb7a <_dtoa_r+0x42>
 800cb5c:	2010      	movs	r0, #16
 800cb5e:	f001 fb6b 	bl	800e238 <malloc>
 800cb62:	4602      	mov	r2, r0
 800cb64:	6260      	str	r0, [r4, #36]	; 0x24
 800cb66:	b920      	cbnz	r0, 800cb72 <_dtoa_r+0x3a>
 800cb68:	4ba7      	ldr	r3, [pc, #668]	; (800ce08 <_dtoa_r+0x2d0>)
 800cb6a:	21ea      	movs	r1, #234	; 0xea
 800cb6c:	48a7      	ldr	r0, [pc, #668]	; (800ce0c <_dtoa_r+0x2d4>)
 800cb6e:	f002 fc79 	bl	800f464 <__assert_func>
 800cb72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb76:	6005      	str	r5, [r0, #0]
 800cb78:	60c5      	str	r5, [r0, #12]
 800cb7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb7c:	6819      	ldr	r1, [r3, #0]
 800cb7e:	b151      	cbz	r1, 800cb96 <_dtoa_r+0x5e>
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	604a      	str	r2, [r1, #4]
 800cb84:	2301      	movs	r3, #1
 800cb86:	4093      	lsls	r3, r2
 800cb88:	608b      	str	r3, [r1, #8]
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f001 fbae 	bl	800e2ec <_Bfree>
 800cb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	1e3b      	subs	r3, r7, #0
 800cb98:	bfaa      	itet	ge
 800cb9a:	2300      	movge	r3, #0
 800cb9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cba0:	f8c8 3000 	strge.w	r3, [r8]
 800cba4:	4b9a      	ldr	r3, [pc, #616]	; (800ce10 <_dtoa_r+0x2d8>)
 800cba6:	bfbc      	itt	lt
 800cba8:	2201      	movlt	r2, #1
 800cbaa:	f8c8 2000 	strlt.w	r2, [r8]
 800cbae:	ea33 030b 	bics.w	r3, r3, fp
 800cbb2:	d11b      	bne.n	800cbec <_dtoa_r+0xb4>
 800cbb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbc0:	4333      	orrs	r3, r6
 800cbc2:	f000 8592 	beq.w	800d6ea <_dtoa_r+0xbb2>
 800cbc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbc8:	b963      	cbnz	r3, 800cbe4 <_dtoa_r+0xac>
 800cbca:	4b92      	ldr	r3, [pc, #584]	; (800ce14 <_dtoa_r+0x2dc>)
 800cbcc:	e022      	b.n	800cc14 <_dtoa_r+0xdc>
 800cbce:	4b92      	ldr	r3, [pc, #584]	; (800ce18 <_dtoa_r+0x2e0>)
 800cbd0:	9301      	str	r3, [sp, #4]
 800cbd2:	3308      	adds	r3, #8
 800cbd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	9801      	ldr	r0, [sp, #4]
 800cbda:	b013      	add	sp, #76	; 0x4c
 800cbdc:	ecbd 8b04 	vpop	{d8-d9}
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	4b8b      	ldr	r3, [pc, #556]	; (800ce14 <_dtoa_r+0x2dc>)
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	3303      	adds	r3, #3
 800cbea:	e7f3      	b.n	800cbd4 <_dtoa_r+0x9c>
 800cbec:	2200      	movs	r2, #0
 800cbee:	2300      	movs	r3, #0
 800cbf0:	4650      	mov	r0, sl
 800cbf2:	4659      	mov	r1, fp
 800cbf4:	f7f3 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbf8:	ec4b ab19 	vmov	d9, sl, fp
 800cbfc:	4680      	mov	r8, r0
 800cbfe:	b158      	cbz	r0, 800cc18 <_dtoa_r+0xe0>
 800cc00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc02:	2301      	movs	r3, #1
 800cc04:	6013      	str	r3, [r2, #0]
 800cc06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 856b 	beq.w	800d6e4 <_dtoa_r+0xbac>
 800cc0e:	4883      	ldr	r0, [pc, #524]	; (800ce1c <_dtoa_r+0x2e4>)
 800cc10:	6018      	str	r0, [r3, #0]
 800cc12:	1e43      	subs	r3, r0, #1
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	e7df      	b.n	800cbd8 <_dtoa_r+0xa0>
 800cc18:	ec4b ab10 	vmov	d0, sl, fp
 800cc1c:	aa10      	add	r2, sp, #64	; 0x40
 800cc1e:	a911      	add	r1, sp, #68	; 0x44
 800cc20:	4620      	mov	r0, r4
 800cc22:	f001 ff11 	bl	800ea48 <__d2b>
 800cc26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cc2a:	ee08 0a10 	vmov	s16, r0
 800cc2e:	2d00      	cmp	r5, #0
 800cc30:	f000 8084 	beq.w	800cd3c <_dtoa_r+0x204>
 800cc34:	ee19 3a90 	vmov	r3, s19
 800cc38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc40:	4656      	mov	r6, sl
 800cc42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cc4e:	4b74      	ldr	r3, [pc, #464]	; (800ce20 <_dtoa_r+0x2e8>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	4630      	mov	r0, r6
 800cc54:	4639      	mov	r1, r7
 800cc56:	f7f3 fb17 	bl	8000288 <__aeabi_dsub>
 800cc5a:	a365      	add	r3, pc, #404	; (adr r3, 800cdf0 <_dtoa_r+0x2b8>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fcca 	bl	80005f8 <__aeabi_dmul>
 800cc64:	a364      	add	r3, pc, #400	; (adr r3, 800cdf8 <_dtoa_r+0x2c0>)
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	f7f3 fb0f 	bl	800028c <__adddf3>
 800cc6e:	4606      	mov	r6, r0
 800cc70:	4628      	mov	r0, r5
 800cc72:	460f      	mov	r7, r1
 800cc74:	f7f3 fc56 	bl	8000524 <__aeabi_i2d>
 800cc78:	a361      	add	r3, pc, #388	; (adr r3, 800ce00 <_dtoa_r+0x2c8>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	f7f3 fcbb 	bl	80005f8 <__aeabi_dmul>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4630      	mov	r0, r6
 800cc88:	4639      	mov	r1, r7
 800cc8a:	f7f3 faff 	bl	800028c <__adddf3>
 800cc8e:	4606      	mov	r6, r0
 800cc90:	460f      	mov	r7, r1
 800cc92:	f7f3 ff61 	bl	8000b58 <__aeabi_d2iz>
 800cc96:	2200      	movs	r2, #0
 800cc98:	9000      	str	r0, [sp, #0]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800cca4:	b150      	cbz	r0, 800ccbc <_dtoa_r+0x184>
 800cca6:	9800      	ldr	r0, [sp, #0]
 800cca8:	f7f3 fc3c 	bl	8000524 <__aeabi_i2d>
 800ccac:	4632      	mov	r2, r6
 800ccae:	463b      	mov	r3, r7
 800ccb0:	f7f3 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccb4:	b910      	cbnz	r0, 800ccbc <_dtoa_r+0x184>
 800ccb6:	9b00      	ldr	r3, [sp, #0]
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	9b00      	ldr	r3, [sp, #0]
 800ccbe:	2b16      	cmp	r3, #22
 800ccc0:	d85a      	bhi.n	800cd78 <_dtoa_r+0x240>
 800ccc2:	9a00      	ldr	r2, [sp, #0]
 800ccc4:	4b57      	ldr	r3, [pc, #348]	; (800ce24 <_dtoa_r+0x2ec>)
 800ccc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	ec51 0b19 	vmov	r0, r1, d9
 800ccd2:	f7f3 ff03 	bl	8000adc <__aeabi_dcmplt>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d050      	beq.n	800cd7c <_dtoa_r+0x244>
 800ccda:	9b00      	ldr	r3, [sp, #0]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	2300      	movs	r3, #0
 800cce2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cce6:	1b5d      	subs	r5, r3, r5
 800cce8:	1e6b      	subs	r3, r5, #1
 800ccea:	9305      	str	r3, [sp, #20]
 800ccec:	bf45      	ittet	mi
 800ccee:	f1c5 0301 	rsbmi	r3, r5, #1
 800ccf2:	9304      	strmi	r3, [sp, #16]
 800ccf4:	2300      	movpl	r3, #0
 800ccf6:	2300      	movmi	r3, #0
 800ccf8:	bf4c      	ite	mi
 800ccfa:	9305      	strmi	r3, [sp, #20]
 800ccfc:	9304      	strpl	r3, [sp, #16]
 800ccfe:	9b00      	ldr	r3, [sp, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	db3d      	blt.n	800cd80 <_dtoa_r+0x248>
 800cd04:	9b05      	ldr	r3, [sp, #20]
 800cd06:	9a00      	ldr	r2, [sp, #0]
 800cd08:	920a      	str	r2, [sp, #40]	; 0x28
 800cd0a:	4413      	add	r3, r2
 800cd0c:	9305      	str	r3, [sp, #20]
 800cd0e:	2300      	movs	r3, #0
 800cd10:	9307      	str	r3, [sp, #28]
 800cd12:	9b06      	ldr	r3, [sp, #24]
 800cd14:	2b09      	cmp	r3, #9
 800cd16:	f200 8089 	bhi.w	800ce2c <_dtoa_r+0x2f4>
 800cd1a:	2b05      	cmp	r3, #5
 800cd1c:	bfc4      	itt	gt
 800cd1e:	3b04      	subgt	r3, #4
 800cd20:	9306      	strgt	r3, [sp, #24]
 800cd22:	9b06      	ldr	r3, [sp, #24]
 800cd24:	f1a3 0302 	sub.w	r3, r3, #2
 800cd28:	bfcc      	ite	gt
 800cd2a:	2500      	movgt	r5, #0
 800cd2c:	2501      	movle	r5, #1
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	f200 8087 	bhi.w	800ce42 <_dtoa_r+0x30a>
 800cd34:	e8df f003 	tbb	[pc, r3]
 800cd38:	59383a2d 	.word	0x59383a2d
 800cd3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cd40:	441d      	add	r5, r3
 800cd42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	bfc1      	itttt	gt
 800cd4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd52:	fa0b f303 	lslgt.w	r3, fp, r3
 800cd56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd5a:	bfda      	itte	le
 800cd5c:	f1c3 0320 	rsble	r3, r3, #32
 800cd60:	fa06 f003 	lslle.w	r0, r6, r3
 800cd64:	4318      	orrgt	r0, r3
 800cd66:	f7f3 fbcd 	bl	8000504 <__aeabi_ui2d>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd72:	3d01      	subs	r5, #1
 800cd74:	930e      	str	r3, [sp, #56]	; 0x38
 800cd76:	e76a      	b.n	800cc4e <_dtoa_r+0x116>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e7b2      	b.n	800cce2 <_dtoa_r+0x1aa>
 800cd7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd7e:	e7b1      	b.n	800cce4 <_dtoa_r+0x1ac>
 800cd80:	9b04      	ldr	r3, [sp, #16]
 800cd82:	9a00      	ldr	r2, [sp, #0]
 800cd84:	1a9b      	subs	r3, r3, r2
 800cd86:	9304      	str	r3, [sp, #16]
 800cd88:	4253      	negs	r3, r2
 800cd8a:	9307      	str	r3, [sp, #28]
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd90:	e7bf      	b.n	800cd12 <_dtoa_r+0x1da>
 800cd92:	2300      	movs	r3, #0
 800cd94:	9308      	str	r3, [sp, #32]
 800cd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	dc55      	bgt.n	800ce48 <_dtoa_r+0x310>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cda2:	461a      	mov	r2, r3
 800cda4:	9209      	str	r2, [sp, #36]	; 0x24
 800cda6:	e00c      	b.n	800cdc2 <_dtoa_r+0x28a>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e7f3      	b.n	800cd94 <_dtoa_r+0x25c>
 800cdac:	2300      	movs	r3, #0
 800cdae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdb0:	9308      	str	r3, [sp, #32]
 800cdb2:	9b00      	ldr	r3, [sp, #0]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	9302      	str	r3, [sp, #8]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	9303      	str	r3, [sp, #12]
 800cdbe:	bfb8      	it	lt
 800cdc0:	2301      	movlt	r3, #1
 800cdc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	6042      	str	r2, [r0, #4]
 800cdc8:	2204      	movs	r2, #4
 800cdca:	f102 0614 	add.w	r6, r2, #20
 800cdce:	429e      	cmp	r6, r3
 800cdd0:	6841      	ldr	r1, [r0, #4]
 800cdd2:	d93d      	bls.n	800ce50 <_dtoa_r+0x318>
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f001 fa49 	bl	800e26c <_Balloc>
 800cdda:	9001      	str	r0, [sp, #4]
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d13b      	bne.n	800ce58 <_dtoa_r+0x320>
 800cde0:	4b11      	ldr	r3, [pc, #68]	; (800ce28 <_dtoa_r+0x2f0>)
 800cde2:	4602      	mov	r2, r0
 800cde4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cde8:	e6c0      	b.n	800cb6c <_dtoa_r+0x34>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e7df      	b.n	800cdae <_dtoa_r+0x276>
 800cdee:	bf00      	nop
 800cdf0:	636f4361 	.word	0x636f4361
 800cdf4:	3fd287a7 	.word	0x3fd287a7
 800cdf8:	8b60c8b3 	.word	0x8b60c8b3
 800cdfc:	3fc68a28 	.word	0x3fc68a28
 800ce00:	509f79fb 	.word	0x509f79fb
 800ce04:	3fd34413 	.word	0x3fd34413
 800ce08:	08010aae 	.word	0x08010aae
 800ce0c:	08010ac5 	.word	0x08010ac5
 800ce10:	7ff00000 	.word	0x7ff00000
 800ce14:	08010aaa 	.word	0x08010aaa
 800ce18:	08010aa1 	.word	0x08010aa1
 800ce1c:	08010925 	.word	0x08010925
 800ce20:	3ff80000 	.word	0x3ff80000
 800ce24:	08010c98 	.word	0x08010c98
 800ce28:	08010b20 	.word	0x08010b20
 800ce2c:	2501      	movs	r5, #1
 800ce2e:	2300      	movs	r3, #0
 800ce30:	9306      	str	r3, [sp, #24]
 800ce32:	9508      	str	r5, [sp, #32]
 800ce34:	f04f 33ff 	mov.w	r3, #4294967295
 800ce38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2312      	movs	r3, #18
 800ce40:	e7b0      	b.n	800cda4 <_dtoa_r+0x26c>
 800ce42:	2301      	movs	r3, #1
 800ce44:	9308      	str	r3, [sp, #32]
 800ce46:	e7f5      	b.n	800ce34 <_dtoa_r+0x2fc>
 800ce48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce4e:	e7b8      	b.n	800cdc2 <_dtoa_r+0x28a>
 800ce50:	3101      	adds	r1, #1
 800ce52:	6041      	str	r1, [r0, #4]
 800ce54:	0052      	lsls	r2, r2, #1
 800ce56:	e7b8      	b.n	800cdca <_dtoa_r+0x292>
 800ce58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce5a:	9a01      	ldr	r2, [sp, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	2b0e      	cmp	r3, #14
 800ce62:	f200 809d 	bhi.w	800cfa0 <_dtoa_r+0x468>
 800ce66:	2d00      	cmp	r5, #0
 800ce68:	f000 809a 	beq.w	800cfa0 <_dtoa_r+0x468>
 800ce6c:	9b00      	ldr	r3, [sp, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	dd32      	ble.n	800ced8 <_dtoa_r+0x3a0>
 800ce72:	4ab7      	ldr	r2, [pc, #732]	; (800d150 <_dtoa_r+0x618>)
 800ce74:	f003 030f 	and.w	r3, r3, #15
 800ce78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce80:	9b00      	ldr	r3, [sp, #0]
 800ce82:	05d8      	lsls	r0, r3, #23
 800ce84:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ce88:	d516      	bpl.n	800ceb8 <_dtoa_r+0x380>
 800ce8a:	4bb2      	ldr	r3, [pc, #712]	; (800d154 <_dtoa_r+0x61c>)
 800ce8c:	ec51 0b19 	vmov	r0, r1, d9
 800ce90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce94:	f7f3 fcda 	bl	800084c <__aeabi_ddiv>
 800ce98:	f007 070f 	and.w	r7, r7, #15
 800ce9c:	4682      	mov	sl, r0
 800ce9e:	468b      	mov	fp, r1
 800cea0:	2503      	movs	r5, #3
 800cea2:	4eac      	ldr	r6, [pc, #688]	; (800d154 <_dtoa_r+0x61c>)
 800cea4:	b957      	cbnz	r7, 800cebc <_dtoa_r+0x384>
 800cea6:	4642      	mov	r2, r8
 800cea8:	464b      	mov	r3, r9
 800ceaa:	4650      	mov	r0, sl
 800ceac:	4659      	mov	r1, fp
 800ceae:	f7f3 fccd 	bl	800084c <__aeabi_ddiv>
 800ceb2:	4682      	mov	sl, r0
 800ceb4:	468b      	mov	fp, r1
 800ceb6:	e028      	b.n	800cf0a <_dtoa_r+0x3d2>
 800ceb8:	2502      	movs	r5, #2
 800ceba:	e7f2      	b.n	800cea2 <_dtoa_r+0x36a>
 800cebc:	07f9      	lsls	r1, r7, #31
 800cebe:	d508      	bpl.n	800ced2 <_dtoa_r+0x39a>
 800cec0:	4640      	mov	r0, r8
 800cec2:	4649      	mov	r1, r9
 800cec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cec8:	f7f3 fb96 	bl	80005f8 <__aeabi_dmul>
 800cecc:	3501      	adds	r5, #1
 800cece:	4680      	mov	r8, r0
 800ced0:	4689      	mov	r9, r1
 800ced2:	107f      	asrs	r7, r7, #1
 800ced4:	3608      	adds	r6, #8
 800ced6:	e7e5      	b.n	800cea4 <_dtoa_r+0x36c>
 800ced8:	f000 809b 	beq.w	800d012 <_dtoa_r+0x4da>
 800cedc:	9b00      	ldr	r3, [sp, #0]
 800cede:	4f9d      	ldr	r7, [pc, #628]	; (800d154 <_dtoa_r+0x61c>)
 800cee0:	425e      	negs	r6, r3
 800cee2:	4b9b      	ldr	r3, [pc, #620]	; (800d150 <_dtoa_r+0x618>)
 800cee4:	f006 020f 	and.w	r2, r6, #15
 800cee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	ec51 0b19 	vmov	r0, r1, d9
 800cef4:	f7f3 fb80 	bl	80005f8 <__aeabi_dmul>
 800cef8:	1136      	asrs	r6, r6, #4
 800cefa:	4682      	mov	sl, r0
 800cefc:	468b      	mov	fp, r1
 800cefe:	2300      	movs	r3, #0
 800cf00:	2502      	movs	r5, #2
 800cf02:	2e00      	cmp	r6, #0
 800cf04:	d17a      	bne.n	800cffc <_dtoa_r+0x4c4>
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1d3      	bne.n	800ceb2 <_dtoa_r+0x37a>
 800cf0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 8082 	beq.w	800d016 <_dtoa_r+0x4de>
 800cf12:	4b91      	ldr	r3, [pc, #580]	; (800d158 <_dtoa_r+0x620>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	4650      	mov	r0, sl
 800cf18:	4659      	mov	r1, fp
 800cf1a:	f7f3 fddf 	bl	8000adc <__aeabi_dcmplt>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d079      	beq.n	800d016 <_dtoa_r+0x4de>
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d076      	beq.n	800d016 <_dtoa_r+0x4de>
 800cf28:	9b02      	ldr	r3, [sp, #8]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	dd36      	ble.n	800cf9c <_dtoa_r+0x464>
 800cf2e:	9b00      	ldr	r3, [sp, #0]
 800cf30:	4650      	mov	r0, sl
 800cf32:	4659      	mov	r1, fp
 800cf34:	1e5f      	subs	r7, r3, #1
 800cf36:	2200      	movs	r2, #0
 800cf38:	4b88      	ldr	r3, [pc, #544]	; (800d15c <_dtoa_r+0x624>)
 800cf3a:	f7f3 fb5d 	bl	80005f8 <__aeabi_dmul>
 800cf3e:	9e02      	ldr	r6, [sp, #8]
 800cf40:	4682      	mov	sl, r0
 800cf42:	468b      	mov	fp, r1
 800cf44:	3501      	adds	r5, #1
 800cf46:	4628      	mov	r0, r5
 800cf48:	f7f3 faec 	bl	8000524 <__aeabi_i2d>
 800cf4c:	4652      	mov	r2, sl
 800cf4e:	465b      	mov	r3, fp
 800cf50:	f7f3 fb52 	bl	80005f8 <__aeabi_dmul>
 800cf54:	4b82      	ldr	r3, [pc, #520]	; (800d160 <_dtoa_r+0x628>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	f7f3 f998 	bl	800028c <__adddf3>
 800cf5c:	46d0      	mov	r8, sl
 800cf5e:	46d9      	mov	r9, fp
 800cf60:	4682      	mov	sl, r0
 800cf62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	d158      	bne.n	800d01c <_dtoa_r+0x4e4>
 800cf6a:	4b7e      	ldr	r3, [pc, #504]	; (800d164 <_dtoa_r+0x62c>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	4640      	mov	r0, r8
 800cf70:	4649      	mov	r1, r9
 800cf72:	f7f3 f989 	bl	8000288 <__aeabi_dsub>
 800cf76:	4652      	mov	r2, sl
 800cf78:	465b      	mov	r3, fp
 800cf7a:	4680      	mov	r8, r0
 800cf7c:	4689      	mov	r9, r1
 800cf7e:	f7f3 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	f040 8295 	bne.w	800d4b2 <_dtoa_r+0x97a>
 800cf88:	4652      	mov	r2, sl
 800cf8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf8e:	4640      	mov	r0, r8
 800cf90:	4649      	mov	r1, r9
 800cf92:	f7f3 fda3 	bl	8000adc <__aeabi_dcmplt>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f040 8289 	bne.w	800d4ae <_dtoa_r+0x976>
 800cf9c:	ec5b ab19 	vmov	sl, fp, d9
 800cfa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f2c0 8148 	blt.w	800d238 <_dtoa_r+0x700>
 800cfa8:	9a00      	ldr	r2, [sp, #0]
 800cfaa:	2a0e      	cmp	r2, #14
 800cfac:	f300 8144 	bgt.w	800d238 <_dtoa_r+0x700>
 800cfb0:	4b67      	ldr	r3, [pc, #412]	; (800d150 <_dtoa_r+0x618>)
 800cfb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f280 80d5 	bge.w	800d16c <_dtoa_r+0x634>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f300 80d1 	bgt.w	800d16c <_dtoa_r+0x634>
 800cfca:	f040 826f 	bne.w	800d4ac <_dtoa_r+0x974>
 800cfce:	4b65      	ldr	r3, [pc, #404]	; (800d164 <_dtoa_r+0x62c>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	4649      	mov	r1, r9
 800cfd6:	f7f3 fb0f 	bl	80005f8 <__aeabi_dmul>
 800cfda:	4652      	mov	r2, sl
 800cfdc:	465b      	mov	r3, fp
 800cfde:	f7f3 fd91 	bl	8000b04 <__aeabi_dcmpge>
 800cfe2:	9e03      	ldr	r6, [sp, #12]
 800cfe4:	4637      	mov	r7, r6
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	f040 8245 	bne.w	800d476 <_dtoa_r+0x93e>
 800cfec:	9d01      	ldr	r5, [sp, #4]
 800cfee:	2331      	movs	r3, #49	; 0x31
 800cff0:	f805 3b01 	strb.w	r3, [r5], #1
 800cff4:	9b00      	ldr	r3, [sp, #0]
 800cff6:	3301      	adds	r3, #1
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	e240      	b.n	800d47e <_dtoa_r+0x946>
 800cffc:	07f2      	lsls	r2, r6, #31
 800cffe:	d505      	bpl.n	800d00c <_dtoa_r+0x4d4>
 800d000:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d004:	f7f3 faf8 	bl	80005f8 <__aeabi_dmul>
 800d008:	3501      	adds	r5, #1
 800d00a:	2301      	movs	r3, #1
 800d00c:	1076      	asrs	r6, r6, #1
 800d00e:	3708      	adds	r7, #8
 800d010:	e777      	b.n	800cf02 <_dtoa_r+0x3ca>
 800d012:	2502      	movs	r5, #2
 800d014:	e779      	b.n	800cf0a <_dtoa_r+0x3d2>
 800d016:	9f00      	ldr	r7, [sp, #0]
 800d018:	9e03      	ldr	r6, [sp, #12]
 800d01a:	e794      	b.n	800cf46 <_dtoa_r+0x40e>
 800d01c:	9901      	ldr	r1, [sp, #4]
 800d01e:	4b4c      	ldr	r3, [pc, #304]	; (800d150 <_dtoa_r+0x618>)
 800d020:	4431      	add	r1, r6
 800d022:	910d      	str	r1, [sp, #52]	; 0x34
 800d024:	9908      	ldr	r1, [sp, #32]
 800d026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d02a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d02e:	2900      	cmp	r1, #0
 800d030:	d043      	beq.n	800d0ba <_dtoa_r+0x582>
 800d032:	494d      	ldr	r1, [pc, #308]	; (800d168 <_dtoa_r+0x630>)
 800d034:	2000      	movs	r0, #0
 800d036:	f7f3 fc09 	bl	800084c <__aeabi_ddiv>
 800d03a:	4652      	mov	r2, sl
 800d03c:	465b      	mov	r3, fp
 800d03e:	f7f3 f923 	bl	8000288 <__aeabi_dsub>
 800d042:	9d01      	ldr	r5, [sp, #4]
 800d044:	4682      	mov	sl, r0
 800d046:	468b      	mov	fp, r1
 800d048:	4649      	mov	r1, r9
 800d04a:	4640      	mov	r0, r8
 800d04c:	f7f3 fd84 	bl	8000b58 <__aeabi_d2iz>
 800d050:	4606      	mov	r6, r0
 800d052:	f7f3 fa67 	bl	8000524 <__aeabi_i2d>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	f7f3 f913 	bl	8000288 <__aeabi_dsub>
 800d062:	3630      	adds	r6, #48	; 0x30
 800d064:	f805 6b01 	strb.w	r6, [r5], #1
 800d068:	4652      	mov	r2, sl
 800d06a:	465b      	mov	r3, fp
 800d06c:	4680      	mov	r8, r0
 800d06e:	4689      	mov	r9, r1
 800d070:	f7f3 fd34 	bl	8000adc <__aeabi_dcmplt>
 800d074:	2800      	cmp	r0, #0
 800d076:	d163      	bne.n	800d140 <_dtoa_r+0x608>
 800d078:	4642      	mov	r2, r8
 800d07a:	464b      	mov	r3, r9
 800d07c:	4936      	ldr	r1, [pc, #216]	; (800d158 <_dtoa_r+0x620>)
 800d07e:	2000      	movs	r0, #0
 800d080:	f7f3 f902 	bl	8000288 <__aeabi_dsub>
 800d084:	4652      	mov	r2, sl
 800d086:	465b      	mov	r3, fp
 800d088:	f7f3 fd28 	bl	8000adc <__aeabi_dcmplt>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	f040 80b5 	bne.w	800d1fc <_dtoa_r+0x6c4>
 800d092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d094:	429d      	cmp	r5, r3
 800d096:	d081      	beq.n	800cf9c <_dtoa_r+0x464>
 800d098:	4b30      	ldr	r3, [pc, #192]	; (800d15c <_dtoa_r+0x624>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	4650      	mov	r0, sl
 800d09e:	4659      	mov	r1, fp
 800d0a0:	f7f3 faaa 	bl	80005f8 <__aeabi_dmul>
 800d0a4:	4b2d      	ldr	r3, [pc, #180]	; (800d15c <_dtoa_r+0x624>)
 800d0a6:	4682      	mov	sl, r0
 800d0a8:	468b      	mov	fp, r1
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f7f3 faa2 	bl	80005f8 <__aeabi_dmul>
 800d0b4:	4680      	mov	r8, r0
 800d0b6:	4689      	mov	r9, r1
 800d0b8:	e7c6      	b.n	800d048 <_dtoa_r+0x510>
 800d0ba:	4650      	mov	r0, sl
 800d0bc:	4659      	mov	r1, fp
 800d0be:	f7f3 fa9b 	bl	80005f8 <__aeabi_dmul>
 800d0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0c4:	9d01      	ldr	r5, [sp, #4]
 800d0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0c8:	4682      	mov	sl, r0
 800d0ca:	468b      	mov	fp, r1
 800d0cc:	4649      	mov	r1, r9
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	f7f3 fd42 	bl	8000b58 <__aeabi_d2iz>
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	f7f3 fa25 	bl	8000524 <__aeabi_i2d>
 800d0da:	3630      	adds	r6, #48	; 0x30
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	f7f3 f8d0 	bl	8000288 <__aeabi_dsub>
 800d0e8:	f805 6b01 	strb.w	r6, [r5], #1
 800d0ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ee:	429d      	cmp	r5, r3
 800d0f0:	4680      	mov	r8, r0
 800d0f2:	4689      	mov	r9, r1
 800d0f4:	f04f 0200 	mov.w	r2, #0
 800d0f8:	d124      	bne.n	800d144 <_dtoa_r+0x60c>
 800d0fa:	4b1b      	ldr	r3, [pc, #108]	; (800d168 <_dtoa_r+0x630>)
 800d0fc:	4650      	mov	r0, sl
 800d0fe:	4659      	mov	r1, fp
 800d100:	f7f3 f8c4 	bl	800028c <__adddf3>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4640      	mov	r0, r8
 800d10a:	4649      	mov	r1, r9
 800d10c:	f7f3 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 800d110:	2800      	cmp	r0, #0
 800d112:	d173      	bne.n	800d1fc <_dtoa_r+0x6c4>
 800d114:	4652      	mov	r2, sl
 800d116:	465b      	mov	r3, fp
 800d118:	4913      	ldr	r1, [pc, #76]	; (800d168 <_dtoa_r+0x630>)
 800d11a:	2000      	movs	r0, #0
 800d11c:	f7f3 f8b4 	bl	8000288 <__aeabi_dsub>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4640      	mov	r0, r8
 800d126:	4649      	mov	r1, r9
 800d128:	f7f3 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f43f af35 	beq.w	800cf9c <_dtoa_r+0x464>
 800d132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d134:	1e6b      	subs	r3, r5, #1
 800d136:	930f      	str	r3, [sp, #60]	; 0x3c
 800d138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d13c:	2b30      	cmp	r3, #48	; 0x30
 800d13e:	d0f8      	beq.n	800d132 <_dtoa_r+0x5fa>
 800d140:	9700      	str	r7, [sp, #0]
 800d142:	e049      	b.n	800d1d8 <_dtoa_r+0x6a0>
 800d144:	4b05      	ldr	r3, [pc, #20]	; (800d15c <_dtoa_r+0x624>)
 800d146:	f7f3 fa57 	bl	80005f8 <__aeabi_dmul>
 800d14a:	4680      	mov	r8, r0
 800d14c:	4689      	mov	r9, r1
 800d14e:	e7bd      	b.n	800d0cc <_dtoa_r+0x594>
 800d150:	08010c98 	.word	0x08010c98
 800d154:	08010c70 	.word	0x08010c70
 800d158:	3ff00000 	.word	0x3ff00000
 800d15c:	40240000 	.word	0x40240000
 800d160:	401c0000 	.word	0x401c0000
 800d164:	40140000 	.word	0x40140000
 800d168:	3fe00000 	.word	0x3fe00000
 800d16c:	9d01      	ldr	r5, [sp, #4]
 800d16e:	4656      	mov	r6, sl
 800d170:	465f      	mov	r7, fp
 800d172:	4642      	mov	r2, r8
 800d174:	464b      	mov	r3, r9
 800d176:	4630      	mov	r0, r6
 800d178:	4639      	mov	r1, r7
 800d17a:	f7f3 fb67 	bl	800084c <__aeabi_ddiv>
 800d17e:	f7f3 fceb 	bl	8000b58 <__aeabi_d2iz>
 800d182:	4682      	mov	sl, r0
 800d184:	f7f3 f9ce 	bl	8000524 <__aeabi_i2d>
 800d188:	4642      	mov	r2, r8
 800d18a:	464b      	mov	r3, r9
 800d18c:	f7f3 fa34 	bl	80005f8 <__aeabi_dmul>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	4630      	mov	r0, r6
 800d196:	4639      	mov	r1, r7
 800d198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d19c:	f7f3 f874 	bl	8000288 <__aeabi_dsub>
 800d1a0:	f805 6b01 	strb.w	r6, [r5], #1
 800d1a4:	9e01      	ldr	r6, [sp, #4]
 800d1a6:	9f03      	ldr	r7, [sp, #12]
 800d1a8:	1bae      	subs	r6, r5, r6
 800d1aa:	42b7      	cmp	r7, r6
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	d135      	bne.n	800d21e <_dtoa_r+0x6e6>
 800d1b2:	f7f3 f86b 	bl	800028c <__adddf3>
 800d1b6:	4642      	mov	r2, r8
 800d1b8:	464b      	mov	r3, r9
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460f      	mov	r7, r1
 800d1be:	f7f3 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 800d1c2:	b9d0      	cbnz	r0, 800d1fa <_dtoa_r+0x6c2>
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	464b      	mov	r3, r9
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f7f3 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1d0:	b110      	cbz	r0, 800d1d8 <_dtoa_r+0x6a0>
 800d1d2:	f01a 0f01 	tst.w	sl, #1
 800d1d6:	d110      	bne.n	800d1fa <_dtoa_r+0x6c2>
 800d1d8:	4620      	mov	r0, r4
 800d1da:	ee18 1a10 	vmov	r1, s16
 800d1de:	f001 f885 	bl	800e2ec <_Bfree>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	9800      	ldr	r0, [sp, #0]
 800d1e6:	702b      	strb	r3, [r5, #0]
 800d1e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	6018      	str	r0, [r3, #0]
 800d1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f43f acf1 	beq.w	800cbd8 <_dtoa_r+0xa0>
 800d1f6:	601d      	str	r5, [r3, #0]
 800d1f8:	e4ee      	b.n	800cbd8 <_dtoa_r+0xa0>
 800d1fa:	9f00      	ldr	r7, [sp, #0]
 800d1fc:	462b      	mov	r3, r5
 800d1fe:	461d      	mov	r5, r3
 800d200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d204:	2a39      	cmp	r2, #57	; 0x39
 800d206:	d106      	bne.n	800d216 <_dtoa_r+0x6de>
 800d208:	9a01      	ldr	r2, [sp, #4]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d1f7      	bne.n	800d1fe <_dtoa_r+0x6c6>
 800d20e:	9901      	ldr	r1, [sp, #4]
 800d210:	2230      	movs	r2, #48	; 0x30
 800d212:	3701      	adds	r7, #1
 800d214:	700a      	strb	r2, [r1, #0]
 800d216:	781a      	ldrb	r2, [r3, #0]
 800d218:	3201      	adds	r2, #1
 800d21a:	701a      	strb	r2, [r3, #0]
 800d21c:	e790      	b.n	800d140 <_dtoa_r+0x608>
 800d21e:	4ba6      	ldr	r3, [pc, #664]	; (800d4b8 <_dtoa_r+0x980>)
 800d220:	2200      	movs	r2, #0
 800d222:	f7f3 f9e9 	bl	80005f8 <__aeabi_dmul>
 800d226:	2200      	movs	r2, #0
 800d228:	2300      	movs	r3, #0
 800d22a:	4606      	mov	r6, r0
 800d22c:	460f      	mov	r7, r1
 800d22e:	f7f3 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d232:	2800      	cmp	r0, #0
 800d234:	d09d      	beq.n	800d172 <_dtoa_r+0x63a>
 800d236:	e7cf      	b.n	800d1d8 <_dtoa_r+0x6a0>
 800d238:	9a08      	ldr	r2, [sp, #32]
 800d23a:	2a00      	cmp	r2, #0
 800d23c:	f000 80d7 	beq.w	800d3ee <_dtoa_r+0x8b6>
 800d240:	9a06      	ldr	r2, [sp, #24]
 800d242:	2a01      	cmp	r2, #1
 800d244:	f300 80ba 	bgt.w	800d3bc <_dtoa_r+0x884>
 800d248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	f000 80b2 	beq.w	800d3b4 <_dtoa_r+0x87c>
 800d250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d254:	9e07      	ldr	r6, [sp, #28]
 800d256:	9d04      	ldr	r5, [sp, #16]
 800d258:	9a04      	ldr	r2, [sp, #16]
 800d25a:	441a      	add	r2, r3
 800d25c:	9204      	str	r2, [sp, #16]
 800d25e:	9a05      	ldr	r2, [sp, #20]
 800d260:	2101      	movs	r1, #1
 800d262:	441a      	add	r2, r3
 800d264:	4620      	mov	r0, r4
 800d266:	9205      	str	r2, [sp, #20]
 800d268:	f001 f942 	bl	800e4f0 <__i2b>
 800d26c:	4607      	mov	r7, r0
 800d26e:	2d00      	cmp	r5, #0
 800d270:	dd0c      	ble.n	800d28c <_dtoa_r+0x754>
 800d272:	9b05      	ldr	r3, [sp, #20]
 800d274:	2b00      	cmp	r3, #0
 800d276:	dd09      	ble.n	800d28c <_dtoa_r+0x754>
 800d278:	42ab      	cmp	r3, r5
 800d27a:	9a04      	ldr	r2, [sp, #16]
 800d27c:	bfa8      	it	ge
 800d27e:	462b      	movge	r3, r5
 800d280:	1ad2      	subs	r2, r2, r3
 800d282:	9204      	str	r2, [sp, #16]
 800d284:	9a05      	ldr	r2, [sp, #20]
 800d286:	1aed      	subs	r5, r5, r3
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	9305      	str	r3, [sp, #20]
 800d28c:	9b07      	ldr	r3, [sp, #28]
 800d28e:	b31b      	cbz	r3, 800d2d8 <_dtoa_r+0x7a0>
 800d290:	9b08      	ldr	r3, [sp, #32]
 800d292:	2b00      	cmp	r3, #0
 800d294:	f000 80af 	beq.w	800d3f6 <_dtoa_r+0x8be>
 800d298:	2e00      	cmp	r6, #0
 800d29a:	dd13      	ble.n	800d2c4 <_dtoa_r+0x78c>
 800d29c:	4639      	mov	r1, r7
 800d29e:	4632      	mov	r2, r6
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f001 f9e5 	bl	800e670 <__pow5mult>
 800d2a6:	ee18 2a10 	vmov	r2, s16
 800d2aa:	4601      	mov	r1, r0
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f001 f934 	bl	800e51c <__multiply>
 800d2b4:	ee18 1a10 	vmov	r1, s16
 800d2b8:	4680      	mov	r8, r0
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f001 f816 	bl	800e2ec <_Bfree>
 800d2c0:	ee08 8a10 	vmov	s16, r8
 800d2c4:	9b07      	ldr	r3, [sp, #28]
 800d2c6:	1b9a      	subs	r2, r3, r6
 800d2c8:	d006      	beq.n	800d2d8 <_dtoa_r+0x7a0>
 800d2ca:	ee18 1a10 	vmov	r1, s16
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f001 f9ce 	bl	800e670 <__pow5mult>
 800d2d4:	ee08 0a10 	vmov	s16, r0
 800d2d8:	2101      	movs	r1, #1
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f001 f908 	bl	800e4f0 <__i2b>
 800d2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	f340 8088 	ble.w	800d3fa <_dtoa_r+0x8c2>
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	4601      	mov	r1, r0
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f001 f9be 	bl	800e670 <__pow5mult>
 800d2f4:	9b06      	ldr	r3, [sp, #24]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	f340 8081 	ble.w	800d400 <_dtoa_r+0x8c8>
 800d2fe:	f04f 0800 	mov.w	r8, #0
 800d302:	6933      	ldr	r3, [r6, #16]
 800d304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d308:	6918      	ldr	r0, [r3, #16]
 800d30a:	f001 f8a1 	bl	800e450 <__hi0bits>
 800d30e:	f1c0 0020 	rsb	r0, r0, #32
 800d312:	9b05      	ldr	r3, [sp, #20]
 800d314:	4418      	add	r0, r3
 800d316:	f010 001f 	ands.w	r0, r0, #31
 800d31a:	f000 8092 	beq.w	800d442 <_dtoa_r+0x90a>
 800d31e:	f1c0 0320 	rsb	r3, r0, #32
 800d322:	2b04      	cmp	r3, #4
 800d324:	f340 808a 	ble.w	800d43c <_dtoa_r+0x904>
 800d328:	f1c0 001c 	rsb	r0, r0, #28
 800d32c:	9b04      	ldr	r3, [sp, #16]
 800d32e:	4403      	add	r3, r0
 800d330:	9304      	str	r3, [sp, #16]
 800d332:	9b05      	ldr	r3, [sp, #20]
 800d334:	4403      	add	r3, r0
 800d336:	4405      	add	r5, r0
 800d338:	9305      	str	r3, [sp, #20]
 800d33a:	9b04      	ldr	r3, [sp, #16]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dd07      	ble.n	800d350 <_dtoa_r+0x818>
 800d340:	ee18 1a10 	vmov	r1, s16
 800d344:	461a      	mov	r2, r3
 800d346:	4620      	mov	r0, r4
 800d348:	f001 f9ec 	bl	800e724 <__lshift>
 800d34c:	ee08 0a10 	vmov	s16, r0
 800d350:	9b05      	ldr	r3, [sp, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	dd05      	ble.n	800d362 <_dtoa_r+0x82a>
 800d356:	4631      	mov	r1, r6
 800d358:	461a      	mov	r2, r3
 800d35a:	4620      	mov	r0, r4
 800d35c:	f001 f9e2 	bl	800e724 <__lshift>
 800d360:	4606      	mov	r6, r0
 800d362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d06e      	beq.n	800d446 <_dtoa_r+0x90e>
 800d368:	ee18 0a10 	vmov	r0, s16
 800d36c:	4631      	mov	r1, r6
 800d36e:	f001 fa49 	bl	800e804 <__mcmp>
 800d372:	2800      	cmp	r0, #0
 800d374:	da67      	bge.n	800d446 <_dtoa_r+0x90e>
 800d376:	9b00      	ldr	r3, [sp, #0]
 800d378:	3b01      	subs	r3, #1
 800d37a:	ee18 1a10 	vmov	r1, s16
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	220a      	movs	r2, #10
 800d382:	2300      	movs	r3, #0
 800d384:	4620      	mov	r0, r4
 800d386:	f000 ffd3 	bl	800e330 <__multadd>
 800d38a:	9b08      	ldr	r3, [sp, #32]
 800d38c:	ee08 0a10 	vmov	s16, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 81b1 	beq.w	800d6f8 <_dtoa_r+0xbc0>
 800d396:	2300      	movs	r3, #0
 800d398:	4639      	mov	r1, r7
 800d39a:	220a      	movs	r2, #10
 800d39c:	4620      	mov	r0, r4
 800d39e:	f000 ffc7 	bl	800e330 <__multadd>
 800d3a2:	9b02      	ldr	r3, [sp, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	f300 808e 	bgt.w	800d4c8 <_dtoa_r+0x990>
 800d3ac:	9b06      	ldr	r3, [sp, #24]
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	dc51      	bgt.n	800d456 <_dtoa_r+0x91e>
 800d3b2:	e089      	b.n	800d4c8 <_dtoa_r+0x990>
 800d3b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d3ba:	e74b      	b.n	800d254 <_dtoa_r+0x71c>
 800d3bc:	9b03      	ldr	r3, [sp, #12]
 800d3be:	1e5e      	subs	r6, r3, #1
 800d3c0:	9b07      	ldr	r3, [sp, #28]
 800d3c2:	42b3      	cmp	r3, r6
 800d3c4:	bfbf      	itttt	lt
 800d3c6:	9b07      	ldrlt	r3, [sp, #28]
 800d3c8:	9607      	strlt	r6, [sp, #28]
 800d3ca:	1af2      	sublt	r2, r6, r3
 800d3cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d3ce:	bfb6      	itet	lt
 800d3d0:	189b      	addlt	r3, r3, r2
 800d3d2:	1b9e      	subge	r6, r3, r6
 800d3d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d3d6:	9b03      	ldr	r3, [sp, #12]
 800d3d8:	bfb8      	it	lt
 800d3da:	2600      	movlt	r6, #0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bfb7      	itett	lt
 800d3e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d3e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d3e8:	1a9d      	sublt	r5, r3, r2
 800d3ea:	2300      	movlt	r3, #0
 800d3ec:	e734      	b.n	800d258 <_dtoa_r+0x720>
 800d3ee:	9e07      	ldr	r6, [sp, #28]
 800d3f0:	9d04      	ldr	r5, [sp, #16]
 800d3f2:	9f08      	ldr	r7, [sp, #32]
 800d3f4:	e73b      	b.n	800d26e <_dtoa_r+0x736>
 800d3f6:	9a07      	ldr	r2, [sp, #28]
 800d3f8:	e767      	b.n	800d2ca <_dtoa_r+0x792>
 800d3fa:	9b06      	ldr	r3, [sp, #24]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	dc18      	bgt.n	800d432 <_dtoa_r+0x8fa>
 800d400:	f1ba 0f00 	cmp.w	sl, #0
 800d404:	d115      	bne.n	800d432 <_dtoa_r+0x8fa>
 800d406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d40a:	b993      	cbnz	r3, 800d432 <_dtoa_r+0x8fa>
 800d40c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d410:	0d1b      	lsrs	r3, r3, #20
 800d412:	051b      	lsls	r3, r3, #20
 800d414:	b183      	cbz	r3, 800d438 <_dtoa_r+0x900>
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	3301      	adds	r3, #1
 800d41a:	9304      	str	r3, [sp, #16]
 800d41c:	9b05      	ldr	r3, [sp, #20]
 800d41e:	3301      	adds	r3, #1
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	f04f 0801 	mov.w	r8, #1
 800d426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f47f af6a 	bne.w	800d302 <_dtoa_r+0x7ca>
 800d42e:	2001      	movs	r0, #1
 800d430:	e76f      	b.n	800d312 <_dtoa_r+0x7da>
 800d432:	f04f 0800 	mov.w	r8, #0
 800d436:	e7f6      	b.n	800d426 <_dtoa_r+0x8ee>
 800d438:	4698      	mov	r8, r3
 800d43a:	e7f4      	b.n	800d426 <_dtoa_r+0x8ee>
 800d43c:	f43f af7d 	beq.w	800d33a <_dtoa_r+0x802>
 800d440:	4618      	mov	r0, r3
 800d442:	301c      	adds	r0, #28
 800d444:	e772      	b.n	800d32c <_dtoa_r+0x7f4>
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	dc37      	bgt.n	800d4bc <_dtoa_r+0x984>
 800d44c:	9b06      	ldr	r3, [sp, #24]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	dd34      	ble.n	800d4bc <_dtoa_r+0x984>
 800d452:	9b03      	ldr	r3, [sp, #12]
 800d454:	9302      	str	r3, [sp, #8]
 800d456:	9b02      	ldr	r3, [sp, #8]
 800d458:	b96b      	cbnz	r3, 800d476 <_dtoa_r+0x93e>
 800d45a:	4631      	mov	r1, r6
 800d45c:	2205      	movs	r2, #5
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 ff66 	bl	800e330 <__multadd>
 800d464:	4601      	mov	r1, r0
 800d466:	4606      	mov	r6, r0
 800d468:	ee18 0a10 	vmov	r0, s16
 800d46c:	f001 f9ca 	bl	800e804 <__mcmp>
 800d470:	2800      	cmp	r0, #0
 800d472:	f73f adbb 	bgt.w	800cfec <_dtoa_r+0x4b4>
 800d476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d478:	9d01      	ldr	r5, [sp, #4]
 800d47a:	43db      	mvns	r3, r3
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	f04f 0800 	mov.w	r8, #0
 800d482:	4631      	mov	r1, r6
 800d484:	4620      	mov	r0, r4
 800d486:	f000 ff31 	bl	800e2ec <_Bfree>
 800d48a:	2f00      	cmp	r7, #0
 800d48c:	f43f aea4 	beq.w	800d1d8 <_dtoa_r+0x6a0>
 800d490:	f1b8 0f00 	cmp.w	r8, #0
 800d494:	d005      	beq.n	800d4a2 <_dtoa_r+0x96a>
 800d496:	45b8      	cmp	r8, r7
 800d498:	d003      	beq.n	800d4a2 <_dtoa_r+0x96a>
 800d49a:	4641      	mov	r1, r8
 800d49c:	4620      	mov	r0, r4
 800d49e:	f000 ff25 	bl	800e2ec <_Bfree>
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f000 ff21 	bl	800e2ec <_Bfree>
 800d4aa:	e695      	b.n	800d1d8 <_dtoa_r+0x6a0>
 800d4ac:	2600      	movs	r6, #0
 800d4ae:	4637      	mov	r7, r6
 800d4b0:	e7e1      	b.n	800d476 <_dtoa_r+0x93e>
 800d4b2:	9700      	str	r7, [sp, #0]
 800d4b4:	4637      	mov	r7, r6
 800d4b6:	e599      	b.n	800cfec <_dtoa_r+0x4b4>
 800d4b8:	40240000 	.word	0x40240000
 800d4bc:	9b08      	ldr	r3, [sp, #32]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f000 80ca 	beq.w	800d658 <_dtoa_r+0xb20>
 800d4c4:	9b03      	ldr	r3, [sp, #12]
 800d4c6:	9302      	str	r3, [sp, #8]
 800d4c8:	2d00      	cmp	r5, #0
 800d4ca:	dd05      	ble.n	800d4d8 <_dtoa_r+0x9a0>
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f001 f927 	bl	800e724 <__lshift>
 800d4d6:	4607      	mov	r7, r0
 800d4d8:	f1b8 0f00 	cmp.w	r8, #0
 800d4dc:	d05b      	beq.n	800d596 <_dtoa_r+0xa5e>
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fec3 	bl	800e26c <_Balloc>
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	b928      	cbnz	r0, 800d4f6 <_dtoa_r+0x9be>
 800d4ea:	4b87      	ldr	r3, [pc, #540]	; (800d708 <_dtoa_r+0xbd0>)
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d4f2:	f7ff bb3b 	b.w	800cb6c <_dtoa_r+0x34>
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	3202      	adds	r2, #2
 800d4fa:	0092      	lsls	r2, r2, #2
 800d4fc:	f107 010c 	add.w	r1, r7, #12
 800d500:	300c      	adds	r0, #12
 800d502:	f7fd fbdb 	bl	800acbc <memcpy>
 800d506:	2201      	movs	r2, #1
 800d508:	4629      	mov	r1, r5
 800d50a:	4620      	mov	r0, r4
 800d50c:	f001 f90a 	bl	800e724 <__lshift>
 800d510:	9b01      	ldr	r3, [sp, #4]
 800d512:	f103 0901 	add.w	r9, r3, #1
 800d516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d51a:	4413      	add	r3, r2
 800d51c:	9305      	str	r3, [sp, #20]
 800d51e:	f00a 0301 	and.w	r3, sl, #1
 800d522:	46b8      	mov	r8, r7
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	4607      	mov	r7, r0
 800d528:	4631      	mov	r1, r6
 800d52a:	ee18 0a10 	vmov	r0, s16
 800d52e:	f7ff fa77 	bl	800ca20 <quorem>
 800d532:	4641      	mov	r1, r8
 800d534:	9002      	str	r0, [sp, #8]
 800d536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d53a:	ee18 0a10 	vmov	r0, s16
 800d53e:	f001 f961 	bl	800e804 <__mcmp>
 800d542:	463a      	mov	r2, r7
 800d544:	9003      	str	r0, [sp, #12]
 800d546:	4631      	mov	r1, r6
 800d548:	4620      	mov	r0, r4
 800d54a:	f001 f977 	bl	800e83c <__mdiff>
 800d54e:	68c2      	ldr	r2, [r0, #12]
 800d550:	f109 3bff 	add.w	fp, r9, #4294967295
 800d554:	4605      	mov	r5, r0
 800d556:	bb02      	cbnz	r2, 800d59a <_dtoa_r+0xa62>
 800d558:	4601      	mov	r1, r0
 800d55a:	ee18 0a10 	vmov	r0, s16
 800d55e:	f001 f951 	bl	800e804 <__mcmp>
 800d562:	4602      	mov	r2, r0
 800d564:	4629      	mov	r1, r5
 800d566:	4620      	mov	r0, r4
 800d568:	9207      	str	r2, [sp, #28]
 800d56a:	f000 febf 	bl	800e2ec <_Bfree>
 800d56e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d572:	ea43 0102 	orr.w	r1, r3, r2
 800d576:	9b04      	ldr	r3, [sp, #16]
 800d578:	430b      	orrs	r3, r1
 800d57a:	464d      	mov	r5, r9
 800d57c:	d10f      	bne.n	800d59e <_dtoa_r+0xa66>
 800d57e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d582:	d02a      	beq.n	800d5da <_dtoa_r+0xaa2>
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	dd02      	ble.n	800d590 <_dtoa_r+0xa58>
 800d58a:	9b02      	ldr	r3, [sp, #8]
 800d58c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d590:	f88b a000 	strb.w	sl, [fp]
 800d594:	e775      	b.n	800d482 <_dtoa_r+0x94a>
 800d596:	4638      	mov	r0, r7
 800d598:	e7ba      	b.n	800d510 <_dtoa_r+0x9d8>
 800d59a:	2201      	movs	r2, #1
 800d59c:	e7e2      	b.n	800d564 <_dtoa_r+0xa2c>
 800d59e:	9b03      	ldr	r3, [sp, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	db04      	blt.n	800d5ae <_dtoa_r+0xa76>
 800d5a4:	9906      	ldr	r1, [sp, #24]
 800d5a6:	430b      	orrs	r3, r1
 800d5a8:	9904      	ldr	r1, [sp, #16]
 800d5aa:	430b      	orrs	r3, r1
 800d5ac:	d122      	bne.n	800d5f4 <_dtoa_r+0xabc>
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	ddee      	ble.n	800d590 <_dtoa_r+0xa58>
 800d5b2:	ee18 1a10 	vmov	r1, s16
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f001 f8b3 	bl	800e724 <__lshift>
 800d5be:	4631      	mov	r1, r6
 800d5c0:	ee08 0a10 	vmov	s16, r0
 800d5c4:	f001 f91e 	bl	800e804 <__mcmp>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	dc03      	bgt.n	800d5d4 <_dtoa_r+0xa9c>
 800d5cc:	d1e0      	bne.n	800d590 <_dtoa_r+0xa58>
 800d5ce:	f01a 0f01 	tst.w	sl, #1
 800d5d2:	d0dd      	beq.n	800d590 <_dtoa_r+0xa58>
 800d5d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5d8:	d1d7      	bne.n	800d58a <_dtoa_r+0xa52>
 800d5da:	2339      	movs	r3, #57	; 0x39
 800d5dc:	f88b 3000 	strb.w	r3, [fp]
 800d5e0:	462b      	mov	r3, r5
 800d5e2:	461d      	mov	r5, r3
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d5ea:	2a39      	cmp	r2, #57	; 0x39
 800d5ec:	d071      	beq.n	800d6d2 <_dtoa_r+0xb9a>
 800d5ee:	3201      	adds	r2, #1
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	e746      	b.n	800d482 <_dtoa_r+0x94a>
 800d5f4:	2a00      	cmp	r2, #0
 800d5f6:	dd07      	ble.n	800d608 <_dtoa_r+0xad0>
 800d5f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5fc:	d0ed      	beq.n	800d5da <_dtoa_r+0xaa2>
 800d5fe:	f10a 0301 	add.w	r3, sl, #1
 800d602:	f88b 3000 	strb.w	r3, [fp]
 800d606:	e73c      	b.n	800d482 <_dtoa_r+0x94a>
 800d608:	9b05      	ldr	r3, [sp, #20]
 800d60a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d60e:	4599      	cmp	r9, r3
 800d610:	d047      	beq.n	800d6a2 <_dtoa_r+0xb6a>
 800d612:	ee18 1a10 	vmov	r1, s16
 800d616:	2300      	movs	r3, #0
 800d618:	220a      	movs	r2, #10
 800d61a:	4620      	mov	r0, r4
 800d61c:	f000 fe88 	bl	800e330 <__multadd>
 800d620:	45b8      	cmp	r8, r7
 800d622:	ee08 0a10 	vmov	s16, r0
 800d626:	f04f 0300 	mov.w	r3, #0
 800d62a:	f04f 020a 	mov.w	r2, #10
 800d62e:	4641      	mov	r1, r8
 800d630:	4620      	mov	r0, r4
 800d632:	d106      	bne.n	800d642 <_dtoa_r+0xb0a>
 800d634:	f000 fe7c 	bl	800e330 <__multadd>
 800d638:	4680      	mov	r8, r0
 800d63a:	4607      	mov	r7, r0
 800d63c:	f109 0901 	add.w	r9, r9, #1
 800d640:	e772      	b.n	800d528 <_dtoa_r+0x9f0>
 800d642:	f000 fe75 	bl	800e330 <__multadd>
 800d646:	4639      	mov	r1, r7
 800d648:	4680      	mov	r8, r0
 800d64a:	2300      	movs	r3, #0
 800d64c:	220a      	movs	r2, #10
 800d64e:	4620      	mov	r0, r4
 800d650:	f000 fe6e 	bl	800e330 <__multadd>
 800d654:	4607      	mov	r7, r0
 800d656:	e7f1      	b.n	800d63c <_dtoa_r+0xb04>
 800d658:	9b03      	ldr	r3, [sp, #12]
 800d65a:	9302      	str	r3, [sp, #8]
 800d65c:	9d01      	ldr	r5, [sp, #4]
 800d65e:	ee18 0a10 	vmov	r0, s16
 800d662:	4631      	mov	r1, r6
 800d664:	f7ff f9dc 	bl	800ca20 <quorem>
 800d668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d66c:	9b01      	ldr	r3, [sp, #4]
 800d66e:	f805 ab01 	strb.w	sl, [r5], #1
 800d672:	1aea      	subs	r2, r5, r3
 800d674:	9b02      	ldr	r3, [sp, #8]
 800d676:	4293      	cmp	r3, r2
 800d678:	dd09      	ble.n	800d68e <_dtoa_r+0xb56>
 800d67a:	ee18 1a10 	vmov	r1, s16
 800d67e:	2300      	movs	r3, #0
 800d680:	220a      	movs	r2, #10
 800d682:	4620      	mov	r0, r4
 800d684:	f000 fe54 	bl	800e330 <__multadd>
 800d688:	ee08 0a10 	vmov	s16, r0
 800d68c:	e7e7      	b.n	800d65e <_dtoa_r+0xb26>
 800d68e:	9b02      	ldr	r3, [sp, #8]
 800d690:	2b00      	cmp	r3, #0
 800d692:	bfc8      	it	gt
 800d694:	461d      	movgt	r5, r3
 800d696:	9b01      	ldr	r3, [sp, #4]
 800d698:	bfd8      	it	le
 800d69a:	2501      	movle	r5, #1
 800d69c:	441d      	add	r5, r3
 800d69e:	f04f 0800 	mov.w	r8, #0
 800d6a2:	ee18 1a10 	vmov	r1, s16
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f001 f83b 	bl	800e724 <__lshift>
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	ee08 0a10 	vmov	s16, r0
 800d6b4:	f001 f8a6 	bl	800e804 <__mcmp>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	dc91      	bgt.n	800d5e0 <_dtoa_r+0xaa8>
 800d6bc:	d102      	bne.n	800d6c4 <_dtoa_r+0xb8c>
 800d6be:	f01a 0f01 	tst.w	sl, #1
 800d6c2:	d18d      	bne.n	800d5e0 <_dtoa_r+0xaa8>
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	461d      	mov	r5, r3
 800d6c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6cc:	2a30      	cmp	r2, #48	; 0x30
 800d6ce:	d0fa      	beq.n	800d6c6 <_dtoa_r+0xb8e>
 800d6d0:	e6d7      	b.n	800d482 <_dtoa_r+0x94a>
 800d6d2:	9a01      	ldr	r2, [sp, #4]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d184      	bne.n	800d5e2 <_dtoa_r+0xaaa>
 800d6d8:	9b00      	ldr	r3, [sp, #0]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	2331      	movs	r3, #49	; 0x31
 800d6e0:	7013      	strb	r3, [r2, #0]
 800d6e2:	e6ce      	b.n	800d482 <_dtoa_r+0x94a>
 800d6e4:	4b09      	ldr	r3, [pc, #36]	; (800d70c <_dtoa_r+0xbd4>)
 800d6e6:	f7ff ba95 	b.w	800cc14 <_dtoa_r+0xdc>
 800d6ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f47f aa6e 	bne.w	800cbce <_dtoa_r+0x96>
 800d6f2:	4b07      	ldr	r3, [pc, #28]	; (800d710 <_dtoa_r+0xbd8>)
 800d6f4:	f7ff ba8e 	b.w	800cc14 <_dtoa_r+0xdc>
 800d6f8:	9b02      	ldr	r3, [sp, #8]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	dcae      	bgt.n	800d65c <_dtoa_r+0xb24>
 800d6fe:	9b06      	ldr	r3, [sp, #24]
 800d700:	2b02      	cmp	r3, #2
 800d702:	f73f aea8 	bgt.w	800d456 <_dtoa_r+0x91e>
 800d706:	e7a9      	b.n	800d65c <_dtoa_r+0xb24>
 800d708:	08010b20 	.word	0x08010b20
 800d70c:	08010924 	.word	0x08010924
 800d710:	08010aa1 	.word	0x08010aa1

0800d714 <__sflush_r>:
 800d714:	898a      	ldrh	r2, [r1, #12]
 800d716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71a:	4605      	mov	r5, r0
 800d71c:	0710      	lsls	r0, r2, #28
 800d71e:	460c      	mov	r4, r1
 800d720:	d458      	bmi.n	800d7d4 <__sflush_r+0xc0>
 800d722:	684b      	ldr	r3, [r1, #4]
 800d724:	2b00      	cmp	r3, #0
 800d726:	dc05      	bgt.n	800d734 <__sflush_r+0x20>
 800d728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	dc02      	bgt.n	800d734 <__sflush_r+0x20>
 800d72e:	2000      	movs	r0, #0
 800d730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d736:	2e00      	cmp	r6, #0
 800d738:	d0f9      	beq.n	800d72e <__sflush_r+0x1a>
 800d73a:	2300      	movs	r3, #0
 800d73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d740:	682f      	ldr	r7, [r5, #0]
 800d742:	602b      	str	r3, [r5, #0]
 800d744:	d032      	beq.n	800d7ac <__sflush_r+0x98>
 800d746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d748:	89a3      	ldrh	r3, [r4, #12]
 800d74a:	075a      	lsls	r2, r3, #29
 800d74c:	d505      	bpl.n	800d75a <__sflush_r+0x46>
 800d74e:	6863      	ldr	r3, [r4, #4]
 800d750:	1ac0      	subs	r0, r0, r3
 800d752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d754:	b10b      	cbz	r3, 800d75a <__sflush_r+0x46>
 800d756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d758:	1ac0      	subs	r0, r0, r3
 800d75a:	2300      	movs	r3, #0
 800d75c:	4602      	mov	r2, r0
 800d75e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d760:	6a21      	ldr	r1, [r4, #32]
 800d762:	4628      	mov	r0, r5
 800d764:	47b0      	blx	r6
 800d766:	1c43      	adds	r3, r0, #1
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	d106      	bne.n	800d77a <__sflush_r+0x66>
 800d76c:	6829      	ldr	r1, [r5, #0]
 800d76e:	291d      	cmp	r1, #29
 800d770:	d82c      	bhi.n	800d7cc <__sflush_r+0xb8>
 800d772:	4a2a      	ldr	r2, [pc, #168]	; (800d81c <__sflush_r+0x108>)
 800d774:	40ca      	lsrs	r2, r1
 800d776:	07d6      	lsls	r6, r2, #31
 800d778:	d528      	bpl.n	800d7cc <__sflush_r+0xb8>
 800d77a:	2200      	movs	r2, #0
 800d77c:	6062      	str	r2, [r4, #4]
 800d77e:	04d9      	lsls	r1, r3, #19
 800d780:	6922      	ldr	r2, [r4, #16]
 800d782:	6022      	str	r2, [r4, #0]
 800d784:	d504      	bpl.n	800d790 <__sflush_r+0x7c>
 800d786:	1c42      	adds	r2, r0, #1
 800d788:	d101      	bne.n	800d78e <__sflush_r+0x7a>
 800d78a:	682b      	ldr	r3, [r5, #0]
 800d78c:	b903      	cbnz	r3, 800d790 <__sflush_r+0x7c>
 800d78e:	6560      	str	r0, [r4, #84]	; 0x54
 800d790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d792:	602f      	str	r7, [r5, #0]
 800d794:	2900      	cmp	r1, #0
 800d796:	d0ca      	beq.n	800d72e <__sflush_r+0x1a>
 800d798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d79c:	4299      	cmp	r1, r3
 800d79e:	d002      	beq.n	800d7a6 <__sflush_r+0x92>
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f001 fa3b 	bl	800ec1c <_free_r>
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	6360      	str	r0, [r4, #52]	; 0x34
 800d7aa:	e7c1      	b.n	800d730 <__sflush_r+0x1c>
 800d7ac:	6a21      	ldr	r1, [r4, #32]
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	47b0      	blx	r6
 800d7b4:	1c41      	adds	r1, r0, #1
 800d7b6:	d1c7      	bne.n	800d748 <__sflush_r+0x34>
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0c4      	beq.n	800d748 <__sflush_r+0x34>
 800d7be:	2b1d      	cmp	r3, #29
 800d7c0:	d001      	beq.n	800d7c6 <__sflush_r+0xb2>
 800d7c2:	2b16      	cmp	r3, #22
 800d7c4:	d101      	bne.n	800d7ca <__sflush_r+0xb6>
 800d7c6:	602f      	str	r7, [r5, #0]
 800d7c8:	e7b1      	b.n	800d72e <__sflush_r+0x1a>
 800d7ca:	89a3      	ldrh	r3, [r4, #12]
 800d7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7d0:	81a3      	strh	r3, [r4, #12]
 800d7d2:	e7ad      	b.n	800d730 <__sflush_r+0x1c>
 800d7d4:	690f      	ldr	r7, [r1, #16]
 800d7d6:	2f00      	cmp	r7, #0
 800d7d8:	d0a9      	beq.n	800d72e <__sflush_r+0x1a>
 800d7da:	0793      	lsls	r3, r2, #30
 800d7dc:	680e      	ldr	r6, [r1, #0]
 800d7de:	bf08      	it	eq
 800d7e0:	694b      	ldreq	r3, [r1, #20]
 800d7e2:	600f      	str	r7, [r1, #0]
 800d7e4:	bf18      	it	ne
 800d7e6:	2300      	movne	r3, #0
 800d7e8:	eba6 0807 	sub.w	r8, r6, r7
 800d7ec:	608b      	str	r3, [r1, #8]
 800d7ee:	f1b8 0f00 	cmp.w	r8, #0
 800d7f2:	dd9c      	ble.n	800d72e <__sflush_r+0x1a>
 800d7f4:	6a21      	ldr	r1, [r4, #32]
 800d7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7f8:	4643      	mov	r3, r8
 800d7fa:	463a      	mov	r2, r7
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b0      	blx	r6
 800d800:	2800      	cmp	r0, #0
 800d802:	dc06      	bgt.n	800d812 <__sflush_r+0xfe>
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d80a:	81a3      	strh	r3, [r4, #12]
 800d80c:	f04f 30ff 	mov.w	r0, #4294967295
 800d810:	e78e      	b.n	800d730 <__sflush_r+0x1c>
 800d812:	4407      	add	r7, r0
 800d814:	eba8 0800 	sub.w	r8, r8, r0
 800d818:	e7e9      	b.n	800d7ee <__sflush_r+0xda>
 800d81a:	bf00      	nop
 800d81c:	20400001 	.word	0x20400001

0800d820 <_fflush_r>:
 800d820:	b538      	push	{r3, r4, r5, lr}
 800d822:	690b      	ldr	r3, [r1, #16]
 800d824:	4605      	mov	r5, r0
 800d826:	460c      	mov	r4, r1
 800d828:	b913      	cbnz	r3, 800d830 <_fflush_r+0x10>
 800d82a:	2500      	movs	r5, #0
 800d82c:	4628      	mov	r0, r5
 800d82e:	bd38      	pop	{r3, r4, r5, pc}
 800d830:	b118      	cbz	r0, 800d83a <_fflush_r+0x1a>
 800d832:	6983      	ldr	r3, [r0, #24]
 800d834:	b90b      	cbnz	r3, 800d83a <_fflush_r+0x1a>
 800d836:	f000 f887 	bl	800d948 <__sinit>
 800d83a:	4b14      	ldr	r3, [pc, #80]	; (800d88c <_fflush_r+0x6c>)
 800d83c:	429c      	cmp	r4, r3
 800d83e:	d11b      	bne.n	800d878 <_fflush_r+0x58>
 800d840:	686c      	ldr	r4, [r5, #4]
 800d842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d0ef      	beq.n	800d82a <_fflush_r+0xa>
 800d84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d84c:	07d0      	lsls	r0, r2, #31
 800d84e:	d404      	bmi.n	800d85a <_fflush_r+0x3a>
 800d850:	0599      	lsls	r1, r3, #22
 800d852:	d402      	bmi.n	800d85a <_fflush_r+0x3a>
 800d854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d856:	f000 fc88 	bl	800e16a <__retarget_lock_acquire_recursive>
 800d85a:	4628      	mov	r0, r5
 800d85c:	4621      	mov	r1, r4
 800d85e:	f7ff ff59 	bl	800d714 <__sflush_r>
 800d862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d864:	07da      	lsls	r2, r3, #31
 800d866:	4605      	mov	r5, r0
 800d868:	d4e0      	bmi.n	800d82c <_fflush_r+0xc>
 800d86a:	89a3      	ldrh	r3, [r4, #12]
 800d86c:	059b      	lsls	r3, r3, #22
 800d86e:	d4dd      	bmi.n	800d82c <_fflush_r+0xc>
 800d870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d872:	f000 fc7b 	bl	800e16c <__retarget_lock_release_recursive>
 800d876:	e7d9      	b.n	800d82c <_fflush_r+0xc>
 800d878:	4b05      	ldr	r3, [pc, #20]	; (800d890 <_fflush_r+0x70>)
 800d87a:	429c      	cmp	r4, r3
 800d87c:	d101      	bne.n	800d882 <_fflush_r+0x62>
 800d87e:	68ac      	ldr	r4, [r5, #8]
 800d880:	e7df      	b.n	800d842 <_fflush_r+0x22>
 800d882:	4b04      	ldr	r3, [pc, #16]	; (800d894 <_fflush_r+0x74>)
 800d884:	429c      	cmp	r4, r3
 800d886:	bf08      	it	eq
 800d888:	68ec      	ldreq	r4, [r5, #12]
 800d88a:	e7da      	b.n	800d842 <_fflush_r+0x22>
 800d88c:	08010b54 	.word	0x08010b54
 800d890:	08010b74 	.word	0x08010b74
 800d894:	08010b34 	.word	0x08010b34

0800d898 <std>:
 800d898:	2300      	movs	r3, #0
 800d89a:	b510      	push	{r4, lr}
 800d89c:	4604      	mov	r4, r0
 800d89e:	e9c0 3300 	strd	r3, r3, [r0]
 800d8a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8a6:	6083      	str	r3, [r0, #8]
 800d8a8:	8181      	strh	r1, [r0, #12]
 800d8aa:	6643      	str	r3, [r0, #100]	; 0x64
 800d8ac:	81c2      	strh	r2, [r0, #14]
 800d8ae:	6183      	str	r3, [r0, #24]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	2208      	movs	r2, #8
 800d8b4:	305c      	adds	r0, #92	; 0x5c
 800d8b6:	f7fd fa0f 	bl	800acd8 <memset>
 800d8ba:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <std+0x38>)
 800d8bc:	6263      	str	r3, [r4, #36]	; 0x24
 800d8be:	4b05      	ldr	r3, [pc, #20]	; (800d8d4 <std+0x3c>)
 800d8c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8c2:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <std+0x40>)
 800d8c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8c6:	4b05      	ldr	r3, [pc, #20]	; (800d8dc <std+0x44>)
 800d8c8:	6224      	str	r4, [r4, #32]
 800d8ca:	6323      	str	r3, [r4, #48]	; 0x30
 800d8cc:	bd10      	pop	{r4, pc}
 800d8ce:	bf00      	nop
 800d8d0:	0800f379 	.word	0x0800f379
 800d8d4:	0800f39b 	.word	0x0800f39b
 800d8d8:	0800f3d3 	.word	0x0800f3d3
 800d8dc:	0800f3f7 	.word	0x0800f3f7

0800d8e0 <_cleanup_r>:
 800d8e0:	4901      	ldr	r1, [pc, #4]	; (800d8e8 <_cleanup_r+0x8>)
 800d8e2:	f000 b8af 	b.w	800da44 <_fwalk_reent>
 800d8e6:	bf00      	nop
 800d8e8:	0800d821 	.word	0x0800d821

0800d8ec <__sfmoreglue>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	2268      	movs	r2, #104	; 0x68
 800d8f0:	1e4d      	subs	r5, r1, #1
 800d8f2:	4355      	muls	r5, r2
 800d8f4:	460e      	mov	r6, r1
 800d8f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d8fa:	f001 f9fb 	bl	800ecf4 <_malloc_r>
 800d8fe:	4604      	mov	r4, r0
 800d900:	b140      	cbz	r0, 800d914 <__sfmoreglue+0x28>
 800d902:	2100      	movs	r1, #0
 800d904:	e9c0 1600 	strd	r1, r6, [r0]
 800d908:	300c      	adds	r0, #12
 800d90a:	60a0      	str	r0, [r4, #8]
 800d90c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d910:	f7fd f9e2 	bl	800acd8 <memset>
 800d914:	4620      	mov	r0, r4
 800d916:	bd70      	pop	{r4, r5, r6, pc}

0800d918 <__sfp_lock_acquire>:
 800d918:	4801      	ldr	r0, [pc, #4]	; (800d920 <__sfp_lock_acquire+0x8>)
 800d91a:	f000 bc26 	b.w	800e16a <__retarget_lock_acquire_recursive>
 800d91e:	bf00      	nop
 800d920:	2001227d 	.word	0x2001227d

0800d924 <__sfp_lock_release>:
 800d924:	4801      	ldr	r0, [pc, #4]	; (800d92c <__sfp_lock_release+0x8>)
 800d926:	f000 bc21 	b.w	800e16c <__retarget_lock_release_recursive>
 800d92a:	bf00      	nop
 800d92c:	2001227d 	.word	0x2001227d

0800d930 <__sinit_lock_acquire>:
 800d930:	4801      	ldr	r0, [pc, #4]	; (800d938 <__sinit_lock_acquire+0x8>)
 800d932:	f000 bc1a 	b.w	800e16a <__retarget_lock_acquire_recursive>
 800d936:	bf00      	nop
 800d938:	2001227e 	.word	0x2001227e

0800d93c <__sinit_lock_release>:
 800d93c:	4801      	ldr	r0, [pc, #4]	; (800d944 <__sinit_lock_release+0x8>)
 800d93e:	f000 bc15 	b.w	800e16c <__retarget_lock_release_recursive>
 800d942:	bf00      	nop
 800d944:	2001227e 	.word	0x2001227e

0800d948 <__sinit>:
 800d948:	b510      	push	{r4, lr}
 800d94a:	4604      	mov	r4, r0
 800d94c:	f7ff fff0 	bl	800d930 <__sinit_lock_acquire>
 800d950:	69a3      	ldr	r3, [r4, #24]
 800d952:	b11b      	cbz	r3, 800d95c <__sinit+0x14>
 800d954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d958:	f7ff bff0 	b.w	800d93c <__sinit_lock_release>
 800d95c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d960:	6523      	str	r3, [r4, #80]	; 0x50
 800d962:	4b13      	ldr	r3, [pc, #76]	; (800d9b0 <__sinit+0x68>)
 800d964:	4a13      	ldr	r2, [pc, #76]	; (800d9b4 <__sinit+0x6c>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	62a2      	str	r2, [r4, #40]	; 0x28
 800d96a:	42a3      	cmp	r3, r4
 800d96c:	bf04      	itt	eq
 800d96e:	2301      	moveq	r3, #1
 800d970:	61a3      	streq	r3, [r4, #24]
 800d972:	4620      	mov	r0, r4
 800d974:	f000 f820 	bl	800d9b8 <__sfp>
 800d978:	6060      	str	r0, [r4, #4]
 800d97a:	4620      	mov	r0, r4
 800d97c:	f000 f81c 	bl	800d9b8 <__sfp>
 800d980:	60a0      	str	r0, [r4, #8]
 800d982:	4620      	mov	r0, r4
 800d984:	f000 f818 	bl	800d9b8 <__sfp>
 800d988:	2200      	movs	r2, #0
 800d98a:	60e0      	str	r0, [r4, #12]
 800d98c:	2104      	movs	r1, #4
 800d98e:	6860      	ldr	r0, [r4, #4]
 800d990:	f7ff ff82 	bl	800d898 <std>
 800d994:	68a0      	ldr	r0, [r4, #8]
 800d996:	2201      	movs	r2, #1
 800d998:	2109      	movs	r1, #9
 800d99a:	f7ff ff7d 	bl	800d898 <std>
 800d99e:	68e0      	ldr	r0, [r4, #12]
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	2112      	movs	r1, #18
 800d9a4:	f7ff ff78 	bl	800d898 <std>
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	61a3      	str	r3, [r4, #24]
 800d9ac:	e7d2      	b.n	800d954 <__sinit+0xc>
 800d9ae:	bf00      	nop
 800d9b0:	08010910 	.word	0x08010910
 800d9b4:	0800d8e1 	.word	0x0800d8e1

0800d9b8 <__sfp>:
 800d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ba:	4607      	mov	r7, r0
 800d9bc:	f7ff ffac 	bl	800d918 <__sfp_lock_acquire>
 800d9c0:	4b1e      	ldr	r3, [pc, #120]	; (800da3c <__sfp+0x84>)
 800d9c2:	681e      	ldr	r6, [r3, #0]
 800d9c4:	69b3      	ldr	r3, [r6, #24]
 800d9c6:	b913      	cbnz	r3, 800d9ce <__sfp+0x16>
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7ff ffbd 	bl	800d948 <__sinit>
 800d9ce:	3648      	adds	r6, #72	; 0x48
 800d9d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	d503      	bpl.n	800d9e0 <__sfp+0x28>
 800d9d8:	6833      	ldr	r3, [r6, #0]
 800d9da:	b30b      	cbz	r3, 800da20 <__sfp+0x68>
 800d9dc:	6836      	ldr	r6, [r6, #0]
 800d9de:	e7f7      	b.n	800d9d0 <__sfp+0x18>
 800d9e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d9e4:	b9d5      	cbnz	r5, 800da1c <__sfp+0x64>
 800d9e6:	4b16      	ldr	r3, [pc, #88]	; (800da40 <__sfp+0x88>)
 800d9e8:	60e3      	str	r3, [r4, #12]
 800d9ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d9ee:	6665      	str	r5, [r4, #100]	; 0x64
 800d9f0:	f000 fbba 	bl	800e168 <__retarget_lock_init_recursive>
 800d9f4:	f7ff ff96 	bl	800d924 <__sfp_lock_release>
 800d9f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d9fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da00:	6025      	str	r5, [r4, #0]
 800da02:	61a5      	str	r5, [r4, #24]
 800da04:	2208      	movs	r2, #8
 800da06:	4629      	mov	r1, r5
 800da08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da0c:	f7fd f964 	bl	800acd8 <memset>
 800da10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da18:	4620      	mov	r0, r4
 800da1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da1c:	3468      	adds	r4, #104	; 0x68
 800da1e:	e7d9      	b.n	800d9d4 <__sfp+0x1c>
 800da20:	2104      	movs	r1, #4
 800da22:	4638      	mov	r0, r7
 800da24:	f7ff ff62 	bl	800d8ec <__sfmoreglue>
 800da28:	4604      	mov	r4, r0
 800da2a:	6030      	str	r0, [r6, #0]
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d1d5      	bne.n	800d9dc <__sfp+0x24>
 800da30:	f7ff ff78 	bl	800d924 <__sfp_lock_release>
 800da34:	230c      	movs	r3, #12
 800da36:	603b      	str	r3, [r7, #0]
 800da38:	e7ee      	b.n	800da18 <__sfp+0x60>
 800da3a:	bf00      	nop
 800da3c:	08010910 	.word	0x08010910
 800da40:	ffff0001 	.word	0xffff0001

0800da44 <_fwalk_reent>:
 800da44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da48:	4606      	mov	r6, r0
 800da4a:	4688      	mov	r8, r1
 800da4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da50:	2700      	movs	r7, #0
 800da52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da56:	f1b9 0901 	subs.w	r9, r9, #1
 800da5a:	d505      	bpl.n	800da68 <_fwalk_reent+0x24>
 800da5c:	6824      	ldr	r4, [r4, #0]
 800da5e:	2c00      	cmp	r4, #0
 800da60:	d1f7      	bne.n	800da52 <_fwalk_reent+0xe>
 800da62:	4638      	mov	r0, r7
 800da64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da68:	89ab      	ldrh	r3, [r5, #12]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d907      	bls.n	800da7e <_fwalk_reent+0x3a>
 800da6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da72:	3301      	adds	r3, #1
 800da74:	d003      	beq.n	800da7e <_fwalk_reent+0x3a>
 800da76:	4629      	mov	r1, r5
 800da78:	4630      	mov	r0, r6
 800da7a:	47c0      	blx	r8
 800da7c:	4307      	orrs	r7, r0
 800da7e:	3568      	adds	r5, #104	; 0x68
 800da80:	e7e9      	b.n	800da56 <_fwalk_reent+0x12>

0800da82 <rshift>:
 800da82:	6903      	ldr	r3, [r0, #16]
 800da84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da90:	f100 0414 	add.w	r4, r0, #20
 800da94:	dd45      	ble.n	800db22 <rshift+0xa0>
 800da96:	f011 011f 	ands.w	r1, r1, #31
 800da9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800daa2:	d10c      	bne.n	800dabe <rshift+0x3c>
 800daa4:	f100 0710 	add.w	r7, r0, #16
 800daa8:	4629      	mov	r1, r5
 800daaa:	42b1      	cmp	r1, r6
 800daac:	d334      	bcc.n	800db18 <rshift+0x96>
 800daae:	1a9b      	subs	r3, r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	1eea      	subs	r2, r5, #3
 800dab4:	4296      	cmp	r6, r2
 800dab6:	bf38      	it	cc
 800dab8:	2300      	movcc	r3, #0
 800daba:	4423      	add	r3, r4
 800dabc:	e015      	b.n	800daea <rshift+0x68>
 800dabe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dac2:	f1c1 0820 	rsb	r8, r1, #32
 800dac6:	40cf      	lsrs	r7, r1
 800dac8:	f105 0e04 	add.w	lr, r5, #4
 800dacc:	46a1      	mov	r9, r4
 800dace:	4576      	cmp	r6, lr
 800dad0:	46f4      	mov	ip, lr
 800dad2:	d815      	bhi.n	800db00 <rshift+0x7e>
 800dad4:	1a9a      	subs	r2, r3, r2
 800dad6:	0092      	lsls	r2, r2, #2
 800dad8:	3a04      	subs	r2, #4
 800dada:	3501      	adds	r5, #1
 800dadc:	42ae      	cmp	r6, r5
 800dade:	bf38      	it	cc
 800dae0:	2200      	movcc	r2, #0
 800dae2:	18a3      	adds	r3, r4, r2
 800dae4:	50a7      	str	r7, [r4, r2]
 800dae6:	b107      	cbz	r7, 800daea <rshift+0x68>
 800dae8:	3304      	adds	r3, #4
 800daea:	1b1a      	subs	r2, r3, r4
 800daec:	42a3      	cmp	r3, r4
 800daee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800daf2:	bf08      	it	eq
 800daf4:	2300      	moveq	r3, #0
 800daf6:	6102      	str	r2, [r0, #16]
 800daf8:	bf08      	it	eq
 800dafa:	6143      	streq	r3, [r0, #20]
 800dafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db00:	f8dc c000 	ldr.w	ip, [ip]
 800db04:	fa0c fc08 	lsl.w	ip, ip, r8
 800db08:	ea4c 0707 	orr.w	r7, ip, r7
 800db0c:	f849 7b04 	str.w	r7, [r9], #4
 800db10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db14:	40cf      	lsrs	r7, r1
 800db16:	e7da      	b.n	800dace <rshift+0x4c>
 800db18:	f851 cb04 	ldr.w	ip, [r1], #4
 800db1c:	f847 cf04 	str.w	ip, [r7, #4]!
 800db20:	e7c3      	b.n	800daaa <rshift+0x28>
 800db22:	4623      	mov	r3, r4
 800db24:	e7e1      	b.n	800daea <rshift+0x68>

0800db26 <__hexdig_fun>:
 800db26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800db2a:	2b09      	cmp	r3, #9
 800db2c:	d802      	bhi.n	800db34 <__hexdig_fun+0xe>
 800db2e:	3820      	subs	r0, #32
 800db30:	b2c0      	uxtb	r0, r0
 800db32:	4770      	bx	lr
 800db34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800db38:	2b05      	cmp	r3, #5
 800db3a:	d801      	bhi.n	800db40 <__hexdig_fun+0x1a>
 800db3c:	3847      	subs	r0, #71	; 0x47
 800db3e:	e7f7      	b.n	800db30 <__hexdig_fun+0xa>
 800db40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800db44:	2b05      	cmp	r3, #5
 800db46:	d801      	bhi.n	800db4c <__hexdig_fun+0x26>
 800db48:	3827      	subs	r0, #39	; 0x27
 800db4a:	e7f1      	b.n	800db30 <__hexdig_fun+0xa>
 800db4c:	2000      	movs	r0, #0
 800db4e:	4770      	bx	lr

0800db50 <__gethex>:
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	ed2d 8b02 	vpush	{d8}
 800db58:	b089      	sub	sp, #36	; 0x24
 800db5a:	ee08 0a10 	vmov	s16, r0
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	4bb4      	ldr	r3, [pc, #720]	; (800de34 <__gethex+0x2e4>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	9301      	str	r3, [sp, #4]
 800db66:	4618      	mov	r0, r3
 800db68:	468b      	mov	fp, r1
 800db6a:	4690      	mov	r8, r2
 800db6c:	f7f2 fb30 	bl	80001d0 <strlen>
 800db70:	9b01      	ldr	r3, [sp, #4]
 800db72:	f8db 2000 	ldr.w	r2, [fp]
 800db76:	4403      	add	r3, r0
 800db78:	4682      	mov	sl, r0
 800db7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800db7e:	9305      	str	r3, [sp, #20]
 800db80:	1c93      	adds	r3, r2, #2
 800db82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db8a:	32fe      	adds	r2, #254	; 0xfe
 800db8c:	18d1      	adds	r1, r2, r3
 800db8e:	461f      	mov	r7, r3
 800db90:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db94:	9100      	str	r1, [sp, #0]
 800db96:	2830      	cmp	r0, #48	; 0x30
 800db98:	d0f8      	beq.n	800db8c <__gethex+0x3c>
 800db9a:	f7ff ffc4 	bl	800db26 <__hexdig_fun>
 800db9e:	4604      	mov	r4, r0
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d13a      	bne.n	800dc1a <__gethex+0xca>
 800dba4:	9901      	ldr	r1, [sp, #4]
 800dba6:	4652      	mov	r2, sl
 800dba8:	4638      	mov	r0, r7
 800dbaa:	f001 fc28 	bl	800f3fe <strncmp>
 800dbae:	4605      	mov	r5, r0
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d168      	bne.n	800dc86 <__gethex+0x136>
 800dbb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dbb8:	eb07 060a 	add.w	r6, r7, sl
 800dbbc:	f7ff ffb3 	bl	800db26 <__hexdig_fun>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d062      	beq.n	800dc8a <__gethex+0x13a>
 800dbc4:	4633      	mov	r3, r6
 800dbc6:	7818      	ldrb	r0, [r3, #0]
 800dbc8:	2830      	cmp	r0, #48	; 0x30
 800dbca:	461f      	mov	r7, r3
 800dbcc:	f103 0301 	add.w	r3, r3, #1
 800dbd0:	d0f9      	beq.n	800dbc6 <__gethex+0x76>
 800dbd2:	f7ff ffa8 	bl	800db26 <__hexdig_fun>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	fab0 f480 	clz	r4, r0
 800dbdc:	0964      	lsrs	r4, r4, #5
 800dbde:	4635      	mov	r5, r6
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	4616      	mov	r6, r2
 800dbe6:	3201      	adds	r2, #1
 800dbe8:	7830      	ldrb	r0, [r6, #0]
 800dbea:	f7ff ff9c 	bl	800db26 <__hexdig_fun>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d1f8      	bne.n	800dbe4 <__gethex+0x94>
 800dbf2:	9901      	ldr	r1, [sp, #4]
 800dbf4:	4652      	mov	r2, sl
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f001 fc01 	bl	800f3fe <strncmp>
 800dbfc:	b980      	cbnz	r0, 800dc20 <__gethex+0xd0>
 800dbfe:	b94d      	cbnz	r5, 800dc14 <__gethex+0xc4>
 800dc00:	eb06 050a 	add.w	r5, r6, sl
 800dc04:	462a      	mov	r2, r5
 800dc06:	4616      	mov	r6, r2
 800dc08:	3201      	adds	r2, #1
 800dc0a:	7830      	ldrb	r0, [r6, #0]
 800dc0c:	f7ff ff8b 	bl	800db26 <__hexdig_fun>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d1f8      	bne.n	800dc06 <__gethex+0xb6>
 800dc14:	1bad      	subs	r5, r5, r6
 800dc16:	00ad      	lsls	r5, r5, #2
 800dc18:	e004      	b.n	800dc24 <__gethex+0xd4>
 800dc1a:	2400      	movs	r4, #0
 800dc1c:	4625      	mov	r5, r4
 800dc1e:	e7e0      	b.n	800dbe2 <__gethex+0x92>
 800dc20:	2d00      	cmp	r5, #0
 800dc22:	d1f7      	bne.n	800dc14 <__gethex+0xc4>
 800dc24:	7833      	ldrb	r3, [r6, #0]
 800dc26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc2a:	2b50      	cmp	r3, #80	; 0x50
 800dc2c:	d13b      	bne.n	800dca6 <__gethex+0x156>
 800dc2e:	7873      	ldrb	r3, [r6, #1]
 800dc30:	2b2b      	cmp	r3, #43	; 0x2b
 800dc32:	d02c      	beq.n	800dc8e <__gethex+0x13e>
 800dc34:	2b2d      	cmp	r3, #45	; 0x2d
 800dc36:	d02e      	beq.n	800dc96 <__gethex+0x146>
 800dc38:	1c71      	adds	r1, r6, #1
 800dc3a:	f04f 0900 	mov.w	r9, #0
 800dc3e:	7808      	ldrb	r0, [r1, #0]
 800dc40:	f7ff ff71 	bl	800db26 <__hexdig_fun>
 800dc44:	1e43      	subs	r3, r0, #1
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	2b18      	cmp	r3, #24
 800dc4a:	d82c      	bhi.n	800dca6 <__gethex+0x156>
 800dc4c:	f1a0 0210 	sub.w	r2, r0, #16
 800dc50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc54:	f7ff ff67 	bl	800db26 <__hexdig_fun>
 800dc58:	1e43      	subs	r3, r0, #1
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b18      	cmp	r3, #24
 800dc5e:	d91d      	bls.n	800dc9c <__gethex+0x14c>
 800dc60:	f1b9 0f00 	cmp.w	r9, #0
 800dc64:	d000      	beq.n	800dc68 <__gethex+0x118>
 800dc66:	4252      	negs	r2, r2
 800dc68:	4415      	add	r5, r2
 800dc6a:	f8cb 1000 	str.w	r1, [fp]
 800dc6e:	b1e4      	cbz	r4, 800dcaa <__gethex+0x15a>
 800dc70:	9b00      	ldr	r3, [sp, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	bf14      	ite	ne
 800dc76:	2700      	movne	r7, #0
 800dc78:	2706      	moveq	r7, #6
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	b009      	add	sp, #36	; 0x24
 800dc7e:	ecbd 8b02 	vpop	{d8}
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	463e      	mov	r6, r7
 800dc88:	4625      	mov	r5, r4
 800dc8a:	2401      	movs	r4, #1
 800dc8c:	e7ca      	b.n	800dc24 <__gethex+0xd4>
 800dc8e:	f04f 0900 	mov.w	r9, #0
 800dc92:	1cb1      	adds	r1, r6, #2
 800dc94:	e7d3      	b.n	800dc3e <__gethex+0xee>
 800dc96:	f04f 0901 	mov.w	r9, #1
 800dc9a:	e7fa      	b.n	800dc92 <__gethex+0x142>
 800dc9c:	230a      	movs	r3, #10
 800dc9e:	fb03 0202 	mla	r2, r3, r2, r0
 800dca2:	3a10      	subs	r2, #16
 800dca4:	e7d4      	b.n	800dc50 <__gethex+0x100>
 800dca6:	4631      	mov	r1, r6
 800dca8:	e7df      	b.n	800dc6a <__gethex+0x11a>
 800dcaa:	1bf3      	subs	r3, r6, r7
 800dcac:	3b01      	subs	r3, #1
 800dcae:	4621      	mov	r1, r4
 800dcb0:	2b07      	cmp	r3, #7
 800dcb2:	dc0b      	bgt.n	800dccc <__gethex+0x17c>
 800dcb4:	ee18 0a10 	vmov	r0, s16
 800dcb8:	f000 fad8 	bl	800e26c <_Balloc>
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	b940      	cbnz	r0, 800dcd2 <__gethex+0x182>
 800dcc0:	4b5d      	ldr	r3, [pc, #372]	; (800de38 <__gethex+0x2e8>)
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	21de      	movs	r1, #222	; 0xde
 800dcc6:	485d      	ldr	r0, [pc, #372]	; (800de3c <__gethex+0x2ec>)
 800dcc8:	f001 fbcc 	bl	800f464 <__assert_func>
 800dccc:	3101      	adds	r1, #1
 800dcce:	105b      	asrs	r3, r3, #1
 800dcd0:	e7ee      	b.n	800dcb0 <__gethex+0x160>
 800dcd2:	f100 0914 	add.w	r9, r0, #20
 800dcd6:	f04f 0b00 	mov.w	fp, #0
 800dcda:	f1ca 0301 	rsb	r3, sl, #1
 800dcde:	f8cd 9008 	str.w	r9, [sp, #8]
 800dce2:	f8cd b000 	str.w	fp, [sp]
 800dce6:	9306      	str	r3, [sp, #24]
 800dce8:	42b7      	cmp	r7, r6
 800dcea:	d340      	bcc.n	800dd6e <__gethex+0x21e>
 800dcec:	9802      	ldr	r0, [sp, #8]
 800dcee:	9b00      	ldr	r3, [sp, #0]
 800dcf0:	f840 3b04 	str.w	r3, [r0], #4
 800dcf4:	eba0 0009 	sub.w	r0, r0, r9
 800dcf8:	1080      	asrs	r0, r0, #2
 800dcfa:	0146      	lsls	r6, r0, #5
 800dcfc:	6120      	str	r0, [r4, #16]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 fba6 	bl	800e450 <__hi0bits>
 800dd04:	1a30      	subs	r0, r6, r0
 800dd06:	f8d8 6000 	ldr.w	r6, [r8]
 800dd0a:	42b0      	cmp	r0, r6
 800dd0c:	dd63      	ble.n	800ddd6 <__gethex+0x286>
 800dd0e:	1b87      	subs	r7, r0, r6
 800dd10:	4639      	mov	r1, r7
 800dd12:	4620      	mov	r0, r4
 800dd14:	f000 ff4a 	bl	800ebac <__any_on>
 800dd18:	4682      	mov	sl, r0
 800dd1a:	b1a8      	cbz	r0, 800dd48 <__gethex+0x1f8>
 800dd1c:	1e7b      	subs	r3, r7, #1
 800dd1e:	1159      	asrs	r1, r3, #5
 800dd20:	f003 021f 	and.w	r2, r3, #31
 800dd24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dd28:	f04f 0a01 	mov.w	sl, #1
 800dd2c:	fa0a f202 	lsl.w	r2, sl, r2
 800dd30:	420a      	tst	r2, r1
 800dd32:	d009      	beq.n	800dd48 <__gethex+0x1f8>
 800dd34:	4553      	cmp	r3, sl
 800dd36:	dd05      	ble.n	800dd44 <__gethex+0x1f4>
 800dd38:	1eb9      	subs	r1, r7, #2
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f000 ff36 	bl	800ebac <__any_on>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d145      	bne.n	800ddd0 <__gethex+0x280>
 800dd44:	f04f 0a02 	mov.w	sl, #2
 800dd48:	4639      	mov	r1, r7
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f7ff fe99 	bl	800da82 <rshift>
 800dd50:	443d      	add	r5, r7
 800dd52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd56:	42ab      	cmp	r3, r5
 800dd58:	da4c      	bge.n	800ddf4 <__gethex+0x2a4>
 800dd5a:	ee18 0a10 	vmov	r0, s16
 800dd5e:	4621      	mov	r1, r4
 800dd60:	f000 fac4 	bl	800e2ec <_Bfree>
 800dd64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd66:	2300      	movs	r3, #0
 800dd68:	6013      	str	r3, [r2, #0]
 800dd6a:	27a3      	movs	r7, #163	; 0xa3
 800dd6c:	e785      	b.n	800dc7a <__gethex+0x12a>
 800dd6e:	1e73      	subs	r3, r6, #1
 800dd70:	9a05      	ldr	r2, [sp, #20]
 800dd72:	9303      	str	r3, [sp, #12]
 800dd74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d019      	beq.n	800ddb0 <__gethex+0x260>
 800dd7c:	f1bb 0f20 	cmp.w	fp, #32
 800dd80:	d107      	bne.n	800dd92 <__gethex+0x242>
 800dd82:	9b02      	ldr	r3, [sp, #8]
 800dd84:	9a00      	ldr	r2, [sp, #0]
 800dd86:	f843 2b04 	str.w	r2, [r3], #4
 800dd8a:	9302      	str	r3, [sp, #8]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	469b      	mov	fp, r3
 800dd92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dd96:	f7ff fec6 	bl	800db26 <__hexdig_fun>
 800dd9a:	9b00      	ldr	r3, [sp, #0]
 800dd9c:	f000 000f 	and.w	r0, r0, #15
 800dda0:	fa00 f00b 	lsl.w	r0, r0, fp
 800dda4:	4303      	orrs	r3, r0
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	f10b 0b04 	add.w	fp, fp, #4
 800ddac:	9b03      	ldr	r3, [sp, #12]
 800ddae:	e00d      	b.n	800ddcc <__gethex+0x27c>
 800ddb0:	9b03      	ldr	r3, [sp, #12]
 800ddb2:	9a06      	ldr	r2, [sp, #24]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	42bb      	cmp	r3, r7
 800ddb8:	d3e0      	bcc.n	800dd7c <__gethex+0x22c>
 800ddba:	4618      	mov	r0, r3
 800ddbc:	9901      	ldr	r1, [sp, #4]
 800ddbe:	9307      	str	r3, [sp, #28]
 800ddc0:	4652      	mov	r2, sl
 800ddc2:	f001 fb1c 	bl	800f3fe <strncmp>
 800ddc6:	9b07      	ldr	r3, [sp, #28]
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d1d7      	bne.n	800dd7c <__gethex+0x22c>
 800ddcc:	461e      	mov	r6, r3
 800ddce:	e78b      	b.n	800dce8 <__gethex+0x198>
 800ddd0:	f04f 0a03 	mov.w	sl, #3
 800ddd4:	e7b8      	b.n	800dd48 <__gethex+0x1f8>
 800ddd6:	da0a      	bge.n	800ddee <__gethex+0x29e>
 800ddd8:	1a37      	subs	r7, r6, r0
 800ddda:	4621      	mov	r1, r4
 800dddc:	ee18 0a10 	vmov	r0, s16
 800dde0:	463a      	mov	r2, r7
 800dde2:	f000 fc9f 	bl	800e724 <__lshift>
 800dde6:	1bed      	subs	r5, r5, r7
 800dde8:	4604      	mov	r4, r0
 800ddea:	f100 0914 	add.w	r9, r0, #20
 800ddee:	f04f 0a00 	mov.w	sl, #0
 800ddf2:	e7ae      	b.n	800dd52 <__gethex+0x202>
 800ddf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ddf8:	42a8      	cmp	r0, r5
 800ddfa:	dd72      	ble.n	800dee2 <__gethex+0x392>
 800ddfc:	1b45      	subs	r5, r0, r5
 800ddfe:	42ae      	cmp	r6, r5
 800de00:	dc36      	bgt.n	800de70 <__gethex+0x320>
 800de02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de06:	2b02      	cmp	r3, #2
 800de08:	d02a      	beq.n	800de60 <__gethex+0x310>
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d02c      	beq.n	800de68 <__gethex+0x318>
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d11c      	bne.n	800de4c <__gethex+0x2fc>
 800de12:	42ae      	cmp	r6, r5
 800de14:	d11a      	bne.n	800de4c <__gethex+0x2fc>
 800de16:	2e01      	cmp	r6, #1
 800de18:	d112      	bne.n	800de40 <__gethex+0x2f0>
 800de1a:	9a04      	ldr	r2, [sp, #16]
 800de1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de20:	6013      	str	r3, [r2, #0]
 800de22:	2301      	movs	r3, #1
 800de24:	6123      	str	r3, [r4, #16]
 800de26:	f8c9 3000 	str.w	r3, [r9]
 800de2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de2c:	2762      	movs	r7, #98	; 0x62
 800de2e:	601c      	str	r4, [r3, #0]
 800de30:	e723      	b.n	800dc7a <__gethex+0x12a>
 800de32:	bf00      	nop
 800de34:	08010bfc 	.word	0x08010bfc
 800de38:	08010b20 	.word	0x08010b20
 800de3c:	08010b94 	.word	0x08010b94
 800de40:	1e71      	subs	r1, r6, #1
 800de42:	4620      	mov	r0, r4
 800de44:	f000 feb2 	bl	800ebac <__any_on>
 800de48:	2800      	cmp	r0, #0
 800de4a:	d1e6      	bne.n	800de1a <__gethex+0x2ca>
 800de4c:	ee18 0a10 	vmov	r0, s16
 800de50:	4621      	mov	r1, r4
 800de52:	f000 fa4b 	bl	800e2ec <_Bfree>
 800de56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de58:	2300      	movs	r3, #0
 800de5a:	6013      	str	r3, [r2, #0]
 800de5c:	2750      	movs	r7, #80	; 0x50
 800de5e:	e70c      	b.n	800dc7a <__gethex+0x12a>
 800de60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1f2      	bne.n	800de4c <__gethex+0x2fc>
 800de66:	e7d8      	b.n	800de1a <__gethex+0x2ca>
 800de68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1d5      	bne.n	800de1a <__gethex+0x2ca>
 800de6e:	e7ed      	b.n	800de4c <__gethex+0x2fc>
 800de70:	1e6f      	subs	r7, r5, #1
 800de72:	f1ba 0f00 	cmp.w	sl, #0
 800de76:	d131      	bne.n	800dedc <__gethex+0x38c>
 800de78:	b127      	cbz	r7, 800de84 <__gethex+0x334>
 800de7a:	4639      	mov	r1, r7
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 fe95 	bl	800ebac <__any_on>
 800de82:	4682      	mov	sl, r0
 800de84:	117b      	asrs	r3, r7, #5
 800de86:	2101      	movs	r1, #1
 800de88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800de8c:	f007 071f 	and.w	r7, r7, #31
 800de90:	fa01 f707 	lsl.w	r7, r1, r7
 800de94:	421f      	tst	r7, r3
 800de96:	4629      	mov	r1, r5
 800de98:	4620      	mov	r0, r4
 800de9a:	bf18      	it	ne
 800de9c:	f04a 0a02 	orrne.w	sl, sl, #2
 800dea0:	1b76      	subs	r6, r6, r5
 800dea2:	f7ff fdee 	bl	800da82 <rshift>
 800dea6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800deaa:	2702      	movs	r7, #2
 800deac:	f1ba 0f00 	cmp.w	sl, #0
 800deb0:	d048      	beq.n	800df44 <__gethex+0x3f4>
 800deb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d015      	beq.n	800dee6 <__gethex+0x396>
 800deba:	2b03      	cmp	r3, #3
 800debc:	d017      	beq.n	800deee <__gethex+0x39e>
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d109      	bne.n	800ded6 <__gethex+0x386>
 800dec2:	f01a 0f02 	tst.w	sl, #2
 800dec6:	d006      	beq.n	800ded6 <__gethex+0x386>
 800dec8:	f8d9 0000 	ldr.w	r0, [r9]
 800decc:	ea4a 0a00 	orr.w	sl, sl, r0
 800ded0:	f01a 0f01 	tst.w	sl, #1
 800ded4:	d10e      	bne.n	800def4 <__gethex+0x3a4>
 800ded6:	f047 0710 	orr.w	r7, r7, #16
 800deda:	e033      	b.n	800df44 <__gethex+0x3f4>
 800dedc:	f04f 0a01 	mov.w	sl, #1
 800dee0:	e7d0      	b.n	800de84 <__gethex+0x334>
 800dee2:	2701      	movs	r7, #1
 800dee4:	e7e2      	b.n	800deac <__gethex+0x35c>
 800dee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dee8:	f1c3 0301 	rsb	r3, r3, #1
 800deec:	9315      	str	r3, [sp, #84]	; 0x54
 800deee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800def0:	2b00      	cmp	r3, #0
 800def2:	d0f0      	beq.n	800ded6 <__gethex+0x386>
 800def4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800def8:	f104 0314 	add.w	r3, r4, #20
 800defc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df04:	f04f 0c00 	mov.w	ip, #0
 800df08:	4618      	mov	r0, r3
 800df0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df12:	d01c      	beq.n	800df4e <__gethex+0x3fe>
 800df14:	3201      	adds	r2, #1
 800df16:	6002      	str	r2, [r0, #0]
 800df18:	2f02      	cmp	r7, #2
 800df1a:	f104 0314 	add.w	r3, r4, #20
 800df1e:	d13f      	bne.n	800dfa0 <__gethex+0x450>
 800df20:	f8d8 2000 	ldr.w	r2, [r8]
 800df24:	3a01      	subs	r2, #1
 800df26:	42b2      	cmp	r2, r6
 800df28:	d10a      	bne.n	800df40 <__gethex+0x3f0>
 800df2a:	1171      	asrs	r1, r6, #5
 800df2c:	2201      	movs	r2, #1
 800df2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df32:	f006 061f 	and.w	r6, r6, #31
 800df36:	fa02 f606 	lsl.w	r6, r2, r6
 800df3a:	421e      	tst	r6, r3
 800df3c:	bf18      	it	ne
 800df3e:	4617      	movne	r7, r2
 800df40:	f047 0720 	orr.w	r7, r7, #32
 800df44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df46:	601c      	str	r4, [r3, #0]
 800df48:	9b04      	ldr	r3, [sp, #16]
 800df4a:	601d      	str	r5, [r3, #0]
 800df4c:	e695      	b.n	800dc7a <__gethex+0x12a>
 800df4e:	4299      	cmp	r1, r3
 800df50:	f843 cc04 	str.w	ip, [r3, #-4]
 800df54:	d8d8      	bhi.n	800df08 <__gethex+0x3b8>
 800df56:	68a3      	ldr	r3, [r4, #8]
 800df58:	459b      	cmp	fp, r3
 800df5a:	db19      	blt.n	800df90 <__gethex+0x440>
 800df5c:	6861      	ldr	r1, [r4, #4]
 800df5e:	ee18 0a10 	vmov	r0, s16
 800df62:	3101      	adds	r1, #1
 800df64:	f000 f982 	bl	800e26c <_Balloc>
 800df68:	4681      	mov	r9, r0
 800df6a:	b918      	cbnz	r0, 800df74 <__gethex+0x424>
 800df6c:	4b1a      	ldr	r3, [pc, #104]	; (800dfd8 <__gethex+0x488>)
 800df6e:	4602      	mov	r2, r0
 800df70:	2184      	movs	r1, #132	; 0x84
 800df72:	e6a8      	b.n	800dcc6 <__gethex+0x176>
 800df74:	6922      	ldr	r2, [r4, #16]
 800df76:	3202      	adds	r2, #2
 800df78:	f104 010c 	add.w	r1, r4, #12
 800df7c:	0092      	lsls	r2, r2, #2
 800df7e:	300c      	adds	r0, #12
 800df80:	f7fc fe9c 	bl	800acbc <memcpy>
 800df84:	4621      	mov	r1, r4
 800df86:	ee18 0a10 	vmov	r0, s16
 800df8a:	f000 f9af 	bl	800e2ec <_Bfree>
 800df8e:	464c      	mov	r4, r9
 800df90:	6923      	ldr	r3, [r4, #16]
 800df92:	1c5a      	adds	r2, r3, #1
 800df94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df98:	6122      	str	r2, [r4, #16]
 800df9a:	2201      	movs	r2, #1
 800df9c:	615a      	str	r2, [r3, #20]
 800df9e:	e7bb      	b.n	800df18 <__gethex+0x3c8>
 800dfa0:	6922      	ldr	r2, [r4, #16]
 800dfa2:	455a      	cmp	r2, fp
 800dfa4:	dd0b      	ble.n	800dfbe <__gethex+0x46e>
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f7ff fd6a 	bl	800da82 <rshift>
 800dfae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfb2:	3501      	adds	r5, #1
 800dfb4:	42ab      	cmp	r3, r5
 800dfb6:	f6ff aed0 	blt.w	800dd5a <__gethex+0x20a>
 800dfba:	2701      	movs	r7, #1
 800dfbc:	e7c0      	b.n	800df40 <__gethex+0x3f0>
 800dfbe:	f016 061f 	ands.w	r6, r6, #31
 800dfc2:	d0fa      	beq.n	800dfba <__gethex+0x46a>
 800dfc4:	4453      	add	r3, sl
 800dfc6:	f1c6 0620 	rsb	r6, r6, #32
 800dfca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfce:	f000 fa3f 	bl	800e450 <__hi0bits>
 800dfd2:	42b0      	cmp	r0, r6
 800dfd4:	dbe7      	blt.n	800dfa6 <__gethex+0x456>
 800dfd6:	e7f0      	b.n	800dfba <__gethex+0x46a>
 800dfd8:	08010b20 	.word	0x08010b20

0800dfdc <L_shift>:
 800dfdc:	f1c2 0208 	rsb	r2, r2, #8
 800dfe0:	0092      	lsls	r2, r2, #2
 800dfe2:	b570      	push	{r4, r5, r6, lr}
 800dfe4:	f1c2 0620 	rsb	r6, r2, #32
 800dfe8:	6843      	ldr	r3, [r0, #4]
 800dfea:	6804      	ldr	r4, [r0, #0]
 800dfec:	fa03 f506 	lsl.w	r5, r3, r6
 800dff0:	432c      	orrs	r4, r5
 800dff2:	40d3      	lsrs	r3, r2
 800dff4:	6004      	str	r4, [r0, #0]
 800dff6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dffa:	4288      	cmp	r0, r1
 800dffc:	d3f4      	bcc.n	800dfe8 <L_shift+0xc>
 800dffe:	bd70      	pop	{r4, r5, r6, pc}

0800e000 <__match>:
 800e000:	b530      	push	{r4, r5, lr}
 800e002:	6803      	ldr	r3, [r0, #0]
 800e004:	3301      	adds	r3, #1
 800e006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e00a:	b914      	cbnz	r4, 800e012 <__match+0x12>
 800e00c:	6003      	str	r3, [r0, #0]
 800e00e:	2001      	movs	r0, #1
 800e010:	bd30      	pop	{r4, r5, pc}
 800e012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e016:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e01a:	2d19      	cmp	r5, #25
 800e01c:	bf98      	it	ls
 800e01e:	3220      	addls	r2, #32
 800e020:	42a2      	cmp	r2, r4
 800e022:	d0f0      	beq.n	800e006 <__match+0x6>
 800e024:	2000      	movs	r0, #0
 800e026:	e7f3      	b.n	800e010 <__match+0x10>

0800e028 <__hexnan>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	680b      	ldr	r3, [r1, #0]
 800e02e:	115e      	asrs	r6, r3, #5
 800e030:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e034:	f013 031f 	ands.w	r3, r3, #31
 800e038:	b087      	sub	sp, #28
 800e03a:	bf18      	it	ne
 800e03c:	3604      	addne	r6, #4
 800e03e:	2500      	movs	r5, #0
 800e040:	1f37      	subs	r7, r6, #4
 800e042:	4690      	mov	r8, r2
 800e044:	6802      	ldr	r2, [r0, #0]
 800e046:	9301      	str	r3, [sp, #4]
 800e048:	4682      	mov	sl, r0
 800e04a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e04e:	46b9      	mov	r9, r7
 800e050:	463c      	mov	r4, r7
 800e052:	9502      	str	r5, [sp, #8]
 800e054:	46ab      	mov	fp, r5
 800e056:	7851      	ldrb	r1, [r2, #1]
 800e058:	1c53      	adds	r3, r2, #1
 800e05a:	9303      	str	r3, [sp, #12]
 800e05c:	b341      	cbz	r1, 800e0b0 <__hexnan+0x88>
 800e05e:	4608      	mov	r0, r1
 800e060:	9205      	str	r2, [sp, #20]
 800e062:	9104      	str	r1, [sp, #16]
 800e064:	f7ff fd5f 	bl	800db26 <__hexdig_fun>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d14f      	bne.n	800e10c <__hexnan+0xe4>
 800e06c:	9904      	ldr	r1, [sp, #16]
 800e06e:	9a05      	ldr	r2, [sp, #20]
 800e070:	2920      	cmp	r1, #32
 800e072:	d818      	bhi.n	800e0a6 <__hexnan+0x7e>
 800e074:	9b02      	ldr	r3, [sp, #8]
 800e076:	459b      	cmp	fp, r3
 800e078:	dd13      	ble.n	800e0a2 <__hexnan+0x7a>
 800e07a:	454c      	cmp	r4, r9
 800e07c:	d206      	bcs.n	800e08c <__hexnan+0x64>
 800e07e:	2d07      	cmp	r5, #7
 800e080:	dc04      	bgt.n	800e08c <__hexnan+0x64>
 800e082:	462a      	mov	r2, r5
 800e084:	4649      	mov	r1, r9
 800e086:	4620      	mov	r0, r4
 800e088:	f7ff ffa8 	bl	800dfdc <L_shift>
 800e08c:	4544      	cmp	r4, r8
 800e08e:	d950      	bls.n	800e132 <__hexnan+0x10a>
 800e090:	2300      	movs	r3, #0
 800e092:	f1a4 0904 	sub.w	r9, r4, #4
 800e096:	f844 3c04 	str.w	r3, [r4, #-4]
 800e09a:	f8cd b008 	str.w	fp, [sp, #8]
 800e09e:	464c      	mov	r4, r9
 800e0a0:	461d      	mov	r5, r3
 800e0a2:	9a03      	ldr	r2, [sp, #12]
 800e0a4:	e7d7      	b.n	800e056 <__hexnan+0x2e>
 800e0a6:	2929      	cmp	r1, #41	; 0x29
 800e0a8:	d156      	bne.n	800e158 <__hexnan+0x130>
 800e0aa:	3202      	adds	r2, #2
 800e0ac:	f8ca 2000 	str.w	r2, [sl]
 800e0b0:	f1bb 0f00 	cmp.w	fp, #0
 800e0b4:	d050      	beq.n	800e158 <__hexnan+0x130>
 800e0b6:	454c      	cmp	r4, r9
 800e0b8:	d206      	bcs.n	800e0c8 <__hexnan+0xa0>
 800e0ba:	2d07      	cmp	r5, #7
 800e0bc:	dc04      	bgt.n	800e0c8 <__hexnan+0xa0>
 800e0be:	462a      	mov	r2, r5
 800e0c0:	4649      	mov	r1, r9
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f7ff ff8a 	bl	800dfdc <L_shift>
 800e0c8:	4544      	cmp	r4, r8
 800e0ca:	d934      	bls.n	800e136 <__hexnan+0x10e>
 800e0cc:	f1a8 0204 	sub.w	r2, r8, #4
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0da:	429f      	cmp	r7, r3
 800e0dc:	d2f9      	bcs.n	800e0d2 <__hexnan+0xaa>
 800e0de:	1b3b      	subs	r3, r7, r4
 800e0e0:	f023 0303 	bic.w	r3, r3, #3
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	3401      	adds	r4, #1
 800e0e8:	3e03      	subs	r6, #3
 800e0ea:	42b4      	cmp	r4, r6
 800e0ec:	bf88      	it	hi
 800e0ee:	2304      	movhi	r3, #4
 800e0f0:	4443      	add	r3, r8
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f843 2b04 	str.w	r2, [r3], #4
 800e0f8:	429f      	cmp	r7, r3
 800e0fa:	d2fb      	bcs.n	800e0f4 <__hexnan+0xcc>
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	b91b      	cbnz	r3, 800e108 <__hexnan+0xe0>
 800e100:	4547      	cmp	r7, r8
 800e102:	d127      	bne.n	800e154 <__hexnan+0x12c>
 800e104:	2301      	movs	r3, #1
 800e106:	603b      	str	r3, [r7, #0]
 800e108:	2005      	movs	r0, #5
 800e10a:	e026      	b.n	800e15a <__hexnan+0x132>
 800e10c:	3501      	adds	r5, #1
 800e10e:	2d08      	cmp	r5, #8
 800e110:	f10b 0b01 	add.w	fp, fp, #1
 800e114:	dd06      	ble.n	800e124 <__hexnan+0xfc>
 800e116:	4544      	cmp	r4, r8
 800e118:	d9c3      	bls.n	800e0a2 <__hexnan+0x7a>
 800e11a:	2300      	movs	r3, #0
 800e11c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e120:	2501      	movs	r5, #1
 800e122:	3c04      	subs	r4, #4
 800e124:	6822      	ldr	r2, [r4, #0]
 800e126:	f000 000f 	and.w	r0, r0, #15
 800e12a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e12e:	6022      	str	r2, [r4, #0]
 800e130:	e7b7      	b.n	800e0a2 <__hexnan+0x7a>
 800e132:	2508      	movs	r5, #8
 800e134:	e7b5      	b.n	800e0a2 <__hexnan+0x7a>
 800e136:	9b01      	ldr	r3, [sp, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d0df      	beq.n	800e0fc <__hexnan+0xd4>
 800e13c:	f04f 32ff 	mov.w	r2, #4294967295
 800e140:	f1c3 0320 	rsb	r3, r3, #32
 800e144:	fa22 f303 	lsr.w	r3, r2, r3
 800e148:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e14c:	401a      	ands	r2, r3
 800e14e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e152:	e7d3      	b.n	800e0fc <__hexnan+0xd4>
 800e154:	3f04      	subs	r7, #4
 800e156:	e7d1      	b.n	800e0fc <__hexnan+0xd4>
 800e158:	2004      	movs	r0, #4
 800e15a:	b007      	add	sp, #28
 800e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e160 <_localeconv_r>:
 800e160:	4800      	ldr	r0, [pc, #0]	; (800e164 <_localeconv_r+0x4>)
 800e162:	4770      	bx	lr
 800e164:	20000164 	.word	0x20000164

0800e168 <__retarget_lock_init_recursive>:
 800e168:	4770      	bx	lr

0800e16a <__retarget_lock_acquire_recursive>:
 800e16a:	4770      	bx	lr

0800e16c <__retarget_lock_release_recursive>:
 800e16c:	4770      	bx	lr

0800e16e <__swhatbuf_r>:
 800e16e:	b570      	push	{r4, r5, r6, lr}
 800e170:	460e      	mov	r6, r1
 800e172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e176:	2900      	cmp	r1, #0
 800e178:	b096      	sub	sp, #88	; 0x58
 800e17a:	4614      	mov	r4, r2
 800e17c:	461d      	mov	r5, r3
 800e17e:	da08      	bge.n	800e192 <__swhatbuf_r+0x24>
 800e180:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	602a      	str	r2, [r5, #0]
 800e188:	061a      	lsls	r2, r3, #24
 800e18a:	d410      	bmi.n	800e1ae <__swhatbuf_r+0x40>
 800e18c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e190:	e00e      	b.n	800e1b0 <__swhatbuf_r+0x42>
 800e192:	466a      	mov	r2, sp
 800e194:	f001 f9a6 	bl	800f4e4 <_fstat_r>
 800e198:	2800      	cmp	r0, #0
 800e19a:	dbf1      	blt.n	800e180 <__swhatbuf_r+0x12>
 800e19c:	9a01      	ldr	r2, [sp, #4]
 800e19e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1a6:	425a      	negs	r2, r3
 800e1a8:	415a      	adcs	r2, r3
 800e1aa:	602a      	str	r2, [r5, #0]
 800e1ac:	e7ee      	b.n	800e18c <__swhatbuf_r+0x1e>
 800e1ae:	2340      	movs	r3, #64	; 0x40
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	6023      	str	r3, [r4, #0]
 800e1b4:	b016      	add	sp, #88	; 0x58
 800e1b6:	bd70      	pop	{r4, r5, r6, pc}

0800e1b8 <__smakebuf_r>:
 800e1b8:	898b      	ldrh	r3, [r1, #12]
 800e1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1bc:	079d      	lsls	r5, r3, #30
 800e1be:	4606      	mov	r6, r0
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	d507      	bpl.n	800e1d4 <__smakebuf_r+0x1c>
 800e1c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	6123      	str	r3, [r4, #16]
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	6163      	str	r3, [r4, #20]
 800e1d0:	b002      	add	sp, #8
 800e1d2:	bd70      	pop	{r4, r5, r6, pc}
 800e1d4:	ab01      	add	r3, sp, #4
 800e1d6:	466a      	mov	r2, sp
 800e1d8:	f7ff ffc9 	bl	800e16e <__swhatbuf_r>
 800e1dc:	9900      	ldr	r1, [sp, #0]
 800e1de:	4605      	mov	r5, r0
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f000 fd87 	bl	800ecf4 <_malloc_r>
 800e1e6:	b948      	cbnz	r0, 800e1fc <__smakebuf_r+0x44>
 800e1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ec:	059a      	lsls	r2, r3, #22
 800e1ee:	d4ef      	bmi.n	800e1d0 <__smakebuf_r+0x18>
 800e1f0:	f023 0303 	bic.w	r3, r3, #3
 800e1f4:	f043 0302 	orr.w	r3, r3, #2
 800e1f8:	81a3      	strh	r3, [r4, #12]
 800e1fa:	e7e3      	b.n	800e1c4 <__smakebuf_r+0xc>
 800e1fc:	4b0d      	ldr	r3, [pc, #52]	; (800e234 <__smakebuf_r+0x7c>)
 800e1fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	6020      	str	r0, [r4, #0]
 800e204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	9b00      	ldr	r3, [sp, #0]
 800e20c:	6163      	str	r3, [r4, #20]
 800e20e:	9b01      	ldr	r3, [sp, #4]
 800e210:	6120      	str	r0, [r4, #16]
 800e212:	b15b      	cbz	r3, 800e22c <__smakebuf_r+0x74>
 800e214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e218:	4630      	mov	r0, r6
 800e21a:	f001 f975 	bl	800f508 <_isatty_r>
 800e21e:	b128      	cbz	r0, 800e22c <__smakebuf_r+0x74>
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	f023 0303 	bic.w	r3, r3, #3
 800e226:	f043 0301 	orr.w	r3, r3, #1
 800e22a:	81a3      	strh	r3, [r4, #12]
 800e22c:	89a0      	ldrh	r0, [r4, #12]
 800e22e:	4305      	orrs	r5, r0
 800e230:	81a5      	strh	r5, [r4, #12]
 800e232:	e7cd      	b.n	800e1d0 <__smakebuf_r+0x18>
 800e234:	0800d8e1 	.word	0x0800d8e1

0800e238 <malloc>:
 800e238:	4b02      	ldr	r3, [pc, #8]	; (800e244 <malloc+0xc>)
 800e23a:	4601      	mov	r1, r0
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	f000 bd59 	b.w	800ecf4 <_malloc_r>
 800e242:	bf00      	nop
 800e244:	2000000c 	.word	0x2000000c

0800e248 <__ascii_mbtowc>:
 800e248:	b082      	sub	sp, #8
 800e24a:	b901      	cbnz	r1, 800e24e <__ascii_mbtowc+0x6>
 800e24c:	a901      	add	r1, sp, #4
 800e24e:	b142      	cbz	r2, 800e262 <__ascii_mbtowc+0x1a>
 800e250:	b14b      	cbz	r3, 800e266 <__ascii_mbtowc+0x1e>
 800e252:	7813      	ldrb	r3, [r2, #0]
 800e254:	600b      	str	r3, [r1, #0]
 800e256:	7812      	ldrb	r2, [r2, #0]
 800e258:	1e10      	subs	r0, r2, #0
 800e25a:	bf18      	it	ne
 800e25c:	2001      	movne	r0, #1
 800e25e:	b002      	add	sp, #8
 800e260:	4770      	bx	lr
 800e262:	4610      	mov	r0, r2
 800e264:	e7fb      	b.n	800e25e <__ascii_mbtowc+0x16>
 800e266:	f06f 0001 	mvn.w	r0, #1
 800e26a:	e7f8      	b.n	800e25e <__ascii_mbtowc+0x16>

0800e26c <_Balloc>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e270:	4604      	mov	r4, r0
 800e272:	460d      	mov	r5, r1
 800e274:	b976      	cbnz	r6, 800e294 <_Balloc+0x28>
 800e276:	2010      	movs	r0, #16
 800e278:	f7ff ffde 	bl	800e238 <malloc>
 800e27c:	4602      	mov	r2, r0
 800e27e:	6260      	str	r0, [r4, #36]	; 0x24
 800e280:	b920      	cbnz	r0, 800e28c <_Balloc+0x20>
 800e282:	4b18      	ldr	r3, [pc, #96]	; (800e2e4 <_Balloc+0x78>)
 800e284:	4818      	ldr	r0, [pc, #96]	; (800e2e8 <_Balloc+0x7c>)
 800e286:	2166      	movs	r1, #102	; 0x66
 800e288:	f001 f8ec 	bl	800f464 <__assert_func>
 800e28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e290:	6006      	str	r6, [r0, #0]
 800e292:	60c6      	str	r6, [r0, #12]
 800e294:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e296:	68f3      	ldr	r3, [r6, #12]
 800e298:	b183      	cbz	r3, 800e2bc <_Balloc+0x50>
 800e29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2a2:	b9b8      	cbnz	r0, 800e2d4 <_Balloc+0x68>
 800e2a4:	2101      	movs	r1, #1
 800e2a6:	fa01 f605 	lsl.w	r6, r1, r5
 800e2aa:	1d72      	adds	r2, r6, #5
 800e2ac:	0092      	lsls	r2, r2, #2
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f000 fc9d 	bl	800ebee <_calloc_r>
 800e2b4:	b160      	cbz	r0, 800e2d0 <_Balloc+0x64>
 800e2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2ba:	e00e      	b.n	800e2da <_Balloc+0x6e>
 800e2bc:	2221      	movs	r2, #33	; 0x21
 800e2be:	2104      	movs	r1, #4
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f000 fc94 	bl	800ebee <_calloc_r>
 800e2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2c8:	60f0      	str	r0, [r6, #12]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1e4      	bne.n	800e29a <_Balloc+0x2e>
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	bd70      	pop	{r4, r5, r6, pc}
 800e2d4:	6802      	ldr	r2, [r0, #0]
 800e2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2e0:	e7f7      	b.n	800e2d2 <_Balloc+0x66>
 800e2e2:	bf00      	nop
 800e2e4:	08010aae 	.word	0x08010aae
 800e2e8:	08010c10 	.word	0x08010c10

0800e2ec <_Bfree>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	b976      	cbnz	r6, 800e314 <_Bfree+0x28>
 800e2f6:	2010      	movs	r0, #16
 800e2f8:	f7ff ff9e 	bl	800e238 <malloc>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	6268      	str	r0, [r5, #36]	; 0x24
 800e300:	b920      	cbnz	r0, 800e30c <_Bfree+0x20>
 800e302:	4b09      	ldr	r3, [pc, #36]	; (800e328 <_Bfree+0x3c>)
 800e304:	4809      	ldr	r0, [pc, #36]	; (800e32c <_Bfree+0x40>)
 800e306:	218a      	movs	r1, #138	; 0x8a
 800e308:	f001 f8ac 	bl	800f464 <__assert_func>
 800e30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e310:	6006      	str	r6, [r0, #0]
 800e312:	60c6      	str	r6, [r0, #12]
 800e314:	b13c      	cbz	r4, 800e326 <_Bfree+0x3a>
 800e316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e318:	6862      	ldr	r2, [r4, #4]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e320:	6021      	str	r1, [r4, #0]
 800e322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e326:	bd70      	pop	{r4, r5, r6, pc}
 800e328:	08010aae 	.word	0x08010aae
 800e32c:	08010c10 	.word	0x08010c10

0800e330 <__multadd>:
 800e330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e334:	690d      	ldr	r5, [r1, #16]
 800e336:	4607      	mov	r7, r0
 800e338:	460c      	mov	r4, r1
 800e33a:	461e      	mov	r6, r3
 800e33c:	f101 0c14 	add.w	ip, r1, #20
 800e340:	2000      	movs	r0, #0
 800e342:	f8dc 3000 	ldr.w	r3, [ip]
 800e346:	b299      	uxth	r1, r3
 800e348:	fb02 6101 	mla	r1, r2, r1, r6
 800e34c:	0c1e      	lsrs	r6, r3, #16
 800e34e:	0c0b      	lsrs	r3, r1, #16
 800e350:	fb02 3306 	mla	r3, r2, r6, r3
 800e354:	b289      	uxth	r1, r1
 800e356:	3001      	adds	r0, #1
 800e358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e35c:	4285      	cmp	r5, r0
 800e35e:	f84c 1b04 	str.w	r1, [ip], #4
 800e362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e366:	dcec      	bgt.n	800e342 <__multadd+0x12>
 800e368:	b30e      	cbz	r6, 800e3ae <__multadd+0x7e>
 800e36a:	68a3      	ldr	r3, [r4, #8]
 800e36c:	42ab      	cmp	r3, r5
 800e36e:	dc19      	bgt.n	800e3a4 <__multadd+0x74>
 800e370:	6861      	ldr	r1, [r4, #4]
 800e372:	4638      	mov	r0, r7
 800e374:	3101      	adds	r1, #1
 800e376:	f7ff ff79 	bl	800e26c <_Balloc>
 800e37a:	4680      	mov	r8, r0
 800e37c:	b928      	cbnz	r0, 800e38a <__multadd+0x5a>
 800e37e:	4602      	mov	r2, r0
 800e380:	4b0c      	ldr	r3, [pc, #48]	; (800e3b4 <__multadd+0x84>)
 800e382:	480d      	ldr	r0, [pc, #52]	; (800e3b8 <__multadd+0x88>)
 800e384:	21b5      	movs	r1, #181	; 0xb5
 800e386:	f001 f86d 	bl	800f464 <__assert_func>
 800e38a:	6922      	ldr	r2, [r4, #16]
 800e38c:	3202      	adds	r2, #2
 800e38e:	f104 010c 	add.w	r1, r4, #12
 800e392:	0092      	lsls	r2, r2, #2
 800e394:	300c      	adds	r0, #12
 800e396:	f7fc fc91 	bl	800acbc <memcpy>
 800e39a:	4621      	mov	r1, r4
 800e39c:	4638      	mov	r0, r7
 800e39e:	f7ff ffa5 	bl	800e2ec <_Bfree>
 800e3a2:	4644      	mov	r4, r8
 800e3a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3a8:	3501      	adds	r5, #1
 800e3aa:	615e      	str	r6, [r3, #20]
 800e3ac:	6125      	str	r5, [r4, #16]
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b4:	08010b20 	.word	0x08010b20
 800e3b8:	08010c10 	.word	0x08010c10

0800e3bc <__s2b>:
 800e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	4615      	mov	r5, r2
 800e3c4:	461f      	mov	r7, r3
 800e3c6:	2209      	movs	r2, #9
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	db09      	blt.n	800e3ec <__s2b+0x30>
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f7ff ff47 	bl	800e26c <_Balloc>
 800e3de:	b940      	cbnz	r0, 800e3f2 <__s2b+0x36>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	4b19      	ldr	r3, [pc, #100]	; (800e448 <__s2b+0x8c>)
 800e3e4:	4819      	ldr	r0, [pc, #100]	; (800e44c <__s2b+0x90>)
 800e3e6:	21ce      	movs	r1, #206	; 0xce
 800e3e8:	f001 f83c 	bl	800f464 <__assert_func>
 800e3ec:	0052      	lsls	r2, r2, #1
 800e3ee:	3101      	adds	r1, #1
 800e3f0:	e7f0      	b.n	800e3d4 <__s2b+0x18>
 800e3f2:	9b08      	ldr	r3, [sp, #32]
 800e3f4:	6143      	str	r3, [r0, #20]
 800e3f6:	2d09      	cmp	r5, #9
 800e3f8:	f04f 0301 	mov.w	r3, #1
 800e3fc:	6103      	str	r3, [r0, #16]
 800e3fe:	dd16      	ble.n	800e42e <__s2b+0x72>
 800e400:	f104 0909 	add.w	r9, r4, #9
 800e404:	46c8      	mov	r8, r9
 800e406:	442c      	add	r4, r5
 800e408:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e40c:	4601      	mov	r1, r0
 800e40e:	3b30      	subs	r3, #48	; 0x30
 800e410:	220a      	movs	r2, #10
 800e412:	4630      	mov	r0, r6
 800e414:	f7ff ff8c 	bl	800e330 <__multadd>
 800e418:	45a0      	cmp	r8, r4
 800e41a:	d1f5      	bne.n	800e408 <__s2b+0x4c>
 800e41c:	f1a5 0408 	sub.w	r4, r5, #8
 800e420:	444c      	add	r4, r9
 800e422:	1b2d      	subs	r5, r5, r4
 800e424:	1963      	adds	r3, r4, r5
 800e426:	42bb      	cmp	r3, r7
 800e428:	db04      	blt.n	800e434 <__s2b+0x78>
 800e42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e42e:	340a      	adds	r4, #10
 800e430:	2509      	movs	r5, #9
 800e432:	e7f6      	b.n	800e422 <__s2b+0x66>
 800e434:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e438:	4601      	mov	r1, r0
 800e43a:	3b30      	subs	r3, #48	; 0x30
 800e43c:	220a      	movs	r2, #10
 800e43e:	4630      	mov	r0, r6
 800e440:	f7ff ff76 	bl	800e330 <__multadd>
 800e444:	e7ee      	b.n	800e424 <__s2b+0x68>
 800e446:	bf00      	nop
 800e448:	08010b20 	.word	0x08010b20
 800e44c:	08010c10 	.word	0x08010c10

0800e450 <__hi0bits>:
 800e450:	0c03      	lsrs	r3, r0, #16
 800e452:	041b      	lsls	r3, r3, #16
 800e454:	b9d3      	cbnz	r3, 800e48c <__hi0bits+0x3c>
 800e456:	0400      	lsls	r0, r0, #16
 800e458:	2310      	movs	r3, #16
 800e45a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e45e:	bf04      	itt	eq
 800e460:	0200      	lsleq	r0, r0, #8
 800e462:	3308      	addeq	r3, #8
 800e464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e468:	bf04      	itt	eq
 800e46a:	0100      	lsleq	r0, r0, #4
 800e46c:	3304      	addeq	r3, #4
 800e46e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e472:	bf04      	itt	eq
 800e474:	0080      	lsleq	r0, r0, #2
 800e476:	3302      	addeq	r3, #2
 800e478:	2800      	cmp	r0, #0
 800e47a:	db05      	blt.n	800e488 <__hi0bits+0x38>
 800e47c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e480:	f103 0301 	add.w	r3, r3, #1
 800e484:	bf08      	it	eq
 800e486:	2320      	moveq	r3, #32
 800e488:	4618      	mov	r0, r3
 800e48a:	4770      	bx	lr
 800e48c:	2300      	movs	r3, #0
 800e48e:	e7e4      	b.n	800e45a <__hi0bits+0xa>

0800e490 <__lo0bits>:
 800e490:	6803      	ldr	r3, [r0, #0]
 800e492:	f013 0207 	ands.w	r2, r3, #7
 800e496:	4601      	mov	r1, r0
 800e498:	d00b      	beq.n	800e4b2 <__lo0bits+0x22>
 800e49a:	07da      	lsls	r2, r3, #31
 800e49c:	d423      	bmi.n	800e4e6 <__lo0bits+0x56>
 800e49e:	0798      	lsls	r0, r3, #30
 800e4a0:	bf49      	itett	mi
 800e4a2:	085b      	lsrmi	r3, r3, #1
 800e4a4:	089b      	lsrpl	r3, r3, #2
 800e4a6:	2001      	movmi	r0, #1
 800e4a8:	600b      	strmi	r3, [r1, #0]
 800e4aa:	bf5c      	itt	pl
 800e4ac:	600b      	strpl	r3, [r1, #0]
 800e4ae:	2002      	movpl	r0, #2
 800e4b0:	4770      	bx	lr
 800e4b2:	b298      	uxth	r0, r3
 800e4b4:	b9a8      	cbnz	r0, 800e4e2 <__lo0bits+0x52>
 800e4b6:	0c1b      	lsrs	r3, r3, #16
 800e4b8:	2010      	movs	r0, #16
 800e4ba:	b2da      	uxtb	r2, r3
 800e4bc:	b90a      	cbnz	r2, 800e4c2 <__lo0bits+0x32>
 800e4be:	3008      	adds	r0, #8
 800e4c0:	0a1b      	lsrs	r3, r3, #8
 800e4c2:	071a      	lsls	r2, r3, #28
 800e4c4:	bf04      	itt	eq
 800e4c6:	091b      	lsreq	r3, r3, #4
 800e4c8:	3004      	addeq	r0, #4
 800e4ca:	079a      	lsls	r2, r3, #30
 800e4cc:	bf04      	itt	eq
 800e4ce:	089b      	lsreq	r3, r3, #2
 800e4d0:	3002      	addeq	r0, #2
 800e4d2:	07da      	lsls	r2, r3, #31
 800e4d4:	d403      	bmi.n	800e4de <__lo0bits+0x4e>
 800e4d6:	085b      	lsrs	r3, r3, #1
 800e4d8:	f100 0001 	add.w	r0, r0, #1
 800e4dc:	d005      	beq.n	800e4ea <__lo0bits+0x5a>
 800e4de:	600b      	str	r3, [r1, #0]
 800e4e0:	4770      	bx	lr
 800e4e2:	4610      	mov	r0, r2
 800e4e4:	e7e9      	b.n	800e4ba <__lo0bits+0x2a>
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	4770      	bx	lr
 800e4ea:	2020      	movs	r0, #32
 800e4ec:	4770      	bx	lr
	...

0800e4f0 <__i2b>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	2101      	movs	r1, #1
 800e4f6:	f7ff feb9 	bl	800e26c <_Balloc>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	b928      	cbnz	r0, 800e50a <__i2b+0x1a>
 800e4fe:	4b05      	ldr	r3, [pc, #20]	; (800e514 <__i2b+0x24>)
 800e500:	4805      	ldr	r0, [pc, #20]	; (800e518 <__i2b+0x28>)
 800e502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e506:	f000 ffad 	bl	800f464 <__assert_func>
 800e50a:	2301      	movs	r3, #1
 800e50c:	6144      	str	r4, [r0, #20]
 800e50e:	6103      	str	r3, [r0, #16]
 800e510:	bd10      	pop	{r4, pc}
 800e512:	bf00      	nop
 800e514:	08010b20 	.word	0x08010b20
 800e518:	08010c10 	.word	0x08010c10

0800e51c <__multiply>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	4691      	mov	r9, r2
 800e522:	690a      	ldr	r2, [r1, #16]
 800e524:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e528:	429a      	cmp	r2, r3
 800e52a:	bfb8      	it	lt
 800e52c:	460b      	movlt	r3, r1
 800e52e:	460c      	mov	r4, r1
 800e530:	bfbc      	itt	lt
 800e532:	464c      	movlt	r4, r9
 800e534:	4699      	movlt	r9, r3
 800e536:	6927      	ldr	r7, [r4, #16]
 800e538:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e53c:	68a3      	ldr	r3, [r4, #8]
 800e53e:	6861      	ldr	r1, [r4, #4]
 800e540:	eb07 060a 	add.w	r6, r7, sl
 800e544:	42b3      	cmp	r3, r6
 800e546:	b085      	sub	sp, #20
 800e548:	bfb8      	it	lt
 800e54a:	3101      	addlt	r1, #1
 800e54c:	f7ff fe8e 	bl	800e26c <_Balloc>
 800e550:	b930      	cbnz	r0, 800e560 <__multiply+0x44>
 800e552:	4602      	mov	r2, r0
 800e554:	4b44      	ldr	r3, [pc, #272]	; (800e668 <__multiply+0x14c>)
 800e556:	4845      	ldr	r0, [pc, #276]	; (800e66c <__multiply+0x150>)
 800e558:	f240 115d 	movw	r1, #349	; 0x15d
 800e55c:	f000 ff82 	bl	800f464 <__assert_func>
 800e560:	f100 0514 	add.w	r5, r0, #20
 800e564:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e568:	462b      	mov	r3, r5
 800e56a:	2200      	movs	r2, #0
 800e56c:	4543      	cmp	r3, r8
 800e56e:	d321      	bcc.n	800e5b4 <__multiply+0x98>
 800e570:	f104 0314 	add.w	r3, r4, #20
 800e574:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e578:	f109 0314 	add.w	r3, r9, #20
 800e57c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e580:	9202      	str	r2, [sp, #8]
 800e582:	1b3a      	subs	r2, r7, r4
 800e584:	3a15      	subs	r2, #21
 800e586:	f022 0203 	bic.w	r2, r2, #3
 800e58a:	3204      	adds	r2, #4
 800e58c:	f104 0115 	add.w	r1, r4, #21
 800e590:	428f      	cmp	r7, r1
 800e592:	bf38      	it	cc
 800e594:	2204      	movcc	r2, #4
 800e596:	9201      	str	r2, [sp, #4]
 800e598:	9a02      	ldr	r2, [sp, #8]
 800e59a:	9303      	str	r3, [sp, #12]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d80c      	bhi.n	800e5ba <__multiply+0x9e>
 800e5a0:	2e00      	cmp	r6, #0
 800e5a2:	dd03      	ble.n	800e5ac <__multiply+0x90>
 800e5a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d05a      	beq.n	800e662 <__multiply+0x146>
 800e5ac:	6106      	str	r6, [r0, #16]
 800e5ae:	b005      	add	sp, #20
 800e5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b4:	f843 2b04 	str.w	r2, [r3], #4
 800e5b8:	e7d8      	b.n	800e56c <__multiply+0x50>
 800e5ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5be:	f1ba 0f00 	cmp.w	sl, #0
 800e5c2:	d024      	beq.n	800e60e <__multiply+0xf2>
 800e5c4:	f104 0e14 	add.w	lr, r4, #20
 800e5c8:	46a9      	mov	r9, r5
 800e5ca:	f04f 0c00 	mov.w	ip, #0
 800e5ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e5d2:	f8d9 1000 	ldr.w	r1, [r9]
 800e5d6:	fa1f fb82 	uxth.w	fp, r2
 800e5da:	b289      	uxth	r1, r1
 800e5dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5e4:	f8d9 2000 	ldr.w	r2, [r9]
 800e5e8:	4461      	add	r1, ip
 800e5ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800e5f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5f6:	b289      	uxth	r1, r1
 800e5f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e5fc:	4577      	cmp	r7, lr
 800e5fe:	f849 1b04 	str.w	r1, [r9], #4
 800e602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e606:	d8e2      	bhi.n	800e5ce <__multiply+0xb2>
 800e608:	9a01      	ldr	r2, [sp, #4]
 800e60a:	f845 c002 	str.w	ip, [r5, r2]
 800e60e:	9a03      	ldr	r2, [sp, #12]
 800e610:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e614:	3304      	adds	r3, #4
 800e616:	f1b9 0f00 	cmp.w	r9, #0
 800e61a:	d020      	beq.n	800e65e <__multiply+0x142>
 800e61c:	6829      	ldr	r1, [r5, #0]
 800e61e:	f104 0c14 	add.w	ip, r4, #20
 800e622:	46ae      	mov	lr, r5
 800e624:	f04f 0a00 	mov.w	sl, #0
 800e628:	f8bc b000 	ldrh.w	fp, [ip]
 800e62c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e630:	fb09 220b 	mla	r2, r9, fp, r2
 800e634:	4492      	add	sl, r2
 800e636:	b289      	uxth	r1, r1
 800e638:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e63c:	f84e 1b04 	str.w	r1, [lr], #4
 800e640:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e644:	f8be 1000 	ldrh.w	r1, [lr]
 800e648:	0c12      	lsrs	r2, r2, #16
 800e64a:	fb09 1102 	mla	r1, r9, r2, r1
 800e64e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e652:	4567      	cmp	r7, ip
 800e654:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e658:	d8e6      	bhi.n	800e628 <__multiply+0x10c>
 800e65a:	9a01      	ldr	r2, [sp, #4]
 800e65c:	50a9      	str	r1, [r5, r2]
 800e65e:	3504      	adds	r5, #4
 800e660:	e79a      	b.n	800e598 <__multiply+0x7c>
 800e662:	3e01      	subs	r6, #1
 800e664:	e79c      	b.n	800e5a0 <__multiply+0x84>
 800e666:	bf00      	nop
 800e668:	08010b20 	.word	0x08010b20
 800e66c:	08010c10 	.word	0x08010c10

0800e670 <__pow5mult>:
 800e670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e674:	4615      	mov	r5, r2
 800e676:	f012 0203 	ands.w	r2, r2, #3
 800e67a:	4606      	mov	r6, r0
 800e67c:	460f      	mov	r7, r1
 800e67e:	d007      	beq.n	800e690 <__pow5mult+0x20>
 800e680:	4c25      	ldr	r4, [pc, #148]	; (800e718 <__pow5mult+0xa8>)
 800e682:	3a01      	subs	r2, #1
 800e684:	2300      	movs	r3, #0
 800e686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e68a:	f7ff fe51 	bl	800e330 <__multadd>
 800e68e:	4607      	mov	r7, r0
 800e690:	10ad      	asrs	r5, r5, #2
 800e692:	d03d      	beq.n	800e710 <__pow5mult+0xa0>
 800e694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e696:	b97c      	cbnz	r4, 800e6b8 <__pow5mult+0x48>
 800e698:	2010      	movs	r0, #16
 800e69a:	f7ff fdcd 	bl	800e238 <malloc>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	6270      	str	r0, [r6, #36]	; 0x24
 800e6a2:	b928      	cbnz	r0, 800e6b0 <__pow5mult+0x40>
 800e6a4:	4b1d      	ldr	r3, [pc, #116]	; (800e71c <__pow5mult+0xac>)
 800e6a6:	481e      	ldr	r0, [pc, #120]	; (800e720 <__pow5mult+0xb0>)
 800e6a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e6ac:	f000 feda 	bl	800f464 <__assert_func>
 800e6b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6b4:	6004      	str	r4, [r0, #0]
 800e6b6:	60c4      	str	r4, [r0, #12]
 800e6b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6c0:	b94c      	cbnz	r4, 800e6d6 <__pow5mult+0x66>
 800e6c2:	f240 2171 	movw	r1, #625	; 0x271
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f7ff ff12 	bl	800e4f0 <__i2b>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	6003      	str	r3, [r0, #0]
 800e6d6:	f04f 0900 	mov.w	r9, #0
 800e6da:	07eb      	lsls	r3, r5, #31
 800e6dc:	d50a      	bpl.n	800e6f4 <__pow5mult+0x84>
 800e6de:	4639      	mov	r1, r7
 800e6e0:	4622      	mov	r2, r4
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f7ff ff1a 	bl	800e51c <__multiply>
 800e6e8:	4639      	mov	r1, r7
 800e6ea:	4680      	mov	r8, r0
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7ff fdfd 	bl	800e2ec <_Bfree>
 800e6f2:	4647      	mov	r7, r8
 800e6f4:	106d      	asrs	r5, r5, #1
 800e6f6:	d00b      	beq.n	800e710 <__pow5mult+0xa0>
 800e6f8:	6820      	ldr	r0, [r4, #0]
 800e6fa:	b938      	cbnz	r0, 800e70c <__pow5mult+0x9c>
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	4621      	mov	r1, r4
 800e700:	4630      	mov	r0, r6
 800e702:	f7ff ff0b 	bl	800e51c <__multiply>
 800e706:	6020      	str	r0, [r4, #0]
 800e708:	f8c0 9000 	str.w	r9, [r0]
 800e70c:	4604      	mov	r4, r0
 800e70e:	e7e4      	b.n	800e6da <__pow5mult+0x6a>
 800e710:	4638      	mov	r0, r7
 800e712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e716:	bf00      	nop
 800e718:	08010d60 	.word	0x08010d60
 800e71c:	08010aae 	.word	0x08010aae
 800e720:	08010c10 	.word	0x08010c10

0800e724 <__lshift>:
 800e724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e728:	460c      	mov	r4, r1
 800e72a:	6849      	ldr	r1, [r1, #4]
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e732:	68a3      	ldr	r3, [r4, #8]
 800e734:	4607      	mov	r7, r0
 800e736:	4691      	mov	r9, r2
 800e738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e73c:	f108 0601 	add.w	r6, r8, #1
 800e740:	42b3      	cmp	r3, r6
 800e742:	db0b      	blt.n	800e75c <__lshift+0x38>
 800e744:	4638      	mov	r0, r7
 800e746:	f7ff fd91 	bl	800e26c <_Balloc>
 800e74a:	4605      	mov	r5, r0
 800e74c:	b948      	cbnz	r0, 800e762 <__lshift+0x3e>
 800e74e:	4602      	mov	r2, r0
 800e750:	4b2a      	ldr	r3, [pc, #168]	; (800e7fc <__lshift+0xd8>)
 800e752:	482b      	ldr	r0, [pc, #172]	; (800e800 <__lshift+0xdc>)
 800e754:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e758:	f000 fe84 	bl	800f464 <__assert_func>
 800e75c:	3101      	adds	r1, #1
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	e7ee      	b.n	800e740 <__lshift+0x1c>
 800e762:	2300      	movs	r3, #0
 800e764:	f100 0114 	add.w	r1, r0, #20
 800e768:	f100 0210 	add.w	r2, r0, #16
 800e76c:	4618      	mov	r0, r3
 800e76e:	4553      	cmp	r3, sl
 800e770:	db37      	blt.n	800e7e2 <__lshift+0xbe>
 800e772:	6920      	ldr	r0, [r4, #16]
 800e774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e778:	f104 0314 	add.w	r3, r4, #20
 800e77c:	f019 091f 	ands.w	r9, r9, #31
 800e780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e784:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e788:	d02f      	beq.n	800e7ea <__lshift+0xc6>
 800e78a:	f1c9 0e20 	rsb	lr, r9, #32
 800e78e:	468a      	mov	sl, r1
 800e790:	f04f 0c00 	mov.w	ip, #0
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	fa02 f209 	lsl.w	r2, r2, r9
 800e79a:	ea42 020c 	orr.w	r2, r2, ip
 800e79e:	f84a 2b04 	str.w	r2, [sl], #4
 800e7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a6:	4298      	cmp	r0, r3
 800e7a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e7ac:	d8f2      	bhi.n	800e794 <__lshift+0x70>
 800e7ae:	1b03      	subs	r3, r0, r4
 800e7b0:	3b15      	subs	r3, #21
 800e7b2:	f023 0303 	bic.w	r3, r3, #3
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	f104 0215 	add.w	r2, r4, #21
 800e7bc:	4290      	cmp	r0, r2
 800e7be:	bf38      	it	cc
 800e7c0:	2304      	movcc	r3, #4
 800e7c2:	f841 c003 	str.w	ip, [r1, r3]
 800e7c6:	f1bc 0f00 	cmp.w	ip, #0
 800e7ca:	d001      	beq.n	800e7d0 <__lshift+0xac>
 800e7cc:	f108 0602 	add.w	r6, r8, #2
 800e7d0:	3e01      	subs	r6, #1
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	612e      	str	r6, [r5, #16]
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	f7ff fd88 	bl	800e2ec <_Bfree>
 800e7dc:	4628      	mov	r0, r5
 800e7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	e7c1      	b.n	800e76e <__lshift+0x4a>
 800e7ea:	3904      	subs	r1, #4
 800e7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7f4:	4298      	cmp	r0, r3
 800e7f6:	d8f9      	bhi.n	800e7ec <__lshift+0xc8>
 800e7f8:	e7ea      	b.n	800e7d0 <__lshift+0xac>
 800e7fa:	bf00      	nop
 800e7fc:	08010b20 	.word	0x08010b20
 800e800:	08010c10 	.word	0x08010c10

0800e804 <__mcmp>:
 800e804:	b530      	push	{r4, r5, lr}
 800e806:	6902      	ldr	r2, [r0, #16]
 800e808:	690c      	ldr	r4, [r1, #16]
 800e80a:	1b12      	subs	r2, r2, r4
 800e80c:	d10e      	bne.n	800e82c <__mcmp+0x28>
 800e80e:	f100 0314 	add.w	r3, r0, #20
 800e812:	3114      	adds	r1, #20
 800e814:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e81c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e820:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e824:	42a5      	cmp	r5, r4
 800e826:	d003      	beq.n	800e830 <__mcmp+0x2c>
 800e828:	d305      	bcc.n	800e836 <__mcmp+0x32>
 800e82a:	2201      	movs	r2, #1
 800e82c:	4610      	mov	r0, r2
 800e82e:	bd30      	pop	{r4, r5, pc}
 800e830:	4283      	cmp	r3, r0
 800e832:	d3f3      	bcc.n	800e81c <__mcmp+0x18>
 800e834:	e7fa      	b.n	800e82c <__mcmp+0x28>
 800e836:	f04f 32ff 	mov.w	r2, #4294967295
 800e83a:	e7f7      	b.n	800e82c <__mcmp+0x28>

0800e83c <__mdiff>:
 800e83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	460c      	mov	r4, r1
 800e842:	4606      	mov	r6, r0
 800e844:	4611      	mov	r1, r2
 800e846:	4620      	mov	r0, r4
 800e848:	4690      	mov	r8, r2
 800e84a:	f7ff ffdb 	bl	800e804 <__mcmp>
 800e84e:	1e05      	subs	r5, r0, #0
 800e850:	d110      	bne.n	800e874 <__mdiff+0x38>
 800e852:	4629      	mov	r1, r5
 800e854:	4630      	mov	r0, r6
 800e856:	f7ff fd09 	bl	800e26c <_Balloc>
 800e85a:	b930      	cbnz	r0, 800e86a <__mdiff+0x2e>
 800e85c:	4b3a      	ldr	r3, [pc, #232]	; (800e948 <__mdiff+0x10c>)
 800e85e:	4602      	mov	r2, r0
 800e860:	f240 2132 	movw	r1, #562	; 0x232
 800e864:	4839      	ldr	r0, [pc, #228]	; (800e94c <__mdiff+0x110>)
 800e866:	f000 fdfd 	bl	800f464 <__assert_func>
 800e86a:	2301      	movs	r3, #1
 800e86c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e874:	bfa4      	itt	ge
 800e876:	4643      	movge	r3, r8
 800e878:	46a0      	movge	r8, r4
 800e87a:	4630      	mov	r0, r6
 800e87c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e880:	bfa6      	itte	ge
 800e882:	461c      	movge	r4, r3
 800e884:	2500      	movge	r5, #0
 800e886:	2501      	movlt	r5, #1
 800e888:	f7ff fcf0 	bl	800e26c <_Balloc>
 800e88c:	b920      	cbnz	r0, 800e898 <__mdiff+0x5c>
 800e88e:	4b2e      	ldr	r3, [pc, #184]	; (800e948 <__mdiff+0x10c>)
 800e890:	4602      	mov	r2, r0
 800e892:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e896:	e7e5      	b.n	800e864 <__mdiff+0x28>
 800e898:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e89c:	6926      	ldr	r6, [r4, #16]
 800e89e:	60c5      	str	r5, [r0, #12]
 800e8a0:	f104 0914 	add.w	r9, r4, #20
 800e8a4:	f108 0514 	add.w	r5, r8, #20
 800e8a8:	f100 0e14 	add.w	lr, r0, #20
 800e8ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e8b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e8b4:	f108 0210 	add.w	r2, r8, #16
 800e8b8:	46f2      	mov	sl, lr
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8c4:	fa1f f883 	uxth.w	r8, r3
 800e8c8:	fa11 f18b 	uxtah	r1, r1, fp
 800e8cc:	0c1b      	lsrs	r3, r3, #16
 800e8ce:	eba1 0808 	sub.w	r8, r1, r8
 800e8d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8da:	fa1f f888 	uxth.w	r8, r8
 800e8de:	1419      	asrs	r1, r3, #16
 800e8e0:	454e      	cmp	r6, r9
 800e8e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8e6:	f84a 3b04 	str.w	r3, [sl], #4
 800e8ea:	d8e7      	bhi.n	800e8bc <__mdiff+0x80>
 800e8ec:	1b33      	subs	r3, r6, r4
 800e8ee:	3b15      	subs	r3, #21
 800e8f0:	f023 0303 	bic.w	r3, r3, #3
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	3415      	adds	r4, #21
 800e8f8:	42a6      	cmp	r6, r4
 800e8fa:	bf38      	it	cc
 800e8fc:	2304      	movcc	r3, #4
 800e8fe:	441d      	add	r5, r3
 800e900:	4473      	add	r3, lr
 800e902:	469e      	mov	lr, r3
 800e904:	462e      	mov	r6, r5
 800e906:	4566      	cmp	r6, ip
 800e908:	d30e      	bcc.n	800e928 <__mdiff+0xec>
 800e90a:	f10c 0203 	add.w	r2, ip, #3
 800e90e:	1b52      	subs	r2, r2, r5
 800e910:	f022 0203 	bic.w	r2, r2, #3
 800e914:	3d03      	subs	r5, #3
 800e916:	45ac      	cmp	ip, r5
 800e918:	bf38      	it	cc
 800e91a:	2200      	movcc	r2, #0
 800e91c:	441a      	add	r2, r3
 800e91e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e922:	b17b      	cbz	r3, 800e944 <__mdiff+0x108>
 800e924:	6107      	str	r7, [r0, #16]
 800e926:	e7a3      	b.n	800e870 <__mdiff+0x34>
 800e928:	f856 8b04 	ldr.w	r8, [r6], #4
 800e92c:	fa11 f288 	uxtah	r2, r1, r8
 800e930:	1414      	asrs	r4, r2, #16
 800e932:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e936:	b292      	uxth	r2, r2
 800e938:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e93c:	f84e 2b04 	str.w	r2, [lr], #4
 800e940:	1421      	asrs	r1, r4, #16
 800e942:	e7e0      	b.n	800e906 <__mdiff+0xca>
 800e944:	3f01      	subs	r7, #1
 800e946:	e7ea      	b.n	800e91e <__mdiff+0xe2>
 800e948:	08010b20 	.word	0x08010b20
 800e94c:	08010c10 	.word	0x08010c10

0800e950 <__ulp>:
 800e950:	b082      	sub	sp, #8
 800e952:	ed8d 0b00 	vstr	d0, [sp]
 800e956:	9b01      	ldr	r3, [sp, #4]
 800e958:	4912      	ldr	r1, [pc, #72]	; (800e9a4 <__ulp+0x54>)
 800e95a:	4019      	ands	r1, r3
 800e95c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e960:	2900      	cmp	r1, #0
 800e962:	dd05      	ble.n	800e970 <__ulp+0x20>
 800e964:	2200      	movs	r2, #0
 800e966:	460b      	mov	r3, r1
 800e968:	ec43 2b10 	vmov	d0, r2, r3
 800e96c:	b002      	add	sp, #8
 800e96e:	4770      	bx	lr
 800e970:	4249      	negs	r1, r1
 800e972:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e976:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e97a:	f04f 0200 	mov.w	r2, #0
 800e97e:	f04f 0300 	mov.w	r3, #0
 800e982:	da04      	bge.n	800e98e <__ulp+0x3e>
 800e984:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e988:	fa41 f300 	asr.w	r3, r1, r0
 800e98c:	e7ec      	b.n	800e968 <__ulp+0x18>
 800e98e:	f1a0 0114 	sub.w	r1, r0, #20
 800e992:	291e      	cmp	r1, #30
 800e994:	bfda      	itte	le
 800e996:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e99a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e99e:	2101      	movgt	r1, #1
 800e9a0:	460a      	mov	r2, r1
 800e9a2:	e7e1      	b.n	800e968 <__ulp+0x18>
 800e9a4:	7ff00000 	.word	0x7ff00000

0800e9a8 <__b2d>:
 800e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9aa:	6905      	ldr	r5, [r0, #16]
 800e9ac:	f100 0714 	add.w	r7, r0, #20
 800e9b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e9b4:	1f2e      	subs	r6, r5, #4
 800e9b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f7ff fd48 	bl	800e450 <__hi0bits>
 800e9c0:	f1c0 0320 	rsb	r3, r0, #32
 800e9c4:	280a      	cmp	r0, #10
 800e9c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ea44 <__b2d+0x9c>
 800e9ca:	600b      	str	r3, [r1, #0]
 800e9cc:	dc14      	bgt.n	800e9f8 <__b2d+0x50>
 800e9ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800e9d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e9d6:	42b7      	cmp	r7, r6
 800e9d8:	ea41 030c 	orr.w	r3, r1, ip
 800e9dc:	bf34      	ite	cc
 800e9de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9e2:	2100      	movcs	r1, #0
 800e9e4:	3015      	adds	r0, #21
 800e9e6:	fa04 f000 	lsl.w	r0, r4, r0
 800e9ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800e9ee:	ea40 0201 	orr.w	r2, r0, r1
 800e9f2:	ec43 2b10 	vmov	d0, r2, r3
 800e9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f8:	42b7      	cmp	r7, r6
 800e9fa:	bf3a      	itte	cc
 800e9fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ea00:	f1a5 0608 	subcc.w	r6, r5, #8
 800ea04:	2100      	movcs	r1, #0
 800ea06:	380b      	subs	r0, #11
 800ea08:	d017      	beq.n	800ea3a <__b2d+0x92>
 800ea0a:	f1c0 0c20 	rsb	ip, r0, #32
 800ea0e:	fa04 f500 	lsl.w	r5, r4, r0
 800ea12:	42be      	cmp	r6, r7
 800ea14:	fa21 f40c 	lsr.w	r4, r1, ip
 800ea18:	ea45 0504 	orr.w	r5, r5, r4
 800ea1c:	bf8c      	ite	hi
 800ea1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ea22:	2400      	movls	r4, #0
 800ea24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ea28:	fa01 f000 	lsl.w	r0, r1, r0
 800ea2c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ea30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea34:	ea40 0204 	orr.w	r2, r0, r4
 800ea38:	e7db      	b.n	800e9f2 <__b2d+0x4a>
 800ea3a:	ea44 030c 	orr.w	r3, r4, ip
 800ea3e:	460a      	mov	r2, r1
 800ea40:	e7d7      	b.n	800e9f2 <__b2d+0x4a>
 800ea42:	bf00      	nop
 800ea44:	3ff00000 	.word	0x3ff00000

0800ea48 <__d2b>:
 800ea48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea4c:	4689      	mov	r9, r1
 800ea4e:	2101      	movs	r1, #1
 800ea50:	ec57 6b10 	vmov	r6, r7, d0
 800ea54:	4690      	mov	r8, r2
 800ea56:	f7ff fc09 	bl	800e26c <_Balloc>
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	b930      	cbnz	r0, 800ea6c <__d2b+0x24>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	4b25      	ldr	r3, [pc, #148]	; (800eaf8 <__d2b+0xb0>)
 800ea62:	4826      	ldr	r0, [pc, #152]	; (800eafc <__d2b+0xb4>)
 800ea64:	f240 310a 	movw	r1, #778	; 0x30a
 800ea68:	f000 fcfc 	bl	800f464 <__assert_func>
 800ea6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ea70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea74:	bb35      	cbnz	r5, 800eac4 <__d2b+0x7c>
 800ea76:	2e00      	cmp	r6, #0
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	d028      	beq.n	800eace <__d2b+0x86>
 800ea7c:	4668      	mov	r0, sp
 800ea7e:	9600      	str	r6, [sp, #0]
 800ea80:	f7ff fd06 	bl	800e490 <__lo0bits>
 800ea84:	9900      	ldr	r1, [sp, #0]
 800ea86:	b300      	cbz	r0, 800eaca <__d2b+0x82>
 800ea88:	9a01      	ldr	r2, [sp, #4]
 800ea8a:	f1c0 0320 	rsb	r3, r0, #32
 800ea8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea92:	430b      	orrs	r3, r1
 800ea94:	40c2      	lsrs	r2, r0
 800ea96:	6163      	str	r3, [r4, #20]
 800ea98:	9201      	str	r2, [sp, #4]
 800ea9a:	9b01      	ldr	r3, [sp, #4]
 800ea9c:	61a3      	str	r3, [r4, #24]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	bf14      	ite	ne
 800eaa2:	2202      	movne	r2, #2
 800eaa4:	2201      	moveq	r2, #1
 800eaa6:	6122      	str	r2, [r4, #16]
 800eaa8:	b1d5      	cbz	r5, 800eae0 <__d2b+0x98>
 800eaaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eaae:	4405      	add	r5, r0
 800eab0:	f8c9 5000 	str.w	r5, [r9]
 800eab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eab8:	f8c8 0000 	str.w	r0, [r8]
 800eabc:	4620      	mov	r0, r4
 800eabe:	b003      	add	sp, #12
 800eac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eac8:	e7d5      	b.n	800ea76 <__d2b+0x2e>
 800eaca:	6161      	str	r1, [r4, #20]
 800eacc:	e7e5      	b.n	800ea9a <__d2b+0x52>
 800eace:	a801      	add	r0, sp, #4
 800ead0:	f7ff fcde 	bl	800e490 <__lo0bits>
 800ead4:	9b01      	ldr	r3, [sp, #4]
 800ead6:	6163      	str	r3, [r4, #20]
 800ead8:	2201      	movs	r2, #1
 800eada:	6122      	str	r2, [r4, #16]
 800eadc:	3020      	adds	r0, #32
 800eade:	e7e3      	b.n	800eaa8 <__d2b+0x60>
 800eae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eae8:	f8c9 0000 	str.w	r0, [r9]
 800eaec:	6918      	ldr	r0, [r3, #16]
 800eaee:	f7ff fcaf 	bl	800e450 <__hi0bits>
 800eaf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eaf6:	e7df      	b.n	800eab8 <__d2b+0x70>
 800eaf8:	08010b20 	.word	0x08010b20
 800eafc:	08010c10 	.word	0x08010c10

0800eb00 <__ratio>:
 800eb00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	4688      	mov	r8, r1
 800eb06:	4669      	mov	r1, sp
 800eb08:	4681      	mov	r9, r0
 800eb0a:	f7ff ff4d 	bl	800e9a8 <__b2d>
 800eb0e:	a901      	add	r1, sp, #4
 800eb10:	4640      	mov	r0, r8
 800eb12:	ec55 4b10 	vmov	r4, r5, d0
 800eb16:	f7ff ff47 	bl	800e9a8 <__b2d>
 800eb1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb22:	eba3 0c02 	sub.w	ip, r3, r2
 800eb26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb2a:	1a9b      	subs	r3, r3, r2
 800eb2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eb30:	ec51 0b10 	vmov	r0, r1, d0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	bfd6      	itet	le
 800eb38:	460a      	movle	r2, r1
 800eb3a:	462a      	movgt	r2, r5
 800eb3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb40:	468b      	mov	fp, r1
 800eb42:	462f      	mov	r7, r5
 800eb44:	bfd4      	ite	le
 800eb46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb4e:	4620      	mov	r0, r4
 800eb50:	ee10 2a10 	vmov	r2, s0
 800eb54:	465b      	mov	r3, fp
 800eb56:	4639      	mov	r1, r7
 800eb58:	f7f1 fe78 	bl	800084c <__aeabi_ddiv>
 800eb5c:	ec41 0b10 	vmov	d0, r0, r1
 800eb60:	b003      	add	sp, #12
 800eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb66 <__copybits>:
 800eb66:	3901      	subs	r1, #1
 800eb68:	b570      	push	{r4, r5, r6, lr}
 800eb6a:	1149      	asrs	r1, r1, #5
 800eb6c:	6914      	ldr	r4, [r2, #16]
 800eb6e:	3101      	adds	r1, #1
 800eb70:	f102 0314 	add.w	r3, r2, #20
 800eb74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb7c:	1f05      	subs	r5, r0, #4
 800eb7e:	42a3      	cmp	r3, r4
 800eb80:	d30c      	bcc.n	800eb9c <__copybits+0x36>
 800eb82:	1aa3      	subs	r3, r4, r2
 800eb84:	3b11      	subs	r3, #17
 800eb86:	f023 0303 	bic.w	r3, r3, #3
 800eb8a:	3211      	adds	r2, #17
 800eb8c:	42a2      	cmp	r2, r4
 800eb8e:	bf88      	it	hi
 800eb90:	2300      	movhi	r3, #0
 800eb92:	4418      	add	r0, r3
 800eb94:	2300      	movs	r3, #0
 800eb96:	4288      	cmp	r0, r1
 800eb98:	d305      	bcc.n	800eba6 <__copybits+0x40>
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}
 800eb9c:	f853 6b04 	ldr.w	r6, [r3], #4
 800eba0:	f845 6f04 	str.w	r6, [r5, #4]!
 800eba4:	e7eb      	b.n	800eb7e <__copybits+0x18>
 800eba6:	f840 3b04 	str.w	r3, [r0], #4
 800ebaa:	e7f4      	b.n	800eb96 <__copybits+0x30>

0800ebac <__any_on>:
 800ebac:	f100 0214 	add.w	r2, r0, #20
 800ebb0:	6900      	ldr	r0, [r0, #16]
 800ebb2:	114b      	asrs	r3, r1, #5
 800ebb4:	4298      	cmp	r0, r3
 800ebb6:	b510      	push	{r4, lr}
 800ebb8:	db11      	blt.n	800ebde <__any_on+0x32>
 800ebba:	dd0a      	ble.n	800ebd2 <__any_on+0x26>
 800ebbc:	f011 011f 	ands.w	r1, r1, #31
 800ebc0:	d007      	beq.n	800ebd2 <__any_on+0x26>
 800ebc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ebc6:	fa24 f001 	lsr.w	r0, r4, r1
 800ebca:	fa00 f101 	lsl.w	r1, r0, r1
 800ebce:	428c      	cmp	r4, r1
 800ebd0:	d10b      	bne.n	800ebea <__any_on+0x3e>
 800ebd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d803      	bhi.n	800ebe2 <__any_on+0x36>
 800ebda:	2000      	movs	r0, #0
 800ebdc:	bd10      	pop	{r4, pc}
 800ebde:	4603      	mov	r3, r0
 800ebe0:	e7f7      	b.n	800ebd2 <__any_on+0x26>
 800ebe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebe6:	2900      	cmp	r1, #0
 800ebe8:	d0f5      	beq.n	800ebd6 <__any_on+0x2a>
 800ebea:	2001      	movs	r0, #1
 800ebec:	e7f6      	b.n	800ebdc <__any_on+0x30>

0800ebee <_calloc_r>:
 800ebee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebf0:	fba1 2402 	umull	r2, r4, r1, r2
 800ebf4:	b94c      	cbnz	r4, 800ec0a <_calloc_r+0x1c>
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	9201      	str	r2, [sp, #4]
 800ebfa:	f000 f87b 	bl	800ecf4 <_malloc_r>
 800ebfe:	9a01      	ldr	r2, [sp, #4]
 800ec00:	4605      	mov	r5, r0
 800ec02:	b930      	cbnz	r0, 800ec12 <_calloc_r+0x24>
 800ec04:	4628      	mov	r0, r5
 800ec06:	b003      	add	sp, #12
 800ec08:	bd30      	pop	{r4, r5, pc}
 800ec0a:	220c      	movs	r2, #12
 800ec0c:	6002      	str	r2, [r0, #0]
 800ec0e:	2500      	movs	r5, #0
 800ec10:	e7f8      	b.n	800ec04 <_calloc_r+0x16>
 800ec12:	4621      	mov	r1, r4
 800ec14:	f7fc f860 	bl	800acd8 <memset>
 800ec18:	e7f4      	b.n	800ec04 <_calloc_r+0x16>
	...

0800ec1c <_free_r>:
 800ec1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec1e:	2900      	cmp	r1, #0
 800ec20:	d044      	beq.n	800ecac <_free_r+0x90>
 800ec22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec26:	9001      	str	r0, [sp, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec2e:	bfb8      	it	lt
 800ec30:	18e4      	addlt	r4, r4, r3
 800ec32:	f000 fca5 	bl	800f580 <__malloc_lock>
 800ec36:	4a1e      	ldr	r2, [pc, #120]	; (800ecb0 <_free_r+0x94>)
 800ec38:	9801      	ldr	r0, [sp, #4]
 800ec3a:	6813      	ldr	r3, [r2, #0]
 800ec3c:	b933      	cbnz	r3, 800ec4c <_free_r+0x30>
 800ec3e:	6063      	str	r3, [r4, #4]
 800ec40:	6014      	str	r4, [r2, #0]
 800ec42:	b003      	add	sp, #12
 800ec44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec48:	f000 bca0 	b.w	800f58c <__malloc_unlock>
 800ec4c:	42a3      	cmp	r3, r4
 800ec4e:	d908      	bls.n	800ec62 <_free_r+0x46>
 800ec50:	6825      	ldr	r5, [r4, #0]
 800ec52:	1961      	adds	r1, r4, r5
 800ec54:	428b      	cmp	r3, r1
 800ec56:	bf01      	itttt	eq
 800ec58:	6819      	ldreq	r1, [r3, #0]
 800ec5a:	685b      	ldreq	r3, [r3, #4]
 800ec5c:	1949      	addeq	r1, r1, r5
 800ec5e:	6021      	streq	r1, [r4, #0]
 800ec60:	e7ed      	b.n	800ec3e <_free_r+0x22>
 800ec62:	461a      	mov	r2, r3
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	b10b      	cbz	r3, 800ec6c <_free_r+0x50>
 800ec68:	42a3      	cmp	r3, r4
 800ec6a:	d9fa      	bls.n	800ec62 <_free_r+0x46>
 800ec6c:	6811      	ldr	r1, [r2, #0]
 800ec6e:	1855      	adds	r5, r2, r1
 800ec70:	42a5      	cmp	r5, r4
 800ec72:	d10b      	bne.n	800ec8c <_free_r+0x70>
 800ec74:	6824      	ldr	r4, [r4, #0]
 800ec76:	4421      	add	r1, r4
 800ec78:	1854      	adds	r4, r2, r1
 800ec7a:	42a3      	cmp	r3, r4
 800ec7c:	6011      	str	r1, [r2, #0]
 800ec7e:	d1e0      	bne.n	800ec42 <_free_r+0x26>
 800ec80:	681c      	ldr	r4, [r3, #0]
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	6053      	str	r3, [r2, #4]
 800ec86:	4421      	add	r1, r4
 800ec88:	6011      	str	r1, [r2, #0]
 800ec8a:	e7da      	b.n	800ec42 <_free_r+0x26>
 800ec8c:	d902      	bls.n	800ec94 <_free_r+0x78>
 800ec8e:	230c      	movs	r3, #12
 800ec90:	6003      	str	r3, [r0, #0]
 800ec92:	e7d6      	b.n	800ec42 <_free_r+0x26>
 800ec94:	6825      	ldr	r5, [r4, #0]
 800ec96:	1961      	adds	r1, r4, r5
 800ec98:	428b      	cmp	r3, r1
 800ec9a:	bf04      	itt	eq
 800ec9c:	6819      	ldreq	r1, [r3, #0]
 800ec9e:	685b      	ldreq	r3, [r3, #4]
 800eca0:	6063      	str	r3, [r4, #4]
 800eca2:	bf04      	itt	eq
 800eca4:	1949      	addeq	r1, r1, r5
 800eca6:	6021      	streq	r1, [r4, #0]
 800eca8:	6054      	str	r4, [r2, #4]
 800ecaa:	e7ca      	b.n	800ec42 <_free_r+0x26>
 800ecac:	b003      	add	sp, #12
 800ecae:	bd30      	pop	{r4, r5, pc}
 800ecb0:	20012280 	.word	0x20012280

0800ecb4 <sbrk_aligned>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	4e0e      	ldr	r6, [pc, #56]	; (800ecf0 <sbrk_aligned+0x3c>)
 800ecb8:	460c      	mov	r4, r1
 800ecba:	6831      	ldr	r1, [r6, #0]
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	b911      	cbnz	r1, 800ecc6 <sbrk_aligned+0x12>
 800ecc0:	f000 fb4a 	bl	800f358 <_sbrk_r>
 800ecc4:	6030      	str	r0, [r6, #0]
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	4628      	mov	r0, r5
 800ecca:	f000 fb45 	bl	800f358 <_sbrk_r>
 800ecce:	1c43      	adds	r3, r0, #1
 800ecd0:	d00a      	beq.n	800ece8 <sbrk_aligned+0x34>
 800ecd2:	1cc4      	adds	r4, r0, #3
 800ecd4:	f024 0403 	bic.w	r4, r4, #3
 800ecd8:	42a0      	cmp	r0, r4
 800ecda:	d007      	beq.n	800ecec <sbrk_aligned+0x38>
 800ecdc:	1a21      	subs	r1, r4, r0
 800ecde:	4628      	mov	r0, r5
 800ece0:	f000 fb3a 	bl	800f358 <_sbrk_r>
 800ece4:	3001      	adds	r0, #1
 800ece6:	d101      	bne.n	800ecec <sbrk_aligned+0x38>
 800ece8:	f04f 34ff 	mov.w	r4, #4294967295
 800ecec:	4620      	mov	r0, r4
 800ecee:	bd70      	pop	{r4, r5, r6, pc}
 800ecf0:	20012284 	.word	0x20012284

0800ecf4 <_malloc_r>:
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	1ccd      	adds	r5, r1, #3
 800ecfa:	f025 0503 	bic.w	r5, r5, #3
 800ecfe:	3508      	adds	r5, #8
 800ed00:	2d0c      	cmp	r5, #12
 800ed02:	bf38      	it	cc
 800ed04:	250c      	movcc	r5, #12
 800ed06:	2d00      	cmp	r5, #0
 800ed08:	4607      	mov	r7, r0
 800ed0a:	db01      	blt.n	800ed10 <_malloc_r+0x1c>
 800ed0c:	42a9      	cmp	r1, r5
 800ed0e:	d905      	bls.n	800ed1c <_malloc_r+0x28>
 800ed10:	230c      	movs	r3, #12
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	2600      	movs	r6, #0
 800ed16:	4630      	mov	r0, r6
 800ed18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed1c:	4e2e      	ldr	r6, [pc, #184]	; (800edd8 <_malloc_r+0xe4>)
 800ed1e:	f000 fc2f 	bl	800f580 <__malloc_lock>
 800ed22:	6833      	ldr	r3, [r6, #0]
 800ed24:	461c      	mov	r4, r3
 800ed26:	bb34      	cbnz	r4, 800ed76 <_malloc_r+0x82>
 800ed28:	4629      	mov	r1, r5
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	f7ff ffc2 	bl	800ecb4 <sbrk_aligned>
 800ed30:	1c43      	adds	r3, r0, #1
 800ed32:	4604      	mov	r4, r0
 800ed34:	d14d      	bne.n	800edd2 <_malloc_r+0xde>
 800ed36:	6834      	ldr	r4, [r6, #0]
 800ed38:	4626      	mov	r6, r4
 800ed3a:	2e00      	cmp	r6, #0
 800ed3c:	d140      	bne.n	800edc0 <_malloc_r+0xcc>
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	4631      	mov	r1, r6
 800ed42:	4638      	mov	r0, r7
 800ed44:	eb04 0803 	add.w	r8, r4, r3
 800ed48:	f000 fb06 	bl	800f358 <_sbrk_r>
 800ed4c:	4580      	cmp	r8, r0
 800ed4e:	d13a      	bne.n	800edc6 <_malloc_r+0xd2>
 800ed50:	6821      	ldr	r1, [r4, #0]
 800ed52:	3503      	adds	r5, #3
 800ed54:	1a6d      	subs	r5, r5, r1
 800ed56:	f025 0503 	bic.w	r5, r5, #3
 800ed5a:	3508      	adds	r5, #8
 800ed5c:	2d0c      	cmp	r5, #12
 800ed5e:	bf38      	it	cc
 800ed60:	250c      	movcc	r5, #12
 800ed62:	4629      	mov	r1, r5
 800ed64:	4638      	mov	r0, r7
 800ed66:	f7ff ffa5 	bl	800ecb4 <sbrk_aligned>
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	d02b      	beq.n	800edc6 <_malloc_r+0xd2>
 800ed6e:	6823      	ldr	r3, [r4, #0]
 800ed70:	442b      	add	r3, r5
 800ed72:	6023      	str	r3, [r4, #0]
 800ed74:	e00e      	b.n	800ed94 <_malloc_r+0xa0>
 800ed76:	6822      	ldr	r2, [r4, #0]
 800ed78:	1b52      	subs	r2, r2, r5
 800ed7a:	d41e      	bmi.n	800edba <_malloc_r+0xc6>
 800ed7c:	2a0b      	cmp	r2, #11
 800ed7e:	d916      	bls.n	800edae <_malloc_r+0xba>
 800ed80:	1961      	adds	r1, r4, r5
 800ed82:	42a3      	cmp	r3, r4
 800ed84:	6025      	str	r5, [r4, #0]
 800ed86:	bf18      	it	ne
 800ed88:	6059      	strne	r1, [r3, #4]
 800ed8a:	6863      	ldr	r3, [r4, #4]
 800ed8c:	bf08      	it	eq
 800ed8e:	6031      	streq	r1, [r6, #0]
 800ed90:	5162      	str	r2, [r4, r5]
 800ed92:	604b      	str	r3, [r1, #4]
 800ed94:	4638      	mov	r0, r7
 800ed96:	f104 060b 	add.w	r6, r4, #11
 800ed9a:	f000 fbf7 	bl	800f58c <__malloc_unlock>
 800ed9e:	f026 0607 	bic.w	r6, r6, #7
 800eda2:	1d23      	adds	r3, r4, #4
 800eda4:	1af2      	subs	r2, r6, r3
 800eda6:	d0b6      	beq.n	800ed16 <_malloc_r+0x22>
 800eda8:	1b9b      	subs	r3, r3, r6
 800edaa:	50a3      	str	r3, [r4, r2]
 800edac:	e7b3      	b.n	800ed16 <_malloc_r+0x22>
 800edae:	6862      	ldr	r2, [r4, #4]
 800edb0:	42a3      	cmp	r3, r4
 800edb2:	bf0c      	ite	eq
 800edb4:	6032      	streq	r2, [r6, #0]
 800edb6:	605a      	strne	r2, [r3, #4]
 800edb8:	e7ec      	b.n	800ed94 <_malloc_r+0xa0>
 800edba:	4623      	mov	r3, r4
 800edbc:	6864      	ldr	r4, [r4, #4]
 800edbe:	e7b2      	b.n	800ed26 <_malloc_r+0x32>
 800edc0:	4634      	mov	r4, r6
 800edc2:	6876      	ldr	r6, [r6, #4]
 800edc4:	e7b9      	b.n	800ed3a <_malloc_r+0x46>
 800edc6:	230c      	movs	r3, #12
 800edc8:	603b      	str	r3, [r7, #0]
 800edca:	4638      	mov	r0, r7
 800edcc:	f000 fbde 	bl	800f58c <__malloc_unlock>
 800edd0:	e7a1      	b.n	800ed16 <_malloc_r+0x22>
 800edd2:	6025      	str	r5, [r4, #0]
 800edd4:	e7de      	b.n	800ed94 <_malloc_r+0xa0>
 800edd6:	bf00      	nop
 800edd8:	20012280 	.word	0x20012280

0800eddc <__ssputs_r>:
 800eddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ede0:	688e      	ldr	r6, [r1, #8]
 800ede2:	429e      	cmp	r6, r3
 800ede4:	4682      	mov	sl, r0
 800ede6:	460c      	mov	r4, r1
 800ede8:	4690      	mov	r8, r2
 800edea:	461f      	mov	r7, r3
 800edec:	d838      	bhi.n	800ee60 <__ssputs_r+0x84>
 800edee:	898a      	ldrh	r2, [r1, #12]
 800edf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800edf4:	d032      	beq.n	800ee5c <__ssputs_r+0x80>
 800edf6:	6825      	ldr	r5, [r4, #0]
 800edf8:	6909      	ldr	r1, [r1, #16]
 800edfa:	eba5 0901 	sub.w	r9, r5, r1
 800edfe:	6965      	ldr	r5, [r4, #20]
 800ee00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee08:	3301      	adds	r3, #1
 800ee0a:	444b      	add	r3, r9
 800ee0c:	106d      	asrs	r5, r5, #1
 800ee0e:	429d      	cmp	r5, r3
 800ee10:	bf38      	it	cc
 800ee12:	461d      	movcc	r5, r3
 800ee14:	0553      	lsls	r3, r2, #21
 800ee16:	d531      	bpl.n	800ee7c <__ssputs_r+0xa0>
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7ff ff6b 	bl	800ecf4 <_malloc_r>
 800ee1e:	4606      	mov	r6, r0
 800ee20:	b950      	cbnz	r0, 800ee38 <__ssputs_r+0x5c>
 800ee22:	230c      	movs	r3, #12
 800ee24:	f8ca 3000 	str.w	r3, [sl]
 800ee28:	89a3      	ldrh	r3, [r4, #12]
 800ee2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee2e:	81a3      	strh	r3, [r4, #12]
 800ee30:	f04f 30ff 	mov.w	r0, #4294967295
 800ee34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee38:	6921      	ldr	r1, [r4, #16]
 800ee3a:	464a      	mov	r2, r9
 800ee3c:	f7fb ff3e 	bl	800acbc <memcpy>
 800ee40:	89a3      	ldrh	r3, [r4, #12]
 800ee42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee4a:	81a3      	strh	r3, [r4, #12]
 800ee4c:	6126      	str	r6, [r4, #16]
 800ee4e:	6165      	str	r5, [r4, #20]
 800ee50:	444e      	add	r6, r9
 800ee52:	eba5 0509 	sub.w	r5, r5, r9
 800ee56:	6026      	str	r6, [r4, #0]
 800ee58:	60a5      	str	r5, [r4, #8]
 800ee5a:	463e      	mov	r6, r7
 800ee5c:	42be      	cmp	r6, r7
 800ee5e:	d900      	bls.n	800ee62 <__ssputs_r+0x86>
 800ee60:	463e      	mov	r6, r7
 800ee62:	6820      	ldr	r0, [r4, #0]
 800ee64:	4632      	mov	r2, r6
 800ee66:	4641      	mov	r1, r8
 800ee68:	f000 fb70 	bl	800f54c <memmove>
 800ee6c:	68a3      	ldr	r3, [r4, #8]
 800ee6e:	1b9b      	subs	r3, r3, r6
 800ee70:	60a3      	str	r3, [r4, #8]
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	4433      	add	r3, r6
 800ee76:	6023      	str	r3, [r4, #0]
 800ee78:	2000      	movs	r0, #0
 800ee7a:	e7db      	b.n	800ee34 <__ssputs_r+0x58>
 800ee7c:	462a      	mov	r2, r5
 800ee7e:	f000 fb8b 	bl	800f598 <_realloc_r>
 800ee82:	4606      	mov	r6, r0
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d1e1      	bne.n	800ee4c <__ssputs_r+0x70>
 800ee88:	6921      	ldr	r1, [r4, #16]
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	f7ff fec6 	bl	800ec1c <_free_r>
 800ee90:	e7c7      	b.n	800ee22 <__ssputs_r+0x46>
	...

0800ee94 <_svfiprintf_r>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	4698      	mov	r8, r3
 800ee9a:	898b      	ldrh	r3, [r1, #12]
 800ee9c:	061b      	lsls	r3, r3, #24
 800ee9e:	b09d      	sub	sp, #116	; 0x74
 800eea0:	4607      	mov	r7, r0
 800eea2:	460d      	mov	r5, r1
 800eea4:	4614      	mov	r4, r2
 800eea6:	d50e      	bpl.n	800eec6 <_svfiprintf_r+0x32>
 800eea8:	690b      	ldr	r3, [r1, #16]
 800eeaa:	b963      	cbnz	r3, 800eec6 <_svfiprintf_r+0x32>
 800eeac:	2140      	movs	r1, #64	; 0x40
 800eeae:	f7ff ff21 	bl	800ecf4 <_malloc_r>
 800eeb2:	6028      	str	r0, [r5, #0]
 800eeb4:	6128      	str	r0, [r5, #16]
 800eeb6:	b920      	cbnz	r0, 800eec2 <_svfiprintf_r+0x2e>
 800eeb8:	230c      	movs	r3, #12
 800eeba:	603b      	str	r3, [r7, #0]
 800eebc:	f04f 30ff 	mov.w	r0, #4294967295
 800eec0:	e0d1      	b.n	800f066 <_svfiprintf_r+0x1d2>
 800eec2:	2340      	movs	r3, #64	; 0x40
 800eec4:	616b      	str	r3, [r5, #20]
 800eec6:	2300      	movs	r3, #0
 800eec8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeca:	2320      	movs	r3, #32
 800eecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eed0:	f8cd 800c 	str.w	r8, [sp, #12]
 800eed4:	2330      	movs	r3, #48	; 0x30
 800eed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f080 <_svfiprintf_r+0x1ec>
 800eeda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eede:	f04f 0901 	mov.w	r9, #1
 800eee2:	4623      	mov	r3, r4
 800eee4:	469a      	mov	sl, r3
 800eee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeea:	b10a      	cbz	r2, 800eef0 <_svfiprintf_r+0x5c>
 800eeec:	2a25      	cmp	r2, #37	; 0x25
 800eeee:	d1f9      	bne.n	800eee4 <_svfiprintf_r+0x50>
 800eef0:	ebba 0b04 	subs.w	fp, sl, r4
 800eef4:	d00b      	beq.n	800ef0e <_svfiprintf_r+0x7a>
 800eef6:	465b      	mov	r3, fp
 800eef8:	4622      	mov	r2, r4
 800eefa:	4629      	mov	r1, r5
 800eefc:	4638      	mov	r0, r7
 800eefe:	f7ff ff6d 	bl	800eddc <__ssputs_r>
 800ef02:	3001      	adds	r0, #1
 800ef04:	f000 80aa 	beq.w	800f05c <_svfiprintf_r+0x1c8>
 800ef08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef0a:	445a      	add	r2, fp
 800ef0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f000 80a2 	beq.w	800f05c <_svfiprintf_r+0x1c8>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef22:	f10a 0a01 	add.w	sl, sl, #1
 800ef26:	9304      	str	r3, [sp, #16]
 800ef28:	9307      	str	r3, [sp, #28]
 800ef2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef2e:	931a      	str	r3, [sp, #104]	; 0x68
 800ef30:	4654      	mov	r4, sl
 800ef32:	2205      	movs	r2, #5
 800ef34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef38:	4851      	ldr	r0, [pc, #324]	; (800f080 <_svfiprintf_r+0x1ec>)
 800ef3a:	f7f1 f951 	bl	80001e0 <memchr>
 800ef3e:	9a04      	ldr	r2, [sp, #16]
 800ef40:	b9d8      	cbnz	r0, 800ef7a <_svfiprintf_r+0xe6>
 800ef42:	06d0      	lsls	r0, r2, #27
 800ef44:	bf44      	itt	mi
 800ef46:	2320      	movmi	r3, #32
 800ef48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef4c:	0711      	lsls	r1, r2, #28
 800ef4e:	bf44      	itt	mi
 800ef50:	232b      	movmi	r3, #43	; 0x2b
 800ef52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef56:	f89a 3000 	ldrb.w	r3, [sl]
 800ef5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef5c:	d015      	beq.n	800ef8a <_svfiprintf_r+0xf6>
 800ef5e:	9a07      	ldr	r2, [sp, #28]
 800ef60:	4654      	mov	r4, sl
 800ef62:	2000      	movs	r0, #0
 800ef64:	f04f 0c0a 	mov.w	ip, #10
 800ef68:	4621      	mov	r1, r4
 800ef6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef6e:	3b30      	subs	r3, #48	; 0x30
 800ef70:	2b09      	cmp	r3, #9
 800ef72:	d94e      	bls.n	800f012 <_svfiprintf_r+0x17e>
 800ef74:	b1b0      	cbz	r0, 800efa4 <_svfiprintf_r+0x110>
 800ef76:	9207      	str	r2, [sp, #28]
 800ef78:	e014      	b.n	800efa4 <_svfiprintf_r+0x110>
 800ef7a:	eba0 0308 	sub.w	r3, r0, r8
 800ef7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ef82:	4313      	orrs	r3, r2
 800ef84:	9304      	str	r3, [sp, #16]
 800ef86:	46a2      	mov	sl, r4
 800ef88:	e7d2      	b.n	800ef30 <_svfiprintf_r+0x9c>
 800ef8a:	9b03      	ldr	r3, [sp, #12]
 800ef8c:	1d19      	adds	r1, r3, #4
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	9103      	str	r1, [sp, #12]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	bfbb      	ittet	lt
 800ef96:	425b      	neglt	r3, r3
 800ef98:	f042 0202 	orrlt.w	r2, r2, #2
 800ef9c:	9307      	strge	r3, [sp, #28]
 800ef9e:	9307      	strlt	r3, [sp, #28]
 800efa0:	bfb8      	it	lt
 800efa2:	9204      	strlt	r2, [sp, #16]
 800efa4:	7823      	ldrb	r3, [r4, #0]
 800efa6:	2b2e      	cmp	r3, #46	; 0x2e
 800efa8:	d10c      	bne.n	800efc4 <_svfiprintf_r+0x130>
 800efaa:	7863      	ldrb	r3, [r4, #1]
 800efac:	2b2a      	cmp	r3, #42	; 0x2a
 800efae:	d135      	bne.n	800f01c <_svfiprintf_r+0x188>
 800efb0:	9b03      	ldr	r3, [sp, #12]
 800efb2:	1d1a      	adds	r2, r3, #4
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	9203      	str	r2, [sp, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	bfb8      	it	lt
 800efbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800efc0:	3402      	adds	r4, #2
 800efc2:	9305      	str	r3, [sp, #20]
 800efc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f090 <_svfiprintf_r+0x1fc>
 800efc8:	7821      	ldrb	r1, [r4, #0]
 800efca:	2203      	movs	r2, #3
 800efcc:	4650      	mov	r0, sl
 800efce:	f7f1 f907 	bl	80001e0 <memchr>
 800efd2:	b140      	cbz	r0, 800efe6 <_svfiprintf_r+0x152>
 800efd4:	2340      	movs	r3, #64	; 0x40
 800efd6:	eba0 000a 	sub.w	r0, r0, sl
 800efda:	fa03 f000 	lsl.w	r0, r3, r0
 800efde:	9b04      	ldr	r3, [sp, #16]
 800efe0:	4303      	orrs	r3, r0
 800efe2:	3401      	adds	r4, #1
 800efe4:	9304      	str	r3, [sp, #16]
 800efe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efea:	4826      	ldr	r0, [pc, #152]	; (800f084 <_svfiprintf_r+0x1f0>)
 800efec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eff0:	2206      	movs	r2, #6
 800eff2:	f7f1 f8f5 	bl	80001e0 <memchr>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d038      	beq.n	800f06c <_svfiprintf_r+0x1d8>
 800effa:	4b23      	ldr	r3, [pc, #140]	; (800f088 <_svfiprintf_r+0x1f4>)
 800effc:	bb1b      	cbnz	r3, 800f046 <_svfiprintf_r+0x1b2>
 800effe:	9b03      	ldr	r3, [sp, #12]
 800f000:	3307      	adds	r3, #7
 800f002:	f023 0307 	bic.w	r3, r3, #7
 800f006:	3308      	adds	r3, #8
 800f008:	9303      	str	r3, [sp, #12]
 800f00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f00c:	4433      	add	r3, r6
 800f00e:	9309      	str	r3, [sp, #36]	; 0x24
 800f010:	e767      	b.n	800eee2 <_svfiprintf_r+0x4e>
 800f012:	fb0c 3202 	mla	r2, ip, r2, r3
 800f016:	460c      	mov	r4, r1
 800f018:	2001      	movs	r0, #1
 800f01a:	e7a5      	b.n	800ef68 <_svfiprintf_r+0xd4>
 800f01c:	2300      	movs	r3, #0
 800f01e:	3401      	adds	r4, #1
 800f020:	9305      	str	r3, [sp, #20]
 800f022:	4619      	mov	r1, r3
 800f024:	f04f 0c0a 	mov.w	ip, #10
 800f028:	4620      	mov	r0, r4
 800f02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f02e:	3a30      	subs	r2, #48	; 0x30
 800f030:	2a09      	cmp	r2, #9
 800f032:	d903      	bls.n	800f03c <_svfiprintf_r+0x1a8>
 800f034:	2b00      	cmp	r3, #0
 800f036:	d0c5      	beq.n	800efc4 <_svfiprintf_r+0x130>
 800f038:	9105      	str	r1, [sp, #20]
 800f03a:	e7c3      	b.n	800efc4 <_svfiprintf_r+0x130>
 800f03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f040:	4604      	mov	r4, r0
 800f042:	2301      	movs	r3, #1
 800f044:	e7f0      	b.n	800f028 <_svfiprintf_r+0x194>
 800f046:	ab03      	add	r3, sp, #12
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	462a      	mov	r2, r5
 800f04c:	4b0f      	ldr	r3, [pc, #60]	; (800f08c <_svfiprintf_r+0x1f8>)
 800f04e:	a904      	add	r1, sp, #16
 800f050:	4638      	mov	r0, r7
 800f052:	f7fb fee9 	bl	800ae28 <_printf_float>
 800f056:	1c42      	adds	r2, r0, #1
 800f058:	4606      	mov	r6, r0
 800f05a:	d1d6      	bne.n	800f00a <_svfiprintf_r+0x176>
 800f05c:	89ab      	ldrh	r3, [r5, #12]
 800f05e:	065b      	lsls	r3, r3, #25
 800f060:	f53f af2c 	bmi.w	800eebc <_svfiprintf_r+0x28>
 800f064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f066:	b01d      	add	sp, #116	; 0x74
 800f068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06c:	ab03      	add	r3, sp, #12
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	462a      	mov	r2, r5
 800f072:	4b06      	ldr	r3, [pc, #24]	; (800f08c <_svfiprintf_r+0x1f8>)
 800f074:	a904      	add	r1, sp, #16
 800f076:	4638      	mov	r0, r7
 800f078:	f7fc f97a 	bl	800b370 <_printf_i>
 800f07c:	e7eb      	b.n	800f056 <_svfiprintf_r+0x1c2>
 800f07e:	bf00      	nop
 800f080:	08010d6c 	.word	0x08010d6c
 800f084:	08010d76 	.word	0x08010d76
 800f088:	0800ae29 	.word	0x0800ae29
 800f08c:	0800eddd 	.word	0x0800eddd
 800f090:	08010d72 	.word	0x08010d72

0800f094 <__sfputc_r>:
 800f094:	6893      	ldr	r3, [r2, #8]
 800f096:	3b01      	subs	r3, #1
 800f098:	2b00      	cmp	r3, #0
 800f09a:	b410      	push	{r4}
 800f09c:	6093      	str	r3, [r2, #8]
 800f09e:	da08      	bge.n	800f0b2 <__sfputc_r+0x1e>
 800f0a0:	6994      	ldr	r4, [r2, #24]
 800f0a2:	42a3      	cmp	r3, r4
 800f0a4:	db01      	blt.n	800f0aa <__sfputc_r+0x16>
 800f0a6:	290a      	cmp	r1, #10
 800f0a8:	d103      	bne.n	800f0b2 <__sfputc_r+0x1e>
 800f0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ae:	f7fd bbf7 	b.w	800c8a0 <__swbuf_r>
 800f0b2:	6813      	ldr	r3, [r2, #0]
 800f0b4:	1c58      	adds	r0, r3, #1
 800f0b6:	6010      	str	r0, [r2, #0]
 800f0b8:	7019      	strb	r1, [r3, #0]
 800f0ba:	4608      	mov	r0, r1
 800f0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0c0:	4770      	bx	lr

0800f0c2 <__sfputs_r>:
 800f0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c4:	4606      	mov	r6, r0
 800f0c6:	460f      	mov	r7, r1
 800f0c8:	4614      	mov	r4, r2
 800f0ca:	18d5      	adds	r5, r2, r3
 800f0cc:	42ac      	cmp	r4, r5
 800f0ce:	d101      	bne.n	800f0d4 <__sfputs_r+0x12>
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	e007      	b.n	800f0e4 <__sfputs_r+0x22>
 800f0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d8:	463a      	mov	r2, r7
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f7ff ffda 	bl	800f094 <__sfputc_r>
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	d1f3      	bne.n	800f0cc <__sfputs_r+0xa>
 800f0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0e8 <_vfiprintf_r>:
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	460d      	mov	r5, r1
 800f0ee:	b09d      	sub	sp, #116	; 0x74
 800f0f0:	4614      	mov	r4, r2
 800f0f2:	4698      	mov	r8, r3
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	b118      	cbz	r0, 800f100 <_vfiprintf_r+0x18>
 800f0f8:	6983      	ldr	r3, [r0, #24]
 800f0fa:	b90b      	cbnz	r3, 800f100 <_vfiprintf_r+0x18>
 800f0fc:	f7fe fc24 	bl	800d948 <__sinit>
 800f100:	4b89      	ldr	r3, [pc, #548]	; (800f328 <_vfiprintf_r+0x240>)
 800f102:	429d      	cmp	r5, r3
 800f104:	d11b      	bne.n	800f13e <_vfiprintf_r+0x56>
 800f106:	6875      	ldr	r5, [r6, #4]
 800f108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f10a:	07d9      	lsls	r1, r3, #31
 800f10c:	d405      	bmi.n	800f11a <_vfiprintf_r+0x32>
 800f10e:	89ab      	ldrh	r3, [r5, #12]
 800f110:	059a      	lsls	r2, r3, #22
 800f112:	d402      	bmi.n	800f11a <_vfiprintf_r+0x32>
 800f114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f116:	f7ff f828 	bl	800e16a <__retarget_lock_acquire_recursive>
 800f11a:	89ab      	ldrh	r3, [r5, #12]
 800f11c:	071b      	lsls	r3, r3, #28
 800f11e:	d501      	bpl.n	800f124 <_vfiprintf_r+0x3c>
 800f120:	692b      	ldr	r3, [r5, #16]
 800f122:	b9eb      	cbnz	r3, 800f160 <_vfiprintf_r+0x78>
 800f124:	4629      	mov	r1, r5
 800f126:	4630      	mov	r0, r6
 800f128:	f7fd fc0c 	bl	800c944 <__swsetup_r>
 800f12c:	b1c0      	cbz	r0, 800f160 <_vfiprintf_r+0x78>
 800f12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f130:	07dc      	lsls	r4, r3, #31
 800f132:	d50e      	bpl.n	800f152 <_vfiprintf_r+0x6a>
 800f134:	f04f 30ff 	mov.w	r0, #4294967295
 800f138:	b01d      	add	sp, #116	; 0x74
 800f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13e:	4b7b      	ldr	r3, [pc, #492]	; (800f32c <_vfiprintf_r+0x244>)
 800f140:	429d      	cmp	r5, r3
 800f142:	d101      	bne.n	800f148 <_vfiprintf_r+0x60>
 800f144:	68b5      	ldr	r5, [r6, #8]
 800f146:	e7df      	b.n	800f108 <_vfiprintf_r+0x20>
 800f148:	4b79      	ldr	r3, [pc, #484]	; (800f330 <_vfiprintf_r+0x248>)
 800f14a:	429d      	cmp	r5, r3
 800f14c:	bf08      	it	eq
 800f14e:	68f5      	ldreq	r5, [r6, #12]
 800f150:	e7da      	b.n	800f108 <_vfiprintf_r+0x20>
 800f152:	89ab      	ldrh	r3, [r5, #12]
 800f154:	0598      	lsls	r0, r3, #22
 800f156:	d4ed      	bmi.n	800f134 <_vfiprintf_r+0x4c>
 800f158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f15a:	f7ff f807 	bl	800e16c <__retarget_lock_release_recursive>
 800f15e:	e7e9      	b.n	800f134 <_vfiprintf_r+0x4c>
 800f160:	2300      	movs	r3, #0
 800f162:	9309      	str	r3, [sp, #36]	; 0x24
 800f164:	2320      	movs	r3, #32
 800f166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f16a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f16e:	2330      	movs	r3, #48	; 0x30
 800f170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f334 <_vfiprintf_r+0x24c>
 800f174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f178:	f04f 0901 	mov.w	r9, #1
 800f17c:	4623      	mov	r3, r4
 800f17e:	469a      	mov	sl, r3
 800f180:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f184:	b10a      	cbz	r2, 800f18a <_vfiprintf_r+0xa2>
 800f186:	2a25      	cmp	r2, #37	; 0x25
 800f188:	d1f9      	bne.n	800f17e <_vfiprintf_r+0x96>
 800f18a:	ebba 0b04 	subs.w	fp, sl, r4
 800f18e:	d00b      	beq.n	800f1a8 <_vfiprintf_r+0xc0>
 800f190:	465b      	mov	r3, fp
 800f192:	4622      	mov	r2, r4
 800f194:	4629      	mov	r1, r5
 800f196:	4630      	mov	r0, r6
 800f198:	f7ff ff93 	bl	800f0c2 <__sfputs_r>
 800f19c:	3001      	adds	r0, #1
 800f19e:	f000 80aa 	beq.w	800f2f6 <_vfiprintf_r+0x20e>
 800f1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1a4:	445a      	add	r2, fp
 800f1a6:	9209      	str	r2, [sp, #36]	; 0x24
 800f1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f000 80a2 	beq.w	800f2f6 <_vfiprintf_r+0x20e>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1bc:	f10a 0a01 	add.w	sl, sl, #1
 800f1c0:	9304      	str	r3, [sp, #16]
 800f1c2:	9307      	str	r3, [sp, #28]
 800f1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1c8:	931a      	str	r3, [sp, #104]	; 0x68
 800f1ca:	4654      	mov	r4, sl
 800f1cc:	2205      	movs	r2, #5
 800f1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d2:	4858      	ldr	r0, [pc, #352]	; (800f334 <_vfiprintf_r+0x24c>)
 800f1d4:	f7f1 f804 	bl	80001e0 <memchr>
 800f1d8:	9a04      	ldr	r2, [sp, #16]
 800f1da:	b9d8      	cbnz	r0, 800f214 <_vfiprintf_r+0x12c>
 800f1dc:	06d1      	lsls	r1, r2, #27
 800f1de:	bf44      	itt	mi
 800f1e0:	2320      	movmi	r3, #32
 800f1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1e6:	0713      	lsls	r3, r2, #28
 800f1e8:	bf44      	itt	mi
 800f1ea:	232b      	movmi	r3, #43	; 0x2b
 800f1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800f1f6:	d015      	beq.n	800f224 <_vfiprintf_r+0x13c>
 800f1f8:	9a07      	ldr	r2, [sp, #28]
 800f1fa:	4654      	mov	r4, sl
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	f04f 0c0a 	mov.w	ip, #10
 800f202:	4621      	mov	r1, r4
 800f204:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f208:	3b30      	subs	r3, #48	; 0x30
 800f20a:	2b09      	cmp	r3, #9
 800f20c:	d94e      	bls.n	800f2ac <_vfiprintf_r+0x1c4>
 800f20e:	b1b0      	cbz	r0, 800f23e <_vfiprintf_r+0x156>
 800f210:	9207      	str	r2, [sp, #28]
 800f212:	e014      	b.n	800f23e <_vfiprintf_r+0x156>
 800f214:	eba0 0308 	sub.w	r3, r0, r8
 800f218:	fa09 f303 	lsl.w	r3, r9, r3
 800f21c:	4313      	orrs	r3, r2
 800f21e:	9304      	str	r3, [sp, #16]
 800f220:	46a2      	mov	sl, r4
 800f222:	e7d2      	b.n	800f1ca <_vfiprintf_r+0xe2>
 800f224:	9b03      	ldr	r3, [sp, #12]
 800f226:	1d19      	adds	r1, r3, #4
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	9103      	str	r1, [sp, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	bfbb      	ittet	lt
 800f230:	425b      	neglt	r3, r3
 800f232:	f042 0202 	orrlt.w	r2, r2, #2
 800f236:	9307      	strge	r3, [sp, #28]
 800f238:	9307      	strlt	r3, [sp, #28]
 800f23a:	bfb8      	it	lt
 800f23c:	9204      	strlt	r2, [sp, #16]
 800f23e:	7823      	ldrb	r3, [r4, #0]
 800f240:	2b2e      	cmp	r3, #46	; 0x2e
 800f242:	d10c      	bne.n	800f25e <_vfiprintf_r+0x176>
 800f244:	7863      	ldrb	r3, [r4, #1]
 800f246:	2b2a      	cmp	r3, #42	; 0x2a
 800f248:	d135      	bne.n	800f2b6 <_vfiprintf_r+0x1ce>
 800f24a:	9b03      	ldr	r3, [sp, #12]
 800f24c:	1d1a      	adds	r2, r3, #4
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	9203      	str	r2, [sp, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	bfb8      	it	lt
 800f256:	f04f 33ff 	movlt.w	r3, #4294967295
 800f25a:	3402      	adds	r4, #2
 800f25c:	9305      	str	r3, [sp, #20]
 800f25e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f344 <_vfiprintf_r+0x25c>
 800f262:	7821      	ldrb	r1, [r4, #0]
 800f264:	2203      	movs	r2, #3
 800f266:	4650      	mov	r0, sl
 800f268:	f7f0 ffba 	bl	80001e0 <memchr>
 800f26c:	b140      	cbz	r0, 800f280 <_vfiprintf_r+0x198>
 800f26e:	2340      	movs	r3, #64	; 0x40
 800f270:	eba0 000a 	sub.w	r0, r0, sl
 800f274:	fa03 f000 	lsl.w	r0, r3, r0
 800f278:	9b04      	ldr	r3, [sp, #16]
 800f27a:	4303      	orrs	r3, r0
 800f27c:	3401      	adds	r4, #1
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f284:	482c      	ldr	r0, [pc, #176]	; (800f338 <_vfiprintf_r+0x250>)
 800f286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f28a:	2206      	movs	r2, #6
 800f28c:	f7f0 ffa8 	bl	80001e0 <memchr>
 800f290:	2800      	cmp	r0, #0
 800f292:	d03f      	beq.n	800f314 <_vfiprintf_r+0x22c>
 800f294:	4b29      	ldr	r3, [pc, #164]	; (800f33c <_vfiprintf_r+0x254>)
 800f296:	bb1b      	cbnz	r3, 800f2e0 <_vfiprintf_r+0x1f8>
 800f298:	9b03      	ldr	r3, [sp, #12]
 800f29a:	3307      	adds	r3, #7
 800f29c:	f023 0307 	bic.w	r3, r3, #7
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	9303      	str	r3, [sp, #12]
 800f2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a6:	443b      	add	r3, r7
 800f2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2aa:	e767      	b.n	800f17c <_vfiprintf_r+0x94>
 800f2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	2001      	movs	r0, #1
 800f2b4:	e7a5      	b.n	800f202 <_vfiprintf_r+0x11a>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	3401      	adds	r4, #1
 800f2ba:	9305      	str	r3, [sp, #20]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	f04f 0c0a 	mov.w	ip, #10
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2c8:	3a30      	subs	r2, #48	; 0x30
 800f2ca:	2a09      	cmp	r2, #9
 800f2cc:	d903      	bls.n	800f2d6 <_vfiprintf_r+0x1ee>
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d0c5      	beq.n	800f25e <_vfiprintf_r+0x176>
 800f2d2:	9105      	str	r1, [sp, #20]
 800f2d4:	e7c3      	b.n	800f25e <_vfiprintf_r+0x176>
 800f2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2da:	4604      	mov	r4, r0
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e7f0      	b.n	800f2c2 <_vfiprintf_r+0x1da>
 800f2e0:	ab03      	add	r3, sp, #12
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	4b16      	ldr	r3, [pc, #88]	; (800f340 <_vfiprintf_r+0x258>)
 800f2e8:	a904      	add	r1, sp, #16
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7fb fd9c 	bl	800ae28 <_printf_float>
 800f2f0:	4607      	mov	r7, r0
 800f2f2:	1c78      	adds	r0, r7, #1
 800f2f4:	d1d6      	bne.n	800f2a4 <_vfiprintf_r+0x1bc>
 800f2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2f8:	07d9      	lsls	r1, r3, #31
 800f2fa:	d405      	bmi.n	800f308 <_vfiprintf_r+0x220>
 800f2fc:	89ab      	ldrh	r3, [r5, #12]
 800f2fe:	059a      	lsls	r2, r3, #22
 800f300:	d402      	bmi.n	800f308 <_vfiprintf_r+0x220>
 800f302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f304:	f7fe ff32 	bl	800e16c <__retarget_lock_release_recursive>
 800f308:	89ab      	ldrh	r3, [r5, #12]
 800f30a:	065b      	lsls	r3, r3, #25
 800f30c:	f53f af12 	bmi.w	800f134 <_vfiprintf_r+0x4c>
 800f310:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f312:	e711      	b.n	800f138 <_vfiprintf_r+0x50>
 800f314:	ab03      	add	r3, sp, #12
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	462a      	mov	r2, r5
 800f31a:	4b09      	ldr	r3, [pc, #36]	; (800f340 <_vfiprintf_r+0x258>)
 800f31c:	a904      	add	r1, sp, #16
 800f31e:	4630      	mov	r0, r6
 800f320:	f7fc f826 	bl	800b370 <_printf_i>
 800f324:	e7e4      	b.n	800f2f0 <_vfiprintf_r+0x208>
 800f326:	bf00      	nop
 800f328:	08010b54 	.word	0x08010b54
 800f32c:	08010b74 	.word	0x08010b74
 800f330:	08010b34 	.word	0x08010b34
 800f334:	08010d6c 	.word	0x08010d6c
 800f338:	08010d76 	.word	0x08010d76
 800f33c:	0800ae29 	.word	0x0800ae29
 800f340:	0800f0c3 	.word	0x0800f0c3
 800f344:	08010d72 	.word	0x08010d72

0800f348 <nan>:
 800f348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f350 <nan+0x8>
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	00000000 	.word	0x00000000
 800f354:	7ff80000 	.word	0x7ff80000

0800f358 <_sbrk_r>:
 800f358:	b538      	push	{r3, r4, r5, lr}
 800f35a:	4d06      	ldr	r5, [pc, #24]	; (800f374 <_sbrk_r+0x1c>)
 800f35c:	2300      	movs	r3, #0
 800f35e:	4604      	mov	r4, r0
 800f360:	4608      	mov	r0, r1
 800f362:	602b      	str	r3, [r5, #0]
 800f364:	f7f5 fcbe 	bl	8004ce4 <_sbrk>
 800f368:	1c43      	adds	r3, r0, #1
 800f36a:	d102      	bne.n	800f372 <_sbrk_r+0x1a>
 800f36c:	682b      	ldr	r3, [r5, #0]
 800f36e:	b103      	cbz	r3, 800f372 <_sbrk_r+0x1a>
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	bd38      	pop	{r3, r4, r5, pc}
 800f374:	20012288 	.word	0x20012288

0800f378 <__sread>:
 800f378:	b510      	push	{r4, lr}
 800f37a:	460c      	mov	r4, r1
 800f37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f380:	f000 f93a 	bl	800f5f8 <_read_r>
 800f384:	2800      	cmp	r0, #0
 800f386:	bfab      	itete	ge
 800f388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f38a:	89a3      	ldrhlt	r3, [r4, #12]
 800f38c:	181b      	addge	r3, r3, r0
 800f38e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f392:	bfac      	ite	ge
 800f394:	6563      	strge	r3, [r4, #84]	; 0x54
 800f396:	81a3      	strhlt	r3, [r4, #12]
 800f398:	bd10      	pop	{r4, pc}

0800f39a <__swrite>:
 800f39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f39e:	461f      	mov	r7, r3
 800f3a0:	898b      	ldrh	r3, [r1, #12]
 800f3a2:	05db      	lsls	r3, r3, #23
 800f3a4:	4605      	mov	r5, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	4616      	mov	r6, r2
 800f3aa:	d505      	bpl.n	800f3b8 <__swrite+0x1e>
 800f3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3b0:	2302      	movs	r3, #2
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f000 f8b8 	bl	800f528 <_lseek_r>
 800f3b8:	89a3      	ldrh	r3, [r4, #12]
 800f3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3c2:	81a3      	strh	r3, [r4, #12]
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	463b      	mov	r3, r7
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ce:	f000 b837 	b.w	800f440 <_write_r>

0800f3d2 <__sseek>:
 800f3d2:	b510      	push	{r4, lr}
 800f3d4:	460c      	mov	r4, r1
 800f3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3da:	f000 f8a5 	bl	800f528 <_lseek_r>
 800f3de:	1c43      	adds	r3, r0, #1
 800f3e0:	89a3      	ldrh	r3, [r4, #12]
 800f3e2:	bf15      	itete	ne
 800f3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f3ee:	81a3      	strheq	r3, [r4, #12]
 800f3f0:	bf18      	it	ne
 800f3f2:	81a3      	strhne	r3, [r4, #12]
 800f3f4:	bd10      	pop	{r4, pc}

0800f3f6 <__sclose>:
 800f3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3fa:	f000 b851 	b.w	800f4a0 <_close_r>

0800f3fe <strncmp>:
 800f3fe:	b510      	push	{r4, lr}
 800f400:	b17a      	cbz	r2, 800f422 <strncmp+0x24>
 800f402:	4603      	mov	r3, r0
 800f404:	3901      	subs	r1, #1
 800f406:	1884      	adds	r4, r0, r2
 800f408:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f40c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f410:	4290      	cmp	r0, r2
 800f412:	d101      	bne.n	800f418 <strncmp+0x1a>
 800f414:	42a3      	cmp	r3, r4
 800f416:	d101      	bne.n	800f41c <strncmp+0x1e>
 800f418:	1a80      	subs	r0, r0, r2
 800f41a:	bd10      	pop	{r4, pc}
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d1f3      	bne.n	800f408 <strncmp+0xa>
 800f420:	e7fa      	b.n	800f418 <strncmp+0x1a>
 800f422:	4610      	mov	r0, r2
 800f424:	e7f9      	b.n	800f41a <strncmp+0x1c>

0800f426 <__ascii_wctomb>:
 800f426:	b149      	cbz	r1, 800f43c <__ascii_wctomb+0x16>
 800f428:	2aff      	cmp	r2, #255	; 0xff
 800f42a:	bf85      	ittet	hi
 800f42c:	238a      	movhi	r3, #138	; 0x8a
 800f42e:	6003      	strhi	r3, [r0, #0]
 800f430:	700a      	strbls	r2, [r1, #0]
 800f432:	f04f 30ff 	movhi.w	r0, #4294967295
 800f436:	bf98      	it	ls
 800f438:	2001      	movls	r0, #1
 800f43a:	4770      	bx	lr
 800f43c:	4608      	mov	r0, r1
 800f43e:	4770      	bx	lr

0800f440 <_write_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4d07      	ldr	r5, [pc, #28]	; (800f460 <_write_r+0x20>)
 800f444:	4604      	mov	r4, r0
 800f446:	4608      	mov	r0, r1
 800f448:	4611      	mov	r1, r2
 800f44a:	2200      	movs	r2, #0
 800f44c:	602a      	str	r2, [r5, #0]
 800f44e:	461a      	mov	r2, r3
 800f450:	f7f5 fbf7 	bl	8004c42 <_write>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <_write_r+0x1e>
 800f458:	682b      	ldr	r3, [r5, #0]
 800f45a:	b103      	cbz	r3, 800f45e <_write_r+0x1e>
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	20012288 	.word	0x20012288

0800f464 <__assert_func>:
 800f464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f466:	4614      	mov	r4, r2
 800f468:	461a      	mov	r2, r3
 800f46a:	4b09      	ldr	r3, [pc, #36]	; (800f490 <__assert_func+0x2c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4605      	mov	r5, r0
 800f470:	68d8      	ldr	r0, [r3, #12]
 800f472:	b14c      	cbz	r4, 800f488 <__assert_func+0x24>
 800f474:	4b07      	ldr	r3, [pc, #28]	; (800f494 <__assert_func+0x30>)
 800f476:	9100      	str	r1, [sp, #0]
 800f478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f47c:	4906      	ldr	r1, [pc, #24]	; (800f498 <__assert_func+0x34>)
 800f47e:	462b      	mov	r3, r5
 800f480:	f000 f81e 	bl	800f4c0 <fiprintf>
 800f484:	f000 f8ca 	bl	800f61c <abort>
 800f488:	4b04      	ldr	r3, [pc, #16]	; (800f49c <__assert_func+0x38>)
 800f48a:	461c      	mov	r4, r3
 800f48c:	e7f3      	b.n	800f476 <__assert_func+0x12>
 800f48e:	bf00      	nop
 800f490:	2000000c 	.word	0x2000000c
 800f494:	08010d7d 	.word	0x08010d7d
 800f498:	08010d8a 	.word	0x08010d8a
 800f49c:	08010db8 	.word	0x08010db8

0800f4a0 <_close_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4d06      	ldr	r5, [pc, #24]	; (800f4bc <_close_r+0x1c>)
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	602b      	str	r3, [r5, #0]
 800f4ac:	f7f5 fbe5 	bl	8004c7a <_close>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d102      	bne.n	800f4ba <_close_r+0x1a>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	b103      	cbz	r3, 800f4ba <_close_r+0x1a>
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	bd38      	pop	{r3, r4, r5, pc}
 800f4bc:	20012288 	.word	0x20012288

0800f4c0 <fiprintf>:
 800f4c0:	b40e      	push	{r1, r2, r3}
 800f4c2:	b503      	push	{r0, r1, lr}
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	ab03      	add	r3, sp, #12
 800f4c8:	4805      	ldr	r0, [pc, #20]	; (800f4e0 <fiprintf+0x20>)
 800f4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ce:	6800      	ldr	r0, [r0, #0]
 800f4d0:	9301      	str	r3, [sp, #4]
 800f4d2:	f7ff fe09 	bl	800f0e8 <_vfiprintf_r>
 800f4d6:	b002      	add	sp, #8
 800f4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4dc:	b003      	add	sp, #12
 800f4de:	4770      	bx	lr
 800f4e0:	2000000c 	.word	0x2000000c

0800f4e4 <_fstat_r>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	4d07      	ldr	r5, [pc, #28]	; (800f504 <_fstat_r+0x20>)
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	4608      	mov	r0, r1
 800f4ee:	4611      	mov	r1, r2
 800f4f0:	602b      	str	r3, [r5, #0]
 800f4f2:	f7f5 fbce 	bl	8004c92 <_fstat>
 800f4f6:	1c43      	adds	r3, r0, #1
 800f4f8:	d102      	bne.n	800f500 <_fstat_r+0x1c>
 800f4fa:	682b      	ldr	r3, [r5, #0]
 800f4fc:	b103      	cbz	r3, 800f500 <_fstat_r+0x1c>
 800f4fe:	6023      	str	r3, [r4, #0]
 800f500:	bd38      	pop	{r3, r4, r5, pc}
 800f502:	bf00      	nop
 800f504:	20012288 	.word	0x20012288

0800f508 <_isatty_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d06      	ldr	r5, [pc, #24]	; (800f524 <_isatty_r+0x1c>)
 800f50c:	2300      	movs	r3, #0
 800f50e:	4604      	mov	r4, r0
 800f510:	4608      	mov	r0, r1
 800f512:	602b      	str	r3, [r5, #0]
 800f514:	f7f5 fbcd 	bl	8004cb2 <_isatty>
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	d102      	bne.n	800f522 <_isatty_r+0x1a>
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	b103      	cbz	r3, 800f522 <_isatty_r+0x1a>
 800f520:	6023      	str	r3, [r4, #0]
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	20012288 	.word	0x20012288

0800f528 <_lseek_r>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4d07      	ldr	r5, [pc, #28]	; (800f548 <_lseek_r+0x20>)
 800f52c:	4604      	mov	r4, r0
 800f52e:	4608      	mov	r0, r1
 800f530:	4611      	mov	r1, r2
 800f532:	2200      	movs	r2, #0
 800f534:	602a      	str	r2, [r5, #0]
 800f536:	461a      	mov	r2, r3
 800f538:	f7f5 fbc6 	bl	8004cc8 <_lseek>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d102      	bne.n	800f546 <_lseek_r+0x1e>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	b103      	cbz	r3, 800f546 <_lseek_r+0x1e>
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	20012288 	.word	0x20012288

0800f54c <memmove>:
 800f54c:	4288      	cmp	r0, r1
 800f54e:	b510      	push	{r4, lr}
 800f550:	eb01 0402 	add.w	r4, r1, r2
 800f554:	d902      	bls.n	800f55c <memmove+0x10>
 800f556:	4284      	cmp	r4, r0
 800f558:	4623      	mov	r3, r4
 800f55a:	d807      	bhi.n	800f56c <memmove+0x20>
 800f55c:	1e43      	subs	r3, r0, #1
 800f55e:	42a1      	cmp	r1, r4
 800f560:	d008      	beq.n	800f574 <memmove+0x28>
 800f562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f56a:	e7f8      	b.n	800f55e <memmove+0x12>
 800f56c:	4402      	add	r2, r0
 800f56e:	4601      	mov	r1, r0
 800f570:	428a      	cmp	r2, r1
 800f572:	d100      	bne.n	800f576 <memmove+0x2a>
 800f574:	bd10      	pop	{r4, pc}
 800f576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f57e:	e7f7      	b.n	800f570 <memmove+0x24>

0800f580 <__malloc_lock>:
 800f580:	4801      	ldr	r0, [pc, #4]	; (800f588 <__malloc_lock+0x8>)
 800f582:	f7fe bdf2 	b.w	800e16a <__retarget_lock_acquire_recursive>
 800f586:	bf00      	nop
 800f588:	2001227c 	.word	0x2001227c

0800f58c <__malloc_unlock>:
 800f58c:	4801      	ldr	r0, [pc, #4]	; (800f594 <__malloc_unlock+0x8>)
 800f58e:	f7fe bded 	b.w	800e16c <__retarget_lock_release_recursive>
 800f592:	bf00      	nop
 800f594:	2001227c 	.word	0x2001227c

0800f598 <_realloc_r>:
 800f598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f59c:	4680      	mov	r8, r0
 800f59e:	4614      	mov	r4, r2
 800f5a0:	460e      	mov	r6, r1
 800f5a2:	b921      	cbnz	r1, 800f5ae <_realloc_r+0x16>
 800f5a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	f7ff bba3 	b.w	800ecf4 <_malloc_r>
 800f5ae:	b92a      	cbnz	r2, 800f5bc <_realloc_r+0x24>
 800f5b0:	f7ff fb34 	bl	800ec1c <_free_r>
 800f5b4:	4625      	mov	r5, r4
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5bc:	f000 f835 	bl	800f62a <_malloc_usable_size_r>
 800f5c0:	4284      	cmp	r4, r0
 800f5c2:	4607      	mov	r7, r0
 800f5c4:	d802      	bhi.n	800f5cc <_realloc_r+0x34>
 800f5c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5ca:	d812      	bhi.n	800f5f2 <_realloc_r+0x5a>
 800f5cc:	4621      	mov	r1, r4
 800f5ce:	4640      	mov	r0, r8
 800f5d0:	f7ff fb90 	bl	800ecf4 <_malloc_r>
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d0ed      	beq.n	800f5b6 <_realloc_r+0x1e>
 800f5da:	42bc      	cmp	r4, r7
 800f5dc:	4622      	mov	r2, r4
 800f5de:	4631      	mov	r1, r6
 800f5e0:	bf28      	it	cs
 800f5e2:	463a      	movcs	r2, r7
 800f5e4:	f7fb fb6a 	bl	800acbc <memcpy>
 800f5e8:	4631      	mov	r1, r6
 800f5ea:	4640      	mov	r0, r8
 800f5ec:	f7ff fb16 	bl	800ec1c <_free_r>
 800f5f0:	e7e1      	b.n	800f5b6 <_realloc_r+0x1e>
 800f5f2:	4635      	mov	r5, r6
 800f5f4:	e7df      	b.n	800f5b6 <_realloc_r+0x1e>
	...

0800f5f8 <_read_r>:
 800f5f8:	b538      	push	{r3, r4, r5, lr}
 800f5fa:	4d07      	ldr	r5, [pc, #28]	; (800f618 <_read_r+0x20>)
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	4608      	mov	r0, r1
 800f600:	4611      	mov	r1, r2
 800f602:	2200      	movs	r2, #0
 800f604:	602a      	str	r2, [r5, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	f7f5 fafe 	bl	8004c08 <_read>
 800f60c:	1c43      	adds	r3, r0, #1
 800f60e:	d102      	bne.n	800f616 <_read_r+0x1e>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	b103      	cbz	r3, 800f616 <_read_r+0x1e>
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	bd38      	pop	{r3, r4, r5, pc}
 800f618:	20012288 	.word	0x20012288

0800f61c <abort>:
 800f61c:	b508      	push	{r3, lr}
 800f61e:	2006      	movs	r0, #6
 800f620:	f000 f834 	bl	800f68c <raise>
 800f624:	2001      	movs	r0, #1
 800f626:	f7f5 fae5 	bl	8004bf4 <_exit>

0800f62a <_malloc_usable_size_r>:
 800f62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f62e:	1f18      	subs	r0, r3, #4
 800f630:	2b00      	cmp	r3, #0
 800f632:	bfbc      	itt	lt
 800f634:	580b      	ldrlt	r3, [r1, r0]
 800f636:	18c0      	addlt	r0, r0, r3
 800f638:	4770      	bx	lr

0800f63a <_raise_r>:
 800f63a:	291f      	cmp	r1, #31
 800f63c:	b538      	push	{r3, r4, r5, lr}
 800f63e:	4604      	mov	r4, r0
 800f640:	460d      	mov	r5, r1
 800f642:	d904      	bls.n	800f64e <_raise_r+0x14>
 800f644:	2316      	movs	r3, #22
 800f646:	6003      	str	r3, [r0, #0]
 800f648:	f04f 30ff 	mov.w	r0, #4294967295
 800f64c:	bd38      	pop	{r3, r4, r5, pc}
 800f64e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f650:	b112      	cbz	r2, 800f658 <_raise_r+0x1e>
 800f652:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f656:	b94b      	cbnz	r3, 800f66c <_raise_r+0x32>
 800f658:	4620      	mov	r0, r4
 800f65a:	f000 f831 	bl	800f6c0 <_getpid_r>
 800f65e:	462a      	mov	r2, r5
 800f660:	4601      	mov	r1, r0
 800f662:	4620      	mov	r0, r4
 800f664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f668:	f000 b818 	b.w	800f69c <_kill_r>
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d00a      	beq.n	800f686 <_raise_r+0x4c>
 800f670:	1c59      	adds	r1, r3, #1
 800f672:	d103      	bne.n	800f67c <_raise_r+0x42>
 800f674:	2316      	movs	r3, #22
 800f676:	6003      	str	r3, [r0, #0]
 800f678:	2001      	movs	r0, #1
 800f67a:	e7e7      	b.n	800f64c <_raise_r+0x12>
 800f67c:	2400      	movs	r4, #0
 800f67e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f682:	4628      	mov	r0, r5
 800f684:	4798      	blx	r3
 800f686:	2000      	movs	r0, #0
 800f688:	e7e0      	b.n	800f64c <_raise_r+0x12>
	...

0800f68c <raise>:
 800f68c:	4b02      	ldr	r3, [pc, #8]	; (800f698 <raise+0xc>)
 800f68e:	4601      	mov	r1, r0
 800f690:	6818      	ldr	r0, [r3, #0]
 800f692:	f7ff bfd2 	b.w	800f63a <_raise_r>
 800f696:	bf00      	nop
 800f698:	2000000c 	.word	0x2000000c

0800f69c <_kill_r>:
 800f69c:	b538      	push	{r3, r4, r5, lr}
 800f69e:	4d07      	ldr	r5, [pc, #28]	; (800f6bc <_kill_r+0x20>)
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	4608      	mov	r0, r1
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	602b      	str	r3, [r5, #0]
 800f6aa:	f7f5 fa93 	bl	8004bd4 <_kill>
 800f6ae:	1c43      	adds	r3, r0, #1
 800f6b0:	d102      	bne.n	800f6b8 <_kill_r+0x1c>
 800f6b2:	682b      	ldr	r3, [r5, #0]
 800f6b4:	b103      	cbz	r3, 800f6b8 <_kill_r+0x1c>
 800f6b6:	6023      	str	r3, [r4, #0]
 800f6b8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20012288 	.word	0x20012288

0800f6c0 <_getpid_r>:
 800f6c0:	f7f5 ba80 	b.w	8004bc4 <_getpid>

0800f6c4 <pow>:
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	ed2d 8b02 	vpush	{d8}
 800f6ca:	eeb0 8a40 	vmov.f32	s16, s0
 800f6ce:	eef0 8a60 	vmov.f32	s17, s1
 800f6d2:	ec55 4b11 	vmov	r4, r5, d1
 800f6d6:	f000 f893 	bl	800f800 <__ieee754_pow>
 800f6da:	4622      	mov	r2, r4
 800f6dc:	462b      	mov	r3, r5
 800f6de:	4620      	mov	r0, r4
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	ec57 6b10 	vmov	r6, r7, d0
 800f6e6:	f7f1 fa21 	bl	8000b2c <__aeabi_dcmpun>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d13b      	bne.n	800f766 <pow+0xa2>
 800f6ee:	ec51 0b18 	vmov	r0, r1, d8
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f7f1 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6fa:	b1b8      	cbz	r0, 800f72c <pow+0x68>
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	2300      	movs	r3, #0
 800f700:	4620      	mov	r0, r4
 800f702:	4629      	mov	r1, r5
 800f704:	f7f1 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f708:	2800      	cmp	r0, #0
 800f70a:	d146      	bne.n	800f79a <pow+0xd6>
 800f70c:	ec45 4b10 	vmov	d0, r4, r5
 800f710:	f000 fe8f 	bl	8010432 <finite>
 800f714:	b338      	cbz	r0, 800f766 <pow+0xa2>
 800f716:	2200      	movs	r2, #0
 800f718:	2300      	movs	r3, #0
 800f71a:	4620      	mov	r0, r4
 800f71c:	4629      	mov	r1, r5
 800f71e:	f7f1 f9dd 	bl	8000adc <__aeabi_dcmplt>
 800f722:	b300      	cbz	r0, 800f766 <pow+0xa2>
 800f724:	f7fb faa0 	bl	800ac68 <__errno>
 800f728:	2322      	movs	r3, #34	; 0x22
 800f72a:	e01b      	b.n	800f764 <pow+0xa0>
 800f72c:	ec47 6b10 	vmov	d0, r6, r7
 800f730:	f000 fe7f 	bl	8010432 <finite>
 800f734:	b9e0      	cbnz	r0, 800f770 <pow+0xac>
 800f736:	eeb0 0a48 	vmov.f32	s0, s16
 800f73a:	eef0 0a68 	vmov.f32	s1, s17
 800f73e:	f000 fe78 	bl	8010432 <finite>
 800f742:	b1a8      	cbz	r0, 800f770 <pow+0xac>
 800f744:	ec45 4b10 	vmov	d0, r4, r5
 800f748:	f000 fe73 	bl	8010432 <finite>
 800f74c:	b180      	cbz	r0, 800f770 <pow+0xac>
 800f74e:	4632      	mov	r2, r6
 800f750:	463b      	mov	r3, r7
 800f752:	4630      	mov	r0, r6
 800f754:	4639      	mov	r1, r7
 800f756:	f7f1 f9e9 	bl	8000b2c <__aeabi_dcmpun>
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d0e2      	beq.n	800f724 <pow+0x60>
 800f75e:	f7fb fa83 	bl	800ac68 <__errno>
 800f762:	2321      	movs	r3, #33	; 0x21
 800f764:	6003      	str	r3, [r0, #0]
 800f766:	ecbd 8b02 	vpop	{d8}
 800f76a:	ec47 6b10 	vmov	d0, r6, r7
 800f76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f770:	2200      	movs	r2, #0
 800f772:	2300      	movs	r3, #0
 800f774:	4630      	mov	r0, r6
 800f776:	4639      	mov	r1, r7
 800f778:	f7f1 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d0f2      	beq.n	800f766 <pow+0xa2>
 800f780:	eeb0 0a48 	vmov.f32	s0, s16
 800f784:	eef0 0a68 	vmov.f32	s1, s17
 800f788:	f000 fe53 	bl	8010432 <finite>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d0ea      	beq.n	800f766 <pow+0xa2>
 800f790:	ec45 4b10 	vmov	d0, r4, r5
 800f794:	f000 fe4d 	bl	8010432 <finite>
 800f798:	e7c3      	b.n	800f722 <pow+0x5e>
 800f79a:	4f01      	ldr	r7, [pc, #4]	; (800f7a0 <pow+0xdc>)
 800f79c:	2600      	movs	r6, #0
 800f79e:	e7e2      	b.n	800f766 <pow+0xa2>
 800f7a0:	3ff00000 	.word	0x3ff00000

0800f7a4 <sqrt>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	ed2d 8b02 	vpush	{d8}
 800f7aa:	ec55 4b10 	vmov	r4, r5, d0
 800f7ae:	f000 fd55 	bl	801025c <__ieee754_sqrt>
 800f7b2:	4622      	mov	r2, r4
 800f7b4:	462b      	mov	r3, r5
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	eeb0 8a40 	vmov.f32	s16, s0
 800f7be:	eef0 8a60 	vmov.f32	s17, s1
 800f7c2:	f7f1 f9b3 	bl	8000b2c <__aeabi_dcmpun>
 800f7c6:	b990      	cbnz	r0, 800f7ee <sqrt+0x4a>
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	f7f1 f984 	bl	8000adc <__aeabi_dcmplt>
 800f7d4:	b158      	cbz	r0, 800f7ee <sqrt+0x4a>
 800f7d6:	f7fb fa47 	bl	800ac68 <__errno>
 800f7da:	2321      	movs	r3, #33	; 0x21
 800f7dc:	6003      	str	r3, [r0, #0]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	f7f1 f831 	bl	800084c <__aeabi_ddiv>
 800f7ea:	ec41 0b18 	vmov	d8, r0, r1
 800f7ee:	eeb0 0a48 	vmov.f32	s0, s16
 800f7f2:	eef0 0a68 	vmov.f32	s1, s17
 800f7f6:	ecbd 8b02 	vpop	{d8}
 800f7fa:	bd38      	pop	{r3, r4, r5, pc}
 800f7fc:	0000      	movs	r0, r0
	...

0800f800 <__ieee754_pow>:
 800f800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f804:	ed2d 8b06 	vpush	{d8-d10}
 800f808:	b089      	sub	sp, #36	; 0x24
 800f80a:	ed8d 1b00 	vstr	d1, [sp]
 800f80e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f812:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f816:	ea58 0102 	orrs.w	r1, r8, r2
 800f81a:	ec57 6b10 	vmov	r6, r7, d0
 800f81e:	d115      	bne.n	800f84c <__ieee754_pow+0x4c>
 800f820:	19b3      	adds	r3, r6, r6
 800f822:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f826:	4152      	adcs	r2, r2
 800f828:	4299      	cmp	r1, r3
 800f82a:	4b89      	ldr	r3, [pc, #548]	; (800fa50 <__ieee754_pow+0x250>)
 800f82c:	4193      	sbcs	r3, r2
 800f82e:	f080 84d2 	bcs.w	80101d6 <__ieee754_pow+0x9d6>
 800f832:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f836:	4630      	mov	r0, r6
 800f838:	4639      	mov	r1, r7
 800f83a:	f7f0 fd27 	bl	800028c <__adddf3>
 800f83e:	ec41 0b10 	vmov	d0, r0, r1
 800f842:	b009      	add	sp, #36	; 0x24
 800f844:	ecbd 8b06 	vpop	{d8-d10}
 800f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f84c:	4b81      	ldr	r3, [pc, #516]	; (800fa54 <__ieee754_pow+0x254>)
 800f84e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f852:	429c      	cmp	r4, r3
 800f854:	ee10 aa10 	vmov	sl, s0
 800f858:	463d      	mov	r5, r7
 800f85a:	dc06      	bgt.n	800f86a <__ieee754_pow+0x6a>
 800f85c:	d101      	bne.n	800f862 <__ieee754_pow+0x62>
 800f85e:	2e00      	cmp	r6, #0
 800f860:	d1e7      	bne.n	800f832 <__ieee754_pow+0x32>
 800f862:	4598      	cmp	r8, r3
 800f864:	dc01      	bgt.n	800f86a <__ieee754_pow+0x6a>
 800f866:	d10f      	bne.n	800f888 <__ieee754_pow+0x88>
 800f868:	b172      	cbz	r2, 800f888 <__ieee754_pow+0x88>
 800f86a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f86e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f872:	ea55 050a 	orrs.w	r5, r5, sl
 800f876:	d1dc      	bne.n	800f832 <__ieee754_pow+0x32>
 800f878:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f87c:	18db      	adds	r3, r3, r3
 800f87e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f882:	4152      	adcs	r2, r2
 800f884:	429d      	cmp	r5, r3
 800f886:	e7d0      	b.n	800f82a <__ieee754_pow+0x2a>
 800f888:	2d00      	cmp	r5, #0
 800f88a:	da3b      	bge.n	800f904 <__ieee754_pow+0x104>
 800f88c:	4b72      	ldr	r3, [pc, #456]	; (800fa58 <__ieee754_pow+0x258>)
 800f88e:	4598      	cmp	r8, r3
 800f890:	dc51      	bgt.n	800f936 <__ieee754_pow+0x136>
 800f892:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f896:	4598      	cmp	r8, r3
 800f898:	f340 84ac 	ble.w	80101f4 <__ieee754_pow+0x9f4>
 800f89c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f8a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f8a4:	2b14      	cmp	r3, #20
 800f8a6:	dd0f      	ble.n	800f8c8 <__ieee754_pow+0xc8>
 800f8a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f8ac:	fa22 f103 	lsr.w	r1, r2, r3
 800f8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	f040 849d 	bne.w	80101f4 <__ieee754_pow+0x9f4>
 800f8ba:	f001 0101 	and.w	r1, r1, #1
 800f8be:	f1c1 0302 	rsb	r3, r1, #2
 800f8c2:	9304      	str	r3, [sp, #16]
 800f8c4:	b182      	cbz	r2, 800f8e8 <__ieee754_pow+0xe8>
 800f8c6:	e05f      	b.n	800f988 <__ieee754_pow+0x188>
 800f8c8:	2a00      	cmp	r2, #0
 800f8ca:	d15b      	bne.n	800f984 <__ieee754_pow+0x184>
 800f8cc:	f1c3 0314 	rsb	r3, r3, #20
 800f8d0:	fa48 f103 	asr.w	r1, r8, r3
 800f8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f8d8:	4543      	cmp	r3, r8
 800f8da:	f040 8488 	bne.w	80101ee <__ieee754_pow+0x9ee>
 800f8de:	f001 0101 	and.w	r1, r1, #1
 800f8e2:	f1c1 0302 	rsb	r3, r1, #2
 800f8e6:	9304      	str	r3, [sp, #16]
 800f8e8:	4b5c      	ldr	r3, [pc, #368]	; (800fa5c <__ieee754_pow+0x25c>)
 800f8ea:	4598      	cmp	r8, r3
 800f8ec:	d132      	bne.n	800f954 <__ieee754_pow+0x154>
 800f8ee:	f1b9 0f00 	cmp.w	r9, #0
 800f8f2:	f280 8478 	bge.w	80101e6 <__ieee754_pow+0x9e6>
 800f8f6:	4959      	ldr	r1, [pc, #356]	; (800fa5c <__ieee754_pow+0x25c>)
 800f8f8:	4632      	mov	r2, r6
 800f8fa:	463b      	mov	r3, r7
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	f7f0 ffa5 	bl	800084c <__aeabi_ddiv>
 800f902:	e79c      	b.n	800f83e <__ieee754_pow+0x3e>
 800f904:	2300      	movs	r3, #0
 800f906:	9304      	str	r3, [sp, #16]
 800f908:	2a00      	cmp	r2, #0
 800f90a:	d13d      	bne.n	800f988 <__ieee754_pow+0x188>
 800f90c:	4b51      	ldr	r3, [pc, #324]	; (800fa54 <__ieee754_pow+0x254>)
 800f90e:	4598      	cmp	r8, r3
 800f910:	d1ea      	bne.n	800f8e8 <__ieee754_pow+0xe8>
 800f912:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f916:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f91a:	ea53 030a 	orrs.w	r3, r3, sl
 800f91e:	f000 845a 	beq.w	80101d6 <__ieee754_pow+0x9d6>
 800f922:	4b4f      	ldr	r3, [pc, #316]	; (800fa60 <__ieee754_pow+0x260>)
 800f924:	429c      	cmp	r4, r3
 800f926:	dd08      	ble.n	800f93a <__ieee754_pow+0x13a>
 800f928:	f1b9 0f00 	cmp.w	r9, #0
 800f92c:	f2c0 8457 	blt.w	80101de <__ieee754_pow+0x9de>
 800f930:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f934:	e783      	b.n	800f83e <__ieee754_pow+0x3e>
 800f936:	2302      	movs	r3, #2
 800f938:	e7e5      	b.n	800f906 <__ieee754_pow+0x106>
 800f93a:	f1b9 0f00 	cmp.w	r9, #0
 800f93e:	f04f 0000 	mov.w	r0, #0
 800f942:	f04f 0100 	mov.w	r1, #0
 800f946:	f6bf af7a 	bge.w	800f83e <__ieee754_pow+0x3e>
 800f94a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f94e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f952:	e774      	b.n	800f83e <__ieee754_pow+0x3e>
 800f954:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f958:	d106      	bne.n	800f968 <__ieee754_pow+0x168>
 800f95a:	4632      	mov	r2, r6
 800f95c:	463b      	mov	r3, r7
 800f95e:	4630      	mov	r0, r6
 800f960:	4639      	mov	r1, r7
 800f962:	f7f0 fe49 	bl	80005f8 <__aeabi_dmul>
 800f966:	e76a      	b.n	800f83e <__ieee754_pow+0x3e>
 800f968:	4b3e      	ldr	r3, [pc, #248]	; (800fa64 <__ieee754_pow+0x264>)
 800f96a:	4599      	cmp	r9, r3
 800f96c:	d10c      	bne.n	800f988 <__ieee754_pow+0x188>
 800f96e:	2d00      	cmp	r5, #0
 800f970:	db0a      	blt.n	800f988 <__ieee754_pow+0x188>
 800f972:	ec47 6b10 	vmov	d0, r6, r7
 800f976:	b009      	add	sp, #36	; 0x24
 800f978:	ecbd 8b06 	vpop	{d8-d10}
 800f97c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f980:	f000 bc6c 	b.w	801025c <__ieee754_sqrt>
 800f984:	2300      	movs	r3, #0
 800f986:	9304      	str	r3, [sp, #16]
 800f988:	ec47 6b10 	vmov	d0, r6, r7
 800f98c:	f000 fd48 	bl	8010420 <fabs>
 800f990:	ec51 0b10 	vmov	r0, r1, d0
 800f994:	f1ba 0f00 	cmp.w	sl, #0
 800f998:	d129      	bne.n	800f9ee <__ieee754_pow+0x1ee>
 800f99a:	b124      	cbz	r4, 800f9a6 <__ieee754_pow+0x1a6>
 800f99c:	4b2f      	ldr	r3, [pc, #188]	; (800fa5c <__ieee754_pow+0x25c>)
 800f99e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d123      	bne.n	800f9ee <__ieee754_pow+0x1ee>
 800f9a6:	f1b9 0f00 	cmp.w	r9, #0
 800f9aa:	da05      	bge.n	800f9b8 <__ieee754_pow+0x1b8>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	492a      	ldr	r1, [pc, #168]	; (800fa5c <__ieee754_pow+0x25c>)
 800f9b4:	f7f0 ff4a 	bl	800084c <__aeabi_ddiv>
 800f9b8:	2d00      	cmp	r5, #0
 800f9ba:	f6bf af40 	bge.w	800f83e <__ieee754_pow+0x3e>
 800f9be:	9b04      	ldr	r3, [sp, #16]
 800f9c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f9c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f9c8:	4323      	orrs	r3, r4
 800f9ca:	d108      	bne.n	800f9de <__ieee754_pow+0x1de>
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	4610      	mov	r0, r2
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	f7f0 fc58 	bl	8000288 <__aeabi_dsub>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	460b      	mov	r3, r1
 800f9dc:	e78f      	b.n	800f8fe <__ieee754_pow+0xfe>
 800f9de:	9b04      	ldr	r3, [sp, #16]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	f47f af2c 	bne.w	800f83e <__ieee754_pow+0x3e>
 800f9e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	e727      	b.n	800f83e <__ieee754_pow+0x3e>
 800f9ee:	0feb      	lsrs	r3, r5, #31
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	9306      	str	r3, [sp, #24]
 800f9f4:	9a06      	ldr	r2, [sp, #24]
 800f9f6:	9b04      	ldr	r3, [sp, #16]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	d102      	bne.n	800fa02 <__ieee754_pow+0x202>
 800f9fc:	4632      	mov	r2, r6
 800f9fe:	463b      	mov	r3, r7
 800fa00:	e7e6      	b.n	800f9d0 <__ieee754_pow+0x1d0>
 800fa02:	4b19      	ldr	r3, [pc, #100]	; (800fa68 <__ieee754_pow+0x268>)
 800fa04:	4598      	cmp	r8, r3
 800fa06:	f340 80fb 	ble.w	800fc00 <__ieee754_pow+0x400>
 800fa0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fa0e:	4598      	cmp	r8, r3
 800fa10:	4b13      	ldr	r3, [pc, #76]	; (800fa60 <__ieee754_pow+0x260>)
 800fa12:	dd0c      	ble.n	800fa2e <__ieee754_pow+0x22e>
 800fa14:	429c      	cmp	r4, r3
 800fa16:	dc0f      	bgt.n	800fa38 <__ieee754_pow+0x238>
 800fa18:	f1b9 0f00 	cmp.w	r9, #0
 800fa1c:	da0f      	bge.n	800fa3e <__ieee754_pow+0x23e>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	b009      	add	sp, #36	; 0x24
 800fa22:	ecbd 8b06 	vpop	{d8-d10}
 800fa26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2a:	f000 bcf0 	b.w	801040e <__math_oflow>
 800fa2e:	429c      	cmp	r4, r3
 800fa30:	dbf2      	blt.n	800fa18 <__ieee754_pow+0x218>
 800fa32:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <__ieee754_pow+0x25c>)
 800fa34:	429c      	cmp	r4, r3
 800fa36:	dd19      	ble.n	800fa6c <__ieee754_pow+0x26c>
 800fa38:	f1b9 0f00 	cmp.w	r9, #0
 800fa3c:	dcef      	bgt.n	800fa1e <__ieee754_pow+0x21e>
 800fa3e:	2000      	movs	r0, #0
 800fa40:	b009      	add	sp, #36	; 0x24
 800fa42:	ecbd 8b06 	vpop	{d8-d10}
 800fa46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4a:	f000 bcd7 	b.w	80103fc <__math_uflow>
 800fa4e:	bf00      	nop
 800fa50:	fff00000 	.word	0xfff00000
 800fa54:	7ff00000 	.word	0x7ff00000
 800fa58:	433fffff 	.word	0x433fffff
 800fa5c:	3ff00000 	.word	0x3ff00000
 800fa60:	3fefffff 	.word	0x3fefffff
 800fa64:	3fe00000 	.word	0x3fe00000
 800fa68:	41e00000 	.word	0x41e00000
 800fa6c:	4b60      	ldr	r3, [pc, #384]	; (800fbf0 <__ieee754_pow+0x3f0>)
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f7f0 fc0a 	bl	8000288 <__aeabi_dsub>
 800fa74:	a354      	add	r3, pc, #336	; (adr r3, 800fbc8 <__ieee754_pow+0x3c8>)
 800fa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	460d      	mov	r5, r1
 800fa7e:	f7f0 fdbb 	bl	80005f8 <__aeabi_dmul>
 800fa82:	a353      	add	r3, pc, #332	; (adr r3, 800fbd0 <__ieee754_pow+0x3d0>)
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	4606      	mov	r6, r0
 800fa8a:	460f      	mov	r7, r1
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4629      	mov	r1, r5
 800fa90:	f7f0 fdb2 	bl	80005f8 <__aeabi_dmul>
 800fa94:	4b57      	ldr	r3, [pc, #348]	; (800fbf4 <__ieee754_pow+0x3f4>)
 800fa96:	4682      	mov	sl, r0
 800fa98:	468b      	mov	fp, r1
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	4629      	mov	r1, r5
 800faa0:	f7f0 fdaa 	bl	80005f8 <__aeabi_dmul>
 800faa4:	4602      	mov	r2, r0
 800faa6:	460b      	mov	r3, r1
 800faa8:	a14b      	add	r1, pc, #300	; (adr r1, 800fbd8 <__ieee754_pow+0x3d8>)
 800faaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faae:	f7f0 fbeb 	bl	8000288 <__aeabi_dsub>
 800fab2:	4622      	mov	r2, r4
 800fab4:	462b      	mov	r3, r5
 800fab6:	f7f0 fd9f 	bl	80005f8 <__aeabi_dmul>
 800faba:	4602      	mov	r2, r0
 800fabc:	460b      	mov	r3, r1
 800fabe:	2000      	movs	r0, #0
 800fac0:	494d      	ldr	r1, [pc, #308]	; (800fbf8 <__ieee754_pow+0x3f8>)
 800fac2:	f7f0 fbe1 	bl	8000288 <__aeabi_dsub>
 800fac6:	4622      	mov	r2, r4
 800fac8:	4680      	mov	r8, r0
 800faca:	4689      	mov	r9, r1
 800facc:	462b      	mov	r3, r5
 800face:	4620      	mov	r0, r4
 800fad0:	4629      	mov	r1, r5
 800fad2:	f7f0 fd91 	bl	80005f8 <__aeabi_dmul>
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	4640      	mov	r0, r8
 800fadc:	4649      	mov	r1, r9
 800fade:	f7f0 fd8b 	bl	80005f8 <__aeabi_dmul>
 800fae2:	a33f      	add	r3, pc, #252	; (adr r3, 800fbe0 <__ieee754_pow+0x3e0>)
 800fae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae8:	f7f0 fd86 	bl	80005f8 <__aeabi_dmul>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	4650      	mov	r0, sl
 800faf2:	4659      	mov	r1, fp
 800faf4:	f7f0 fbc8 	bl	8000288 <__aeabi_dsub>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	4680      	mov	r8, r0
 800fafe:	4689      	mov	r9, r1
 800fb00:	4630      	mov	r0, r6
 800fb02:	4639      	mov	r1, r7
 800fb04:	f7f0 fbc2 	bl	800028c <__adddf3>
 800fb08:	2000      	movs	r0, #0
 800fb0a:	4632      	mov	r2, r6
 800fb0c:	463b      	mov	r3, r7
 800fb0e:	4604      	mov	r4, r0
 800fb10:	460d      	mov	r5, r1
 800fb12:	f7f0 fbb9 	bl	8000288 <__aeabi_dsub>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4640      	mov	r0, r8
 800fb1c:	4649      	mov	r1, r9
 800fb1e:	f7f0 fbb3 	bl	8000288 <__aeabi_dsub>
 800fb22:	9b04      	ldr	r3, [sp, #16]
 800fb24:	9a06      	ldr	r2, [sp, #24]
 800fb26:	3b01      	subs	r3, #1
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	4682      	mov	sl, r0
 800fb2c:	468b      	mov	fp, r1
 800fb2e:	f040 81e7 	bne.w	800ff00 <__ieee754_pow+0x700>
 800fb32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fbe8 <__ieee754_pow+0x3e8>
 800fb36:	eeb0 8a47 	vmov.f32	s16, s14
 800fb3a:	eef0 8a67 	vmov.f32	s17, s15
 800fb3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb42:	2600      	movs	r6, #0
 800fb44:	4632      	mov	r2, r6
 800fb46:	463b      	mov	r3, r7
 800fb48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb4c:	f7f0 fb9c 	bl	8000288 <__aeabi_dsub>
 800fb50:	4622      	mov	r2, r4
 800fb52:	462b      	mov	r3, r5
 800fb54:	f7f0 fd50 	bl	80005f8 <__aeabi_dmul>
 800fb58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb5c:	4680      	mov	r8, r0
 800fb5e:	4689      	mov	r9, r1
 800fb60:	4650      	mov	r0, sl
 800fb62:	4659      	mov	r1, fp
 800fb64:	f7f0 fd48 	bl	80005f8 <__aeabi_dmul>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4640      	mov	r0, r8
 800fb6e:	4649      	mov	r1, r9
 800fb70:	f7f0 fb8c 	bl	800028c <__adddf3>
 800fb74:	4632      	mov	r2, r6
 800fb76:	463b      	mov	r3, r7
 800fb78:	4680      	mov	r8, r0
 800fb7a:	4689      	mov	r9, r1
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	4629      	mov	r1, r5
 800fb80:	f7f0 fd3a 	bl	80005f8 <__aeabi_dmul>
 800fb84:	460b      	mov	r3, r1
 800fb86:	4604      	mov	r4, r0
 800fb88:	460d      	mov	r5, r1
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	4649      	mov	r1, r9
 800fb8e:	4640      	mov	r0, r8
 800fb90:	f7f0 fb7c 	bl	800028c <__adddf3>
 800fb94:	4b19      	ldr	r3, [pc, #100]	; (800fbfc <__ieee754_pow+0x3fc>)
 800fb96:	4299      	cmp	r1, r3
 800fb98:	ec45 4b19 	vmov	d9, r4, r5
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	460f      	mov	r7, r1
 800fba0:	468b      	mov	fp, r1
 800fba2:	f340 82f1 	ble.w	8010188 <__ieee754_pow+0x988>
 800fba6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fbaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fbae:	4303      	orrs	r3, r0
 800fbb0:	f000 81e4 	beq.w	800ff7c <__ieee754_pow+0x77c>
 800fbb4:	ec51 0b18 	vmov	r0, r1, d8
 800fbb8:	2200      	movs	r2, #0
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f7f0 ff8e 	bl	8000adc <__aeabi_dcmplt>
 800fbc0:	3800      	subs	r0, #0
 800fbc2:	bf18      	it	ne
 800fbc4:	2001      	movne	r0, #1
 800fbc6:	e72b      	b.n	800fa20 <__ieee754_pow+0x220>
 800fbc8:	60000000 	.word	0x60000000
 800fbcc:	3ff71547 	.word	0x3ff71547
 800fbd0:	f85ddf44 	.word	0xf85ddf44
 800fbd4:	3e54ae0b 	.word	0x3e54ae0b
 800fbd8:	55555555 	.word	0x55555555
 800fbdc:	3fd55555 	.word	0x3fd55555
 800fbe0:	652b82fe 	.word	0x652b82fe
 800fbe4:	3ff71547 	.word	0x3ff71547
 800fbe8:	00000000 	.word	0x00000000
 800fbec:	bff00000 	.word	0xbff00000
 800fbf0:	3ff00000 	.word	0x3ff00000
 800fbf4:	3fd00000 	.word	0x3fd00000
 800fbf8:	3fe00000 	.word	0x3fe00000
 800fbfc:	408fffff 	.word	0x408fffff
 800fc00:	4bd5      	ldr	r3, [pc, #852]	; (800ff58 <__ieee754_pow+0x758>)
 800fc02:	402b      	ands	r3, r5
 800fc04:	2200      	movs	r2, #0
 800fc06:	b92b      	cbnz	r3, 800fc14 <__ieee754_pow+0x414>
 800fc08:	4bd4      	ldr	r3, [pc, #848]	; (800ff5c <__ieee754_pow+0x75c>)
 800fc0a:	f7f0 fcf5 	bl	80005f8 <__aeabi_dmul>
 800fc0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fc12:	460c      	mov	r4, r1
 800fc14:	1523      	asrs	r3, r4, #20
 800fc16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fc1a:	4413      	add	r3, r2
 800fc1c:	9305      	str	r3, [sp, #20]
 800fc1e:	4bd0      	ldr	r3, [pc, #832]	; (800ff60 <__ieee754_pow+0x760>)
 800fc20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fc24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fc28:	429c      	cmp	r4, r3
 800fc2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fc2e:	dd08      	ble.n	800fc42 <__ieee754_pow+0x442>
 800fc30:	4bcc      	ldr	r3, [pc, #816]	; (800ff64 <__ieee754_pow+0x764>)
 800fc32:	429c      	cmp	r4, r3
 800fc34:	f340 8162 	ble.w	800fefc <__ieee754_pow+0x6fc>
 800fc38:	9b05      	ldr	r3, [sp, #20]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	9305      	str	r3, [sp, #20]
 800fc3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fc42:	2400      	movs	r4, #0
 800fc44:	00e3      	lsls	r3, r4, #3
 800fc46:	9307      	str	r3, [sp, #28]
 800fc48:	4bc7      	ldr	r3, [pc, #796]	; (800ff68 <__ieee754_pow+0x768>)
 800fc4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc4e:	ed93 7b00 	vldr	d7, [r3]
 800fc52:	4629      	mov	r1, r5
 800fc54:	ec53 2b17 	vmov	r2, r3, d7
 800fc58:	eeb0 9a47 	vmov.f32	s18, s14
 800fc5c:	eef0 9a67 	vmov.f32	s19, s15
 800fc60:	4682      	mov	sl, r0
 800fc62:	f7f0 fb11 	bl	8000288 <__aeabi_dsub>
 800fc66:	4652      	mov	r2, sl
 800fc68:	4606      	mov	r6, r0
 800fc6a:	460f      	mov	r7, r1
 800fc6c:	462b      	mov	r3, r5
 800fc6e:	ec51 0b19 	vmov	r0, r1, d9
 800fc72:	f7f0 fb0b 	bl	800028c <__adddf3>
 800fc76:	4602      	mov	r2, r0
 800fc78:	460b      	mov	r3, r1
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	49bb      	ldr	r1, [pc, #748]	; (800ff6c <__ieee754_pow+0x76c>)
 800fc7e:	f7f0 fde5 	bl	800084c <__aeabi_ddiv>
 800fc82:	ec41 0b1a 	vmov	d10, r0, r1
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	f7f0 fcb3 	bl	80005f8 <__aeabi_dmul>
 800fc92:	2300      	movs	r3, #0
 800fc94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc98:	9302      	str	r3, [sp, #8]
 800fc9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fc9e:	46ab      	mov	fp, r5
 800fca0:	106d      	asrs	r5, r5, #1
 800fca2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fca6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fcaa:	ec41 0b18 	vmov	d8, r0, r1
 800fcae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	4640      	mov	r0, r8
 800fcb6:	4649      	mov	r1, r9
 800fcb8:	4614      	mov	r4, r2
 800fcba:	461d      	mov	r5, r3
 800fcbc:	f7f0 fc9c 	bl	80005f8 <__aeabi_dmul>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	4639      	mov	r1, r7
 800fcc8:	f7f0 fade 	bl	8000288 <__aeabi_dsub>
 800fccc:	ec53 2b19 	vmov	r2, r3, d9
 800fcd0:	4606      	mov	r6, r0
 800fcd2:	460f      	mov	r7, r1
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	f7f0 fad6 	bl	8000288 <__aeabi_dsub>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	4650      	mov	r0, sl
 800fce2:	4659      	mov	r1, fp
 800fce4:	f7f0 fad0 	bl	8000288 <__aeabi_dsub>
 800fce8:	4642      	mov	r2, r8
 800fcea:	464b      	mov	r3, r9
 800fcec:	f7f0 fc84 	bl	80005f8 <__aeabi_dmul>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	4630      	mov	r0, r6
 800fcf6:	4639      	mov	r1, r7
 800fcf8:	f7f0 fac6 	bl	8000288 <__aeabi_dsub>
 800fcfc:	ec53 2b1a 	vmov	r2, r3, d10
 800fd00:	f7f0 fc7a 	bl	80005f8 <__aeabi_dmul>
 800fd04:	ec53 2b18 	vmov	r2, r3, d8
 800fd08:	ec41 0b19 	vmov	d9, r0, r1
 800fd0c:	ec51 0b18 	vmov	r0, r1, d8
 800fd10:	f7f0 fc72 	bl	80005f8 <__aeabi_dmul>
 800fd14:	a37c      	add	r3, pc, #496	; (adr r3, 800ff08 <__ieee754_pow+0x708>)
 800fd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	460d      	mov	r5, r1
 800fd1e:	f7f0 fc6b 	bl	80005f8 <__aeabi_dmul>
 800fd22:	a37b      	add	r3, pc, #492	; (adr r3, 800ff10 <__ieee754_pow+0x710>)
 800fd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd28:	f7f0 fab0 	bl	800028c <__adddf3>
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	462b      	mov	r3, r5
 800fd30:	f7f0 fc62 	bl	80005f8 <__aeabi_dmul>
 800fd34:	a378      	add	r3, pc, #480	; (adr r3, 800ff18 <__ieee754_pow+0x718>)
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	f7f0 faa7 	bl	800028c <__adddf3>
 800fd3e:	4622      	mov	r2, r4
 800fd40:	462b      	mov	r3, r5
 800fd42:	f7f0 fc59 	bl	80005f8 <__aeabi_dmul>
 800fd46:	a376      	add	r3, pc, #472	; (adr r3, 800ff20 <__ieee754_pow+0x720>)
 800fd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4c:	f7f0 fa9e 	bl	800028c <__adddf3>
 800fd50:	4622      	mov	r2, r4
 800fd52:	462b      	mov	r3, r5
 800fd54:	f7f0 fc50 	bl	80005f8 <__aeabi_dmul>
 800fd58:	a373      	add	r3, pc, #460	; (adr r3, 800ff28 <__ieee754_pow+0x728>)
 800fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5e:	f7f0 fa95 	bl	800028c <__adddf3>
 800fd62:	4622      	mov	r2, r4
 800fd64:	462b      	mov	r3, r5
 800fd66:	f7f0 fc47 	bl	80005f8 <__aeabi_dmul>
 800fd6a:	a371      	add	r3, pc, #452	; (adr r3, 800ff30 <__ieee754_pow+0x730>)
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	f7f0 fa8c 	bl	800028c <__adddf3>
 800fd74:	4622      	mov	r2, r4
 800fd76:	4606      	mov	r6, r0
 800fd78:	460f      	mov	r7, r1
 800fd7a:	462b      	mov	r3, r5
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	4629      	mov	r1, r5
 800fd80:	f7f0 fc3a 	bl	80005f8 <__aeabi_dmul>
 800fd84:	4602      	mov	r2, r0
 800fd86:	460b      	mov	r3, r1
 800fd88:	4630      	mov	r0, r6
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	f7f0 fc34 	bl	80005f8 <__aeabi_dmul>
 800fd90:	4642      	mov	r2, r8
 800fd92:	4604      	mov	r4, r0
 800fd94:	460d      	mov	r5, r1
 800fd96:	464b      	mov	r3, r9
 800fd98:	ec51 0b18 	vmov	r0, r1, d8
 800fd9c:	f7f0 fa76 	bl	800028c <__adddf3>
 800fda0:	ec53 2b19 	vmov	r2, r3, d9
 800fda4:	f7f0 fc28 	bl	80005f8 <__aeabi_dmul>
 800fda8:	4622      	mov	r2, r4
 800fdaa:	462b      	mov	r3, r5
 800fdac:	f7f0 fa6e 	bl	800028c <__adddf3>
 800fdb0:	4642      	mov	r2, r8
 800fdb2:	4682      	mov	sl, r0
 800fdb4:	468b      	mov	fp, r1
 800fdb6:	464b      	mov	r3, r9
 800fdb8:	4640      	mov	r0, r8
 800fdba:	4649      	mov	r1, r9
 800fdbc:	f7f0 fc1c 	bl	80005f8 <__aeabi_dmul>
 800fdc0:	4b6b      	ldr	r3, [pc, #428]	; (800ff70 <__ieee754_pow+0x770>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	460f      	mov	r7, r1
 800fdc8:	f7f0 fa60 	bl	800028c <__adddf3>
 800fdcc:	4652      	mov	r2, sl
 800fdce:	465b      	mov	r3, fp
 800fdd0:	f7f0 fa5c 	bl	800028c <__adddf3>
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	460d      	mov	r5, r1
 800fdda:	4602      	mov	r2, r0
 800fddc:	460b      	mov	r3, r1
 800fdde:	4640      	mov	r0, r8
 800fde0:	4649      	mov	r1, r9
 800fde2:	f7f0 fc09 	bl	80005f8 <__aeabi_dmul>
 800fde6:	4b62      	ldr	r3, [pc, #392]	; (800ff70 <__ieee754_pow+0x770>)
 800fde8:	4680      	mov	r8, r0
 800fdea:	4689      	mov	r9, r1
 800fdec:	2200      	movs	r2, #0
 800fdee:	4620      	mov	r0, r4
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	f7f0 fa49 	bl	8000288 <__aeabi_dsub>
 800fdf6:	4632      	mov	r2, r6
 800fdf8:	463b      	mov	r3, r7
 800fdfa:	f7f0 fa45 	bl	8000288 <__aeabi_dsub>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4650      	mov	r0, sl
 800fe04:	4659      	mov	r1, fp
 800fe06:	f7f0 fa3f 	bl	8000288 <__aeabi_dsub>
 800fe0a:	ec53 2b18 	vmov	r2, r3, d8
 800fe0e:	f7f0 fbf3 	bl	80005f8 <__aeabi_dmul>
 800fe12:	4622      	mov	r2, r4
 800fe14:	4606      	mov	r6, r0
 800fe16:	460f      	mov	r7, r1
 800fe18:	462b      	mov	r3, r5
 800fe1a:	ec51 0b19 	vmov	r0, r1, d9
 800fe1e:	f7f0 fbeb 	bl	80005f8 <__aeabi_dmul>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	4630      	mov	r0, r6
 800fe28:	4639      	mov	r1, r7
 800fe2a:	f7f0 fa2f 	bl	800028c <__adddf3>
 800fe2e:	4606      	mov	r6, r0
 800fe30:	460f      	mov	r7, r1
 800fe32:	4602      	mov	r2, r0
 800fe34:	460b      	mov	r3, r1
 800fe36:	4640      	mov	r0, r8
 800fe38:	4649      	mov	r1, r9
 800fe3a:	f7f0 fa27 	bl	800028c <__adddf3>
 800fe3e:	a33e      	add	r3, pc, #248	; (adr r3, 800ff38 <__ieee754_pow+0x738>)
 800fe40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe44:	2000      	movs	r0, #0
 800fe46:	4604      	mov	r4, r0
 800fe48:	460d      	mov	r5, r1
 800fe4a:	f7f0 fbd5 	bl	80005f8 <__aeabi_dmul>
 800fe4e:	4642      	mov	r2, r8
 800fe50:	ec41 0b18 	vmov	d8, r0, r1
 800fe54:	464b      	mov	r3, r9
 800fe56:	4620      	mov	r0, r4
 800fe58:	4629      	mov	r1, r5
 800fe5a:	f7f0 fa15 	bl	8000288 <__aeabi_dsub>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	460b      	mov	r3, r1
 800fe62:	4630      	mov	r0, r6
 800fe64:	4639      	mov	r1, r7
 800fe66:	f7f0 fa0f 	bl	8000288 <__aeabi_dsub>
 800fe6a:	a335      	add	r3, pc, #212	; (adr r3, 800ff40 <__ieee754_pow+0x740>)
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	f7f0 fbc2 	bl	80005f8 <__aeabi_dmul>
 800fe74:	a334      	add	r3, pc, #208	; (adr r3, 800ff48 <__ieee754_pow+0x748>)
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	4606      	mov	r6, r0
 800fe7c:	460f      	mov	r7, r1
 800fe7e:	4620      	mov	r0, r4
 800fe80:	4629      	mov	r1, r5
 800fe82:	f7f0 fbb9 	bl	80005f8 <__aeabi_dmul>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	4639      	mov	r1, r7
 800fe8e:	f7f0 f9fd 	bl	800028c <__adddf3>
 800fe92:	9a07      	ldr	r2, [sp, #28]
 800fe94:	4b37      	ldr	r3, [pc, #220]	; (800ff74 <__ieee754_pow+0x774>)
 800fe96:	4413      	add	r3, r2
 800fe98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9c:	f7f0 f9f6 	bl	800028c <__adddf3>
 800fea0:	4682      	mov	sl, r0
 800fea2:	9805      	ldr	r0, [sp, #20]
 800fea4:	468b      	mov	fp, r1
 800fea6:	f7f0 fb3d 	bl	8000524 <__aeabi_i2d>
 800feaa:	9a07      	ldr	r2, [sp, #28]
 800feac:	4b32      	ldr	r3, [pc, #200]	; (800ff78 <__ieee754_pow+0x778>)
 800feae:	4413      	add	r3, r2
 800feb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800feb4:	4606      	mov	r6, r0
 800feb6:	460f      	mov	r7, r1
 800feb8:	4652      	mov	r2, sl
 800feba:	465b      	mov	r3, fp
 800febc:	ec51 0b18 	vmov	r0, r1, d8
 800fec0:	f7f0 f9e4 	bl	800028c <__adddf3>
 800fec4:	4642      	mov	r2, r8
 800fec6:	464b      	mov	r3, r9
 800fec8:	f7f0 f9e0 	bl	800028c <__adddf3>
 800fecc:	4632      	mov	r2, r6
 800fece:	463b      	mov	r3, r7
 800fed0:	f7f0 f9dc 	bl	800028c <__adddf3>
 800fed4:	2000      	movs	r0, #0
 800fed6:	4632      	mov	r2, r6
 800fed8:	463b      	mov	r3, r7
 800feda:	4604      	mov	r4, r0
 800fedc:	460d      	mov	r5, r1
 800fede:	f7f0 f9d3 	bl	8000288 <__aeabi_dsub>
 800fee2:	4642      	mov	r2, r8
 800fee4:	464b      	mov	r3, r9
 800fee6:	f7f0 f9cf 	bl	8000288 <__aeabi_dsub>
 800feea:	ec53 2b18 	vmov	r2, r3, d8
 800feee:	f7f0 f9cb 	bl	8000288 <__aeabi_dsub>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	4650      	mov	r0, sl
 800fef8:	4659      	mov	r1, fp
 800fefa:	e610      	b.n	800fb1e <__ieee754_pow+0x31e>
 800fefc:	2401      	movs	r4, #1
 800fefe:	e6a1      	b.n	800fc44 <__ieee754_pow+0x444>
 800ff00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ff50 <__ieee754_pow+0x750>
 800ff04:	e617      	b.n	800fb36 <__ieee754_pow+0x336>
 800ff06:	bf00      	nop
 800ff08:	4a454eef 	.word	0x4a454eef
 800ff0c:	3fca7e28 	.word	0x3fca7e28
 800ff10:	93c9db65 	.word	0x93c9db65
 800ff14:	3fcd864a 	.word	0x3fcd864a
 800ff18:	a91d4101 	.word	0xa91d4101
 800ff1c:	3fd17460 	.word	0x3fd17460
 800ff20:	518f264d 	.word	0x518f264d
 800ff24:	3fd55555 	.word	0x3fd55555
 800ff28:	db6fabff 	.word	0xdb6fabff
 800ff2c:	3fdb6db6 	.word	0x3fdb6db6
 800ff30:	33333303 	.word	0x33333303
 800ff34:	3fe33333 	.word	0x3fe33333
 800ff38:	e0000000 	.word	0xe0000000
 800ff3c:	3feec709 	.word	0x3feec709
 800ff40:	dc3a03fd 	.word	0xdc3a03fd
 800ff44:	3feec709 	.word	0x3feec709
 800ff48:	145b01f5 	.word	0x145b01f5
 800ff4c:	be3e2fe0 	.word	0xbe3e2fe0
 800ff50:	00000000 	.word	0x00000000
 800ff54:	3ff00000 	.word	0x3ff00000
 800ff58:	7ff00000 	.word	0x7ff00000
 800ff5c:	43400000 	.word	0x43400000
 800ff60:	0003988e 	.word	0x0003988e
 800ff64:	000bb679 	.word	0x000bb679
 800ff68:	08010dc0 	.word	0x08010dc0
 800ff6c:	3ff00000 	.word	0x3ff00000
 800ff70:	40080000 	.word	0x40080000
 800ff74:	08010de0 	.word	0x08010de0
 800ff78:	08010dd0 	.word	0x08010dd0
 800ff7c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010254 <__ieee754_pow+0xa54>)
 800ff7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff82:	4640      	mov	r0, r8
 800ff84:	4649      	mov	r1, r9
 800ff86:	f7f0 f981 	bl	800028c <__adddf3>
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	ec41 0b1a 	vmov	d10, r0, r1
 800ff90:	462b      	mov	r3, r5
 800ff92:	4630      	mov	r0, r6
 800ff94:	4639      	mov	r1, r7
 800ff96:	f7f0 f977 	bl	8000288 <__aeabi_dsub>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	ec51 0b1a 	vmov	r0, r1, d10
 800ffa2:	f7f0 fdb9 	bl	8000b18 <__aeabi_dcmpgt>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f47f ae04 	bne.w	800fbb4 <__ieee754_pow+0x3b4>
 800ffac:	4aa4      	ldr	r2, [pc, #656]	; (8010240 <__ieee754_pow+0xa40>)
 800ffae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	f340 8108 	ble.w	80101c8 <__ieee754_pow+0x9c8>
 800ffb8:	151b      	asrs	r3, r3, #20
 800ffba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ffbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ffc2:	fa4a f303 	asr.w	r3, sl, r3
 800ffc6:	445b      	add	r3, fp
 800ffc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ffcc:	4e9d      	ldr	r6, [pc, #628]	; (8010244 <__ieee754_pow+0xa44>)
 800ffce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ffd2:	4116      	asrs	r6, r2
 800ffd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ffd8:	2000      	movs	r0, #0
 800ffda:	ea23 0106 	bic.w	r1, r3, r6
 800ffde:	f1c2 0214 	rsb	r2, r2, #20
 800ffe2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ffe6:	fa4a fa02 	asr.w	sl, sl, r2
 800ffea:	f1bb 0f00 	cmp.w	fp, #0
 800ffee:	4602      	mov	r2, r0
 800fff0:	460b      	mov	r3, r1
 800fff2:	4620      	mov	r0, r4
 800fff4:	4629      	mov	r1, r5
 800fff6:	bfb8      	it	lt
 800fff8:	f1ca 0a00 	rsblt	sl, sl, #0
 800fffc:	f7f0 f944 	bl	8000288 <__aeabi_dsub>
 8010000:	ec41 0b19 	vmov	d9, r0, r1
 8010004:	4642      	mov	r2, r8
 8010006:	464b      	mov	r3, r9
 8010008:	ec51 0b19 	vmov	r0, r1, d9
 801000c:	f7f0 f93e 	bl	800028c <__adddf3>
 8010010:	a37b      	add	r3, pc, #492	; (adr r3, 8010200 <__ieee754_pow+0xa00>)
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	2000      	movs	r0, #0
 8010018:	4604      	mov	r4, r0
 801001a:	460d      	mov	r5, r1
 801001c:	f7f0 faec 	bl	80005f8 <__aeabi_dmul>
 8010020:	ec53 2b19 	vmov	r2, r3, d9
 8010024:	4606      	mov	r6, r0
 8010026:	460f      	mov	r7, r1
 8010028:	4620      	mov	r0, r4
 801002a:	4629      	mov	r1, r5
 801002c:	f7f0 f92c 	bl	8000288 <__aeabi_dsub>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	4640      	mov	r0, r8
 8010036:	4649      	mov	r1, r9
 8010038:	f7f0 f926 	bl	8000288 <__aeabi_dsub>
 801003c:	a372      	add	r3, pc, #456	; (adr r3, 8010208 <__ieee754_pow+0xa08>)
 801003e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010042:	f7f0 fad9 	bl	80005f8 <__aeabi_dmul>
 8010046:	a372      	add	r3, pc, #456	; (adr r3, 8010210 <__ieee754_pow+0xa10>)
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	4680      	mov	r8, r0
 801004e:	4689      	mov	r9, r1
 8010050:	4620      	mov	r0, r4
 8010052:	4629      	mov	r1, r5
 8010054:	f7f0 fad0 	bl	80005f8 <__aeabi_dmul>
 8010058:	4602      	mov	r2, r0
 801005a:	460b      	mov	r3, r1
 801005c:	4640      	mov	r0, r8
 801005e:	4649      	mov	r1, r9
 8010060:	f7f0 f914 	bl	800028c <__adddf3>
 8010064:	4604      	mov	r4, r0
 8010066:	460d      	mov	r5, r1
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	4630      	mov	r0, r6
 801006e:	4639      	mov	r1, r7
 8010070:	f7f0 f90c 	bl	800028c <__adddf3>
 8010074:	4632      	mov	r2, r6
 8010076:	463b      	mov	r3, r7
 8010078:	4680      	mov	r8, r0
 801007a:	4689      	mov	r9, r1
 801007c:	f7f0 f904 	bl	8000288 <__aeabi_dsub>
 8010080:	4602      	mov	r2, r0
 8010082:	460b      	mov	r3, r1
 8010084:	4620      	mov	r0, r4
 8010086:	4629      	mov	r1, r5
 8010088:	f7f0 f8fe 	bl	8000288 <__aeabi_dsub>
 801008c:	4642      	mov	r2, r8
 801008e:	4606      	mov	r6, r0
 8010090:	460f      	mov	r7, r1
 8010092:	464b      	mov	r3, r9
 8010094:	4640      	mov	r0, r8
 8010096:	4649      	mov	r1, r9
 8010098:	f7f0 faae 	bl	80005f8 <__aeabi_dmul>
 801009c:	a35e      	add	r3, pc, #376	; (adr r3, 8010218 <__ieee754_pow+0xa18>)
 801009e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a2:	4604      	mov	r4, r0
 80100a4:	460d      	mov	r5, r1
 80100a6:	f7f0 faa7 	bl	80005f8 <__aeabi_dmul>
 80100aa:	a35d      	add	r3, pc, #372	; (adr r3, 8010220 <__ieee754_pow+0xa20>)
 80100ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b0:	f7f0 f8ea 	bl	8000288 <__aeabi_dsub>
 80100b4:	4622      	mov	r2, r4
 80100b6:	462b      	mov	r3, r5
 80100b8:	f7f0 fa9e 	bl	80005f8 <__aeabi_dmul>
 80100bc:	a35a      	add	r3, pc, #360	; (adr r3, 8010228 <__ieee754_pow+0xa28>)
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	f7f0 f8e3 	bl	800028c <__adddf3>
 80100c6:	4622      	mov	r2, r4
 80100c8:	462b      	mov	r3, r5
 80100ca:	f7f0 fa95 	bl	80005f8 <__aeabi_dmul>
 80100ce:	a358      	add	r3, pc, #352	; (adr r3, 8010230 <__ieee754_pow+0xa30>)
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	f7f0 f8d8 	bl	8000288 <__aeabi_dsub>
 80100d8:	4622      	mov	r2, r4
 80100da:	462b      	mov	r3, r5
 80100dc:	f7f0 fa8c 	bl	80005f8 <__aeabi_dmul>
 80100e0:	a355      	add	r3, pc, #340	; (adr r3, 8010238 <__ieee754_pow+0xa38>)
 80100e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e6:	f7f0 f8d1 	bl	800028c <__adddf3>
 80100ea:	4622      	mov	r2, r4
 80100ec:	462b      	mov	r3, r5
 80100ee:	f7f0 fa83 	bl	80005f8 <__aeabi_dmul>
 80100f2:	4602      	mov	r2, r0
 80100f4:	460b      	mov	r3, r1
 80100f6:	4640      	mov	r0, r8
 80100f8:	4649      	mov	r1, r9
 80100fa:	f7f0 f8c5 	bl	8000288 <__aeabi_dsub>
 80100fe:	4604      	mov	r4, r0
 8010100:	460d      	mov	r5, r1
 8010102:	4602      	mov	r2, r0
 8010104:	460b      	mov	r3, r1
 8010106:	4640      	mov	r0, r8
 8010108:	4649      	mov	r1, r9
 801010a:	f7f0 fa75 	bl	80005f8 <__aeabi_dmul>
 801010e:	2200      	movs	r2, #0
 8010110:	ec41 0b19 	vmov	d9, r0, r1
 8010114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010118:	4620      	mov	r0, r4
 801011a:	4629      	mov	r1, r5
 801011c:	f7f0 f8b4 	bl	8000288 <__aeabi_dsub>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	ec51 0b19 	vmov	r0, r1, d9
 8010128:	f7f0 fb90 	bl	800084c <__aeabi_ddiv>
 801012c:	4632      	mov	r2, r6
 801012e:	4604      	mov	r4, r0
 8010130:	460d      	mov	r5, r1
 8010132:	463b      	mov	r3, r7
 8010134:	4640      	mov	r0, r8
 8010136:	4649      	mov	r1, r9
 8010138:	f7f0 fa5e 	bl	80005f8 <__aeabi_dmul>
 801013c:	4632      	mov	r2, r6
 801013e:	463b      	mov	r3, r7
 8010140:	f7f0 f8a4 	bl	800028c <__adddf3>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4620      	mov	r0, r4
 801014a:	4629      	mov	r1, r5
 801014c:	f7f0 f89c 	bl	8000288 <__aeabi_dsub>
 8010150:	4642      	mov	r2, r8
 8010152:	464b      	mov	r3, r9
 8010154:	f7f0 f898 	bl	8000288 <__aeabi_dsub>
 8010158:	460b      	mov	r3, r1
 801015a:	4602      	mov	r2, r0
 801015c:	493a      	ldr	r1, [pc, #232]	; (8010248 <__ieee754_pow+0xa48>)
 801015e:	2000      	movs	r0, #0
 8010160:	f7f0 f892 	bl	8000288 <__aeabi_dsub>
 8010164:	ec41 0b10 	vmov	d0, r0, r1
 8010168:	ee10 3a90 	vmov	r3, s1
 801016c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010174:	da2b      	bge.n	80101ce <__ieee754_pow+0x9ce>
 8010176:	4650      	mov	r0, sl
 8010178:	f000 f966 	bl	8010448 <scalbn>
 801017c:	ec51 0b10 	vmov	r0, r1, d0
 8010180:	ec53 2b18 	vmov	r2, r3, d8
 8010184:	f7ff bbed 	b.w	800f962 <__ieee754_pow+0x162>
 8010188:	4b30      	ldr	r3, [pc, #192]	; (801024c <__ieee754_pow+0xa4c>)
 801018a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801018e:	429e      	cmp	r6, r3
 8010190:	f77f af0c 	ble.w	800ffac <__ieee754_pow+0x7ac>
 8010194:	4b2e      	ldr	r3, [pc, #184]	; (8010250 <__ieee754_pow+0xa50>)
 8010196:	440b      	add	r3, r1
 8010198:	4303      	orrs	r3, r0
 801019a:	d009      	beq.n	80101b0 <__ieee754_pow+0x9b0>
 801019c:	ec51 0b18 	vmov	r0, r1, d8
 80101a0:	2200      	movs	r2, #0
 80101a2:	2300      	movs	r3, #0
 80101a4:	f7f0 fc9a 	bl	8000adc <__aeabi_dcmplt>
 80101a8:	3800      	subs	r0, #0
 80101aa:	bf18      	it	ne
 80101ac:	2001      	movne	r0, #1
 80101ae:	e447      	b.n	800fa40 <__ieee754_pow+0x240>
 80101b0:	4622      	mov	r2, r4
 80101b2:	462b      	mov	r3, r5
 80101b4:	f7f0 f868 	bl	8000288 <__aeabi_dsub>
 80101b8:	4642      	mov	r2, r8
 80101ba:	464b      	mov	r3, r9
 80101bc:	f7f0 fca2 	bl	8000b04 <__aeabi_dcmpge>
 80101c0:	2800      	cmp	r0, #0
 80101c2:	f43f aef3 	beq.w	800ffac <__ieee754_pow+0x7ac>
 80101c6:	e7e9      	b.n	801019c <__ieee754_pow+0x99c>
 80101c8:	f04f 0a00 	mov.w	sl, #0
 80101cc:	e71a      	b.n	8010004 <__ieee754_pow+0x804>
 80101ce:	ec51 0b10 	vmov	r0, r1, d0
 80101d2:	4619      	mov	r1, r3
 80101d4:	e7d4      	b.n	8010180 <__ieee754_pow+0x980>
 80101d6:	491c      	ldr	r1, [pc, #112]	; (8010248 <__ieee754_pow+0xa48>)
 80101d8:	2000      	movs	r0, #0
 80101da:	f7ff bb30 	b.w	800f83e <__ieee754_pow+0x3e>
 80101de:	2000      	movs	r0, #0
 80101e0:	2100      	movs	r1, #0
 80101e2:	f7ff bb2c 	b.w	800f83e <__ieee754_pow+0x3e>
 80101e6:	4630      	mov	r0, r6
 80101e8:	4639      	mov	r1, r7
 80101ea:	f7ff bb28 	b.w	800f83e <__ieee754_pow+0x3e>
 80101ee:	9204      	str	r2, [sp, #16]
 80101f0:	f7ff bb7a 	b.w	800f8e8 <__ieee754_pow+0xe8>
 80101f4:	2300      	movs	r3, #0
 80101f6:	f7ff bb64 	b.w	800f8c2 <__ieee754_pow+0xc2>
 80101fa:	bf00      	nop
 80101fc:	f3af 8000 	nop.w
 8010200:	00000000 	.word	0x00000000
 8010204:	3fe62e43 	.word	0x3fe62e43
 8010208:	fefa39ef 	.word	0xfefa39ef
 801020c:	3fe62e42 	.word	0x3fe62e42
 8010210:	0ca86c39 	.word	0x0ca86c39
 8010214:	be205c61 	.word	0xbe205c61
 8010218:	72bea4d0 	.word	0x72bea4d0
 801021c:	3e663769 	.word	0x3e663769
 8010220:	c5d26bf1 	.word	0xc5d26bf1
 8010224:	3ebbbd41 	.word	0x3ebbbd41
 8010228:	af25de2c 	.word	0xaf25de2c
 801022c:	3f11566a 	.word	0x3f11566a
 8010230:	16bebd93 	.word	0x16bebd93
 8010234:	3f66c16c 	.word	0x3f66c16c
 8010238:	5555553e 	.word	0x5555553e
 801023c:	3fc55555 	.word	0x3fc55555
 8010240:	3fe00000 	.word	0x3fe00000
 8010244:	000fffff 	.word	0x000fffff
 8010248:	3ff00000 	.word	0x3ff00000
 801024c:	4090cbff 	.word	0x4090cbff
 8010250:	3f6f3400 	.word	0x3f6f3400
 8010254:	652b82fe 	.word	0x652b82fe
 8010258:	3c971547 	.word	0x3c971547

0801025c <__ieee754_sqrt>:
 801025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010260:	ec55 4b10 	vmov	r4, r5, d0
 8010264:	4e55      	ldr	r6, [pc, #340]	; (80103bc <__ieee754_sqrt+0x160>)
 8010266:	43ae      	bics	r6, r5
 8010268:	ee10 0a10 	vmov	r0, s0
 801026c:	ee10 3a10 	vmov	r3, s0
 8010270:	462a      	mov	r2, r5
 8010272:	4629      	mov	r1, r5
 8010274:	d110      	bne.n	8010298 <__ieee754_sqrt+0x3c>
 8010276:	ee10 2a10 	vmov	r2, s0
 801027a:	462b      	mov	r3, r5
 801027c:	f7f0 f9bc 	bl	80005f8 <__aeabi_dmul>
 8010280:	4602      	mov	r2, r0
 8010282:	460b      	mov	r3, r1
 8010284:	4620      	mov	r0, r4
 8010286:	4629      	mov	r1, r5
 8010288:	f7f0 f800 	bl	800028c <__adddf3>
 801028c:	4604      	mov	r4, r0
 801028e:	460d      	mov	r5, r1
 8010290:	ec45 4b10 	vmov	d0, r4, r5
 8010294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010298:	2d00      	cmp	r5, #0
 801029a:	dc10      	bgt.n	80102be <__ieee754_sqrt+0x62>
 801029c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80102a0:	4330      	orrs	r0, r6
 80102a2:	d0f5      	beq.n	8010290 <__ieee754_sqrt+0x34>
 80102a4:	b15d      	cbz	r5, 80102be <__ieee754_sqrt+0x62>
 80102a6:	ee10 2a10 	vmov	r2, s0
 80102aa:	462b      	mov	r3, r5
 80102ac:	ee10 0a10 	vmov	r0, s0
 80102b0:	f7ef ffea 	bl	8000288 <__aeabi_dsub>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	f7f0 fac8 	bl	800084c <__aeabi_ddiv>
 80102bc:	e7e6      	b.n	801028c <__ieee754_sqrt+0x30>
 80102be:	1512      	asrs	r2, r2, #20
 80102c0:	d074      	beq.n	80103ac <__ieee754_sqrt+0x150>
 80102c2:	07d4      	lsls	r4, r2, #31
 80102c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80102c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80102cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80102d0:	bf5e      	ittt	pl
 80102d2:	0fda      	lsrpl	r2, r3, #31
 80102d4:	005b      	lslpl	r3, r3, #1
 80102d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80102da:	2400      	movs	r4, #0
 80102dc:	0fda      	lsrs	r2, r3, #31
 80102de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80102e2:	107f      	asrs	r7, r7, #1
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	2516      	movs	r5, #22
 80102e8:	4620      	mov	r0, r4
 80102ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80102ee:	1886      	adds	r6, r0, r2
 80102f0:	428e      	cmp	r6, r1
 80102f2:	bfde      	ittt	le
 80102f4:	1b89      	suble	r1, r1, r6
 80102f6:	18b0      	addle	r0, r6, r2
 80102f8:	18a4      	addle	r4, r4, r2
 80102fa:	0049      	lsls	r1, r1, #1
 80102fc:	3d01      	subs	r5, #1
 80102fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010302:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010306:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801030a:	d1f0      	bne.n	80102ee <__ieee754_sqrt+0x92>
 801030c:	462a      	mov	r2, r5
 801030e:	f04f 0e20 	mov.w	lr, #32
 8010312:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010316:	4281      	cmp	r1, r0
 8010318:	eb06 0c05 	add.w	ip, r6, r5
 801031c:	dc02      	bgt.n	8010324 <__ieee754_sqrt+0xc8>
 801031e:	d113      	bne.n	8010348 <__ieee754_sqrt+0xec>
 8010320:	459c      	cmp	ip, r3
 8010322:	d811      	bhi.n	8010348 <__ieee754_sqrt+0xec>
 8010324:	f1bc 0f00 	cmp.w	ip, #0
 8010328:	eb0c 0506 	add.w	r5, ip, r6
 801032c:	da43      	bge.n	80103b6 <__ieee754_sqrt+0x15a>
 801032e:	2d00      	cmp	r5, #0
 8010330:	db41      	blt.n	80103b6 <__ieee754_sqrt+0x15a>
 8010332:	f100 0801 	add.w	r8, r0, #1
 8010336:	1a09      	subs	r1, r1, r0
 8010338:	459c      	cmp	ip, r3
 801033a:	bf88      	it	hi
 801033c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010340:	eba3 030c 	sub.w	r3, r3, ip
 8010344:	4432      	add	r2, r6
 8010346:	4640      	mov	r0, r8
 8010348:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801034c:	f1be 0e01 	subs.w	lr, lr, #1
 8010350:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010354:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010358:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801035c:	d1db      	bne.n	8010316 <__ieee754_sqrt+0xba>
 801035e:	430b      	orrs	r3, r1
 8010360:	d006      	beq.n	8010370 <__ieee754_sqrt+0x114>
 8010362:	1c50      	adds	r0, r2, #1
 8010364:	bf13      	iteet	ne
 8010366:	3201      	addne	r2, #1
 8010368:	3401      	addeq	r4, #1
 801036a:	4672      	moveq	r2, lr
 801036c:	f022 0201 	bicne.w	r2, r2, #1
 8010370:	1063      	asrs	r3, r4, #1
 8010372:	0852      	lsrs	r2, r2, #1
 8010374:	07e1      	lsls	r1, r4, #31
 8010376:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801037a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801037e:	bf48      	it	mi
 8010380:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010384:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010388:	4614      	mov	r4, r2
 801038a:	e781      	b.n	8010290 <__ieee754_sqrt+0x34>
 801038c:	0ad9      	lsrs	r1, r3, #11
 801038e:	3815      	subs	r0, #21
 8010390:	055b      	lsls	r3, r3, #21
 8010392:	2900      	cmp	r1, #0
 8010394:	d0fa      	beq.n	801038c <__ieee754_sqrt+0x130>
 8010396:	02cd      	lsls	r5, r1, #11
 8010398:	d50a      	bpl.n	80103b0 <__ieee754_sqrt+0x154>
 801039a:	f1c2 0420 	rsb	r4, r2, #32
 801039e:	fa23 f404 	lsr.w	r4, r3, r4
 80103a2:	1e55      	subs	r5, r2, #1
 80103a4:	4093      	lsls	r3, r2
 80103a6:	4321      	orrs	r1, r4
 80103a8:	1b42      	subs	r2, r0, r5
 80103aa:	e78a      	b.n	80102c2 <__ieee754_sqrt+0x66>
 80103ac:	4610      	mov	r0, r2
 80103ae:	e7f0      	b.n	8010392 <__ieee754_sqrt+0x136>
 80103b0:	0049      	lsls	r1, r1, #1
 80103b2:	3201      	adds	r2, #1
 80103b4:	e7ef      	b.n	8010396 <__ieee754_sqrt+0x13a>
 80103b6:	4680      	mov	r8, r0
 80103b8:	e7bd      	b.n	8010336 <__ieee754_sqrt+0xda>
 80103ba:	bf00      	nop
 80103bc:	7ff00000 	.word	0x7ff00000

080103c0 <with_errno>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	4604      	mov	r4, r0
 80103c4:	460d      	mov	r5, r1
 80103c6:	4616      	mov	r6, r2
 80103c8:	f7fa fc4e 	bl	800ac68 <__errno>
 80103cc:	4629      	mov	r1, r5
 80103ce:	6006      	str	r6, [r0, #0]
 80103d0:	4620      	mov	r0, r4
 80103d2:	bd70      	pop	{r4, r5, r6, pc}

080103d4 <xflow>:
 80103d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103d6:	4614      	mov	r4, r2
 80103d8:	461d      	mov	r5, r3
 80103da:	b108      	cbz	r0, 80103e0 <xflow+0xc>
 80103dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80103e0:	e9cd 2300 	strd	r2, r3, [sp]
 80103e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103e8:	4620      	mov	r0, r4
 80103ea:	4629      	mov	r1, r5
 80103ec:	f7f0 f904 	bl	80005f8 <__aeabi_dmul>
 80103f0:	2222      	movs	r2, #34	; 0x22
 80103f2:	b003      	add	sp, #12
 80103f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103f8:	f7ff bfe2 	b.w	80103c0 <with_errno>

080103fc <__math_uflow>:
 80103fc:	b508      	push	{r3, lr}
 80103fe:	2200      	movs	r2, #0
 8010400:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010404:	f7ff ffe6 	bl	80103d4 <xflow>
 8010408:	ec41 0b10 	vmov	d0, r0, r1
 801040c:	bd08      	pop	{r3, pc}

0801040e <__math_oflow>:
 801040e:	b508      	push	{r3, lr}
 8010410:	2200      	movs	r2, #0
 8010412:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010416:	f7ff ffdd 	bl	80103d4 <xflow>
 801041a:	ec41 0b10 	vmov	d0, r0, r1
 801041e:	bd08      	pop	{r3, pc}

08010420 <fabs>:
 8010420:	ec51 0b10 	vmov	r0, r1, d0
 8010424:	ee10 2a10 	vmov	r2, s0
 8010428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801042c:	ec43 2b10 	vmov	d0, r2, r3
 8010430:	4770      	bx	lr

08010432 <finite>:
 8010432:	b082      	sub	sp, #8
 8010434:	ed8d 0b00 	vstr	d0, [sp]
 8010438:	9801      	ldr	r0, [sp, #4]
 801043a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801043e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010442:	0fc0      	lsrs	r0, r0, #31
 8010444:	b002      	add	sp, #8
 8010446:	4770      	bx	lr

08010448 <scalbn>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	ec55 4b10 	vmov	r4, r5, d0
 801044e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010452:	4606      	mov	r6, r0
 8010454:	462b      	mov	r3, r5
 8010456:	b99a      	cbnz	r2, 8010480 <scalbn+0x38>
 8010458:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801045c:	4323      	orrs	r3, r4
 801045e:	d036      	beq.n	80104ce <scalbn+0x86>
 8010460:	4b39      	ldr	r3, [pc, #228]	; (8010548 <scalbn+0x100>)
 8010462:	4629      	mov	r1, r5
 8010464:	ee10 0a10 	vmov	r0, s0
 8010468:	2200      	movs	r2, #0
 801046a:	f7f0 f8c5 	bl	80005f8 <__aeabi_dmul>
 801046e:	4b37      	ldr	r3, [pc, #220]	; (801054c <scalbn+0x104>)
 8010470:	429e      	cmp	r6, r3
 8010472:	4604      	mov	r4, r0
 8010474:	460d      	mov	r5, r1
 8010476:	da10      	bge.n	801049a <scalbn+0x52>
 8010478:	a32b      	add	r3, pc, #172	; (adr r3, 8010528 <scalbn+0xe0>)
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	e03a      	b.n	80104f6 <scalbn+0xae>
 8010480:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010484:	428a      	cmp	r2, r1
 8010486:	d10c      	bne.n	80104a2 <scalbn+0x5a>
 8010488:	ee10 2a10 	vmov	r2, s0
 801048c:	4620      	mov	r0, r4
 801048e:	4629      	mov	r1, r5
 8010490:	f7ef fefc 	bl	800028c <__adddf3>
 8010494:	4604      	mov	r4, r0
 8010496:	460d      	mov	r5, r1
 8010498:	e019      	b.n	80104ce <scalbn+0x86>
 801049a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801049e:	460b      	mov	r3, r1
 80104a0:	3a36      	subs	r2, #54	; 0x36
 80104a2:	4432      	add	r2, r6
 80104a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80104a8:	428a      	cmp	r2, r1
 80104aa:	dd08      	ble.n	80104be <scalbn+0x76>
 80104ac:	2d00      	cmp	r5, #0
 80104ae:	a120      	add	r1, pc, #128	; (adr r1, 8010530 <scalbn+0xe8>)
 80104b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104b4:	da1c      	bge.n	80104f0 <scalbn+0xa8>
 80104b6:	a120      	add	r1, pc, #128	; (adr r1, 8010538 <scalbn+0xf0>)
 80104b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104bc:	e018      	b.n	80104f0 <scalbn+0xa8>
 80104be:	2a00      	cmp	r2, #0
 80104c0:	dd08      	ble.n	80104d4 <scalbn+0x8c>
 80104c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80104c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80104ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80104ce:	ec45 4b10 	vmov	d0, r4, r5
 80104d2:	bd70      	pop	{r4, r5, r6, pc}
 80104d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80104d8:	da19      	bge.n	801050e <scalbn+0xc6>
 80104da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80104de:	429e      	cmp	r6, r3
 80104e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80104e4:	dd0a      	ble.n	80104fc <scalbn+0xb4>
 80104e6:	a112      	add	r1, pc, #72	; (adr r1, 8010530 <scalbn+0xe8>)
 80104e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d1e2      	bne.n	80104b6 <scalbn+0x6e>
 80104f0:	a30f      	add	r3, pc, #60	; (adr r3, 8010530 <scalbn+0xe8>)
 80104f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f6:	f7f0 f87f 	bl	80005f8 <__aeabi_dmul>
 80104fa:	e7cb      	b.n	8010494 <scalbn+0x4c>
 80104fc:	a10a      	add	r1, pc, #40	; (adr r1, 8010528 <scalbn+0xe0>)
 80104fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d0b8      	beq.n	8010478 <scalbn+0x30>
 8010506:	a10e      	add	r1, pc, #56	; (adr r1, 8010540 <scalbn+0xf8>)
 8010508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801050c:	e7b4      	b.n	8010478 <scalbn+0x30>
 801050e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010512:	3236      	adds	r2, #54	; 0x36
 8010514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010518:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801051c:	4620      	mov	r0, r4
 801051e:	4b0c      	ldr	r3, [pc, #48]	; (8010550 <scalbn+0x108>)
 8010520:	2200      	movs	r2, #0
 8010522:	e7e8      	b.n	80104f6 <scalbn+0xae>
 8010524:	f3af 8000 	nop.w
 8010528:	c2f8f359 	.word	0xc2f8f359
 801052c:	01a56e1f 	.word	0x01a56e1f
 8010530:	8800759c 	.word	0x8800759c
 8010534:	7e37e43c 	.word	0x7e37e43c
 8010538:	8800759c 	.word	0x8800759c
 801053c:	fe37e43c 	.word	0xfe37e43c
 8010540:	c2f8f359 	.word	0xc2f8f359
 8010544:	81a56e1f 	.word	0x81a56e1f
 8010548:	43500000 	.word	0x43500000
 801054c:	ffff3cb0 	.word	0xffff3cb0
 8010550:	3c900000 	.word	0x3c900000

08010554 <_init>:
 8010554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010556:	bf00      	nop
 8010558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801055a:	bc08      	pop	{r3}
 801055c:	469e      	mov	lr, r3
 801055e:	4770      	bx	lr

08010560 <_fini>:
 8010560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010562:	bf00      	nop
 8010564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010566:	bc08      	pop	{r3}
 8010568:	469e      	mov	lr, r3
 801056a:	4770      	bx	lr
